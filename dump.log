commit fac60efb4538878d5101aec7fe8ec6e75ae2bcc2
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 20:55:43 2023 +0500

    tried changes that didnt work

commit 653ed11f42b81b7f24a0b7dbd835421585359f09
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 20:12:27 2023 +0500

    Fix left over unresolved conflict from 95080b446ad686c6e0c3d19a12cb5e6692ecb77a

commit 4ccb465ef2f4e5e56676ef7d32eecbe52567209a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Apr 10 13:20:12 2021 +0200

    Linux 4.14.230
    
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210409095300.391558233@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f702177b0ef31123af161be8cefe55609fd647e3
Author: Angelo Dureghello <angelo@kernel-space.org>
Date:   Tue Mar 16 00:15:10 2021 +0100

    can: flexcan: flexcan_chip_freeze(): fix chip freeze for missing bitrate
    
    commit 47c5e474bc1e1061fb037d13b5000b38967eb070 upstream.
    
    For cases when flexcan is built-in, bitrate is still not set at
    registering. So flexcan_chip_freeze() generates:
    
    [    1.860000] *** ZERO DIVIDE ***   FORMAT=4
    [    1.860000] Current process id is 1
    [    1.860000] BAD KERNEL TRAP: 00000000
    [    1.860000] PC: [<402e70c8>] flexcan_chip_freeze+0x1a/0xa8
    
    To allow chip freeze, using an hardcoded timeout when bitrate is still
    not set.
    
    Fixes: ec15e27cc890 ("can: flexcan: enable RX FIFO after FRZ/HALT valid")
    Link: https://lore.kernel.org/r/20210315231510.650593-1-angelo@kernel-space.org
    Signed-off-by: Angelo Dureghello <angelo@kernel-space.org>
    [mkl: use if instead of ? operator]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Cc: Koen Vandeputte <koen.vandeputte@citymesh.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1ba2310942aa29765852422f50165b258e8d013
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Fri Mar 12 21:07:08 2021 -0800

    init/Kconfig: make COMPILE_TEST depend on HAS_IOMEM
    
    commit ea29b20a828511de3348334e529a3d046a180416 upstream.
    
    I read the commit log of the following two:
    
    - bc083a64b6c0 ("init/Kconfig: make COMPILE_TEST depend on !UML")
    - 334ef6ed06fa ("init/Kconfig: make COMPILE_TEST depend on !S390")
    
    Both are talking about HAS_IOMEM dependency missing in many drivers.
    
    So, 'depends on HAS_IOMEM' seems the direct, sensible solution to me.
    
    This does not change the behavior of UML. UML still cannot enable
    COMPILE_TEST because it does not provide HAS_IOMEM.
    
    The current dependency for S390 is too strong. Under the condition of
    CONFIG_PCI=y, S390 provides HAS_IOMEM, hence can enable COMPILE_TEST.
    
    I also removed the meaningless 'default n'.
    
    Link: https://lkml.kernel.org/r/20210224140809.1067582-1-masahiroy@kernel.org
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Arnd Bergmann <arnd@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: KP Singh <kpsingh@google.com>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Terrell <terrelln@fb.com>
    Cc: Quentin Perret <qperret@google.com>
    Cc: Valentin Schneider <valentin.schneider@arm.com>
    Cc: "Enrico Weigelt, metux IT consult" <lkml@metux.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37e5450b658dc3beee673cf54c82ee149b41c416
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Wed Nov 18 21:32:33 2020 +0100

    init/Kconfig: make COMPILE_TEST depend on !S390
    
    commit 334ef6ed06fa1a54e35296b77b693bcf6d63ee9e upstream.
    
    While allmodconfig and allyesconfig build for s390 there are also
    various bots running compile tests with randconfig, where PCI is
    disabled. This reveals that a lot of drivers should actually depend on
    HAS_IOMEM.
    Adding this to each device driver would be a never ending story,
    therefore just disable COMPILE_TEST for s390.
    
    The reasoning is more or less the same as described in
    commit bc083a64b6c0 ("init/Kconfig: make COMPILE_TEST depend on !UML").
    
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: Arnd Bergmann <arnd@kernel.org>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a9a114ccae65a930bc9f61eeeed5d0c57005d81
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Mon Apr 5 22:52:15 2021 +0100

    bpf, x86: Validate computation of branch displacements for x86-64
    
    commit e4d4d456436bfb2fe412ee2cd489f7658449b098 upstream.
    
    The branch displacement logic in the BPF JIT compilers for x86 assumes
    that, for any generated branch instruction, the distance cannot
    increase between optimization passes.
    
    But this assumption can be violated due to how the distances are
    computed. Specifically, whenever a backward branch is processed in
    do_jit(), the distance is computed by subtracting the positions in the
    machine code from different optimization passes. This is because part
    of addrs[] is already updated for the current optimization pass, before
    the branch instruction is visited.
    
    And so the optimizer can expand blocks of machine code in some cases.
    
    This can confuse the optimizer logic, where it assumes that a fixed
    point has been reached for all machine code blocks once the total
    program size stops changing. And then the JIT compiler can output
    abnormal machine code containing incorrect branch displacements.
    
    To mitigate this issue, we assert that a fixed point is reached while
    populating the output image. This rejects any problematic programs.
    The issue affects both x86-32 and x86-64. We mitigate separately to
    ease backporting.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Reviewed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f5d0de3bf5948bc00d911a9a3a100a8c5689000
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Fri Mar 19 14:57:11 2021 +0100

    cifs: Silently ignore unknown oplock break handle
    
    [ Upstream commit 219481a8f90ec3a5eed9638fb35609e4b1aeece7 ]
    
    Make SMB2 not print out an error when an oplock break is received for an
    unknown handle, similar to SMB1.  The debug message which is printed for
    these unknown handles may also be misleading, so fix that too.
    
    The SMB2 lease break path is not affected by this patch.
    
    Without this, a program which writes to a file from one thread, and
    opens, reads, and writes the same file from another thread triggers the
    below errors several times a minute when run against a Samba server
    configured with "smb2 leases = no".
    
     CIFS: VFS: \\192.168.0.1 No task to wake, unknown frame received! NumMids 2
     00000000: 424d53fe 00000040 00000000 00000012  .SMB@...........
     00000010: 00000001 00000000 ffffffff ffffffff  ................
     00000020: 00000000 00000000 00000000 00000000  ................
     00000030: 00000000 00000000 00000000 00000000  ................
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Reviewed-by: Tom Talpey <tom@talpey.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6592511a55aa445d1dbd08a425a0bd358c5c6de4
Author: Ronnie Sahlberg <lsahlber@redhat.com>
Date:   Thu Mar 25 16:26:35 2021 +1000

    cifs: revalidate mapping when we open files for SMB1 POSIX
    
    [ Upstream commit cee8f4f6fcabfdf229542926128e9874d19016d5 ]
    
    RHBZ: 1933527
    
    Under SMB1 + POSIX, if an inode is reused on a server after we have read and
    cached a part of a file, when we then open the new file with the
    re-cycled inode there is a chance that we may serve the old data out of cache
    to the application.
    This only happens for SMB1 (deprecated) and when posix are used.
    The simplest solution to avoid this race is to force a revalidate
    on smb1-posix open.
    
    Signed-off-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adf648e39be441c5aa4c21fc75bf1dc84115d8d6
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Wed Mar 24 21:37:38 2021 -0700

    ia64: mca: allocate early mca with GFP_ATOMIC
    
    [ Upstream commit f2a419cf495f95cac49ea289318b833477e1a0e2 ]
    
    The sleep warning happens at early boot right at secondary CPU
    activation bootup:
    
        smp: Bringing up secondary CPUs ...
        BUG: sleeping function called from invalid context at mm/page_alloc.c:4942
        in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 0, name: swapper/1
        CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.12.0-rc2-00007-g79e228d0b611-dirty #99
        ..
        Call Trace:
          show_stack+0x90/0xc0
          dump_stack+0x150/0x1c0
          ___might_sleep+0x1c0/0x2a0
          __might_sleep+0xa0/0x160
          __alloc_pages_nodemask+0x1a0/0x600
          alloc_page_interleave+0x30/0x1c0
          alloc_pages_current+0x2c0/0x340
          __get_free_pages+0x30/0xa0
          ia64_mca_cpu_init+0x2d0/0x3a0
          cpu_init+0x8b0/0x1440
          start_secondary+0x60/0x700
          start_ap+0x750/0x780
        Fixed BSP b0 value from CPU 1
    
    As I understand interrupts are not enabled yet and system has a lot of
    memory.  There is little chance to sleep and switch to GFP_ATOMIC should
    be a no-op.
    
    Link: https://lkml.kernel.org/r/20210315085045.204414-1-slyfox@gentoo.org
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f101e17331a46be1065e9963a99e1e1503c7e18d
Author: Martin Wilck <mwilck@suse.com>
Date:   Tue Mar 23 22:24:31 2021 +0100

    scsi: target: pscsi: Clean up after failure in pscsi_map_sg()
    
    [ Upstream commit 36fa766faa0c822c860e636fe82b1affcd022974 ]
    
    If pscsi_map_sg() fails, make sure to drop references to already allocated
    bios.
    
    Link: https://lore.kernel.org/r/20210323212431.15306-2-mwilck@suse.com
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dd3a69fc86c3a71a2f7955bb53b7284bf6226be
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Mar 23 13:48:36 2021 +0100

    x86/build: Turn off -fcf-protection for realmode targets
    
    [ Upstream commit 9fcb51c14da2953de585c5c6e50697b8a6e91a7b ]
    
    The new Ubuntu GCC packages turn on -fcf-protection globally,
    which causes a build failure in the x86 realmode code:
    
      cc1: error: ‘-fcf-protection’ is not compatible with this target
    
    Turn it off explicitly on compilers that understand this option.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20210323124846.1584944-1-arnd@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8d62e59417cb4f6d716dbe07b0aaf48837cf3d5
Author: Esteve Varela Colominas <esteve.varela@gmail.com>
Date:   Mon Mar 15 20:58:24 2021 +0100

    platform/x86: thinkpad_acpi: Allow the FnLock LED to change state
    
    [ Upstream commit 3d677f12ea3a2097a16ded570623567403dea959 ]
    
    On many recent ThinkPad laptops, there's a new LED next to the ESC key,
    that indicates the FnLock status.
    When the Fn+ESC combo is pressed, FnLock is toggled, which causes the
    Media Key functionality to change, making it so that the media keys
    either perform their media key function, or function as an F-key by
    default. The Fn key can be used the access the alternate function at any
    time.
    
    With the current linux kernel, the LED doens't change state if you press
    the Fn+ESC key combo. However, the media key functionality *does*
    change. This is annoying, since the LED will stay on if it was on during
    bootup, and it makes it hard to keep track what the current state of the
    FnLock is.
    
    This patch calls an ACPI function, that gets the current media key
    state, when the Fn+ESC key combo is pressed. Through testing it was
    discovered that this function causes the LED to update correctly to
    reflect the current state when this function is called.
    
    The relevant ACPI calls are the following:
    \_SB_.PCI0.LPC0.EC0_.HKEY.GMKS: Get media key state, returns 0x603 if the FnLock mode is enabled, and 0x602 if it's disabled.
    \_SB_.PCI0.LPC0.EC0_.HKEY.SMKS: Set media key state, sending a 1 will enable FnLock mode, and a 0 will disable it.
    
    Relevant discussion:
    https://bugzilla.kernel.org/show_bug.cgi?id=207841
    https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1881015
    
    Signed-off-by: Esteve Varela Colominas <esteve.varela@gmail.com>
    Link: https://lore.kernel.org/r/20210315195823.23212-1-esteve.varela@gmail.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1bbcb1bc3ece77cb3d2826ba391021af5f47a39
Author: Rob Clark <robdclark@chromium.org>
Date:   Wed Mar 17 09:40:38 2021 -0700

    drm/msm: Ratelimit invalid-fence message
    
    [ Upstream commit 7ad48d27a2846bfda29214fb454d001c3e02b9e7 ]
    
    We have seen a couple cases where low memory situations cause something
    bad to happen, followed by a flood of these messages obscuring the root
    cause.  Lets ratelimit the dmesg spam so that next time it happens we
    don't lose the kernel traces leading up to this.
    
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2aa24d89e7c607979412e91542f4b310c6854f8
Author: Karthikeyan Kathirvel <kathirve@codeaurora.org>
Date:   Thu Mar 11 10:59:07 2021 +0530

    mac80211: choose first enabled channel for monitor
    
    [ Upstream commit 041c881a0ba8a75f71118bd9766b78f04beed469 ]
    
    Even if the first channel from sband channel list is invalid
    or disabled mac80211 ends up choosing it as the default channel
    for monitor interfaces, making them not usable.
    
    Fix this by assigning the first available valid or enabled
    channel instead.
    
    Signed-off-by: Karthikeyan Kathirvel <kathirve@codeaurora.org>
    Link: https://lore.kernel.org/r/1615440547-7661-1-git-send-email-kathirve@codeaurora.org
    [reword commit message, comment, code cleanups]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9e03576f073c006098382b1e0ba653b33a9dc8a
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Wed Mar 10 23:27:35 2021 -0500

    mISDN: fix crash in fritzpci
    
    [ Upstream commit a9f81244d2e33e6dfcef120fefd30c96b3f7cdb0 ]
    
    setup_fritz() in avmfritz.c might fail with -EIO and in this case the
    isac.type and isac.write_reg is not initialized and remains 0(NULL).
    A subsequent call to isac_release() will dereference isac->write_reg and
    crash.
    
    [    1.737444] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [    1.737809] #PF: supervisor instruction fetch in kernel mode
    [    1.738106] #PF: error_code(0x0010) - not-present page
    [    1.738378] PGD 0 P4D 0
    [    1.738515] Oops: 0010 [#1] SMP NOPTI
    [    1.738711] CPU: 0 PID: 180 Comm: systemd-udevd Not tainted 5.12.0-rc2+ #78
    [    1.739077] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-48-gd9c812dda519-p
    rebuilt.qemu.org 04/01/2014
    [    1.739664] RIP: 0010:0x0
    [    1.739807] Code: Unable to access opcode bytes at RIP 0xffffffffffffffd6.
    [    1.740200] RSP: 0018:ffffc9000027ba10 EFLAGS: 00010202
    [    1.740478] RAX: 0000000000000000 RBX: ffff888102f41840 RCX: 0000000000000027
    [    1.740853] RDX: 00000000000000ff RSI: 0000000000000020 RDI: ffff888102f41800
    [    1.741226] RBP: ffffc9000027ba20 R08: ffff88817bc18440 R09: ffffc9000027b808
    [    1.741600] R10: 0000000000000001 R11: 0000000000000001 R12: ffff888102f41840
    [    1.741976] R13: 00000000fffffffb R14: ffff888102f41800 R15: ffff8881008b0000
    [    1.742351] FS:  00007fda3a38a8c0(0000) GS:ffff88817bc00000(0000) knlGS:0000000000000000
    [    1.742774] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    1.743076] CR2: ffffffffffffffd6 CR3: 00000001021ec000 CR4: 00000000000006f0
    [    1.743452] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [    1.743828] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [    1.744206] Call Trace:
    [    1.744339]  isac_release+0xcc/0xe0 [mISDNipac]
    [    1.744582]  fritzpci_probe.cold+0x282/0x739 [avmfritz]
    [    1.744861]  local_pci_probe+0x48/0x80
    [    1.745063]  pci_device_probe+0x10f/0x1c0
    [    1.745278]  really_probe+0xfb/0x420
    [    1.745471]  driver_probe_device+0xe9/0x160
    [    1.745693]  device_driver_attach+0x5d/0x70
    [    1.745917]  __driver_attach+0x8f/0x150
    [    1.746123]  ? device_driver_attach+0x70/0x70
    [    1.746354]  bus_for_each_dev+0x7e/0xc0
    [    1.746560]  driver_attach+0x1e/0x20
    [    1.746751]  bus_add_driver+0x152/0x1f0
    [    1.746957]  driver_register+0x74/0xd0
    [    1.747157]  ? 0xffffffffc00d8000
    [    1.747334]  __pci_register_driver+0x54/0x60
    [    1.747562]  AVM_init+0x36/0x1000 [avmfritz]
    [    1.747791]  do_one_initcall+0x48/0x1d0
    [    1.747997]  ? __cond_resched+0x19/0x30
    [    1.748206]  ? kmem_cache_alloc_trace+0x390/0x440
    [    1.748458]  ? do_init_module+0x28/0x250
    [    1.748669]  do_init_module+0x62/0x250
    [    1.748870]  load_module+0x23ee/0x26a0
    [    1.749073]  __do_sys_finit_module+0xc2/0x120
    [    1.749307]  ? __do_sys_finit_module+0xc2/0x120
    [    1.749549]  __x64_sys_finit_module+0x1a/0x20
    [    1.749782]  do_syscall_64+0x38/0x90
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a0c675a50ebf24e0ad849526ce284477acce9d6
Author: Pavel Andrianov <andrianov@ispras.ru>
Date:   Wed Mar 10 11:10:46 2021 +0300

    net: pxa168_eth: Fix a potential data race in pxa168_eth_remove
    
    [ Upstream commit 0571a753cb07982cc82f4a5115e0b321da89e1f3 ]
    
    pxa168_eth_remove() firstly calls unregister_netdev(),
    then cancels a timeout work. unregister_netdev() shuts down a device
    interface and removes it from the kernel tables. If the timeout occurs
    in parallel, the timeout work (pxa168_eth_tx_timeout_task) performs stop
    and open of the device. It may lead to an inconsistent state and memory
    leaks.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Pavel Andrianov <andrianov@ispras.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e67265a31c0d7c11ca563632f585d9237e99abbb
Author: Mans Rullgard <mans@mansr.com>
Date:   Thu Jan 28 15:56:44 2021 +0000

    ARM: dts: am33xx: add aliases for mmc interfaces
    
    [ Upstream commit 9bbce32a20d6a72c767a7f85fd6127babd1410ac ]
    
    Without DT aliases, the numbering of mmc interfaces is unpredictable.
    Adding them makes it possible to refer to devices consistently.  The
    popular suggestion to use UUIDs obviously doesn't work with a blank
    device fresh from the factory.
    
    See commit fa2d0aa96941 ("mmc: core: Allow setting slot index via
    device tree alias") for more discussion.
    
    Signed-off-by: Mans Rullgard <mans@mansr.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e4c89ce3dbdff270ca4541eba6a606c4b23b925
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 7 12:47:05 2021 +0200

    Linux 4.14.229
    
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20210405085021.996963957@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e99495df1e235a9a8e3c4801489a0e0f1c55e065
Author: Du Cheng <ducheng2@gmail.com>
Date:   Fri Mar 12 16:14:21 2021 +0800

    drivers: video: fbcon: fix NULL dereference in fbcon_cursor()
    
    commit 01faae5193d6190b7b3aa93dae43f514e866d652 upstream.
    
    add null-check on function pointer before dereference on ops->cursor
    
    Reported-by: syzbot+b67aaae8d3a927f68d20@syzkaller.appspotmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Du Cheng <ducheng2@gmail.com>
    Link: https://lore.kernel.org/r/20210312081421.452405-1-ducheng2@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c0bf24ae9719361149fc495ace521c132edb351
Author: Atul Gopinathan <atulgopinathan@gmail.com>
Date:   Tue Mar 23 17:04:14 2021 +0530

    staging: rtl8192e: Change state information from u16 to u8
    
    commit e78836ae76d20f38eed8c8c67f21db97529949da upstream.
    
    The "u16 CcxRmState[2];" array field in struct "rtllib_network" has 4
    bytes in total while the operations performed on this array through-out
    the code base are only 2 bytes.
    
    The "CcxRmState" field is fed only 2 bytes of data using memcpy():
    
    (In rtllib_rx.c:1972)
            memcpy(network->CcxRmState, &info_element->data[4], 2)
    
    With "info_element->data[]" being a u8 array, if 2 bytes are written
    into "CcxRmState" (whose one element is u16 size), then the 2 u8
    elements from "data[]" gets squashed and written into the first element
    ("CcxRmState[0]") while the second element ("CcxRmState[1]") is never
    fed with any data.
    
    Same in file rtllib_rx.c:2522:
             memcpy(dst->CcxRmState, src->CcxRmState, 2);
    
    The above line duplicates "src" data to "dst" but only writes 2 bytes
    (and not 4, which is the actual size). Again, only 1st element gets the
    value while the 2nd element remains uninitialized.
    
    This later makes operations done with CcxRmState unpredictable in the
    following lines as the 1st element is having a squashed number while the
    2nd element is having an uninitialized random number.
    
    rtllib_rx.c:1973:    if (network->CcxRmState[0] != 0)
    rtllib_rx.c:1977:    network->MBssidMask = network->CcxRmState[1] & 0x07;
    
    network->MBssidMask is also of type u8 and not u16.
    
    Fix this by changing the type of "CcxRmState" from u16 to u8 so that the
    data written into this array and read from it make sense and are not
    random values.
    
    NOTE: The wrong initialization of "CcxRmState" can be seen in the
    following commit:
    
    commit ecdfa44610fa ("Staging: add Realtek 8192 PCI wireless driver")
    
    The above commit created a file `rtl8192e/ieee80211.h` which used to
    have the faulty line. The file has been deleted (or possibly renamed)
    with the contents copied in to a new file `rtl8192e/rtllib.h` along with
    additional code in the commit 94a799425eee (tagged in Fixes).
    
    Fixes: 94a799425eee ("From: wlanfae <wlanfae@realtek.com> [PATCH 1/8] rtl8192e: Import new version of driver from realtek")
    Cc: stable@vger.kernel.org
    Signed-off-by: Atul Gopinathan <atulgopinathan@gmail.com>
    Link: https://lore.kernel.org/r/20210323113413.29179-2-atulgopinathan@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fa3d8890538cb10483beede0d86526af6d8b4c6
Author: Atul Gopinathan <atulgopinathan@gmail.com>
Date:   Tue Mar 23 17:04:12 2021 +0530

    staging: rtl8192e: Fix incorrect source in memcpy()
    
    commit 72ad25fbbb78930f892b191637359ab5b94b3190 upstream.
    
    The variable "info_element" is of the following type:
    
            struct rtllib_info_element *info_element
    
    defined in drivers/staging/rtl8192e/rtllib.h:
    
            struct rtllib_info_element {
                    u8 id;
                    u8 len;
                    u8 data[];
            } __packed;
    
    The "len" field defines the size of the "data[]" array. The code is
    supposed to check if "info_element->len" is greater than 4 and later
    equal to 6. If this is satisfied then, the last two bytes (the 4th and
    5th element of u8 "data[]" array) are copied into "network->CcxRmState".
    
    Right now the code uses "memcpy()" with the source as "&info_element[4]"
    which would copy in wrong and unintended information. The struct
    "rtllib_info_element" has a size of 2 bytes for "id" and "len",
    therefore indexing will be done in interval of 2 bytes. So,
    "info_element[4]" would point to data which is beyond the memory
    allocated for this pointer (that is, at x+8, while "info_element" has
    been allocated only from x to x+7 (2 + 6 => 8 bytes)).
    
    This patch rectifies this error by using "&info_element->data[4]" which
    correctly copies the last two bytes of "data[]".
    
    NOTE: The faulty line of code came from the following commit:
    
    commit ecdfa44610fa ("Staging: add Realtek 8192 PCI wireless driver")
    
    The above commit created the file `rtl8192e/ieee80211/ieee80211_rx.c`
    which had the faulty line of code. This file has been deleted (or
    possibly renamed) with the contents copied in to a new file
    `rtl8192e/rtllib_rx.c` along with additional code in the commit
    94a799425eee (tagged in Fixes).
    
    Fixes: 94a799425eee ("From: wlanfae <wlanfae@realtek.com> [PATCH 1/8] rtl8192e: Import new version of driver from realtek")
    Cc: stable@vger.kernel.org
    Signed-off-by: Atul Gopinathan <atulgopinathan@gmail.com>
    Link: https://lore.kernel.org/r/20210323113413.29179-1-atulgopinathan@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d469b6a61d7c2c7b451af03bba8f57b0315b165
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Wed Mar 17 19:04:00 2021 -0400

    usb: gadget: udc: amd5536udc_pci fix null-ptr-dereference
    
    commit 72035f4954f0bca2d8c47cf31b3629c42116f5b7 upstream.
    
    init_dma_pools() calls dma_pool_create(...dev->dev) to create dma pool.
    however, dev->dev is actually set after calling init_dma_pools(), which
    effectively makes dma_pool_create(..NULL) and cause crash.
    To fix this issue, init dma only after dev->dev is set.
    
    [    1.317993] RIP: 0010:dma_pool_create+0x83/0x290
    [    1.323257] Call Trace:
    [    1.323390]  ? pci_write_config_word+0x27/0x30
    [    1.323626]  init_dma_pools+0x41/0x1a0 [snps_udc_core]
    [    1.323899]  udc_pci_probe+0x202/0x2b1 [amd5536udc_pci]
    
    Fixes: 7c51247a1f62 (usb: gadget: udc: Provide correct arguments for 'dma_pool_create')
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20210317230400.357756-1-ztong0001@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4e8430cd83ac7d6979eca70b785c0d628ce14c1
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Mar 22 16:53:12 2021 +0100

    USB: cdc-acm: fix use-after-free after probe failure
    
    commit 4e49bf376c0451ad2eae2592e093659cde12be9a upstream.
    
    If tty-device registration fails the driver would fail to release the
    data interface. When the device is later disconnected, the disconnect
    callback would still be called for the data interface and would go about
    releasing already freed resources.
    
    Fixes: c93d81955005 ("usb: cdc-acm: fix error handling in acm_probe()")
    Cc: stable@vger.kernel.org      # 3.9
    Cc: Alexey Khoroshilov <khoroshilov@ispras.ru>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210322155318.9837-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b281b956e68793069b152c8e98c06158c00fd1f
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Mar 11 14:01:26 2021 +0100

    USB: cdc-acm: downgrade message to debug
    
    commit e4c77070ad45fc940af1d7fb1e637c349e848951 upstream.
    
    This failure is so common that logging an error here amounts
    to spamming log files.
    
    Reviewed-by: Bruno Thomsen <bruno.thomsen@gmail.com>
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210311130126.15972-2-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42c2245e621b563a0bcafb0d086615452256a418
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Mar 11 14:01:25 2021 +0100

    USB: cdc-acm: untangle a circular dependency between callback and softint
    
    commit 6069e3e927c8fb3a1947b07d1a561644ea960248 upstream.
    
    We have a cycle of callbacks scheduling works which submit
    URBs with thos callbacks. This needs to be blocked, stopped
    and unblocked to untangle the circle.
    
    The issue leads to faults like:
    
    [   55.068392] Unable to handle kernel paging request at virtual address 6b6b6c03
    [   55.075624] pgd = be866494
    [   55.078335] [6b6b6c03] *pgd=00000000
    [   55.081924] Internal error: Oops: 5 [#1] PREEMPT SMP ARM
    [   55.087238] Modules linked in: ppp_async crc_ccitt ppp_generic slhc
    xt_TCPMSS xt_tcpmss xt_hl nf_log_ipv6 nf_log_ipv4 nf_log_common
    xt_policy xt_limit xt_conntrack xt_tcpudp xt_pkttype ip6table_mangle
    iptable_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4
    iptable_mangle ip6table_filter ip6_tables iptable_filter ip_tables
    des_generic md5 sch_fq_codel cdc_mbim cdc_wdm cdc_ncm usbnet mii
    cdc_acm usb_storage ip_tunnel xfrm_user xfrm6_tunnel tunnel6
    xfrm4_tunnel tunnel4 esp6 esp4 ah6 ah4 xfrm_algo xt_LOG xt_LED
    xt_comment x_tables ipv6
    [   55.134954] CPU: 0 PID: 82 Comm: kworker/0:2 Tainted: G
       T 5.8.17 #1
    [   55.142526] Hardware name: Freescale i.MX7 Dual (Device Tree)
    [   55.148304] Workqueue: events acm_softint [cdc_acm]
    [   55.153196] PC is at kobject_get+0x10/0xa4
    [   55.157302] LR is at usb_get_dev+0x14/0x1c
    [   55.161402] pc : [<8047c06c>]    lr : [<80560448>]    psr: 20000193
    [   55.167671] sp : bca39ea8  ip : 00007374  fp : bf6cbd80
    [   55.172899] r10: 00000000  r9 : bdd92284  r8 : bdd92008
    [   55.178128] r7 : 6b6b6b6b  r6 : fffffffe  r5 : 60000113  r4 : 6b6b6be3
    [   55.184658] r3 : 6b6b6b6b  r2 : 00000111  r1 : 00000000  r0 : 6b6b6be3
    [   55.191191] Flags: nzCv  IRQs off  FIQs on  Mode SVC_32  ISA ARM Segment none
    [   55.198417] Control: 10c5387d  Table: bcf0c06a  DAC: 00000051
    [   55.204168] Process kworker/0:2 (pid: 82, stack limit = 0x9bdd2a89)
    [   55.210439] Stack: (0xbca39ea8 to 0xbca3a000)
    [   55.214805] 9ea0:                   bf6cbd80 80769a50 6b6b6b6b 80560448 bdeb0500 8056bfe8
    [   55.222991] 9ec0: 00000002 b76da000 00000000 bdeb0500 bdd92448 bca38000 bdeb0510 8056d69c
    [   55.231177] 9ee0: bca38000 00000000 80c050fc 00000000 bca39f44 09d42015 00000000 00000001
    [   55.239363] 9f00: bdd92448 bdd92438 bdd92000 7f1158c4 bdd92448 bca2ee00 bf6cbd80 bf6cef00
    [   55.247549] 9f20: 00000000 00000000 00000000 801412d8 bf6cbd98 80c03d00 bca2ee00 bf6cbd80
    [   55.255735] 9f40: bca2ee14 bf6cbd98 80c03d00 00000008 bca38000 80141568 00000000 80c446ae
    [   55.263921] 9f60: 00000000 bc9ed880 bc9f0700 bca38000 bc117eb4 80141524 bca2ee00 bc9ed8a4
    [   55.272107] 9f80: 00000000 80147cc8 00000000 bc9f0700 80147b84 00000000 00000000 00000000
    [   55.280292] 9fa0: 00000000 00000000 00000000 80100148 00000000 00000000 00000000 00000000
    [   55.288477] 9fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [   55.296662] 9fe0: 00000000 00000000 00000000 00000000 00000013 00000000 00000000 00000000
    [   55.304860] [<8047c06c>] (kobject_get) from [<80560448>] (usb_get_dev+0x14/0x1c)
    [   55.312271] [<80560448>] (usb_get_dev) from [<8056bfe8>] (usb_hcd_unlink_urb+0x50/0xd8)
    [   55.320286] [<8056bfe8>] (usb_hcd_unlink_urb) from [<8056d69c>] (usb_kill_urb.part.0+0x44/0xd0)
    [   55.329004] [<8056d69c>] (usb_kill_urb.part.0) from [<7f1158c4>] (acm_softint+0x4c/0x10c [cdc_acm])
    [   55.338082] [<7f1158c4>] (acm_softint [cdc_acm]) from [<801412d8>] (process_one_work+0x19c/0x3e8)
    [   55.346969] [<801412d8>] (process_one_work) from [<80141568>] (worker_thread+0x44/0x4dc)
    [   55.355072] [<80141568>] (worker_thread) from [<80147cc8>] (kthread+0x144/0x180)
    [   55.362481] [<80147cc8>] (kthread) from [<80100148>] (ret_from_fork+0x14/0x2c)
    [   55.369706] Exception stack(0xbca39fb0 to 0xbca39ff8)
    
    Tested-by: Bruno Thomsen <bruno.thomsen@gmail.com>
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210311130126.15972-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f966064648fb86545c86bd39547d155833c7f017
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Mar 11 14:37:14 2021 +0100

    cdc-acm: fix BREAK rx code path adding necessary calls
    
    commit 08dff274edda54310d6f1cf27b62fddf0f8d146e upstream.
    
    Counting break events is nice but we should actually report them to
    the tty layer.
    
    Fixes: 5a6a62bdb9257 ("cdc-acm: add TIOCMIWAIT")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20210311133714.31881-1-oneukum@suse.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7857d0399bab3bd4f800f4bca5225f6166fbae63
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Tue Mar 23 15:02:46 2021 +0800

    usb: xhci-mtk: fix broken streams issue on 0.96 xHCI
    
    commit 6f978a30c9bb12dab1302d0f06951ee290f5e600 upstream.
    
    The MediaTek 0.96 xHCI controller on some platforms does not
    support bulk stream even HCCPARAMS says supporting, due to MaxPSASize
    is set a default value 1 by mistake, here use XHCI_BROKEN_STREAMS
    quirk to fix it.
    
    Fixes: 94a631d91ad3 ("usb: xhci-mtk: check hcc_params after adding primary hcd")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/1616482975-17841-4-git-send-email-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc0150f2eac4a6df877e5202033f277ccc124583
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Mar 24 09:11:41 2021 +0200

    usb: musb: Fix suspend with devices connected for a64
    
    commit 92af4fc6ec331228aca322ca37c8aea7b150a151 upstream.
    
    Pinephone running on Allwinner A64 fails to suspend with USB devices
    connected as reported by Bhushan Shah <bshah@kde.org>. Reverting
    commit 5fbf7a253470 ("usb: musb: fix idling for suspend after
    disconnect interrupt") fixes the issue.
    
    Let's add suspend checks also for suspend after disconnect interrupt
    quirk handling like we already do elsewhere.
    
    Fixes: 5fbf7a253470 ("usb: musb: fix idling for suspend after disconnect interrupt")
    Reported-by: Bhushan Shah <bshah@kde.org>
    Tested-by: Bhushan Shah <bshah@kde.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20210324071142.42264-1-tony@atomide.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d254ad9eeaa321996575bad07d5d6cabcf24c5fd
Author: Vincent Palatin <vpalatin@chromium.org>
Date:   Fri Mar 19 13:48:02 2021 +0100

    USB: quirks: ignore remote wake-up on Fibocom L850-GL LTE modem
    
    commit 0bd860493f81eb2a46173f6f5e44cc38331c8dbd upstream.
    
    This LTE modem (M.2 card) has a bug in its power management:
    there is some kind of race condition for U3 wake-up between the host and
    the device. The modem firmware sometimes crashes/locks when both events
    happen at the same time and the modem fully drops off the USB bus (and
    sometimes re-enumerates, sometimes just gets stuck until the next
    reboot).
    
    Tested with the modem wired to the XHCI controller on an AMD 3015Ce
    platform. Without the patch, the modem dropped of the USB bus 5 times in
    3 days. With the quirk, it stayed connected for a week while the
    'runtime_suspended_time' counter incremented as excepted.
    
    Signed-off-by: Vincent Palatin <vpalatin@chromium.org>
    Link: https://lore.kernel.org/r/20210319124802.2315195-1-vpalatin@chromium.org
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ed7c7db29d6622c77ee4eba4c1f8682c914f1ba
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Wed Mar 24 17:06:54 2021 -0600

    usbip: vhci_hcd fix shift out-of-bounds in vhci_hub_control()
    
    commit 1cc5ed25bdade86de2650a82b2730108a76de20c upstream.
    
    Fix shift out-of-bounds in vhci_hub_control() SetPortFeature handling.
    
    UBSAN: shift-out-of-bounds in drivers/usb/usbip/vhci_hcd.c:605:42
    shift exponent 768 is too large for 32-bit type 'int'
    
    Reported-by: syzbot+3dea30b047f41084de66@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20210324230654.34798-1-skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ba1f2ab4c40b897b85af654c63483a5ba7a9610
Author: Zheyu Ma <zheyuma97@gmail.com>
Date:   Sat Apr 3 06:58:36 2021 +0000

    firewire: nosy: Fix a use-after-free bug in nosy_ioctl()
    
    [ Upstream commit 829933ef05a951c8ff140e814656d73e74915faf ]
    
    For each device, the nosy driver allocates a pcilynx structure.
    A use-after-free might happen in the following scenario:
    
     1. Open nosy device for the first time and call ioctl with command
        NOSY_IOC_START, then a new client A will be malloced and added to
        doubly linked list.
     2. Open nosy device for the second time and call ioctl with command
        NOSY_IOC_START, then a new client B will be malloced and added to
        doubly linked list.
     3. Call ioctl with command NOSY_IOC_START for client A, then client A
        will be readded to the doubly linked list. Now the doubly linked
        list is messed up.
     4. Close the first nosy device and nosy_release will be called. In
        nosy_release, client A will be unlinked and freed.
     5. Close the second nosy device, and client A will be referenced,
        resulting in UAF.
    
    The root cause of this bug is that the element in the doubly linked list
    is reentered into the list.
    
    Fix this bug by adding a check before inserting a client.  If a client
    is already in the linked list, don't insert it.
    
    The following KASAN report reveals it:
    
       BUG: KASAN: use-after-free in nosy_release+0x1ea/0x210
       Write of size 8 at addr ffff888102ad7360 by task poc
       CPU: 3 PID: 337 Comm: poc Not tainted 5.12.0-rc5+ #6
       Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
       Call Trace:
         nosy_release+0x1ea/0x210
         __fput+0x1e2/0x840
         task_work_run+0xe8/0x180
         exit_to_user_mode_prepare+0x114/0x120
         syscall_exit_to_user_mode+0x1d/0x40
         entry_SYSCALL_64_after_hwframe+0x44/0xae
    
       Allocated by task 337:
         nosy_open+0x154/0x4d0
         misc_open+0x2ec/0x410
         chrdev_open+0x20d/0x5a0
         do_dentry_open+0x40f/0xe80
         path_openat+0x1cf9/0x37b0
         do_filp_open+0x16d/0x390
         do_sys_openat2+0x11d/0x360
         __x64_sys_open+0xfd/0x1a0
         do_syscall_64+0x33/0x40
         entry_SYSCALL_64_after_hwframe+0x44/0xae
    
       Freed by task 337:
         kfree+0x8f/0x210
         nosy_release+0x158/0x210
         __fput+0x1e2/0x840
         task_work_run+0xe8/0x180
         exit_to_user_mode_prepare+0x114/0x120
         syscall_exit_to_user_mode+0x1d/0x40
         entry_SYSCALL_64_after_hwframe+0x44/0xae
    
       The buggy address belongs to the object at ffff888102ad7300 which belongs to the cache kmalloc-128 of size 128
       The buggy address is located 96 bytes inside of 128-byte region [ffff888102ad7300, ffff888102ad7380)
    
    [ Modified to use 'list_empty()' inside proper lock  - Linus ]
    
    Link: https://lore.kernel.org/lkml/1617433116-5930-1-git-send-email-zheyuma97@gmail.com/
    Reported-and-tested-by: 马哲宇 (Zheyu Ma) <zheyuma97@gmail.com>
    Signed-off-by: Zheyu Ma <zheyuma97@gmail.com>
    Cc: Greg Kroah-Hartman <greg@kroah.com>
    Cc: Stefan Richter <stefanr@s5r6.in-berlin.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a70fc5b58bc658ba2881b4bb938406ea37918f5a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue Jan 19 16:10:55 2021 +0800

    extcon: Fix error handling in extcon_dev_register
    
    [ Upstream commit d3bdd1c3140724967ca4136755538fa7c05c2b4e ]
    
    When devm_kcalloc() fails, we should execute device_unregister()
    to unregister edev->dev from system.
    
    Fixes: 046050f6e623e ("extcon: Update the prototype of extcon_register_notifier() with enum extcon")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c727858f86c0c99cafab1a095fea8f069d7ffde7
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 31 09:52:52 2020 +0100

    extcon: Add stubs for extcon_register_notifier_all() functions
    
    [ Upstream commit c9570d4a5efd04479b3cd09c39b571eb031d94f4 ]
    
    Add stubs for extcon_register_notifier_all() function for !CONFIG_EXTCON
    case.  This is useful for compile testing and for drivers which use
    EXTCON but do not require it (therefore do not depend on CONFIG_EXTCON).
    
    Fixes: 815429b39d94 ("extcon: Add new extcon_register_notifier_all() to monitor all external connectors")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38033cf77c2766e77e2b537db823654d022bef47
Author: Wang Panzhenzhuan <randy.wang@rock-chips.com>
Date:   Tue Feb 23 18:07:25 2021 +0800

    pinctrl: rockchip: fix restore error in resume
    
    commit c971af25cda94afe71617790826a86253e88eab0 upstream.
    
    The restore in resume should match to suspend which only set for RK3288
    SoCs pinctrl.
    
    Fixes: 8dca933127024 ("pinctrl: rockchip: save and restore gpio6_c6 pinmux in suspend/resume")
    Reviewed-by: Jianqun Xu <jay.xu@rock-chips.com>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Wang Panzhenzhuan <randy.wang@rock-chips.com>
    Signed-off-by: Jianqun Xu <jay.xu@rock-chips.com>
    Link: https://lore.kernel.org/r/20210223100725.269240-1-jay.xu@rock-chips.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ecb1b6f851556681eeb06c01d91b62b51ec87ea
Author: Greg Thelen <gthelen@google.com>
Date:   Tue Mar 30 18:19:10 2021 +0000

    mm: writeback: use exact memcg dirty counts
    
    commit 0b3d6e6f2dd0a7b697b1aa8c167265908940624b upstream.
    
    Since commit a983b5ebee57 ("mm: memcontrol: fix excessive complexity in
    memory.stat reporting") memcg dirty and writeback counters are managed
    as:
    
     1) per-memcg per-cpu values in range of [-32..32]
    
     2) per-memcg atomic counter
    
    When a per-cpu counter cannot fit in [-32..32] it's flushed to the
    atomic.  Stat readers only check the atomic.  Thus readers such as
    balance_dirty_pages() may see a nontrivial error margin: 32 pages per
    cpu.
    
    Assuming 100 cpus:
       4k x86 page_size:  13 MiB error per memcg
      64k ppc page_size: 200 MiB error per memcg
    
    Considering that dirty+writeback are used together for some decisions the
    errors double.
    
    This inaccuracy can lead to undeserved oom kills.  One nasty case is
    when all per-cpu counters hold positive values offsetting an atomic
    negative value (i.e.  per_cpu[*]=32, atomic=n_cpu*-32).
    balance_dirty_pages() only consults the atomic and does not consider
    throttling the next n_cpu*32 dirty pages.  If the file_lru is in the
    13..200 MiB range then there's absolutely no dirty throttling, which
    burdens vmscan with only dirty+writeback pages thus resorting to oom
    kill.
    
    It could be argued that tiny containers are not supported, but it's more
    subtle.  It's the amount the space available for file lru that matters.
    If a container has memory.max-200MiB of non reclaimable memory, then it
    will also suffer such oom kills on a 100 cpu machine.
    
    The following test reliably ooms without this patch.  This patch avoids
    oom kills.
    
      $ cat test
      mount -t cgroup2 none /dev/cgroup
      cd /dev/cgroup
      echo +io +memory > cgroup.subtree_control
      mkdir test
      cd test
      echo 10M > memory.max
      (echo $BASHPID > cgroup.procs && exec /memcg-writeback-stress /foo)
      (echo $BASHPID > cgroup.procs && exec dd if=/dev/zero of=/foo bs=2M count=100)
    
      $ cat memcg-writeback-stress.c
      /*
       * Dirty pages from all but one cpu.
       * Clean pages from the non dirtying cpu.
       * This is to stress per cpu counter imbalance.
       * On a 100 cpu machine:
       * - per memcg per cpu dirty count is 32 pages for each of 99 cpus
       * - per memcg atomic is -99*32 pages
       * - thus the complete dirty limit: sum of all counters 0
       * - balance_dirty_pages() only sees atomic count -99*32 pages, which
       *   it max()s to 0.
       * - So a workload can dirty -99*32 pages before balance_dirty_pages()
       *   cares.
       */
      #define _GNU_SOURCE
      #include <err.h>
      #include <fcntl.h>
      #include <sched.h>
      #include <stdlib.h>
      #include <stdio.h>
      #include <sys/stat.h>
      #include <sys/sysinfo.h>
      #include <sys/types.h>
      #include <unistd.h>
    
      static char *buf;
      static int bufSize;
    
      static void set_affinity(int cpu)
      {
            cpu_set_t affinity;
    
            CPU_ZERO(&affinity);
            CPU_SET(cpu, &affinity);
            if (sched_setaffinity(0, sizeof(affinity), &affinity))
                    err(1, "sched_setaffinity");
      }
    
      static void dirty_on(int output_fd, int cpu)
      {
            int i, wrote;
    
            set_affinity(cpu);
            for (i = 0; i < 32; i++) {
                    for (wrote = 0; wrote < bufSize; ) {
                            int ret = write(output_fd, buf+wrote, bufSize-wrote);
                            if (ret == -1)
                                    err(1, "write");
                            wrote += ret;
                    }
            }
      }
    
      int main(int argc, char **argv)
      {
            int cpu, flush_cpu = 1, output_fd;
            const char *output;
    
            if (argc != 2)
                    errx(1, "usage: output_file");
    
            output = argv[1];
            bufSize = getpagesize();
            buf = malloc(getpagesize());
            if (buf == NULL)
                    errx(1, "malloc failed");
    
            output_fd = open(output, O_CREAT|O_RDWR);
            if (output_fd == -1)
                    err(1, "open(%s)", output);
    
            for (cpu = 0; cpu < get_nprocs(); cpu++) {
                    if (cpu != flush_cpu)
                            dirty_on(output_fd, cpu);
            }
    
            set_affinity(flush_cpu);
            if (fsync(output_fd))
                    err(1, "fsync(%s)", output);
            if (close(output_fd))
                    err(1, "close(%s)", output);
            free(buf);
      }
    
    Make balance_dirty_pages() and wb_over_bg_thresh() work harder to
    collect exact per memcg counters.  This avoids the aforementioned oom
    kills.
    
    This does not affect the overhead of memory.stat, which still reads the
    single atomic counter.
    
    Why not use percpu_counter? memcg already handles cpus going offline, so
    no need for that overhead from percpu_counter.  And the percpu_counter
    spinlocks are more heavyweight than is required.
    
    It probably also makes sense to use exact dirty and writeback counters
    in memcg oom reports.  But that is saved for later.
    
    Link: http://lkml.kernel.org/r/20190329174609.164344-1-gthelen@google.com
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Reviewed-by: Roman Gushchin <guro@fb.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.16+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f61b747d9b3e892f3a2a53c41e889f5f78502c15
Author: Roman Gushchin <guro@fb.com>
Date:   Tue Mar 30 18:19:09 2021 +0000

    mm: fix oom_kill event handling
    
    commit fe6bdfc8e1e131720abbe77a2eb990c94c9024cb upstream.
    
    Commit e27be240df53 ("mm: memcg: make sure memory.events is uptodate
    when waking pollers") converted most of memcg event counters to
    per-memcg atomics, which made them less confusing for a user.  The
    "oom_kill" counter remained untouched, so now it behaves differently
    than other counters (including "oom").  This adds nothing but confusion.
    
    Let's fix this by adding the MEMCG_OOM_KILL event, and follow the
    MEMCG_OOM approach.
    
    This also removes a hack from count_memcg_event_mm(), introduced earlier
    specially for the OOM_KILL counter.
    
    [akpm@linux-foundation.org: fix for droppage of memcg-replace-mm-owner-with-mm-memcg.patch]
    Link: http://lkml.kernel.org/r/20180508124637.29984-1-guro@fb.com
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Acked-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [fllinden@amazon.com: backport to 4.14, minor contextual changes]
    Signed-off-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20c24eb8a9b40617068c017f4849779b7c5c4252
Author: Aaron Lu <aaron.lu@intel.com>
Date:   Tue Mar 30 18:19:08 2021 +0000

    mem_cgroup: make sure moving_account, move_lock_task and stat_cpu in the same cacheline
    
    commit e81bf9793b1861d74953ef041b4f6c7faecc2dbd upstream.
    
    The LKP robot found a 27% will-it-scale/page_fault3 performance
    regression regarding commit e27be240df53("mm: memcg: make sure
    memory.events is uptodate when waking pollers").
    
    What the test does is:
     1 mkstemp() a 128M file on a tmpfs;
     2 start $nr_cpu processes, each to loop the following:
       2.1 mmap() this file in shared write mode;
       2.2 write 0 to this file in a PAGE_SIZE step till the end of the file;
       2.3 unmap() this file and repeat this process.
     3 After 5 minutes, check how many loops they managed to complete, the
       higher the better.
    
    The commit itself looks innocent enough as it merely changed some event
    counting mechanism and this test didn't trigger those events at all.
    Perf shows increased cycles spent on accessing root_mem_cgroup->stat_cpu
    in count_memcg_event_mm()(called by handle_mm_fault()) and in
    __mod_memcg_state() called by page_add_file_rmap().  So it's likely due
    to the changed layout of 'struct mem_cgroup' that either make stat_cpu
    falling into a constantly modifying cacheline or some hot fields stop
    being in the same cacheline.
    
    I verified this by moving memory_events[] back to where it was:
    
    : --- a/include/linux/memcontrol.h
    : +++ b/include/linux/memcontrol.h
    : @@ -205,7 +205,6 @@ struct mem_cgroup {
    :       int             oom_kill_disable;
    :
    :       /* memory.events */
    : -     atomic_long_t memory_events[MEMCG_NR_MEMORY_EVENTS];
    :       struct cgroup_file events_file;
    :
    :       /* protect arrays of thresholds */
    : @@ -238,6 +237,7 @@ struct mem_cgroup {
    :       struct mem_cgroup_stat_cpu __percpu *stat_cpu;
    :       atomic_long_t           stat[MEMCG_NR_STAT];
    :       atomic_long_t           events[NR_VM_EVENT_ITEMS];
    : +     atomic_long_t memory_events[MEMCG_NR_MEMORY_EVENTS];
    :
    :       unsigned long           socket_pressure;
    
    And performance restored.
    
    Later investigation found that as long as the following 3 fields
    moving_account, move_lock_task and stat_cpu are in the same cacheline,
    performance will be good.  To avoid future performance surprise by other
    commits changing the layout of 'struct mem_cgroup', this patch makes
    sure the 3 fields stay in the same cacheline.
    
    One concern of this approach is, moving_account and move_lock_task could
    be modified when a process changes memory cgroup while stat_cpu is a
    always read field, it might hurt to place them in the same cacheline.  I
    assume it is rare for a process to change memory cgroup so this should
    be OK.
    
    Link: https://lkml.kernel.org/r/20180528114019.GF9904@yexl-desktop
    Link: http://lkml.kernel.org/r/20180601071115.GA27302@intel.com
    Signed-off-by: Aaron Lu <aaron.lu@intel.com>
    Reported-by: kernel test robot <xiaolong.ye@intel.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Tejun Heo <tj@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2945c32cffe20c6906b5ffe5b4b8779fd7b7b16e
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Mar 30 18:19:07 2021 +0000

    mm: memcg: make sure memory.events is uptodate when waking pollers
    
    commit e27be240df53f1a20c659168e722b5d9f16cc7f4 upstream.
    
    Commit a983b5ebee57 ("mm: memcontrol: fix excessive complexity in
    memory.stat reporting") added per-cpu drift to all memory cgroup stats
    and events shown in memory.stat and memory.events.
    
    For memory.stat this is acceptable.  But memory.events issues file
    notifications, and somebody polling the file for changes will be
    confused when the counters in it are unchanged after a wakeup.
    
    Luckily, the events in memory.events - MEMCG_LOW, MEMCG_HIGH, MEMCG_MAX,
    MEMCG_OOM - are sufficiently rare and high-level that we don't need
    per-cpu buffering for them: MEMCG_HIGH and MEMCG_MAX would be the most
    frequent, but they're counting invocations of reclaim, which is a
    complex operation that touches many shared cachelines.
    
    This splits memory.events from the generic VM events and tracks them in
    their own, unbuffered atomic counters.  That's also cleaner, as it
    eliminates the ugly enum nesting of VM and cgroup events.
    
    [hannes@cmpxchg.org: "array subscript is above array bounds"]
      Link: http://lkml.kernel.org/r/20180406155441.GA20806@cmpxchg.org
    Link: http://lkml.kernel.org/r/20180405175507.GA24817@cmpxchg.org
    Fixes: a983b5ebee57 ("mm: memcontrol: fix excessive complexity in memory.stat reporting")
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Reported-by: Tejun Heo <tj@kernel.org>
    Acked-by: Tejun Heo <tj@kernel.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffce17b12182d40e65d318915724061729f8a896
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Mar 30 18:19:06 2021 +0000

    mm: memcontrol: fix NR_WRITEBACK leak in memcg and system stats
    
    commit c3cc39118c3610eb6ab4711bc624af7fc48a35fe upstream.
    
    After commit a983b5ebee57 ("mm: memcontrol: fix excessive complexity in
    memory.stat reporting"), we observed slowly upward creeping NR_WRITEBACK
    counts over the course of several days, both the per-memcg stats as well
    as the system counter in e.g.  /proc/meminfo.
    
    The conversion from full per-cpu stat counts to per-cpu cached atomic
    stat counts introduced an irq-unsafe RMW operation into the updates.
    
    Most stat updates come from process context, but one notable exception
    is the NR_WRITEBACK counter.  While writebacks are issued from process
    context, they are retired from (soft)irq context.
    
    When writeback completions interrupt the RMW counter updates of new
    writebacks being issued, the decs from the completions are lost.
    
    Since the global updates are routed through the joint lruvec API, both
    the memcg counters as well as the system counters are affected.
    
    This patch makes the joint stat and event API irq safe.
    
    Link: http://lkml.kernel.org/r/20180203082353.17284-1-hannes@cmpxchg.org
    Fixes: a983b5ebee57 ("mm: memcontrol: fix excessive complexity in memory.stat reporting")
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Debugged-by: Tejun Heo <tj@kernel.org>
    Reviewed-by: Rik van Riel <riel@surriel.com>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 77418c80637f229c8283cc162f1aee685cdd5b80
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Sun Mar 21 23:37:49 2021 +0900

    reiserfs: update reiserfs_xattrs_initialized() condition
    
    commit 5e46d1b78a03d52306f21f77a4e4a144b6d31486 upstream.
    
    syzbot is reporting NULL pointer dereference at reiserfs_security_init()
    [1], for commit ab17c4f02156c4f7 ("reiserfs: fixup xattr_root caching")
    is assuming that REISERFS_SB(s)->xattr_root != NULL in
    reiserfs_xattr_jcreate_nblocks() despite that commit made
    REISERFS_SB(sb)->priv_root != NULL && REISERFS_SB(s)->xattr_root == NULL
    case possible.
    
    I guess that commit 6cb4aff0a77cc0e6 ("reiserfs: fix oops while creating
    privroot with selinux enabled") wanted to check xattr_root != NULL
    before reiserfs_xattr_jcreate_nblocks(), for the changelog is talking
    about the xattr root.
    
      The issue is that while creating the privroot during mount
      reiserfs_security_init calls reiserfs_xattr_jcreate_nblocks which
      dereferences the xattr root. The xattr root doesn't exist, so we get
      an oops.
    
    Therefore, update reiserfs_xattrs_initialized() to check both the
    privroot and the xattr root.
    
    Link: https://syzkaller.appspot.com/bug?id=8abaedbdeb32c861dc5340544284167dd0e46cde # [1]
    Reported-and-tested-by: syzbot <syzbot+690cb1e51970435f9775@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: 6cb4aff0a77c ("reiserfs: fix oops while creating privroot with selinux enabled")
    Acked-by: Jeff Mahoney <jeffm@suse.com>
    Acked-by: Jan Kara <jack@suse.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1229de83eec5662a94a79ad8056ec2dc179dce13
Author: Xℹ Ruoyao <xry111@mengyan1223.wang>
Date:   Tue Mar 30 23:33:34 2021 +0800

    drm/amdgpu: check alignment on CPU page for bo map
    
    commit e3512fb67093fabdf27af303066627b921ee9bd8 upstream.
    
    The page table of AMDGPU requires an alignment to CPU page so we should
    check ioctl parameters for it.  Return -EINVAL if some parameter is
    unaligned to CPU page, instead of corrupt the page table sliently.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Xi Ruoyao <xry111@mengyan1223.wang>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3af3bb7cb1d0b296b0cdcfc9b67af965d507ea7e
Author: Nirmoy Das <nirmoy.das@amd.com>
Date:   Fri Mar 26 16:08:10 2021 +0100

    drm/amdgpu: fix offset calculation in amdgpu_vm_bo_clear_mappings()
    
    commit 5e61b84f9d3ddfba73091f9fbc940caae1c9eb22 upstream.
    
    Offset calculation wasn't correct as start addresses are in pfn
    not in bytes.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Nirmoy Das <nirmoy.das@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c96c49325f46422899e111ca0af01b00c84a58f0
Author: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
Date:   Mon Mar 29 21:42:08 2021 -0700

    mm: fix race by making init_zero_pfn() early_initcall
    
    commit e720e7d0e983bf05de80b231bccc39f1487f0f16 upstream.
    
    There are code paths that rely on zero_pfn to be fully initialized
    before core_initcall.  For example, wq_sysfs_init() is a core_initcall
    function that eventually results in a call to kernel_execve, which
    causes a page fault with a subsequent mmput.  If zero_pfn is not
    initialized by then it may not get cleaned up properly and result in an
    error:
    
      BUG: Bad rss-counter state mm:(ptrval) type:MM_ANONPAGES val:1
    
    Here is an analysis of the race as seen on a MIPS device. On this
    particular MT7621 device (Ubiquiti ER-X), zero_pfn is PFN 0 until
    initialized, at which point it becomes PFN 5120:
    
      1. wq_sysfs_init calls into kobject_uevent_env at core_initcall:
           kobject_uevent_env+0x7e4/0x7ec
           kset_register+0x68/0x88
           bus_register+0xdc/0x34c
           subsys_virtual_register+0x34/0x78
           wq_sysfs_init+0x1c/0x4c
           do_one_initcall+0x50/0x1a8
           kernel_init_freeable+0x230/0x2c8
           kernel_init+0x10/0x100
           ret_from_kernel_thread+0x14/0x1c
    
      2. kobject_uevent_env() calls call_usermodehelper_exec() which executes
         kernel_execve asynchronously.
    
      3. Memory allocations in kernel_execve cause a page fault, bumping the
         MM reference counter:
           add_mm_counter_fast+0xb4/0xc0
           handle_mm_fault+0x6e4/0xea0
           __get_user_pages.part.78+0x190/0x37c
           __get_user_pages_remote+0x128/0x360
           get_arg_page+0x34/0xa0
           copy_string_kernel+0x194/0x2a4
           kernel_execve+0x11c/0x298
           call_usermodehelper_exec_async+0x114/0x194
    
      4. In case zero_pfn has not been initialized yet, zap_pte_range does
         not decrement the MM_ANONPAGES RSS counter and the BUG message is
         triggered shortly afterwards when __mmdrop checks the ref counters:
           __mmdrop+0x98/0x1d0
           free_bprm+0x44/0x118
           kernel_execve+0x160/0x1d8
           call_usermodehelper_exec_async+0x114/0x194
           ret_from_kernel_thread+0x14/0x1c
    
    To avoid races such as described above, initialize init_zero_pfn at
    early_initcall level.  Depending on the architecture, ZERO_PAGE is
    either constant or gets initialized even earlier, at paging_init, so
    there is no issue with initializing zero_pfn earlier.
    
    Link: https://lkml.kernel.org/r/CALCv0x2YqOXEAy2Q=hafjhHCtTHVodChv1qpM=niAXOpqEbt7w@mail.gmail.com
    Signed-off-by: Ilya Lipnitskiy <ilya.lipnitskiy@gmail.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: stable@vger.kernel.org
    Tested-by: 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 815150382a539f5ca2ecc9e5c3c47faecd976cd8
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Apr 1 13:54:40 2021 -0400

    tracing: Fix stack trace event size
    
    commit 9deb193af69d3fd6dd8e47f292b67c805a787010 upstream.
    
    Commit cbc3b92ce037 fixed an issue to modify the macros of the stack trace
    event so that user space could parse it properly. Originally the stack
    trace format to user space showed that the called stack was a dynamic
    array. But it is not actually a dynamic array, in the way that other
    dynamic event arrays worked, and this broke user space parsing for it. The
    update was to make the array look to have 8 entries in it. Helper
    functions were added to make it parse it correctly, as the stack was
    dynamic, but was determined by the size of the event stored.
    
    Although this fixed user space on how it read the event, it changed the
    internal structure used for the stack trace event. It changed the array
    size from [0] to [8] (added 8 entries). This increased the size of the
    stack trace event by 8 words. The size reserved on the ring buffer was the
    size of the stack trace event plus the number of stack entries found in
    the stack trace. That commit caused the amount to be 8 more than what was
    needed because it did not expect the caller field to have any size. This
    produced 8 entries of garbage (and reading random data) from the stack
    trace event:
    
              <idle>-0       [002] d... 1976396.837549: <stack trace>
     => trace_event_raw_event_sched_switch
     => __traceiter_sched_switch
     => __schedule
     => schedule_idle
     => do_idle
     => cpu_startup_entry
     => secondary_startup_64_no_verify
     => 0xc8c5e150ffff93de
     => 0xffff93de
     => 0
     => 0
     => 0xc8c5e17800000000
     => 0x1f30affff93de
     => 0x00000004
     => 0x200000000
    
    Instead, subtract the size of the caller field from the size of the event
    to make sure that only the amount needed to store the stack trace is
    reserved.
    
    Link: https://lore.kernel.org/lkml/your-ad-here.call-01617191565-ext-9692@work.hours/
    
    Cc: stable@vger.kernel.org
    Fixes: cbc3b92ce037 ("tracing: Set kernel_stack's caller size properly")
    Reported-by: Vasily Gorbik <gor@linux.ibm.com>
    Tested-by: Vasily Gorbik <gor@linux.ibm.com>
    Acked-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e67babf370ac45acda11a25fe8aa6bc435e76046
Author: Hui Wang <hui.wang@canonical.com>
Date:   Sat Mar 20 17:15:42 2021 +0800

    ALSA: hda/realtek: call alc_update_headset_mode() in hp_automute_hook
    
    commit e54f30befa7990b897189b44a56c1138c6bfdbb5 upstream.
    
    We found the alc_update_headset_mode() is not called on some machines
    when unplugging the headset, as a result, the mode of the
    ALC_HEADSET_MODE_UNPLUGGED can't be set, then the current_headset_type
    is not cleared, if users plug a differnt type of headset next time,
    the determine_headset_type() will not be called and the audio jack is
    set to the headset type of previous time.
    
    On the Dell machines which connect the dmic to the PCH, if we open
    the gnome-sound-setting and unplug the headset, this issue will
    happen. Those machines disable the auto-mute by ucm and has no
    internal mic in the input source, so the update_headset_mode() will
    not be called by cap_sync_hook or automute_hook when unplugging, and
    because the gnome-sound-setting is opened, the codec will not enter
    the runtime_suspend state, so the update_headset_mode() will not be
    called by alc_resume when unplugging. In this case the
    hp_automute_hook is called when unplugging, so add
    update_headset_mode() calling to this function.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20210320091542.6748-2-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efbcc192af5859bdc96bf7a9d093444ee0551172
Author: Hui Wang <hui.wang@canonical.com>
Date:   Sat Mar 20 17:15:41 2021 +0800

    ALSA: hda/realtek: fix a determine_headset_type issue for a Dell AIO
    
    commit febf22565549ea7111e7d45e8f2d64373cc66b11 upstream.
    
    We found a recording issue on a Dell AIO, users plug a headset-mic and
    select headset-mic from UI, but can't record any sound from
    headset-mic. The root cause is the determine_headset_type() returns a
    wrong type, e.g. users plug a ctia type headset, but that function
    returns omtp type.
    
    On this machine, the internal mic is not connected to the codec, the
    "Input Source" is headset mic by default. And when users plug a
    headset, the determine_headset_type() will be called immediately, the
    codec on this AIO is alc274, the delay time for this codec in the
    determine_headset_type() is only 80ms, the delay is too short to
    correctly determine the headset type, the fail rate is nearly 99% when
    users plug the headset with the normal speed.
    
    Other codecs set several hundred ms delay time, so here I change the
    delay time to 850ms for alc2x4 series, after this change, the fail
    rate is zero unless users plug the headset slowly on purpose.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20210320091542.6748-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 606012531394c830850597e1abd910bd57687b98
Author: Ikjoon Jang <ikjn@chromium.org>
Date:   Wed Mar 24 18:51:52 2021 +0800

    ALSA: usb-audio: Apply sample rate quirk to Logitech Connect
    
    commit 625bd5a616ceda4840cd28f82e957c8ced394b6a upstream.
    
    Logitech ConferenceCam Connect is a compound USB device with UVC and
    UAC. Not 100% reproducible but sometimes it keeps responding STALL to
    every control transfer once it receives get_freq request.
    
    This patch adds 046d:0x084c to a snd_usb_get_sample_rate_quirk list.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=203419
    Signed-off-by: Ikjoon Jang <ikjn@chromium.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210324105153.2322881-1-ikjn@chromium.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50ee3a92c057566252d577dd068c6301965f9982
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Tue Feb 9 14:38:09 2021 +0100

    bpf: Remove MTU check in __bpf_skb_max_len
    
    commit 6306c1189e77a513bf02720450bb43bd4ba5d8ae upstream.
    
    Multiple BPF-helpers that can manipulate/increase the size of the SKB uses
    __bpf_skb_max_len() as the max-length. This function limit size against
    the current net_device MTU (skb->dev->mtu).
    
    When a BPF-prog grow the packet size, then it should not be limited to the
    MTU. The MTU is a transmit limitation, and software receiving this packet
    should be allowed to increase the size. Further more, current MTU check in
    __bpf_skb_max_len uses the MTU from ingress/current net_device, which in
    case of redirects uses the wrong net_device.
    
    This patch keeps a sanity max limit of SKB_MAX_ALLOC (16KiB). The real limit
    is elsewhere in the system. Jesper's testing[1] showed it was not possible
    to exceed 8KiB when expanding the SKB size via BPF-helper. The limiting
    factor is the define KMALLOC_MAX_CACHE_SIZE which is 8192 for
    SLUB-allocator (CONFIG_SLUB) in-case PAGE_SIZE is 4096. This define is
    in-effect due to this being called from softirq context see code
    __gfp_pfmemalloc_flags() and __do_kmalloc_node(). Jakub's testing showed
    that frames above 16KiB can cause NICs to reset (but not crash). Keep this
    sanity limit at this level as memory layer can differ based on kernel
    config.
    
    [1] https://github.com/xdp-project/bpf-examples/tree/master/MTU-tests
    
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/bpf/161287788936.790810.2937823995775097177.stgit@firesoul
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 722dcc63c2ec4835c30c1b8353d5654653d68355
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Mon Feb 15 14:17:56 2021 -0500

    net: wan/lmc: unregister device when no matching device is found
    
    [ Upstream commit 62e69bc419772638369eff8ff81340bde8aceb61 ]
    
    lmc set sc->lmc_media pointer when there is a matching device.
    However, when no matching device is found, this pointer is NULL
    and the following dereference will result in a null-ptr-deref.
    
    To fix this issue, unregister the hdlc device and return an error.
    
    [    4.569359] BUG: KASAN: null-ptr-deref in lmc_init_one.cold+0x2b6/0x55d [lmc]
    [    4.569748] Read of size 8 at addr 0000000000000008 by task modprobe/95
    [    4.570102]
    [    4.570187] CPU: 0 PID: 95 Comm: modprobe Not tainted 5.11.0-rc7 #94
    [    4.570527] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-48-gd9c812dda519-preb4
    [    4.571125] Call Trace:
    [    4.571261]  dump_stack+0x7d/0xa3
    [    4.571445]  kasan_report.cold+0x10c/0x10e
    [    4.571667]  ? lmc_init_one.cold+0x2b6/0x55d [lmc]
    [    4.571932]  lmc_init_one.cold+0x2b6/0x55d [lmc]
    [    4.572186]  ? lmc_mii_readreg+0xa0/0xa0 [lmc]
    [    4.572432]  local_pci_probe+0x6f/0xb0
    [    4.572639]  pci_device_probe+0x171/0x240
    [    4.572857]  ? pci_device_remove+0xe0/0xe0
    [    4.573080]  ? kernfs_create_link+0xb6/0x110
    [    4.573315]  ? sysfs_do_create_link_sd.isra.0+0x76/0xe0
    [    4.573598]  really_probe+0x161/0x420
    [    4.573799]  driver_probe_device+0x6d/0xd0
    [    4.574022]  device_driver_attach+0x82/0x90
    [    4.574249]  ? device_driver_attach+0x90/0x90
    [    4.574485]  __driver_attach+0x60/0x100
    [    4.574694]  ? device_driver_attach+0x90/0x90
    [    4.574931]  bus_for_each_dev+0xe1/0x140
    [    4.575146]  ? subsys_dev_iter_exit+0x10/0x10
    [    4.575387]  ? klist_node_init+0x61/0x80
    [    4.575602]  bus_add_driver+0x254/0x2a0
    [    4.575812]  driver_register+0xd3/0x150
    [    4.576021]  ? 0xffffffffc0018000
    [    4.576202]  do_one_initcall+0x84/0x250
    [    4.576411]  ? trace_event_raw_event_initcall_finish+0x150/0x150
    [    4.576733]  ? unpoison_range+0xf/0x30
    [    4.576938]  ? ____kasan_kmalloc.constprop.0+0x84/0xa0
    [    4.577219]  ? unpoison_range+0xf/0x30
    [    4.577423]  ? unpoison_range+0xf/0x30
    [    4.577628]  do_init_module+0xf8/0x350
    [    4.577833]  load_module+0x3fe6/0x4340
    [    4.578038]  ? vm_unmap_ram+0x1d0/0x1d0
    [    4.578247]  ? ____kasan_kmalloc.constprop.0+0x84/0xa0
    [    4.578526]  ? module_frob_arch_sections+0x20/0x20
    [    4.578787]  ? __do_sys_finit_module+0x108/0x170
    [    4.579037]  __do_sys_finit_module+0x108/0x170
    [    4.579278]  ? __ia32_sys_init_module+0x40/0x40
    [    4.579523]  ? file_open_root+0x200/0x200
    [    4.579742]  ? do_sys_open+0x85/0xe0
    [    4.579938]  ? filp_open+0x50/0x50
    [    4.580125]  ? exit_to_user_mode_prepare+0xfc/0x130
    [    4.580390]  do_syscall_64+0x33/0x40
    [    4.580586]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [    4.580859] RIP: 0033:0x7f1a724c3cf7
    [    4.581054] Code: 48 89 57 30 48 8b 04 24 48 89 47 38 e9 1d a0 02 00 48 89 f8 48 89 f7 48 89 d6 48 891
    [    4.582043] RSP: 002b:00007fff44941c68 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    [    4.582447] RAX: ffffffffffffffda RBX: 00000000012ada70 RCX: 00007f1a724c3cf7
    [    4.582827] RDX: 0000000000000000 RSI: 00000000012ac9e0 RDI: 0000000000000003
    [    4.583207] RBP: 0000000000000003 R08: 0000000000000000 R09: 0000000000000001
    [    4.583587] R10: 00007f1a72527300 R11: 0000000000000246 R12: 00000000012ac9e0
    [    4.583968] R13: 0000000000000000 R14: 00000000012acc90 R15: 0000000000000001
    [    4.584349] ==================================================================
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbe60652a47e2eb9a72ff6e06512049b29507b67
Author: Doug Brown <doug@schmorgal.com>
Date:   Thu Feb 11 21:27:54 2021 -0800

    appletalk: Fix skb allocation size in loopback case
    
    [ Upstream commit 39935dccb21c60f9bbf1bb72d22ab6fd14ae7705 ]
    
    If a DDP broadcast packet is sent out to a non-gateway target, it is
    also looped back. There is a potential for the loopback device to have a
    longer hardware header length than the original target route's device,
    which can result in the skb not being created with enough room for the
    loopback device's hardware header. This patch fixes the issue by
    determining that a loopback will be necessary prior to allocating the
    skb, and if so, ensuring the skb has enough room.
    
    This was discovered while testing a new driver that creates a LocalTalk
    network interface (LTALK_HLEN = 1). It caused an skb_under_panic.
    
    Signed-off-by: Doug Brown <doug@schmorgal.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef46aebed79ca3a1ad04e4e0f261c3e7dbdb1806
Author: Nathan Rossi <nathan.rossi@digi.com>
Date:   Thu Feb 11 05:17:57 2021 +0000

    net: ethernet: aquantia: Handle error cleanup of start on open
    
    [ Upstream commit 8a28af7a3e85ddf358f8c41e401a33002f7a9587 ]
    
    The aq_nic_start function can fail in a variety of cases which leaves
    the device in broken state.
    
    An example case where the start function fails is the
    request_threaded_irq which can be interrupted, resulting in a EINTR
    result. This can be manually triggered by bringing the link up (e.g. ip
    link set up) and triggering a SIGINT on the initiating process (e.g.
    Ctrl+C). This would put the device into a half configured state.
    Subsequently bringing the link up again would cause the napi_enable to
    BUG.
    
    In order to correctly clean up the failed attempt to start a device call
    aq_nic_stop.
    
    Signed-off-by: Nathan Rossi <nathan.rossi@digi.com>
    Reviewed-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bad76df7d44766c04728216c14e70826df35c3c4
Author: Luca Pesce <luca.pesce@vimar.com>
Date:   Thu Dec 24 11:51:59 2020 +0100

    brcmfmac: clear EAP/association status bits on linkdown events
    
    [ Upstream commit e862a3e4088070de352fdafe9bd9e3ae0a95a33c ]
    
    This ensure that previous association attempts do not leave stale statuses
    on subsequent attempts.
    
    This fixes the WARN_ON(!cr->bss)) from __cfg80211_connect_result() when
    connecting to an AP after a previous connection failure (e.g. where EAP fails
    due to incorrect psk but association succeeded). In some scenarios, indeed,
    brcmf_is_linkup() was reporting a link up event too early due to stale
    BRCMF_VIF_STATUS_ASSOC_SUCCESS bit, thus reporting to cfg80211 a connection
    result with a zeroed bssid (vif->profile.bssid is still empty), causing the
    WARN_ON due to the call to cfg80211_get_bss() with the empty bssid.
    
    Signed-off-by: Luca Pesce <luca.pesce@vimar.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1608807119-21785-1-git-send-email-luca.pesce@vimar.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 400133a902311e87f0b747799cf7a94403b91114
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Mar 3 21:17:03 2021 +0800

    ext4: do not iput inode under running transaction in ext4_rename()
    
    [ Upstream commit 5dccdc5a1916d4266edd251f20bbbb113a5c495f ]
    
    In ext4_rename(), when RENAME_WHITEOUT failed to add new entry into
    directory, it ends up dropping new created whiteout inode under the
    running transaction. After commit <9b88f9fb0d2> ("ext4: Do not iput inode
    under running transaction"), we follow the assumptions that evict() does
    not get called from a transaction context but in ext4_rename() it breaks
    this suggestion. Although it's not a real problem, better to obey it, so
    this patch add inode to orphan list and stop transaction before final
    iput().
    
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20210303131703.330415-2-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2c110a89b97e4dd9a444864750d703ed151bdd8
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Mon Mar 15 23:01:32 2021 +0530

    ASoC: rt5659: Update MCLK rate in set_sysclk()
    
    [ Upstream commit dbf54a9534350d6aebbb34f5c1c606b81a4f35dd ]
    
    Simple-card/audio-graph-card drivers do not handle MCLK clock when it
    is specified in the codec device node. The expectation here is that,
    the codec should actually own up the MCLK clock and do necessary setup
    in the driver.
    
    Suggested-by: Mark Brown <broonie@kernel.org>
    Suggested-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Link: https://lore.kernel.org/r/1615829492-8972-3-git-send-email-spujar@nvidia.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dde99ac216ccc64a9fd47ca6899a4a39f8d48262
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Mon Mar 15 15:58:12 2021 -0400

    staging: comedi: cb_pcidas64: fix request_irq() warn
    
    [ Upstream commit d2d106fe3badfc3bf0dd3899d1c3f210c7203eab ]
    
    request_irq() wont accept a name which contains slash so we need to
    repalce it with something else -- otherwise it will trigger a warning
    and the entry in /proc/irq/ will not be created
    since the .name might be used by userspace and we don't want to break
    userspace, so we are changing the parameters passed to request_irq()
    
    [    1.565966] name 'pci-das6402/16'
    [    1.566149] WARNING: CPU: 0 PID: 184 at fs/proc/generic.c:180 __xlate_proc_name+0x93/0xb0
    [    1.568923] RIP: 0010:__xlate_proc_name+0x93/0xb0
    [    1.574200] Call Trace:
    [    1.574722]  proc_mkdir+0x18/0x20
    [    1.576629]  request_threaded_irq+0xfe/0x160
    [    1.576859]  auto_attach+0x60a/0xc40 [cb_pcidas64]
    
    Suggested-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20210315195814.4692-1-ztong0001@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 552288cf01a467c08cf8023dbcf320f1465fad86
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Mon Mar 15 15:59:14 2021 -0400

    staging: comedi: cb_pcidas: fix request_irq() warn
    
    [ Upstream commit 2e5848a3d86f03024ae096478bdb892ab3d79131 ]
    
    request_irq() wont accept a name which contains slash so we need to
    repalce it with something else -- otherwise it will trigger a warning
    and the entry in /proc/irq/ will not be created
    since the .name might be used by userspace and we don't want to break
    userspace, so we are changing the parameters passed to request_irq()
    
    [    1.630764] name 'pci-das1602/16'
    [    1.630950] WARNING: CPU: 0 PID: 181 at fs/proc/generic.c:180 __xlate_proc_name+0x93/0xb0
    [    1.634009] RIP: 0010:__xlate_proc_name+0x93/0xb0
    [    1.639441] Call Trace:
    [    1.639976]  proc_mkdir+0x18/0x20
    [    1.641946]  request_threaded_irq+0xfe/0x160
    [    1.642186]  cb_pcidas_auto_attach+0xf4/0x610 [cb_pcidas]
    
    Suggested-by: Ian Abbott <abbotti@mev.co.uk>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20210315195914.4801-1-ztong0001@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 603294f8dbc2b7914619e5963de824fc4bf4e4bc
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Sun Mar 14 18:32:46 2021 +0300

    scsi: qla2xxx: Fix broken #endif placement
    
    [ Upstream commit 5999b9e5b1f8a2f5417b755130919b3ac96f5550 ]
    
    Only half of the file is under include guard because terminating #endif
    is placed too early.
    
    Link: https://lore.kernel.org/r/YE4snvoW1SuwcXAn@localhost.localdomain
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9699330ebf3da545df4ee1ccce1a10cdcb931bd
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Wed Mar 10 22:46:36 2021 -0800

    scsi: st: Fix a use after free in st_open()
    
    [ Upstream commit c8c165dea4c8f5ad67b1240861e4f6c5395fa4ac ]
    
    In st_open(), if STp->in_use is true, STp will be freed by
    scsi_tape_put(). However, STp is still used by DEBC_printk() after. It is
    better to DEBC_printk() before scsi_tape_put().
    
    Link: https://lore.kernel.org/r/20210311064636.10522-1-lyl2019@mail.ustc.edu.cn
    Acked-by: Kai Mäkisara <kai.makisara@kolumbus.fi>
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45256a676ddb52041a3dcaee67cd50945e9b077b
Author: Laurent Vivier <lvivier@redhat.com>
Date:   Fri Mar 12 15:09:13 2021 +0100

    vhost: Fix vhost_vq_reset()
    
    [ Upstream commit beb691e69f4dec7bfe8b81b509848acfd1f0dbf9 ]
    
    vhost_reset_is_le() is vhost_init_is_le(), and in the case of
    cross-endian legacy, vhost_init_is_le() depends on vq->user_be.
    
    vq->user_be is set by vhost_disable_cross_endian().
    
    But in vhost_vq_reset(), we have:
    
        vhost_reset_is_le(vq);
        vhost_disable_cross_endian(vq);
    
    And so user_be is used before being set.
    
    To fix that, reverse the lines order as there is no other dependency
    between them.
    
    Signed-off-by: Laurent Vivier <lvivier@redhat.com>
    Link: https://lore.kernel.org/r/20210312140913.788592-1-lvivier@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3853192c4704a8e47ff1b04c422d78833411763d
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Mar 10 12:10:34 2021 +0000

    powerpc: Force inlining of cpu_has_feature() to avoid build failure
    
    [ Upstream commit eed5fae00593ab9d261a0c1ffc1bdb786a87a55a ]
    
    The code relies on constant folding of cpu_has_feature() based
    on possible and always true values as defined per
    CPU_FTRS_ALWAYS and CPU_FTRS_POSSIBLE.
    
    Build failure is encountered with for instance
    book3e_all_defconfig on kisskb in the AMDGPU driver which uses
    cpu_has_feature(CPU_FTR_VSX_COMP) to decide whether calling
    kernel_enable_vsx() or not.
    
    The failure is due to cpu_has_feature() not being inlined with
    that configuration with gcc 4.9.
    
    In the same way as commit acdad8fb4a15 ("powerpc: Force inlining of
    mmu_has_feature to fix build failure"), for inlining of
    cpu_has_feature().
    
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/b231dfa040ce4cc37f702f5c3a595fdeabfe0462.1615378209.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b995489ed3fa87cbfd15990cbc6bcb4aa54445ee
Author: Lucas Tanure <tanureal@opensource.cirrus.com>
Date:   Fri Mar 5 17:34:32 2021 +0000

    ASoC: cs42l42: Always wait at least 3ms after reset
    
    [ Upstream commit 19325cfea04446bc79b36bffd4978af15f46a00e ]
    
    This delay is part of the power-up sequence defined in the datasheet.
    A runtime_resume is a power-up so must also include the delay.
    
    Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20210305173442.195740-6-tanureal@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5949ff310919012a39a74aa4a7b4c3c4199f5c95
Author: Lucas Tanure <tanureal@opensource.cirrus.com>
Date:   Fri Mar 5 17:34:30 2021 +0000

    ASoC: cs42l42: Fix mixer volume control
    
    [ Upstream commit 72d904763ae6a8576e7ad034f9da4f0e3c44bf24 ]
    
    The minimum value is 0x3f (-63dB), which also is mute
    
    Signed-off-by: Lucas Tanure <tanureal@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20210305173442.195740-4-tanureal@opensource.cirrus.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35626e77ee1afb2746d950ed9531038195728cbf
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Feb 28 17:04:41 2021 +0100

    ASoC: es8316: Simplify adc_pga_gain_tlv table
    
    [ Upstream commit bb18c678754ce1514100fb4c0bf6113b5af36c48 ]
    
    Most steps in this table are steps of 3dB (300 centi-dB), so we can
    simplify the table.
    
    This not only reduces the amount of space it takes inside the kernel,
    this also makes alsa-lib's mixer code actually accept the table, where
    as before this change alsa-lib saw the "ADC PGA Gain" control as a
    control without a dB scale.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210228160441.241110-1-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9284bebe10ab05b4884a80acdd7ad991c599e9d3
Author: Benjamin Rood <benjaminjrood@gmail.com>
Date:   Fri Feb 19 13:33:08 2021 -0500

    ASoC: sgtl5000: set DAP_AVC_CTRL register to correct default value on probe
    
    [ Upstream commit f86f58e3594fb0ab1993d833d3b9a2496f3c928c ]
    
    According to the SGTL5000 datasheet [1], the DAP_AVC_CTRL register has
    the following bit field definitions:
    
    | BITS  | FIELD       | RW | RESET | DEFINITION                        |
    | 15    | RSVD        | RO | 0x0   | Reserved                          |
    | 14    | RSVD        | RW | 0x1   | Reserved                          |
    | 13:12 | MAX_GAIN    | RW | 0x1   | Max Gain of AVC in expander mode  |
    | 11:10 | RSVD        | RO | 0x0   | Reserved                          |
    | 9:8   | LBI_RESP    | RW | 0x1   | Integrator Response               |
    | 7:6   | RSVD        | RO | 0x0   | Reserved                          |
    | 5     | HARD_LMT_EN | RW | 0x0   | Enable hard limiter mode          |
    | 4:1   | RSVD        | RO | 0x0   | Reserved                          |
    | 0     | EN          | RW | 0x0   | Enable/Disable AVC                |
    
    The original default value written to the DAP_AVC_CTRL register during
    sgtl5000_i2c_probe() was 0x0510.  This would incorrectly write values to
    bits 4 and 10, which are defined as RESERVED.  It would also not set
    bits 12 and 14 to their correct RESET values of 0x1, and instead set
    them to 0x0.  While the DAP_AVC module is effectively disabled because
    the EN bit is 0, this default value is still writing invalid values to
    registers that are marked as read-only and RESERVED as well as not
    setting bits 12 and 14 to their correct default values as defined by the
    datasheet.
    
    The correct value that should be written to the DAP_AVC_CTRL register is
    0x5100, which configures the register bits to the default values defined
    by the datasheet, and prevents any writes to bits defined as
    'read-only'.  Generally speaking, it is best practice to NOT attempt to
    write values to registers/bits defined as RESERVED, as it generally
    produces unwanted/undefined behavior, or errors.
    
    Also, all credit for this patch should go to my colleague Dan MacDonald
    <dmacdonald@curbellmedical.com> for finding this error in the first
    place.
    
    [1] https://www.nxp.com/docs/en/data-sheet/SGTL5000.pdf
    
    Signed-off-by: Benjamin Rood <benjaminjrood@gmail.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Link: https://lore.kernel.org/r/20210219183308.GA2117@ubuntu-dev
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14f05fa3015c6044cab8002ad49723533eb062f5
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Feb 26 15:38:14 2021 +0100

    ASoC: rt5651: Fix dac- and adc- vol-tlv values being off by a factor of 10
    
    [ Upstream commit eee51df776bd6cac10a76b2779a9fdee3f622b2b ]
    
    The adc_vol_tlv volume-control has a range from -17.625 dB to +30 dB,
    not -176.25 dB to + 300 dB. This wrong scale is esp. a problem in userspace
    apps which translate the dB scale to a linear scale. With the logarithmic
    dB scale being of by a factor of 10 we loose all precision in the lower
    area of the range when apps translate things to a linear scale.
    
    E.g. the 0 dB default, which corresponds with a value of 47 of the
    0 - 127 range for the control, would be shown as 0/100 in alsa-mixer.
    
    Since the centi-dB values used in the TLV struct cannot represent the
    0.375 dB step size used by these controls, change the TLV definition
    for them to specify a min and max value instead of min + stepsize.
    
    Note this mirrors commit 3f31f7d9b540 ("ASoC: rt5670: Fix dac- and adc-
    vol-tlv values being off by a factor of 10") which made the exact same
    change to the rt5670 codec driver.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210226143817.84287-3-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37c863eb1abf341de3b8e2f9b5cb6c7d20051c80
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Feb 26 15:38:13 2021 +0100

    ASoC: rt5640: Fix dac- and adc- vol-tlv values being off by a factor of 10
    
    [ Upstream commit cfa26ed1f9f885c2fd8f53ca492989d1e16d0199 ]
    
    The adc_vol_tlv volume-control has a range from -17.625 dB to +30 dB,
    not -176.25 dB to + 300 dB. This wrong scale is esp. a problem in userspace
    apps which translate the dB scale to a linear scale. With the logarithmic
    dB scale being of by a factor of 10 we loose all precision in the lower
    area of the range when apps translate things to a linear scale.
    
    E.g. the 0 dB default, which corresponds with a value of 47 of the
    0 - 127 range for the control, would be shown as 0/100 in alsa-mixer.
    
    Since the centi-dB values used in the TLV struct cannot represent the
    0.375 dB step size used by these controls, change the TLV definition
    for them to specify a min and max value instead of min + stepsize.
    
    Note this mirrors commit 3f31f7d9b540 ("ASoC: rt5670: Fix dac- and adc-
    vol-tlv values being off by a factor of 10") which made the exact same
    change to the rt5670 codec driver.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20210226143817.84287-2-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0434096062f59d838a94510ac3ec34998c2b2cad
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Tue Mar 2 10:48:38 2021 -0500

    rpc: fix NULL dereference on kmalloc failure
    
    [ Upstream commit 0ddc942394013f08992fc379ca04cffacbbe3dae ]
    
    I think this is unlikely but possible:
    
    svc_authenticate sets rq_authop and calls svcauth_gss_accept.  The
    kmalloc(sizeof(*svcdata), GFP_KERNEL) fails, leaving rq_auth_data NULL,
    and returning SVC_DENIED.
    
    This causes svc_process_common to go to err_bad_auth, and eventually
    call svc_authorise.  That calls ->release == svcauth_gss_release, which
    tries to dereference rq_auth_data.
    
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Link: https://lore.kernel.org/linux-nfs/3F1B347F-B809-478F-A1E9-0BE98E22B0F0@oracle.com/T/#t
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7751fcc19ac058f43aa10a5dbeffd7092bff6358
Author: Zhaolong Zhang <zhangzl2013@126.com>
Date:   Tue Mar 2 17:42:31 2021 +0800

    ext4: fix bh ref count on error paths
    
    [ Upstream commit c915fb80eaa6194fa9bd0a4487705cd5b0dda2f1 ]
    
    __ext4_journalled_writepage should drop bhs' ref count on error paths
    
    Signed-off-by: Zhaolong Zhang <zhangzl2013@126.com>
    Link: https://lore.kernel.org/r/1614678151-70481-1-git-send-email-zhangzl2013@126.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e8d7c381c0cf82a401652682c69ab802dce7eaf
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Mar 17 09:55:15 2021 -0700

    ipv6: weaken the v4mapped source check
    
    [ Upstream commit dcc32f4f183ab8479041b23a1525d48233df1d43 ]
    
    This reverts commit 6af1799aaf3f1bc8defedddfa00df3192445bbf3.
    
    Commit 6af1799aaf3f ("ipv6: drop incoming packets having a v4mapped
    source address") introduced an input check against v4mapped addresses.
    Use of such addresses on the wire is indeed questionable and not
    allowed on public Internet. As the commit pointed out
    
      https://tools.ietf.org/html/draft-itojun-v6ops-v4mapped-harmful-02
    
    lists potential issues.
    
    Unfortunately there are applications which use v4mapped addresses,
    and breaking them is a clear regression. For example v4mapped
    addresses (or any semi-valid addresses, really) may be used
    for uni-direction event streams or packet export.
    
    Since the issue which sparked the addition of the check was with
    TCP and request_socks in particular push the check down to TCPv6
    and DCCP. This restores the ability to receive UDPv6 packets with
    v4mapped address as the source.
    
    Keep using the IPSTATS_MIB_INHDRERRORS statistic to minimize the
    user-visible changes.
    
    Fixes: 6af1799aaf3f ("ipv6: drop incoming packets having a v4mapped source address")
    Reported-by: Sunyi Shao <sunyishao@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Acked-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88ae692d54de74f39db8bd2d4aa31d01fc34d119
Author: David Brazdil <dbrazdil@google.com>
Date:   Mon Mar 29 18:24:43 2021 +0000

    selinux: vsock: Set SID for socket returned by accept()
    
    [ Upstream commit 1f935e8e72ec28dddb2dc0650b3b6626a293d94b ]
    
    For AF_VSOCK, accept() currently returns sockets that are unlabelled.
    Other socket families derive the child's SID from the SID of the parent
    and the SID of the incoming packet. This is typically done as the
    connected socket is placed in the queue that accept() removes from.
    
    Reuse the existing 'security_sk_clone' hook to copy the SID from the
    parent (server) socket to the child. There is no packet SID in this
    case.
    
    Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
    Signed-off-by: David Brazdil <dbrazdil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72580f9b1b95b3e6fec874192cbbb60e3ef12f97
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Mar 30 14:40:13 2021 +0200

    Linux 4.14.228
    
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20210329075608.898173317@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7c023636d91a82d24f0e4461a506ad8428b4e34
Author: Jan Beulich <jbeulich@suse.com>
Date:   Fri Mar 26 16:28:57 2021 +0100

    xen-blkback: don't leak persistent grants from xen_blkbk_map()
    
    commit a846738f8c3788d846ed1f587270d2f2e3d32432 upstream.
    
    The fix for XSA-365 zapped too many of the ->persistent_gnt[] entries.
    Ones successfully obtained should not be overwritten, but instead left
    for xen_blkbk_unmap_prepare() to pick up and put.
    
    This is XSA-371.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a751ad9bed0fd7227c7d3cd7831eb8aa2bcd6a7d
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Mar 20 20:21:54 2021 +0100

    can: peak_usb: Revert "can: peak_usb: add forgotten supported devices"
    
    commit 5d7047ed6b7214fbabc16d8712a822e256b1aa44 upstream.
    
    In commit 6417f03132a6 ("module: remove never implemented
    MODULE_SUPPORTED_DEVICE") the MODULE_SUPPORTED_DEVICE macro was
    removed from the kerne entirely. Shortly before this patch was applied
    mainline the commit 59ec7b89ed3e ("can: peak_usb: add forgotten
    supported devices") was added to net/master. As this would result in a
    merge conflict, let's revert this patch.
    
    Fixes: 59ec7b89ed3e ("can: peak_usb: add forgotten supported devices")
    Link: https://lore.kernel.org/r/20210320192649.341832-1-mkl@pengutronix.de
    Suggested-by: Leon Romanovsky <leon@kernel.org>
    Cc: Stephane Grosjean <s.grosjean@peak-system.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6b07f5f6b5238d0c6393dd3004d4e892f9e8467
Author: Jan Kara <jack@suse.cz>
Date:   Mon Feb 22 18:16:26 2021 +0100

    ext4: add reclaim checks to xattr code
    
    commit 163f0ec1df33cf468509ff38cbcbb5eb0d7fac60 upstream.
    
    Syzbot is reporting that ext4 can enter fs reclaim from kvmalloc() while
    the transaction is started like:
    
      fs_reclaim_acquire+0x117/0x150 mm/page_alloc.c:4340
      might_alloc include/linux/sched/mm.h:193 [inline]
      slab_pre_alloc_hook mm/slab.h:493 [inline]
      slab_alloc_node mm/slub.c:2817 [inline]
      __kmalloc_node+0x5f/0x430 mm/slub.c:4015
      kmalloc_node include/linux/slab.h:575 [inline]
      kvmalloc_node+0x61/0xf0 mm/util.c:587
      kvmalloc include/linux/mm.h:781 [inline]
      ext4_xattr_inode_cache_find fs/ext4/xattr.c:1465 [inline]
      ext4_xattr_inode_lookup_create fs/ext4/xattr.c:1508 [inline]
      ext4_xattr_set_entry+0x1ce6/0x3780 fs/ext4/xattr.c:1649
      ext4_xattr_ibody_set+0x78/0x2b0 fs/ext4/xattr.c:2224
      ext4_xattr_set_handle+0x8f4/0x13e0 fs/ext4/xattr.c:2380
      ext4_xattr_set+0x13a/0x340 fs/ext4/xattr.c:2493
    
    This should be impossible since transaction start sets PF_MEMALLOC_NOFS.
    Add some assertions to the code to catch if something isn't working as
    expected early.
    
    Link: https://lore.kernel.org/linux-ext4/000000000000563a0205bafb7970@google.com/
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20210222171626.21884-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 651c2ba7cd002c170f21ad7245515399c3d59399
Author: Markus Theil <markus.theil@tu-ilmenau.de>
Date:   Sat Feb 13 14:36:53 2021 +0100

    mac80211: fix double free in ibss_leave
    
    commit 3bd801b14e0c5d29eeddc7336558beb3344efaa3 upstream.
    
    Clear beacon ie pointer and ie length after free
    in order to prevent double free.
    
    ==================================================================
    BUG: KASAN: double-free or invalid-free \
    in ieee80211_ibss_leave+0x83/0xe0 net/mac80211/ibss.c:1876
    
    CPU: 0 PID: 8472 Comm: syz-executor100 Not tainted 5.11.0-rc6-syzkaller #0
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     print_address_description.constprop.0.cold+0x5b/0x2c6 mm/kasan/report.c:230
     kasan_report_invalid_free+0x51/0x80 mm/kasan/report.c:355
     ____kasan_slab_free+0xcc/0xe0 mm/kasan/common.c:341
     kasan_slab_free include/linux/kasan.h:192 [inline]
     __cache_free mm/slab.c:3424 [inline]
     kfree+0xed/0x270 mm/slab.c:3760
     ieee80211_ibss_leave+0x83/0xe0 net/mac80211/ibss.c:1876
     rdev_leave_ibss net/wireless/rdev-ops.h:545 [inline]
     __cfg80211_leave_ibss+0x19a/0x4c0 net/wireless/ibss.c:212
     __cfg80211_leave+0x327/0x430 net/wireless/core.c:1172
     cfg80211_leave net/wireless/core.c:1221 [inline]
     cfg80211_netdev_notifier_call+0x9e8/0x12c0 net/wireless/core.c:1335
     notifier_call_chain+0xb5/0x200 kernel/notifier.c:83
     call_netdevice_notifiers_info+0xb5/0x130 net/core/dev.c:2040
     call_netdevice_notifiers_extack net/core/dev.c:2052 [inline]
     call_netdevice_notifiers net/core/dev.c:2066 [inline]
     __dev_close_many+0xee/0x2e0 net/core/dev.c:1586
     __dev_close net/core/dev.c:1624 [inline]
     __dev_change_flags+0x2cb/0x730 net/core/dev.c:8476
     dev_change_flags+0x8a/0x160 net/core/dev.c:8549
     dev_ifsioc+0x210/0xa70 net/core/dev_ioctl.c:265
     dev_ioctl+0x1b1/0xc40 net/core/dev_ioctl.c:511
     sock_do_ioctl+0x148/0x2d0 net/socket.c:1060
     sock_ioctl+0x477/0x6a0 net/socket.c:1177
     vfs_ioctl fs/ioctl.c:48 [inline]
     __do_sys_ioctl fs/ioctl.c:753 [inline]
     __se_sys_ioctl fs/ioctl.c:739 [inline]
     __x64_sys_ioctl+0x193/0x200 fs/ioctl.c:739
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported-by: syzbot+93976391bf299d425f44@syzkaller.appspotmail.com
    Signed-off-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Link: https://lore.kernel.org/r/20210213133653.367130-1-markus.theil@tu-ilmenau.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b285934a0d50427f9bc7afb8956fc164a74a069a
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Mar 12 08:59:48 2021 -0800

    net: qrtr: fix a kernel-infoleak in qrtr_recvmsg()
    
    commit 50535249f624d0072cd885bcdce4e4b6fb770160 upstream.
    
    struct sockaddr_qrtr has a 2-byte hole, and qrtr_recvmsg() currently
    does not clear it before copying kernel data to user space.
    
    It might be too late to name the hole since sockaddr_qrtr structure is uapi.
    
    BUG: KMSAN: kernel-infoleak in kmsan_copy_to_user+0x9c/0xb0 mm/kmsan/kmsan_hooks.c:249
    CPU: 0 PID: 29705 Comm: syz-executor.3 Not tainted 5.11.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:120
     kmsan_report+0xfb/0x1e0 mm/kmsan/kmsan_report.c:118
     kmsan_internal_check_memory+0x202/0x520 mm/kmsan/kmsan.c:402
     kmsan_copy_to_user+0x9c/0xb0 mm/kmsan/kmsan_hooks.c:249
     instrument_copy_to_user include/linux/instrumented.h:121 [inline]
     _copy_to_user+0x1ac/0x270 lib/usercopy.c:33
     copy_to_user include/linux/uaccess.h:209 [inline]
     move_addr_to_user+0x3a2/0x640 net/socket.c:237
     ____sys_recvmsg+0x696/0xd50 net/socket.c:2575
     ___sys_recvmsg net/socket.c:2610 [inline]
     do_recvmmsg+0xa97/0x22d0 net/socket.c:2710
     __sys_recvmmsg net/socket.c:2789 [inline]
     __do_sys_recvmmsg net/socket.c:2812 [inline]
     __se_sys_recvmmsg+0x24a/0x410 net/socket.c:2805
     __x64_sys_recvmmsg+0x62/0x80 net/socket.c:2805
     do_syscall_64+0x9f/0x140 arch/x86/entry/common.c:48
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x465f69
    Code: ff ff c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 40 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f43659d6188 EFLAGS: 00000246 ORIG_RAX: 000000000000012b
    RAX: ffffffffffffffda RBX: 000000000056bf60 RCX: 0000000000465f69
    RDX: 0000000000000008 RSI: 0000000020003e40 RDI: 0000000000000003
    RBP: 00000000004bfa8f R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000010060 R11: 0000000000000246 R12: 000000000056bf60
    R13: 0000000000a9fb1f R14: 00007f43659d6300 R15: 0000000000022000
    
    Local variable ----addr@____sys_recvmsg created at:
     ____sys_recvmsg+0x168/0xd50 net/socket.c:2550
     ____sys_recvmsg+0x168/0xd50 net/socket.c:2550
    
    Bytes 2-3 of 12 are uninitialized
    Memory access of size 12 starts at ffff88817c627b40
    Data copied to user address 0000000020000140
    
    Fixes: bdabad3e363d ("net: Add Qualcomm IPC router")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Courtney Cavin <courtney.cavin@sonymobile.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59e617a2535c910bb0cc3209fbbf435a44ff28f0
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 10 08:26:41 2021 -0800

    net: sched: validate stab values
    
    commit e323d865b36134e8c5c82c834df89109a5c60dab upstream.
    
    iproute2 package is well behaved, but malicious user space can
    provide illegal shift values and trigger UBSAN reports.
    
    Add stab parameter to red_check_params() to validate user input.
    
    syzbot reported:
    
    UBSAN: shift-out-of-bounds in ./include/net/red.h:312:18
    shift exponent 111 is too large for 64-bit type 'long unsigned int'
    CPU: 1 PID: 14662 Comm: syz-executor.3 Not tainted 5.12.0-rc2-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x141/0x1d7 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:327
     red_calc_qavg_from_idle_time include/net/red.h:312 [inline]
     red_calc_qavg include/net/red.h:353 [inline]
     choke_enqueue.cold+0x18/0x3dd net/sched/sch_choke.c:221
     __dev_xmit_skb net/core/dev.c:3837 [inline]
     __dev_queue_xmit+0x1943/0x2e00 net/core/dev.c:4150
     neigh_hh_output include/net/neighbour.h:499 [inline]
     neigh_output include/net/neighbour.h:508 [inline]
     ip6_finish_output2+0x911/0x1700 net/ipv6/ip6_output.c:117
     __ip6_finish_output net/ipv6/ip6_output.c:182 [inline]
     __ip6_finish_output+0x4c1/0xe10 net/ipv6/ip6_output.c:161
     ip6_finish_output+0x35/0x200 net/ipv6/ip6_output.c:192
     NF_HOOK_COND include/linux/netfilter.h:290 [inline]
     ip6_output+0x1e4/0x530 net/ipv6/ip6_output.c:215
     dst_output include/net/dst.h:448 [inline]
     NF_HOOK include/linux/netfilter.h:301 [inline]
     NF_HOOK include/linux/netfilter.h:295 [inline]
     ip6_xmit+0x127e/0x1eb0 net/ipv6/ip6_output.c:320
     inet6_csk_xmit+0x358/0x630 net/ipv6/inet6_connection_sock.c:135
     dccp_transmit_skb+0x973/0x12c0 net/dccp/output.c:138
     dccp_send_reset+0x21b/0x2b0 net/dccp/output.c:535
     dccp_finish_passive_close net/dccp/proto.c:123 [inline]
     dccp_finish_passive_close+0xed/0x140 net/dccp/proto.c:118
     dccp_terminate_connection net/dccp/proto.c:958 [inline]
     dccp_close+0xb3c/0xe60 net/dccp/proto.c:1028
     inet_release+0x12e/0x280 net/ipv4/af_inet.c:431
     inet6_release+0x4c/0x70 net/ipv6/af_inet6.c:478
     __sock_release+0xcd/0x280 net/socket.c:599
     sock_close+0x18/0x20 net/socket.c:1258
     __fput+0x288/0x920 fs/file_table.c:280
     task_work_run+0xdd/0x1a0 kernel/task_work.c:140
     tracehook_notify_resume include/linux/tracehook.h:189 [inline]
    
    Fixes: 8afa10cbe281 ("net_sched: red: Avoid illegal values")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e25c27673349f09c2fedf4ffdcce34fea71107f
Author: Martin Willi <martin@strongswan.org>
Date:   Tue Mar 2 13:24:23 2021 +0100

    can: dev: Move device back to init netns on owning netns delete
    
    commit 3a5ca857079ea022e0b1b17fc154f7ad7dbc150f upstream.
    
    When a non-initial netns is destroyed, the usual policy is to delete
    all virtual network interfaces contained, but move physical interfaces
    back to the initial netns. This keeps the physical interface visible
    on the system.
    
    CAN devices are somewhat special, as they define rtnl_link_ops even
    if they are physical devices. If a CAN interface is moved into a
    non-initial netns, destroying that netns lets the interface vanish
    instead of moving it back to the initial netns. default_device_exit()
    skips CAN interfaces due to having rtnl_link_ops set. Reproducer:
    
      ip netns add foo
      ip link set can0 netns foo
      ip netns delete foo
    
    WARNING: CPU: 1 PID: 84 at net/core/dev.c:11030 ops_exit_list+0x38/0x60
    CPU: 1 PID: 84 Comm: kworker/u4:2 Not tainted 5.10.19 #1
    Workqueue: netns cleanup_net
    [<c010e700>] (unwind_backtrace) from [<c010a1d8>] (show_stack+0x10/0x14)
    [<c010a1d8>] (show_stack) from [<c086dc10>] (dump_stack+0x94/0xa8)
    [<c086dc10>] (dump_stack) from [<c086b938>] (__warn+0xb8/0x114)
    [<c086b938>] (__warn) from [<c086ba10>] (warn_slowpath_fmt+0x7c/0xac)
    [<c086ba10>] (warn_slowpath_fmt) from [<c0629f20>] (ops_exit_list+0x38/0x60)
    [<c0629f20>] (ops_exit_list) from [<c062a5c4>] (cleanup_net+0x230/0x380)
    [<c062a5c4>] (cleanup_net) from [<c0142c20>] (process_one_work+0x1d8/0x438)
    [<c0142c20>] (process_one_work) from [<c0142ee4>] (worker_thread+0x64/0x5a8)
    [<c0142ee4>] (worker_thread) from [<c0148a98>] (kthread+0x148/0x14c)
    [<c0148a98>] (kthread) from [<c0100148>] (ret_from_fork+0x14/0x2c)
    
    To properly restore physical CAN devices to the initial netns on owning
    netns exit, introduce a flag on rtnl_link_ops that can be set by drivers.
    For CAN devices setting this flag, default_device_exit() considers them
    non-virtual, applying the usual namespace move.
    
    The issue was introduced in the commit mentioned below, as at that time
    CAN devices did not have a dellink() operation.
    
    Fixes: e008b5fc8dc7 ("net: Simplfy default_device_exit and improve batching.")
    Link: https://lore.kernel.org/r/20210302122423.872326-1-martin@strongswan.org
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 899fe9c48726ec39d90c6d07bf09e14e6caf2c62
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Mar 22 09:46:13 2021 +0100

    locking/mutex: Fix non debug version of mutex_lock_io_nested()
    
    commit 291da9d4a9eb3a1cb0610b7f4480f5b52b1825e7 upstream.
    
    If CONFIG_DEBUG_LOCK_ALLOC=n then mutex_lock_io_nested() maps to
    mutex_lock() which is clearly wrong because mutex_lock() lacks the
    io_schedule_prepare()/finish() invocations.
    
    Map it to mutex_lock_io().
    
    Fixes: f21860bac05b ("locking/mutex, sched/wait: Fix the mutex_lock_io_nested() define")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/878s6fshii.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9dd07e7dc8486e9f5b8c0d3eaca15a82b2ab4c3
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sun Mar 7 19:52:41 2021 -0800

    scsi: mpt3sas: Fix error return code of mpt3sas_base_attach()
    
    [ Upstream commit 3401ecf7fc1b9458a19d42c0e26a228f18ac7dda ]
    
    When kzalloc() returns NULL, no error return code of mpt3sas_base_attach()
    is assigned. To fix this bug, r is assigned with -ENOMEM in this case.
    
    Link: https://lore.kernel.org/r/20210308035241.3288-1-baijiaju1990@gmail.com
    Fixes: c696f7b83ede ("scsi: mpt3sas: Implement device_remove_in_progress check in IOCTL path")
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 378ba69a557d3051e9e9fe41917788fd6d594dcb
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sun Mar 7 19:30:24 2021 -0800

    scsi: qedi: Fix error return code of qedi_alloc_global_queues()
    
    [ Upstream commit f69953837ca5d98aa983a138dc0b90a411e9c763 ]
    
    When kzalloc() returns NULL to qedi->global_queues[i], no error return code
    of qedi_alloc_global_queues() is assigned.  To fix this bug, status is
    assigned with -ENOMEM in this case.
    
    Link: https://lore.kernel.org/r/20210308033024.27147-1-baijiaju1990@gmail.com
    Fixes: ace7f46ba5fd ("scsi: qedi: Add QLogic FastLinQ offload iSCSI driver framework.")
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Acked-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a21de99c1d3cc879bde29340f6e3ca9d338c60f1
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Mar 8 17:11:43 2021 +0200

    perf auxtrace: Fix auxtrace queue conflict
    
    [ Upstream commit b410ed2a8572d41c68bd9208555610e4b07d0703 ]
    
    The only requirement of an auxtrace queue is that the buffers are in
    time order.  That is achieved by making separate queues for separate
    perf buffer or AUX area buffer mmaps.
    
    That generally means a separate queue per cpu for per-cpu contexts, and
    a separate queue per thread for per-task contexts.
    
    When buffers are added to a queue, perf checks that the buffer cpu and
    thread id (tid) match the queue cpu and thread id.
    
    However, generally, that need not be true, and perf will queue buffers
    correctly anyway, so the check is not needed.
    
    In addition, the check gets erroneously hit when using sample mode to
    trace multiple threads.
    
    Consequently, fix that case by removing the check.
    
    Fixes: e502789302a6 ("perf auxtrace: Add helpers for queuing AUX area tracing data")
    Reported-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Link: http://lore.kernel.org/lkml/20210308151143.18338-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c7152c401cc6bde39bac258f6cefe388c4c7bed
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Mar 22 18:31:00 2021 +0200

    ACPI: scan: Use unique number for instance_no
    
    [ Upstream commit eb50aaf960e3bedfef79063411ffd670da94b84b ]
    
    The decrementation of acpi_device_bus_id->instance_no
    in acpi_device_del() is incorrect, because it may cause
    a duplicate instance number to be allocated next time
    a device with the same acpi_device_bus_id is added.
    
    Replace above mentioned approach by using IDA framework.
    
    While at it, define the instance range to be [0, 4096).
    
    Fixes: e49bd2dd5a50 ("ACPI: use PNPID:instance_no as bus_id of ACPI device")
    Fixes: ca9dc8d42b30 ("ACPI / scan: Fix acpi_bus_id_list bookkeeping")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1ca0fd52fa06500fb8905873178057f4c171557
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 14 19:46:47 2021 +0100

    ACPI: scan: Rearrange memory allocation in acpi_device_add()
    
    [ Upstream commit c1013ff7a5472db637c56bb6237f8343398c03a7 ]
    
    The upfront allocation of new_bus_id is done to avoid allocating
    memory under acpi_device_lock, but it doesn't really help,
    because (1) it leads to many unnecessary memory allocations for
    _ADR devices, (2) kstrdup_const() is run under that lock anyway and
    (3) it complicates the code.
    
    Rearrange acpi_device_add() to allocate memory for a new struct
    acpi_device_bus_id instance only when necessary, eliminate a redundant
    local variable from it and reduce the number of labels in there.
    
    No intentional functional impact.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7381f90b858ed985327f715432443686c72b1e8
Author: Potnuri Bharat Teja <bharat@chelsio.com>
Date:   Thu Mar 25 00:34:53 2021 +0530

    RDMA/cxgb4: Fix adapter LE hash errors while destroying ipv6 listening server
    
    [ Upstream commit 3408be145a5d6418ff955fe5badde652be90e700 ]
    
    Not setting the ipv6 bit while destroying ipv6 listening servers may
    result in potential fatal adapter errors due to lookup engine memory hash
    errors. Therefore always set ipv6 field while destroying ipv6 listening
    servers.
    
    Fixes: 830662f6f032 ("RDMA/cxgb4: Add support for active and passive open connection with IPv6 address")
    Link: https://lore.kernel.org/r/20210324190453.8171-1-bharat@chelsio.com
    Signed-off-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d647035ffa5db4a1f777172deaf2729b1dc93f7
Author: Aya Levin <ayal@nvidia.com>
Date:   Thu Mar 11 17:46:35 2021 +0200

    net/mlx5e: Fix error path for ethtool set-priv-flag
    
    [ Upstream commit 4eacfe72e3e037e3fc019113df32c39a705148c2 ]
    
    Expose error value when failing to comply to command:
    $ ethtool --set-priv-flags eth2 rx_cqe_compress [on/off]
    
    Fixes: be7e87f92b58 ("net/mlx5e: Fail safe cqe compressing/moderation mode setting")
    Signed-off-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78d9820599ecef8f722022d7442529eeb624201e
Author: Pavel Tatashin <pasha.tatashin@soleen.com>
Date:   Fri Mar 19 16:50:54 2021 -0400

    arm64: kdump: update ppos when reading elfcorehdr
    
    [ Upstream commit 141f8202cfa4192c3af79b6cbd68e7760bb01b5a ]
    
    The ppos points to a position in the old kernel memory (and in case of
    arm64 in the crash kernel since elfcorehdr is passed as a segment). The
    function should update the ppos by the amount that was read. This bug is
    not exposed by accident, but other platforms update this value properly.
    So, fix it in ARM64 version of elfcorehdr_read() as well.
    
    Signed-off-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Fixes: e62aaeac426a ("arm64: kdump: provide /proc/vmcore file")
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Link: https://lore.kernel.org/r/20210319205054.743368-1-pasha.tatashin@soleen.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7361c1d97a49c0d0d24a7b1f0b29316506555855
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Sat Mar 20 08:56:02 2021 -0300

    drm/msm: fix shutdown hook in case GPU components failed to bind
    
    [ Upstream commit 623f279c77811475ac8fd5635cc4e4451aa71291 ]
    
    If GPU components have failed to bind, shutdown callback would fail with
    the following backtrace. Add safeguard check to stop that oops from
    happening and allow the board to reboot.
    
    [   66.617046] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    [   66.626066] Mem abort info:
    [   66.628939]   ESR = 0x96000006
    [   66.632088]   EC = 0x25: DABT (current EL), IL = 32 bits
    [   66.637542]   SET = 0, FnV = 0
    [   66.640688]   EA = 0, S1PTW = 0
    [   66.643924] Data abort info:
    [   66.646889]   ISV = 0, ISS = 0x00000006
    [   66.650832]   CM = 0, WnR = 0
    [   66.653890] user pgtable: 4k pages, 48-bit VAs, pgdp=0000000107f81000
    [   66.660505] [0000000000000000] pgd=0000000100bb2003, p4d=0000000100bb2003, pud=0000000100897003, pmd=0000000000000000
    [   66.671398] Internal error: Oops: 96000006 [#1] PREEMPT SMP
    [   66.677115] Modules linked in:
    [   66.680261] CPU: 6 PID: 352 Comm: reboot Not tainted 5.11.0-rc2-00309-g79e3faa756b2 #38
    [   66.688473] Hardware name: Qualcomm Technologies, Inc. Robotics RB5 (DT)
    [   66.695347] pstate: 60400005 (nZCv daif +PAN -UAO -TCO BTYPE=--)
    [   66.701507] pc : msm_atomic_commit_tail+0x78/0x4e0
    [   66.706437] lr : commit_tail+0xa4/0x184
    [   66.710381] sp : ffff8000108f3af0
    [   66.713791] x29: ffff8000108f3af0 x28: ffff418c44337000
    [   66.719242] x27: 0000000000000000 x26: ffff418c40a24490
    [   66.724693] x25: ffffd3a842a4f1a0 x24: 0000000000000008
    [   66.730146] x23: ffffd3a84313f030 x22: ffff418c444ce000
    [   66.735598] x21: ffff418c408a4980 x20: 0000000000000000
    [   66.741049] x19: 0000000000000000 x18: ffff800010710fbc
    [   66.746500] x17: 000000000000000c x16: 0000000000000001
    [   66.751954] x15: 0000000000010008 x14: 0000000000000068
    [   66.757405] x13: 0000000000000001 x12: 0000000000000000
    [   66.762855] x11: 0000000000000001 x10: 00000000000009b0
    [   66.768306] x9 : ffffd3a843192000 x8 : ffff418c44337000
    [   66.773757] x7 : 0000000000000000 x6 : 00000000a401b34e
    [   66.779210] x5 : 00ffffffffffffff x4 : 0000000000000000
    [   66.784660] x3 : 0000000000000000 x2 : ffff418c444ce000
    [   66.790111] x1 : ffffd3a841dce530 x0 : ffff418c444cf000
    [   66.795563] Call trace:
    [   66.798075]  msm_atomic_commit_tail+0x78/0x4e0
    [   66.802633]  commit_tail+0xa4/0x184
    [   66.806217]  drm_atomic_helper_commit+0x160/0x390
    [   66.811051]  drm_atomic_commit+0x4c/0x60
    [   66.815082]  drm_atomic_helper_disable_all+0x1f4/0x210
    [   66.820355]  drm_atomic_helper_shutdown+0x80/0x130
    [   66.825276]  msm_pdev_shutdown+0x14/0x20
    [   66.829303]  platform_shutdown+0x28/0x40
    [   66.833330]  device_shutdown+0x158/0x330
    [   66.837357]  kernel_restart+0x40/0xa0
    [   66.841122]  __do_sys_reboot+0x228/0x250
    [   66.845148]  __arm64_sys_reboot+0x28/0x34
    [   66.849264]  el0_svc_common.constprop.0+0x74/0x190
    [   66.854187]  do_el0_svc+0x24/0x90
    [   66.857595]  el0_svc+0x14/0x20
    [   66.860739]  el0_sync_handler+0x1a4/0x1b0
    [   66.864858]  el0_sync+0x174/0x180
    [   66.868269] Code: 1ac020a0 2a000273 eb02007f 54ffff01 (f9400285)
    [   66.874525] ---[ end trace 20dedb2a3229fec8 ]---
    
    Fixes: 9d5cbf5fe46e ("drm/msm: add shutdown support for display platform_driver")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 561b5867791e6bdaad9426b81a6e4ca366ddd6d1
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Fri Mar 19 13:44:22 2021 +0000

    net: stmmac: dwmac-sun8i: Provide TX and RX fifo sizes
    
    [ Upstream commit 014dfa26ce1c647af09bf506285ef67e0e3f0a6b ]
    
    MTU cannot be changed on dwmac-sun8i. (ip link set eth0 mtu xxx returning EINVAL)
    This is due to tx_fifo_size being 0, since this value is used to compute valid
    MTU range.
    Like dwmac-sunxi (with commit 806fd188ce2a ("net: stmmac: dwmac-sunxi: Provide TX and RX fifo sizes"))
    dwmac-sun8i need to have tx and rx fifo sizes set.
    I have used values from datasheets.
    After this patch, setting a non-default MTU (like 1000) value works and network is still useable.
    
    Tested-on: sun8i-h3-orangepi-pc
    Tested-on: sun8i-r40-bananapi-m2-ultra
    Tested-on: sun50i-a64-bananapi-m64
    Tested-on: sun50i-h5-nanopi-neo-plus2
    Tested-on: sun50i-h6-pine-h64
    Fixes: 9f93ac8d408 ("net-next: stmmac: Add dwmac-sun8i")
    Reported-by: Belisko Marek <marek.belisko@gmail.com>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27776ee6f1b1199d2dd0bbb23fbcb02282a664d4
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Mar 18 16:57:49 2021 +0100

    net: cdc-phonet: fix data-interface release on probe failure
    
    [ Upstream commit c79a707072fe3fea0e3c92edee6ca85c1e53c29f ]
    
    Set the disconnected flag before releasing the data interface in case
    netdev registration fails to avoid having the disconnect callback try to
    deregister the never registered netdev (and trigger a WARN_ON()).
    
    Fixes: 87cf65601e17 ("USB host CDC Phonet network interface driver")
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2af20367a7da5de2f2b964ee68667ccd579f15bc
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Feb 12 11:22:14 2021 +0100

    mac80211: fix rate mask reset
    
    [ Upstream commit 1944015fe9c1d9fa5e9eb7ffbbb5ef8954d6753b ]
    
    Coverity reported the strange "if (~...)" condition that's
    always true. It suggested that ! was intended instead of ~,
    but upon further analysis I'm convinced that what really was
    intended was a comparison to 0xff/0xffff (in HT/VHT cases
    respectively), since this indicates that all of the rates
    are enabled.
    
    Change the comparison accordingly.
    
    I'm guessing this never really mattered because a reset to
    not having a rate mask is basically equivalent to having a
    mask that enables all rates.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Fixes: 2ffbe6d33366 ("mac80211: fix and optimize MCS mask handling")
    Fixes: b119ad6e726c ("mac80211: add rate mask logic for vht rates")
    Reviewed-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210212112213.36b38078f569.I8546a20c80bc1669058eb453e213630b846e107b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ce61c2ed3244244619b03fa072872795b061717
Author: Torin Cooper-Bennun <torin@maxiluxsystems.com>
Date:   Wed Mar 3 10:31:52 2021 +0000

    can: m_can: m_can_do_rx_poll(): fix extraneous msg loss warning
    
    [ Upstream commit c0e399f3baf42279f48991554240af8c457535d1 ]
    
    Message loss from RX FIFO 0 is already handled in
    m_can_handle_lost_msg(), with netdev output included.
    
    Removing this warning also improves driver performance under heavy
    load, where m_can_do_rx_poll() may be called many times before this
    interrupt is cleared, causing this message to be output many
    times (thanks Mariusz Madej for this report).
    
    Fixes: e0d1f4816f2a ("can: m_can: add Bosch M_CAN controller support")
    Link: https://lore.kernel.org/r/20210303103151.3760532-1-torin@maxiluxsystems.com
    Reported-by: Mariusz Madej <mariusz.madej@xtrack.com>
    Signed-off-by: Torin Cooper-Bennun <torin@maxiluxsystems.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4e24341aa3aa1e3c413b6a5bfcabd92258e93d3
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Mon Mar 1 21:55:40 2021 -0500

    can: c_can: move runtime PM enable/disable to c_can_platform
    
    [ Upstream commit 6e2fe01dd6f98da6cae8b07cd5cfa67abc70d97d ]
    
    Currently doing modprobe c_can_pci will make the kernel complain:
    
        Unbalanced pm_runtime_enable!
    
    this is caused by pm_runtime_enable() called before pm is initialized.
    
    This fix is similar to 227619c3ff7c, move those pm_enable/disable code
    to c_can_platform.
    
    Fixes: 4cdd34b26826 ("can: c_can: Add runtime PM support to Bosch C_CAN/D_CAN controller")
    Link: http://lore.kernel.org/r/20210302025542.987600-1-ztong0001@gmail.com
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Tested-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9606db211865d3a694ecfe9749ef2e88578a6617
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sun Feb 28 21:45:11 2021 -0500

    can: c_can_pci: c_can_pci_remove(): fix use-after-free
    
    [ Upstream commit 0429d6d89f97ebff4f17f13f5b5069c66bde8138 ]
    
    There is a UAF in c_can_pci_remove(). dev is released by
    free_c_can_dev() and is used by pci_iounmap(pdev, priv->base) later.
    To fix this issue, save the mmio address before releasing dev.
    
    Fixes: 5b92da0443c2 ("c_can_pci: generic module for C_CAN/D_CAN on PCI")
    Link: https://lore.kernel.org/r/20210301024512.539039-1-ztong0001@gmail.com
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 890df3ac12a40bb23fad6896f3e32a411dae3497
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Tue Mar 9 09:21:27 2021 +0100

    can: peak_usb: add forgotten supported devices
    
    [ Upstream commit 59ec7b89ed3e921cd0625a8c83f31a30d485fdf8 ]
    
    Since the peak_usb driver also supports the CAN-USB interfaces
    "PCAN-USB X6" and "PCAN-Chip USB" from PEAK-System GmbH, this patch adds
    their names to the list of explicitly supported devices.
    
    Fixes: ea8b65b596d7 ("can: usb: Add support of PCAN-Chip USB stamp module")
    Fixes: f00b534ded60 ("can: peak: Add support for PCAN-USB X6 USB interface")
    Link: https://lore.kernel.org/r/20210309082128.23125-3-s.grosjean@peak-system.com
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20338f00c58b0d181c837f9f9a81f1fa3efc14b7
Author: Dylan Hung <dylan_hung@aspeedtech.com>
Date:   Fri Mar 12 11:04:05 2021 +1030

    ftgmac100: Restart MAC HW once
    
    [ Upstream commit 6897087323a2fde46df32917462750c069668b2f ]
    
    The interrupt handler may set the flag to reset the mac in the future,
    but that flag is not cleared once the reset has occurred.
    
    Fixes: 10cbd6407609 ("ftgmac100: Rework NAPI & interrupts handling")
    Signed-off-by: Dylan Hung <dylan_hung@aspeedtech.com>
    Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae6c818c59bc146f53514c92ef659dc58b86fbf2
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Wed Mar 10 20:01:40 2021 -0800

    net/qlcnic: Fix a use after free in qlcnic_83xx_get_minidump_template
    
    [ Upstream commit db74623a3850db99cb9692fda9e836a56b74198d ]
    
    In qlcnic_83xx_get_minidump_template, fw_dump->tmpl_hdr was freed by
    vfree(). But unfortunately, it is used when extended is true.
    
    Fixes: 7061b2bdd620e ("qlogic: Deletion of unnecessary checks before two function calls")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a87c815a3741d8645c09ee7337dc00b63e9938ae
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Feb 28 17:44:23 2021 +0800

    e1000e: Fix error handling in e1000_set_d0_lplu_state_82571
    
    [ Upstream commit b52912b8293f2c496f42583e65599aee606a0c18 ]
    
    There is one e1e_wphy() call in e1000_set_d0_lplu_state_82571
    that we have caught its return value but lack further handling.
    Check and terminate the execution flow just like other e1e_wphy()
    in this function.
    
    Fixes: bc7f75fa9788 ("[E1000E]: New pci-express e1000 driver (currently for ICH9 devices only)")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Sasha Neftin <sasha.neftin@intel.com>
    Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c295b4dbf60d64b143b7bea4e1fc7117e887374
Author: Vitaly Lifshits <vitaly.lifshits@intel.com>
Date:   Wed Oct 21 14:59:37 2020 +0300

    e1000e: add rtnl_lock() to e1000_reset_task
    
    [ Upstream commit 21f857f0321d0d0ea9b1a758bd55dc63d1cb2437 ]
    
    A possible race condition was found in e1000_reset_task,
    after discovering a similar issue in igb driver via
    commit 024a8168b749 ("igb: reinit_locked() should be called
    with rtnl_lock").
    
    Added rtnl_lock() and rtnl_unlock() to avoid this.
    
    Fixes: bc7f75fa9788 ("[E1000E]: New pci-express e1000 driver (currently for ICH9 devices only)")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Vitaly Lifshits <vitaly.lifshits@intel.com>
    Tested-by: Dvora Fuxbrumer <dvorax.fuxbrumer@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aba2a9b5df85ba357fd7c785e81ca563c320de1e
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Mar 10 14:17:58 2021 -0800

    net: dsa: bcm_sf2: Qualify phydev->dev_flags based on port
    
    [ Upstream commit 47142ed6c34d544ae9f0463e58d482289cbe0d46 ]
    
    Similar to commit 92696286f3bb37ba50e4bd8d1beb24afb759a799 ("net:
    bcmgenet: Set phydev->dev_flags only for internal PHYs") we need to
    qualify the phydev->dev_flags based on whether the port is connected to
    an internal or external PHY otherwise we risk having a flags collision
    with a completely different interpretation depending on the driver.
    
    Fixes: aa9aef77c761 ("net: dsa: bcm_sf2: communicate integrated PHY revision to PHY driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8dd04ee9c5ffbe3b40e52a18df41d758886e35c
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Mar 10 01:56:36 2021 -0800

    macvlan: macvlan_count_rx() needs to be aware of preemption
    
    [ Upstream commit dd4fa1dae9f4847cc1fd78ca468ad69e16e5db3e ]
    
    macvlan_count_rx() can be called from process context, it is thus
    necessary to disable preemption before calling u64_stats_update_begin()
    
    syzbot was able to spot this on 32bit arch:
    
    WARNING: CPU: 1 PID: 4632 at include/linux/seqlock.h:271 __seqprop_assert include/linux/seqlock.h:271 [inline]
    WARNING: CPU: 1 PID: 4632 at include/linux/seqlock.h:271 __seqprop_assert.constprop.0+0xf0/0x11c include/linux/seqlock.h:269
    Modules linked in:
    Kernel panic - not syncing: panic_on_warn set ...
    CPU: 1 PID: 4632 Comm: kworker/1:3 Not tainted 5.12.0-rc2-syzkaller #0
    Hardware name: ARM-Versatile Express
    Workqueue: events macvlan_process_broadcast
    Backtrace:
    [<82740468>] (dump_backtrace) from [<827406dc>] (show_stack+0x18/0x1c arch/arm/kernel/traps.c:252)
     r7:00000080 r6:60000093 r5:00000000 r4:8422a3c4
    [<827406c4>] (show_stack) from [<82751b58>] (__dump_stack lib/dump_stack.c:79 [inline])
    [<827406c4>] (show_stack) from [<82751b58>] (dump_stack+0xb8/0xe8 lib/dump_stack.c:120)
    [<82751aa0>] (dump_stack) from [<82741270>] (panic+0x130/0x378 kernel/panic.c:231)
     r7:830209b4 r6:84069ea4 r5:00000000 r4:844350d0
    [<82741140>] (panic) from [<80244924>] (__warn+0xb0/0x164 kernel/panic.c:605)
     r3:8404ec8c r2:00000000 r1:00000000 r0:830209b4
     r7:0000010f
    [<80244874>] (__warn) from [<82741520>] (warn_slowpath_fmt+0x68/0xd4 kernel/panic.c:628)
     r7:81363f70 r6:0000010f r5:83018e50 r4:00000000
    [<827414bc>] (warn_slowpath_fmt) from [<81363f70>] (__seqprop_assert include/linux/seqlock.h:271 [inline])
    [<827414bc>] (warn_slowpath_fmt) from [<81363f70>] (__seqprop_assert.constprop.0+0xf0/0x11c include/linux/seqlock.h:269)
     r8:5a109000 r7:0000000f r6:a568dac0 r5:89802300 r4:00000001
    [<81363e80>] (__seqprop_assert.constprop.0) from [<81364af0>] (u64_stats_update_begin include/linux/u64_stats_sync.h:128 [inline])
    [<81363e80>] (__seqprop_assert.constprop.0) from [<81364af0>] (macvlan_count_rx include/linux/if_macvlan.h:47 [inline])
    [<81363e80>] (__seqprop_assert.constprop.0) from [<81364af0>] (macvlan_broadcast+0x154/0x26c drivers/net/macvlan.c:291)
     r5:89802300 r4:8a927740
    [<8136499c>] (macvlan_broadcast) from [<81365020>] (macvlan_process_broadcast+0x258/0x2d0 drivers/net/macvlan.c:317)
     r10:81364f78 r9:8a86d000 r8:8a9c7e7c r7:8413aa5c r6:00000000 r5:00000000
     r4:89802840
    [<81364dc8>] (macvlan_process_broadcast) from [<802696a4>] (process_one_work+0x2d4/0x998 kernel/workqueue.c:2275)
     r10:00000008 r9:8404ec98 r8:84367a02 r7:ddfe6400 r6:ddfe2d40 r5:898dac80
     r4:8a86d43c
    [<802693d0>] (process_one_work) from [<80269dcc>] (worker_thread+0x64/0x54c kernel/workqueue.c:2421)
     r10:00000008 r9:8a9c6000 r8:84006d00 r7:ddfe2d78 r6:898dac94 r5:ddfe2d40
     r4:898dac80
    [<80269d68>] (worker_thread) from [<80271f40>] (kthread+0x184/0x1a4 kernel/kthread.c:292)
     r10:85247e64 r9:898dac80 r8:80269d68 r7:00000000 r6:8a9c6000 r5:89a2ee40
     r4:8a97bd00
    [<80271dbc>] (kthread) from [<80200114>] (ret_from_fork+0x14/0x20 arch/arm/kernel/entry-common.S:158)
    Exception stack(0x8a9c7fb0 to 0x8a9c7ff8)
    
    Fixes: 412ca1550cbe ("macvlan: Move broadcasts into a work queue")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c68d23d96bd3e98e5808246b2e2156d16ec8e972
Author: Georgi Valkov <gvalkov@abv.bg>
Date:   Mon Mar 8 10:30:38 2021 -0800

    libbpf: Fix INSTALL flag order
    
    [ Upstream commit e7fb6465d4c8e767e39cbee72464e0060ab3d20c ]
    
    It was reported ([0]) that having optional -m flag between source and
    destination arguments in install command breaks bpftools cross-build
    on MacOS. Move -m to the front to fix this issue.
    
      [0] https://github.com/openwrt/openwrt/pull/3959
    
    Fixes: 7110d80d53f4 ("libbpf: Makefile set specified permission mode")
    Signed-off-by: Georgi Valkov <gvalkov@abv.bg>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20210308183038.613432-1-andrii@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a2984e0e516cdd6bd0ac6123a2a38b8b66f2561
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Jan 28 21:15:48 2021 +0200

    bus: omap_l3_noc: mark l3 irqs as IRQF_NO_THREAD
    
    [ Upstream commit 7d7275b3e866cf8092bd12553ec53ba26864f7bb ]
    
    The main purpose of l3 IRQs is to catch OCP bus access errors and identify
    corresponding code places by showing call stack, so it's important to
    handle L3 interconnect errors as fast as possible. On RT these IRQs will
    became threaded and will be scheduled much more late from the moment actual
    error occurred so showing completely useless information.
    
    Hence, mark l3 IRQs as IRQF_NO_THREAD so they will not be forced threaded
    on RT or if force_irqthreads = true.
    
    Fixes: 0ee7261c9212 ("drivers: bus: Move the OMAP interconnect driver to drivers/bus/")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 193af647a6df63eeebdeaec503acc242fe90b597
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Mar 26 14:32:32 2021 -0400

    dm ioctl: fix out of bounds array access when no devices
    
    commit 4edbe1d7bcffcd6269f3b5eb63f710393ff2ec7a upstream.
    
    If there are not any dm devices, we need to zero the "dev" argument in
    the first structure dm_name_list. However, this can cause out of
    bounds write, because the "needed" variable is zero and len may be
    less than eight.
    
    Fix this bug by reporting DM_BUFFER_FULL_FLAG if the result buffer is
    too small to hold the "nl->dev" value.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fcfe1558d82acb2134527976485db48e2a8d0f0
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Apr 11 19:05:03 2018 +0300

    ARM: dts: at91-sama5d27_som1: fix phy address to 7
    
    commit 221c3a09ddf70a0a51715e6c2878d8305e95c558 upstream.
    
    Fix the phy address to 7 for Ethernet PHY on SAMA5D27 SOM1. No
    connection established if phy address 0 is used.
    
    The board uses the 24 pins version of the KSZ8081RNA part, KSZ8081RNA
    pin 16 REFCLK as PHYAD bit [2] has weak internal pull-down.  But at
    reset, connected to PD09 of the MPU it's connected with an internal
    pull-up forming PHYAD[2:0] = 7.
    
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Fixes: 2f61929eb10a ("ARM: dts: at91: at91-sama5d27_som1: fix PHY ID")
    Cc: Ludovic Desroches <ludovic.desroches@microchip.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Cc: <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b5de3f4a9e5f029c226c9adf960362b64b77a1c
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Sun Mar 7 22:47:36 2021 +0200

    arm64: dts: ls1043a: mark crypto engine dma coherent
    
    commit 4fb3a074755b7737c4081cffe0ccfa08c2f2d29d upstream.
    
    Crypto engine (CAAM) on LS1043A platform is configured HW-coherent,
    mark accordingly the DT node.
    
    Lack of "dma-coherent" property for an IP that is configured HW-coherent
    can lead to problems, similar to what has been reported for LS1046A.
    
    Cc: <stable@vger.kernel.org> # v4.8+
    Fixes: 63dac35b58f4 ("arm64: dts: ls1043a: add crypto node")
    Link: https://lore.kernel.org/linux-crypto/fe6faa24-d8f7-d18f-adfa-44fa0caa1598@arm.com
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Acked-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dec93b20e7e36afc369ade824451be10c7529485
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Sun Mar 7 22:47:37 2021 +0200

    arm64: dts: ls1012a: mark crypto engine dma coherent
    
    commit ba8da03fa7dff59d9400250aebd38f94cde3cb0f upstream.
    
    Crypto engine (CAAM) on LS1012A platform is configured HW-coherent,
    mark accordingly the DT node.
    
    Lack of "dma-coherent" property for an IP that is configured HW-coherent
    can lead to problems, similar to what has been reported for LS1046A.
    
    Cc: <stable@vger.kernel.org> # v4.12+
    Fixes: 85b85c569507 ("arm64: dts: ls1012a: add crypto node")
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Acked-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 771b8bc4fb42cd482fdb36235ff92d4603b223e0
Author: Horia Geantă <horia.geanta@nxp.com>
Date:   Sun Mar 7 22:47:35 2021 +0200

    arm64: dts: ls1046a: mark crypto engine dma coherent
    
    commit 9c3a16f88385e671b63a0de7b82b85e604a80f42 upstream.
    
    Crypto engine (CAAM) on LS1046A platform is configured HW-coherent,
    mark accordingly the DT node.
    
    As reported by Greg and Sascha, and explained by Robin, lack of
    "dma-coherent" property for an IP that is configured HW-coherent
    can lead to problems, e.g. on v5.11:
    
    > kernel BUG at drivers/crypto/caam/jr.c:247!
    > Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    > Modules linked in:
    > CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.11.0-20210225-3-00039-g434215968816-dirty #12
    > Hardware name: TQ TQMLS1046A SoM on Arkona AT1130 (C300) board (DT)
    > pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    > pc : caam_jr_dequeue+0x98/0x57c
    > lr : caam_jr_dequeue+0x98/0x57c
    > sp : ffff800010003d50
    > x29: ffff800010003d50 x28: ffff8000118d4000
    > x27: ffff8000118d4328 x26: 00000000000001f0
    > x25: ffff0008022be480 x24: ffff0008022c6410
    > x23: 00000000000001f1 x22: ffff8000118d4329
    > x21: 0000000000004d80 x20: 00000000000001f1
    > x19: 0000000000000001 x18: 0000000000000020
    > x17: 0000000000000000 x16: 0000000000000015
    > x15: ffff800011690230 x14: 2e2e2e2e2e2e2e2e
    > x13: 2e2e2e2e2e2e2020 x12: 3030303030303030
    > x11: ffff800011700a38 x10: 00000000fffff000
    > x9 : ffff8000100ada30 x8 : ffff8000116a8a38
    > x7 : 0000000000000001 x6 : 0000000000000000
    > x5 : 0000000000000000 x4 : 0000000000000000
    > x3 : 00000000ffffffff x2 : 0000000000000000
    > x1 : 0000000000000000 x0 : 0000000000001800
    > Call trace:
    >  caam_jr_dequeue+0x98/0x57c
    >  tasklet_action_common.constprop.0+0x164/0x18c
    >  tasklet_action+0x44/0x54
    >  __do_softirq+0x160/0x454
    >  __irq_exit_rcu+0x164/0x16c
    >  irq_exit+0x1c/0x30
    >  __handle_domain_irq+0xc0/0x13c
    >  gic_handle_irq+0x5c/0xf0
    >  el1_irq+0xb4/0x180
    >  arch_cpu_idle+0x18/0x30
    >  default_idle_call+0x3c/0x1c0
    >  do_idle+0x23c/0x274
    >  cpu_startup_entry+0x34/0x70
    >  rest_init+0xdc/0xec
    >  arch_call_rest_init+0x1c/0x28
    >  start_kernel+0x4ac/0x4e4
    > Code: 91392021 912c2000 d377d8c6 97f24d96 (d4210000)
    
    Cc: <stable@vger.kernel.org> # v4.10+
    Fixes: 8126d88162a5 ("arm64: dts: add QorIQ LS1046A SoC support")
    Link: https://lore.kernel.org/linux-crypto/fe6faa24-d8f7-d18f-adfa-44fa0caa1598@arm.com
    Reported-by: Greg Ungerer <gerg@kernel.org>
    Reported-by: Sascha Hauer <s.hauer@pengutronix.de>
    Tested-by: Sascha Hauer <s.hauer@pengutronix.de>
    Signed-off-by: Horia Geantă <horia.geanta@nxp.com>
    Acked-by: Greg Ungerer <gerg@kernel.org>
    Acked-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec5e1cd659ed2f36b07575b9b7853afa9fd52fd5
Author: Phillip Lougher <phillip@squashfs.org.uk>
Date:   Wed Mar 24 21:37:35 2021 -0700

    squashfs: fix xattr id and id lookup sanity checks
    
    commit 8b44ca2b634527151af07447a8090a5f3a043321 upstream.
    
    The checks for maximum metadata block size is missing
    SQUASHFS_BLOCK_OFFSET (the two byte length count).
    
    Link: https://lkml.kernel.org/r/2069685113.2081245.1614583677427@webmail.123-reg.co.uk
    Fixes: f37aa4c7366e23f ("squashfs: add more sanity checks in id lookup")
    Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
    Cc: Sean Nyekjaer <sean@geanix.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9443acdefbf14e6011ce71f64de251fb2847e4b9
Author: Sean Nyekjaer <sean@geanix.com>
Date:   Wed Mar 24 21:37:32 2021 -0700

    squashfs: fix inode lookup sanity checks
    
    commit c1b2028315c6b15e8d6725e0d5884b15887d3daa upstream.
    
    When mouting a squashfs image created without inode compression it fails
    with: "unable to read inode lookup table"
    
    It turns out that the BLOCK_OFFSET is missing when checking the
    SQUASHFS_METADATA_SIZE agaist the actual size.
    
    Link: https://lkml.kernel.org/r/20210226092903.1473545-1-sean@geanix.com
    Fixes: eabac19e40c0 ("squashfs: add more sanity checks in inode lookup")
    Signed-off-by: Sean Nyekjaer <sean@geanix.com>
    Acked-by: Phillip Lougher <phillip@squashfs.org.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea8e84108d74a895d94ebcf79ffab6b9da19fc8f
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Fri Mar 12 21:08:27 2021 -0800

    ia64: fix ptrace(PTRACE_SYSCALL_INFO_EXIT) sign
    
    [ Upstream commit 61bf318eac2c13356f7bd1c6a05421ef504ccc8a ]
    
    In https://bugs.gentoo.org/769614 Dmitry noticed that
    `ptrace(PTRACE_GET_SYSCALL_INFO)` does not return error sign properly.
    
    The bug is in mismatch between get/set errors:
    
    static inline long syscall_get_error(struct task_struct *task,
                                         struct pt_regs *regs)
    {
            return regs->r10 == -1 ? regs->r8:0;
    }
    
    static inline long syscall_get_return_value(struct task_struct *task,
                                                struct pt_regs *regs)
    {
            return regs->r8;
    }
    
    static inline void syscall_set_return_value(struct task_struct *task,
                                                struct pt_regs *regs,
                                                int error, long val)
    {
            if (error) {
                    /* error < 0, but ia64 uses > 0 return value */
                    regs->r8 = -error;
                    regs->r10 = -1;
            } else {
                    regs->r8 = val;
                    regs->r10 = 0;
            }
    }
    
    Tested on v5.10 on rx3600 machine (ia64 9040 CPU).
    
    Link: https://lkml.kernel.org/r/20210221002554.333076-2-slyfox@gentoo.org
    Link: https://bugs.gentoo.org/769614
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Reported-by: Dmitry V. Levin <ldv@altlinux.org>
    Reviewed-by: Dmitry V. Levin <ldv@altlinux.org>
    Cc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6557658023601790fcebc734f83ec83391b5abac
Author: Sergei Trofimovich <slyfox@gentoo.org>
Date:   Fri Mar 12 21:08:23 2021 -0800

    ia64: fix ia64_syscall_get_set_arguments() for break-based syscalls
    
    [ Upstream commit 0ceb1ace4a2778e34a5414e5349712ae4dc41d85 ]
    
    In https://bugs.gentoo.org/769614 Dmitry noticed that
    `ptrace(PTRACE_GET_SYSCALL_INFO)` does not work for syscalls called via
    glibc's syscall() wrapper.
    
    ia64 has two ways to call syscalls from userspace: via `break` and via
    `eps` instructions.
    
    The difference is in stack layout:
    
    1. `eps` creates simple stack frame: no locals, in{0..7} == out{0..8}
    2. `break` uses userspace stack frame: may be locals (glibc provides
       one), in{0..7} == out{0..8}.
    
    Both work fine in syscall handling cde itself.
    
    But `ptrace(PTRACE_GET_SYSCALL_INFO)` uses unwind mechanism to
    re-extract syscall arguments but it does not account for locals.
    
    The change always skips locals registers. It should not change `eps`
    path as kernel's handler already enforces locals=0 and fixes `break`.
    
    Tested on v5.10 on rx3600 machine (ia64 9040 CPU).
    
    Link: https://lkml.kernel.org/r/20210221002554.333076-1-slyfox@gentoo.org
    Link: https://bugs.gentoo.org/769614
    Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
    Reported-by: Dmitry V. Levin <ldv@altlinux.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b07a6d71db121089bf4142e632c821b140c757fd
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Thu Jan 28 17:36:38 2021 -0500

    nfs: we don't support removing system.nfs4_acl
    
    [ Upstream commit 4f8be1f53bf615102d103c0509ffa9596f65b718 ]
    
    The NFSv4 protocol doesn't have any notion of reomoving an attribute, so
    removexattr(path,"system.nfs4_acl") doesn't make sense.
    
    There's no documented return value.  Arguably it could be EOPNOTSUPP but
    I'm a little worried an application might take that to mean that we
    don't support ACLs or xattrs.  How about EINVAL?
    
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81d4645d5e09fcd96cfea3cda7a212aac508aea1
Author: Christian König <christian.koenig@amd.com>
Date:   Mon Mar 8 19:22:13 2021 +0100

    drm/radeon: fix AGP dependency
    
    [ Upstream commit cba2afb65cb05c3d197d17323fee4e3c9edef9cd ]
    
    When AGP is compiled as module radeon must be compiled as module as
    well.
    
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b23f3e9080863faadbde149a3579c129585be5
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Mon Mar 8 09:38:12 2021 +0100

    u64_stats,lockdep: Fix u64_stats_init() vs lockdep
    
    [ Upstream commit d5b0e0677bfd5efd17c5bbb00156931f0d41cb85 ]
    
    Jakub reported that:
    
        static struct net_device *rtl8139_init_board(struct pci_dev *pdev)
        {
                ...
                u64_stats_init(&tp->rx_stats.syncp);
                u64_stats_init(&tp->tx_stats.syncp);
                ...
        }
    
    results in lockdep getting confused between the RX and TX stats lock.
    This is because u64_stats_init() is an inline calling seqcount_init(),
    which is a macro using a static variable to generate a lockdep class.
    
    By wrapping that in an inline, we negate the effect of the macro and
    fold the static key variable, hence the confusion.
    
    Fix by also making u64_stats_init() a macro for the case where it
    matters, leaving the other case an inline for argument validation
    etc.
    
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Debugged-by: "Ahmed S. Darwish" <a.darwish@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Tested-by: "Erhard F." <erhard_f@mailbox.org>
    Link: https://lkml.kernel.org/r/YEXicy6+9MksdLZh@hirez.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e7cbeeb3234430b821790a5741e3b4d35f3458b
Author: Rob Gardner <rob.gardner@oracle.com>
Date:   Sun Feb 28 22:48:16 2021 -0700

    sparc64: Fix opcode filtering in handling of no fault loads
    
    [ Upstream commit e5e8b80d352ec999d2bba3ea584f541c83f4ca3f ]
    
    is_no_fault_exception() has two bugs which were discovered via random
    opcode testing with stress-ng. Both are caused by improper filtering
    of opcodes.
    
    The first bug can be triggered by a floating point store with a no-fault
    ASI, for instance "sta %f0, [%g0] #ASI_PNF", opcode C1A01040.
    
    The code first tests op3[5] (0x1000000), which denotes a floating
    point instruction, and then tests op3[2] (0x200000), which denotes a
    store instruction. But these bits are not mutually exclusive, and the
    above mentioned opcode has both bits set. The intent is to filter out
    stores, so the test for stores must be done first in order to have
    any effect.
    
    The second bug can be triggered by a floating point load with one of
    the invalid ASI values 0x8e or 0x8f, which pass this check in
    is_no_fault_exception():
         if ((asi & 0xf2) == ASI_PNF)
    
    An example instruction is "ldqa [%l7 + %o7] #ASI 0x8f, %f38",
    opcode CF95D1EF. Asi values greater than 0x8b (ASI_SNFL) are fatal
    in handle_ldf_stq(), and is_no_fault_exception() must not allow these
    invalid asi values to make it that far.
    
    In both of these cases, handle_ldf_stq() reacts by calling
    sun4v_data_access_exception() or spitfire_data_access_exception(),
    which call is_no_fault_exception() and results in an infinite
    recursion.
    
    Signed-off-by: Rob Gardner <rob.gardner@oracle.com>
    Tested-by: Anatoly Pugachev <matorola@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89a92cbb27622b3efb2cbe51f5405169c99d3dab
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sun Mar 7 22:25:30 2021 -0500

    atm: idt77252: fix null-ptr-dereference
    
    [ Upstream commit 4416e98594dc04590ebc498fc4e530009535c511 ]
    
    this one is similar to the phy_data allocation fix in uPD98402, the
    driver allocate the idt77105_priv and store to dev_data but later
    dereference using dev->dev_data, which will cause null-ptr-dereference.
    
    fix this issue by changing dev_data to phy_data so that PRIV(dev) can
    work correctly.
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abf891d470ab6f3f569934cac779bf0833aae70c
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sun Mar 7 22:25:29 2021 -0500

    atm: uPD98402: fix incorrect allocation
    
    [ Upstream commit 3153724fc084d8ef640c611f269ddfb576d1dcb1 ]
    
    dev->dev_data is set in zatm.c, calling zatm_start() will overwrite this
    dev->dev_data in uPD98402_start() and a subsequent PRIV(dev)->lock
    (i.e dev->phy_data->lock) will result in a null-ptr-dereference.
    
    I believe this is a typo and what it actually want to do is to allocate
    phy_data instead of dev_data.
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eee1d6c16dbcfa86ab2f7cc6e07cf7544e772845
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sun Mar 7 01:12:56 2021 -0800

    net: wan: fix error return code of uhdlc_init()
    
    [ Upstream commit 62765d39553cfd1ad340124fe1e280450e8c89e2 ]
    
    When priv->rx_skbuff or priv->tx_skbuff is NULL, no error return code of
    uhdlc_init() is assigned.
    To fix this bug, ret is assigned with -ENOMEM in these cases.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b118ab8cecc078a077d5b5bab31b15d8fe0cf15
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Sun Mar 7 00:40:12 2021 -0800

    net: hisilicon: hns: fix error return code of hns_nic_clear_all_rx_fetch()
    
    [ Upstream commit 143c253f42bad20357e7e4432087aca747c43384 ]
    
    When hns_assemble_skb() returns NULL to skb, no error return code of
    hns_nic_clear_all_rx_fetch() is assigned.
    To fix this bug, ret is assigned with -ENOMEM in this case.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b4cd7899f5136a0aef01a81ef4001d1a85556a4
Author: Frank Sorenson <sorenson@redhat.com>
Date:   Mon Mar 8 12:12:13 2021 -0600

    NFS: Correct size calculation for create reply length
    
    [ Upstream commit ad3dbe35c833c2d4d0bbf3f04c785d32f931e7c9 ]
    
    CREATE requests return a post_op_fh3, rather than nfs_fh3. The
    post_op_fh3 includes an extra word to indicate 'handle_follows'.
    
    Without that additional word, create fails when full 64-byte
    filehandles are in use.
    
    Add NFS3_post_op_fh_sz, and correct the size calculation for
    NFS3_createres_sz.
    
    Signed-off-by: Frank Sorenson <sorenson@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c03ca151c4b0d9ef7eeb37d295a8bac29a709fb
Author: Timo Rothenpieler <timo@rothenpieler.org>
Date:   Tue Feb 23 15:19:01 2021 +0100

    nfs: fix PNFS_FLEXFILE_LAYOUT Kconfig default
    
    [ Upstream commit a0590473c5e6c4ef17c3132ad08fbad170f72d55 ]
    
    This follows what was done in 8c2fabc6542d9d0f8b16bd1045c2eda59bdcde13.
    With the default being m, it's impossible to build the module into the
    kernel.
    
    Signed-off-by: Timo Rothenpieler <timo@rothenpieler.org>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bad3db7638d80362ab8d8fd30edcbd0218c7992c
Author: Yang Li <yang.lee@linux.alibaba.com>
Date:   Tue Feb 23 16:35:58 2021 +0800

    gpiolib: acpi: Add missing IRQF_ONESHOT
    
    [ Upstream commit 6e5d5791730b55a1f987e1db84b078b91eb49e99 ]
    
    fixed the following coccicheck:
    ./drivers/gpio/gpiolib-acpi.c:176:7-27: ERROR: Threaded IRQ with no
    primary handler requested without IRQF_ONESHOT
    
    Make sure threaded IRQs without a primary handler are always request
    with IRQF_ONESHOT
    
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Yang Li <yang.lee@linux.alibaba.com>
    Acked-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a77bfbc30777acf7fd02b387dbfacb8094dc9f6f
Author: Denis Efremov <efremov@linux.com>
Date:   Fri Mar 5 20:02:12 2021 +0300

    sun/niu: fix wrong RXMAC_BC_FRM_CNT_COUNT count
    
    [ Upstream commit 155b23e6e53475ca3b8c2a946299b4d4dd6a5a1e ]
    
    RXMAC_BC_FRM_CNT_COUNT added to mp->rx_bcasts twice in a row
    in niu_xmac_interrupt(). Remove the second addition.
    
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 311439473a8c8f97aecff4e83d4de28137455067
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Thu Mar 4 18:06:48 2021 -0800

    net: tehuti: fix error return code in bdx_probe()
    
    [ Upstream commit 38c26ff3048af50eee3fcd591921357ee5bfd9ee ]
    
    When bdx_read_mac() fails, no error return code of bdx_probe()
    is assigned.
    To fix this bug, err is assigned with -EFAULT as error return code.
    
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d543c078f79693de32399f575bc15a821b7071da
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jan 3 16:08:42 2021 +0800

    ixgbe: Fix memleak in ixgbe_configure_clsu32
    
    [ Upstream commit 7a766381634da19fc837619b0a34590498d9d29a ]
    
    When ixgbe_fdir_write_perfect_filter_82599() fails,
    input allocated by kzalloc() has not been freed,
    which leads to memleak.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Tested-by: Tony Brelinski <tonyx.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2c2441def599c5e1b3d4a86eb7eb98eea4c7dd7
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Wed Mar 3 16:39:47 2021 +0800

    Revert "r8152: adjust the settings about MAC clock speed down for RTL8153"
    
    [ Upstream commit 4b5dc1a94d4f92b5845e98bd9ae344b26d933aad ]
    
    This reverts commit 134f98bcf1b898fb9d6f2b91bc85dd2e5478b4b8.
    
    The r8153_mac_clk_spd() is used for RTL8153A only, because the register
    table of RTL8153B is different from RTL8153A. However, this function would
    be called when RTL8153B calls r8153_first_init() and r8153_enter_oob().
    That causes RTL8153B becomes unstable when suspending and resuming. The
    worst case may let the device stop working.
    
    Besides, revert this commit to disable MAC clock speed down for RTL8153A.
    It would avoid the known issue when enabling U1. The data of the first
    control transfer may be wrong when exiting U1.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e84ce31500066b0bcabd99889b2feea9ee3ea5ec
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sat Feb 27 22:55:50 2021 -0500

    atm: lanai: dont run lanai_dev_close if not open
    
    [ Upstream commit a2bd45834e83d6c5a04d397bde13d744a4812dfc ]
    
    lanai_dev_open() can fail. When it fail, lanai->base is unmapped and the
    pci device is disabled. The caller, lanai_init_one(), then tries to run
    atm_dev_deregister(). This will subsequently call lanai_dev_close() and
    use the already released MMIO area.
    
    To fix this issue, set the lanai->base to NULL if open fail,
    and test the flag in lanai_dev_close().
    
    [    8.324153] lanai: lanai_start() failed, err=19
    [    8.324819] lanai(itf 0): shutting down interface
    [    8.325211] BUG: unable to handle page fault for address: ffffc90000180024
    [    8.325781] #PF: supervisor write access in kernel mode
    [    8.326215] #PF: error_code(0x0002) - not-present page
    [    8.326641] PGD 100000067 P4D 100000067 PUD 100139067 PMD 10013a067 PTE 0
    [    8.327206] Oops: 0002 [#1] SMP KASAN NOPTI
    [    8.327557] CPU: 0 PID: 95 Comm: modprobe Not tainted 5.11.0-rc7-00090-gdcc0b49040c7 #12
    [    8.328229] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-48-gd9c812dda519-4
    [    8.329145] RIP: 0010:lanai_dev_close+0x4f/0xe5 [lanai]
    [    8.329587] Code: 00 48 c7 c7 00 d3 01 c0 e8 49 4e 0a c2 48 8d bd 08 02 00 00 e8 6e 52 14 c1 48 80
    [    8.330917] RSP: 0018:ffff8881029ef680 EFLAGS: 00010246
    [    8.331196] RAX: 000000000003fffe RBX: ffff888102fb4800 RCX: ffffffffc001a98a
    [    8.331572] RDX: ffffc90000180000 RSI: 0000000000000246 RDI: ffff888102fb4000
    [    8.331948] RBP: ffff888102fb4000 R08: ffffffff8115da8a R09: ffffed102053deaa
    [    8.332326] R10: 0000000000000003 R11: ffffed102053dea9 R12: ffff888102fb48a4
    [    8.332701] R13: ffffffffc00123c0 R14: ffff888102fb4b90 R15: ffff888102fb4b88
    [    8.333077] FS:  00007f08eb9056a0(0000) GS:ffff88815b400000(0000) knlGS:0000000000000000
    [    8.333502] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    8.333806] CR2: ffffc90000180024 CR3: 0000000102a28000 CR4: 00000000000006f0
    [    8.334182] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [    8.334557] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [    8.334932] Call Trace:
    [    8.335066]  atm_dev_deregister+0x161/0x1a0 [atm]
    [    8.335324]  lanai_init_one.cold+0x20c/0x96d [lanai]
    [    8.335594]  ? lanai_send+0x2a0/0x2a0 [lanai]
    [    8.335831]  local_pci_probe+0x6f/0xb0
    [    8.336039]  pci_device_probe+0x171/0x240
    [    8.336255]  ? pci_device_remove+0xe0/0xe0
    [    8.336475]  ? kernfs_create_link+0xb6/0x110
    [    8.336704]  ? sysfs_do_create_link_sd.isra.0+0x76/0xe0
    [    8.336983]  really_probe+0x161/0x420
    [    8.337181]  driver_probe_device+0x6d/0xd0
    [    8.337401]  device_driver_attach+0x82/0x90
    [    8.337626]  ? device_driver_attach+0x90/0x90
    [    8.337859]  __driver_attach+0x60/0x100
    [    8.338065]  ? device_driver_attach+0x90/0x90
    [    8.338298]  bus_for_each_dev+0xe1/0x140
    [    8.338511]  ? subsys_dev_iter_exit+0x10/0x10
    [    8.338745]  ? klist_node_init+0x61/0x80
    [    8.338956]  bus_add_driver+0x254/0x2a0
    [    8.339164]  driver_register+0xd3/0x150
    [    8.339370]  ? 0xffffffffc0028000
    [    8.339550]  do_one_initcall+0x84/0x250
    [    8.339755]  ? trace_event_raw_event_initcall_finish+0x150/0x150
    [    8.340076]  ? free_vmap_area_noflush+0x1a5/0x5c0
    [    8.340329]  ? unpoison_range+0xf/0x30
    [    8.340532]  ? ____kasan_kmalloc.constprop.0+0x84/0xa0
    [    8.340806]  ? unpoison_range+0xf/0x30
    [    8.341014]  ? unpoison_range+0xf/0x30
    [    8.341217]  do_init_module+0xf8/0x350
    [    8.341419]  load_module+0x3fe6/0x4340
    [    8.341621]  ? vm_unmap_ram+0x1d0/0x1d0
    [    8.341826]  ? ____kasan_kmalloc.constprop.0+0x84/0xa0
    [    8.342101]  ? module_frob_arch_sections+0x20/0x20
    [    8.342358]  ? __do_sys_finit_module+0x108/0x170
    [    8.342604]  __do_sys_finit_module+0x108/0x170
    [    8.342841]  ? __ia32_sys_init_module+0x40/0x40
    [    8.343083]  ? file_open_root+0x200/0x200
    [    8.343298]  ? do_sys_open+0x85/0xe0
    [    8.343491]  ? filp_open+0x50/0x50
    [    8.343675]  ? exit_to_user_mode_prepare+0xfc/0x130
    [    8.343935]  do_syscall_64+0x33/0x40
    [    8.344132]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [    8.344401] RIP: 0033:0x7f08eb887cf7
    [    8.344594] Code: 48 89 57 30 48 8b 04 24 48 89 47 38 e9 1d a0 02 00 48 89 f8 48 89 f7 48 89 d6 41
    [    8.345565] RSP: 002b:00007ffcd5c98ad8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    [    8.345962] RAX: ffffffffffffffda RBX: 00000000008fea70 RCX: 00007f08eb887cf7
    [    8.346336] RDX: 0000000000000000 RSI: 00000000008fd9e0 RDI: 0000000000000003
    [    8.346711] RBP: 0000000000000003 R08: 0000000000000000 R09: 0000000000000001
    [    8.347085] R10: 00007f08eb8eb300 R11: 0000000000000246 R12: 00000000008fd9e0
    [    8.347460] R13: 0000000000000000 R14: 00000000008fddd0 R15: 0000000000000001
    [    8.347836] Modules linked in: lanai(+) atm
    [    8.348065] CR2: ffffc90000180024
    [    8.348244] ---[ end trace 7fdc1c668f2003e5 ]---
    [    8.348490] RIP: 0010:lanai_dev_close+0x4f/0xe5 [lanai]
    [    8.348772] Code: 00 48 c7 c7 00 d3 01 c0 e8 49 4e 0a c2 48 8d bd 08 02 00 00 e8 6e 52 14 c1 48 80
    [    8.349745] RSP: 0018:ffff8881029ef680 EFLAGS: 00010246
    [    8.350022] RAX: 000000000003fffe RBX: ffff888102fb4800 RCX: ffffffffc001a98a
    [    8.350397] RDX: ffffc90000180000 RSI: 0000000000000246 RDI: ffff888102fb4000
    [    8.350772] RBP: ffff888102fb4000 R08: ffffffff8115da8a R09: ffffed102053deaa
    [    8.351151] R10: 0000000000000003 R11: ffffed102053dea9 R12: ffff888102fb48a4
    [    8.351525] R13: ffffffffc00123c0 R14: ffff888102fb4b90 R15: ffff888102fb4b88
    [    8.351918] FS:  00007f08eb9056a0(0000) GS:ffff88815b400000(0000) knlGS:0000000000000000
    [    8.352343] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [    8.352647] CR2: ffffc90000180024 CR3: 0000000102a28000 CR4: 00000000000006f0
    [    8.353022] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [    8.353397] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [    8.353958] modprobe (95) used greatest stack depth: 26216 bytes left
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed9437f8f04d6cfb9f44dabd1012ac78791c9499
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Sat Feb 27 16:15:06 2021 -0500

    atm: eni: dont release is never initialized
    
    [ Upstream commit 4deb550bc3b698a1f03d0332cde3df154d1b6c1e ]
    
    label err_eni_release is reachable when eni_start() fail.
    In eni_start() it calls dev->phy->start() in the last step, if start()
    fail we don't need to call phy->stop(), if start() is never called, we
    neither need to call phy->stop(), otherwise null-ptr-deref will happen.
    
    In order to fix this issue, don't call phy->stop() in label err_eni_release
    
    [    4.875714] ==================================================================
    [    4.876091] BUG: KASAN: null-ptr-deref in suni_stop+0x47/0x100 [suni]
    [    4.876433] Read of size 8 at addr 0000000000000030 by task modprobe/95
    [    4.876778]
    [    4.876862] CPU: 0 PID: 95 Comm: modprobe Not tainted 5.11.0-rc7-00090-gdcc0b49040c7 #2
    [    4.877290] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.13.0-48-gd94
    [    4.877876] Call Trace:
    [    4.878009]  dump_stack+0x7d/0xa3
    [    4.878191]  kasan_report.cold+0x10c/0x10e
    [    4.878410]  ? __slab_free+0x2f0/0x340
    [    4.878612]  ? suni_stop+0x47/0x100 [suni]
    [    4.878832]  suni_stop+0x47/0x100 [suni]
    [    4.879043]  eni_do_release+0x3b/0x70 [eni]
    [    4.879269]  eni_init_one.cold+0x1152/0x1747 [eni]
    [    4.879528]  ? _raw_spin_lock_irqsave+0x7b/0xd0
    [    4.879768]  ? eni_ioctl+0x270/0x270 [eni]
    [    4.879990]  ? __mutex_lock_slowpath+0x10/0x10
    [    4.880226]  ? eni_ioctl+0x270/0x270 [eni]
    [    4.880448]  local_pci_probe+0x6f/0xb0
    [    4.880650]  pci_device_probe+0x171/0x240
    [    4.880864]  ? pci_device_remove+0xe0/0xe0
    [    4.881086]  ? kernfs_create_link+0xb6/0x110
    [    4.881315]  ? sysfs_do_create_link_sd.isra.0+0x76/0xe0
    [    4.881594]  really_probe+0x161/0x420
    [    4.881791]  driver_probe_device+0x6d/0xd0
    [    4.882010]  device_driver_attach+0x82/0x90
    [    4.882233]  ? device_driver_attach+0x90/0x90
    [    4.882465]  __driver_attach+0x60/0x100
    [    4.882671]  ? device_driver_attach+0x90/0x90
    [    4.882903]  bus_for_each_dev+0xe1/0x140
    [    4.883114]  ? subsys_dev_iter_exit+0x10/0x10
    [    4.883346]  ? klist_node_init+0x61/0x80
    [    4.883557]  bus_add_driver+0x254/0x2a0
    [    4.883764]  driver_register+0xd3/0x150
    [    4.883971]  ? 0xffffffffc0038000
    [    4.884149]  do_one_initcall+0x84/0x250
    [    4.884355]  ? trace_event_raw_event_initcall_finish+0x150/0x150
    [    4.884674]  ? unpoison_range+0xf/0x30
    [    4.884875]  ? ____kasan_kmalloc.constprop.0+0x84/0xa0
    [    4.885150]  ? unpoison_range+0xf/0x30
    [    4.885352]  ? unpoison_range+0xf/0x30
    [    4.885557]  do_init_module+0xf8/0x350
    [    4.885760]  load_module+0x3fe6/0x4340
    [    4.885960]  ? vm_unmap_ram+0x1d0/0x1d0
    [    4.886166]  ? ____kasan_kmalloc.constprop.0+0x84/0xa0
    [    4.886441]  ? module_frob_arch_sections+0x20/0x20
    [    4.886697]  ? __do_sys_finit_module+0x108/0x170
    [    4.886941]  __do_sys_finit_module+0x108/0x170
    [    4.887178]  ? __ia32_sys_init_module+0x40/0x40
    [    4.887419]  ? file_open_root+0x200/0x200
    [    4.887634]  ? do_sys_open+0x85/0xe0
    [    4.887826]  ? filp_open+0x50/0x50
    [    4.888009]  ? fpregs_assert_state_consistent+0x4d/0x60
    [    4.888287]  ? exit_to_user_mode_prepare+0x2f/0x130
    [    4.888547]  do_syscall_64+0x33/0x40
    [    4.888739]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [    4.889010] RIP: 0033:0x7ff62fcf1cf7
    [    4.889202] Code: 48 89 57 30 48 8b 04 24 48 89 47 38 e9 1d a0 02 00 48 89 f8 48 89 f71
    [    4.890172] RSP: 002b:00007ffe6644ade8 EFLAGS: 00000246 ORIG_RAX: 0000000000000139
    [    4.890570] RAX: ffffffffffffffda RBX: 0000000000f2ca70 RCX: 00007ff62fcf1cf7
    [    4.890944] RDX: 0000000000000000 RSI: 0000000000f2b9e0 RDI: 0000000000000003
    [    4.891318] RBP: 0000000000000003 R08: 0000000000000000 R09: 0000000000000001
    [    4.891691] R10: 00007ff62fd55300 R11: 0000000000000246 R12: 0000000000f2b9e0
    [    4.892064] R13: 0000000000000000 R14: 0000000000f2bdd0 R15: 0000000000000001
    [    4.892439] ==================================================================
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4947ffe983ba6cb5b53d08a372705193a9f78da2
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu Feb 18 23:30:58 2021 +1100

    powerpc/4xx: Fix build errors from mfdcr()
    
    [ Upstream commit eead089311f4d935ab5d1d8fbb0c42ad44699ada ]
    
    lkp reported a build error in fsp2.o:
    
      CC      arch/powerpc/platforms/44x/fsp2.o
      {standard input}:577: Error: unsupported relocation against base
    
    Which comes from:
    
      pr_err("GESR0: 0x%08x\n", mfdcr(base + PLB4OPB_GESR0));
    
    Where our mfdcr() macro is stringifying "base + PLB4OPB_GESR0", and
    passing that to the assembler, which obviously doesn't work.
    
    The mfdcr() macro already checks that the argument is constant using
    __builtin_constant_p(), and if not calls the out-of-line version of
    mfdcr(). But in this case GCC is smart enough to notice that "base +
    PLB4OPB_GESR0" will be constant, even though it's not something we can
    immediately stringify into a register number.
    
    Segher pointed out that passing the register number to the inline asm
    as a constant would be better, and in fact it fixes the build error,
    presumably because it gives GCC a chance to resolve the value.
    
    While we're at it, change mtdcr() similarly.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Suggested-by: Segher Boessenkool <segher@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Acked-by: Feng Tang <feng.tang@intel.com>
    Link: https://lore.kernel.org/r/20210218123058.748882-1-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f49efef20d9bc0e7a77e9c4e213365fb9cb8a27
Author: Heiko Thiery <heiko.thiery@gmail.com>
Date:   Thu Feb 25 22:15:16 2021 +0100

    net: fec: ptp: avoid register access when ipg clock is disabled
    
    [ Upstream commit 6a4d7234ae9a3bb31181f348ade9bbdb55aeb5c5 ]
    
    When accessing the timecounter register on an i.MX8MQ the kernel hangs.
    This is only the case when the interface is down. This can be reproduced
    by reading with 'phc_ctrl eth0 get'.
    
    Like described in the change in 91c0d987a9788dcc5fe26baafd73bf9242b68900
    the igp clock is disabled when the interface is down and leads to a
    system hang.
    
    So we check if the ptp clock status before reading the timecounter
    register.
    
    Signed-off-by: Heiko Thiery <heiko.thiery@gmail.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Link: https://lore.kernel.org/r/20210225211514.9115-1-heiko.thiery@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0445b181092975117072b67319ef1ade1fa340f2
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 24 11:05:06 2021 +0100

    Linux 4.14.227
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Link: https://lore.kernel.org/r/20210322121920.053255560@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18c745c4ab065bcbdfaf42fd84c2256d2722d14e
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Mar 17 15:38:52 2021 +0100

    genirq: Disable interrupts for force threaded handlers
    
    commit 81e2073c175b887398e5bca6c004efa89983f58d upstream.
    
    With interrupt force threading all device interrupt handlers are invoked
    from kernel threads. Contrary to hard interrupt context the invocation only
    disables bottom halfs, but not interrupts. This was an oversight back then
    because any code like this will have an issue:
    
    thread(irq_A)
      irq_handler(A)
        spin_lock(&foo->lock);
    
    interrupt(irq_B)
      irq_handler(B)
        spin_lock(&foo->lock);
    
    This has been triggered with networking (NAPI vs. hrtimers) and console
    drivers where printk() happens from an interrupt which interrupted the
    force threaded handler.
    
    Now people noticed and started to change the spin_lock() in the handler to
    spin_lock_irqsave() which affects performance or add IRQF_NOTHREAD to the
    interrupt request which in turn breaks RT.
    
    Fix the root cause and not the symptom and disable interrupts before
    invoking the force threaded handler which preserves the regular semantics
    and the usefulness of the interrupt force threading as a general debugging
    tool.
    
    For not RT this is not changing much, except that during the execution of
    the threaded handler interrupts are delayed until the handler
    returns. Vs. scheduling and softirq processing there is no difference.
    
    For RT kernels there is no issue.
    
    Fixes: 8d32a307e4fa ("genirq: Provide forced interrupt threading")
    Reported-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Link: https://lore.kernel.org/r/20210317143859.513307808@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c8e4cdda1a49705eb453d73bdfbd1994037ae32
Author: Shijie Luo <luoshijie1@huawei.com>
Date:   Fri Mar 12 01:50:51 2021 -0500

    ext4: fix potential error in ext4_do_update_inode
    
    commit 7d8bd3c76da1d94b85e6c9b7007e20e980bfcfe6 upstream.
    
    If set_large_file = 1 and errors occur in ext4_handle_dirty_metadata(),
    the error code will be overridden, go to out_brelse to avoid this
    situation.
    
    Signed-off-by: Shijie Luo <luoshijie1@huawei.com>
    Link: https://lore.kernel.org/r/20210312065051.36314-1-luoshijie1@huawei.com
    Cc: stable@kernel.org
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53a88575e1b77d05a6b4a3feeace0b5e15fc53ab
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Fri Mar 5 20:05:08 2021 +0800

    ext4: do not try to set xattr into ea_inode if value is empty
    
    commit 6b22489911b726eebbf169caee52fea52013fbdd upstream.
    
    Syzbot report a warning that ext4 may create an empty ea_inode if set
    an empty extent attribute to a file on the file system which is no free
    blocks left.
    
      WARNING: CPU: 6 PID: 10667 at fs/ext4/xattr.c:1640 ext4_xattr_set_entry+0x10f8/0x1114 fs/ext4/xattr.c:1640
      ...
      Call trace:
       ext4_xattr_set_entry+0x10f8/0x1114 fs/ext4/xattr.c:1640
       ext4_xattr_block_set+0x1d0/0x1b1c fs/ext4/xattr.c:1942
       ext4_xattr_set_handle+0x8a0/0xf1c fs/ext4/xattr.c:2390
       ext4_xattr_set+0x120/0x1f0 fs/ext4/xattr.c:2491
       ext4_xattr_trusted_set+0x48/0x5c fs/ext4/xattr_trusted.c:37
       __vfs_setxattr+0x208/0x23c fs/xattr.c:177
      ...
    
    Now, ext4 try to store extent attribute into an external inode if
    ext4_xattr_block_set() return -ENOSPC, but for the case of store an
    empty extent attribute, store the extent entry into the extent
    attribute block is enough. A simple reproduce below.
    
      fallocate test.img -l 1M
      mkfs.ext4 -F -b 2048 -O ea_inode test.img
      mount test.img /mnt
      dd if=/dev/zero of=/mnt/foo bs=2048 count=500
      setfattr -n "user.test" /mnt/foo
    
    Reported-by: syzbot+98b881fdd8ebf45ab4ae@syzkaller.appspotmail.com
    Fixes: 9c6e7853c531 ("ext4: reserve space for xattr entries/names")
    Cc: stable@kernel.org
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20210305120508.298465-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14131a7f73a3f980a2f91c2e160068cfd984a949
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Wed Mar 3 21:17:02 2021 +0800

    ext4: find old entry again if failed to rename whiteout
    
    commit b7ff91fd030dc9d72ed91b1aab36e445a003af4f upstream.
    
    If we failed to add new entry on rename whiteout, we cannot reset the
    old->de entry directly, because the old->de could have moved from under
    us during make indexed dir. So find the old entry again before reset is
    needed, otherwise it may corrupt the filesystem as below.
    
      /dev/sda: Entry '00000001' in ??? (12) has deleted/unused inode 15. CLEARED.
      /dev/sda: Unattached inode 75
      /dev/sda: UNEXPECTED INCONSISTENCY; RUN fsck MANUALLY.
    
    Fixes: 6b4b8e6b4ad ("ext4: fix bug for rename with RENAME_WHITEOUT")
    Cc: stable@vger.kernel.org
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20210303131703.330415-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c8f7c337c2447164c78958d54478ecf361dcd47
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Feb 1 18:47:09 2021 +0100

    x86: Introduce TS_COMPAT_RESTART to fix get_nr_restart_syscall()
    
    commit 8c150ba2fb5995c84a7a43848250d444a3329a7d upstream.
    
    The comment in get_nr_restart_syscall() says:
    
             * The problem is that we can get here when ptrace pokes
             * syscall-like values into regs even if we're not in a syscall
             * at all.
    
    Yes, but if not in a syscall then the
    
            status & (TS_COMPAT|TS_I386_REGS_POKED)
    
    check below can't really help:
    
            - TS_COMPAT can't be set
    
            - TS_I386_REGS_POKED is only set if regs->orig_ax was changed by
              32bit debugger; and even in this case get_nr_restart_syscall()
              is only correct if the tracee is 32bit too.
    
    Suppose that a 64bit debugger plays with a 32bit tracee and
    
            * Tracee calls sleep(2) // TS_COMPAT is set
            * User interrupts the tracee by CTRL-C after 1 sec and does
              "(gdb) call func()"
            * gdb saves the regs by PTRACE_GETREGS
            * does PTRACE_SETREGS to set %rip='func' and %orig_rax=-1
            * PTRACE_CONT           // TS_COMPAT is cleared
            * func() hits int3.
            * Debugger catches SIGTRAP.
            * Restore original regs by PTRACE_SETREGS.
            * PTRACE_CONT
    
    get_nr_restart_syscall() wrongly returns __NR_restart_syscall==219, the
    tracee calls ia32_sys_call_table[219] == sys_madvise.
    
    Add the sticky TS_COMPAT_RESTART flag which survives after return to user
    mode. It's going to be removed in the next step again by storing the
    information in the restart block. As a further cleanup it might be possible
    to remove also TS_I386_REGS_POKED with that.
    
    Test-case:
    
      $ cvs -d :pserver:anoncvs:anoncvs@sourceware.org:/cvs/systemtap co ptrace-tests
      $ gcc -o erestartsys-trap-debuggee ptrace-tests/tests/erestartsys-trap-debuggee.c --m32
      $ gcc -o erestartsys-trap-debugger ptrace-tests/tests/erestartsys-trap-debugger.c -lutil
      $ ./erestartsys-trap-debugger
      Unexpected: retval 1, errno 22
      erestartsys-trap-debugger: ptrace-tests/tests/erestartsys-trap-debugger.c:421
    
    Fixes: 609c19a385c8 ("x86/ptrace: Stop setting TS_COMPAT in ptrace code")
    Reported-by: Jan Kratochvil <jan.kratochvil@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210201174709.GA17895@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3eb23b0ce94d4a96868b2490bc31c69a8e52f7b8
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Feb 1 18:46:49 2021 +0100

    x86: Move TS_COMPAT back to asm/thread_info.h
    
    commit 66c1b6d74cd7035e85c426f0af4aede19e805c8a upstream.
    
    Move TS_COMPAT back to asm/thread_info.h, close to TS_I386_REGS_POKED.
    
    It was moved to asm/processor.h by b9d989c7218a ("x86/asm: Move the
    thread_info::status field to thread_struct"), then later 37a8f7c38339
    ("x86/asm: Move 'status' from thread_struct to thread_info") moved the
    'status' field back but TS_COMPAT was forgotten.
    
    Preparatory patch to fix the COMPAT case for get_nr_restart_syscall()
    
    Fixes: 609c19a385c8 ("x86/ptrace: Stop setting TS_COMPAT in ptrace code")
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210201174649.GA17880@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b9dc7287dc1bde8dac1cfbaa60b10b7888ca2c9
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Mon Feb 1 18:46:41 2021 +0100

    kernel, fs: Introduce and use set_restart_fn() and arch_set_restart_data()
    
    commit 5abbe51a526253b9f003e9a0a195638dc882d660 upstream.
    
    Preparation for fixing get_nr_restart_syscall() on X86 for COMPAT.
    
    Add a new helper which sets restart_block->fn and calls a dummy
    arch_set_restart_data() helper.
    
    Fixes: 609c19a385c8 ("x86/ptrace: Stop setting TS_COMPAT in ptrace code")
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210201174641.GA17871@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c25c81d8cf1a574cedbd58dc561376483126d723
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Mar 18 20:26:47 2021 +0100

    x86/ioapic: Ignore IRQ2 again
    
    commit a501b048a95b79e1e34f03cac3c87ff1e9f229ad upstream.
    
    Vitaly ran into an issue with hotplugging CPU0 on an Amazon instance where
    the matrix allocator claimed to be out of vectors. He analyzed it down to
    the point that IRQ2, the PIC cascade interrupt, which is supposed to be not
    ever routed to the IO/APIC ended up having an interrupt vector assigned
    which got moved during unplug of CPU0.
    
    The underlying issue is that IRQ2 for various reasons (see commit
    af174783b925 ("x86: I/O APIC: Never configure IRQ2" for details) is treated
    as a reserved system vector by the vector core code and is not accounted as
    a regular vector. The Amazon BIOS has an routing entry of pin2 to IRQ2
    which causes the IO/APIC setup to claim that interrupt which is granted by
    the vector domain because there is no sanity check. As a consequence the
    allocation counter of CPU0 underflows which causes a subsequent unplug to
    fail with:
    
      [ ... ] CPU 0 has 4294967295 vectors, 589 available. Cannot disable CPU
    
    There is another sanity check missing in the matrix allocator, but the
    underlying root cause is that the IO/APIC code lost the IRQ2 ignore logic
    during the conversion to irqdomains.
    
    For almost 6 years nobody complained about this wreckage, which might
    indicate that this requirement could be lifted, but for any system which
    actually has a PIC IRQ2 is unusable by design so any routing entry has no
    effect and the interrupt cannot be connected to a device anyway.
    
    Due to that and due to history biased paranoia reasons restore the IRQ2
    ignore logic and treat it as non existent despite a routing entry claiming
    otherwise.
    
    Fixes: d32932d02e18 ("x86/irq: Convert IOAPIC to use hierarchical irqdomain interfaces")
    Reported-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210318192819.636943062@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af2941dc53553cfb42d3aaec14660aa7f4ac6625
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Fri Mar 12 05:21:37 2021 -0800

    perf/x86/intel: Fix a crash caused by zero PEBS status
    
    commit d88d05a9e0b6d9356e97129d4ff9942d765f46ea upstream.
    
    A repeatable crash can be triggered by the perf_fuzzer on some Haswell
    system.
    https://lore.kernel.org/lkml/7170d3b-c17f-1ded-52aa-cc6d9ae999f4@maine.edu/
    
    For some old CPUs (HSW and earlier), the PEBS status in a PEBS record
    may be mistakenly set to 0. To minimize the impact of the defect, the
    commit was introduced to try to avoid dropping the PEBS record for some
    cases. It adds a check in the intel_pmu_drain_pebs_nhm(), and updates
    the local pebs_status accordingly. However, it doesn't correct the PEBS
    status in the PEBS record, which may trigger the crash, especially for
    the large PEBS.
    
    It's possible that all the PEBS records in a large PEBS have the PEBS
    status 0. If so, the first get_next_pebs_record_by_bit() in the
    __intel_pmu_pebs_event() returns NULL. The at = NULL. Since it's a large
    PEBS, the 'count' parameter must > 1. The second
    get_next_pebs_record_by_bit() will crash.
    
    Besides the local pebs_status, correct the PEBS status in the PEBS
    record as well.
    
    Fixes: 01330d7288e0 ("perf/x86: Allow zero PEBS status with only single active event")
    Reported-by: Vince Weaver <vincent.weaver@maine.edu>
    Suggested-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1615555298-140216-1-git-send-email-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dd14d07b702b543ea13d6fbd83f900cfb0c2a41
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Mon Mar 15 15:48:21 2021 -0600

    PCI: rpadlpar: Fix potential drc_name corruption in store functions
    
    commit cc7a0bb058b85ea03db87169c60c7cfdd5d34678 upstream.
    
    Both add_slot_store() and remove_slot_store() try to fix up the
    drc_name copied from the store buffer by placing a NUL terminator at
    nbyte + 1 or in place of a '\n' if present. However, the static buffer
    that we copy the drc_name data into is not zeroed and can contain
    anything past the n-th byte.
    
    This is problematic if a '\n' byte appears in that buffer after nbytes
    and the string copied into the store buffer was not NUL terminated to
    start with as the strchr() search for a '\n' byte will mark this
    incorrectly as the end of the drc_name string resulting in a drc_name
    string that contains garbage data after the n-th byte.
    
    Additionally it will cause us to overwrite that '\n' byte on the stack
    with NUL, potentially corrupting data on the stack.
    
    The following debugging shows an example of the drmgr utility writing
    "PHB 4543" to the add_slot sysfs attribute, but add_slot_store()
    logging a corrupted string value.
    
      drmgr: drmgr: -c phb -a -s PHB 4543 -d 1
      add_slot_store: drc_name = PHB 4543°|<82>!, rc = -19
    
    Fix this by using strscpy() instead of memcpy() to ensure the string
    is NUL terminated when copied into the static drc_name buffer.
    Further, since the string is now NUL terminated the code only needs to
    change '\n' to '\0' when present.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    [mpe: Reformat change log and add mention of possible stack corruption]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210315214821.452959-1-tyreld@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 954e4dfe3788a6e80ef03c65f1aee76ff235ce56
Author: Ye Xiang <xiang.ye@intel.com>
Date:   Wed Mar 3 14:36:14 2021 +0800

    iio: hid-sensor-temperature: Fix issues of timestamp channel
    
    commit 141e7633aa4d2838d1f6ad5c74cccc53547c16ac upstream.
    
    This patch fixes 2 issues of timestamp channel:
    1. This patch ensures that there is sufficient space and correct
    alignment for the timestamp.
    2. Correct the timestamp channel scan index.
    
    Fixes: 59d0f2da3569 ("iio: hid: Add temperature sensor support")
    Signed-off-by: Ye Xiang <xiang.ye@intel.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210303063615.12130-4-xiang.ye@intel.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c570e14876b95843824bde88e3a093fe1ac43e26
Author: Ye Xiang <xiang.ye@intel.com>
Date:   Sat Jan 30 18:25:30 2021 +0800

    iio: hid-sensor-prox: Fix scale not correct issue
    
    commit d68c592e02f6f49a88e705f13dfc1883432cf300 upstream.
    
    Currently, the proxy sensor scale is zero because it just return the
    exponent directly. To fix this issue, this patch use
    hid_sensor_format_scale to process the scale first then return the
    output.
    
    Fixes: 39a3a0138f61 ("iio: hid-sensors: Added Proximity Sensor Driver")
    Signed-off-by: Ye Xiang <xiang.ye@intel.com>
    Link: https://lore.kernel.org/r/20210130102530.31064-1-xiang.ye@intel.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f62e2416712357773ef16cc3f43eda610ef93e8
Author: Ye Xiang <xiang.ye@intel.com>
Date:   Wed Mar 3 14:36:12 2021 +0800

    iio: hid-sensor-humidity: Fix alignment issue of timestamp channel
    
    commit 37e89e574dc238a4ebe439543c5ab4fbb2f0311b upstream.
    
    This patch ensures that, there is sufficient space and correct
    alignment for the timestamp.
    
    Fixes: d7ed89d5aadf ("iio: hid: Add humidity sensor support")
    Signed-off-by: Ye Xiang <xiang.ye@intel.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210303063615.12130-2-xiang.ye@intel.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be9d958e1883d3681c5428ad4f12cb624a9ae936
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Mar 1 16:04:21 2021 +0800

    iio: gyro: mpu3050: Fix error handling in mpu3050_trigger_handler
    
    commit 6dbbbe4cfd398704b72b21c1d4a5d3807e909d60 upstream.
    
    There is one regmap_bulk_read() call in mpu3050_trigger_handler
    that we have caught its return value bug lack further handling.
    Check and terminate the execution flow just like the other three
    regmap_bulk_read() calls in this function.
    
    Fixes: 3904b28efb2c7 ("iio: gyro: Add driver for the MPU-3050 gyroscope")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/20210301080421.13436-1-dinghao.liu@zju.edu.cn
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fab48af7260cce4873788734b0ceaea2719265f3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 16 22:42:13 2021 +0300

    iio: adis16400: Fix an error code in adis16400_initial_setup()
    
    commit a71266e454b5df10d019b06f5ebacd579f76be28 upstream.
    
    This is to silence a new Smatch warning:
    
        drivers/iio/imu/adis16400.c:492 adis16400_initial_setup()
        warn: sscanf doesn't return error codes
    
    If the condition "if (st->variant->flags & ADIS16400_HAS_SLOW_MODE) {"
    is false then we return 1 instead of returning 0 and probe will fail.
    
    Fixes: 72a868b38bdd ("iio: imu: check sscanf return value")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YCwgFb3JVG6qrlQ+@mwanda
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd6136803a845fd5727aa02a70527c280facdd25
Author: Jonathan Albrieux <jonathan.albrieux@gmail.com>
Date:   Wed Jan 13 16:18:07 2021 +0100

    iio:adc:qcom-spmi-vadc: add default scale to LR_MUX2_BAT_ID channel
    
    commit 7d200b283aa049fcda0d43dd6e03e9e783d2799c upstream.
    
    Checking at both msm8909-pm8916.dtsi and msm8916.dtsi from downstream
    it is indicated that "batt_id" channel has to be scaled with the default
    function:
    
            chan@31 {
                    label = "batt_id";
                    reg = <0x31>;
                    qcom,decimation = <0>;
                    qcom,pre-div-channel-scaling = <0>;
                    qcom,calibration-type = "ratiometric";
                    qcom,scale-function = <0>;
                    qcom,hw-settle-time = <0xb>;
                    qcom,fast-avg-setup = <0>;
            };
    
    Change LR_MUX2_BAT_ID scaling accordingly.
    
    Signed-off-by: Jonathan Albrieux <jonathan.albrieux@gmail.com>
    Acked-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Fixes: 7c271eea7b8a ("iio: adc: spmi-vadc: Changes to support different scaling")
    Link: https://lore.kernel.org/r/20210113151808.4628-2-jonathan.albrieux@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85a412de7e253c5684b3ce8c5983ff4666be8303
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jan 24 19:50:34 2021 +0000

    iio:adc:stm32-adc: Add HAS_IOMEM dependency
    
    commit 121875b28e3bd7519a675bf8ea2c2e793452c2bd upstream.
    
    Seems that there are config combinations in which this driver gets enabled
    and hence selects the MFD, but with out HAS_IOMEM getting pulled in
    via some other route.  MFD is entirely contained in an
    if HAS_IOMEM block, leading to the build issue in this bugzilla.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=209889
    
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Link: https://lore.kernel.org/r/20210124195034.22576-1-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17daa622d3b22668434f21bef017dcca873be0e1
Author: Jim Lin <jilin@nvidia.com>
Date:   Thu Mar 11 14:42:41 2021 +0800

    usb: gadget: configfs: Fix KASAN use-after-free
    
    commit 98f153a10da403ddd5e9d98a3c8c2bb54bb5a0b6 upstream.
    
    When gadget is disconnected, running sequence is like this.
    . composite_disconnect
    . Call trace:
      usb_string_copy+0xd0/0x128
      gadget_config_name_configuration_store+0x4
      gadget_config_name_attr_store+0x40/0x50
      configfs_write_file+0x198/0x1f4
      vfs_write+0x100/0x220
      SyS_write+0x58/0xa8
    . configfs_composite_unbind
    . configfs_composite_bind
    
    In configfs_composite_bind, it has
    "cn->strings.s = cn->configuration;"
    
    When usb_string_copy is invoked. it would
    allocate memory, copy input string, release previous pointed memory space,
    and use new allocated memory.
    
    When gadget is connected, host sends down request to get information.
    Call trace:
      usb_gadget_get_string+0xec/0x168
      lookup_string+0x64/0x98
      composite_setup+0xa34/0x1ee8
    
    If gadget is disconnected and connected quickly, in the failed case,
    cn->configuration memory has been released by usb_string_copy kfree but
    configfs_composite_bind hasn't been run in time to assign new allocated
    "cn->configuration" pointer to "cn->strings.s".
    
    When "strlen(s->s) of usb_gadget_get_string is being executed, the dangling
    memory is accessed, "BUG: KASAN: use-after-free" error occurs.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jim Lin <jilin@nvidia.com>
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Link: https://lore.kernel.org/r/1615444961-13376-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae0d99dc6b5ddbb0ef0e2d30fab7b13a7c80cb1
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Thu Jun 18 17:13:38 2020 +0800

    USB: replace hardcode maximum usb string length by definition
    
    commit 81c7462883b0cc0a4eeef0687f80ad5b5baee5f6 upstream.
    
    Replace hardcoded maximum USB string length (126 bytes) by definition
    "USB_MAX_STRING_LEN".
    
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/1592471618-29428-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73bdfed6385454da2a420413bd4ac007cafd41e9
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Mar 17 15:06:54 2021 -0400

    usb-storage: Add quirk to defeat Kindle's automatic unload
    
    commit 546aa0e4ea6ed81b6c51baeebc4364542fa3f3a7 upstream.
    
    Matthias reports that the Amazon Kindle automatically removes its
    emulated media if it doesn't receive another SCSI command within about
    one second after a SYNCHRONIZE CACHE.  It does so even when the host
    has sent a PREVENT MEDIUM REMOVAL command.  The reason for this
    behavior isn't clear, although it's not hard to make some guesses.
    
    At any rate, the results can be unexpected for anyone who tries to
    access the Kindle in an unusual fashion, and in theory they can lead
    to data loss (for example, if one file is closed and synchronized
    while other files are still in the middle of being written).
    
    To avoid such problems, this patch creates a new usb-storage quirks
    flag telling the driver always to issue a REQUEST SENSE following a
    SYNCHRONIZE CACHE command, and adds an unusual_devs entry for the
    Kindle with the flag set.  This is sufficient to prevent the Kindle
    from doing its automatic unload, without interfering with proper
    operation.
    
    Another possible way to deal with this would be to increase the
    frequency of TEST UNIT READY polling that the kernel normally carries
    out for removable-media storage devices.  However that would increase
    the overall load on the system and it is not as reliable, because the
    user can override the polling interval.  Changing the driver's
    behavior is safer and has minimal overhead.
    
    CC: <stable@vger.kernel.org>
    Reported-and-tested-by: Matthias Schwarzott <zzam@gentoo.org>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20210317190654.GA497856@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34515fa33656daa9bb96f7c09b30cfa053f28e11
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 15 14:04:27 2021 -0700

    nvme-rdma: fix possible hang when failing to set io queues
    
    [ Upstream commit c4c6df5fc84659690d4391d1fba155cd94185295 ]
    
    We only setup io queues for nvme controllers, and it makes absolutely no
    sense to allow a controller (re)connect without any I/O queues.  If we
    happen to fail setting the queue count for any reason, we should not allow
    this to be a successful reconnect as I/O has no chance in going through.
    Instead just fail and schedule another reconnect.
    
    Reported-by: Chao Leng <lengchao@huawei.com>
    Fixes: 711023071960 ("nvme-rdma: add a NVMe over Fabrics RDMA host driver")
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chao Leng <lengchao@huawei.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5463439538b1d6104c13a3011888aeb66686ff5c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 12 10:42:11 2021 +0300

    scsi: lpfc: Fix some error codes in debugfs
    
    commit 19f1bc7edf0f97186810e13a88f5b62069d89097 upstream.
    
    If copy_from_user() or kstrtoull() fail then the correct behavior is to
    return a negative error code.
    
    Link: https://lore.kernel.org/r/YEsbU/UxYypVrC7/@mwanda
    Fixes: f9bb2da11db8 ("[SCSI] lpfc 8.3.27: T10 additions for SLI4")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17cc9ce64b461630891a51e6f8c9529ca7ad3dcb
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Mon Mar 1 02:22:40 2021 +0300

    net/qrtr: fix __netdev_alloc_skb call
    
    commit 093b036aa94e01a0bea31a38d7f0ee28a2749023 upstream.
    
    syzbot found WARNING in __alloc_pages_nodemask()[1] when order >= MAX_ORDER.
    It was caused by a huge length value passed from userspace to qrtr_tun_write_iter(),
    which tries to allocate skb. Since the value comes from the untrusted source
    there is no need to raise a warning in __alloc_pages_nodemask().
    
    [1] WARNING in __alloc_pages_nodemask+0x5f8/0x730 mm/page_alloc.c:5014
    Call Trace:
     __alloc_pages include/linux/gfp.h:511 [inline]
     __alloc_pages_node include/linux/gfp.h:524 [inline]
     alloc_pages_node include/linux/gfp.h:538 [inline]
     kmalloc_large_node+0x60/0x110 mm/slub.c:3999
     __kmalloc_node_track_caller+0x319/0x3f0 mm/slub.c:4496
     __kmalloc_reserve net/core/skbuff.c:150 [inline]
     __alloc_skb+0x4e4/0x5a0 net/core/skbuff.c:210
     __netdev_alloc_skb+0x70/0x400 net/core/skbuff.c:446
     netdev_alloc_skb include/linux/skbuff.h:2832 [inline]
     qrtr_endpoint_post+0x84/0x11b0 net/qrtr/qrtr.c:442
     qrtr_tun_write_iter+0x11f/0x1a0 net/qrtr/tun.c:98
     call_write_iter include/linux/fs.h:1901 [inline]
     new_sync_write+0x426/0x650 fs/read_write.c:518
     vfs_write+0x791/0xa30 fs/read_write.c:605
     ksys_write+0x12d/0x250 fs/read_write.c:658
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported-by: syzbot+80dccaee7c6630fa9dcf@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Acked-by: Alexander Lobakin <alobakin@pm.me>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dd14e24a43741ca3af9688bde54b1c1d49c24e5
Author: Daniel Kobras <kobras@puzzle-itc.de>
Date:   Sat Feb 27 00:04:37 2021 +0100

    sunrpc: fix refcount leak for rpc auth modules
    
    commit f1442d6349a2e7bb7a6134791bdc26cb776c79af upstream.
    
    If an auth module's accept op returns SVC_CLOSE, svc_process_common()
    enters a call path that does not call svc_authorise() before leaving the
    function, and thus leaks a reference on the auth module's refcount. Hence,
    make sure calls to svc_authenticate() and svc_authorise() are paired for
    all call paths, to make sure rpc auth modules can be unloaded.
    
    Signed-off-by: Daniel Kobras <kobras@puzzle-itc.de>
    Fixes: 4d712ef1db05 ("svcauth_gss: Close connection when dropping an incoming message")
    Link: https://lore.kernel.org/linux-nfs/3F1B347F-B809-478F-A1E9-0BE98E22B0F0@oracle.com/T/#t
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c128036c448ae5a8c4bd44cf989280a2e192329
Author: Timo Rothenpieler <timo@rothenpieler.org>
Date:   Tue Feb 23 00:36:19 2021 +0100

    svcrdma: disable timeouts on rdma backchannel
    
    commit 6820bf77864d5894ff67b5c00d7dba8f92011e3d upstream.
    
    This brings it in line with the regular tcp backchannel, which also has
    all those timeouts disabled.
    
    Prevents the backchannel from timing out, getting some async operations
    like server side copying getting stuck indefinitely on the client side.
    
    Signed-off-by: Timo Rothenpieler <timo@rothenpieler.org>
    Fixes: 5d252f90a800 ("svcrdma: Add class for RDMA backwards direction transport")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 017bc65fc82e21b04378160e1bce5a0698706fbe
Author: Joe Korty <joe.korty@concurrent-rt.com>
Date:   Fri Feb 26 09:38:20 2021 -0500

    NFSD: Repair misuse of sv_lock in 5.10.16-rt30.
    
    commit c7de87ff9dac5f396f62d584f3908f80ddc0e07b upstream.
    
    [ This problem is in mainline, but only rt has the chops to be
    able to detect it. ]
    
    Lockdep reports a circular lock dependency between serv->sv_lock and
    softirq_ctl.lock on system shutdown, when using a kernel built with
    CONFIG_PREEMPT_RT=y, and a nfs mount exists.
    
    This is due to the definition of spin_lock_bh on rt:
    
            local_bh_disable();
            rt_spin_lock(lock);
    
    which forces a softirq_ctl.lock -> serv->sv_lock dependency.  This is
    not a problem as long as _every_ lock of serv->sv_lock is a:
    
            spin_lock_bh(&serv->sv_lock);
    
    but there is one of the form:
    
            spin_lock(&serv->sv_lock);
    
    This is what is causing the circular dependency splat.  The spin_lock()
    grabs the lock without first grabbing softirq_ctl.lock via local_bh_disable.
    If later on in the critical region,  someone does a local_bh_disable, we
    get a serv->sv_lock -> softirq_ctrl.lock dependency established.  Deadlock.
    
    Fix is to make serv->sv_lock be locked with spin_lock_bh everywhere, no
    exceptions.
    
    [  OK  ] Stopped target NFS client services.
             Stopping Logout off all iSCSI sessions on shutdown...
             Stopping NFS server and services...
    [  109.442380]
    [  109.442385] ======================================================
    [  109.442386] WARNING: possible circular locking dependency detected
    [  109.442387] 5.10.16-rt30 #1 Not tainted
    [  109.442389] ------------------------------------------------------
    [  109.442390] nfsd/1032 is trying to acquire lock:
    [  109.442392] ffff994237617f60 ((softirq_ctrl.lock).lock){+.+.}-{2:2}, at: __local_bh_disable_ip+0xd9/0x270
    [  109.442405]
    [  109.442405] but task is already holding lock:
    [  109.442406] ffff994245cb00b0 (&serv->sv_lock){+.+.}-{0:0}, at: svc_close_list+0x1f/0x90
    [  109.442415]
    [  109.442415] which lock already depends on the new lock.
    [  109.442415]
    [  109.442416]
    [  109.442416] the existing dependency chain (in reverse order) is:
    [  109.442417]
    [  109.442417] -> #1 (&serv->sv_lock){+.+.}-{0:0}:
    [  109.442421]        rt_spin_lock+0x2b/0xc0
    [  109.442428]        svc_add_new_perm_xprt+0x42/0xa0
    [  109.442430]        svc_addsock+0x135/0x220
    [  109.442434]        write_ports+0x4b3/0x620
    [  109.442438]        nfsctl_transaction_write+0x45/0x80
    [  109.442440]        vfs_write+0xff/0x420
    [  109.442444]        ksys_write+0x4f/0xc0
    [  109.442446]        do_syscall_64+0x33/0x40
    [  109.442450]        entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  109.442454]
    [  109.442454] -> #0 ((softirq_ctrl.lock).lock){+.+.}-{2:2}:
    [  109.442457]        __lock_acquire+0x1264/0x20b0
    [  109.442463]        lock_acquire+0xc2/0x400
    [  109.442466]        rt_spin_lock+0x2b/0xc0
    [  109.442469]        __local_bh_disable_ip+0xd9/0x270
    [  109.442471]        svc_xprt_do_enqueue+0xc0/0x4d0
    [  109.442474]        svc_close_list+0x60/0x90
    [  109.442476]        svc_close_net+0x49/0x1a0
    [  109.442478]        svc_shutdown_net+0x12/0x40
    [  109.442480]        nfsd_destroy+0xc5/0x180
    [  109.442482]        nfsd+0x1bc/0x270
    [  109.442483]        kthread+0x194/0x1b0
    [  109.442487]        ret_from_fork+0x22/0x30
    [  109.442492]
    [  109.442492] other info that might help us debug this:
    [  109.442492]
    [  109.442493]  Possible unsafe locking scenario:
    [  109.442493]
    [  109.442493]        CPU0                    CPU1
    [  109.442494]        ----                    ----
    [  109.442495]   lock(&serv->sv_lock);
    [  109.442496]                                lock((softirq_ctrl.lock).lock);
    [  109.442498]                                lock(&serv->sv_lock);
    [  109.442499]   lock((softirq_ctrl.lock).lock);
    [  109.442501]
    [  109.442501]  *** DEADLOCK ***
    [  109.442501]
    [  109.442501] 3 locks held by nfsd/1032:
    [  109.442503]  #0: ffffffff93b49258 (nfsd_mutex){+.+.}-{3:3}, at: nfsd+0x19a/0x270
    [  109.442508]  #1: ffff994245cb00b0 (&serv->sv_lock){+.+.}-{0:0}, at: svc_close_list+0x1f/0x90
    [  109.442512]  #2: ffffffff93a81b20 (rcu_read_lock){....}-{1:2}, at: rt_spin_lock+0x5/0xc0
    [  109.442518]
    [  109.442518] stack backtrace:
    [  109.442519] CPU: 0 PID: 1032 Comm: nfsd Not tainted 5.10.16-rt30 #1
    [  109.442522] Hardware name: Supermicro X9DRL-3F/iF/X9DRL-3F/iF, BIOS 3.2 09/22/2015
    [  109.442524] Call Trace:
    [  109.442527]  dump_stack+0x77/0x97
    [  109.442533]  check_noncircular+0xdc/0xf0
    [  109.442546]  __lock_acquire+0x1264/0x20b0
    [  109.442553]  lock_acquire+0xc2/0x400
    [  109.442564]  rt_spin_lock+0x2b/0xc0
    [  109.442570]  __local_bh_disable_ip+0xd9/0x270
    [  109.442573]  svc_xprt_do_enqueue+0xc0/0x4d0
    [  109.442577]  svc_close_list+0x60/0x90
    [  109.442581]  svc_close_net+0x49/0x1a0
    [  109.442585]  svc_shutdown_net+0x12/0x40
    [  109.442588]  nfsd_destroy+0xc5/0x180
    [  109.442590]  nfsd+0x1bc/0x270
    [  109.442595]  kthread+0x194/0x1b0
    [  109.442600]  ret_from_fork+0x22/0x30
    [  109.518225] nfsd: last server has exited, flushing export cache
    [  OK  ] Stopped NFSv4 ID-name mapping service.
    [  OK  ] Stopped GSSAPI Proxy Daemon.
    [  OK  ] Stopped NFS Mount Daemon.
    [  OK  ] Stopped NFS status monitor for NFSv2/3 locking..
    
    Fixes: 719f8bcc883e ("svcrpc: fix xpt_list traversal locking on shutdown")
    Signed-off-by: Joe Korty <joe.korty@concurrent-rt.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 924acc901da97959e4e345cc94e70f815887d5a9
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 15 15:34:51 2021 -0700

    nvmet: don't check iosqes,iocqes for discovery controllers
    
    commit d218a8a3003e84ab136e69a4e30dd4ec7dab2d22 upstream.
    
    From the base spec, Figure 78:
    
      "Controller Configuration, these fields are defined as parameters to
       configure an "I/O Controller (IOC)" and not to configure a "Discovery
       Controller (DC).
    
       ...
       If the controller does not support I/O queues, then this field shall
       be read-only with a value of 0h
    
    Just perform this check for I/O controllers.
    
    Fixes: a07b4970f464 ("nvmet: add a generic NVMe target")
    Reported-by: Belanger, Martin <Martin.Belanger@dell.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 442122e0ee82af3ad64e1bae5ddbf661504172e7
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Mar 11 14:31:05 2021 +0000

    btrfs: fix race when cloning extent buffer during rewind of an old root
    
    commit dbcc7d57bffc0c8cac9dac11bec548597d59a6a5 upstream.
    
    While resolving backreferences, as part of a logical ino ioctl call or
    fiemap, we can end up hitting a BUG_ON() when replaying tree mod log
    operations of a root, triggering a stack trace like the following:
    
      ------------[ cut here ]------------
      kernel BUG at fs/btrfs/ctree.c:1210!
      invalid opcode: 0000 [#1] SMP KASAN PTI
      CPU: 1 PID: 19054 Comm: crawl_335 Tainted: G        W         5.11.0-2d11c0084b02-misc-next+ #89
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
      RIP: 0010:__tree_mod_log_rewind+0x3b1/0x3c0
      Code: 05 48 8d 74 10 (...)
      RSP: 0018:ffffc90001eb70b8 EFLAGS: 00010297
      RAX: 0000000000000000 RBX: ffff88812344e400 RCX: ffffffffb28933b6
      RDX: 0000000000000007 RSI: dffffc0000000000 RDI: ffff88812344e42c
      RBP: ffffc90001eb7108 R08: 1ffff11020b60a20 R09: ffffed1020b60a20
      R10: ffff888105b050f9 R11: ffffed1020b60a1f R12: 00000000000000ee
      R13: ffff8880195520c0 R14: ffff8881bc958500 R15: ffff88812344e42c
      FS:  00007fd1955e8700(0000) GS:ffff8881f5600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007efdb7928718 CR3: 000000010103a006 CR4: 0000000000170ee0
      Call Trace:
       btrfs_search_old_slot+0x265/0x10d0
       ? lock_acquired+0xbb/0x600
       ? btrfs_search_slot+0x1090/0x1090
       ? free_extent_buffer.part.61+0xd7/0x140
       ? free_extent_buffer+0x13/0x20
       resolve_indirect_refs+0x3e9/0xfc0
       ? lock_downgrade+0x3d0/0x3d0
       ? __kasan_check_read+0x11/0x20
       ? add_prelim_ref.part.11+0x150/0x150
       ? lock_downgrade+0x3d0/0x3d0
       ? __kasan_check_read+0x11/0x20
       ? lock_acquired+0xbb/0x600
       ? __kasan_check_write+0x14/0x20
       ? do_raw_spin_unlock+0xa8/0x140
       ? rb_insert_color+0x30/0x360
       ? prelim_ref_insert+0x12d/0x430
       find_parent_nodes+0x5c3/0x1830
       ? resolve_indirect_refs+0xfc0/0xfc0
       ? lock_release+0xc8/0x620
       ? fs_reclaim_acquire+0x67/0xf0
       ? lock_acquire+0xc7/0x510
       ? lock_downgrade+0x3d0/0x3d0
       ? lockdep_hardirqs_on_prepare+0x160/0x210
       ? lock_release+0xc8/0x620
       ? fs_reclaim_acquire+0x67/0xf0
       ? lock_acquire+0xc7/0x510
       ? poison_range+0x38/0x40
       ? unpoison_range+0x14/0x40
       ? trace_hardirqs_on+0x55/0x120
       btrfs_find_all_roots_safe+0x142/0x1e0
       ? find_parent_nodes+0x1830/0x1830
       ? btrfs_inode_flags_to_xflags+0x50/0x50
       iterate_extent_inodes+0x20e/0x580
       ? tree_backref_for_extent+0x230/0x230
       ? lock_downgrade+0x3d0/0x3d0
       ? read_extent_buffer+0xdd/0x110
       ? lock_downgrade+0x3d0/0x3d0
       ? __kasan_check_read+0x11/0x20
       ? lock_acquired+0xbb/0x600
       ? __kasan_check_write+0x14/0x20
       ? _raw_spin_unlock+0x22/0x30
       ? __kasan_check_write+0x14/0x20
       iterate_inodes_from_logical+0x129/0x170
       ? iterate_inodes_from_logical+0x129/0x170
       ? btrfs_inode_flags_to_xflags+0x50/0x50
       ? iterate_extent_inodes+0x580/0x580
       ? __vmalloc_node+0x92/0xb0
       ? init_data_container+0x34/0xb0
       ? init_data_container+0x34/0xb0
       ? kvmalloc_node+0x60/0x80
       btrfs_ioctl_logical_to_ino+0x158/0x230
       btrfs_ioctl+0x205e/0x4040
       ? __might_sleep+0x71/0xe0
       ? btrfs_ioctl_get_supported_features+0x30/0x30
       ? getrusage+0x4b6/0x9c0
       ? __kasan_check_read+0x11/0x20
       ? lock_release+0xc8/0x620
       ? __might_fault+0x64/0xd0
       ? lock_acquire+0xc7/0x510
       ? lock_downgrade+0x3d0/0x3d0
       ? lockdep_hardirqs_on_prepare+0x210/0x210
       ? lockdep_hardirqs_on_prepare+0x210/0x210
       ? __kasan_check_read+0x11/0x20
       ? do_vfs_ioctl+0xfc/0x9d0
       ? ioctl_file_clone+0xe0/0xe0
       ? lock_downgrade+0x3d0/0x3d0
       ? lockdep_hardirqs_on_prepare+0x210/0x210
       ? __kasan_check_read+0x11/0x20
       ? lock_release+0xc8/0x620
       ? __task_pid_nr_ns+0xd3/0x250
       ? lock_acquire+0xc7/0x510
       ? __fget_files+0x160/0x230
       ? __fget_light+0xf2/0x110
       __x64_sys_ioctl+0xc3/0x100
       do_syscall_64+0x37/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7fd1976e2427
      Code: 00 00 90 48 8b 05 (...)
      RSP: 002b:00007fd1955e5cf8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      RAX: ffffffffffffffda RBX: 00007fd1955e5f40 RCX: 00007fd1976e2427
      RDX: 00007fd1955e5f48 RSI: 00000000c038943b RDI: 0000000000000004
      RBP: 0000000001000000 R08: 0000000000000000 R09: 00007fd1955e6120
      R10: 0000557835366b00 R11: 0000000000000246 R12: 0000000000000004
      R13: 00007fd1955e5f48 R14: 00007fd1955e5f40 R15: 00007fd1955e5ef8
      Modules linked in:
      ---[ end trace ec8931a1c36e57be ]---
    
      (gdb) l *(__tree_mod_log_rewind+0x3b1)
      0xffffffff81893521 is in __tree_mod_log_rewind (fs/btrfs/ctree.c:1210).
      1205                     * the modification. as we're going backwards, we do the
      1206                     * opposite of each operation here.
      1207                     */
      1208                    switch (tm->op) {
      1209                    case MOD_LOG_KEY_REMOVE_WHILE_FREEING:
      1210                            BUG_ON(tm->slot < n);
      1211                            fallthrough;
      1212                    case MOD_LOG_KEY_REMOVE_WHILE_MOVING:
      1213                    case MOD_LOG_KEY_REMOVE:
      1214                            btrfs_set_node_key(eb, &tm->key, tm->slot);
    
    Here's what happens to hit that BUG_ON():
    
    1) We have one tree mod log user (through fiemap or the logical ino ioctl),
       with a sequence number of 1, so we have fs_info->tree_mod_seq == 1;
    
    2) Another task is at ctree.c:balance_level() and we have eb X currently as
       the root of the tree, and we promote its single child, eb Y, as the new
       root.
    
       Then, at ctree.c:balance_level(), we call:
    
          tree_mod_log_insert_root(eb X, eb Y, 1);
    
    3) At tree_mod_log_insert_root() we create tree mod log elements for each
       slot of eb X, of operation type MOD_LOG_KEY_REMOVE_WHILE_FREEING each
       with a ->logical pointing to ebX->start. These are placed in an array
       named tm_list.
       Lets assume there are N elements (N pointers in eb X);
    
    4) Then, still at tree_mod_log_insert_root(), we create a tree mod log
       element of operation type MOD_LOG_ROOT_REPLACE, ->logical set to
       ebY->start, ->old_root.logical set to ebX->start, ->old_root.level set
       to the level of eb X and ->generation set to the generation of eb X;
    
    5) Then tree_mod_log_insert_root() calls tree_mod_log_free_eb() with
       tm_list as argument. After that, tree_mod_log_free_eb() calls
       __tree_mod_log_insert() for each member of tm_list in reverse order,
       from highest slot in eb X, slot N - 1, to slot 0 of eb X;
    
    6) __tree_mod_log_insert() sets the sequence number of each given tree mod
       log operation - it increments fs_info->tree_mod_seq and sets
       fs_info->tree_mod_seq as the sequence number of the given tree mod log
       operation.
    
       This means that for the tm_list created at tree_mod_log_insert_root(),
       the element corresponding to slot 0 of eb X has the highest sequence
       number (1 + N), and the element corresponding to the last slot has the
       lowest sequence number (2);
    
    7) Then, after inserting tm_list's elements into the tree mod log rbtree,
       the MOD_LOG_ROOT_REPLACE element is inserted, which gets the highest
       sequence number, which is N + 2;
    
    8) Back to ctree.c:balance_level(), we free eb X by calling
       btrfs_free_tree_block() on it. Because eb X was created in the current
       transaction, has no other references and writeback did not happen for
       it, we add it back to the free space cache/tree;
    
    9) Later some other task T allocates the metadata extent from eb X, since
       it is marked as free space in the space cache/tree, and uses it as a
       node for some other btree;
    
    10) The tree mod log user task calls btrfs_search_old_slot(), which calls
        get_old_root(), and finally that calls __tree_mod_log_oldest_root()
        with time_seq == 1 and eb_root == eb Y;
    
    11) First iteration of the while loop finds the tree mod log element with
        sequence number N + 2, for the logical address of eb Y and of type
        MOD_LOG_ROOT_REPLACE;
    
    12) Because the operation type is MOD_LOG_ROOT_REPLACE, we don't break out
        of the loop, and set root_logical to point to tm->old_root.logical
        which corresponds to the logical address of eb X;
    
    13) On the next iteration of the while loop, the call to
        tree_mod_log_search_oldest() returns the smallest tree mod log element
        for the logical address of eb X, which has a sequence number of 2, an
        operation type of MOD_LOG_KEY_REMOVE_WHILE_FREEING and corresponds to
        the old slot N - 1 of eb X (eb X had N items in it before being freed);
    
    14) We then break out of the while loop and return the tree mod log operation
        of type MOD_LOG_ROOT_REPLACE (eb Y), and not the one for slot N - 1 of
        eb X, to get_old_root();
    
    15) At get_old_root(), we process the MOD_LOG_ROOT_REPLACE operation
        and set "logical" to the logical address of eb X, which was the old
        root. We then call tree_mod_log_search() passing it the logical
        address of eb X and time_seq == 1;
    
    16) Then before calling tree_mod_log_search(), task T adds a key to eb X,
        which results in adding a tree mod log operation of type
        MOD_LOG_KEY_ADD to the tree mod log - this is done at
        ctree.c:insert_ptr() - but after adding the tree mod log operation
        and before updating the number of items in eb X from 0 to 1...
    
    17) The task at get_old_root() calls tree_mod_log_search() and gets the
        tree mod log operation of type MOD_LOG_KEY_ADD just added by task T.
        Then it enters the following if branch:
    
        if (old_root && tm && tm->op != MOD_LOG_KEY_REMOVE_WHILE_FREEING) {
           (...)
        } (...)
    
        Calls read_tree_block() for eb X, which gets a reference on eb X but
        does not lock it - task T has it locked.
        Then it clones eb X while it has nritems set to 0 in its header, before
        task T sets nritems to 1 in eb X's header. From hereupon we use the
        clone of eb X which no other task has access to;
    
    18) Then we call __tree_mod_log_rewind(), passing it the MOD_LOG_KEY_ADD
        mod log operation we just got from tree_mod_log_search() in the
        previous step and the cloned version of eb X;
    
    19) At __tree_mod_log_rewind(), we set the local variable "n" to the number
        of items set in eb X's clone, which is 0. Then we enter the while loop,
        and in its first iteration we process the MOD_LOG_KEY_ADD operation,
        which just decrements "n" from 0 to (u32)-1, since "n" is declared with
        a type of u32. At the end of this iteration we call rb_next() to find the
        next tree mod log operation for eb X, that gives us the mod log operation
        of type MOD_LOG_KEY_REMOVE_WHILE_FREEING, for slot 0, with a sequence
        number of N + 1 (steps 3 to 6);
    
    20) Then we go back to the top of the while loop and trigger the following
        BUG_ON():
    
            (...)
            switch (tm->op) {
            case MOD_LOG_KEY_REMOVE_WHILE_FREEING:
                     BUG_ON(tm->slot < n);
                     fallthrough;
            (...)
    
        Because "n" has a value of (u32)-1 (4294967295) and tm->slot is 0.
    
    Fix this by taking a read lock on the extent buffer before cloning it at
    ctree.c:get_old_root(). This should be done regardless of the extent
    buffer having been freed and reused, as a concurrent task might be
    modifying it (while holding a write lock on it).
    
    Reported-by: Zygo Blaxell <ce3g8jdj@umail.furryterror.org>
    Link: https://lore.kernel.org/linux-btrfs/20210227155037.GN28049@hungrycats.org/
    Fixes: 834328a8493079 ("Btrfs: tree mod log's old roots could still be part of the tree")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf7f504a4c86e68e63d8a6cd4841c92f170429fb
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Dec 5 10:14:42 2017 -0300

    tools build feature: Check if pthread_barrier_t is available
    
    commit 25ab5abf5b141d7fd13eed506c7458aa04749c29 upstream.
    
    As 'perf bench futex wake-parallel" will use this, which is not
    available in older systems such as versions of the android NDK used in
    my container build tests (r12b and r15c at the moment).
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Davidlohr Bueso <dave@stgolabs.net>
    Cc: James Yang <james.yang@arm.com
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kim Phillips <kim.phillips@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-1i7iv54in4wj08lwo55b0pzv@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9278cf73db524de279a7a995e17b13f0f0494281
Author: Changbin Du <changbin.du@gmail.com>
Date:   Tue Jan 28 23:29:38 2020 +0800

    perf: Make perf able to build with latest libbfd
    
    commit 0ada120c883d4f1f6aafd01cf0fbb10d8bbba015 upstream.
    
    libbfd has changed the bfd_section_* macros to inline functions
    bfd_section_<field> since 2019-09-18. See below two commits:
      o http://www.sourceware.org/ml/gdb-cvs/2019-09/msg00064.html
      o https://www.sourceware.org/ml/gdb-cvs/2019-09/msg00072.html
    
    This fix make perf able to build with both old and new libbfd.
    
    Signed-off-by: Changbin Du <changbin.du@gmail.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200128152938.31413-1-changbin.du@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7c7d99991d7f2d63c04db2c446ebc19a4e01dd0
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Jun 13 12:04:19 2019 -0300

    tools build: Check if gettid() is available before providing helper
    
    commit 4541a8bb13a86e504416a13360c8dc64d2fd612a upstream.
    
    Laura reported that the perf build failed in fedora when we got a glibc
    that provides gettid(), which I reproduced using fedora rawhide with the
    glibc-devel-2.29.9000-26.fc31.x86_64 package.
    
    Add a feature check to avoid providing a gettid() helper in such
    systems.
    
    On a fedora rawhide system with this patch applied we now get:
    
      [root@7a5f55352234 perf]# grep gettid /tmp/build/perf/FEATURE-DUMP
      feature-gettid=1
      [root@7a5f55352234 perf]# cat /tmp/build/perf/feature/test-gettid.make.output
      [root@7a5f55352234 perf]# ldd /tmp/build/perf/feature/test-gettid.bin
              linux-vdso.so.1 (0x00007ffc6b1f6000)
              libc.so.6 => /lib64/libc.so.6 (0x00007f04e0a74000)
              /lib64/ld-linux-x86-64.so.2 (0x00007f04e0c47000)
      [root@7a5f55352234 perf]# nm /tmp/build/perf/feature/test-gettid.bin | grep -w gettid
                       U gettid@@GLIBC_2.30
      [root@7a5f55352234 perf]#
    
    While on a fedora:29 system:
    
      [acme@quaco perf]$ grep gettid /tmp/build/perf/FEATURE-DUMP
      feature-gettid=0
      [acme@quaco perf]$ cat /tmp/build/perf/feature/test-gettid.make.output
      test-gettid.c: In function ‘main’:
      test-gettid.c:8:9: error: implicit declaration of function ‘gettid’; did you mean ‘getgid’? [-Werror=implicit-function-declaration]
        return gettid();
               ^~~~~~
               getgid
      cc1: all warnings being treated as errors
      [acme@quaco perf]$
    
    Reported-by: Laura Abbott <labbott@redhat.com>
    Tested-by: Laura Abbott <labbott@redhat.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Florian Weimer <fweimer@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: https://lkml.kernel.org/n/tip-yfy3ch53agmklwu9o7rlgf9c@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 931ab67f858a499e8adc4817505062bb717ed79d
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Wed Nov 21 17:42:00 2018 -0300

    tools build feature: Check if eventfd() is available
    
    commit 11c6cbe706f218a8dc7e1f962f12b3a52ddd33a9 upstream.
    
    A new 'perf bench epoll' will use this, and to disable it for older
    systems, add a feature test for this API.
    
    This is just a simple program that if successfully compiled, means that
    the feature is present, at least at the library level, in a build that
    sets the output directory to /tmp/build/perf (using O=/tmp/build/perf),
    we end up with:
    
      $ ls -la /tmp/build/perf/feature/test-eventfd*
      -rwxrwxr-x. 1 acme acme 8176 Nov 21 15:58 /tmp/build/perf/feature/test-eventfd.bin
      -rw-rw-r--. 1 acme acme  588 Nov 21 15:58 /tmp/build/perf/feature/test-eventfd.d
      -rw-rw-r--. 1 acme acme    0 Nov 21 15:58 /tmp/build/perf/feature/test-eventfd.make.output
      $ ldd /tmp/build/perf/feature/test-eventfd.bin
              linux-vdso.so.1 (0x00007fff3bf3f000)
              libc.so.6 => /lib64/libc.so.6 (0x00007fa984061000)
              /lib64/ld-linux-x86-64.so.2 (0x00007fa984417000)
      $ grep eventfd -A 2 -B 2 /tmp/build/perf/FEATURE-DUMP
      feature-dwarf=1
      feature-dwarf_getlocations=1
      feature-eventfd=1
      feature-fortify-source=1
      feature-sync-compare-and-swap=1
      $
    
    The main thing here is that in the end we'll have -DHAVE_EVENTFD in
    CFLAGS, and then the 'perf bench' entry needing that API can be
    selectively pruned.
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Davidlohr Bueso <dbueso@suse.de>
    Cc: Jason Baron <jbaron@akamai.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-wkeldwob7dpx6jvtuzl8164k@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 013f3ca4af7ffaff91d815b54c9d383f152ddf7f
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Mon Nov 19 16:56:22 2018 -0300

    tools build feature: Check if get_current_dir_name() is available
    
    commit 8feb8efef97a134933620071e0b6384cb3238b4e upstream.
    
    As the namespace support code will use this, which is not available in
    some non _GNU_SOURCE libraries such as Android's bionic used in my
    container build tests (r12b and r15c at the moment).
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Wang Nan <wangnan0@huawei.com>
    Link: https://lkml.kernel.org/n/tip-x56ypm940pwclwu45d7jfj47@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54e12863da40084bfea58225441f58dad129fc75
Author: Jiri Olsa <jolsa@redhat.com>
Date:   Sun Jan 12 20:22:59 2020 +0100

    perf tools: Use %define api.pure full instead of %pure-parser
    
    commit fc8c0a99223367b071c83711259d754b6bb7a379 upstream.
    
    bison deprecated the "%pure-parser" directive in favor of "%define
    api.pure full".
    
    The api.pure got introduced in bison 2.3 (Oct 2007), so it seems safe to
    use it without any version check.
    
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Clark Williams <williams@redhat.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lore.kernel.org/lkml/20200112192259.GA35080@krava
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dac6b803d63ee94117bcc741674ee51fc7553ba
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Mar 19 15:47:25 2021 +0100

    Revert "PM: runtime: Update device status before letting suppliers suspend"
    
    commit 0cab893f409c53634d0d818fa414641cbcdb0dab upstream.
    
    Revert commit 44cc89f76464 ("PM: runtime: Update device status
    before letting suppliers suspend") that introduced a race condition
    into __rpm_callback() which allowed a concurrent rpm_resume() to
    run and resume the device prematurely after its status had been
    changed to RPM_SUSPENDED by __rpm_callback().
    
    Fixes: 44cc89f76464 ("PM: runtime: Update device status before letting suppliers suspend")
    Link: https://lore.kernel.org/linux-pm/24dfb6fc-5d54-6ee2-9195-26428b7ecf8a@intel.com/
    Reported-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce1d773634565efcc6d0c3bdb2de443dee5ea10e
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 09:47:02 2021 +0100

    bpf: Prohibit alu ops for pointer types not defining ptr_limit
    
    commit f232326f6966cf2a1d1db7bc917a4ce5f9f55f76 upstream.
    
    The purpose of this patch is to streamline error propagation and in particular
    to propagate retrieve_ptr_limit() errors for pointer types that are not defining
    a ptr_limit such that register-based alu ops against these types can be rejected.
    
    The main rationale is that a gap has been identified by Piotr in the existing
    protection against speculatively out-of-bounds loads, for example, in case of
    ctx pointers, unprivileged programs can still perform pointer arithmetic. This
    can be abused to execute speculatively out-of-bounds loads without restrictions
    and thus extract contents of kernel memory.
    
    Fix this by rejecting unprivileged programs that attempt any pointer arithmetic
    on unprotected pointer types. The two affected ones are pointer to ctx as well
    as pointer to map. Field access to a modified ctx' pointer is rejected at a
    later point in time in the verifier, and 7c6967326267 ("bpf: Permit map_ptr
    arithmetic with opcode add and offset 0") only relevant for root-only use cases.
    Risk of unprivileged program breakage is considered very low.
    
    Fixes: 7c6967326267 ("bpf: Permit map_ptr arithmetic with opcode add and offset 0")
    Fixes: b2157399cc98 ("bpf: prevent out-of-bounds speculation")
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd8044087395be31ef9ce0ab0f1750a3390ac57c
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Feb 22 14:30:10 2021 -0800

    net: dsa: b53: Support setting learning on port
    
    commit f9b3827ee66cfcf297d0acd6ecf33653a5f297ef upstream.
    
    Add support for being able to set the learning attribute on port, and
    make sure that the standalone ports start up with learning disabled.
    
    We can remove the code in bcm_sf2 that configured the ports learning
    attribute because we want the standalone ports to have learning disabled
    by default and port 7 cannot be bridged, so its learning attribute will
    not change past its initial configuration.
    
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33339540652f813a7e7f70a7681edc3f843f810
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 09:47:02 2021 +0100

    bpf: Add sanity check for upper ptr_limit
    
    commit 1b1597e64e1a610c7a96710fc4717158e98a08b3 upstream.
    
    Given we know the max possible value of ptr_limit at the time of retrieving
    the latter, add basic assertions, so that the verifier can bail out if
    anything looks odd and reject the program. Nothing triggered this so far,
    but it also does not hurt to have these.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a285722c33e97829a95279ccb4655532857194d6
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 08:26:25 2021 +0100

    bpf: Simplify alu_limit masking for pointer arithmetic
    
    commit b5871dca250cd391885218b99cc015aca1a51aea upstream.
    
    Instead of having the mov32 with aux->alu_limit - 1 immediate, move this
    operation to retrieve_ptr_limit() instead to simplify the logic and to
    allow for subsequent sanity boundary checks inside retrieve_ptr_limit().
    This avoids in future that at the time of the verifier masking rewrite
    we'd run into an underflow which would not sign extend due to the nature
    of mov32 instruction.
    
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94f83686ebb5df97615a0857af47337771bb950e
Author: Piotr Krysiuk <piotras@gmail.com>
Date:   Tue Mar 16 08:20:16 2021 +0100

    bpf: Fix off-by-one for area size in creating mask to left
    
    commit 10d2bb2e6b1d8c4576c56a748f697dbeb8388899 upstream.
    
    retrieve_ptr_limit() computes the ptr_limit for registers with stack and
    map_value type. ptr_limit is the size of the memory area that is still
    valid / in-bounds from the point of the current position and direction
    of the operation (add / sub). This size will later be used for masking
    the operation such that attempting out-of-bounds access in the speculative
    domain is redirected to remain within the bounds of the current map value.
    
    When masking to the right the size is correct, however, when masking to
    the left, the size is off-by-one which would lead to an incorrect mask
    and thus incorrect arithmetic operation in the non-speculative domain.
    Piotr found that if the resulting alu_limit value is zero, then the
    BPF_MOV32_IMM() from the fixup_bpf_calls() rewrite will end up loading
    0xffffffff into AX instead of sign-extending to the full 64 bit range,
    and as a result, this allows abuse for executing speculatively out-of-
    bounds loads against 4GB window of address space and thus extracting the
    contents of kernel memory via side-channel.
    
    Fixes: 979d63d50c0c ("bpf: prevent out of bounds speculation on pointer arithmetic")
    Signed-off-by: Piotr Krysiuk <piotras@gmail.com>
    Co-developed-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit baf4d9ed6bd28a9516c5b94251d62c09462b4b01
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 17 17:44:14 2021 +0100

    ext4: check journal inode extents more carefully
    
    commit ce9f24cccdc019229b70a5c15e2b09ad9c0ab5d1 upstream.
    
    Currently, system zones just track ranges of block, that are "important"
    fs metadata (bitmaps, group descriptors, journal blocks, etc.). This
    however complicates how extent tree (or indirect blocks) can be checked
    for inodes that actually track such metadata - currently the journal
    inode but arguably we should be treating quota files or resize inode
    similarly. We cannot run __ext4_ext_check() on such metadata inodes when
    loading their extents as that would immediately trigger the validity
    checks and so we just hack around that and special-case the journal
    inode. This however leads to a situation that a journal inode which has
    extent tree of depth at least one can have invalid extent tree that gets
    unnoticed until ext4_cache_extents() crashes.
    
    To overcome this limitation, track inode number each system zone belongs
    to (0 is used for zones not belonging to any inode). We can then verify
    inode number matches the expected one when verifying extent tree and
    thus avoid the false errors. With this there's no need to to
    special-case journal inode during extent tree checking anymore so remove
    it.
    
    Fixes: 0a944e8a6c66 ("ext4: don't perform block validity checks on the journal inode")
    Reported-by: Wolfgang Frisch <wolfgang.frisch@suse.com>
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200728130437.7804-4-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e0dd7871222b39a44d9ab490c8eee07ef63f219
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 17 17:44:13 2021 +0100

    ext4: don't allow overlapping system zones
    
    commit bf9a379d0980e7413d94cb18dac73db2bfc5f470 upstream.
    
    Currently, add_system_zone() just silently merges two added system zones
    that overlap. However the overlap should not happen and it generally
    suggests that some unrelated metadata overlap which indicates the fs is
    corrupted. We should have caught such problems earlier (e.g. in
    ext4_check_descriptors()) but add this check as another line of defense.
    In later patch we also use this for stricter checking of journal inode
    extent tree.
    
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200728130437.7804-3-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad73e88b09a85763ccde2f1cc75f580db2ab486c
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 17 17:44:12 2021 +0100

    ext4: handle error of ext4_setup_system_zone() on remount
    
    commit d176b1f62f242ab259ff665a26fbac69db1aecba upstream.
    
    ext4_setup_system_zone() can fail. Handle the failure in ext4_remount().
    
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200728130437.7804-2-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4056af21ab14cf354e8cb53906cfca17879d4f8d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 17 16:34:35 2021 +0100

    Linux 4.14.226
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210315135740.245494252@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2dd72d5e330f4d9eca8a3e6564ad6b2e99fb154d
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Mar 15 09:22:38 2021 +0100

    xen/events: avoid handling the same event on two cpus at the same time
    
    commit b6622798bc50b625a1e62f82c7190df40c1f5b21 upstream.
    
    When changing the cpu affinity of an event it can happen today that
    (with some unlucky timing) the same event will be handled on the old
    and the new cpu at the same time.
    
    Avoid that by adding an "event active" flag to the per-event data and
    call the handler only if this flag isn't set.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Link: https://lore.kernel.org/r/20210306161833.4552-4-jgross@suse.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5d1262cb4ed0100ee7208c7bda6df5366e0f270
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Mar 15 09:22:37 2021 +0100

    xen/events: don't unmask an event channel when an eoi is pending
    
    commit 25da4618af240fbec6112401498301a6f2bc9702 upstream.
    
    An event channel should be kept masked when an eoi is pending for it.
    When being migrated to another cpu it might be unmasked, though.
    
    In order to avoid this keep three different flags for each event channel
    to be able to distinguish "normal" masking/unmasking from eoi related
    masking/unmasking and temporary masking. The event channel should only
    be able to generate an interrupt if all flags are cleared.
    
    Cc: stable@vger.kernel.org
    Fixes: 54c9de89895e ("xen/events: add a new "late EOI" evtchn framework")
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Tested-by: Ross Lagerwall <ross.lagerwall@citrix.com>
    Link: https://lore.kernel.org/r/20210306161833.4552-3-jgross@suse.com
    
    [boris -- corrected Fixed tag format]
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 167b2305ae18f83ad74b93303fe4ed6ad768c26c
Author: Juergen Gross <jgross@suse.com>
Date:   Mon Mar 15 09:22:37 2021 +0100

    xen/events: reset affinity of 2-level event when tearing it down
    
    commit 9e77d96b8e2724ed00380189f7b0ded61113b39f upstream.
    
    When creating a new event channel with 2-level events the affinity
    needs to be reset initially in order to avoid using an old affinity
    from earlier usage of the event channel port. So when tearing an event
    channel down reset all affinity bits.
    
    The same applies to the affinity when onlining a vcpu: all old
    affinity settings for this vcpu must be reset. As percpu events get
    initialized before the percpu event channel hook is called,
    resetting of the affinities happens after offlining a vcpu (this is
    working, as initial percpu memory is zeroed out).
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Link: https://lore.kernel.org/r/20210306161833.4552-2-jgross@suse.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1617ce876b4343fb2b86c66cc1b37932df60077f
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sat Mar 13 18:29:49 2021 +0100

    iio: imu: adis16400: release allocated memory on failure
    
    commit ab612b1daf415b62c58e130cb3d0f30b255a14d0 upstream.
    
    In adis_update_scan_mode, if allocation for adis->buffer fails,
    previously allocated adis->xfer needs to be released.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e32f3d0420afd6855c1c1c06fce602bca2746853
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon Mar 15 11:08:33 2021 +0000

    KVM: arm64: Fix exclusive limit for IPA size
    
    Commit 262b003d059c6671601a19057e9fe1a5e7f23722 upstream.
    
    When registering a memslot, we check the size and location of that
    memslot against the IPA size to ensure that we can provide guest
    access to the whole of the memory.
    
    Unfortunately, this check rejects memslot that end-up at the exact
    limit of the addressing capability for a given IPA size. For example,
    it refuses the creation of a 2GB memslot at 0x8000000 with a 32bit
    IPA space.
    
    Fix it by relaxing the check to accept a memslot reaching the
    limit of the IPA space.
    
    Fixes: c3058d5da222 ("arm/arm64: KVM: Ensure memslots are within KVM_PHYS_SIZE")
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org # 4.4, 4.9, 4.14, 4.19
    Reviewed-by: Andrew Jones <drjones@redhat.com>
    Link: https://lore.kernel.org/r/20210311100016.3830038-3-maz@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 299658b58e603186ebfd5f28bbea45f445b1ddb4
Author: Boyang Yu <byu@arista.com>
Date:   Fri Jun 28 19:06:36 2019 +0000

    hwmon: (lm90) Fix max6658 sporadic wrong temperature reading
    
    commit 62456189f3292c62f87aef363f204886dc1d4b48 upstream.
    
    max6658 may report unrealistically high temperature during
    the driver initialization, for which, its overtemp alarm pin
    also gets asserted. For certain devices implementing overtemp
    protection based on that pin, it may further trigger a reset to
    the device. By reproducing the problem, the wrong reading is
    found to be coincident with changing the conversion rate.
    
    To mitigate this issue, set the stop bit before changing the
    conversion rate and unset it thereafter. After such change, the
    wrong reading is not reproduced. Apply this change only to the
    max6657 kind for now, controlled by flag LM90_PAUSE_ON_CONFIG.
    
    Signed-off-by: Boyang Yu <byu@arista.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Cc: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad22df1a7434c6c6731c437681fe1c356fb14a1c
Author: Lior Ribak <liorribak@gmail.com>
Date:   Fri Mar 12 21:07:41 2021 -0800

    binfmt_misc: fix possible deadlock in bm_register_write
    
    commit e7850f4d844e0acfac7e570af611d89deade3146 upstream.
    
    There is a deadlock in bm_register_write:
    
    First, in the begining of the function, a lock is taken on the binfmt_misc
    root inode with inode_lock(d_inode(root)).
    
    Then, if the user used the MISC_FMT_OPEN_FILE flag, the function will call
    open_exec on the user-provided interpreter.
    
    open_exec will call a path lookup, and if the path lookup process includes
    the root of binfmt_misc, it will try to take a shared lock on its inode
    again, but it is already locked, and the code will get stuck in a deadlock
    
    To reproduce the bug:
    $ echo ":iiiii:E::ii::/proc/sys/fs/binfmt_misc/bla:F" > /proc/sys/fs/binfmt_misc/register
    
    backtrace of where the lock occurs (#5):
    0  schedule () at ./arch/x86/include/asm/current.h:15
    1  0xffffffff81b51237 in rwsem_down_read_slowpath (sem=0xffff888003b202e0, count=<optimized out>, state=state@entry=2) at kernel/locking/rwsem.c:992
    2  0xffffffff81b5150a in __down_read_common (state=2, sem=<optimized out>) at kernel/locking/rwsem.c:1213
    3  __down_read (sem=<optimized out>) at kernel/locking/rwsem.c:1222
    4  down_read (sem=<optimized out>) at kernel/locking/rwsem.c:1355
    5  0xffffffff811ee22a in inode_lock_shared (inode=<optimized out>) at ./include/linux/fs.h:783
    6  open_last_lookups (op=0xffffc9000022fe34, file=0xffff888004098600, nd=0xffffc9000022fd10) at fs/namei.c:3177
    7  path_openat (nd=nd@entry=0xffffc9000022fd10, op=op@entry=0xffffc9000022fe34, flags=flags@entry=65) at fs/namei.c:3366
    8  0xffffffff811efe1c in do_filp_open (dfd=<optimized out>, pathname=pathname@entry=0xffff8880031b9000, op=op@entry=0xffffc9000022fe34) at fs/namei.c:3396
    9  0xffffffff811e493f in do_open_execat (fd=fd@entry=-100, name=name@entry=0xffff8880031b9000, flags=<optimized out>, flags@entry=0) at fs/exec.c:913
    10 0xffffffff811e4a92 in open_exec (name=<optimized out>) at fs/exec.c:948
    11 0xffffffff8124aa84 in bm_register_write (file=<optimized out>, buffer=<optimized out>, count=19, ppos=<optimized out>) at fs/binfmt_misc.c:682
    12 0xffffffff811decd2 in vfs_write (file=file@entry=0xffff888004098500, buf=buf@entry=0xa758d0 ":iiiii:E::ii::i:CF
    ", count=count@entry=19, pos=pos@entry=0xffffc9000022ff10) at fs/read_write.c:603
    13 0xffffffff811defda in ksys_write (fd=<optimized out>, buf=0xa758d0 ":iiiii:E::ii::i:CF
    ", count=19) at fs/read_write.c:658
    14 0xffffffff81b49813 in do_syscall_64 (nr=<optimized out>, regs=0xffffc9000022ff58) at arch/x86/entry/common.c:46
    15 0xffffffff81c0007c in entry_SYSCALL_64 () at arch/x86/entry/entry_64.S:120
    
    To solve the issue, the open_exec call is moved to before the write
    lock is taken by bm_register_write
    
    Link: https://lkml.kernel.org/r/20210228224414.95962-1-liorribak@gmail.com
    Fixes: 948b701a607f1 ("binfmt_misc: add persistent opened binary handler for containers")
    Signed-off-by: Lior Ribak <liorribak@gmail.com>
    Acked-by: Helge Deller <deller@gmx.de>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d91d304f1cc403ae3d0c40c2d7d8a8062e508f86
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Mar 4 07:34:11 2021 +0530

    powerpc/64s: Fix instruction encoding for lis in ppc_function_entry()
    
    commit cea15316ceee2d4a51dfdecd79e08a438135416c upstream.
    
    'lis r2,N' is 'addis r2,0,N' and the instruction encoding in the macro
    LIS_R2 is incorrect (it currently maps to 'addis r0,r2,N'). Fix the
    same.
    
    Fixes: c71b7eff426f ("powerpc: Add ABIv2 support to ppc_function_entry")
    Cc: stable@vger.kernel.org # v3.16+
    Reported-by: Jiri Olsa <jolsa@redhat.com>
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Segher Boessenkool <segher@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210304020411.16796-1-naveen.n.rao@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 145a8bf7dda843000a1a4f3a52fa0193d4abd301
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Fri Mar 12 21:08:03 2021 -0800

    include/linux/sched/mm.h: use rcu_dereference in in_vfork()
    
    [ Upstream commit 149fc787353f65b7e72e05e7b75d34863266c3e2 ]
    
    Fix a sparse warning by using rcu_dereference().  Technically this is a
    bug and a sufficiently aggressive compiler could reload the `real_parent'
    pointer outside the protection of the rcu lock (and access freed memory),
    but I think it's pretty unlikely to happen.
    
    Link: https://lkml.kernel.org/r/20210221194207.1351703-1-willy@infradead.org
    Fixes: b18dc5f291c0 ("mm, oom: skip vforked tasks from being selected")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c485dcb802c173ddf69f788bf470247d1170d4e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Mar 12 21:07:04 2021 -0800

    stop_machine: mark helpers __always_inline
    
    [ Upstream commit cbf78d85079cee662c45749ef4f744d41be85d48 ]
    
    With clang-13, some functions only get partially inlined, with a
    specialized version referring to a global variable.  This triggers a
    harmless build-time check for the intel-rng driver:
    
    WARNING: modpost: drivers/char/hw_random/intel-rng.o(.text+0xe): Section mismatch in reference from the function stop_machine() to the function .init.text:intel_rng_hw_init()
    The function stop_machine() references
    the function __init intel_rng_hw_init().
    This is often because stop_machine lacks a __init
    annotation or the annotation of intel_rng_hw_init is wrong.
    
    In this instance, an easy workaround is to force the stop_machine()
    function to be inline, along with related interfaces that did not show the
    same behavior at the moment, but theoretically could.
    
    The combination of the two patches listed below triggers the behavior in
    clang-13, but individually these commits are correct.
    
    Link: https://lkml.kernel.org/r/20210225130153.1956990-1-arnd@kernel.org
    Fixes: fe5595c07400 ("stop_machine: Provide stop_machine_cpuslocked()")
    Fixes: ee527cd3a20c ("Use stop_machine_run in the Intel RNG driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Nathan Chancellor <nathan@kernel.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Daniel Bristot de Oliveira <bristot@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93958e15606a16f48808d299996bae0189fdcf42
Author: Daiyue Zhang <zhangdaiyue1@huawei.com>
Date:   Mon Mar 1 14:10:53 2021 +0800

    configfs: fix a use-after-free in __configfs_open_file
    
    [ Upstream commit 14fbbc8297728e880070f7b077b3301a8c698ef9 ]
    
    Commit b0841eefd969 ("configfs: provide exclusion between IO and removals")
    uses ->frag_dead to mark the fragment state, thus no bothering with extra
    refcount on config_item when opening a file. The configfs_get_config_item
    was removed in __configfs_open_file, but not with config_item_put. So the
    refcount on config_item will lost its balance, causing use-after-free
    issues in some occasions like this:
    
    Test:
    1. Mount configfs on /config with read-only items:
    drwxrwx--- 289 root   root            0 2021-04-01 11:55 /config
    drwxr-xr-x   2 root   root            0 2021-04-01 11:54 /config/a
    --w--w--w-   1 root   root         4096 2021-04-01 11:53 /config/a/1.txt
    ......
    
    2. Then run:
    for file in /config
    do
    echo $file
    grep -R 'key' $file
    done
    
    3. __configfs_open_file will be called in parallel, the first one
    got called will do:
    if (file->f_mode & FMODE_READ) {
            if (!(inode->i_mode & S_IRUGO))
                    goto out_put_module;
                            config_item_put(buffer->item);
                                    kref_put()
                                            package_details_release()
                                                    kfree()
    
    the other one will run into use-after-free issues like this:
    BUG: KASAN: use-after-free in __configfs_open_file+0x1bc/0x3b0
    Read of size 8 at addr fffffff155f02480 by task grep/13096
    CPU: 0 PID: 13096 Comm: grep VIP: 00 Tainted: G        W       4.14.116-kasan #1
    TGID: 13096 Comm: grep
    Call trace:
    dump_stack+0x118/0x160
    kasan_report+0x22c/0x294
    __asan_load8+0x80/0x88
    __configfs_open_file+0x1bc/0x3b0
    configfs_open_file+0x28/0x34
    do_dentry_open+0x2cc/0x5c0
    vfs_open+0x80/0xe0
    path_openat+0xd8c/0x2988
    do_filp_open+0x1c4/0x2fc
    do_sys_open+0x23c/0x404
    SyS_openat+0x38/0x48
    
    Allocated by task 2138:
    kasan_kmalloc+0xe0/0x1ac
    kmem_cache_alloc_trace+0x334/0x394
    packages_make_item+0x4c/0x180
    configfs_mkdir+0x358/0x740
    vfs_mkdir2+0x1bc/0x2e8
    SyS_mkdirat+0x154/0x23c
    el0_svc_naked+0x34/0x38
    
    Freed by task 13096:
    kasan_slab_free+0xb8/0x194
    kfree+0x13c/0x910
    package_details_release+0x524/0x56c
    kref_put+0xc4/0x104
    config_item_put+0x24/0x34
    __configfs_open_file+0x35c/0x3b0
    configfs_open_file+0x28/0x34
    do_dentry_open+0x2cc/0x5c0
    vfs_open+0x80/0xe0
    path_openat+0xd8c/0x2988
    do_filp_open+0x1c4/0x2fc
    do_sys_open+0x23c/0x404
    SyS_openat+0x38/0x48
    el0_svc_naked+0x34/0x38
    
    To fix this issue, remove the config_item_put in
    __configfs_open_file to balance the refcount of config_item.
    
    Fixes: b0841eefd969 ("configfs: provide exclusion between IO and removals")
    Signed-off-by: Daiyue Zhang <zhangdaiyue1@huawei.com>
    Signed-off-by: Yi Chen <chenyi77@huawei.com>
    Signed-off-by: Ge Qiu <qiuge@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Acked-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01222ed6eb3762881836dae653ea0fc43d728444
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Tue Mar 9 19:30:17 2021 -0800

    block: rsxx: fix error return code of rsxx_pci_probe()
    
    [ Upstream commit df66617bfe87487190a60783d26175b65d2502ce ]
    
    When create_singlethread_workqueue returns NULL to card->event_wq, no
    error return code of rsxx_pci_probe() is assigned.
    
    To fix this bug, st is assigned with -ENOMEM in this case.
    
    Fixes: 8722ff8cdbfa ("block: IBM RamSan 70/80 device driver")
    Reported-by: TOTE Robot <oslab@tsinghua.edu.cn>
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Link: https://lore.kernel.org/r/20210310033017.4023-1-baijiaju1990@gmail.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e54bc3e5bfdce9272ac256158723ffc902a61ca6
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Fri Jan 15 18:43:56 2021 +0100

    NFSv4.2: fix return value of _nfs4_get_security_label()
    
    [ Upstream commit 53cb245454df5b13d7063162afd7a785aed6ebf2 ]
    
    An xattr 'get' handler is expected to return the length of the value on
    success, yet _nfs4_get_security_label() (and consequently also
    nfs4_xattr_get_nfs4_label(), which is used as an xattr handler) returns
    just 0 on success.
    
    Fix this by returning label.len instead, which contains the length of
    the result.
    
    Fixes: aa9c2669626c ("NFS: Client implementation of Labeled-NFS")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Reviewed-by: James Morris <jamorris@linux.microsoft.com>
    Reviewed-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae0ae3fcfbf1c85bdbfdc1e704144898e616943f
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sun Feb 28 23:26:34 2021 +0300

    sh_eth: fix TRSCER mask for R7S72100
    
    [ Upstream commit 75be7fb7f978202c4c3a1a713af4485afb2ff5f6 ]
    
    According  to  the RZ/A1H Group, RZ/A1M Group User's Manual: Hardware,
    Rev. 4.00, the TRSCER register has bit 9 reserved, hence we can't use
    the driver's default TRSCER mask.  Add the explicit initializer for
    sh_eth_cpu_data::trscer_err_mask for R7S72100.
    
    Fixes: db893473d313 ("sh_eth: Add support for r7s72100")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d334ce3e867608a046428fbf82aa1445cf9deba
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:50 2021 +0000

    staging: comedi: pcl818: Fix endian problem for AI command data
    
    commit 148e34fd33d53740642db523724226de14ee5281 upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the call to
    `comedi_buf_write_samples()` is passing the address of a 32-bit integer
    parameter.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the parameter
    holding the sample value to `unsigned short`.
    
    [Note: the bug was introduced in commit edf4537bcbf5 ("staging: comedi:
    pcl818: use comedi_buf_write_samples()") but the patch applies better to
    commit d615416de615 ("staging: comedi: pcl818: introduce
    pcl818_ai_write_sample()").]
    
    Fixes: d615416de615 ("staging: comedi: pcl818: introduce pcl818_ai_write_sample()")
    Cc: <stable@vger.kernel.org> # 4.0+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-10-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 430cb2f1fad9fdd6ed920ecd78c0fc0ea6b97d94
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:49 2021 +0000

    staging: comedi: pcl711: Fix endian problem for AI command data
    
    commit a084303a645896e834883f2c5170d044410dfdb3 upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the call to
    `comedi_buf_write_samples()` is passing the address of a 32-bit integer
    variable.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the variable
    holding the sample value to `unsigned short`.
    
    Fixes: 1f44c034de2e ("staging: comedi: pcl711: use comedi_buf_write_samples()")
    Cc: <stable@vger.kernel.org> # 3.19+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-9-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d66e66a1f8417a6f0c4e7cd6fc726ff80950c0
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:48 2021 +0000

    staging: comedi: me4000: Fix endian problem for AI command data
    
    commit b39dfcced399d31e7c4b7341693b18e01c8f655e upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the calls to
    `comedi_buf_write_samples()` are passing the address of a 32-bit integer
    variable.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the variable
    holding the sample value to `unsigned short`.
    
    Fixes: de88924f67d1 ("staging: comedi: me4000: use comedi_buf_write_samples()")
    Cc: <stable@vger.kernel.org> # 3.19+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-8-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7419da389174bb5d9920fcabc5e84db979f05e5e
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:47 2021 +0000

    staging: comedi: dmm32at: Fix endian problem for AI command data
    
    commit 54999c0d94b3c26625f896f8e3460bc029821578 upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the call to
    `comedi_buf_write_samples()` is passing the address of a 32-bit integer
    variable.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the variable
    holding the sample value to `unsigned short`.
    
    [Note: the bug was introduced in commit 1700529b24cc ("staging: comedi:
    dmm32at: use comedi_buf_write_samples()") but the patch applies better
    to the later (but in the same kernel release) commit 0c0eadadcbe6e
    ("staging: comedi: dmm32at: introduce dmm32_ai_get_sample()").]
    
    Fixes: 0c0eadadcbe6e ("staging: comedi: dmm32at: introduce dmm32_ai_get_sample()")
    Cc: <stable@vger.kernel.org> # 3.19+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-7-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd8634c5974370b7f840896555e0c5e851c112aa
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:46 2021 +0000

    staging: comedi: das800: Fix endian problem for AI command data
    
    commit 459b1e8c8fe97fcba0bd1b623471713dce2c5eaf upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the call to
    `comedi_buf_write_samples()` is passing the address of a 32-bit integer
    variable.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the variable
    holding the sample value to `unsigned short`.
    
    Fixes: ad9eb43c93d8 ("staging: comedi: das800: use comedi_buf_write_samples()")
    Cc: <stable@vger.kernel.org> # 3.19+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-6-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bcdaf08b2aee3642b5c2740c4ead12756874d95
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:45 2021 +0000

    staging: comedi: das6402: Fix endian problem for AI command data
    
    commit 1c0f20b78781b9ca50dc3ecfd396d0db5b141890 upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the call to
    `comedi_buf_write_samples()` is passing the address of a 32-bit integer
    variable.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the variable
    holding the sample value to `unsigned short`.
    
    Fixes: d1d24cb65ee3 ("staging: comedi: das6402: read analog input samples in interrupt handler")
    Cc: <stable@vger.kernel.org> # 3.19+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-5-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44a9cd7d343c407edf08e524a8df15d812370ff3
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:44 2021 +0000

    staging: comedi: adv_pci1710: Fix endian problem for AI command data
    
    commit b2e78630f733a76508b53ba680528ca39c890e82 upstream.
    
    The analog input subdevice supports Comedi asynchronous commands that
    use Comedi's 16-bit sample format.  However, the calls to
    `comedi_buf_write_samples()` are passing the address of a 32-bit integer
    variable.  On bigendian machines, this will copy 2 bytes from the wrong
    end of the 32-bit value.  Fix it by changing the type of the variables
    holding the sample value to `unsigned short`.  The type of the `val`
    parameter of `pci1710_ai_read_sample()` is changed to `unsigned short *`
    accordingly.  The type of the `val` variable in `pci1710_ai_insn_read()`
    is also changed to `unsigned short` since its address is passed to
    `pci1710_ai_read_sample()`.
    
    Fixes: a9c3a015c12f ("staging: comedi: adv_pci1710: use comedi_buf_write_samples()")
    Cc: <stable@vger.kernel.org> # 4.0+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-4-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6d29c2ec9e07a2ae9d4fcc7c2932a03c81cc71e
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:43 2021 +0000

    staging: comedi: addi_apci_1500: Fix endian problem for command sample
    
    commit ac0bbf55ed3be75fde1f8907e91ecd2fd589bde3 upstream.
    
    The digital input subdevice supports Comedi asynchronous commands that
    read interrupt status information.  This uses 16-bit Comedi samples (of
    which only the bottom 8 bits contain status information).  However, the
    interrupt handler is calling `comedi_buf_write_samples()` with the
    address of a 32-bit variable `unsigned int status`.  On a bigendian
    machine, this will copy 2 bytes from the wrong end of the variable.  Fix
    it by changing the type of the variable to `unsigned short`.
    
    Fixes: a8c66b684efa ("staging: comedi: addi_apci_1500: rewrite the subdevice support functions")
    Cc: <stable@vger.kernel.org> #4.0+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-3-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86012c674a8ecb9df95e4606e9dd6125e9ddefd1
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Tue Feb 23 14:30:42 2021 +0000

    staging: comedi: addi_apci_1032: Fix endian problem for COS sample
    
    commit 25317f428a78fde71b2bf3f24d05850f08a73a52 upstream.
    
    The Change-Of-State (COS) subdevice supports Comedi asynchronous
    commands to read 16-bit change-of-state values.  However, the interrupt
    handler is calling `comedi_buf_write_samples()` with the address of a
    32-bit integer `&s->state`.  On bigendian architectures, it will copy 2
    bytes from the wrong end of the 32-bit integer.  Fix it by transferring
    the value via a 16-bit integer.
    
    Fixes: 6bb45f2b0c86 ("staging: comedi: addi_apci_1032: use comedi_buf_write_samples()")
    Cc: <stable@vger.kernel.org> # 3.19+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20210223143055.257402-2-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55805043cb8bf3838119dec495ba11aacb95cea1
Author: Lee Gibson <leegib@gmail.com>
Date:   Fri Feb 26 14:51:57 2021 +0000

    staging: rtl8192e: Fix possible buffer overflow in _rtl92e_wx_set_scan
    
    commit 8687bf9ef9551bcf93897e33364d121667b1aadf upstream.
    
    Function _rtl92e_wx_set_scan calls memcpy without checking the length.
    A user could control that length and trigger a buffer overflow.
    Fix by checking the length is within the maximum allowed size.
    
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Lee Gibson <leegib@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210226145157.424065-1-leegib@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 123214094f94da5432fab3c3ac7e60d3239d670e
Author: Lee Gibson <leegib@gmail.com>
Date:   Mon Mar 1 13:26:48 2021 +0000

    staging: rtl8712: Fix possible buffer overflow in r8712_sitesurvey_cmd
    
    commit b93c1e3981af19527beee1c10a2bef67a228c48c upstream.
    
    Function r8712_sitesurvey_cmd calls memcpy without checking the length.
    A user could control that length and trigger a buffer overflow.
    Fix by checking the length is within the maximum allowed size.
    
    Signed-off-by: Lee Gibson <leegib@gmail.com>
    Link: https://lore.kernel.org/r/20210301132648.420296-1-leegib@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1c3a49d60e845ca5cf387f2ee0b866dee2778a8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Mar 2 14:19:39 2021 +0300

    staging: ks7010: prevent buffer overflow in ks_wlan_set_scan()
    
    commit e163b9823a0b08c3bb8dc4f5b4b5c221c24ec3e5 upstream.
    
    The user can specify a "req->essid_len" of up to 255 but if it's
    over IW_ESSID_MAX_SIZE (32) that can lead to memory corruption.
    
    Fixes: 13a9930d15b4 ("staging: ks7010: add driver from Nanonote extra-repository")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YD4fS8+HmM/Qmrw6@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 071d1eeec8b539fb7a0773de58f5a93a0320e458
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 5 11:56:32 2021 +0300

    staging: rtl8188eu: fix potential memory corruption in rtw_check_beacon_data()
    
    commit d4ac640322b06095128a5c45ba4a1e80929fe7f3 upstream.
    
    The "ie_len" is a value in the 1-255 range that comes from the user.  We
    have to cap it to ensure that it's not too large or it could lead to
    memory corruption.
    
    Fixes: 9a7fe54ddc3a ("staging: r8188eu: Add source files for new driver - part 1")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YEHyQCrFZKTXyT7J@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 256b5bf94f8ff9a12ce65c3d5ec43da3cd728af0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 24 11:45:59 2021 +0300

    staging: rtl8712: unterminated string leads to read overflow
    
    commit d660f4f42ccea50262c6ee90c8e7ad19a69fb225 upstream.
    
    The memdup_user() function does not necessarily return a NUL terminated
    string so this can lead to a read overflow.  Switch from memdup_user()
    to strndup_user() to fix this bug.
    
    Fixes: c6dc001f2add ("staging: r8712u: Merging Realtek's latest (v2.6.6). Various fixes.")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YDYSR+1rj26NRhvb@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a416faf6981b2059aa9db075f95c1d8fbe3aab0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 5 11:58:03 2021 +0300

    staging: rtl8188eu: prevent ->ssid overflow in rtw_wx_set_scan()
    
    commit 74b6b20df8cfe90ada777d621b54c32e69e27cd7 upstream.
    
    This code has a check to prevent read overflow but it needs another
    check to prevent writing beyond the end of the ->ssid[] array.
    
    Fixes: a2c60d42d97c ("staging: r8188eu: Add files for new driver - part 16")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YEHymwsnHewzoam7@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01d9a5b811ae95151f7357712ab6388c0684c20f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Mar 5 11:12:49 2021 +0300

    staging: rtl8192u: fix ->ssid overflow in r8192_wx_set_scan()
    
    commit 87107518d7a93fec6cdb2559588862afeee800fb upstream.
    
    We need to cap len at IW_ESSID_MAX_SIZE (32) to avoid memory corruption.
    This can be controlled by the user via the ioctl.
    
    Fixes: 5f53d8ca3d5d ("Staging: add rtl8192SU wireless usb driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/YEHoAWMOSZBUw91F@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4288bf7376c37a0a5939598f289d36ff4534edb
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Sun Mar 7 20:53:30 2021 -0700

    usbip: fix vhci_hcd attach_store() races leading to gpf
    
    commit 718ad9693e3656120064b715fe931f43a6201e67 upstream.
    
    attach_store() is invoked when user requests import (attach) a device
    from usbip host.
    
    Attach and detach are governed by local state and shared state
    - Shared state (usbip device status) - Device status is used to manage
      the attach and detach operations on import-able devices.
    - Local state (tcp_socket, rx and tx thread task_struct ptrs)
      A valid tcp_socket controls rx and tx thread operations while the
      device is in exported state.
    - Device has to be in the right state to be attached and detached.
    
    Attach sequence includes validating the socket and creating receive (rx)
    and transmit (tx) threads to talk to the host to get access to the
    imported device. rx and tx threads depends on local and shared state to
    be correct and in sync.
    
    Detach sequence shuts the socket down and stops the rx and tx threads.
    Detach sequence relies on local and shared states to be in sync.
    
    There are races in updating the local and shared status in the current
    attach sequence resulting in crashes. These stem from starting rx and
    tx threads before local and global state is updated correctly to be in
    sync.
    
    1. Doesn't handle kthread_create() error and saves invalid ptr in local
       state that drives rx and tx threads.
    2. Updates tcp_socket and sockfd,  starts stub_rx and stub_tx threads
       before updating usbip_device status to VDEV_ST_NOTASSIGNED. This opens
       up a race condition between the threads, port connect, and detach
       handling.
    
    Fix the above problems:
    - Stop using kthread_get_run() macro to create/start threads.
    - Create threads and get task struct reference.
    - Add kthread_create() failure handling and bail out.
    - Hold vhci and usbip_device locks to update local and shared states after
      creating rx and tx threads.
    - Update usbip_device status to VDEV_ST_NOTASSIGNED.
    - Update usbip_device tcp_socket, sockfd, tcp_rx, and tcp_tx
    - Start threads after usbip_device (tcp_socket, sockfd, tcp_rx, tcp_tx,
      and status) is complete.
    
    Credit goes to syzbot and Tetsuo Handa for finding and root-causing the
    kthread_get_run() improper error handling problem and others. This is
    hard problem to find and debug since the races aren't seen in a normal
    case. Fuzzing forces the race window to be small enough for the
    kthread_get_run() error path bug and starting threads before updating the
    local and shared state bug in the attach sequence.
    - Update usbip_device tcp_rx and tcp_tx pointers holding vhci and
      usbip_device locks.
    
    Tested with syzbot reproducer:
    - https://syzkaller.appspot.com/text?tag=ReproC&x=14801034d00000
    
    Fixes: 9720b4bc76a83807 ("staging/usbip: convert to kthread")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot <syzbot+a93fba6d384346a761e3@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+bf1a360e305ee719e364@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+95ce4b142579611ef0a9@syzkaller.appspotmail.com>
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/bb434bd5d7a64fbec38b5ecfb838a6baef6eb12b.1615171203.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7cc7b695d7f9141e23f7e37b116cf4c7ff1d0c62
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Sun Mar 7 20:53:29 2021 -0700

    usbip: fix stub_dev usbip_sockfd_store() races leading to gpf
    
    commit 9380afd6df70e24eacbdbde33afc6a3950965d22 upstream.
    
    usbip_sockfd_store() is invoked when user requests attach (import)
    detach (unimport) usb device from usbip host. vhci_hcd sends import
    request and usbip_sockfd_store() exports the device if it is free
    for export.
    
    Export and unexport are governed by local state and shared state
    - Shared state (usbip device status, sockfd) - sockfd and Device
      status are used to determine if stub should be brought up or shut
      down.
    - Local state (tcp_socket, rx and tx thread task_struct ptrs)
      A valid tcp_socket controls rx and tx thread operations while the
      device is in exported state.
    - While the device is exported, device status is marked used and socket,
      sockfd, and thread pointers are valid.
    
    Export sequence (stub-up) includes validating the socket and creating
    receive (rx) and transmit (tx) threads to talk to the client to provide
    access to the exported device. rx and tx threads depends on local and
    shared state to be correct and in sync.
    
    Unexport (stub-down) sequence shuts the socket down and stops the rx and
    tx threads. Stub-down sequence relies on local and shared states to be
    in sync.
    
    There are races in updating the local and shared status in the current
    stub-up sequence resulting in crashes. These stem from starting rx and
    tx threads before local and global state is updated correctly to be in
    sync.
    
    1. Doesn't handle kthread_create() error and saves invalid ptr in local
       state that drives rx and tx threads.
    2. Updates tcp_socket and sockfd,  starts stub_rx and stub_tx threads
       before updating usbip_device status to SDEV_ST_USED. This opens up a
       race condition between the threads and usbip_sockfd_store() stub up
       and down handling.
    
    Fix the above problems:
    - Stop using kthread_get_run() macro to create/start threads.
    - Create threads and get task struct reference.
    - Add kthread_create() failure handling and bail out.
    - Hold usbip_device lock to update local and shared states after
      creating rx and tx threads.
    - Update usbip_device status to SDEV_ST_USED.
    - Update usbip_device tcp_socket, sockfd, tcp_rx, and tcp_tx
    - Start threads after usbip_device (tcp_socket, sockfd, tcp_rx, tcp_tx,
      and status) is complete.
    
    Credit goes to syzbot and Tetsuo Handa for finding and root-causing the
    kthread_get_run() improper error handling problem and others. This is a
    hard problem to find and debug since the races aren't seen in a normal
    case. Fuzzing forces the race window to be small enough for the
    kthread_get_run() error path bug and starting threads before updating the
    local and shared state bug in the stub-up sequence.
    
    Tested with syzbot reproducer:
    - https://syzkaller.appspot.com/text?tag=ReproC&x=14801034d00000
    
    Fixes: 9720b4bc76a83807 ("staging/usbip: convert to kthread")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot <syzbot+a93fba6d384346a761e3@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+bf1a360e305ee719e364@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+95ce4b142579611ef0a9@syzkaller.appspotmail.com>
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/268a0668144d5ff36ec7d87fdfa90faf583b7ccc.1615171203.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3e727e9e79a31a356fb7123bc34d67f369e594b
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Sun Mar 7 20:53:28 2021 -0700

    usbip: fix vudc to check for stream socket
    
    commit 6801854be94fe8819b3894979875ea31482f5658 upstream.
    
    Fix usbip_sockfd_store() to validate the passed in file descriptor is
    a stream socket. If the file descriptor passed was a SOCK_DGRAM socket,
    sock_recvmsg() can't detect end of stream.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/387a670316002324113ac7ea1e8b53f4085d0c95.1615171203.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29882c210bf6e6fdfb1bada948cd8f805667429d
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Sun Mar 7 20:53:27 2021 -0700

    usbip: fix vhci_hcd to check for stream socket
    
    commit f55a0571690c4aae03180e001522538c0927432f upstream.
    
    Fix attach_store() to validate the passed in file descriptor is a
    stream socket. If the file descriptor passed was a SOCK_DGRAM socket,
    sock_recvmsg() can't detect end of stream.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/52712aa308915bda02cece1589e04ee8b401d1f3.1615171203.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d663c964c060f3c0fbf769be3cc06290a312a19b
Author: Shuah Khan <skhan@linuxfoundation.org>
Date:   Sun Mar 7 20:53:26 2021 -0700

    usbip: fix stub_dev to check for stream socket
    
    commit 47ccc8fc2c9c94558b27b6f9e2582df32d29e6e8 upstream.
    
    Fix usbip_sockfd_store() to validate the passed in file descriptor is
    a stream socket. If the file descriptor passed was a SOCK_DGRAM socket,
    sock_recvmsg() can't detect end of stream.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/e942d2bd03afb8e8552bd2a5d84e18d17670d521.1615171203.git.skhan@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c469d2d3996531ae3ec9b4cd2465bc070929c663
Author: Sebastian Reichel <sebastian.reichel@collabora.com>
Date:   Tue Feb 23 17:44:18 2021 +0100

    USB: serial: cp210x: add some more GE USB IDs
    
    commit 42213a0190b535093a604945db05a4225bf43885 upstream.
    
    GE CS1000 has some more custom USB IDs for CP2102N; add them
    to the driver to have working auto-probing.
    
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9ab1dd2b3b7362ee60d7b3e76e1858a402f27a9
Author: Karan Singhal <karan.singhal@acuitybrands.com>
Date:   Tue Feb 16 11:03:10 2021 -0500

    USB: serial: cp210x: add ID for Acuity Brands nLight Air Adapter
    
    commit ca667a33207daeaf9c62b106815728718def60ec upstream.
    
    IDs of nLight Air Adapter, Acuity Brands, Inc.:
    vid: 10c4
    pid: 88d8
    
    Signed-off-by: Karan Singhal <karan.singhal@acuitybrands.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84917e4c51a3543595b3f1014c0d5c756c582fea
Author: Niv Sardi <xaiki@evilgiggle.com>
Date:   Mon Mar 1 17:16:12 2021 -0300

    USB: serial: ch341: add new Product ID
    
    commit 5563b3b6420362c8a1f468ca04afe6d5f0a8d0a3 upstream.
    
    Add PID for CH340 that's found on cheap programmers.
    
    The driver works flawlessly as soon as the new PID (0x9986) is added to it.
    These look like ANU232MI but ship with a ch341 inside. They have no special
    identifiers (mine only has the string "DB9D20130716" printed on the PCB and
    nothing identifiable on the packaging. The merchant i bought it from
    doesn't sell these anymore).
    
    the lsusb -v output is:
    Bus 001 Device 009: ID 9986:7523
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               1.10
      bDeviceClass          255 Vendor Specific Class
      bDeviceSubClass         0
      bDeviceProtocol         0
      bMaxPacketSize0         8
      idVendor           0x9986
      idProduct          0x7523
      bcdDevice            2.54
      iManufacturer           0
      iProduct                0
      iSerial                 0
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength       0x0027
        bNumInterfaces          1
        bConfigurationValue     1
        iConfiguration          0
        bmAttributes         0x80
          (Bus Powered)
        MaxPower               96mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass      1
          bInterfaceProtocol      2
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0020  1x 32 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0020  1x 32 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0008  1x 8 bytes
            bInterval               1
    
    Signed-off-by: Niv Sardi <xaiki@evilgiggle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ba22db2cd2cacba7272c8807f433bc064a10e13
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Tue Mar 2 02:01:52 2021 +0300

    USB: serial: io_edgeport: fix memory leak in edge_startup
    
    commit cfdc67acc785e01a8719eeb7012709d245564701 upstream.
    
    sysbot found memory leak in edge_startup().
    The problem was that when an error was received from the usb_submit_urb(),
    nothing was cleaned up.
    
    Reported-by: syzbot+59f777bdcbdd7eea5305@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Fixes: 6e8cf7751f9f ("USB: add EPIC support to the io_edgeport driver")
    Cc: stable@vger.kernel.org      # 2.6.21: c5c0c55598ce
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cce54216099e7b643b32349cdf3e568ac7c76d44
Author: Forest Crossman <cyrozap@gmail.com>
Date:   Thu Mar 11 13:53:52 2021 +0200

    usb: xhci: Fix ASMedia ASM1042A and ASM3242 DMA addressing
    
    commit b71c669ad8390dd1c866298319ff89fe68b45653 upstream.
    
    I've confirmed that both the ASMedia ASM1042A and ASM3242 have the same
    problem as the ASM1142 and ASM2142/ASM3142, where they lose some of the
    upper bits of 64-bit DMA addresses. As with the other chips, this can
    cause problems on systems where the upper bits matter, and adding the
    XHCI_NO_64BIT_SUPPORT quirk completely fixes the issue.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Forest Crossman <cyrozap@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210311115353.2137560-4-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89fa16f29fb48a8d0f9e6e753c714c2ff684d525
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Thu Mar 11 13:53:51 2021 +0200

    xhci: Improve detection of device initiated wake signal.
    
    commit 253f588c70f66184b1f3a9bbb428b49bbda73e80 upstream.
    
    A xHC USB 3 port might miss the first wake signal from a USB 3 device
    if the port LFPS reveiver isn't enabled fast enough after xHC resume.
    
    xHC host will anyway be resumed by a PME# signal, but will go back to
    suspend if no port activity is seen.
    The device resends the U3 LFPS wake signal after a 100ms delay, but
    by then host is already suspended, starting all over from the
    beginning of this issue.
    
    USB 3 specs say U3 wake LFPS signal is sent for max 10ms, then device
    needs to delay 100ms before resending the wake.
    
    Don't suspend immediately if port activity isn't detected in resume.
    Instead add a retry. If there is no port activity then delay for 120ms,
    and re-check for port activity.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210311115353.2137560-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8e62c14378752510c98613ce9fb537041ce8b46
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Mar 8 10:55:38 2021 +0900

    usb: renesas_usbhs: Clear PIPECFG for re-enabling pipe with other EPNUM
    
    commit b1d25e6ee57c2605845595b6c61340d734253eb3 upstream.
    
    According to the datasheet, this controller has a restriction
    which "set an endpoint number so that combinations of the DIR bit and
    the EPNUM bits do not overlap.". However, since the udc core driver is
    possible to assign a bulk pipe as an interrupt endpoint, an endpoint
    number may not match the pipe number. After that, when user rebinds
    another gadget driver, this driver broke the restriction because
    the driver didn't clear any configuration in usb_ep_disable().
    
    Example:
     # modprobe g_ncm
     Then, EP3 = pipe 3, EP4 = pipe 4, EP5 = pipe 6
     # rmmod g_ncm
     # modprobe g_hid
     Then, EP3 = pipe 6, EP4 = pipe 7.
     So, pipe 3 and pipe 6 are set as EP3.
    
    So, clear PIPECFG register in usbhs_pipe_free().
    
    Fixes: dfb87b8bfe09 ("usb: renesas_usbhs: gadget: fix re-enabling pipe without re-connecting")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1615168538-26101-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a68ffe055a484be1a451ae3a9065a1ab55076ddb
Author: Ruslan Bilovol <ruslan.bilovol@gmail.com>
Date:   Mon Mar 1 13:49:32 2021 +0200

    usb: gadget: f_uac1: stop playback on function disable
    
    commit cc2ac63d4cf72104e0e7f58bb846121f0f51bb19 upstream.
    
    There is missing playback stop/cleanup in case of
    gadget's ->disable callback that happens on
    events like USB host resetting or gadget disconnection
    
    Fixes: 0591bc236015 ("usb: gadget: add f_uac1 variant based on a new u_audio api")
    Cc: <stable@vger.kernel.org> # 4.13+
    Signed-off-by: Ruslan Bilovol <ruslan.bilovol@gmail.com>
    Link: https://lore.kernel.org/r/1614599375-8803-3-git-send-email-ruslan.bilovol@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 295a25f277df497bc6943a2c7de5a843a417188f
Author: Ruslan Bilovol <ruslan.bilovol@gmail.com>
Date:   Mon Mar 1 13:49:31 2021 +0200

    usb: gadget: f_uac2: always increase endpoint max_packet_size by one audio slot
    
    commit 789ea77310f0200c84002884ffd628e2baf3ad8a upstream.
    
    As per UAC2 Audio Data Formats spec (2.3.1.1 USB Packets),
    if the sampling rate is a constant, the allowable variation
    of number of audio slots per virtual frame is +/- 1 audio slot.
    
    It means that endpoint should be able to accept/send +1 audio
    slot.
    
    Previous endpoint max_packet_size calculation code
    was adding sometimes +1 audio slot due to DIV_ROUND_UP
    behaviour which was rounding up to closest integer.
    However this doesn't work if the numbers are divisible.
    
    It had no any impact with Linux hosts which ignore
    this issue, but in case of more strict Windows it
    caused rejected enumeration
    
    Thus always add +1 audio slot to endpoint's max packet size
    
    Fixes: 913e4a90b6f9 ("usb: gadget: f_uac2: finalize wMaxPacketSize according to bandwidth")
    Cc: Peter Chen <peter.chen@freescale.com>
    Cc: <stable@vger.kernel.org> #v4.3+
    Signed-off-by: Ruslan Bilovol <ruslan.bilovol@gmail.com>
    Link: https://lore.kernel.org/r/1614599375-8803-2-git-send-email-ruslan.bilovol@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 189c48379833be2b82c9835c55c59bba6160c5a3
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Feb 15 15:57:16 2021 +0000

    USB: gadget: u_ether: Fix a configfs return code
    
    commit 650bf52208d804ad5ee449c58102f8dc43175573 upstream.
    
    If the string is invalid, this should return -EINVAL instead of 0.
    
    Fixes: 73517cf49bd4 ("usb: gadget: add RNDIS configfs options for class/subclass/protocol")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YCqZ3P53yyIg5cn7@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 219b9b4703670d16b45740951efd78ee5ef796a2
Author: Yorick de Wid <ydewid@gmail.com>
Date:   Sat Feb 13 15:49:02 2021 +0100

    Goodix Fingerprint device is not a modem
    
    commit 4d8654e81db7346f915eca9f1aff18f385cab621 upstream.
    
    The CDC ACM driver is false matching the Goodix Fingerprint device
    against the USB_CDC_ACM_PROTO_AT_V25TER.
    
    The Goodix Fingerprint device is a biometrics sensor that should be
    handled in user-space. libfprint has some support for Goodix
    fingerprint sensors, although not for this particular one. It is
    possible that the vendor allocates a PID per OEM (Lenovo, Dell etc).
    If this happens to be the case then more devices from the same vendor
    could potentially match the ACM modem module table.
    
    Signed-off-by: Yorick de Wid <ydewid@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210213144901.53199-1-ydewid@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 462c3f31a3012d4e8469ee32bf90e2af21becb33
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Mar 3 11:26:14 2021 +0200

    mmc: core: Fix partition switch time for eMMC
    
    commit 66fbacccbab91e6e55d9c8f1fc0910a8eb6c81f7 upstream.
    
    Avoid the following warning by always defining partition switch time:
    
     [    3.209874] mmc1: unspecified timeout for CMD6 - use generic
     [    3.222780] ------------[ cut here ]------------
     [    3.233363] WARNING: CPU: 1 PID: 111 at drivers/mmc/core/mmc_ops.c:575 __mmc_switch+0x200/0x204
    
    Reported-by: Paul Fertser <fercerpav@gmail.com>
    Fixes: 1c447116d017 ("mmc: mmc: Fix partition switch timeout for some eMMCs")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/168bbfd6-0c5b-5ace-ab41-402e7937c46e@intel.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6bcbb7d638073f9749c708e23e990d72305ec04
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Fri Mar 5 13:54:39 2021 +0100

    s390/dasd: fix hanging IO request during DASD driver unbind
    
    commit 66f669a272898feb1c69b770e1504aa2ec7723d1 upstream.
    
    Prevent that an IO request is build during device shutdown initiated by
    a driver unbind. This request will never be able to be processed or
    canceled and will hang forever. This will lead also to a hanging unbind.
    
    Fix by checking not only if the device is in READY state but also check
    that there is no device offline initiated before building a new IO request.
    
    Fixes: e443343e509a ("s390/dasd: blk-mq conversion")
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Tested-by: Bjoern Walk <bwalk@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfa9564af0cb13824af097f79c8de2c710452f3e
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Fri Mar 5 13:54:38 2021 +0100

    s390/dasd: fix hanging DASD driver unbind
    
    commit 7d365bd0bff3c0310c39ebaffc9a8458e036d666 upstream.
    
    In case of an unbind of the DASD device driver the function
    dasd_generic_remove() is called which shuts down the device.
    Among others this functions removes the int_handler from the cdev.
    During shutdown the device cancels all outstanding IO requests and waits
    for completion of the clear request.
    Unfortunately the clear interrupt will never be received when there is no
    interrupt handler connected.
    
    Fix by moving the int_handler removal after the call to the state machine
    where no request or interrupt is outstanding.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Tested-by: Bjoern Walk <bwalk@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02c1ca1855902b12d950ba8586f71b007a24967c
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Mar 12 15:07:09 2021 -0600

    Revert 95ebabde382c ("capabilities: Don't allow writing ambiguous v3 file capabilities")
    
    commit 3b0c2d3eaa83da259d7726192cf55a137769012f upstream.
    
    It turns out that there are in fact userspace implementations that
    care and this recent change caused a regression.
    
    https://github.com/containers/buildah/issues/3071
    
    As the motivation for the original change was future development,
    and the impact is existing real world code just revert this change
    and allow the ambiguity in v3 file caps.
    
    Cc: stable@vger.kernel.org
    Fixes: 95ebabde382c ("capabilities: Don't allow writing ambiguous v3 file capabilities")
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bdb7cf138c8bceaf3925552047c3a245594094c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Mar 4 09:30:21 2021 +0100

    ALSA: usb-audio: Fix "cannot get freq eq" errors on Dell AE515 sound bar
    
    commit fec60c3bc5d1713db2727cdffc638d48f9c07dc3 upstream.
    
    Dell AE515 sound bar (413c:a506) spews the error messages when the
    driver tries to read the current sample frequency, hence it needs to
    be on the list in snd_usb_get_sample_rate_quirk().
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=211551
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210304083021.2152-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1011535e58bd3b2fd82485f378f671b98d777241
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Mar 10 12:28:08 2021 +0100

    ALSA: hda: Avoid spurious unsol event handling during S3/S4
    
    commit 5ff9dde42e8c72ed8102eb8cb62e03f9dc2103ab upstream.
    
    When HD-audio bus receives unsolicited events during its system
    suspend/resume (S3 and S4) phase, the controller driver may still try
    to process events although the codec chips are already (or yet)
    powered down.  This might screw up the codec communication, resulting
    in CORB/RIRB errors.  Such events should be rather skipped, as the
    codec chip status such as the jack status will be fully refreshed at
    the system resume time.
    
    Since we're tracking the system suspend/resume state in codec
    power.power_state field, let's add the check in the common unsol event
    handler entry point to filter out such events.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1182377
    Tested-by: Abhishek Sahu <abhsahu@nvidia.com>
    Cc: <stable@vger.kernel.org> # 183ab39eb0ea: ALSA: hda: Initialize power_state
    Link: https://lore.kernel.org/r/20210310112809.9215-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 503d141291f51b5791d7d8ed9942b4701c200186
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Mar 8 17:07:26 2021 +0100

    ALSA: hda: Drop the BATCH workaround for AMD controllers
    
    commit 28e96c1693ec1cdc963807611f8b5ad400431e82 upstream.
    
    The commit c02f77d32d2c ("ALSA: hda - Workaround for crackled sound on
    AMD controller (1022:1457)") introduced a few workarounds for the
    recent AMD HD-audio controller, and one of them is the forced BATCH
    PCM mode so that PulseAudio avoids the timer-based scheduling.  This
    was thought to cover for some badly working applications, but this
    actually worsens for more others.  In total, this wasn't a good idea
    to enforce it.
    
    This is a partial revert of the commit above for dropping the PCM
    BATCH enforcement part to recover from the regression again.
    
    Fixes: c02f77d32d2c ("ALSA: hda - Workaround for crackled sound on AMD controller (1022:1457)")
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=195303
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210308160726.22930-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a478545c71ae0816392481fc528f77c9bd60408f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Mar 10 12:28:09 2021 +0100

    ALSA: hda/hdmi: Cancel pending works before suspend
    
    commit eea46a0879bcca23e15071f9968c0f6e6596e470 upstream.
    
    The per_pin->work might be still floating at the suspend, and this may
    hit the access to the hardware at an unexpected timing.  Cancel the
    work properly at the suspend callback for avoiding the buggy access.
    
    Note that the bug doesn't trigger easily in the recent kernels since
    the work is queued only when the repoll count is set, and usually it's
    only at the resume callback, but it's still possible to hit in
    theory.
    
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1182377
    Reported-and-tested-by: Abhishek Sahu <abhsahu@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210310112809.9215-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d44378c1d163c389d1d912d37cf907d04984b73e
Author: Mike Christie <michael.christie@oracle.com>
Date:   Sat Feb 6 22:46:00 2021 -0600

    scsi: libiscsi: Fix iscsi_prep_scsi_cmd_pdu() error handling
    
    [ Upstream commit d28d48c699779973ab9a3bd0e5acfa112bd4fdef ]
    
    If iscsi_prep_scsi_cmd_pdu() fails we try to add it back to the cmdqueue,
    but we leave it partially setup. We don't have functions that can undo the
    pdu and init task setup. We only have cleanup_task which can clean up both
    parts. So this has us just fail the cmd and go through the standard cleanup
    routine and then have the SCSI midlayer retry it like is done when it fails
    in the queuecommand path.
    
    Link: https://lore.kernel.org/r/20210207044608.27585-2-michael.christie@oracle.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19a2e1305e018ee9da9d3fb6bfb12e9eec515a59
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Wed Feb 17 07:13:02 2021 +0100

    s390/smp: __smp_rescan_cpus() - move cpumask away from stack
    
    [ Upstream commit 62c8dca9e194326802b43c60763f856d782b225c ]
    
    Avoid a potentially large stack frame and overflow by making
    "cpumask_t avail" a static variable. There is no concurrent
    access due to the existing locking.
    
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d18396a4f20de45064c293d610951f3d7e91389b
Author: Krzysztof Wilczyński <kw@linux.com>
Date:   Wed Jan 20 18:48:10 2021 +0000

    PCI: mediatek: Add missing of_node_put() to fix reference leak
    
    [ Upstream commit 42814c438aac79746d310f413a27d5b0b959c5de ]
    
    The for_each_available_child_of_node helper internally makes use of the
    of_get_next_available_child() which performs an of_node_get() on each
    iteration when searching for next available child node.
    
    Should an available child node be found, then it would return a device
    node pointer with reference count incremented, thus early return from
    the middle of the loop requires an explicit of_node_put() to prevent
    reference count leak.
    
    To stop the reference leak, explicitly call of_node_put() before
    returning after an error occurred.
    
    Link: https://lore.kernel.org/r/20210120184810.3068794-1-kw@linux.com
    Signed-off-by: Krzysztof Wilczyński <kw@linux.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7862e6f7f981531a617fd6fdd5e0c396cab42991
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Fri Jan 15 22:24:35 2021 +0100

    PCI: xgene-msi: Fix race in installing chained irq handler
    
    [ Upstream commit a93c00e5f975f23592895b7e83f35de2d36b7633 ]
    
    Fix a race where a pending interrupt could be received and the handler
    called before the handler's data has been setup, by converting to
    irq_set_chained_handler_and_data().
    
    See also 2cf5a03cb29d ("PCI/keystone: Fix race in installing chained IRQ
    handler").
    
    Based on the mail discussion, it seems ok to drop the error handling.
    
    Link: https://lore.kernel.org/r/20210115212435.19940-3-martin@kaiser.cx
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4c3f3f271eb86e5c77b10442c0cf7132c36c51e
Author: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Date:   Fri Feb 5 04:14:52 2021 -0500

    powerpc/perf: Record counter overflow always if SAMPLE_IP is unset
    
    [ Upstream commit d137845c973147a22622cc76c7b0bc16f6206323 ]
    
    While sampling for marked events, currently we record the sample only
    if the SIAR valid bit of Sampled Instruction Event Register (SIER) is
    set. SIAR_VALID bit is used for fetching the instruction address from
    Sampled Instruction Address Register(SIAR). But there are some
    usecases, where the user is interested only in the PMU stats at each
    counter overflow and the exact IP of the overflow event is not
    required. Dropping SIAR invalid samples will fail to record some of
    the counter overflows in such cases.
    
    Example of such usecase is dumping the PMU stats (event counts) after
    some regular amount of instructions/events from the userspace (ex: via
    ptrace). Here counter overflow is indicated to userspace via signal
    handler, and captured by monitoring and enabling I/O signaling on the
    event file descriptor. In these cases, we expect to get
    sample/overflow indication after each specified sample_period.
    
    Perf event attribute will not have PERF_SAMPLE_IP set in the
    sample_type if exact IP of the overflow event is not requested. So
    while profiling if SAMPLE_IP is not set, just record the counter
    overflow irrespective of SIAR_VALID check.
    
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    [mpe: Reflow comment and if formatting]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1612516492-1428-1-git-send-email-atrajeev@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c90449e581609e87d08934ae7af5a184f13f8a15
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Sat Jan 30 23:08:35 2021 +1000

    powerpc: improve handling of unrecoverable system reset
    
    [ Upstream commit 11cb0a25f71818ca7ab4856548ecfd83c169aa4d ]
    
    If an unrecoverable system reset hits in process context, the system
    does not have to panic. Similar to machine check, call nmi_exit()
    before die().
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210130130852.2952424-26-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f85e52124fa4ebae8350b5436fa7651115d9dd5a
Author: Chaotian Jing <chaotian.jing@mediatek.com>
Date:   Fri Dec 18 15:16:11 2020 +0800

    mmc: mediatek: fix race condition between msdc_request_timeout and irq
    
    [ Upstream commit 0354ca6edd464a2cf332f390581977b8699ed081 ]
    
    when get request SW timeout, if CMD/DAT xfer done irq coming right now,
    then there is race between the msdc_request_timeout work and irq handler,
    and the host->cmd and host->data may set to NULL in irq handler. also,
    current flow ensure that only one path can go to msdc_request_done(), so
    no need check the return value of cancel_delayed_work().
    
    Signed-off-by: Chaotian Jing <chaotian.jing@mediatek.com>
    Link: https://lore.kernel.org/r/20201218071611.12276-1-chaotian.jing@mediatek.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ecc06cb10c36e554914893d8fb777a915bf083f6
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Dec 8 21:35:27 2020 +0100

    mmc: mxs-mmc: Fix a resource leak in an error handling path in 'mxs_mmc_probe()'
    
    [ Upstream commit 0bb7e560f821c7770973a94e346654c4bdccd42c ]
    
    If 'mmc_of_parse()' fails, we must undo the previous 'dma_request_chan()'
    call.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201208203527.49262-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1408477b5061623c47e688ca826ba2736bfe3a89
Author: Steven J. Magnani <magnani@ieee.org>
Date:   Thu Jan 7 17:41:16 2021 -0600

    udf: fix silent AED tagLocation corruption
    
    [ Upstream commit 63c9e47a1642fc817654a1bc18a6ec4bbcc0f056 ]
    
    When extending a file, udf_do_extend_file() may enter following empty
    indirect extent. At the end of udf_do_extend_file() we revert prev_epos
    to point to the last written extent. However if we end up not adding any
    further extent in udf_do_extend_file(), the reverting points prev_epos
    into the header area of the AED and following updates of the extents
    (in udf_update_extents()) will corrupt the header.
    
    Make sure that we do not follow indirect extent if we are not going to
    add any more extents so that returning back to the last written extent
    works correctly.
    
    Link: https://lore.kernel.org/r/20210107234116.6190-2-magnani@ieee.org
    Signed-off-by: Steven J. Magnani <magnani@ieee.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66f48eee0c7c44759d60587ed7e97f28b187543e
Author: Guangbin Huang <huangguangbin2@huawei.com>
Date:   Sat Feb 27 11:05:58 2021 +0800

    net: phy: fix save wrong speed and duplex problem if autoneg is on
    
    [ Upstream commit d9032dba5a2b2bbf0fdce67c8795300ec9923b43 ]
    
    If phy uses generic driver and autoneg is on, enter command
    "ethtool -s eth0 speed 50" will not change phy speed actually, but
    command "ethtool eth0" shows speed is 50Mb/s because phydev->speed
    has been set to 50 and no update later.
    
    And duplex setting has same problem too.
    
    However, if autoneg is on, phy only changes speed and duplex according to
    phydev->advertising, but not phydev->speed and phydev->duplex. So in this
    case, phydev->speed and phydev->duplex don't need to be set in function
    phy_ethtool_ksettings_set() if autoneg is on.
    
    Fixes: 51e2a3846eab ("PHY: Avoid unnecessary aneg restarts")
    Signed-off-by: Guangbin Huang <huangguangbin2@huawei.com>
    Signed-off-by: Huazhong Tan <tanhuazhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f242bd6094a75efa92596ed1cecf9189926c060d
Author: Maxim Mikityanskiy <maxtram95@gmail.com>
Date:   Fri Feb 5 23:51:39 2021 +0100

    media: usbtv: Fix deadlock on suspend
    
    commit 8a7e27fd5cd696ba564a3f62cedef7269cfd0723 upstream.
    
    usbtv doesn't support power management, so on system suspend the
    .disconnect callback of the driver is called. The teardown sequence
    includes a call to snd_card_free. Its implementation waits until the
    refcount of the sound card device drops to zero, however, if its file is
    open, snd_card_file_add takes a reference, which can't be dropped during
    the suspend, because the userspace processes are already frozen at this
    point. snd_card_free waits for completion forever, leading to a hang on
    suspend.
    
    This commit fixes this deadlock condition by replacing snd_card_free
    with snd_card_free_when_closed, that doesn't wait until all references
    are released, allowing suspend to progress.
    
    Fixes: 63ddf68de52e ("[media] usbtv: add audio support")
    Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61524fb649cfa6bb9ca6d2cc2e813c2210f71543
Author: Eric Farman <farman@linux.ibm.com>
Date:   Mon Mar 1 19:33:24 2021 +0100

    s390/cio: return -EFAULT if copy_to_user() fails
    
    commit d9c48a948d29bcb22f4fe61a81b718ef6de561a0 upstream.
    
    Fixes: 120e214e504f ("vfio: ccw: realize VFIO_DEVICE_G(S)ET_IRQ_INFO ioctls")
    Signed-off-by: Eric Farman <farman@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2837160919764b75c43788747da35d9bc5ee5c23
Author: Artem Lapkin <art@khadas.com>
Date:   Tue Mar 2 12:22:02 2021 +0800

    drm: meson_drv add shutdown function
    
    commit fa0c16caf3d73ab4d2e5d6fa2ef2394dbec91791 upstream.
    
    Problem: random stucks on reboot stage about 1/20 stuck/reboots
    // debug kernel log
    [    4.496660] reboot: kernel restart prepare CMD:(null)
    [    4.498114] meson_ee_pwrc c883c000.system-controller:power-controller: shutdown begin
    [    4.503949] meson_ee_pwrc c883c000.system-controller:power-controller: shutdown domain 0:VPU...
    ...STUCK...
    
    Solution: add shutdown function to meson_drm driver
    // debug kernel log
    [    5.231896] reboot: kernel restart prepare CMD:(null)
    [    5.246135] [drm:meson_drv_shutdown]
    ...
    [    5.259271] meson_ee_pwrc c883c000.system-controller:power-controller: shutdown begin
    [    5.274688] meson_ee_pwrc c883c000.system-controller:power-controller: shutdown domain 0:VPU...
    [    5.338331] reboot: Restarting system
    [    5.358293] psci: PSCI_0_2_FN_SYSTEM_RESET reboot_mode:0 cmd:(null)
    bl31 reboot reason: 0xd
    bl31 reboot reason: 0x0
    system cmd  1.
    ...REBOOT...
    
    Tested: on VIM1 VIM2 VIM3 VIM3L khadas sbcs - 1000+ successful reboots
    and Odroid boards, WeTek Play2 (GXBB)
    
    Fixes: bbbe775ec5b5 ("drm: Add support for Amlogic Meson Graphic Controller")
    Signed-off-by: Artem Lapkin <art@khadas.com>
    Tested-by: Christian Hewitt <christianshewitt@gmail.com>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Acked-by: Kevin Hilman <khilman@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210302042202.3728113-1-art@khadas.com
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbf2ae78dc2efb35d641a2c12b4e560ae795603e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Feb 22 11:06:43 2021 +0100

    drm/compat: Clear bounce structures
    
    commit de066e116306baf3a6a62691ac63cfc0b1dabddb upstream.
    
    Some of them have gaps, or fields we don't clear. Native ioctl code
    does full copies plus zero-extends on size mismatch, so nothing can
    leak. But compat is more hand-rolled so need to be careful.
    
    None of these matter for performance, so just memset.
    
    Also I didn't fix up the CONFIG_DRM_LEGACY or CONFIG_DRM_AGP ioctl, those
    are security holes anyway.
    
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Reported-by: syzbot+620cf21140fc7e772a5d@syzkaller.appspotmail.com # vblank ioctl
    Cc: syzbot+620cf21140fc7e772a5d@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210222100643.400935-1-daniel.vetter@ffwll.ch
    (cherry picked from commit e926c474ebee404441c838d18224cd6f246a71b7)
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0880ac646201837fbf5628b97755db63764f0f0
Author: Wang Qing <wangqing@vivo.com>
Date:   Mon Mar 1 20:01:33 2021 +0800

    s390/cio: return -EFAULT if copy_to_user() fails again
    
    commit 51c44babdc19aaf882e1213325a0ba291573308f upstream.
    
    The copy_to_user() function returns the number of bytes remaining to be
    copied, but we want to return -EFAULT if the copy doesn't complete.
    
    Fixes: e01bcdd61320 ("vfio: ccw: realize VFIO_DEVICE_GET_REGION_INFO ioctl")
    Signed-off-by: Wang Qing <wangqing@vivo.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Link: https://lore.kernel.org/r/1614600093-13992-1-git-send-email-wangqing@vivo.com
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53a7dccdc2a9c94e07fd5ac2b276b63e49f2697a
Author: Ian Rogers <irogers@google.com>
Date:   Fri Feb 26 14:14:31 2021 -0800

    perf traceevent: Ensure read cmdlines are null terminated.
    
    commit 137a5258939aca56558f3a23eb229b9c4b293917 upstream.
    
    Issue detected by address sanitizer.
    
    Fixes: cd4ceb63438e9e28 ("perf util: Save pid-cmdline mapping into tracing header")
    Signed-off-by: Ian Rogers <irogers@google.com>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20210226221431.1985458-1-irogers@google.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db822eac7352a415e8f63e8f297feb1ba0c45a03
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Thu Feb 25 17:01:10 2021 +0800

    net: stmmac: stop each tx channel independently
    
    commit a3e860a83397bf761ec1128a3f0ba186445992c6 upstream.
    
    If clear GMAC_CONFIG_TE bit, it would stop all tx channels, but users
    may only want to stop specific tx channel.
    
    Fixes: 48863ce5940f ("stmmac: add DMA support for GMAC 4.xx")
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f91b70844926fa4be4d18941081564183c4670ff
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sun Mar 7 13:17:48 2021 +0000

    net: davicom: Fix regulator not turned off on driver removal
    
    commit cf9e60aa69ae6c40d3e3e4c94dd6c8de31674e9b upstream.
    
    We must disable the regulator that was enabled in the probe function.
    
    Fixes: 7994fe55a4a2 ("dm9000: Add regulator and reset support to dm9000")
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a80ae7f7d42db99bb0d3b4256dccd9f1aee88766
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sun Mar 7 13:17:47 2021 +0000

    net: davicom: Fix regulator not turned off on failed probe
    
    commit ac88c531a5b38877eba2365a3f28f0c8b513dc33 upstream.
    
    When the probe fails or requests to be defered, we must disable the
    regulator that was previously enabled.
    
    Fixes: 7994fe55a4a2 ("dm9000: Add regulator and reset support to dm9000")
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90ec1edd2bff04f489f09f14afc25a4920766980
Author: Xie He <xie.he.0141@gmail.com>
Date:   Sun Mar 7 03:33:07 2021 -0800

    net: lapbether: Remove netif_start_queue / netif_stop_queue
    
    commit f7d9d4854519fdf4d45c70a4d953438cd88e7e58 upstream.
    
    For the devices in this driver, the default qdisc is "noqueue",
    because their "tx_queue_len" is 0.
    
    In function "__dev_queue_xmit" in "net/core/dev.c", devices with the
    "noqueue" qdisc are specially handled. Packets are transmitted without
    being queued after a "dev->flags & IFF_UP" check. However, it's possible
    that even if this check succeeds, "ops->ndo_stop" may still have already
    been called. This is because in "__dev_close_many", "ops->ndo_stop" is
    called before clearing the "IFF_UP" flag.
    
    If we call "netif_stop_queue" in "ops->ndo_stop", then it's possible in
    "__dev_queue_xmit", it sees the "IFF_UP" flag is present, and then it
    checks "netif_xmit_stopped" and finds that the queue is already stopped.
    In this case, it will complain that:
    "Virtual device ... asks to queue packet!"
    
    To prevent "__dev_queue_xmit" from generating this complaint, we should
    not call "netif_stop_queue" in "ops->ndo_stop".
    
    We also don't need to call "netif_start_queue" in "ops->ndo_open",
    because after a netdev is allocated and registered, the
    "__QUEUE_STATE_DRV_XOFF" flag is initially not set, so there is no need
    to call "netif_start_queue" to clear it.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19e73e7cf70714e9f771329b68c798ff40aeced8
Author: Paul Moore <paul@paul-moore.com>
Date:   Thu Mar 4 16:29:51 2021 -0500

    cipso,calipso: resolve a number of problems with the DOI refcounts
    
    commit ad5d07f4a9cd671233ae20983848874731102c08 upstream.
    
    The current CIPSO and CALIPSO refcounting scheme for the DOI
    definitions is a bit flawed in that we:
    
    1. Don't correctly match gets/puts in netlbl_cipsov4_list().
    2. Decrement the refcount on each attempt to remove the DOI from the
       DOI list, only removing it from the list once the refcount drops
       to zero.
    
    This patch fixes these problems by adding the missing "puts" to
    netlbl_cipsov4_list() and introduces a more conventional, i.e.
    not-buggy, refcounting mechanism to the DOI definitions.  Upon the
    addition of a DOI to the DOI list, it is initialized with a refcount
    of one, removing a DOI from the list removes it from the list and
    drops the refcount by one; "gets" and "puts" behave as expected with
    respect to refcounts, increasing and decreasing the DOI's refcount by
    one.
    
    Fixes: b1edeb102397 ("netlabel: Replace protocol/NetLabel linking with refrerence counts")
    Fixes: d7cce01504a0 ("netlabel: Add support for removing a CALIPSO DOI.")
    Reported-by: syzbot+9ec037722d2603a9f52e@syzkaller.appspotmail.com
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 702bfac82ac7c9ee3607602ee96c2597be7de665
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Thu Mar 4 14:15:13 2021 +0100

    net: usb: qmi_wwan: allow qmimux add/del with master up
    
    commit 6c59cff38e66584ae3ac6c2f0cbd8d039c710ba7 upstream.
    
    There's no reason for preventing the creation and removal
    of qmimux network interfaces when the underlying interface
    is up.
    
    This makes qmi_wwan mux implementation more similar to the
    rmnet one, simplifying userspace management of the same
    logical interfaces.
    
    Fixes: c6adf77953bc ("net: usb: qmi_wwan: add qmap mux protocol support")
    Reported-by: Aleksander Morgado <aleksander@aleksander.es>
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4be78894e60732f2627767fa5b8e09e735adcd8e
Author: Maximilian Heyne <mheyne@amazon.de>
Date:   Thu Mar 4 14:43:17 2021 +0000

    net: sched: avoid duplicates in classes dump
    
    commit bfc2560563586372212b0a8aeca7428975fa91fe upstream.
    
    This is a follow up of commit ea3274695353 ("net: sched: avoid
    duplicates in qdisc dump") which has fixed the issue only for the qdisc
    dump.
    
    The duplicate printing also occurs when dumping the classes via
      tc class show dev eth0
    
    Fixes: 59cc1f61f09c ("net: sched: convert qdisc linked list to hashtable")
    Signed-off-by: Maximilian Heyne <mheyne@amazon.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3182fae728ef87fa5804f357c48b5b80b698f2ff
Author: Ong Boon Leong <boon.leong.ong@intel.com>
Date:   Wed Mar 3 20:38:40 2021 +0530

    net: stmmac: fix incorrect DMA channel intr enable setting of EQoS v4.10
    
    commit 879c348c35bb5fb758dd881d8a97409c1862dae8 upstream.
    
    We introduce dwmac410_dma_init_channel() here for both EQoS v4.10 and
    above which use different DMA_CH(n)_Interrupt_Enable bit definitions for
    NIE and AIE.
    
    Fixes: 48863ce5940f ("stmmac: add DMA support for GMAC 4.xx")
    Signed-off-by: Ong Boon Leong <boon.leong.ong@intel.com>
    Signed-off-by: Ramesh Babu B <ramesh.babu.b@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8327dc159dcbd8fe217bc83e4cb2b03ba6bfd6b
Author: Kevin(Yudong) Yang <yyd@google.com>
Date:   Wed Mar 3 09:43:54 2021 -0500

    net/mlx4_en: update moderation when config reset
    
    commit 00ff801bb8ce6711e919af4530b6ffa14a22390a upstream.
    
    This patch fixes a bug that the moderation config will not be
    applied when calling mlx4_en_reset_config. For example, when
    turning on rx timestamping, mlx4_en_reset_config() will be called,
    causing the NIC to forget previous moderation config.
    
    This fix is in phase with a previous fix:
    commit 79c54b6bbf06 ("net/mlx4_en: Fix TX moderation info loss
    after set_ringparam is called")
    
    Tested: Before this patch, on a host with NIC using mlx4, run
    netserver and stream TCP to the host at full utilization.
    $ sar -I SUM 1
                     INTR    intr/s
    14:03:56          sum  48758.00
    
    After rx hwtstamp is enabled:
    $ sar -I SUM 1
    14:10:38          sum 317771.00
    We see the moderation is not working properly and issued 7x more
    interrupts.
    
    After the patch, and turned on rx hwtstamp, the rate of interrupts
    is as expected:
    $ sar -I SUM 1
    14:52:11          sum  49332.00
    
    Fixes: 79c54b6bbf06 ("net/mlx4_en: Fix TX moderation info loss after set_ringparam is called")
    Signed-off-by: Kevin(Yudong) Yang <yyd@google.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Neal Cardwell <ncardwell@google.com>
    CC: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 180c40af0fe7dda2cc5ac33666c12c0991a308c2
Author: Sergey Shtylyov <s.shtylyov@omprussia.ru>
Date:   Sun Feb 28 23:25:43 2021 +0300

    sh_eth: fix TRSCER mask for SH771x
    
    commit 8c91bc3d44dfef8284af384877fbe61117e8b7d1 upstream.
    
    According  to  the SH7710, SH7712, SH7713 Group User's Manual: Hardware,
    Rev. 3.00, the TRSCER register actually has only bit 7 valid (and named
    differently), with all the other bits reserved. Apparently, this was not
    the case with some early revisions of the manual as we have the other
    bits declared (and set) in the original driver.  Follow the suit and add
    the explicit sh_eth_cpu_data::trscer_err_mask initializer for SH771x...
    
    Fixes: 86a74ff21a7a ("net: sh_eth: add support for Renesas SuperH Ethernet")
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omprussia.ru>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ebd68f7306ff0ab6521a58b0ea73eefb41c8cb2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 10 10:18:04 2021 -0800

    Revert "mm, slub: consider rest of partial list if acquire_slab() fails"
    
    commit 9b1ea29bc0d7b94d420f96a0f4121403efc3dd85 upstream.
    
    This reverts commit 8ff60eb052eeba95cfb3efe16b08c9199f8121cf.
    
    The kernel test robot reports a huge performance regression due to the
    commit, and the reason seems fairly straightforward: when there is
    contention on the page list (which is what causes acquire_slab() to
    fail), we do _not_ want to just loop and try again, because that will
    transfer the contention to the 'n->list_lock' spinlock we hold, and
    just make things even worse.
    
    This is admittedly likely a problem only on big machines - the kernel
    test robot report comes from a 96-thread dual socket Intel Xeon Gold
    6252 setup, but the regression there really is quite noticeable:
    
       -47.9% regression of stress-ng.rawpkt.ops_per_sec
    
    and the commit that was marked as being fixed (7ced37197196: "slub:
    Acquire_slab() avoid loop") actually did the loop exit early very
    intentionally (the hint being that "avoid loop" part of that commit
    message), exactly to avoid this issue.
    
    The correct thing to do may be to pick some kind of reasonable middle
    ground: instead of breaking out of the loop on the very first sign of
    contention, or trying over and over and over again, the right thing may
    be to re-try _once_, and then give up on the second failure (or pick
    your favorite value for "once"..).
    
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Link: https://lore.kernel.org/lkml/20210301080404.GF12822@xsang-OptiPlex-9020/
    Cc: Jann Horn <jannh@google.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Acked-by: Christoph Lameter <cl@linux.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8893610b73aa2ca8abb09192d3036fdeaa252ae7
Author: Joe Lawrence <joe.lawrence@redhat.com>
Date:   Tue Nov 20 15:19:18 2018 -0500

    scripts/recordmcount.{c,pl}: support -ffunction-sections .text.* section names
    
    commit 9c8e2f6d3d361439cc6744a094f1c15681b55269 upstream.
    
    When building with -ffunction-sections, the compiler will place each
    function into its own ELF section, prefixed with ".text".  For example,
    a simple test module with functions test_module_do_work() and
    test_module_wq_func():
    
      % objdump --section-headers test_module.o | awk '/\.text/{print $2}'
      .text
      .text.test_module_do_work
      .text.test_module_wq_func
      .init.text
      .exit.text
    
    Adjust the recordmcount scripts to look for ".text" as a section name
    prefix.  This will ensure that those functions will be included in the
    __mcount_loc relocations:
    
      % objdump --reloc --section __mcount_loc test_module.o
      OFFSET           TYPE              VALUE
      0000000000000000 R_X86_64_64       .text.test_module_do_work
      0000000000000008 R_X86_64_64       .text.test_module_wq_func
      0000000000000010 R_X86_64_64       .init.text
    
    Link: http://lkml.kernel.org/r/1542745158-25392-2-git-send-email-joe.lawrence@redhat.com
    
    Signed-off-by: Joe Lawrence <joe.lawrence@redhat.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Manoj Gupta <manojgupta@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c94f4ced4d19d790d16213ef398eeb3fca3d598
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Mon Mar 8 12:00:49 2021 -0300

    cifs: return proper error code in statfs(2)
    
    commit 14302ee3301b3a77b331cc14efb95bf7184c73cc upstream.
    
    In cifs_statfs(), if server->ops->queryfs is not NULL, then we should
    use its return value rather than always returning 0.  Instead, use rc
    variable as it is properly set to 0 in case there is no
    server->ops->queryfs.
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1eb88919b1ed2bc808cc5a001430686f31fc0dcc
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Sat Feb 27 11:27:45 2021 +0300

    netfilter: x_tables: gpf inside xt_find_revision()
    
    commit 8e24edddad152b998b37a7f583175137ed2e04a5 upstream.
    
    nested target/match_revfn() calls work with xt[NFPROTO_UNSPEC] lists
    without taking xt[NFPROTO_UNSPEC].mutex. This can race with module unload
    and cause host to crash:
    
    general protection fault: 0000 [#1]
    Modules linked in: ... [last unloaded: xt_cluster]
    CPU: 0 PID: 542455 Comm: iptables
    RIP: 0010:[<ffffffff8ffbd518>]  [<ffffffff8ffbd518>] strcmp+0x18/0x40
    RDX: 0000000000000003 RSI: ffff9a5a5d9abe10 RDI: dead000000000111
    R13: ffff9a5a5d9abe10 R14: ffff9a5a5d9abd8c R15: dead000000000100
    (VvS: %R15 -- &xt_match,  %RDI -- &xt_match.name,
    xt_cluster unregister match in xt[NFPROTO_UNSPEC].match list)
    Call Trace:
     [<ffffffff902ccf44>] match_revfn+0x54/0xc0
     [<ffffffff902ccf9f>] match_revfn+0xaf/0xc0
     [<ffffffff902cd01e>] xt_find_revision+0x6e/0xf0
     [<ffffffffc05a5be0>] do_ipt_get_ctl+0x100/0x420 [ip_tables]
     [<ffffffff902cc6bf>] nf_getsockopt+0x4f/0x70
     [<ffffffff902dd99e>] ip_getsockopt+0xde/0x100
     [<ffffffff903039b5>] raw_getsockopt+0x25/0x50
     [<ffffffff9026c5da>] sock_common_getsockopt+0x1a/0x20
     [<ffffffff9026b89d>] SyS_getsockopt+0x7d/0xf0
     [<ffffffff903cbf92>] system_call_fastpath+0x25/0x2a
    
    Fixes: 656caff20e1 ("netfilter 04/09: x_tables: fix match/target revision lookup")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4d7f8b99c3aaa737fd0a227a995aea4ce99ba00
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Thu Feb 18 19:00:36 2021 +0800

    can: flexcan: enable RX FIFO after FRZ/HALT valid
    
    commit ec15e27cc8904605846a354bb1f808ea1432f853 upstream.
    
    RX FIFO enable failed could happen when do system reboot stress test:
    
    [    0.303958] flexcan 5a8d0000.can: 5a8d0000.can supply xceiver not found, using dummy regulator
    [    0.304281] flexcan 5a8d0000.can (unnamed net_device) (uninitialized): Could not enable RX FIFO, unsupported core
    [    0.314640] flexcan 5a8d0000.can: registering netdev failed
    [    0.320728] flexcan 5a8e0000.can: 5a8e0000.can supply xceiver not found, using dummy regulator
    [    0.320991] flexcan 5a8e0000.can (unnamed net_device) (uninitialized): Could not enable RX FIFO, unsupported core
    [    0.331360] flexcan 5a8e0000.can: registering netdev failed
    [    0.337444] flexcan 5a8f0000.can: 5a8f0000.can supply xceiver not found, using dummy regulator
    [    0.337716] flexcan 5a8f0000.can (unnamed net_device) (uninitialized): Could not enable RX FIFO, unsupported core
    [    0.348117] flexcan 5a8f0000.can: registering netdev failed
    
    RX FIFO should be enabled after the FRZ/HALT are valid. But the current
    code enable RX FIFO and FRZ/HALT at the same time.
    
    Fixes: e955cead03117 ("CAN: Add Flexcan CAN controller driver")
    Link: https://lore.kernel.org/r/20210218110037.16591-3-qiangqing.zhang@nxp.com
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3755cf17b85895fb5a5ce8760b3a9fcbcd74c471
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Thu Feb 18 19:00:35 2021 +0800

    can: flexcan: assert FRZ bit in flexcan_chip_freeze()
    
    commit 449052cfebf624b670faa040245d3feed770d22f upstream.
    
    Assert HALT bit to enter freeze mode, there is a premise that FRZ bit is
    asserted. This patch asserts FRZ bit in flexcan_chip_freeze, although
    the reset value is 1b'1. This is a prepare patch, later patch will
    invoke flexcan_chip_freeze() to enter freeze mode, which polling freeze
    mode acknowledge.
    
    Fixes: b1aa1c7a2165b ("can: flexcan: fix transition from and to freeze mode in chip_{,un}freeze")
    Link: https://lore.kernel.org/r/20210218110037.16591-2-qiangqing.zhang@nxp.com
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fa3fa641f57d84b70c5f45e38a120324b5b6080
Author: Oleksij Rempel <o.rempel@pengutronix.de>
Date:   Fri Feb 26 10:24:56 2021 +0100

    can: skb: can_skb_set_owner(): fix ref counting if socket was closed before setting skb ownership
    
    commit e940e0895a82c6fbaa259f2615eb52b57ee91a7e upstream.
    
    There are two ref count variables controlling the free()ing of a socket:
    - struct sock::sk_refcnt - which is changed by sock_hold()/sock_put()
    - struct sock::sk_wmem_alloc - which accounts the memory allocated by
      the skbs in the send path.
    
    In case there are still TX skbs on the fly and the socket() is closed,
    the struct sock::sk_refcnt reaches 0. In the TX-path the CAN stack
    clones an "echo" skb, calls sock_hold() on the original socket and
    references it. This produces the following back trace:
    
    | WARNING: CPU: 0 PID: 280 at lib/refcount.c:25 refcount_warn_saturate+0x114/0x134
    | refcount_t: addition on 0; use-after-free.
    | Modules linked in: coda_vpu(E) v4l2_jpeg(E) videobuf2_vmalloc(E) imx_vdoa(E)
    | CPU: 0 PID: 280 Comm: test_can.sh Tainted: G            E     5.11.0-04577-gf8ff6603c617 #203
    | Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
    | Backtrace:
    | [<80bafea4>] (dump_backtrace) from [<80bb0280>] (show_stack+0x20/0x24) r7:00000000 r6:600f0113 r5:00000000 r4:81441220
    | [<80bb0260>] (show_stack) from [<80bb593c>] (dump_stack+0xa0/0xc8)
    | [<80bb589c>] (dump_stack) from [<8012b268>] (__warn+0xd4/0x114) r9:00000019 r8:80f4a8c2 r7:83e4150c r6:00000000 r5:00000009 r4:80528f90
    | [<8012b194>] (__warn) from [<80bb09c4>] (warn_slowpath_fmt+0x88/0xc8) r9:83f26400 r8:80f4a8d1 r7:00000009 r6:80528f90 r5:00000019 r4:80f4a8c2
    | [<80bb0940>] (warn_slowpath_fmt) from [<80528f90>] (refcount_warn_saturate+0x114/0x134) r8:00000000 r7:00000000 r6:82b44000 r5:834e5600 r4:83f4d540
    | [<80528e7c>] (refcount_warn_saturate) from [<8079a4c8>] (__refcount_add.constprop.0+0x4c/0x50)
    | [<8079a47c>] (__refcount_add.constprop.0) from [<8079a57c>] (can_put_echo_skb+0xb0/0x13c)
    | [<8079a4cc>] (can_put_echo_skb) from [<8079ba98>] (flexcan_start_xmit+0x1c4/0x230) r9:00000010 r8:83f48610 r7:0fdc0000 r6:0c080000 r5:82b44000 r4:834e5600
    | [<8079b8d4>] (flexcan_start_xmit) from [<80969078>] (netdev_start_xmit+0x44/0x70) r9:814c0ba0 r8:80c8790c r7:00000000 r6:834e5600 r5:82b44000 r4:82ab1f00
    | [<80969034>] (netdev_start_xmit) from [<809725a4>] (dev_hard_start_xmit+0x19c/0x318) r9:814c0ba0 r8:00000000 r7:82ab1f00 r6:82b44000 r5:00000000 r4:834e5600
    | [<80972408>] (dev_hard_start_xmit) from [<809c6584>] (sch_direct_xmit+0xcc/0x264) r10:834e5600 r9:00000000 r8:00000000 r7:82b44000 r6:82ab1f00 r5:834e5600 r4:83f27400
    | [<809c64b8>] (sch_direct_xmit) from [<809c6c0c>] (__qdisc_run+0x4f0/0x534)
    
    To fix this problem, only set skb ownership to sockets which have still
    a ref count > 0.
    
    Fixes: 0ae89beb283a ("can: add destructor for self generated skbs")
    Cc: Oliver Hartkopp <socketcan@hartkopp.net>
    Cc: Andre Naujoks <nautsch2@gmail.com>
    Link: https://lore.kernel.org/r/20210226092456.27126-1-o.rempel@pengutronix.de
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Reviewed-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 020f47053ee5f2384714d795aba22156542ab940
Author: Balazs Nemeth <bnemeth@redhat.com>
Date:   Tue Mar 9 12:31:01 2021 +0100

    net: avoid infinite loop in mpls_gso_segment when mpls_hlen == 0
    
    commit d348ede32e99d3a04863e9f9b28d224456118c27 upstream.
    
    A packet with skb_inner_network_header(skb) == skb_network_header(skb)
    and ETH_P_MPLS_UC will prevent mpls_gso_segment from pulling any headers
    from the packet. Subsequently, the call to skb_mac_gso_segment will
    again call mpls_gso_segment with the same packet leading to an infinite
    loop. In addition, ensure that the header length is a multiple of four,
    which should hold irrespective of the number of stacked labels.
    
    Signed-off-by: Balazs Nemeth <bnemeth@redhat.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81995201deb0a6a66a324c824774d9b7427aee40
Author: Balazs Nemeth <bnemeth@redhat.com>
Date:   Tue Mar 9 12:31:00 2021 +0100

    net: check if protocol extracted by virtio_net_hdr_set_proto is correct
    
    commit 924a9bc362a5223cd448ca08c3dde21235adc310 upstream.
    
    For gso packets, virtio_net_hdr_set_proto sets the protocol (if it isn't
    set) based on the type in the virtio net hdr, but the skb could contain
    anything since it could come from packet_snd through a raw socket. If
    there is a mismatch between what virtio_net_hdr_set_proto sets and
    the actual protocol, then the skb could be handled incorrectly later
    on.
    
    An example where this poses an issue is with the subsequent call to
    skb_flow_dissect_flow_keys_basic which relies on skb->protocol being set
    correctly. A specially crafted packet could fool
    skb_flow_dissect_flow_keys_basic preventing EINVAL to be returned.
    
    Avoid blindly trusting the information provided by the virtio net header
    by checking that the protocol in the packet actually matches the
    protocol set by virtio_net_hdr_set_proto. Note that since the protocol
    is only checked if skb->dev implements header_ops->parse_protocol,
    packets from devices without the implementation are not checked at this
    stage.
    
    Fixes: 9274124f023b ("net: stricter validation of untrusted gso packets")
    Signed-off-by: Balazs Nemeth <bnemeth@redhat.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b7fff671f0e6a7bf514ca9abe454275c36f22e8
Author: Maxim Mikityanskiy <maximmi@mellanox.com>
Date:   Thu Feb 21 12:39:58 2019 +0000

    net: Introduce parse_protocol header_ops callback
    
    commit e78b2915517e8fcadb1bc130ad6aeac7099e510c upstream.
    
    Introduce a new optional header_ops callback called parse_protocol and a
    wrapper function dev_parse_header_protocol, similar to dev_parse_header.
    
    The new callback's purpose is to extract the protocol number from the L2
    header, the format of which is known to the driver, but not to the upper
    layers of the stack.
    
    Signed-off-by: Maxim Mikityanskiy <maximmi@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a0a8506e330928da4001b130f1c589c1e2c8f6e
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Fri Feb 26 22:22:48 2021 +0100

    net: Fix gro aggregation for udp encaps with zero csum
    
    commit 89e5c58fc1e2857ccdaae506fb8bc5fed57ee063 upstream.
    
    We noticed a GRO issue for UDP-based encaps such as vxlan/geneve when the
    csum for the UDP header itself is 0. In that case, GRO aggregation does
    not take place on the phys dev, but instead is deferred to the vxlan/geneve
    driver (see trace below).
    
    The reason is essentially that GRO aggregation bails out in udp_gro_receive()
    for such case when drivers marked the skb with CHECKSUM_UNNECESSARY (ice, i40e,
    others) where for non-zero csums 2abb7cdc0dc8 ("udp: Add support for doing
    checksum unnecessary conversion") promotes those skbs to CHECKSUM_COMPLETE
    and napi context has csum_valid set. This is however not the case for zero
    UDP csum (here: csum_cnt is still 0 and csum_valid continues to be false).
    
    At the same time 57c67ff4bd92 ("udp: additional GRO support") added matches
    on !uh->check ^ !uh2->check as part to determine candidates for aggregation,
    so it certainly is expected to handle zero csums in udp_gro_receive(). The
    purpose of the check added via 662880f44203 ("net: Allow GRO to use and set
    levels of checksum unnecessary") seems to catch bad csum and stop aggregation
    right away.
    
    One way to fix aggregation in the zero case is to only perform the !csum_valid
    check in udp_gro_receive() if uh->check is infact non-zero.
    
    Before:
    
      [...]
      swapper     0 [008]   731.946506: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100400 len=1500   (1)
      swapper     0 [008]   731.946507: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100200 len=1500
      swapper     0 [008]   731.946507: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101100 len=1500
      swapper     0 [008]   731.946508: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101700 len=1500
      swapper     0 [008]   731.946508: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101b00 len=1500
      swapper     0 [008]   731.946508: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100600 len=1500
      swapper     0 [008]   731.946508: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100f00 len=1500
      swapper     0 [008]   731.946509: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100a00 len=1500
      swapper     0 [008]   731.946516: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100500 len=1500
      swapper     0 [008]   731.946516: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100700 len=1500
      swapper     0 [008]   731.946516: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101d00 len=1500   (2)
      swapper     0 [008]   731.946517: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101000 len=1500
      swapper     0 [008]   731.946517: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101c00 len=1500
      swapper     0 [008]   731.946517: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101400 len=1500
      swapper     0 [008]   731.946518: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100e00 len=1500
      swapper     0 [008]   731.946518: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497101600 len=1500
      swapper     0 [008]   731.946521: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff966497100800 len=774
      swapper     0 [008]   731.946530: net:netif_receive_skb: dev=test_vxlan skbaddr=0xffff966497100400 len=14032 (1)
      swapper     0 [008]   731.946530: net:netif_receive_skb: dev=test_vxlan skbaddr=0xffff966497101d00 len=9112  (2)
      [...]
    
      # netperf -H 10.55.10.4 -t TCP_STREAM -l 20
      MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 10.55.10.4 () port 0 AF_INET : demo
      Recv   Send    Send
      Socket Socket  Message  Elapsed
      Size   Size    Size     Time     Throughput
      bytes  bytes   bytes    secs.    10^6bits/sec
    
       87380  16384  16384    20.01    13129.24
    
    After:
    
      [...]
      swapper     0 [026]   521.862641: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff93ab0d479000 len=11286 (1)
      swapper     0 [026]   521.862643: net:netif_receive_skb: dev=test_vxlan skbaddr=0xffff93ab0d479000 len=11236 (1)
      swapper     0 [026]   521.862650: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff93ab0d478500 len=2898  (2)
      swapper     0 [026]   521.862650: net:netif_receive_skb: dev=enp10s0f0  skbaddr=0xffff93ab0d479f00 len=8490  (3)
      swapper     0 [026]   521.862653: net:netif_receive_skb: dev=test_vxlan skbaddr=0xffff93ab0d478500 len=2848  (2)
      swapper     0 [026]   521.862653: net:netif_receive_skb: dev=test_vxlan skbaddr=0xffff93ab0d479f00 len=8440  (3)
      [...]
    
      # netperf -H 10.55.10.4 -t TCP_STREAM -l 20
      MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 10.55.10.4 () port 0 AF_INET : demo
      Recv   Send    Send
      Socket Socket  Message  Elapsed
      Size   Size    Size     Time     Throughput
      bytes  bytes   bytes    secs.    10^6bits/sec
    
       87380  16384  16384    20.01    24576.53
    
    Fixes: 57c67ff4bd92 ("udp: additional GRO support")
    Fixes: 662880f44203 ("net: Allow GRO to use and set levels of checksum unnecessary")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Cc: Tom Herbert <tom@herbertland.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Acked-by: John Fastabend <john.fastabend@gmail.com>
    Link: https://lore.kernel.org/r/20210226212248.8300-1-daniel@iogearbox.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85f7f4818b4a59109223fd270708ff43bc64bb6c
Author: Felix Fietkau <nbd@nbd.name>
Date:   Sun Feb 14 19:49:11 2021 +0100

    ath9k: fix transmitting to stations in dynamic SMPS mode
    
    commit 3b9ea7206d7e1fdd7419cbd10badd3b2c80d04b4 upstream.
    
    When transmitting to a receiver in dynamic SMPS mode, all transmissions that
    use multiple spatial streams need to be sent using CTS-to-self or RTS/CTS to
    give the receiver's extra chains some time to wake up.
    This fixes the tx rate getting stuck at <= MCS7 for some clients, especially
    Intel ones, which make aggressive use of SMPS.
    
    Cc: stable@vger.kernel.org
    Reported-by: Martin Kennedy <hurricos@gmail.com>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210214184911.96702-1-nbd@nbd.name
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit feb5d261affa4afd6403ea02723f27eb13e753ae
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Mar 5 14:17:29 2021 -0800

    ethernet: alx: fix order of calls on resume
    
    commit a4dcfbc4ee2218abd567d81d795082d8d4afcdf6 upstream.
    
    netif_device_attach() will unpause the queues so we can't call
    it before __alx_open(). This went undetected until
    commit b0999223f224 ("alx: add ability to allocate and free
    alx_napi structures") but now if stack tries to xmit immediately
    on resume before __alx_open() we'll crash on the NAPI being null:
    
     BUG: kernel NULL pointer dereference, address: 0000000000000198
     CPU: 0 PID: 12 Comm: ksoftirqd/0 Tainted: G           OE 5.10.0-3-amd64 #1 Debian 5.10.13-1
     Hardware name: Gigabyte Technology Co., Ltd. To be filled by O.E.M./H77-D3H, BIOS F15 11/14/2013
     RIP: 0010:alx_start_xmit+0x34/0x650 [alx]
     Code: 41 56 41 55 41 54 55 53 48 83 ec 20 0f b7 57 7c 8b 8e b0
    0b 00 00 39 ca 72 06 89 d0 31 d2 f7 f1 89 d2 48 8b 84 df
     RSP: 0018:ffffb09240083d28 EFLAGS: 00010297
     RAX: 0000000000000000 RBX: ffffa04d80ae7800 RCX: 0000000000000004
     RDX: 0000000000000000 RSI: ffffa04d80afa000 RDI: ffffa04e92e92a00
     RBP: 0000000000000042 R08: 0000000000000100 R09: ffffa04ea3146700
     R10: 0000000000000014 R11: 0000000000000000 R12: ffffa04e92e92100
     R13: 0000000000000001 R14: ffffa04e92e92a00 R15: ffffa04e92e92a00
     FS:  0000000000000000(0000) GS:ffffa0508f600000(0000) knlGS:0000000000000000
     i915 0000:00:02.0: vblank wait timed out on crtc 0
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000198 CR3: 000000004460a001 CR4: 00000000001706f0
     Call Trace:
      dev_hard_start_xmit+0xc7/0x1e0
      sch_direct_xmit+0x10f/0x310
    
    Cc: <stable@vger.kernel.org> # 4.9+
    Fixes: bc2bebe8de8e ("alx: remove WoL support")
    Reported-by: Zbynek Michl <zbynek.michl@gmail.com>
    Link: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=983595
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Tested-by: Zbynek Michl <zbynek.michl@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bf41ab6e8b663d8a373f7df7f3bb3b10dc59483
Author: Dmitry V. Levin <ldv@altlinux.org>
Date:   Mon Feb 22 08:00:00 2021 +0000

    uapi: nfnetlink_cthelper.h: fix userspace compilation error
    
    commit c33cb0020ee6dd96cc9976d6085a7d8422f6dbed upstream.
    
    Apparently, <linux/netfilter/nfnetlink_cthelper.h> and
    <linux/netfilter/nfnetlink_acct.h> could not be included into the same
    compilation unit because of a cut-and-paste typo in the former header.
    
    Fixes: 12f7a505331e6 ("netfilter: add user-space connection tracking helper infrastructure")
    Cc: <stable@vger.kernel.org> # v3.6
    Signed-off-by: Dmitry V. Levin <ldv@altlinux.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38679365e617c4d5470a1d036d9001901e2c65f9
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Mar 11 13:51:06 2021 +0100

    Linux 4.14.225
    
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210310132320.512307035@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 917bae7c0ebbf81f4b288a46aa9e7c8daa450b0d
Author: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
Date:   Wed Jan 13 19:33:33 2021 +0100

    drm/msm/a5xx: Remove overwriting A5XX_PC_DBG_ECO_CNTL register
    
    [ Upstream commit 8f03c30cb814213e36032084a01f49a9e604a3e3 ]
    
    The PC_DBG_ECO_CNTL register on the Adreno A5xx family gets
    programmed to some different values on a per-model basis.
    At least, this is what we intend to do here;
    
    Unfortunately, though, this register is being overwritten with a
    static magic number, right after applying the GPU-specific
    configuration (including the GPU-specific quirks) and that is
    effectively nullifying the efforts.
    
    Let's remove the redundant and wrong write to the PC_DBG_ECO_CNTL
    register in order to retain the wanted configuration for the
    target GPU.
    
    Signed-off-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@somainline.org>
    Reviewed-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1d90fa8328bf18e01b807a1ec126f887d7bdc18
Author: Aswath Govindraju <a-govindraju@ti.com>
Date:   Tue Jan 5 16:28:12 2021 +0530

    misc: eeprom_93xx46: Add quirk to support Microchip 93LC46B eeprom
    
    [ Upstream commit f6f1f8e6e3eea25f539105d48166e91f0ab46dd1 ]
    
    A dummy zero bit is sent preceding the data during a read transfer by the
    Microchip 93LC46B eeprom (section 2.7 of[1]). This results in right shift
    of data during a read. In order to ignore this bit a quirk can be added to
    send an extra zero bit after the read address.
    
    Add a quirk to ignore the zero bit sent before data by adding a zero bit
    after the read address.
    
    [1] - https://www.mouser.com/datasheet/2/268/20001749K-277859.pdf
    
    Signed-off-by: Aswath Govindraju <a-govindraju@ti.com>
    Link: https://lore.kernel.org/r/20210105105817.17644-3-a-govindraju@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1e217e197f5f5fc4f108b08774fd938cbde322c
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Tue Nov 10 16:00:57 2020 -0600

    PCI: Add function 1 DMA alias quirk for Marvell 9215 SATA controller
    
    [ Upstream commit 059983790a4c963d92943e55a61fca55be427d55 ]
    
    Add function 1 DMA alias quirk for Marvell 88SS9215 PCIe SSD Controller.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=42679#c135
    Link: https://lore.kernel.org/r/20201110220516.697934-1-helgaas@kernel.org
    Reported-by: John Smith <LK7S2ED64JHGLKj75shg9klejHWG49h5hk@protonmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 413f2f1240ac522d4d5848d4482a2d95f7d9589b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 23 16:16:25 2020 +0100

    platform/x86: acer-wmi: Add ACER_CAP_KBD_DOCK quirk for the Aspire Switch 10E SW3-016
    
    [ Upstream commit bf753400280d1384abb783efc0b42c491d6deec3 ]
    
    Add the Acer Aspire Switch 10E SW3-016 to the list of models which use the
    Acer Switch WMI interface for reporting SW_TABLET_MODE.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201123151625.5530-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90d768d2e7b829c8aed49dd7b47c3c8b6a9ee29e
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 19 20:56:28 2020 +0200

    platform/x86: acer-wmi: Add support for SW_TABLET_MODE on Switch devices
    
    [ Upstream commit 5c54cb6c627e8f50f490e6b5656051a5ac29eab4 ]
    
    Add support for SW_TABLET_MODE on the Acer Switch 10 (SW5-012) and the
    acer Switch 10 (S1003) models.
    
    There is no way to detect if this is supported, so this uses DMI based
    quirks setting force_caps to ACER_CAP_KBD_DOCK (these devices have no
    other acer-wmi based functionality).
    
    The new SW_TABLET_MODE functionality can be tested on devices which
    are not in the DMI table by passing acer_wmi.force_caps=0x40 on the
    kernel commandline.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201019185628.264473-6-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7348860a832c3d87531fef48030885aeb1d29f07
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 19 20:56:27 2020 +0200

    platform/x86: acer-wmi: Add ACER_CAP_SET_FUNCTION_MODE capability flag
    
    [ Upstream commit 82cb8a5c395ea5be20e0fe31a8fe84380a502ca5 ]
    
    Not all devices supporting WMID_GUID3 support the wmid3_set_function_mode()
    call, leading to errors like these:
    
    [   60.138358] acer_wmi: Enabling RF Button failed: 0x1 - 0xff
    [   60.140036] acer_wmi: Enabling Launch Manager failed: 0x1 - 0xff
    
    Add an ACER_CAP_SET_FUNCTION_MODE capability flag, so that these calls
    can be disabled through the new force_caps mechanism.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201019185628.264473-5-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0da6993ad7ca3b5bf9fd6eb3146ca04d5afc71f8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 19 20:56:26 2020 +0200

    platform/x86: acer-wmi: Add new force_caps module parameter
    
    [ Upstream commit 39aa009bb66f9d5fbd1e58ca4aa03d6e6f2c9915 ]
    
    Add a new force_caps module parameter to allow overriding the drivers
    builtin capability detection mechanism.
    
    This can be used to for example:
    -Disable rfkill functionality on devices where there is an AA OEM DMI
     record advertising non functional rfkill switches
    -Force loading of the driver on devices with a missing AA OEM DMI record
    
    Note that force_caps is -1 when unset, this allows forcing the
    capability field to 0, which results in acer-wmi only providing WMI
    hotkey handling while disabling all other (led, rfkill, backlight)
    functionality.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201019185628.264473-4-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a67c63a5eb9fcbb33088e7c00d3051c9df97238
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 19 20:56:25 2020 +0200

    platform/x86: acer-wmi: Cleanup accelerometer device handling
    
    [ Upstream commit 9feb0763e4985ccfae632de3bb2f029cc8389842 ]
    
    Cleanup accelerometer device handling:
    -Drop acer_wmi_accel_destroy instead directly call input_unregister_device.
    -The information tracked by the CAP_ACCEL flag mirrors acer_wmi_accel_dev
     being NULL. Drop the CAP flag, this is a preparation change for allowing
     users to override the capability flags. Dropping the flag stops users
     from causing a NULL pointer dereference by forcing the capability.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201019185628.264473-3-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 687de97dc6a95315765906f04f6f7b7ad45a5c83
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 19 20:56:24 2020 +0200

    platform/x86: acer-wmi: Cleanup ACER_CAP_FOO defines
    
    [ Upstream commit 7c936d8d26afbc74deac0651d613dead2f76e81c ]
    
    Cleanup the ACER_CAP_FOO defines:
    -Switch to using BIT() macro.
    -The ACER_CAP_RFBTN flag is set, but it is never checked anywhere, drop it.
    -Drop the unused ACER_CAP_ANY define.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201019185628.264473-2-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a8c36665d5f5b1b3b84f03de343b207410748b9
Author: Tsuchiya Yuto <kitakar@gmail.com>
Date:   Wed Oct 28 23:23:46 2020 +0900

    mwifiex: pcie: skip cancel_work_sync() on reset failure path
    
    [ Upstream commit 4add4d988f95f47493500a7a19c623827061589b ]
    
    If a reset is performed, but even the reset fails for some reasons (e.g.,
    on Surface devices, the fw reset requires another quirks),
    cancel_work_sync() hangs in mwifiex_cleanup_pcie().
    
        # firmware went into a bad state
        [...]
        [ 1608.281690] mwifiex_pcie 0000:03:00.0: info: shutdown mwifiex...
        [ 1608.282724] mwifiex_pcie 0000:03:00.0: rx_pending=0, tx_pending=1,       cmd_pending=0
        [ 1608.292400] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [ 1608.292405] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        # reset performed after firmware went into a bad state
        [ 1609.394320] mwifiex_pcie 0000:03:00.0: WLAN FW already running! Skip FW dnld
        [ 1609.394335] mwifiex_pcie 0000:03:00.0: WLAN FW is active
        # but even the reset failed
        [ 1619.499049] mwifiex_pcie 0000:03:00.0: mwifiex_cmd_timeout_func: Timeout cmd id = 0xfa, act = 0xe000
        [ 1619.499094] mwifiex_pcie 0000:03:00.0: num_data_h2c_failure = 0
        [ 1619.499103] mwifiex_pcie 0000:03:00.0: num_cmd_h2c_failure = 0
        [ 1619.499110] mwifiex_pcie 0000:03:00.0: is_cmd_timedout = 1
        [ 1619.499117] mwifiex_pcie 0000:03:00.0: num_tx_timeout = 0
        [ 1619.499124] mwifiex_pcie 0000:03:00.0: last_cmd_index = 0
        [ 1619.499133] mwifiex_pcie 0000:03:00.0: last_cmd_id: fa 00 07 01 07 01 07 01 07 01
        [ 1619.499140] mwifiex_pcie 0000:03:00.0: last_cmd_act: 00 e0 00 00 00 00 00 00 00 00
        [ 1619.499147] mwifiex_pcie 0000:03:00.0: last_cmd_resp_index = 3
        [ 1619.499155] mwifiex_pcie 0000:03:00.0: last_cmd_resp_id: 07 81 07 81 07 81 07 81 07 81
        [ 1619.499162] mwifiex_pcie 0000:03:00.0: last_event_index = 2
        [ 1619.499169] mwifiex_pcie 0000:03:00.0: last_event: 58 00 58 00 58 00 58 00 58 00
        [ 1619.499177] mwifiex_pcie 0000:03:00.0: data_sent=0 cmd_sent=1
        [ 1619.499185] mwifiex_pcie 0000:03:00.0: ps_mode=0 ps_state=0
        [ 1619.499215] mwifiex_pcie 0000:03:00.0: info: _mwifiex_fw_dpc: unregister device
        # mwifiex_pcie_work hang happening
        [ 1823.233923] INFO: task kworker/3:1:44 blocked for more than 122 seconds.
        [ 1823.233932]       Tainted: G        WC OE     5.10.0-rc1-1-mainline #1
        [ 1823.233935] "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
        [ 1823.233940] task:kworker/3:1     state:D stack:    0 pid:   44 ppid:     2 flags:0x00004000
        [ 1823.233960] Workqueue: events mwifiex_pcie_work [mwifiex_pcie]
        [ 1823.233965] Call Trace:
        [ 1823.233981]  __schedule+0x292/0x820
        [ 1823.233990]  schedule+0x45/0xe0
        [ 1823.233995]  schedule_timeout+0x11c/0x160
        [ 1823.234003]  wait_for_completion+0x9e/0x100
        [ 1823.234012]  __flush_work.isra.0+0x156/0x210
        [ 1823.234018]  ? flush_workqueue_prep_pwqs+0x130/0x130
        [ 1823.234026]  __cancel_work_timer+0x11e/0x1a0
        [ 1823.234035]  mwifiex_cleanup_pcie+0x28/0xd0 [mwifiex_pcie]
        [ 1823.234049]  mwifiex_free_adapter+0x24/0xe0 [mwifiex]
        [ 1823.234060]  _mwifiex_fw_dpc+0x294/0x560 [mwifiex]
        [ 1823.234074]  mwifiex_reinit_sw+0x15d/0x300 [mwifiex]
        [ 1823.234080]  mwifiex_pcie_reset_done+0x50/0x80 [mwifiex_pcie]
        [ 1823.234087]  pci_try_reset_function+0x5c/0x90
        [ 1823.234094]  process_one_work+0x1d6/0x3a0
        [ 1823.234100]  worker_thread+0x4d/0x3d0
        [ 1823.234107]  ? rescuer_thread+0x410/0x410
        [ 1823.234112]  kthread+0x142/0x160
        [ 1823.234117]  ? __kthread_bind_mask+0x60/0x60
        [ 1823.234124]  ret_from_fork+0x22/0x30
        [...]
    
    This is a deadlock caused by calling cancel_work_sync() in
    mwifiex_cleanup_pcie():
    
    - Device resets are done via mwifiex_pcie_card_reset()
    - which schedules card->work to call mwifiex_pcie_card_reset_work()
    - which calls pci_try_reset_function().
    - This leads to mwifiex_pcie_reset_done() be called on the same workqueue,
      which in turn calls
    - mwifiex_reinit_sw() and that calls
    - _mwifiex_fw_dpc().
    
    The problem is now that _mwifiex_fw_dpc() calls mwifiex_free_adapter()
    in case firmware initialization fails. That ends up calling
    mwifiex_cleanup_pcie().
    
    Note that all those calls are still running on the workqueue. So when
    mwifiex_cleanup_pcie() now calls cancel_work_sync(), it's really waiting
    on itself to complete, causing a deadlock.
    
    This commit fixes the deadlock by skipping cancel_work_sync() on a reset
    failure path.
    
    After this commit, when reset fails, the following output is
    expected to be shown:
    
        kernel: mwifiex_pcie 0000:03:00.0: info: _mwifiex_fw_dpc: unregister device
        kernel: mwifiex: Failed to bring up adapter: -5
        kernel: mwifiex_pcie 0000:03:00.0: reinit failed: -5
    
    To reproduce this issue, for example, try putting the root port of wifi
    into D3 (replace "00:1d.3" with your setup).
    
        # put into D3 (root port)
        sudo setpci -v -s 00:1d.3 CAP_PM+4.b=0b
    
    Cc: Maximilian Luz <luzmaximilian@gmail.com>
    Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201028142346.18355-1-kitakar@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ff8c3b373b3c376397a92502c05ace2d91c35a5
Author: Andrey Ryabinin <arbn@yandex-team.com>
Date:   Wed Feb 17 17:30:04 2021 +0300

    iommu/amd: Fix sleeping in atomic in increase_address_space()
    
    commit 140456f994195b568ecd7fc2287a34eadffef3ca upstream.
    
    increase_address_space() calls get_zeroed_page(gfp) under spin_lock with
    disabled interrupts. gfp flags passed to increase_address_space() may allow
    sleeping, so it comes to this:
    
     BUG: sleeping function called from invalid context at mm/page_alloc.c:4342
     in_atomic(): 1, irqs_disabled(): 1, pid: 21555, name: epdcbbf1qnhbsd8
    
     Call Trace:
      dump_stack+0x66/0x8b
      ___might_sleep+0xec/0x110
      __alloc_pages_nodemask+0x104/0x300
      get_zeroed_page+0x15/0x40
      iommu_map_page+0xdd/0x3e0
      amd_iommu_map+0x50/0x70
      iommu_map+0x106/0x220
      vfio_iommu_type1_ioctl+0x76e/0x950 [vfio_iommu_type1]
      do_vfs_ioctl+0xa3/0x6f0
      ksys_ioctl+0x66/0x70
      __x64_sys_ioctl+0x16/0x20
      do_syscall_64+0x4e/0x100
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fix this by moving get_zeroed_page() out of spin_lock/unlock section.
    
    Fixes: 754265bcab ("iommu/amd: Fix race in increase_address_space()")
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Acked-by: Will Deacon <will@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210217143004.19165-1-arbn@yandex-team.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Andrey Ryabinin <arbn@yandex-team.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 328b9320ff0d2b01f45b9160c146813175b0eb35
Author: Jeffle Xu <jefflexu@linux.alibaba.com>
Date:   Tue Mar 9 11:27:45 2021 +0800

    dm table: fix zoned iterate_devices based device capability checks
    
    commit 24f6b6036c9eec21191646930ad42808e6180510 upstream.
    
    Fix dm_table_supports_zoned_model() and invert logic of both
    iterate_devices_callout_fn so that all devices' zoned capabilities are
    properly checked.
    
    Add one more parameter to dm_table_any_dev_attr(), which is actually
    used as the @data parameter of iterate_devices_callout_fn, so that
    dm_table_matches_zone_sectors() can be replaced by
    dm_table_any_dev_attr().
    
    Fixes: dd88d313bef02 ("dm table: add zoned block devices validation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    [jeffle: also convert no_sg_merge check]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93a6b7c9180f939f83db056862c12980ed99854d
Author: Jeffle Xu <jefflexu@linux.alibaba.com>
Date:   Tue Mar 9 11:27:44 2021 +0800

    dm table: fix DAX iterate_devices based device capability checks
    
    commit 5b0fab508992c2e120971da658ce80027acbc405 upstream.
    
    Fix dm_table_supports_dax() and invert logic of both
    iterate_devices_callout_fn so that all devices' DAX capabilities are
    properly checked.
    
    Fixes: 545ed20e6df6 ("dm: add infrastructure for DAX support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    [jeffle: no dax synchronous]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42fcebfb0ff4be3aeba6bd41b50d15e3a9d20f82
Author: Jeffle Xu <jefflexu@linux.alibaba.com>
Date:   Tue Mar 9 11:27:43 2021 +0800

    dm table: fix iterate_devices based device capability checks
    
    commit a4c8dd9c2d0987cf542a2a0c42684c9c6d78a04e upstream.
    
    According to the definition of dm_iterate_devices_fn:
     * This function must iterate through each section of device used by the
     * target until it encounters a non-zero return code, which it then returns.
     * Returns zero if no callout returned non-zero.
    
    For some target type (e.g. dm-stripe), one call of iterate_devices() may
    iterate multiple underlying devices internally, in which case a non-zero
    return code returned by iterate_devices_callout_fn will stop the iteration
    in advance. No iterate_devices_callout_fn should return non-zero unless
    device iteration should stop.
    
    Rename dm_table_requires_stable_pages() to dm_table_any_dev_attr() and
    elevate it for reuse to stop iterating (and return non-zero) on the
    first device that causes iterate_devices_callout_fn to return non-zero.
    Use dm_table_any_dev_attr() to properly iterate through devices.
    
    Rename device_is_nonrot() to device_is_rotational() and invert logic
    accordingly to fix improper disposition.
    
    [jeffle: backport notes]
    Also convert the no_sg_merge capability check, which is introduced by
    commit 200612ec33e5 ("dm table: propagate QUEUE_FLAG_NO_SG_MERGE"), and
    removed since commit 2705c93742e9 ("block: kill QUEUE_FLAG_NO_SG_MERGE")
    in v5.1.
    
    Fixes: c3c4555edd10 ("dm table: clear add_random unless all devices have it set")
    Fixes: 4693c9668fdc ("dm table: propagate non rotational flag")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jeffle Xu <jefflexu@linux.alibaba.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71073055f9edda4553d15027be258801feeb172f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 3 13:59:12 2021 +0300

    rsxx: Return -EFAULT if copy_to_user() fails
    
    [ Upstream commit 77516d25f54912a7baedeeac1b1b828b6f285152 ]
    
    The copy_to_user() function returns the number of bytes remaining but
    we want to return -EFAULT to the user if it can't complete the copy.
    The "st" variable only holds zero on success or negative error codes on
    failure so the type should be int.
    
    Fixes: 36f988e978f8 ("rsxx: Adding in debugfs entries.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e298f890892e6a968dcabedfc75821596a97643
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sat Feb 27 00:15:27 2021 +0000

    ALSA: ctxfi: cthw20k2: fix mask on conf to allow 4 bits
    
    [ Upstream commit 26a9630c72ebac7c564db305a6aee54a8edde70e ]
    
    Currently the mask operation on variable conf is just 3 bits so
    the switch statement case value of 8 is unreachable dead code.
    The function daio_mgr_dao_init can be passed a 4 bit value,
    function dao_rsc_init calls it with conf set to:
    
         conf = (desc->msr & 0x7) | (desc->passthru << 3);
    
    so clearly when desc->passthru is set to 1 then conf can be
    at least 8.
    
    Fix this by changing the mask to 0xf.
    
    Fixes: 8cc72361481f ("ALSA: SB X-Fi driver merge")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210227001527.1077484-1-colin.king@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0929693697b3136c88a13983fd20c122cea05de9
Author: Antonio Borneo <borneo.antonio@gmail.com>
Date:   Thu Jun 18 02:08:44 2020 +0200

    usbip: tools: fix build error for multiple definition
    
    commit d5efc2e6b98fe661dbd8dd0d5d5bfb961728e57a upstream.
    
    With GCC 10, building usbip triggers error for multiple definition
    of 'udev_context', in:
    - libsrc/vhci_driver.c:18 and
    - libsrc/usbip_host_common.c:27.
    
    Declare as extern the definition in libsrc/usbip_host_common.c.
    
    Signed-off-by: Antonio Borneo <borneo.antonio@gmail.com>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200618000844.1048309-1-borneo.antonio@gmail.com
    Cc: Petr Štetiar <ynezz@true.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7511a8129a7433ad6c8e5eb2ded894230c9efa37
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Feb 25 19:23:27 2021 +0100

    PM: runtime: Update device status before letting suppliers suspend
    
    commit 44cc89f764646b2f1f2ea5d1a08b230131707851 upstream.
    
    Because the PM-runtime status of the device is not updated in
    __rpm_callback(), attempts to suspend the suppliers of the given
    device triggered by rpm_put_suppliers() called by it may fail.
    
    Fix this by making __rpm_callback() update the device's status to
    RPM_SUSPENDED before calling rpm_put_suppliers() if the current
    status of the device is RPM_SUSPENDING and the callback just invoked
    by it has returned 0 (success).
    
    While at it, modify the code in __rpm_callback() to always check
    the device's PM-runtime status under its PM lock.
    
    Link: https://lore.kernel.org/linux-pm/CAPDyKFqm06KDw_p8WXsM4dijDbho4bb6T4k50UqqvR1_COsp8g@mail.gmail.com/
    Fixes: 21d5c57b3726 ("PM / runtime: Use device links")
    Reported-by: Elaine Zhang <zhangqing@rock-chips.com>
    Diagnosed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Elaine Zhang <zhangiqng@rock-chips.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abff996072a22612af8e4c4f159abfa3544a0ae0
Author: Ira Weiny <ira.weiny@intel.com>
Date:   Wed Jan 27 22:15:03 2021 -0800

    btrfs: fix raid6 qstripe kmap
    
    commit d70cef0d46729808dc53f145372c02b145c92604 upstream.
    
    When a qstripe is required an extra page is allocated and mapped.  There
    were 3 problems:
    
    1) There is no corresponding call of kunmap() for the qstripe page.
    2) There is no reason to map the qstripe page more than once if the
       number of bits set in rbio->dbitmap is greater than one.
    3) There is no reason to map the parity page and unmap it each time
       through the loop.
    
    The page memory can continue to be reused with a single mapping on each
    iteration by raid6_call.gen_syndrome() without remapping.  So map the
    page for the duration of the loop.
    
    Similarly, improve the algorithm by mapping the parity page just 1 time.
    
    Fixes: 5a6ac9eacb49 ("Btrfs, raid56: support parity scrub on raid56")
    CC: stable@vger.kernel.org # 4.4.x: c17af96554a8: btrfs: raid56: simplify tracking of Q stripe presence
    CC: stable@vger.kernel.org # 4.4.x
    Signed-off-by: Ira Weiny <ira.weiny@intel.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8066fe5488911f1ced6d7cf3b21c0c62cd6ffc00
Author: David Sterba <dsterba@suse.com>
Date:   Wed Feb 19 15:17:20 2020 +0100

    btrfs: raid56: simplify tracking of Q stripe presence
    
    commit c17af96554a8a8777cbb0fd53b8497250e548b43 upstream.
    
    There are temporary variables tracking the index of P and Q stripes, but
    none of them is really used as such, merely for determining if the Q
    stripe is present. This leads to compiler warnings with
    -Wunused-but-set-variable and has been reported several times.
    
    fs/btrfs/raid56.c: In function ‘finish_rmw’:
    fs/btrfs/raid56.c:1199:6: warning: variable ‘p_stripe’ set but not used [-Wunused-but-set-variable]
     1199 |  int p_stripe = -1;
          |      ^~~~~~~~
    fs/btrfs/raid56.c: In function ‘finish_parity_scrub’:
    fs/btrfs/raid56.c:2356:6: warning: variable ‘p_stripe’ set but not used [-Wunused-but-set-variable]
     2356 |  int p_stripe = -1;
          |      ^~~~~~~~
    
    Replace the two variables with one that has a clear meaning and also get
    rid of the warnings. The logic that verifies that there are only 2
    valid cases is unchanged.
    
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f5e64f695f9371a36afcbad569e7ba1de5dce6f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Mar 7 11:27:46 2021 +0100

    Linux 4.14.224
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210305120851.751937389@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bc30f299b0c31704543769a5f1f87f61ae91d7c
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Sat Dec 19 23:29:58 2020 +0100

    media: v4l: ioctl: Fix memory leak in video_usercopy
    
    commit fb18802a338b36f675a388fc03d2aa504a0d0899 upstream.
    
    When an IOCTL with argument size larger than 128 that also used array
    arguments were handled, two memory allocations were made but alas, only
    the latter one of them was released. This happened because there was only
    a single local variable to hold such a temporary allocation.
    
    Fix this by adding separate variables to hold the pointers to the
    temporary allocations.
    
    Reported-by: Arnd Bergmann <arnd@kernel.org>
    Reported-by: syzbot+1115e79c8df6472c612b@syzkaller.appspotmail.com
    Fixes: d14e6d76ebf7 ("[media] v4l: Add multi-planar ioctl handling code")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be47ca4948f8451a5352a79c26df0ccb1c073a77
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Mar 2 14:53:21 2021 -0700

    swap: fix swapfile read/write offset
    
    commit caf6912f3f4af7232340d500a4a2008f81b93f14 upstream.
    
    We're not factoring in the start of the file for where to write and
    read the swapfile, which leads to very unfortunate side effects of
    writing where we should not be...
    
    [This issue only affects swapfiles on filesystems on top of blockdevs
    that implement rw_page ops (brd, zram, btt, pmem), and not on top of any
    other block devices, in contrast to the upstream commit fix.]
    
    Fixes: dd6bd0d9c7db ("swap: use bdev_read_page() / bdev_write_page()")
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Anthony Iliopoulos <ailiop@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12c4e5764b9bf22a5912b773e1720f2542742957
Author: Rokudo Yan <wu-yan@tcl.com>
Date:   Thu Feb 25 17:18:31 2021 -0800

    zsmalloc: account the number of compacted pages correctly
    
    commit 2395928158059b8f9858365fce7713ce7fef62e4 upstream.
    
    There exists multiple path may do zram compaction concurrently.
    1. auto-compaction triggered during memory reclaim
    2. userspace utils write zram<id>/compaction node
    
    So, multiple threads may call zs_shrinker_scan/zs_compact concurrently.
    But pages_compacted is a per zsmalloc pool variable and modification
    of the variable is not serialized(through under class->lock).
    There are two issues here:
    1. the pages_compacted may not equal to total number of pages
    freed(due to concurrently add).
    2. zs_shrinker_scan may not return the correct number of pages
    freed(issued by current shrinker).
    
    The fix is simple:
    1. account the number of pages freed in zs_compact locally.
    2. use actomic variable pages_compacted to accumulate total number.
    
    Link: https://lkml.kernel.org/r/20210202122235.26885-1-wu-yan@tcl.com
    Fixes: 860c707dca155a56 ("zsmalloc: account the number of compacted pages")
    Signed-off-by: Rokudo Yan <wu-yan@tcl.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5eb8f35257effbecac13a43da8de6b520f7d2603
Author: Jan Beulich <jbeulich@suse.com>
Date:   Thu Feb 25 16:35:15 2021 +0100

    xen-netback: respect gnttab_map_refs()'s return value
    
    commit 2991397d23ec597405b116d96de3813420bdcbc3 upstream.
    
    Commit 3194a1746e8a ("xen-netback: don't "handle" error by BUG()")
    dropped respective a BUG_ON() without noticing that with this the
    variable's value wouldn't be consumed anymore. With gnttab_set_map_op()
    setting all status fields to a non-zero value, in case of an error no
    slot should have a status of GNTST_okay (zero).
    
    This is part of XSA-367.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/d933f495-619a-0086-5fb4-1ec3cf81a8fc@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0210fc2dede90b8e0e1bb1eb245e1dde911740db
Author: Jan Beulich <jbeulich@suse.com>
Date:   Thu Feb 25 16:34:43 2021 +0100

    Xen/gnttab: handle p2m update errors on a per-slot basis
    
    commit 8310b77b48c5558c140e7a57a702e7819e62f04e upstream.
    
    Bailing immediately from set_foreign_p2m_mapping() upon a p2m updating
    error leaves the full batch in an ambiguous state as far as the caller
    is concerned. Instead flags respective slots as bad, unmapping what
    was mapped there right away.
    
    HYPERVISOR_grant_table_op()'s return value and the individual unmap
    slots' status fields get used only for a one-time - there's not much we
    can do in case of a failure.
    
    Note that there's no GNTST_enomem or alike, so GNTST_general_error gets
    used.
    
    The map ops' handle fields get overwritten just to be on the safe side.
    
    This is part of XSA-367.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/96cccf5d-e756-5f53-b91a-ea269bfb9be0@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45a60910780756c563bf562b4227a58b2676ca30
Author: Chris Leech <cleech@redhat.com>
Date:   Tue Feb 23 21:39:01 2021 -0800

    scsi: iscsi: Verify lengths on passthrough PDUs
    
    commit f9dbdf97a5bd92b1a49cee3d591b55b11fd7a6d5 upstream.
    
    Open-iSCSI sends passthrough PDUs over netlink, but the kernel should be
    verifying that the provided PDU header and data lengths fall within the
    netlink message to prevent accessing beyond that in memory.
    
    Cc: stable@vger.kernel.org
    Reported-by: Adam Nichols <adam@grimm-co.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 991600102dd8d09515dc7504164021b21e151f2b
Author: Chris Leech <cleech@redhat.com>
Date:   Tue Feb 23 18:00:17 2021 -0800

    scsi: iscsi: Ensure sysfs attributes are limited to PAGE_SIZE
    
    commit ec98ea7070e94cc25a422ec97d1421e28d97b7ee upstream.
    
    As the iSCSI parameters are exported back through sysfs, it should be
    enforcing that they never are more than PAGE_SIZE (which should be more
    than enough) before accepting updates through netlink.
    
    Change all iSCSI sysfs attributes to use sysfs_emit().
    
    Cc: stable@vger.kernel.org
    Reported-by: Adam Nichols <adam@grimm-co.com>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d970ee9bf646d9a860b847ea5f143c0fd65153cd
Author: Joe Perches <joe@perches.com>
Date:   Wed Sep 16 13:40:38 2020 -0700

    sysfs: Add sysfs_emit and sysfs_emit_at to format sysfs output
    
    commit 2efc459d06f1630001e3984854848a5647086232 upstream.
    
    Output defects can exist in sysfs content using sprintf and snprintf.
    
    sprintf does not know the PAGE_SIZE maximum of the temporary buffer
    used for outputting sysfs content and it's possible to overrun the
    PAGE_SIZE buffer length.
    
    Add a generic sysfs_emit function that knows that the size of the
    temporary buffer and ensures that no overrun is done.
    
    Add a generic sysfs_emit_at function that can be used in multiple
    call situations that also ensures that no overrun is done.
    
    Validate the output buffer argument to be page aligned.
    Validate the offset len argument to be within the PAGE_SIZE buf.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Link: https://lore.kernel.org/r/884235202216d464d61ee975f7465332c86f76b2.1600285923.git.joe@perches.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9499619dbd900da03b26bec85424b6016a025390
Author: Lee Duncan <lduncan@suse.com>
Date:   Tue Feb 23 13:06:24 2021 -0800

    scsi: iscsi: Restrict sessions and handles to admin capabilities
    
    commit 688e8128b7a92df982709a4137ea4588d16f24aa upstream.
    
    Protect the iSCSI transport handle, available in sysfs, by requiring
    CAP_SYS_ADMIN to read it. Also protect the netlink socket by restricting
    reception of messages to ones sent with CAP_SYS_ADMIN. This disables
    normal users from being able to end arbitrary iSCSI sessions.
    
    Cc: stable@vger.kernel.org
    Reported-by: Adam Nichols <adam@grimm-co.com>
    Reviewed-by: Chris Leech <cleech@redhat.com>
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b86ced6038cb515854783b23df9f46fbfb384120
Author: John David Anglin <dave.anglin@bell.net>
Date:   Thu Jan 28 18:12:30 2021 -0500

    parisc: Bump 64-bit IRQ stack size to 64 KB
    
    [ Upstream commit 31680c1d1595a59e17c14ec036b192a95f8e5f4a ]
    
    Bump 64-bit IRQ stack size to 64 KB.
    
    I had a kernel IRQ stack overflow on the mx3210 debian buildd machine.  This patch increases the
    64-bit IRQ stack size to 64 KB.  The 64-bit stack size needs to be larger than the 32-bit stack
    size since registers are twice as big.
    
    Signed-off-by: John David Anglin <dave.anglin@bell.net>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7f8ba7597f696703a7d1587925a77f1fb3b3ecb
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Wed Dec 23 11:44:25 2020 -0800

    f2fs: handle unallocated section and zone on pinned/atgc
    
    [ Upstream commit 632faca72938f9f63049e48a8c438913828ac7a9 ]
    
    If we have large section/zone, unallocated segment makes them corrupted.
    
    E.g.,
    
      - Pinned file:       -1 119304647 119304647
      - ATGC   data:       -1 119304647 119304647
    
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8bba452cbd4ef6c8ca3df13958ba3869158e8fb
Author: Ricardo Ribalda <ribalda@chromium.org>
Date:   Wed Dec 23 14:35:19 2020 +0100

    media: uvcvideo: Allow entities with no pads
    
    [ Upstream commit 7532dad6634031d083df7af606fac655b8d08b5c ]
    
    Avoid an underflow while calculating the number of inputs for entities
    with zero pads.
    
    Signed-off-by: Ricardo Ribalda <ribalda@chromium.org>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0150ca701d1207614254dea3d0937fdcde60814
Author: Christian Gromm <christian.gromm@microchip.com>
Date:   Tue Feb 2 17:21:05 2021 +0100

    staging: most: sound: add sanity check for function argument
    
    [ Upstream commit 45b754ae5b82949dca2b6e74fa680313cefdc813 ]
    
    This patch checks the function parameter 'bytes' before doing the
    subtraction to prevent memory corruption.
    
    Signed-off-by: Christian Gromm <christian.gromm@microchip.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/1612282865-21846-1-git-send-email-christian.gromm@microchip.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c32bf1308053ed7d3fa0cef4e0c228607f5c889
Author: Gopal Tiwari <gtiwari@redhat.com>
Date:   Tue Feb 2 15:12:30 2021 +0530

    Bluetooth: Fix null pointer dereference in amp_read_loc_assoc_final_data
    
    [ Upstream commit e8bd76ede155fd54d8c41d045dda43cd3174d506 ]
    
    kernel panic trace looks like:
    
     #5 [ffffb9e08698fc80] do_page_fault at ffffffffb666e0d7
     #6 [ffffb9e08698fcb0] page_fault at ffffffffb70010fe
        [exception RIP: amp_read_loc_assoc_final_data+63]
        RIP: ffffffffc06ab54f  RSP: ffffb9e08698fd68  RFLAGS: 00010246
        RAX: 0000000000000000  RBX: ffff8c8845a5a000  RCX: 0000000000000004
        RDX: 0000000000000000  RSI: ffff8c8b9153d000  RDI: ffff8c8845a5a000
        RBP: ffffb9e08698fe40   R8: 00000000000330e0   R9: ffffffffc0675c94
        R10: ffffb9e08698fe58  R11: 0000000000000001  R12: ffff8c8b9cbf6200
        R13: 0000000000000000  R14: 0000000000000000  R15: ffff8c8b2026da0b
        ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
     #7 [ffffb9e08698fda8] hci_event_packet at ffffffffc0676904 [bluetooth]
     #8 [ffffb9e08698fe50] hci_rx_work at ffffffffc06629ac [bluetooth]
     #9 [ffffb9e08698fe98] process_one_work at ffffffffb66f95e7
    
    hcon->amp_mgr seems NULL triggered kernel panic in following line inside
    function amp_read_loc_assoc_final_data
    
            set_bit(READ_LOC_AMP_ASSOC_FINAL, &mgr->state);
    
    Fixed by checking NULL for mgr.
    
    Signed-off-by: Gopal Tiwari <gtiwari@redhat.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 519f7e615d1c0dc7f4167a498e9e3b9d39007c34
Author: Fangrui Song <maskray@google.com>
Date:   Wed Jan 27 12:56:00 2021 -0800

    x86/build: Treat R_386_PLT32 relocation as R_386_PC32
    
    [ Upstream commit bb73d07148c405c293e576b40af37737faf23a6a ]
    
    This is similar to commit
    
      b21ebf2fb4cd ("x86: Treat R_X86_64_PLT32 as R_X86_64_PC32")
    
    but for i386. As far as the kernel is concerned, R_386_PLT32 can be
    treated the same as R_386_PC32.
    
    R_386_PLT32/R_X86_64_PLT32 are PC-relative relocation types which
    can only be used by branches. If the referenced symbol is defined
    externally, a PLT will be used.
    
    R_386_PC32/R_X86_64_PC32 are PC-relative relocation types which can be
    used by address taking operations and branches. If the referenced symbol
    is defined externally, a copy relocation/canonical PLT entry will be
    created in the executable.
    
    On x86-64, there is no PIC vs non-PIC PLT distinction and an
    R_X86_64_PLT32 relocation is produced for both `call/jmp foo` and
    `call/jmp foo@PLT` with newer (2018) GNU as/LLVM integrated assembler.
    This avoids canonical PLT entries (st_shndx=0, st_value!=0).
    
    On i386, there are 2 types of PLTs, PIC and non-PIC. Currently,
    the GCC/GNU as convention is to use R_386_PC32 for non-PIC PLT and
    R_386_PLT32 for PIC PLT. Copy relocations/canonical PLT entries
    are possible ABI issues but GCC/GNU as will likely keep the status
    quo because (1) the ABI is legacy (2) the change will drop a GNU
    ld diagnostic for non-default visibility ifunc in shared objects.
    
    clang-12 -fno-pic (since [1]) can emit R_386_PLT32 for compiler
    generated function declarations, because preventing canonical PLT
    entries is weighed over the rare ifunc diagnostic.
    
    Further info for the more interested:
    
      https://github.com/ClangBuiltLinux/linux/issues/1210
      https://sourceware.org/bugzilla/show_bug.cgi?id=27169
      https://github.com/llvm/llvm-project/commit/a084c0388e2a59b9556f2de0083333232da3f1d6 [1]
    
     [ bp: Massage commit message. ]
    
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Link: https://lkml.kernel.org/r/20210127205600.1227437-1-maskray@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dad7b26553ec49876fdc5b7fd2c7bb3e9f93d371
Author: Miaoqing Pan <miaoqing@codeaurora.org>
Date:   Tue Dec 22 14:34:47 2020 +0800

    ath10k: fix wmi mgmt tx queue full due to race condition
    
    [ Upstream commit b55379e343a3472c35f4a1245906db5158cab453 ]
    
    Failed to transmit wmi management frames:
    
    [84977.840894] ath10k_snoc a000000.wifi: wmi mgmt tx queue is full
    [84977.840913] ath10k_snoc a000000.wifi: failed to transmit packet, dropping: -28
    [84977.840924] ath10k_snoc a000000.wifi: failed to submit frame: -28
    [84977.840932] ath10k_snoc a000000.wifi: failed to transmit frame: -28
    
    This issue is caused by race condition between skb_dequeue and
    __skb_queue_tail. The queue of ‘wmi_mgmt_tx_queue’ is protected by a
    different lock: ar->data_lock vs list->lock, the result is no protection.
    So when ath10k_mgmt_over_wmi_tx_work() and ath10k_mac_tx_wmi_mgmt()
    running concurrently on different CPUs, there appear to be a rare corner
    cases when the queue length is 1,
    
      CPUx (skb_deuque)                     CPUy (__skb_queue_tail)
                                            next=list
                                            prev=list
      struct sk_buff *skb = skb_peek(list); WRITE_ONCE(newsk->next, next);
      WRITE_ONCE(list->qlen, list->qlen - 1);WRITE_ONCE(newsk->prev, prev);
      next       = skb->next;               WRITE_ONCE(next->prev, newsk);
      prev       = skb->prev;               WRITE_ONCE(prev->next, newsk);
      skb->next  = skb->prev = NULL;        list->qlen++;
      WRITE_ONCE(next->prev, prev);
      WRITE_ONCE(prev->next, next);
    
    If the instruction ‘next = skb->next’ is executed before
    ‘WRITE_ONCE(prev->next, newsk)’, newsk will be lost, as CPUx get the
    old ‘next’ pointer, but the length is still added by one. The final
    result is the length of the queue will reach the maximum value but
    the queue is empty.
    
    So remove ar->data_lock, and use 'skb_queue_tail' instead of
    '__skb_queue_tail' to prevent the potential race condition. Also switch
    to use skb_queue_len_lockless, in case we queue a few SKBs simultaneously.
    
    Tested-on: WCN3990 hw1.0 SNOC WLAN.HL.3.1.c2-00033-QCAHLSWMTPLZ-1
    
    Signed-off-by: Miaoqing Pan <miaoqing@codeaurora.org>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1608618887-8857-1-git-send-email-miaoqing@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89afeff39187b9c889ab629c2785aa82e5fb9503
Author: Di Zhu <zhudi21@huawei.com>
Date:   Mon Jan 25 20:42:29 2021 +0800

    pktgen: fix misuse of BUG_ON() in pktgen_thread_worker()
    
    [ Upstream commit 275b1e88cabb34dbcbe99756b67e9939d34a99b6 ]
    
    pktgen create threads for all online cpus and bond these threads to
    relevant cpu repecivtily. when this thread firstly be woken up, it
    will compare cpu currently running with the cpu specified at the time
    of creation and if the two cpus are not equal, BUG_ON() will take effect
    causing panic on the system.
    Notice that these threads could be migrated to other cpus before start
    running because of the cpu hotplug after these threads have created. so the
    BUG_ON() used here seems unreasonable and we can replace it with WARN_ON()
    to just printf a warning other than panic the system.
    
    Signed-off-by: Di Zhu <zhudi21@huawei.com>
    Link: https://lore.kernel.org/r/20210125124229.19334-1-zhudi21@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9d437f7dee3d5c5bbaec379d08125e9d21bc22b
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Jan 15 08:56:13 2021 +0200

    wlcore: Fix command execute failure 19 for wl12xx
    
    [ Upstream commit cb88d01b67383a095e3f7caeb4cdade5a6cf0417 ]
    
    We can currently get a "command execute failure 19" error on beacon loss
    if the signal is weak:
    
    wlcore: Beacon loss detected. roles:0xff
    wlcore: Connection loss work (role_id: 0).
    ...
    wlcore: ERROR command execute failure 19
    ...
    WARNING: CPU: 0 PID: 1552 at drivers/net/wireless/ti/wlcore/main.c:803
    ...
    (wl12xx_queue_recovery_work.part.0 [wlcore])
    (wl12xx_cmd_role_start_sta [wlcore])
    (wl1271_op_bss_info_changed [wlcore])
    (ieee80211_prep_connection [mac80211])
    
    Error 19 is defined as CMD_STATUS_WRONG_NESTING from the wlcore firmware,
    and seems to mean that the firmware no longer wants to see the quirk
    handling for WLCORE_QUIRK_START_STA_FAILS done.
    
    This quirk got added with commit 18eab430700d ("wlcore: workaround
    start_sta problem in wl12xx fw"), and it seems that this already got fixed
    in the firmware long time ago back in 2012 as wl18xx never had this quirk
    in place to start with.
    
    As we no longer even support firmware that early, to me it seems that it's
    safe to just drop WLCORE_QUIRK_START_STA_FAILS to fix the error. Looks
    like earlier firmware got disabled back in 2013 with commit 0e284c074ef9
    ("wl12xx: increase minimum singlerole firmware version required").
    
    If it turns out we still need WLCORE_QUIRK_START_STA_FAILS with any
    firmware that the driver works with, we can simply revert this patch and
    add extra checks for firmware version used.
    
    With this fix wlcore reconnects properly after a beacon loss.
    
    Cc: Raz Bouganim <r-bouganim@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210115065613.7731-1-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c968e0bff69d1e4d7d15dfd7509a17e31a8b3699
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Tue Jan 5 13:02:34 2021 +0100

    vt/consolemap: do font sum unsigned
    
    [ Upstream commit 9777f8e60e718f7b022a94f2524f967d8def1931 ]
    
    The constant 20 makes the font sum computation signed which can lead to
    sign extensions and signed wraps. It's not much of a problem as we build
    with -fno-strict-overflow. But if we ever decide not to, be ready, so
    switch the constant to unsigned.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20210105120239.28031-7-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e05f70461d727f1ea03c393ea5d4e4c797b29e8d
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Tue Dec 1 12:39:57 2020 +0100

    x86/reboot: Add Zotac ZBOX CI327 nano PCI reboot quirk
    
    [ Upstream commit 4b2d8ca9208be636b30e924b1cbcb267b0740c93 ]
    
    On this system the M.2 PCIe WiFi card isn't detected after reboot, only
    after cold boot. reboot=pci fixes this behavior. In [0] the same issue
    is described, although on another system and with another Intel WiFi
    card. In case it's relevant, both systems have Celeron CPUs.
    
    Add a PCI reboot quirk on affected systems until a more generic fix is
    available.
    
    [0] https://bugzilla.kernel.org/show_bug.cgi?id=202399
    
     [ bp: Massage commit message. ]
    
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/1524eafd-f89c-cfa4-ed70-0bde9e45eec9@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1617ade6b36ffa0eba1bc35aece2c550b486d036
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Dec 21 20:24:35 2020 +0800

    staging: fwserial: Fix error handling in fwserial_create
    
    [ Upstream commit f31559af97a0eabd467e4719253675b7dccb8a46 ]
    
    When fw_core_add_address_handler() fails, we need to destroy
    the port by tty_port_destroy(). Also we need to unregister
    the address handler by fw_core_remove_address_handler() on
    failure.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20201221122437.10274-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 447faf440ddc16dcc55908f0a4b656b9147eb8d1
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Jan 14 14:13:33 2021 +0100

    dt-bindings: net: btusb: DT fix s/interrupt-name/interrupt-names/
    
    commit f288988930e93857e0375bdf88bb670c312b82eb upstream.
    
    The standard DT property name is "interrupt-names".
    
    Fixes: fd913ef7ce619467 ("Bluetooth: btusb: Add out-of-band wakeup support")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Acked-by: Rajat Jain <rajatja@google.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb9fd334132774a456a0e5cea8b050779aaee247
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Sun Feb 7 21:47:33 2021 +0200

    net: bridge: use switchdev for port flags set through sysfs too
    
    commit 8043c845b63a2dd88daf2d2d268a33e1872800f0 upstream.
    
    Looking through patchwork I don't see that there was any consensus to
    use switchdev notifiers only in case of netlink provided port flags but
    not sysfs (as a sort of deprecation, punishment or anything like that),
    so we should probably keep the user interface consistent in terms of
    functionality.
    
    http://patchwork.ozlabs.org/project/netdev/patch/20170605092043.3523-3-jiri@resnulli.us/
    http://patchwork.ozlabs.org/project/netdev/patch/20170608064428.4785-3-jiri@resnulli.us/
    
    Fixes: 3922285d96e7 ("net: bridge: Add support for offloading port attributes")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4822c6670b262cd1d5f4946727755814d1fa354
Author: Li Xinhai <lixinhai.lxh@gmail.com>
Date:   Wed Feb 24 12:06:54 2021 -0800

    mm/hugetlb.c: fix unnecessary address expansion of pmd sharing
    
    commit a1ba9da8f0f9a37d900ff7eff66482cf7de8015e upstream.
    
    The current code would unnecessarily expand the address range.  Consider
    one example, (start, end) = (1G-2M, 3G+2M), and (vm_start, vm_end) =
    (1G-4M, 3G+4M), the expected adjustment should be keep (1G-2M, 3G+2M)
    without expand.  But the current result will be (1G-4M, 3G+4M).  Actually,
    the range (1G-4M, 1G) and (3G, 3G+4M) would never been involved in pmd
    sharing.
    
    After this patch, we will check that the vma span at least one PUD aligned
    size and the start,end range overlap the aligned range of vma.
    
    With above example, the aligned vma range is (1G, 3G), so if (start, end)
    range is within (1G-4M, 1G), or within (3G, 3G+4M), then no adjustment to
    both start and end.  Otherwise, we will have chance to adjust start
    downwards or end upwards without exceeding (vm_start, vm_end).
    
    Mike:
    
    : The 'adjusted range' is used for calls to mmu notifiers and cache(tlb)
    : flushing.  Since the current code unnecessarily expands the range in some
    : cases, more entries than necessary would be flushed.  This would/could
    : result in performance degradation.  However, this is highly dependent on
    : the user runtime.  Is there a combination of vma layout and calls to
    : actually hit this issue?  If the issue is hit, will those entries
    : unnecessarily flushed be used again and need to be unnecessarily reloaded?
    
    Link: https://lkml.kernel.org/r/20210104081631.2921415-1-lixinhai.lxh@gmail.com
    Fixes: 75802ca66354 ("mm/hugetlb: fix calculation of adjust_range_if_pmd_sharing_possible")
    Signed-off-by: Li Xinhai <lixinhai.lxh@gmail.com>
    Suggested-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Peter Xu <peterx@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af4f07b53e4cbd7aa755d982050ca7c03ff09982
Author: Marco Elver <elver@google.com>
Date:   Mon Feb 1 17:04:20 2021 +0100

    net: fix up truesize of cloned skb in skb_prepare_for_shift()
    
    commit 097b9146c0e26aabaa6ff3e5ea536a53f5254a79 upstream.
    
    Avoid the assumption that ksize(kmalloc(S)) == ksize(kmalloc(S)): when
    cloning an skb, save and restore truesize after pskb_expand_head(). This
    can occur if the allocator decides to service an allocation of the same
    size differently (e.g. use a different size class, or pass the
    allocation on to KFENCE).
    
    Because truesize is used for bookkeeping (such as sk_wmem_queued), a
    modified truesize of a cloned skb may result in corrupt bookkeeping and
    relevant warnings (such as in sk_stream_kill_queues()).
    
    Link: https://lkml.kernel.org/r/X9JR/J6dMMOy1obu@elver.google.com
    Reported-by: syzbot+7b99aafdcc2eedea6178@syzkaller.appspotmail.com
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Marco Elver <elver@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20210201160420.2826895-1-elver@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8352ace4bb5a927042cd9dabc018f9cff18a5991
Author: Sabyrzhan Tasbolatov <snovitoll@gmail.com>
Date:   Thu Jan 28 17:58:01 2021 +0600

    smackfs: restrict bytes count in smackfs write functions
    
    commit 7ef4c19d245f3dc233fd4be5acea436edd1d83d8 upstream.
    
    syzbot found WARNINGs in several smackfs write operations where
    bytes count is passed to memdup_user_nul which exceeds
    GFP MAX_ORDER. Check count size if bigger than PAGE_SIZE.
    
    Per smackfs doc, smk_write_net4addr accepts any label or -CIPSO,
    smk_write_net6addr accepts any label or -DELETE. I couldn't find
    any general rule for other label lengths except SMK_LABELLEN,
    SMK_LONGLABEL, SMK_CIPSOMAX which are documented.
    
    Let's constrain, in general, smackfs label lengths for PAGE_SIZE.
    Although fuzzer crashes write to smackfs/netlabel on 0x400000 length.
    
    Here is a quick way to reproduce the WARNING:
    python -c "print('A' * 0x400000)" > /sys/fs/smackfs/netlabel
    
    Reported-by: syzbot+a71a442385a0b2815497@syzkaller.appspotmail.com
    Signed-off-by: Sabyrzhan Tasbolatov <snovitoll@gmail.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6491cae0cc3f2731a6e98f06cb8c307cd4f53b31
Author: Yumei Huang <yuhuang@redhat.com>
Date:   Fri Jan 22 16:48:19 2021 -0800

    xfs: Fix assert failure in xfs_setattr_size()
    
    commit 88a9e03beef22cc5fabea344f54b9a0dfe63de08 upstream.
    
    An assert failure is triggered by syzkaller test due to
    ATTR_KILL_PRIV is not cleared before xfs_setattr_size.
    As ATTR_KILL_PRIV is not checked/used by xfs_setattr_size,
    just remove it from the assert.
    
    Signed-off-by: Yumei Huang <yuhuang@redhat.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 516be46aa75063473f73a355ccb0b5ae866e08e0
Author: Sean Young <sean@mess.org>
Date:   Tue Jan 19 14:53:50 2021 +0100

    media: mceusb: sanity check for prescaler value
    
    commit 9dec0f48a75e0dadca498002d25ef4e143e60194 upstream.
    
    prescaler larger than 8 would mean the carrier is at most 152Hz,
    which does not make sense for IR carriers.
    
    Reported-by: syzbot+6d31bf169a8265204b8d@syzkaller.appspotmail.com
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cc1bbf669d6a3dfcc511d04f28c18bae4474d15
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Dec 18 12:17:16 2020 -0800

    JFS: more checks for invalid superblock
    
    commit 3bef198f1b17d1bb89260bad947ef084c0a2d1a6 upstream.
    
    syzbot is feeding invalid superblock data to JFS for mount testing.
    JFS does not check several of the fields -- just assumes that they
    are good since the JFS_MAGIC and version fields are good.
    
    In this case (syzbot reproducer), we have s_l2bsize == 0xda0c,
    pad == 0xf045, and s_state == 0x50, all of which are invalid IMO.
    Having s_l2bsize == 0xda0c causes this UBSAN warning:
      UBSAN: shift-out-of-bounds in fs/jfs/jfs_mount.c:373:25
      shift exponent -9716 is negative
    
    s_l2bsize can be tested for correctness. pad can be tested for non-0
    and punted. s_state can be tested for its valid values and punted.
    
    Do those 3 tests and if any of them fails, report the superblock as
    invalid/corrupt and let fsck handle it.
    
    With this patch, chkSuper() says this when JFS_DEBUG is enabled:
      jfs_mount: Mount Failure: superblock is corrupt!
      Mount JFS Failure: -22
      jfs_mount failed w/return code = -22
    
    The obvious problem with this method is that next week there could
    be another syzbot test that uses different fields for invalid values,
    this making this like a game of whack-a-mole.
    
    syzkaller link: https://syzkaller.appspot.com/bug?extid=36315852ece4132ec193
    
    Reported-by: syzbot+36315852ece4132ec193@syzkaller.appspotmail.com
    Reported-by: kernel test robot <lkp@intel.com> # v2
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Cc: jfs-discussion@lists.sourceforge.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bed35a59310ce9300e47a8b05c02d0f8ebae50c9
Author: Andrew Murray <andrew.murray@arm.com>
Date:   Wed Aug 28 18:50:06 2019 +0100

    arm64: Use correct ll/sc atomic constraints
    
    commit 580fa1b874711d633f9b145b7777b0e83ebf3787 upstream.
    
    The A64 ISA accepts distinct (but overlapping) ranges of immediates for:
    
     * add arithmetic instructions ('I' machine constraint)
     * sub arithmetic instructions ('J' machine constraint)
     * 32-bit logical instructions ('K' machine constraint)
     * 64-bit logical instructions ('L' machine constraint)
    
    ... but we currently use the 'I' constraint for many atomic operations
    using sub or logical instructions, which is not always valid.
    
    When CONFIG_ARM64_LSE_ATOMICS is not set, this allows invalid immediates
    to be passed to instructions, potentially resulting in a build failure.
    When CONFIG_ARM64_LSE_ATOMICS is selected the out-of-line ll/sc atomics
    always use a register as they have no visibility of the value passed by
    the caller.
    
    This patch adds a constraint parameter to the ATOMIC_xx and
    __CMPXCHG_CASE macros so that we can pass appropriate constraints for
    each case, with uses updated accordingly.
    
    Unfortunately prior to GCC 8.1.0 the 'K' constraint erroneously accepted
    '4294967295', so we must instead force the use of a register.
    
    Signed-off-by: Andrew Murray <andrew.murray@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    [bwh: Backported to 4.14: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc0d0ff1df079283f40a1823ffd49c9b00578ab4
Author: Will Deacon <will.deacon@arm.com>
Date:   Tue Sep 18 09:39:55 2018 +0100

    arm64: cmpxchg: Use "K" instead of "L" for ll/sc immediate constraint
    
    commit 4230509978f2921182da4e9197964dccdbe463c3 upstream.
    
    The "L" AArch64 machine constraint, which we use for the "old" value in
    an LL/SC cmpxchg(), generates an immediate that is suitable for a 64-bit
    logical instruction. However, for cmpxchg() operations on types smaller
    than 64 bits, this constraint can result in an invalid instruction which
    is correctly rejected by GAS, such as EOR W1, W1, #0xffffffff.
    
    Whilst we could special-case the constraint based on the cmpxchg size,
    it's far easier to change the constraint to "K" and put up with using
    a register for large 64-bit immediates. For out-of-line LL/SC atomics,
    this is all moot anyway.
    
    Reported-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e79d282b520f296dbb9097d3c4809b81d5cdccf2
Author: Will Deacon <will.deacon@arm.com>
Date:   Thu Sep 13 13:30:45 2018 +0100

    arm64: Avoid redundant type conversions in xchg() and cmpxchg()
    
    commit 5ef3fe4cecdf82fdd71ce78988403963d01444d4 upstream.
    
    Our atomic instructions (either LSE atomics of LDXR/STXR sequences)
    natively support byte, half-word, word and double-word memory accesses
    so there is no need to mask the data register prior to being stored.
    
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e479f3aa02345c38b9998e9211211c4d3ea9f88
Author: Shaoying Xu <shaoyi@amazon.com>
Date:   Tue Feb 16 18:32:34 2021 +0000

    arm64 module: set plt* section addresses to 0x0
    
    commit f5c6d0fcf90ce07ee0d686d465b19b247ebd5ed7 upstream.
    
    These plt* and .text.ftrace_trampoline sections specified for arm64 have
    non-zero addressses. Non-zero section addresses in a relocatable ELF would
    confuse GDB when it tries to compute the section offsets and it ends up
    printing wrong symbol addresses. Therefore, set them to zero, which mirrors
    the change in commit 5d8591bc0fba ("module: set ksymtab/kcrctab* section
    addresses to 0x0").
    
    Reported-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210216183234.GA23876@amazon.com
    Signed-off-by: Will Deacon <will@kernel.org>
    [shaoyi@amazon.com: made same changes in arch/arm64/kernel/module.lds for 5.4]
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0915e1d5305458f122f68855f040882e2b4a9d5
Author: Cornelia Huck <cohuck@redhat.com>
Date:   Tue Feb 16 12:06:45 2021 +0100

    virtio/s390: implement virtio-ccw revision 2 correctly
    
    commit 182f709c5cff683e6732d04c78e328de0532284f upstream.
    
    CCW_CMD_READ_STATUS was introduced with revision 2 of virtio-ccw,
    and drivers should only rely on it being implemented when they
    negotiated at least that revision with the device.
    
    However, virtio_ccw_get_status() issued READ_STATUS for any
    device operating at least at revision 1. If the device accepts
    READ_STATUS regardless of the negotiated revision (which some
    implementations like QEMU do, even though the spec currently does
    not allow it), everything works as intended. While a device
    rejecting the command should also be handled gracefully, we will
    not be able to see any changes the device makes to the status,
    such as setting NEEDS_RESET or setting the status to zero after
    a completed reset.
    
    We negotiated the revision to at most 1, as we never bumped the
    maximum revision; let's do that now and properly send READ_STATUS
    only if we are operating at least at revision 2.
    
    Cc: stable@vger.kernel.org
    Fixes: 7d3ce5ab9430 ("virtio/s390: support READ_STATUS command for virtio-ccw")
    Reviewed-by: Halil Pasic <pasic@linux.ibm.com>
    Signed-off-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Link: https://lore.kernel.org/r/20210216110645.1087321-1-cohuck@redhat.com
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5db554f688d70f1f69312233452aac31997f298b
Author: Sergey Senozhatsky <senozhatsky@chromium.org>
Date:   Thu Nov 5 10:47:44 2020 +0900

    drm/virtio: use kvmalloc for large allocations
    
    commit ea86f3defd55f141a44146e66cbf8ffb683d60da upstream.
    
    We observed that some of virtio_gpu_object_shmem_init() allocations
    can be rather costly - order 6 - which can be difficult to fulfill
    under memory pressure conditions. Switch to kvmalloc_array() in
    virtio_gpu_object_shmem_init() and let the kernel vmalloc the entries
    array.
    
    Signed-off-by: Sergey Senozhatsky <senozhatsky@chromium.org>
    Link: http://patchwork.freedesktop.org/patch/msgid/20201105014744.1662226-1-senozhatsky@chromium.org
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Doug Horn <doughorn@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf0eafb9d3c1323e5036d63068387a706268553c
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Wed Feb 24 12:07:50 2021 -0800

    hugetlb: fix update_and_free_page contig page struct assumption
    
    commit dbfee5aee7e54f83d96ceb8e3e80717fac62ad63 upstream.
    
    page structs are not guaranteed to be contiguous for gigantic pages.  The
    routine update_and_free_page can encounter a gigantic page, yet it assumes
    page structs are contiguous when setting page flags in subpages.
    
    If update_and_free_page encounters non-contiguous page structs, we can see
    “BUG: Bad page state in process …” errors.
    
    Non-contiguous page structs are generally not an issue.  However, they can
    exist with a specific kernel configuration and hotplug operations.  For
    example: Configure the kernel with CONFIG_SPARSEMEM and
    !CONFIG_SPARSEMEM_VMEMMAP.  Then, hotplug add memory for the area where
    the gigantic page will be allocated.  Zi Yan outlined steps to reproduce
    here [1].
    
    [1] https://lore.kernel.org/linux-mm/16F7C58B-4D79-41C5-9B64-A1A1628F4AF2@nvidia.com/
    
    Link: https://lkml.kernel.org/r/20210217184926.33567-1-mike.kravetz@oracle.com
    Fixes: 944d9fec8d7a ("hugetlb: add support for gigantic page allocation at runtime")
    Signed-off-by: Zi Yan <ziy@nvidia.com>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Zi Yan <ziy@nvidia.com>
    Cc: Davidlohr Bueso <dbueso@suse.de>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Joao Martins <joao.m.martins@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>

commit 87d8073e0a0b01e61c2d4ac00e21b4b785cd182f
Author: Rolf Eike Beer <eb@emlix.com>
Date:   Thu Mar 4 08:26:28 2021 +0100

    scripts: set proper OpenSSL include dir also for sign-file
    
    commit fe968c41ac4f4ec9ffe3c4cf16b72285f5e9674f upstream.
    
    Fixes: 2cea4a7a1885 ("scripts: use pkg-config to locate libcrypto")
    Signed-off-by: Rolf Eike Beer <eb@emlix.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3de3502df71eebce842135d1e8f2f9a374ff910
Author: Rolf Eike Beer <eb@emlix.com>
Date:   Thu Mar 4 08:25:01 2021 +0100

    scripts: use pkg-config to locate libcrypto
    
    commit 2cea4a7a1885bd0c765089afc14f7ff0eb77864e upstream.
    
    Otherwise build fails if the headers are not in the default location. While at
    it also ask pkg-config for the libs, with fallback to the existing value.
    
    Signed-off-by: Rolf Eike Beer <eb@emlix.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 643a70018c7287af9a79133aa6819cbb03f976e0
Author: Lech Perczak <lech.perczak@gmail.com>
Date:   Tue Feb 23 19:34:56 2021 +0100

    net: usb: qmi_wwan: support ZTE P685M modem
    
    commit 88eee9b7b42e69fb622ddb3ff6f37e8e4347f5b2 upstream.
    
    Now that interface 3 in "option" driver is no longer mapped, add device
    ID matching it to qmi_wwan.
    
    The modem is used inside ZTE MF283+ router and carriers identify it as
    such.
    Interface mapping is:
    0: QCDM, 1: AT (PCUI), 2: AT (Modem), 3: QMI, 4: ADB
    
    T:  Bus=02 Lev=02 Prnt=02 Port=05 Cnt=01 Dev#=  3 Spd=480  MxCh= 0
    D:  Ver= 2.01 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=19d2 ProdID=1275 Rev=f0.00
    S:  Manufacturer=ZTE,Incorporated
    S:  Product=ZTE Technologies MSM
    S:  SerialNumber=P685M510ZTED0000CP&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&0
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=87(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Lech Perczak <lech.perczak@gmail.com>
    Link: https://lore.kernel.org/r/20210223183456.6377-1-lech.perczak@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 879189730c74006d7881da82664eec50a275484d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Mar 3 18:22:57 2021 +0100

    Linux 4.14.223
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210302122237.974772983@linuxfoundation.org
    Link: https://lore.kernel.org/r/20210301193533.081071873@linuxfoundation.org
    Link: https://lore.kernel.org/r/20210302192539.408045707@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc8107395187f9848e13a1e5371ea4b8d7f570b6
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Fri Jan 22 17:19:31 2021 +0200

    dm era: Update in-core bitset after committing the metadata
    
    commit 2099b145d77c1d53f5711f029c37cc537897cee6 upstream.
    
    In case of a system crash, dm-era might fail to mark blocks as written
    in its metadata, although the corresponding writes to these blocks were
    passed down to the origin device and completed successfully.
    
    Consider the following sequence of events:
    
    1. We write to a block that has not been yet written in the current era
    2. era_map() checks the in-core bitmap for the current era and sees
       that the block is not marked as written.
    3. The write is deferred for submission after the metadata have been
       updated and committed.
    4. The worker thread processes the deferred write
       (process_deferred_bios()) and marks the block as written in the
       in-core bitmap, **before** committing the metadata.
    5. The worker thread starts committing the metadata.
    6. We do more writes that map to the same block as the write of step (1)
    7. era_map() checks the in-core bitmap and sees that the block is marked
       as written, **although the metadata have not been committed yet**.
    8. These writes are passed down to the origin device immediately and the
       device reports them as completed.
    9. The system crashes, e.g., power failure, before the commit from step
       (5) finishes.
    
    When the system recovers and we query the dm-era target for the list of
    written blocks it doesn't report the aforementioned block as written,
    although the writes of step (6) completed successfully.
    
    The issue is that era_map() decides whether to defer or not a write
    based on non committed information. The root cause of the bug is that we
    update the in-core bitmap, **before** committing the metadata.
    
    Fix this by updating the in-core bitmap **after** successfully
    committing the metadata.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a1ae9fe245305f60894a9dd676d156d71b7b4fa
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Feb 23 14:18:58 2021 +0100

    net: icmp: pass zeroed opts from icmp{,v6}_ndo_send before sending
    
    commit ee576c47db60432c37e54b1e2b43a8ca6d3a8dca upstream.
    
    The icmp{,v6}_send functions make all sorts of use of skb->cb, casting
    it with IPCB or IP6CB, assuming the skb to have come directly from the
    inet layer. But when the packet comes from the ndo layer, especially
    when forwarded, there's no telling what might be in skb->cb at that
    point. As a result, the icmp sending code risks reading bogus memory
    contents, which can result in nasty stack overflows such as this one
    reported by a user:
    
        panic+0x108/0x2ea
        __stack_chk_fail+0x14/0x20
        __icmp_send+0x5bd/0x5c0
        icmp_ndo_send+0x148/0x160
    
    In icmp_send, skb->cb is cast with IPCB and an ip_options struct is read
    from it. The optlen parameter there is of particular note, as it can
    induce writes beyond bounds. There are quite a few ways that can happen
    in __ip_options_echo. For example:
    
        // sptr/skb are attacker-controlled skb bytes
        sptr = skb_network_header(skb);
        // dptr/dopt points to stack memory allocated by __icmp_send
        dptr = dopt->__data;
        // sopt is the corrupt skb->cb in question
        if (sopt->rr) {
            optlen  = sptr[sopt->rr+1]; // corrupt skb->cb + skb->data
            soffset = sptr[sopt->rr+2]; // corrupt skb->cb + skb->data
            // this now writes potentially attacker-controlled data, over
            // flowing the stack:
            memcpy(dptr, sptr+sopt->rr, optlen);
        }
    
    In the icmpv6_send case, the story is similar, but not as dire, as only
    IP6CB(skb)->iif and IP6CB(skb)->dsthao are used. The dsthao case is
    worse than the iif case, but it is passed to ipv6_find_tlv, which does
    a bit of bounds checking on the value.
    
    This is easy to simulate by doing a `memset(skb->cb, 0x41,
    sizeof(skb->cb));` before calling icmp{,v6}_ndo_send, and it's only by
    good fortune and the rarity of icmp sending from that context that we've
    avoided reports like this until now. For example, in KASAN:
    
        BUG: KASAN: stack-out-of-bounds in __ip_options_echo+0xa0e/0x12b0
        Write of size 38 at addr ffff888006f1f80e by task ping/89
        CPU: 2 PID: 89 Comm: ping Not tainted 5.10.0-rc7-debug+ #5
        Call Trace:
         dump_stack+0x9a/0xcc
         print_address_description.constprop.0+0x1a/0x160
         __kasan_report.cold+0x20/0x38
         kasan_report+0x32/0x40
         check_memory_region+0x145/0x1a0
         memcpy+0x39/0x60
         __ip_options_echo+0xa0e/0x12b0
         __icmp_send+0x744/0x1700
    
    Actually, out of the 4 drivers that do this, only gtp zeroed the cb for
    the v4 case, while the rest did not. So this commit actually removes the
    gtp-specific zeroing, while putting the code where it belongs in the
    shared infrastructure of icmp{,v6}_ndo_send.
    
    This commit fixes the issue by passing an empty IPCB or IP6CB along to
    the functions that actually do the work. For the icmp_send, this was
    already trivial, thanks to __icmp_send providing the plumbing function.
    For icmpv6_send, this required a tiny bit of refactoring to make it
    behave like the v4 case, after which it was straight forward.
    
    Fixes: a2b78e9b2cac ("sunvnet: generate ICMP PTMUD messages for smaller port MTUs")
    Reported-by: SinYu <liuxyon@gmail.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/netdev/CAF=yD-LOF116aHub6RMe8vB8ZpnrrnoTdqhobEx+bvoA8AsP0w@mail.gmail.com/T/
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Link: https://lore.kernel.org/r/20210223131858.72082-1-Jason@zx2c4.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b27cd6a76562c6ec95386cd39e0fb3821fa7106
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Wed Feb 3 15:51:09 2021 +0200

    ipv6: silence compilation warning for non-IPV6 builds
    
    commit 1faba27f11c8da244e793546a1b35a9b1da8208e upstream.
    
    The W=1 compilation of allmodconfig generates the following warning:
    
    net/ipv6/icmp.c:448:6: warning: no previous prototype for 'icmp6_send' [-Wmissing-prototypes]
      448 | void icmp6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info,
          |      ^~~~~~~~~~
    
    Fix it by providing function declaration for builds with ipv6 as a module.
    
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbf552f23741216e9406649a1b3321b65f5bfb4a
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Jun 19 12:02:59 2020 -0700

    ipv6: icmp6: avoid indirect call for icmpv6_send()
    
    commit cc7a21b6fbd945f8d8f61422ccd27203c1fafeb7 upstream.
    
    If IPv6 is builtin, we do not need an expensive indirect call
    to reach icmp6_send().
    
    v2: put inline keyword before the type to avoid sparse warnings.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 428df61b4c7efcc3b3547770938d5dd1546d8579
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Feb 11 20:47:07 2020 +0100

    sunvnet: use icmp_ndo_send helper
    
    commit 67c9a7e1e3ac491b5df018803639addc36f154ba upstream.
    
    Because sunvnet is calling icmp from network device context, it should use
    the ndo helper so that the rate limiting applies correctly. While we're
    at it, doing the additional route lookup before calling icmp_ndo_send is
    superfluous, since this is the job of the icmp code in the first place.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: Shannon Nelson <shannon.nelson@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec2609cfd6efc4198583b0f5817925258edd65ce
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Feb 11 20:47:06 2020 +0100

    gtp: use icmp_ndo_send helper
    
    commit e0fce6f945a26d4e953a147fe7ca11410322c9fe upstream.
    
    Because gtp is calling icmp from network device context, it should use
    the ndo helper so that the rate limiting applies correctly.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: Harald Welte <laforge@gnumonks.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c78d9bd192dc873136c5b96dbe2184b993ff16df
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Feb 25 18:05:35 2020 +0800

    icmp: allow icmpv6_ndo_send to work with CONFIG_IPV6=n
    
    commit a8e41f6033a0c5633d55d6e35993c9e2005d872f upstream.
    
    The icmpv6_send function has long had a static inline implementation
    with an empty body for CONFIG_IPV6=n, so that code calling it doesn't
    need to be ifdef'd. The new icmpv6_ndo_send function, which is intended
    for drivers as a drop-in replacement with an identical function
    signature, should follow the same pattern. Without this patch, drivers
    that used to work with CONFIG_IPV6=n now result in a linker error.
    
    Cc: Chen Zhou <chenzhou10@huawei.com>
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 0b41713b6066 ("icmp: introduce helper for nat'd source address in network device context")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b35be5c706f0c6f5c82a9599f3c591bd5c754c97
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Tue Feb 11 20:47:05 2020 +0100

    icmp: introduce helper for nat'd source address in network device context
    
    commit 0b41713b606694257b90d61ba7e2712d8457648b upstream.
    
    This introduces a helper function to be called only by network drivers
    that wraps calls to icmp[v6]_send in a conntrack transformation, in case
    NAT has been used. We don't want to pollute the non-driver path, though,
    so we introduce this as a helper to be called by places that actually
    make use of this, as suggested by Florian.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Cc: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bc1bef32a3a29789ea9ad22dea7f663ae209557
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Thu Feb 11 16:22:43 2021 +0200

    dm era: only resize metadata in preresume
    
    commit cca2c6aebe86f68103a8615074b3578e854b5016 upstream.
    
    Metadata resize shouldn't happen in the ctr. The ctr loads a temporary
    (inactive) table that will only become active upon resume. That is why
    resize should always be done in terms of resume. Otherwise a load (ctr)
    whose inactive table never becomes active will incorrectly resize the
    metadata.
    
    Also, perform the resize directly in preresume, instead of using the
    worker to do it.
    
    The worker might run other metadata operations, e.g., it could start
    digestion, before resizing the metadata. These operations will end up
    using the old size.
    
    This could lead to errors, like:
    
      device-mapper: era: metadata_digest_transcribe_writeset: dm_array_set_value failed
      device-mapper: era: process_old_eras: digest step failed, stopping digestion
    
    The reason of the above error is that the worker started the digestion
    of the archived writeset using the old, larger size.
    
    As a result, metadata_digest_transcribe_writeset tried to write beyond
    the end of the era array.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d29c37ef126caf1c53680848dde34ca1af111eb3
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Fri Jan 22 17:22:04 2021 +0200

    dm era: Reinitialize bitset cache before digesting a new writeset
    
    commit 2524933307fd0036d5c32357c693c021ab09a0b0 upstream.
    
    In case of devices with at most 64 blocks, the digestion of consecutive
    eras uses the writeset of the first era as the writeset of all eras to
    digest, leading to lost writes. That is, we lose the information about
    what blocks were written during the affected eras.
    
    The digestion code uses a dm_disk_bitset object to access the archived
    writesets. This structure includes a one word (64-bit) cache to reduce
    the number of array lookups.
    
    This structure is initialized only once, in metadata_digest_start(),
    when we kick off digestion.
    
    But, when we insert a new writeset into the writeset tree, before the
    digestion of the previous writeset is done, or equivalently when there
    are multiple writesets in the writeset tree to digest, then all these
    writesets are digested using the same cache and the cache is not
    re-initialized when moving from one writeset to the next.
    
    For devices with more than 64 blocks, i.e., the size of the cache, the
    cache is indirectly invalidated when we move to a next set of blocks, so
    we avoid the bug.
    
    But for devices with at most 64 blocks we end up using the same cached
    data for digesting all archived writesets, i.e., the cache is loaded
    when digesting the first writeset and it never gets reloaded, until the
    digestion is done.
    
    As a result, the writeset of the first era to digest is used as the
    writeset of all the following archived eras, leading to lost writes.
    
    Fix this by reinitializing the dm_disk_bitset structure, and thus
    invalidating the cache, every time the digestion code starts digesting a
    new writeset.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a790cfeb8bc89e2bac00b4a85793f8955e8f0c6
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Fri Jan 22 17:25:55 2021 +0200

    dm era: Use correct value size in equality function of writeset tree
    
    commit 64f2d15afe7b336aafebdcd14cc835ecf856df4b upstream.
    
    Fix the writeset tree equality test function to use the right value size
    when comparing two btree values.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Reviewed-by: Ming-Hung Tsai <mtsai@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16028d62c01c2f2e81be13208d4a7139a5ca143d
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Fri Jan 22 17:25:54 2021 +0200

    dm era: Fix bitset memory leaks
    
    commit 904e6b266619c2da5c58b5dce14ae30629e39645 upstream.
    
    Deallocate the memory allocated for the in-core bitsets when destroying
    the target and in error paths.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Reviewed-by: Ming-Hung Tsai <mtsai@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f266ff63442efbabc1d2c17b5b3e8637cd6f9734
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Fri Jan 22 17:25:53 2021 +0200

    dm era: Verify the data block size hasn't changed
    
    commit c8e846ff93d5eaa5384f6f325a1687ac5921aade upstream.
    
    dm-era doesn't support changing the data block size of existing devices,
    so check explicitly that the requested block size for a new target
    matches the one stored in the metadata.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Reviewed-by: Ming-Hung Tsai <mtsai@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd3475714be55c6334a4221b63899c22ef2e18b9
Author: Nikos Tsironis <ntsironis@arrikto.com>
Date:   Fri Jan 22 17:19:30 2021 +0200

    dm era: Recover committed writeset after crash
    
    commit de89afc1e40fdfa5f8b666e5d07c43d21a1d3be0 upstream.
    
    Following a system crash, dm-era fails to recover the committed writeset
    for the current era, leading to lost writes. That is, we lose the
    information about what blocks were written during the affected era.
    
    dm-era assumes that the writeset of the current era is archived when the
    device is suspended. So, when resuming the device, it just moves on to
    the next era, ignoring the committed writeset.
    
    This assumption holds when the device is properly shut down. But, when
    the system crashes, the code that suspends the target never runs, so the
    writeset for the current era is not archived.
    
    There are three issues that cause the committed writeset to get lost:
    
    1. dm-era doesn't load the committed writeset when opening the metadata
    2. The code that resizes the metadata wipes the information about the
       committed writeset (assuming it was loaded at step 1)
    3. era_preresume() starts a new era, without taking into account that
       the current era might not have been archived, due to a system crash.
    
    To fix this:
    
    1. Load the committed writeset when opening the metadata
    2. Fix the code that resizes the metadata to make sure it doesn't wipe
       the loaded writeset
    3. Fix era_preresume() to check for a loaded writeset and archive it,
       before starting a new era.
    
    Fixes: eec40579d84873 ("dm: add era target")
    Cc: stable@vger.kernel.org # v3.15+
    Signed-off-by: Nikos Tsironis <ntsironis@arrikto.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 234ff4b8fa70b67877d92e0e267238107f30ae86
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Feb 5 13:50:41 2021 -0500

    gfs2: Don't skip dlm unlock if glock has an lvb
    
    commit 78178ca844f0eb88f21f31c7fde969384be4c901 upstream.
    
    Patch fb6791d100d1 was designed to allow gfs2 to unmount quicker by
    skipping the step where it tells dlm to unlock glocks in EX with lvbs.
    This was done because when gfs2 unmounts a file system, it destroys the
    dlm lockspace shortly after it destroys the glocks so it doesn't need to
    unlock them all: the unlock is implied when the lockspace is destroyed
    by dlm.
    
    However, that patch introduced a use-after-free in dlm: as part of its
    normal dlm_recoverd process, it can call ls_recovery to recover dead
    locks. In so doing, it can call recover_rsbs which calls recover_lvb for
    any mastered rsbs. Func recover_lvb runs through the list of lkbs queued
    to the given rsb (if the glock is cached but unlocked, it will still be
    queued to the lkb, but in NL--Unlocked--mode) and if it has an lvb,
    copies it to the rsb, thus trying to preserve the lkb. However, when
    gfs2 skips the dlm unlock step, it frees the glock and its lvb, which
    means dlm's function recover_lvb references the now freed lvb pointer,
    copying the freed lvb memory to the rsb.
    
    This patch changes the check in gdlm_put_lock so that it calls
    dlm_unlock for all glocks that contain an lvb pointer.
    
    Fixes: fb6791d100d1 ("GFS2: skip dlm_unlock calls in unmount")
    Cc: stable@vger.kernel.org # v3.8+
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9538aaacbcf1370a3aa5299ef8aac1cd750b4f9a
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Jul 20 02:21:51 2020 +0100

    sparc32: fix a user-triggerable oops in clear_user()
    
    commit 7780918b36489f0b2f9a3749d7be00c2ceaec513 upstream.
    
    Back in 2.1.29 the clear_user() guts (__bzero()) had been merged
    with memset().  Unfortunately, while all exception handlers had been
    copied, one of the exception table entries got lost.  As the result,
    clear_user() starting at 128*n bytes before the end of page and
    spanning between 8 and 127 bytes into the next page would oops when
    the second page is unmapped.  It's trivial to reproduce - all
    it takes is
    
    main()
    {
            int fd = open("/dev/zero", O_RDONLY);
            char *p = mmap(NULL, 16384, PROT_READ|PROT_WRITE,
                            MAP_PRIVATE|MAP_ANON, -1, 0);
            munmap(p + 8192, 8192);
            read(fd, p + 8192 - 128, 192);
    }
    
    which had been oopsing since March 1997.  Says something about
    the quality of test coverage... ;-/  And while today sparc32 port
    is nearly dead, back in '97 it had been very much alive; in fact,
    sparc64 had only been in mainline for 3 months by that point...
    
    Cc: stable@kernel.org
    Fixes: v2.1.29
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9983c1721ceae9d55d16e487ea0badee45476e72
Author: Chao Yu <yuchao0@huawei.com>
Date:   Wed Dec 16 17:15:23 2020 +0800

    f2fs: fix out-of-repair __setattr_copy()
    
    commit 2562515f0ad7342bde6456602c491b64c63fe950 upstream.
    
    __setattr_copy() was copied from setattr_copy() in fs/attr.c, there is
    two missing patches doesn't cover this inner function, fix it.
    
    Commit 7fa294c8991c ("userns: Allow chown and setgid preservation")
    Commit 23adbe12ef7d ("fs,userns: Change inode_capable to capable_wrt_inode_uidgid")
    
    Fixes: fbfa2cc58d53 ("f2fs: add file operations")
    Cc: stable@vger.kernel.org
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf1194132aa04e3ec1270a0582c2e42306b2c2be
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Wed Feb 10 11:48:23 2021 +0800

    printk: fix deadlock when kernel panic
    
    commit 8a8109f303e25a27f92c1d8edd67d7cbbc60a4eb upstream.
    
    printk_safe_flush_on_panic() caused the following deadlock on our
    server:
    
    CPU0:                                         CPU1:
    panic                                         rcu_dump_cpu_stacks
      kdump_nmi_shootdown_cpus                      nmi_trigger_cpumask_backtrace
        register_nmi_handler(crash_nmi_callback)      printk_safe_flush
                                                        __printk_safe_flush
                                                          raw_spin_lock_irqsave(&read_lock)
        // send NMI to other processors
        apic_send_IPI_allbutself(NMI_VECTOR)
                                                            // NMI interrupt, dead loop
                                                            crash_nmi_callback
      printk_safe_flush_on_panic
        printk_safe_flush
          __printk_safe_flush
            // deadlock
            raw_spin_lock_irqsave(&read_lock)
    
    DEADLOCK: read_lock is taken on CPU1 and will never get released.
    
    It happens when panic() stops a CPU by NMI while it has been in
    the middle of printk_safe_flush().
    
    Handle the lock the same way as logbuf_lock. The printk_safe buffers
    are flushed only when both locks can be safely taken. It can avoid
    the deadlock _in this particular case_ at expense of losing contents
    of printk_safe buffers.
    
    Note: It would actually be safe to re-init the locks when all CPUs were
          stopped by NMI. But it would require passing this information
          from arch-specific code. It is not worth the complexity.
          Especially because logbuf_lock and printk_safe buffers have been
          obsoleted by the lockless ring buffer.
    
    Fixes: cf9b1106c81c ("printk/nmi: flush NMI messages on the system panic")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Cc: <stable@vger.kernel.org>
    Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Link: https://lore.kernel.org/r/20210210034823.64867-1-songmuchun@bytedance.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f189a1a9690b9a1e456992a095fb46487ddeb8f
Author: Maxim Kiselev <bigunclemax@gmail.com>
Date:   Wed Feb 17 14:10:00 2021 +0100

    gpio: pcf857x: Fix missing first interrupt
    
    commit a8002a35935aaefcd6a42ad3289f62bab947f2ca upstream.
    
    If no n_latch value will be provided at driver probe then all pins will
    be used as an input:
    
        gpio->out = ~n_latch;
    
    In that case initial state for all pins is "one":
    
        gpio->status = gpio->out;
    
    So if pcf857x IRQ happens with change pin value from "zero" to "one"
    then we miss it, because of "one" from IRQ and "one" from initial state
    leaves corresponding pin unchanged:
    change = (gpio->status ^ status) & gpio->irq_enabled;
    
    The right solution will be to read actual state at driver probe.
    
    Cc: stable@vger.kernel.org
    Fixes: 6e20a0a429bd ("gpio: pcf857x: enable gpio_to_irq() support")
    Signed-off-by: Maxim Kiselev <bigunclemax@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d691cbde61271db65e777d0c690e2cc1e198f946
Author: Frank Li <Frank.Li@nxp.com>
Date:   Wed Feb 10 12:19:33 2021 -0600

    mmc: sdhci-esdhc-imx: fix kernel panic when remove module
    
    commit a56f44138a2c57047f1ea94ea121af31c595132b upstream.
    
    In sdhci_esdhc_imx_remove() the SDHCI_INT_STATUS in read. Under some
    circumstances, this may be done while the device is runtime suspended,
    triggering the below splat.
    
    Fix the problem by adding a pm_runtime_get_sync(), before reading the
    register, which will turn on clocks etc making the device accessible again.
    
    [ 1811.323148] mmc1: card aaaa removed
    [ 1811.347483] Internal error: synchronous external abort: 96000210 [#1] PREEMPT SMP
    [ 1811.354988] Modules linked in: sdhci_esdhc_imx(-) sdhci_pltfm sdhci cqhci mmc_block mmc_core [last unloaded: mmc_core]
    [ 1811.365726] CPU: 0 PID: 3464 Comm: rmmod Not tainted 5.10.1-sd-99871-g53835a2e8186 #5
    [ 1811.373559] Hardware name: Freescale i.MX8DXL EVK (DT)
    [ 1811.378705] pstate: 60000005 (nZCv daif -PAN -UAO -TCO BTYPE=--)
    [ 1811.384723] pc : sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.391090] lr : platform_drv_remove+0x2c/0x50
    [ 1811.395536] sp : ffff800012c7bcb0
    [ 1811.398855] x29: ffff800012c7bcb0 x28: ffff00002c72b900
    [ 1811.404181] x27: 0000000000000000 x26: 0000000000000000
    [ 1811.409497] x25: 0000000000000000 x24: 0000000000000000
    [ 1811.414814] x23: ffff0000042b3890 x22: ffff800009127120
    [ 1811.420131] x21: ffff00002c4c9580 x20: ffff0000042d0810
    [ 1811.425456] x19: ffff0000042d0800 x18: 0000000000000020
    [ 1811.430773] x17: 0000000000000000 x16: 0000000000000000
    [ 1811.436089] x15: 0000000000000004 x14: ffff000004019c10
    [ 1811.441406] x13: 0000000000000000 x12: 0000000000000020
    [ 1811.446723] x11: 0101010101010101 x10: 7f7f7f7f7f7f7f7f
    [ 1811.452040] x9 : fefefeff6364626d x8 : 7f7f7f7f7f7f7f7f
    [ 1811.457356] x7 : 78725e6473607372 x6 : 0000000080808080
    [ 1811.462673] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1811.467990] x3 : ffff800011ac1cb0 x2 : 0000000000000000
    [ 1811.473307] x1 : ffff8000091214d4 x0 : ffff8000133a0030
    [ 1811.478624] Call trace:
    [ 1811.481081]  sdhci_esdhc_imx_remove+0x28/0x15c [sdhci_esdhc_imx]
    [ 1811.487098]  platform_drv_remove+0x2c/0x50
    [ 1811.491198]  __device_release_driver+0x188/0x230
    [ 1811.495818]  driver_detach+0xc0/0x14c
    [ 1811.499487]  bus_remove_driver+0x5c/0xb0
    [ 1811.503413]  driver_unregister+0x30/0x60
    [ 1811.507341]  platform_driver_unregister+0x14/0x20
    [ 1811.512048]  sdhci_esdhc_imx_driver_exit+0x1c/0x3a8 [sdhci_esdhc_imx]
    [ 1811.518495]  __arm64_sys_delete_module+0x19c/0x230
    [ 1811.523291]  el0_svc_common.constprop.0+0x78/0x1a0
    [ 1811.528086]  do_el0_svc+0x24/0x90
    [ 1811.531405]  el0_svc+0x14/0x20
    [ 1811.534461]  el0_sync_handler+0x1a4/0x1b0
    [ 1811.538474]  el0_sync+0x174/0x180
    [ 1811.541801] Code: a9025bf5 f9403e95 f9400ea0 9100c000 (b9400000)
    [ 1811.547902] ---[ end trace 3fb1a3bd48ff7be5 ]---
    
    Signed-off-by: Frank Li <Frank.Li@nxp.com>
    Cc: stable@vger.kernel.org # v4.0+
    Link: https://lore.kernel.org/r/20210210181933.29263-1-Frank.Li@nxp.com
    [Ulf: Clarified the commit message a bit]
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbf3c9e3a5c140284b19719766f34d3fef4a9a97
Author: Fangrui Song <maskray@google.com>
Date:   Fri Jan 15 11:52:22 2021 -0800

    module: Ignore _GLOBAL_OFFSET_TABLE_ when warning for undefined symbols
    
    commit ebfac7b778fac8b0e8e92ec91d0b055f046b4604 upstream.
    
    clang-12 -fno-pic (since
    https://github.com/llvm/llvm-project/commit/a084c0388e2a59b9556f2de0083333232da3f1d6)
    can emit `call __stack_chk_fail@PLT` instead of `call __stack_chk_fail`
    on x86.  The two forms should have identical behaviors on x86-64 but the
    former causes GNU as<2.37 to produce an unreferenced undefined symbol
    _GLOBAL_OFFSET_TABLE_.
    
    (On x86-32, there is an R_386_PC32 vs R_386_PLT32 difference but the
    linker behavior is identical as far as Linux kernel is concerned.)
    
    Simply ignore _GLOBAL_OFFSET_TABLE_ for now, like what
    scripts/mod/modpost.c:ignore_undef_symbol does. This also fixes the
    problem for gcc/clang -fpie and -fpic, which may emit `call foo@PLT` for
    external function calls on x86.
    
    Note: ld -z defs and dynamic loaders do not error for unreferenced
    undefined symbols so the module loader is reading too much.  If we ever
    need to ignore more symbols, the code should be refactored to ignore
    unreferenced symbols.
    
    Cc: <stable@vger.kernel.org>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1250
    Link: https://sourceware.org/bugzilla/show_bug.cgi?id=27178
    Reported-by: Marco Elver <elver@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Marco Elver <elver@google.com>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aca6717a6cd154e33fcb8178a7872a311015c37e
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Mon Feb 1 16:20:40 2021 -0800

    libnvdimm/dimm: Avoid race between probe and available_slots_show()
    
    commit 7018c897c2f243d4b5f1b94bc6b4831a7eab80fb upstream
    
    Richard reports that the following test:
    
    (while true; do
         cat /sys/bus/nd/devices/nmem*/available_slots 2>&1 > /dev/null
     done) &
    
    while true; do
         for i in $(seq 0 4); do
             echo nmem$i > /sys/bus/nd/drivers/nvdimm/bind
         done
         for i in $(seq 0 4); do
             echo nmem$i > /sys/bus/nd/drivers/nvdimm/unbind
         done
     done
    
    ...fails with a crash signature like:
    
        divide error: 0000 [#1] SMP KASAN PTI
        RIP: 0010:nd_label_nfree+0x134/0x1a0 [libnvdimm]
        [..]
        Call Trace:
         available_slots_show+0x4e/0x120 [libnvdimm]
         dev_attr_show+0x42/0x80
         ? memset+0x20/0x40
         sysfs_kf_seq_show+0x218/0x410
    
    The root cause is that available_slots_show() consults driver-data, but
    fails to synchronize against device-unbind setting up a TOCTOU race to
    access uninitialized memory.
    
    Validate driver-data under the device-lock.
    
    Fixes: 4d88a97aa9e8 ("libnvdimm, nvdimm: dimm driver and base libnvdimm device-driver infrastructure")
    Cc: <stable@vger.kernel.org>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Coly Li <colyli@suse.com>
    Reported-by: Richard Palethorpe <rpalethorpe@suse.com>
    Acked-by: Richard Palethorpe <rpalethorpe@suse.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    [sudip: use device_lock()]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 214ffa3169aa51615afa828db7fb931f9423c25f
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Feb 1 21:47:20 2021 +0900

    usb: renesas_usbhs: Clear pipe running flag in usbhs_pkt_pop()
    
    commit 9917f0e3cdba7b9f1a23f70e3f70b1a106be54a8 upstream
    
    Should clear the pipe running flag in usbhs_pkt_pop(). Otherwise,
    we cannot use this pipe after dequeue was called while the pipe was
    running.
    
    Fixes: 8355b2b3082d ("usb: renesas_usbhs: fix the behavior of some usbhs_pkt_handle")
    Reported-by: Tho Vu <tho.vu.wh@renesas.com>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1612183640-8898-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d61abe34bd8261496ee94f9e0adf8ff8a6331b01
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:06 2021 -0800

    mm: hugetlb: fix a race between freeing and dissolving the page
    
    commit 7ffddd499ba6122b1a07828f023d1d67629aa017 upstream
    
    There is a race condition between __free_huge_page()
    and dissolve_free_huge_page().
    
      CPU0:                         CPU1:
    
      // page_count(page) == 1
      put_page(page)
        __free_huge_page(page)
                                    dissolve_free_huge_page(page)
                                      spin_lock(&hugetlb_lock)
                                      // PageHuge(page) && !page_count(page)
                                      update_and_free_page(page)
                                      // page is freed to the buddy
                                      spin_unlock(&hugetlb_lock)
          spin_lock(&hugetlb_lock)
          clear_page_huge_active(page)
          enqueue_huge_page(page)
          // It is wrong, the page is already freed
          spin_unlock(&hugetlb_lock)
    
    The race window is between put_page() and dissolve_free_huge_page().
    
    We should make sure that the page is already on the free list when it is
    dissolved.
    
    As a result __free_huge_page would corrupt page(s) already in the buddy
    allocator.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-4-songmuchun@bytedance.com
    Fixes: c8721bbbdd36 ("mm: memory-hotplug: enable memory hotplug to handle hugepage")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a2ca82c2a417dec95a25ebc9200ef1e366adaf3
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Wed Feb 24 12:07:54 2021 -0800

    hugetlb: fix copy_huge_page_from_user contig page struct assumption
    
    commit 3272cfc2525b3a2810a59312d7a1e6f04a0ca3ef upstream.
    
    page structs are not guaranteed to be contiguous for gigantic pages.  The
    routine copy_huge_page_from_user can encounter gigantic pages, yet it
    assumes page structs are contiguous when copying pages from user space.
    
    Since page structs for the target gigantic page are not contiguous, the
    data copied from user space could overwrite other pages not associated
    with the gigantic page and cause data corruption.
    
    Non-contiguous page structs are generally not an issue.  However, they can
    exist with a specific kernel configuration and hotplug operations.  For
    example: Configure the kernel with CONFIG_SPARSEMEM and
    !CONFIG_SPARSEMEM_VMEMMAP.  Then, hotplug add memory for the area where
    the gigantic page will be allocated.
    
    Link: https://lkml.kernel.org/r/20210217184926.33567-2-mike.kravetz@oracle.com
    Fixes: 8fb5debc5fcd ("userfaultfd: hugetlbfs: add hugetlb_mcopy_atomic_pte for userfaultfd support")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Zi Yan <ziy@nvidia.com>
    Cc: Davidlohr Bueso <dbueso@suse.de>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Joao Martins <joao.m.martins@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43b4c8a996ee8ae41e21d2df3f3ba268e1b4b18a
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Jan 20 00:51:13 2021 -0800

    fs/affs: release old buffer head on error path
    
    commit 70779b897395b330ba5a47bed84f94178da599f9 upstream.
    
    The reference count of the old buffer head should be decremented on path
    that fails to get the new buffer head.
    
    Fixes: 6b4657667ba0 ("fs/affs: add rename exchange")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba77ce4514ef40747175a7e1b5ecfd0d7042f613
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 01:18:47 2021 -0800

    mtd: spi-nor: hisi-sfc: Put child node np on error path
    
    commit fe6653460ee7a7dbe0cd5fd322992af862ce5ab0 upstream.
    
    Put the child node np when it fails to get or register device.
    
    Fixes: e523f11141bd ("mtd: spi-nor: add hisilicon spi-nor flash controller driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    [ta: Add Fixes tag and Cc stable]
    Signed-off-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Link: https://lore.kernel.org/r/20210121091847.85362-1-bianpan2016@163.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfd3a6af76170e25f7f0bf668866db7533c1422a
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Sun Jan 24 13:49:38 2021 +0200

    watchdog: mei_wdt: request stop on unregister
    
    commit 740c0a57b8f1e36301218bf549f3c9cc833a60be upstream.
    
    The MEI bus has a special behavior on suspend it destroys
    all the attached devices, this is due to the fact that also
    firmware context is not persistent across power flows.
    
    If watchdog on MEI bus is ticking before suspending the firmware
    times out and reports that the OS is missing watchdog tick.
    Send the stop command to the firmware on watchdog unregistered
    to eliminate the false event on suspend.
    This does not make the things worse from the user-space perspective
    as a user-space should re-open watchdog device after
    suspending before this patch.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210124114938.373885-1-tomas.winkler@intel.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c48462c9a414c10c81ee4842fb632a75fd4247e
Author: He Zhe <zhe.he@windriver.com>
Date:   Tue Feb 23 16:25:34 2021 +0800

    arm64: uprobe: Return EOPNOTSUPP for AARCH32 instruction probing
    
    commit d47422d953e258ad587b5edf2274eb95d08bdc7d upstream.
    
    As stated in linux/errno.h, ENOTSUPP should never be seen by user programs.
    When we set up uprobe with 32-bit perf and arm64 kernel, we would see the
    following vague error without useful hint.
    
    The sys_perf_event_open() syscall returned with 524 (INTERNAL ERROR:
    strerror_r(524, [buf], 128)=22)
    
    Use EOPNOTSUPP instead to indicate such cases.
    
    Signed-off-by: He Zhe <zhe.he@windriver.com>
    Link: https://lore.kernel.org/r/20210223082535.48730-1-zhe.he@windriver.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96340196b29a09b19672abda83f8593900f17932
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Fri Jan 22 12:13:20 2021 +0100

    floppy: reintroduce O_NDELAY fix
    
    commit 8a0c014cd20516ade9654fc13b51345ec58e7be8 upstream.
    
    This issue was originally fixed in 09954bad4 ("floppy: refactor open()
    flags handling").
    
    The fix as a side-effect, however, introduce issue for open(O_ACCMODE)
    that is being used for ioctl-only open. I wrote a fix for that, but
    instead of it being merged, full revert of 09954bad4 was performed,
    re-introducing the O_NDELAY / O_NONBLOCK issue, and it strikes again.
    
    This is a forward-port of the original fix to current codebase; the
    original submission had the changelog below:
    
    ====
    Commit 09954bad4 ("floppy: refactor open() flags handling"), as a
    side-effect, causes open(/dev/fdX, O_ACCMODE) to fail. It turns out that
    this is being used setfdprm userspace for ioctl-only open().
    
    Reintroduce back the original behavior wrt !(FMODE_READ|FMODE_WRITE)
    modes, while still keeping the original O_NDELAY bug fixed.
    
    Link: https://lore.kernel.org/r/nycvar.YFH.7.76.2101221209060.5622@cbobk.fhfr.pm
    Cc: stable@vger.kernel.org
    Reported-by: Wim Osterholt <wim@djo.tudelft.nl>
    Tested-by: Wim Osterholt <wim@djo.tudelft.nl>
    Reported-and-tested-by: Kurt Garloff <kurt@garloff.de>
    Fixes: 09954bad4 ("floppy: refactor open() flags handling")
    Fixes: f2791e7ead ("Revert "floppy: refactor open() flags handling"")
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0121c6cb5434a41982d8f38514582df6beba153
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Dec 30 16:26:55 2020 -0800

    x86/reboot: Force all cpus to exit VMX root if VMX is supported
    
    commit ed72736183c45a413a8d6974dd04be90f514cb6b upstream.
    
    Force all CPUs to do VMXOFF (via NMI shootdown) during an emergency
    reboot if VMX is _supported_, as VMX being off on the current CPU does
    not prevent other CPUs from being in VMX root (post-VMXON).  This fixes
    a bug where a crash/panic reboot could leave other CPUs in VMX root and
    prevent them from being woken via INIT-SIPI-SIPI in the new kernel.
    
    Fixes: d176720d34c7 ("x86: disable VMX on all CPUs on reboot")
    Cc: stable@vger.kernel.org
    Suggested-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: David P. Reed <dpreed@deepplum.com>
    [sean: reworked changelog and further tweaked comment]
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20201231002702.2223707-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ce9fd90ae1d92e12659fcdfc96b6cc97f99cf80
Author: Martin Kaiser <martin@kaiser.cx>
Date:   Thu Feb 4 09:52:17 2021 +0100

    staging: rtl8188eu: Add Edimax EW-7811UN V2 to device table
    
    commit 7a8d2f1908a59003e55ef8691d09efb7fbc51625 upstream.
    
    The Edimax EW-7811UN V2 uses an RTL8188EU chipset and works with this
    driver.
    
    Signed-off-by: Martin Kaiser <martin@kaiser.cx>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210204085217.9743-1-martin@kaiser.cx
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ab1e40cbf893ede1d851377cbaa8e50339d8ef9
Author: Sabyrzhan Tasbolatov <snovitoll@gmail.com>
Date:   Tue Feb 9 16:26:12 2021 +0600

    drivers/misc/vmw_vmci: restrict too big queue size in qp_host_alloc_queue
    
    commit 2fd10bcf0310b9525b2af9e1f7aa9ddd87c3772e upstream.
    
    syzbot found WARNING in qp_broker_alloc[1] in qp_host_alloc_queue()
    when num_pages is 0x100001, giving queue_size + queue_page_size
    bigger than KMALLOC_MAX_SIZE for kzalloc(), resulting order >= MAX_ORDER
    condition.
    
    queue_size + queue_page_size=0x8000d8, where KMALLOC_MAX_SIZE=0x400000.
    
    [1]
    Call Trace:
     alloc_pages include/linux/gfp.h:547 [inline]
     kmalloc_order+0x40/0x130 mm/slab_common.c:837
     kmalloc_order_trace+0x15/0x70 mm/slab_common.c:853
     kmalloc_large include/linux/slab.h:481 [inline]
     __kmalloc+0x257/0x330 mm/slub.c:3959
     kmalloc include/linux/slab.h:557 [inline]
     kzalloc include/linux/slab.h:682 [inline]
     qp_host_alloc_queue drivers/misc/vmw_vmci/vmci_queue_pair.c:540 [inline]
     qp_broker_create drivers/misc/vmw_vmci/vmci_queue_pair.c:1351 [inline]
     qp_broker_alloc+0x936/0x2740 drivers/misc/vmw_vmci/vmci_queue_pair.c:1739
    
    Reported-by: syzbot+15ec7391f3d6a1a7cc7d@syzkaller.appspotmail.com
    Signed-off-by: Sabyrzhan Tasbolatov <snovitoll@gmail.com>
    Link: https://lore.kernel.org/r/20210209102612.2112247-1-snovitoll@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef2aad03cdd2f43081d90056dd9a59530c97c46f
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Mon Jan 11 17:28:39 2021 +0000

    seccomp: Add missing return in non-void function
    
    commit 04b38d012556199ba4c31195940160e0c44c64f0 upstream.
    
    We don't actually care about the value, since the kernel will panic
    before that; but a value should nonetheless be returned, otherwise the
    compiler will complain.
    
    Fixes: 8112c4f140fa ("seccomp: remove 2-phase API")
    Cc: stable@vger.kernel.org # 4.7+
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20210111172839.640914-1-paul@crapouillou.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b54b34ed34add8d04f6b36ba9baf0e68ee374704
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Mon Dec 14 20:02:28 2020 +0000

    crypto: sun4i-ss - handle BigEndian for cipher
    
    commit 5ab6177fa02df15cd8a02a1f1fb361d2d5d8b946 upstream.
    
    Ciphers produce invalid results on BE.
    Key and IV need to be written in LE.
    
    Fixes: 6298e948215f2 ("crypto: sunxi-ss - Add Allwinner Security System crypto accelerator")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbabf5187c82d72184aa8478e70bc19d19481e08
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Mon Dec 14 20:02:26 2020 +0000

    crypto: sun4i-ss - checking sg length is not sufficient
    
    commit 7bdcd851fa7eb66e8922aa7f6cba9e2f2427a7cf upstream.
    
    The optimized cipher function need length multiple of 4 bytes.
    But it get sometimes odd length.
    This is due to SG data could be stored with an offset.
    
    So the fix is to check also if the offset is aligned with 4 bytes.
    Fixes: 6298e948215f2 ("crypto: sunxi-ss - Add Allwinner Security System crypto accelerator")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61a9e9721ef77c9e220c89366be1d952e614f4fb
Author: Filipe Manana <fdmanana@suse.com>
Date:   Thu Feb 4 14:35:44 2021 +0000

    btrfs: fix extent buffer leak on failure to copy root
    
    commit 72c9925f87c8b74f36f8e75a4cd93d964538d3ca upstream.
    
    At btrfs_copy_root(), if the call to btrfs_inc_ref() fails we end up
    returning without unlocking and releasing our reference on the extent
    buffer named "cow" we previously allocated with btrfs_alloc_tree_block().
    
    So fix that by unlocking the extent buffer and dropping our reference on
    it before returning.
    
    Fixes: be20aa9dbadc8c ("Btrfs: Add mount option to turn off data cow")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd1a184ef65ac9dcde8ef7463bfba9f9cd1005f
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Jan 14 14:02:42 2021 -0500

    btrfs: fix reloc root leak with 0 ref reloc roots on recovery
    
    commit c78a10aebb275c38d0cfccae129a803fe622e305 upstream.
    
    When recovering a relocation, if we run into a reloc root that has 0
    refs we simply add it to the reloc_control->reloc_roots list, and then
    clean it up later.  The problem with this is __del_reloc_root() doesn't
    do anything if the root isn't in the radix tree, which in this case it
    won't be because we never call __add_reloc_root() on the reloc_root.
    
    This exit condition simply isn't correct really.  During normal
    operation we can remove ourselves from the rb tree and then we're meant
    to clean up later at merge_reloc_roots() time, and this happens
    correctly.  During recovery we're depending on free_reloc_roots() to
    drop our references, but we're short-circuiting.
    
    Fix this by continuing to check if we're on the list and dropping
    ourselves from the reloc_control root list and dropping our reference
    appropriately.  Change the corresponding BUG_ON() to an ASSERT() that
    does the correct thing if we aren't in the rb tree.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea432c2b6a1aacc68ffdabef0f089aa76c898868
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Thu Jan 14 14:02:46 2021 -0500

    btrfs: abort the transaction if we fail to inc ref in btrfs_copy_root
    
    commit 867ed321f90d06aaba84e2c91de51cd3038825ef upstream.
    
    While testing my error handling patches, I added a error injection site
    at btrfs_inc_extent_ref, to validate the error handling I added was
    doing the correct thing.  However I hit a pretty ugly corruption while
    doing this check, with the following error injection stack trace:
    
    btrfs_inc_extent_ref
      btrfs_copy_root
        create_reloc_root
          btrfs_init_reloc_root
            btrfs_record_root_in_trans
              btrfs_start_transaction
                btrfs_update_inode
                  btrfs_update_time
                    touch_atime
                      file_accessed
                        btrfs_file_mmap
    
    This is because we do not catch the error from btrfs_inc_extent_ref,
    which in practice would be ENOMEM, which means we lose the extent
    references for a root that has already been allocated and inserted,
    which is the problem.  Fix this by aborting the transaction if we fail
    to do the reference modification.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00ba1e80107716349a13b8fcdaedb2de2ba59706
Author: Jarkko Sakkinen <jarkko@kernel.org>
Date:   Fri Jan 29 01:56:20 2021 +0200

    KEYS: trusted: Fix migratable=1 failing
    
    commit 8da7520c80468c48f981f0b81fc1be6599e3b0ad upstream.
    
    Consider the following transcript:
    
    $ keyctl add trusted kmk "new 32 blobauth=helloworld keyhandle=80000000 migratable=1" @u
    add_key: Invalid argument
    
    The documentation has the following description:
    
      migratable=   0|1 indicating permission to reseal to new PCR values,
                    default 1 (resealing allowed)
    
    The consequence is that "migratable=1" should succeed. Fix this by
    allowing this condition to pass instead of return -EINVAL.
    
    [*] Documentation/security/keys/trusted-encrypted.rst
    
    Cc: stable@vger.kernel.org
    Cc: "James E.J. Bottomley" <jejb@linux.ibm.com>
    Cc: Mimi Zohar <zohar@linux.ibm.com>
    Cc: David Howells <dhowells@redhat.com>
    Fixes: d00a1c72f7f4 ("keys: add new trusted key-type")
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8d093dd7bd1fd8ecc6a22775e114920aef836cb
Author: James Bottomley <James.Bottomley@HansenPartnership.com>
Date:   Thu Oct 1 11:09:21 2020 -0700

    tpm_tis: Fix check_locality for correct locality acquisition
    
    commit 3d9ae54af1d02a7c0edc55c77d7df2b921e58a87 upstream.
    
    The TPM TIS specification says the TPM signals the acquisition of locality
    when the TMP_ACCESS_REQUEST_USE bit goes to one *and* the
    TPM_ACCESS_REQUEST_USE bit goes to zero.  Currently we only check the
    former not the latter, so check both.  Adding the check on
    TPM_ACCESS_REQUEST_USE should fix the case where the locality is
    re-requested before the TPM has released it.  In this case the locality may
    get released briefly before it is reacquired, which causes all sorts of
    problems. However, with the added check, TPM_ACCESS_REQUEST_USE should
    remain 1 until the second request for the locality is granted.
    
    Cc: stable@ger.kernel.org
    Fixes: 27084efee0c3 ("[PATCH] tpm: driver for next generation TPM chips")
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8f66de31bd3d3d2280cc61a364263e9e84e76d09
Author: PeiSen Hou <pshou@realtek.com>
Date:   Tue Feb 2 10:30:22 2021 +0100

    ALSA: hda/realtek: modify EAPD in the ALC886
    
    commit 4841b8e6318a7f0ae57c4e5ec09032ea057c97a8 upstream.
    
    Modify 0x20 index 7 bit 5 to 1, make the 0x15 EAPD the same as 0x14.
    
    Signed-off-by: PeiSen Hou <pshou@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/e62c5058957f48d8b8953e97135ff108@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 285b361de94ed4ce753d3576828af5978c774d69
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Feb 8 13:53:16 2021 -0800

    usb: dwc3: gadget: Fix dep->interval for fullspeed interrupt
    
    commit 4b049f55ed95cd889bcdb3034fd75e1f01852b38 upstream.
    
    The dep->interval captures the number of frames/microframes per interval
    from bInterval. Fullspeed interrupt endpoint bInterval is the number of
    frames per interval and not 2^(bInterval - 1). So fix it here. This
    change is only for debugging purpose and should not affect the interrupt
    endpoint operation.
    
    Fixes: 72246da40f37 ("usb: Introduce DesignWare USB3 DRD Driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/1263b563dedc4ab8b0fb854fba06ce4bc56bd495.1612820995.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e96f432ac676397e2e739a5abc4521b9e2d7327b
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Feb 8 13:53:10 2021 -0800

    usb: dwc3: gadget: Fix setting of DEPCFG.bInterval_m1
    
    commit a1679af85b2ae35a2b78ad04c18bb069c37330cc upstream.
    
    Valid range for DEPCFG.bInterval_m1 is from 0 to 13, and it must be set
    to 0 when the controller operates in full-speed. See the programming
    guide for DEPCFG command section 3.2.2.1 (v3.30a).
    
    Fixes: 72246da40f37 ("usb: Introduce DesignWare USB3 DRD Driver")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/3f57026f993c0ce71498dbb06e49b3a47c4d0265.1612820995.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c9e4b0e881173e75dc28e9ba3b8a8a7f6303e60
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 28 12:35:23 2021 +0300

    USB: serial: mos7720: fix error code in mos7720_write()
    
    commit fea7372cbc40869876df0f045e367f6f97a1666c upstream.
    
    This code should return -ENOMEM if the kmalloc() fails but instead
    it returns success.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Fixes: 0f64478cbc7a ("USB: add USB serial mos7720 driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7eaffe55f3b14153c4467a0c32126d50becaf47
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 26 13:26:54 2021 +0300

    USB: serial: mos7840: fix error code in mos7840_write()
    
    commit a70aa7dc60099bbdcbd6faca42a915d80f31161e upstream.
    
    This should return -ENOMEM instead of 0 if the kmalloc() fails.
    
    Fixes: 3f5429746d91 ("USB: Moschip 7840 USB-Serial Driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dfccd96e73d2118360c48f8cdcf60872e0cf88c
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sat Jan 23 14:24:59 2021 +0000

    usb: musb: Fix runtime PM race in musb_queue_resume_work
    
    commit 0eaa1a3714db34a59ce121de5733c3909c529463 upstream.
    
    musb_queue_resume_work() would call the provided callback if the runtime
    PM status was 'active'. Otherwise, it would enqueue the request if the
    hardware was still suspended (musb->is_runtime_suspended is true).
    
    This causes a race with the runtime PM handlers, as it is possible to be
    in the case where the runtime PM status is not yet 'active', but the
    hardware has been awaken (PM resume function has been called).
    
    When hitting the race, the resume work was not enqueued, which probably
    triggered other bugs further down the stack. For instance, a telnet
    connection on Ingenic SoCs would result in a 50/50 chance of a
    segmentation fault somewhere in the musb code.
    
    Rework the code so that either we call the callback directly if
    (musb->is_runtime_suspended == 0), or enqueue the query otherwise.
    
    Fixes: ea2f35c01d5e ("usb: musb: Fix sleeping function called from invalid context for hdrc glue")
    Cc: stable@vger.kernel.org # v4.9+
    Tested-by: Tony Lindgren <tony@atomide.com>
    Reviewed-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Link: https://lore.kernel.org/r/20210123142502.16980-1-paul@crapouillou.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c101b031dcf8cfee8efad3a40a1bb459a8a01d0f
Author: Lech Perczak <lech.perczak@gmail.com>
Date:   Sun Feb 7 01:54:43 2021 +0100

    USB: serial: option: update interface mapping for ZTE P685M
    
    commit 6420a569504e212d618d4a4736e2c59ed80a8478 upstream.
    
    This patch prepares for qmi_wwan driver support for the device.
    Previously "option" driver mapped itself to interfaces 0 and 3 (matching
    ff/ff/ff), while interface 3 is in fact a QMI port.
    Interfaces 1 and 2 (matching ff/00/00) expose AT commands,
    and weren't supported previously at all.
    Without this patch, a possible conflict would exist if device ID was
    added to qmi_wwan driver for interface 3.
    
    Update and simplify device ID to match interfaces 0-2 directly,
    to expose QCDM (0), PCUI (1), and modem (2) ports and avoid conflict
    with QMI (3), and ADB (4).
    
    The modem is used inside ZTE MF283+ router and carriers identify it as
    such.
    Interface mapping is:
    0: QCDM, 1: AT (PCUI), 2: AT (Modem), 3: QMI, 4: ADB
    
    T:  Bus=02 Lev=02 Prnt=02 Port=05 Cnt=01 Dev#=  3 Spd=480  MxCh= 0
    D:  Ver= 2.01 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=19d2 ProdID=1275 Rev=f0.00
    S:  Manufacturer=ZTE,Incorporated
    S:  Product=ZTE Technologies MSM
    S:  SerialNumber=P685M510ZTED0000CP&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&0
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=87(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    E:  Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Cc: Johan Hovold <johan@kernel.org>
    Cc: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Lech Perczak <lech.perczak@gmail.com>
    Link: https://lore.kernel.org/r/20210207005443.12936-1-lech.perczak@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11b880c62e22adfa75cf09545e49042cddc22fc4
Author: Marcos Paulo de Souza <mpdesouza@suse.com>
Date:   Fri Feb 19 10:37:13 2021 -0800

    Input: i8042 - add ASUS Zenbook Flip to noselftest list
    
    commit b5d6e7ab7fe7d186878142e9fc1a05e4c3b65eb9 upstream.
    
    After commit 77b425399f6d ("Input: i8042 - use chassis info to skip
    selftest on Asus laptops"), all modern Asus laptops have the i8042
    selftest disabled. It has done by using chassys type "10" (laptop).
    
    The Asus Zenbook Flip suffers from similar suspend/resume issues, but
    it _sometimes_ work and sometimes it doesn't. Setting noselftest makes
    it work reliably. In this case, we need to add chassis type "31"
    (convertible) in order to avoid selftest in this device.
    
    Reported-by: Ludvig Norgren Guldhag <ludvigng@gmail.com>
    Signed-off-by: Marcos Paulo de Souza <mpdesouza@suse.com>
    Link: https://lore.kernel.org/r/20210219164638.761-1-mpdesouza@suse.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4799eaaf274efc5091c3ae94d6bfc9753b8edcd2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 17 12:21:10 2021 -0800

    Input: joydev - prevent potential read overflow in ioctl
    
    commit 182d679b2298d62bf42bb14b12a8067b8e17b617 upstream.
    
    The problem here is that "len" might be less than "joydev->nabs" so the
    loops which verfy abspam[i] and keypam[] might read beyond the buffer.
    
    Fixes: 999b874f4aa3 ("Input: joydev - validate axis/button maps before clobbering current ones")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YCyzR8WvFRw4HWw6@mwanda
    [dtor: additional check for len being even in joydev_handle_JSIOCSBTNMAP]
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aa61bd3263b8e96870be572ed13a91940bde2bf
Author: Olivier Crête <olivier.crete@ocrete.ca>
Date:   Fri Feb 5 11:59:08 2021 -0800

    Input: xpad - add support for PowerA Enhanced Wired Controller for Xbox Series X|S
    
    commit 42ffcd1dba1796bcda386eb6f260df9fc23c90af upstream.
    
    Signed-off-by: Olivier Crête <olivier.crete@ocrete.ca>
    Link: https://lore.kernel.org/r/20210204005318.615647-1-olivier.crete@collabora.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e42796ed9fdadbaee46c37c8dcd2892e844b3f2f
Author: jeffrey.lin <jeffrey.lin@rad-ic.com>
Date:   Tue Dec 15 10:50:12 2020 -0800

    Input: raydium_ts_i2c - do not send zero length
    
    commit fafd320ae51b9c72d371585b2501f86640ea7b7d upstream.
    
    Add default write command package to prevent i2c quirk error of zero
    data length as Raydium touch firmware update is executed.
    
    Signed-off-by: jeffrey.lin <jeffrey.lin@rad-ic.com>
    Link: https://lore.kernel.org/r/1608031217-7247-1-git-send-email-jeffrey.lin@raydium.corp-partner.google.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bae1d40e912b082bd46a4fd0b897eec18de528b
Author: Jason Gerecke <killertofu@gmail.com>
Date:   Tue Feb 16 11:41:54 2021 -0800

    HID: wacom: Ignore attempts to overwrite the touch_max value from HID
    
    commit 88f38846bfb1a452a3d47e38aeab20a4ceb74294 upstream.
    
    The `wacom_feature_mapping` function is careful to only set the the
    touch_max value a single time, but this care does not extend to the
    `wacom_wac_finger_event` function. In particular, if a device sends
    multiple HID_DG_CONTACTMAX items in a single feature report, the
    driver will end up retaining the value of last item.
    
    The HID descriptor for the Cintiq Companion 2 does exactly this. It
    incorrectly sets a "Report Count" of 2, which will cause the driver
    to process two HID_DG_CONTACTCOUNT items. The first item has the actual
    count, while the second item should have been declared as a constant
    zero. The constant zero is the value the driver ends up using, however,
    since it is the last HID_DG_CONTACTCOUNT in the report.
    
        Report ID (16),
        Usage (Contact Count Maximum),  ; Contact count maximum (55h, static value)
        Report Count (2),
        Logical Maximum (10),
        Feature (Variable),
    
    To address this, we add a check that the touch_max is not already set
    within the `wacom_wac_finger_event` function that processes the
    HID_DG_TOUCHMAX item. We emit a warning if the value is set and ignore
    the updated value.
    
    This could potentially cause problems if there is a tablet which has
    a similar issue but requires the last item to be used. This is unlikely,
    however, since it would have to have a different non-zero value for
    HID_DG_CONTACTMAX earlier in the same report, which makes no sense
    except in the case of a firmware bug. Note that cases where the
    HID_DG_CONTACTMAX items are in different reports is already handled
    (and similarly ignored) by `wacom_feature_mapping` as mentioned above.
    
    Link: https://github.com/linuxwacom/input-wacom/issues/223
    Fixes: 184eccd40389 ("HID: wacom: generic: read HID_DG_CONTACTMAX from any feature report")
    Signed-off-by: Jason Gerecke <jason.gerecke@wacom.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4640efa6c63599b6cd9491613ae902736a17c63c
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Jan 15 10:22:50 2021 +0800

    ACPI: configfs: add missing check after configfs_register_default_group()
    
    commit 67e40054de86aae520ddc2a072d7f6951812a14f upstream.
    
    A list_add corruption is reported by Hulk Robot like this:
    ==============
    list_add corruption.
    Call Trace:
    link_obj+0xc0/0x1c0
    link_group+0x21/0x140
    configfs_register_subsystem+0xdb/0x380
    acpi_configfs_init+0x25/0x1000 [acpi_configfs]
    do_one_initcall+0x149/0x820
    do_init_module+0x1ef/0x720
    load_module+0x35c8/0x4380
    __do_sys_finit_module+0x10d/0x1a0
    do_syscall_64+0x34/0x80
    
    It's because of the missing check after configfs_register_default_group,
    where configfs_unregister_subsystem should be called once failure.
    
    Fixes: 612bd01fc6e0 ("ACPI: add support for loading SSDTs via configfs")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Suggested-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ff223e3f146927ce1c3382904c04a796fbee180
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Feb 11 19:30:01 2021 +0100

    ACPI: property: Fix fwnode string properties matching
    
    commit e1e6bd2995ac0e1ad0c2a2d906a06f59ce2ed293 upstream.
    
    Property matching does not work for ACPI fwnodes if the value of the
    given property is not represented as a package in the _DSD package
    containing it.  For example, the "compatible" property in the _DSD
    below
    
      Name (_DSD, Package () {
        ToUUID("daffd814-6eba-4d8c-8a91-bc9bbf4aa301"),
        Package () {
          Package () {"compatible", "ethernet-phy-ieee802.3-c45"}
        }
      })
    
    will not be found by fwnode_property_match_string(), because the ACPI
    code handling device properties does not regard the single value as a
    "list" in that case.
    
    Namely, fwnode_property_match_string() invoked to match a given
    string property value first calls fwnode_property_read_string_array()
    with the last two arguments equal to NULL and 0, respectively, in
    order to count the items in the value of the given property, with the
    assumption that this value may be an array.  For ACPI fwnodes, that
    operation is carried out by acpi_node_prop_read() which calls
    acpi_data_prop_read() for this purpose.  However, when the return
    (val) pointer is NULL, that function only looks for a property whose
    value is a package without checking the single-value case at all.
    
    To fix that, make acpi_data_prop_read() check the single-value
    case if its return pointer argument is NULL and modify
    acpi_data_prop_read_single() handling that case to attempt to
    read the value of the property if the return pointer is NULL
    and return 1 if that succeeds.
    
    Fixes: 3708184afc77 ("device property: Move FW type specific functionality to FW specific files")
    Reported-by: Calvin Johnson <calvin.johnson@oss.nxp.com>
    Cc: 4.13+ <stable@vger.kernel.org> # 4.13+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2407e9dffdcba0a9147c41b55d6df4130a360eb6
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Feb 23 19:25:30 2021 -0700

    blk-settings: align max_sectors on "logical_block_size" boundary
    
    commit 97f433c3601a24d3513d06f575a389a2ca4e11e4 upstream.
    
    We get I/O errors when we run md-raid1 on the top of dm-integrity on the
    top of ramdisk.
    device-mapper: integrity: Bio not aligned on 8 sectors: 0xff00, 0xff
    device-mapper: integrity: Bio not aligned on 8 sectors: 0xff00, 0xff
    device-mapper: integrity: Bio not aligned on 8 sectors: 0xffff, 0x1
    device-mapper: integrity: Bio not aligned on 8 sectors: 0xffff, 0x1
    device-mapper: integrity: Bio not aligned on 8 sectors: 0x8048, 0xff
    device-mapper: integrity: Bio not aligned on 8 sectors: 0x8147, 0xff
    device-mapper: integrity: Bio not aligned on 8 sectors: 0x8246, 0xff
    device-mapper: integrity: Bio not aligned on 8 sectors: 0x8345, 0xbb
    
    The ramdisk device has logical_block_size 512 and max_sectors 255. The
    dm-integrity device uses logical_block_size 4096 and it doesn't affect the
    "max_sectors" value - thus, it inherits 255 from the ramdisk. So, we have
    a device with max_sectors not aligned on logical_block_size.
    
    The md-raid device sees that the underlying leg has max_sectors 255 and it
    will split the bios on 255-sector boundary, making the bios unaligned on
    logical_block_size.
    
    In order to fix the bug, we round down max_sectors to logical_block_size.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ebfa964e9a86ccbf9ed470d50da658731cb7dda
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Feb 13 11:24:28 2021 -0800

    scsi: bnx2fc: Fix Kconfig warning & CNIC build errors
    
    [ Upstream commit eefb816acb0162e94a85a857f3a55148f671d5a5 ]
    
    CNIC depends on MMU, but since 'select' does not follow any dependency
    chains, SCSI_BNX2X_FCOE also needs to depend on MMU, so that erroneous
    configs are not generated, which cause build errors in cnic.
    
    WARNING: unmet direct dependencies detected for CNIC
      Depends on [n]: NETDEVICES [=y] && ETHERNET [=y] && NET_VENDOR_BROADCOM [=y] && PCI [=y] && (IPV6 [=n] || IPV6 [=n]=n) && MMU [=n]
      Selected by [y]:
      - SCSI_BNX2X_FCOE [=y] && SCSI_LOWLEVEL [=y] && SCSI [=y] && PCI [=y] && (IPV6 [=n] || IPV6 [=n]=n) && LIBFC [=y] && LIBFCOE [=y]
    
    riscv64-linux-ld: drivers/net/ethernet/broadcom/cnic.o: in function `.L154':
    cnic.c:(.text+0x1094): undefined reference to `uio_event_notify'
    riscv64-linux-ld: cnic.c:(.text+0x10bc): undefined reference to `uio_event_notify'
    riscv64-linux-ld: drivers/net/ethernet/broadcom/cnic.o: in function `.L1442':
    cnic.c:(.text+0x96a8): undefined reference to `__uio_register_device'
    riscv64-linux-ld: drivers/net/ethernet/broadcom/cnic.o: in function `.L0 ':
    cnic.c:(.text.unlikely+0x68): undefined reference to `uio_unregister_device'
    
    Link: https://lore.kernel.org/r/20210213192428.22537-1-rdunlap@infradead.org
    Fixes: 853e2bd2103a ("[SCSI] bnx2fc: Broadcom FCoE offload driver")
    Cc: Saurav Kashyap <skashyap@marvell.com>
    Cc: Javed Hasan <jhasan@marvell.com>
    Cc: GR-QLogic-Storage-Upstream@marvell.com
    Cc: "James E.J. Bottomley" <jejb@linux.ibm.com>
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Cc: linux-scsi@vger.kernel.org
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9afc3c51bc752ea1b90d257ed318b2be451a56bc
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Thu Feb 25 17:18:09 2021 -0800

    mm/rmap: fix potential pte_unmap on an not mapped pte
    
    [ Upstream commit 5d5d19eda6b0ee790af89c45e3f678345be6f50f ]
    
    For PMD-mapped page (usually THP), pvmw->pte is NULL.  For PTE-mapped THP,
    pvmw->pte is mapped.  But for HugeTLB pages, pvmw->pte is not mapped and
    set to the relevant page table entry.  So in page_vma_mapped_walk_done(),
    we may do pte_unmap() for HugeTLB pte which is not mapped.  Fix this by
    checking pvmw->page against PageHuge before trying to do pte_unmap().
    
    Link: https://lkml.kernel.org/r/20210127093349.39081-1-linmiaohe@huawei.com
    Fixes: ace71a19cec5 ("mm: introduce page_vma_mapped_walk()")
    Signed-off-by: Hongxiang Lou <louhongxiang@huawei.com>
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Michel Lespinasse <walken@google.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Wei Yang <richard.weiyang@linux.alibaba.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Brian Geffon <bgeffon@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eed39d2551b9fae681ebd19ac91d7c859b0b2269
Author: Maxime Ripard <maxime@cerno.tech>
Date:   Thu Feb 25 17:11:01 2021 +0100

    i2c: brcmstb: Fix brcmstd_send_i2c_cmd condition
    
    [ Upstream commit a1858ce0cfe31368b23ba55794e409fb57ced4a4 ]
    
    The brcmstb_send_i2c_cmd currently has a condition that is (CMD_RD ||
    CMD_WR) which always evaluates to true, while the obvious fix is to test
    whether the cmd variable passed as parameter holds one of these two
    values.
    
    Fixes: dd1aa2524bc5 ("i2c: brcmstb: Add Broadcom settop SoC i2c controller driver")
    Reported-by: Dave Stevenson <dave.stevenson@raspberrypi.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be7cd08499b74b52656c10b6933e86b10c6cc05a
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Feb 24 09:37:37 2021 +0000

    arm64: Add missing ISB after invalidating TLB in __primary_switch
    
    [ Upstream commit 9d41053e8dc115c92b8002c3db5f545d7602498b ]
    
    Although there has been a bit of back and forth on the subject, it
    appears that invalidating TLBs requires an ISB instruction when FEAT_ETS
    is not implemented by the CPU.
    
    From the bible:
    
      | In an implementation that does not implement FEAT_ETS, a TLB
      | maintenance instruction executed by a PE, PEx, can complete at any
      | time after it is issued, but is only guaranteed to be finished for a
      | PE, PEx, after the execution of DSB by the PEx followed by a Context
      | synchronization event
    
    Add the missing ISB in __primary_switch, just in case.
    
    Fixes: 3c5e9f238bc4 ("arm64: head.S: move KASLR processing out of __enable_mmu()")
    Suggested-by: Will Deacon <will@kernel.org>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Link: https://lore.kernel.org/r/20210224093738.3629662-3-maz@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18666358450014b5b1fe34badc9998b9bacfe4ce
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Wed Feb 24 12:06:50 2021 -0800

    mm/hugetlb: fix potential double free in hugetlb_register_node() error path
    
    [ Upstream commit cc2205a67dec5a700227a693fc113441e73e4641 ]
    
    In hugetlb_sysfs_add_hstate(), we would do kobject_put() on hstate_kobjs
    when failed to create sysfs group but forget to set hstate_kobjs to NULL.
    Then in hugetlb_register_node() error path, we may free it again via
    hugetlb_unregister_node().
    
    Link: https://lkml.kernel.org/r/20210107123249.36964-1-linmiaohe@huawei.com
    Fixes: a3437870160c ("hugetlb: new sysfs interface")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Muchun Song <smuchun@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96cebdae917117ef8cbc4464f121c9625700f77b
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Wed Feb 24 12:04:33 2021 -0800

    mm/memory.c: fix potential pte_unmap_unlock pte error
    
    [ Upstream commit 90a3e375d324b2255b83e3dd29e99e2b05d82aaf ]
    
    Since commit 42e4089c7890 ("x86/speculation/l1tf: Disallow non privileged
    high MMIO PROT_NONE mappings"), when the first pfn modify is not allowed,
    we would break the loop with pte unchanged.  Then the wrong pte - 1 would
    be passed to pte_unmap_unlock.
    
    Andi said:
    
     "While the fix is correct, I'm not sure if it actually is a real bug.
      Is there any architecture that would do something else than unlocking
      the underlying page? If it's just the underlying page then it should
      be always the same page, so no bug"
    
    Link: https://lkml.kernel.org/r/20210109080118.20885-1-linmiaohe@huawei.com
    Fixes: 42e4089c789 ("x86/speculation/l1tf: Disallow non privileged high MMIO PROT_NONE mappings")
    Signed-off-by: Hongxiang Lou <louhongxiang@huawei.com>
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f2c810eeb346fab86fabdd8b07325cf9f8023ec
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Feb 24 12:00:41 2021 -0800

    ocfs2: fix a use after free on error
    
    [ Upstream commit c57d117f2b2f2a19b570c36f2819ef8d8210af20 ]
    
    The error handling in this function frees "reg" but it is still on the
    "o2hb_all_regions" list so it will lead to a use after freew.  Joseph Qi
    points out that we need to clear the bit in the "o2hb_region_bitmap" as
    well
    
    Link: https://lkml.kernel.org/r/YBk4M6HUG8jB/jc7@mwanda
    Fixes: 1cf257f51191 ("ocfs2: fix memory leak")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8edcb3550609a840befea0a9e514df50847fd31f
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Sun Feb 21 22:35:59 2021 +0800

    net/mlx4_core: Add missed mlx4_free_cmd_mailbox()
    
    [ Upstream commit 8eb65fda4a6dbd59cd5de24b106a10b6ee0d2176 ]
    
    mlx4_do_mirror_rule() forgets to call mlx4_free_cmd_mailbox() to
    free the memory region allocated by mlx4_alloc_cmd_mailbox() before
    an exit.
    Add the missed call to fix it.
    
    Fixes: 78efed275117 ("net/mlx4_core: Support mirroring VF DMFS rules on both ports")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Link: https://lore.kernel.org/r/20210221143559.390277-1-hslester96@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03b288ab77cd35a2f2217538687a2ee7621819b7
Author: Mateusz Palczewski <mateusz.palczewski@intel.com>
Date:   Tue Nov 24 15:08:27 2020 +0000

    i40e: Fix overwriting flow control settings during driver loading
    
    [ Upstream commit 4cdb9f80dcd46aab3c0020b4a6920c22735c5d6e ]
    
    During driver loading flow control settings were written to FW
    using a variable which was always zero, since it was being set
    only by ethtool. This behavior has been corrected and driver
    no longer overwrites the default FW/NVM settings.
    
    Fixes: 373149fc99a0 ("i40e: Decrease the scope of rtnl lock")
    Signed-off-by: Dawid Lukwinski <dawid.lukwinski@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Reviewed-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Tony Brelinski <tonyx.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31919c1f3d1fd16ac8a6a2414705ecf1b7e0657a
Author: Slawomir Laba <slawomirx.laba@intel.com>
Date:   Thu Sep 10 07:57:04 2020 +0000

    i40e: Fix flow for IPv6 next header (extension header)
    
    [ Upstream commit 92c6058024e87087cf1b99b0389d67c0a886360e ]
    
    When a packet contains an IPv6 header with next header which is
    an extension header and not a protocol one, the kernel function
    skb_transport_header called with such sk_buff will return a
    pointer to the extension header and not to the TCP one.
    
    The above explained call caused a problem with packet processing
    for skb with encapsulation for tunnel with I40E_TX_CTX_EXT_IP_IPV6.
    The extension header was not skipped at all.
    
    The ipv6_skip_exthdr function does check if next header of the IPV6
    header is an extension header and doesn't modify the l4_proto pointer
    if it points to a protocol header value so its safe to omit the
    comparison of exthdr and l4.hdr pointers. The ipv6_skip_exthdr can
    return value -1. This means that the skipping process failed
    and there is something wrong with the packet so it will be dropped.
    
    Fixes: a3fd9d8876a5 ("i40e/i40evf: Handle IPv6 extension headers in checksum offload")
    Signed-off-by: Slawomir Laba <slawomirx.laba@intel.com>
    Signed-off-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Reviewed-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Tony Brelinski <tonyx.brelinski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2715a5fbdc7aa15d6c28ed3bda7dd8a82ec9446c
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Feb 4 00:05:20 2021 -0500

    ext4: fix potential htree index checksum corruption
    
    [ Upstream commit b5776e7524afbd4569978ff790864755c438bba7 ]
    
    In the case where we need to do an interior node split, and
    immediately afterwards, we are unable to allocate a new directory leaf
    block due to ENOSPC, the directory index checksum's will not be filled
    in correctly (and indeed, will not be correctly journalled).
    
    This looks like a bug that was introduced when we added largedir
    support.  The original code doesn't make any sense (and should have
    been caught in code review), but it was hidden because most of the
    time, the index node checksum will be set by do_split().  But if
    do_split bails out due to ENOSPC, then ext4_handle_dirty_dx_node()
    won't get called, and so the directory index checksum field will not
    get set, leading to:
    
    EXT4-fs error (device sdb): dx_probe:858: inode #6635543: block 4022: comm nfsd: Directory index failed checksum
    
    Google-Bug-Id: 176345532
    Fixes: e08ac99fa2a2 ("ext4: add largedir feature")
    Cc: Artem Blagodarenko <artem.blagodarenko@gmail.com>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13a3066606900d638ca988155cf0aac54b1640d0
Author: Konrad Dybcio <konrad.dybcio@somainline.org>
Date:   Mon Jan 18 17:15:58 2021 +0100

    drm/msm/dsi: Correct io_start for MSM8994 (20nm PHY)
    
    [ Upstream commit 33a7808ce1aea6e2edc1af25db25928137940c02 ]
    
    The previous registers were *almost* correct, but instead of
    PHYs, they were pointing at DSI PLLs, resulting in the PHY id
    autodetection failing miserably.
    
    Fixes: dcefc117cc19 ("drm/msm/dsi: Add support for msm8x94")
    Signed-off-by: Konrad Dybcio <konrad.dybcio@somainline.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8b950026d2708e7925140d8669207b454c74087
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Sun Jan 24 16:39:32 2021 +0100

    PCI: Align checking of syscall user config accessors
    
    [ Upstream commit ef9e4005cbaf022c6251263aa27836acccaef65d ]
    
    After 34e3207205ef ("PCI: handle positive error codes"),
    pci_user_read_config_*() and pci_user_write_config_*() return 0 or negative
    errno values, not PCIBIOS_* values like PCIBIOS_SUCCESSFUL or
    PCIBIOS_BAD_REGISTER_NUMBER.
    
    Remove comparisons with PCIBIOS_SUCCESSFUL and check only for non-zero.  It
    happens that PCIBIOS_SUCCESSFUL is zero, so this is not a functional
    change, but it aligns this code with the user accessors.
    
    [bhelgaas: commit log]
    Fixes: 34e3207205ef ("PCI: handle positive error codes")
    Link: https://lore.kernel.org/r/f1220314-e518-1e18-bf94-8e6f8c703758@gmail.com
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be34069d98eff049eaf839815610232c1fe04905
Author: Jorgen Hansen <jhansen@vmware.com>
Date:   Wed Jan 20 08:32:40 2021 -0800

    VMCI: Use set_page_dirty_lock() when unregistering guest memory
    
    [ Upstream commit 5a16c535409f8dcb7568e20737309e3027ae3e49 ]
    
    When the VMCI host support releases guest memory in the case where
    the VM was killed, the pinned guest pages aren't locked. Use
    set_page_dirty_lock() instead of set_page_dirty().
    
    Testing done: Killed VM while having an active VMCI based vSocket
    connection and observed warning from ext4. With this fix, no
    warning was observed. Ran various vSocket tests without issues.
    
    Fixes: 06164d2b72aa ("VMCI: queue pairs implementation.")
    Reviewed-by: Vishnu Dasa <vdasa@vmware.com>
    Signed-off-by: Jorgen Hansen <jhansen@vmware.com>
    Link: https://lore.kernel.org/r/1611160360-30299-1-git-send-email-jhansen@vmware.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fa3d181abd2485700a6bdcb312f9756f7fa503f
Author: Simon South <simon@simonsouth.net>
Date:   Tue Jan 19 11:12:06 2021 -0500

    pwm: rockchip: rockchip_pwm_probe(): Remove superfluous clk_unprepare()
    
    [ Upstream commit d5d8d675865ccddfe4da26c85f22c55cec663bf2 ]
    
    If rockchip_pwm_probe() fails to register a PWM device it calls
    clk_unprepare() for the device's PWM clock, without having first disabled
    the clock and before jumping to an error handler that also unprepares
    it. This is likely to produce warnings from the kernel about the clock
    being unprepared when it is still enabled, and then being unprepared when
    it has already been unprepared.
    
    Prevent these warnings by removing this unnecessary call to
    clk_unprepare().
    
    Fixes: 48cf973cae33 ("pwm: rockchip: Avoid glitches on already running PWMs")
    Signed-off-by: Simon South <simon@simonsouth.net>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f04214f925fc1c8731f57cdc6acef69e7d91bfe2
Author: Aswath Govindraju <a-govindraju@ti.com>
Date:   Wed Jan 13 10:42:52 2021 +0530

    misc: eeprom_93xx46: Add module alias to avoid breaking support for non device tree users
    
    [ Upstream commit 4540b9fbd8ebb21bb3735796d300a1589ee5fbf2 ]
    
    Module alias "spi:93xx46" is used by non device tree users like
    drivers/misc/eeprom/digsy_mtc_eeprom.c  and removing it will
    break support for them.
    
    Fix this by adding back the module alias "spi:93xx46".
    
    Fixes: 13613a2246bf ("misc: eeprom_93xx46: Fix module alias to enable module autoprobe")
    Signed-off-by: Aswath Govindraju <a-govindraju@ti.com>
    Link: https://lore.kernel.org/r/20210113051253.15061-1-a-govindraju@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f75f0edd06e46e3215f0f4e33a466c987dfeeaa0
Author: Aswath Govindraju <a-govindraju@ti.com>
Date:   Thu Jan 7 22:09:53 2021 +0530

    misc: eeprom_93xx46: Fix module alias to enable module autoprobe
    
    [ Upstream commit 13613a2246bf531f5fc04e8e62e8f21a3d39bf1c ]
    
    Fix module autoprobe by correcting module alias to match the string from
    /sys/class/.../spi1.0/modalias content.
    
    Fixes: 06b4501e88ad ("misc/eeprom: add driver for microwire 93xx46 EEPROMs")
    Signed-off-by: Aswath Govindraju <a-govindraju@ti.com>
    Link: https://lore.kernel.org/r/20210107163957.28664-2-a-govindraju@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92f2e5405c90cf8a54952c62e7114af2f08df434
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Nov 25 16:40:11 2020 -0800

    sparc64: only select COMPAT_BINFMT_ELF if BINFMT_ELF is set
    
    [ Upstream commit 80bddf5c93a99e11fc9faf7e4b575d01cecd45d3 ]
    
    Currently COMPAT on SPARC64 selects COMPAT_BINFMT_ELF unconditionally,
    even when BINFMT_ELF is not enabled. This causes a kconfig warning.
    
    Instead, just select COMPAT_BINFMT_ELF if BINFMT_ELF is enabled.
    This builds cleanly with no kconfig warnings.
    
    WARNING: unmet direct dependencies detected for COMPAT_BINFMT_ELF
      Depends on [n]: COMPAT [=y] && BINFMT_ELF [=n]
      Selected by [y]:
      - COMPAT [=y] && SPARC64 [=y]
    
    Fixes: 26b4c912185a ("sparc,sparc64: unify Kconfig files")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: sparclinux@vger.kernel.org
    Cc: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69b14df7e743b1e526d076c37b3718fc3e7ba8a8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 16 20:29:05 2021 -0800

    Input: elo - fix an error code in elo_connect()
    
    [ Upstream commit 0958351e93fa0ac142f6dd8bd844441594f30a57 ]
    
    If elo_setup_10() fails then this should return an error code instead
    of success.
    
    Fixes: fae3006e4b42 ("Input: elo - add support for non-pressure-sensitive touchscreens")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YBKFd5CvDu+jVmfW@mwanda
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc8280cb35bf72baf85725ab3a2e7993110cd4b6
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Sun Feb 14 18:16:38 2021 +0900

    perf test: Fix unaligned access in sample parsing test
    
    [ Upstream commit c5c97cadd7ed13381cb6b4bef5c841a66938d350 ]
    
    The ubsan reported the following error.  It was because sample's raw
    data missed u32 padding at the end.  So it broke the alignment of the
    array after it.
    
    The raw data contains an u32 size prefix so the data size should have
    an u32 padding after 8-byte aligned data.
    
    27: Sample parsing  :util/synthetic-events.c:1539:4:
      runtime error: store to misaligned address 0x62100006b9bc for type
      '__u64' (aka 'unsigned long long'), which requires 8 byte alignment
    0x62100006b9bc: note: pointer points here
      00 00 00 00 ff ff ff ff  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff
                  ^
        #0 0x561532a9fc96 in perf_event__synthesize_sample util/synthetic-events.c:1539:13
        #1 0x5615327f4a4f in do_test tests/sample-parsing.c:284:8
        #2 0x5615327f3f50 in test__sample_parsing tests/sample-parsing.c:381:9
        #3 0x56153279d3a1 in run_test tests/builtin-test.c:424:9
        #4 0x56153279c836 in test_and_print tests/builtin-test.c:454:9
        #5 0x56153279b7eb in __cmd_test tests/builtin-test.c:675:4
        #6 0x56153279abf0 in cmd_test tests/builtin-test.c:821:9
        #7 0x56153264e796 in run_builtin perf.c:312:11
        #8 0x56153264cf03 in handle_internal_command perf.c:364:8
        #9 0x56153264e47d in run_argv perf.c:408:2
        #10 0x56153264c9a9 in main perf.c:538:3
        #11 0x7f137ab6fbbc in __libc_start_main (/lib64/libc.so.6+0x38bbc)
        #12 0x561532596828 in _start ...
    
    SUMMARY: UndefinedBehaviorSanitizer: misaligned-pointer-use
     util/synthetic-events.c:1539:4 in
    
    Fixes: 045f8cd8542d ("perf tests: Add a sample parsing test")
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: https://lore.kernel.org/r/20210214091638.519643-1-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0236ea51d4b2227dbf440351949d50d807d4e146
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Feb 5 19:53:47 2021 +0200

    perf intel-pt: Fix missing CYC processing in PSB
    
    [ Upstream commit 03fb0f859b45d1eb05c984ab4bd3bef67e45ede2 ]
    
    Add missing CYC packet processing when walking through PSB+. This
    improves the accuracy of timestamps that follow PSB+, until the next
    MTC.
    
    Fixes: 3d49807870f08 ("perf tools: Add new Intel PT packet definitions")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Link: https://lore.kernel.org/r/20210205175350.23817-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76fcdc08ff4da0aea0401f863e6015c63093666f
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Feb 8 18:38:15 2021 +0200

    spi: pxa2xx: Fix the controller numbering for Wildcat Point
    
    [ Upstream commit 54c5d3bfb0cfb7b31259765524567871dee11615 ]
    
    Wildcat Point has two SPI controllers and added one is actually second one.
    Fix the numbering by adding the description of the first one.
    
    Fixes: caba248db286 ("spi: spi-pxa2xx-pci: Add ID and driver type for WildcatPoint PCH")
    Cc: Leif Liddy <leif.liddy@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20210208163816.22147-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8359a71670792ceb147641ed060ad0627fe4d43d
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Feb 5 08:56:13 2021 +0000

    powerpc/8xx: Fix software emulation interrupt
    
    [ Upstream commit 903178d0ce6bb30ef80a3604ab9ee2b57869fbc9 ]
    
    For unimplemented instructions or unimplemented SPRs, the 8xx triggers
    a "Software Emulation Exception" (0x1000). That interrupt doesn't set
    reason bits in SRR1 as the "Program Check Exception" does.
    
    Go through emulation_assist_interrupt() to set REASON_ILLEGAL.
    
    Fixes: fbbcc3bb139e ("powerpc/8xx: Remove SoftwareEmulation()")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/ad782af87a222efc79cfb06079b0fd23d4224eaf.1612515180.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 231115af0fa67ea199e3c58514f5612078de7d03
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Wed Jan 6 20:59:00 2021 -0600

    powerpc/pseries/dlpar: handle ibm, configure-connector delay status
    
    [ Upstream commit 768d70e19ba525debd571b36e6d0ab19956c63d7 ]
    
    dlpar_configure_connector() has two problems in its handling of
    ibm,configure-connector's return status:
    
    1. When the status is -2 (busy, call again), we call
       ibm,configure-connector again immediately without checking whether
       to schedule, which can result in monopolizing the CPU.
    2. Extended delay status (9900..9905) goes completely unhandled,
       causing the configuration to unnecessarily terminate.
    
    Fix both of these issues by using rtas_busy_delay().
    
    Fixes: ab519a011caa ("powerpc/pseries: Kernel DLPAR Infrastructure")
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Reviewed-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210107025900.410369-1-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d93b8b58c03e79ece81dc65fe286e34c1b758977
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jan 29 17:37:24 2021 +0300

    mfd: wm831x-auxadc: Prevent use after free in wm831x_auxadc_read_irq()
    
    [ Upstream commit 26783d74cc6a440ee3ef9836a008a697981013d0 ]
    
    The "req" struct is always added to the "wm831x->auxadc_pending" list,
    but it's only removed from the list on the success path.  If a failure
    occurs then the "req" struct is freed but it's still on the list,
    leading to a use after free.
    
    Fixes: 78bb3688ea18 ("mfd: Support multiple active WM831x AUXADC conversions")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6507b55c7a618afbdc14a7be7589248c026c8458
Author: Alain Volmat <alain.volmat@foss.st.com>
Date:   Fri Feb 5 19:59:25 2021 +0100

    spi: stm32: properly handle 0 byte transfer
    
    [ Upstream commit 2269f5a8b1a7b38651d62676b98182828f29d11a ]
    
    On 0 byte transfer request, return straight from the
    xfer function after finalizing the transfer.
    
    Fixes: dcbe0d84dfa5 ("spi: add driver for STM32 SPI controller")
    Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
    Link: https://lore.kernel.org/r/1612551572-495-2-git-send-email-alain.volmat@foss.st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43d7b7c7d862b9a59f45470124373675e9b173eb
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Wed Jan 27 15:45:01 2021 -0600

    RDMA/rxe: Fix coding error in rxe_recv.c
    
    [ Upstream commit 7d9ae80e31df57dd3253e1ec514f0000aa588a81 ]
    
    check_type_state() in rxe_recv.c is written as if the type bits in the
    packet opcode were a bit mask which is not correct. This patch corrects
    this code to compare all 3 type bits to the required type.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20210127214500.3707-1-rpearson@hpe.com
    Signed-off-by: Bob Pearson <rpearson@hpe.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbcea1f1027b03b0a8f75e34ae72fe68d68168bb
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Thu Jan 28 09:52:47 2021 -0300

    perf tools: Fix DSO filtering when not finding a map for a sampled address
    
    [ Upstream commit c69bf11ad3d30b6bf01cfa538ddff1a59467c734 ]
    
    When we lookup an address and don't find a map we should filter that
    sample if the user specified a list of --dso entries to filter on, fix
    it.
    
    Before:
    
      $ perf script
                 sleep 274800  2843.556162:          1 cycles:u:  ffffffffbb26bff4 [unknown] ([unknown])
                 sleep 274800  2843.556168:          1 cycles:u:  ffffffffbb2b047d [unknown] ([unknown])
                 sleep 274800  2843.556171:          1 cycles:u:  ffffffffbb2706b2 [unknown] ([unknown])
                 sleep 274800  2843.556174:          6 cycles:u:  ffffffffbb2b0267 [unknown] ([unknown])
                 sleep 274800  2843.556176:         59 cycles:u:  ffffffffbb2b03b1 [unknown] ([unknown])
                 sleep 274800  2843.556180:        691 cycles:u:  ffffffffbb26bff4 [unknown] ([unknown])
                 sleep 274800  2843.556189:       9160 cycles:u:      7fa9550eeaa3 __GI___tunables_init+0xf3 (/usr/lib64/ld-2.32.so)
                 sleep 274800  2843.556312:      86937 cycles:u:      7fa9550e157b _dl_lookup_symbol_x+0x4b (/usr/lib64/ld-2.32.so)
      $
    
    So we have some samples we somehow didn't find in a map for, if we now
    do:
    
      $ perf report --stdio --dso /usr/lib64/ld-2.32.so
      # dso: /usr/lib64/ld-2.32.so
      #
      # Total Lost Samples: 0
      #
      # Samples: 8  of event 'cycles:u'
      # Event count (approx.): 96856
      #
      # Overhead  Command  Symbol
      # ........  .......  ........................
      #
          89.76%  sleep    [.] _dl_lookup_symbol_x
           9.46%  sleep    [.] __GI___tunables_init
           0.71%  sleep    [k] 0xffffffffbb26bff4
           0.06%  sleep    [k] 0xffffffffbb2b03b1
           0.01%  sleep    [k] 0xffffffffbb2b0267
           0.00%  sleep    [k] 0xffffffffbb2706b2
           0.00%  sleep    [k] 0xffffffffbb2b047d
      $
    
    After this patch we get the right output with just entries for the DSOs
    specified in --dso:
    
      $ perf report --stdio --dso /usr/lib64/ld-2.32.so
      # dso: /usr/lib64/ld-2.32.so
      #
      # Total Lost Samples: 0
      #
      # Samples: 8  of event 'cycles:u'
      # Event count (approx.): 96856
      #
      # Overhead  Command  Symbol
      # ........  .......  ........................
      #
          89.76%  sleep    [.] _dl_lookup_symbol_x
           9.46%  sleep    [.] __GI___tunables_init
      $
      #
    
    Fixes: 96415e4d3f5fdf9c ("perf symbols: Avoid unnecessary symbol loading when dso list is specified")
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kan Liang <kan.liang@intel.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20210128131209.GD775562@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ede3ec9c19202496e25b6754d3002bc3f833a23
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Nov 18 09:34:05 2020 -0500

    tracepoint: Do not fail unregistering a probe due to memory failure
    
    [ Upstream commit befe6d946551d65cddbd32b9cb0170b0249fd5ed ]
    
    The list of tracepoint callbacks is managed by an array that is protected
    by RCU. To update this array, a new array is allocated, the updates are
    copied over to the new array, and then the list of functions for the
    tracepoint is switched over to the new array. After a completion of an RCU
    grace period, the old array is freed.
    
    This process happens for both adding a callback as well as removing one.
    But on removing a callback, if the new array fails to be allocated, the
    callback is not removed, and may be used after it is freed by the clients
    of the tracepoint.
    
    There's really no reason to fail if the allocation for a new array fails
    when removing a function. Instead, the function can simply be replaced by a
    stub function that could be cleaned up on the next modification of the
    array. That is, instead of calling the function registered to the
    tracepoint, it would call a stub function in its place.
    
    Link: https://lore.kernel.org/r/20201115055256.65625-1-mmullins@mmlx.us
    Link: https://lore.kernel.org/r/20201116175107.02db396d@gandalf.local.home
    Link: https://lore.kernel.org/r/20201117211836.54acaef2@oasis.local.home
    Link: https://lkml.kernel.org/r/20201118093405.7a6d2290@gandalf.local.home
    
    [ Note, this version does use undefined compiler behavior (assuming that
      a stub function with no parameters or return, can be called by a location
      that thinks it has parameters but still no return value. Static calls
      do the same thing, so this trick is not without precedent.
    
      There's another solution that uses RCU tricks and is more complex, but
      can be an alternative if this solution becomes an issue.
    
      Link: https://lore.kernel.org/lkml/20210127170721.58bce7cc@gandalf.local.home/
    ]
    
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: Andrii Nakryiko <andriin@fb.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: KP Singh <kpsingh@chromium.org>
    Cc: netdev <netdev@vger.kernel.org>
    Cc: bpf <bpf@vger.kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Florian Weimer <fw@deneb.enyo.de>
    Fixes: 97e1c18e8d17b ("tracing: Kernel Tracepoints")
    Reported-by: syzbot+83aa762ef23b6f0d1991@syzkaller.appspotmail.com
    Reported-by: syzbot+d29e58bb557324e55e5e@syzkaller.appspotmail.com
    Reported-by: Matt Mullins <mmullins@mmlx.us>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Tested-by: Matt Mullins <mmullins@mmlx.us>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e4faa10bbd3b18ff9d7de3a5f967bb4932dfd37
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Jan 26 17:58:31 2021 +0100

    amba: Fix resource leak for drivers without .remove
    
    [ Upstream commit de5d7adb89367bbc87b4e5ce7afe7ae9bd86dc12 ]
    
    Consider an amba driver with a .probe but without a .remove callback (e.g.
    pl061_gpio_driver). The function amba_probe() is called to bind a device
    and so dev_pm_domain_attach() and others are called. As there is no remove
    callback amba_remove() isn't called at unbind time however and so calling
    dev_pm_domain_detach() is missed and the pm domain keeps active.
    
    To fix this always use the core driver callbacks and handle missing amba
    callbacks there. For probe refuse registration as a driver without probe
    doesn't make sense.
    
    Fixes: 7cfe249475fd ("ARM: AMBA: Add pclk support to AMBA bus infrastructure")
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20210126165835.687514-2-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48d39c133d7eaa64918a21602e1a9f997a29d2de
Author: Vladimir Murzin <vladimir.murzin@arm.com>
Date:   Thu Jan 7 10:47:24 2021 +0100

    ARM: 9046/1: decompressor: Do not clear SCTLR.nTLSMD for ARMv7+ cores
    
    [ Upstream commit 2acb909750431030b65a0a2a17fd8afcbd813a84 ]
    
    It was observed that decompressor running on hardware implementing ARM v8.2
    Load/Store Multiple Atomicity and Ordering Control (LSMAOC), say, as guest,
    would stuck just after:
    
    Uncompressing Linux... done, booting the kernel.
    
    The reason is that it clears nTLSMD bit when disabling caches:
    
      nTLSMD, bit [3]
    
      When ARMv8.2-LSMAOC is implemented:
    
        No Trap Load Multiple and Store Multiple to
        Device-nGRE/Device-nGnRE/Device-nGnRnE memory.
    
        0b0 All memory accesses by A32 and T32 Load Multiple and Store
            Multiple at EL1 or EL0 that are marked at stage 1 as
            Device-nGRE/Device-nGnRE/Device-nGnRnE memory are trapped and
            generate a stage 1 Alignment fault.
    
        0b1 All memory accesses by A32 and T32 Load Multiple and Store
            Multiple at EL1 or EL0 that are marked at stage 1 as
            Device-nGRE/Device-nGnRE/Device-nGnRnE memory are not trapped.
    
      This bit is permitted to be cached in a TLB.
    
      This field resets to 1.
    
      Otherwise:
    
      Reserved, RES1
    
    So as effect we start getting traps we are not quite ready for.
    
    Looking into history it seems that mask used for SCTLR clear came from
    the similar code for ARMv4, where bit[3] is the enable/disable bit for
    the write buffer. That not applicable to ARMv7 and onwards, so retire
    that bit from the masks.
    
    Fixes: 7d09e85448dfa78e3e58186c934449aaf6d49b50 ("[ARM] 4393/2: ARMv7: Add uncompressing code for the new CPU Id format")
    Signed-off-by: Vladimir Murzin <vladimir.murzin@arm.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36903724754968bbf9767be4df92e9eee8bb95bf
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Dec 17 22:09:22 2020 +0100

    mmc: usdhi6rol0: Fix a resource leak in the error handling path of the probe
    
    [ Upstream commit 6052b3c370fb82dec28bcfff6d7ec0da84ac087a ]
    
    A call to 'ausdhi6_dma_release()' to undo a previous call to
    'usdhi6_dma_request()' is missing in the error handling path of the probe
    function.
    
    It is already present in the remove function.
    
    Fixes: 75fa9ea6e3c0 ("mmc: add a driver for the Renesas usdhi6rol0 SD/SDIO host controller")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201217210922.165340-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b003b1633b063a464f9efcd1ab7abfec4f62d46a
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Wed Jan 20 07:49:13 2021 +0000

    powerpc/47x: Disable 256k page size
    
    [ Upstream commit 910a0cb6d259736a0c86e795d4c2f42af8d0d775 ]
    
    PPC47x_TLBE_SIZE isn't defined for 256k pages, leading to a build
    break if 256k pages is selected.
    
    So change the kconfig so that 256k pages can't be selected for 47x.
    
    Fixes: e7f75ad01d59 ("powerpc/47x: Base ppc476 support")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    [mpe: Expand change log to mention build break]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/2fed79b1154c872194f98bac4422c23918325e61.1611128938.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0269e37e9243c36d0b02a0665ed34b5b78de09d3
Author: Shay Drory <shayd@nvidia.com>
Date:   Mon Jan 25 14:13:38 2021 +0200

    IB/umad: Return EIO in case of when device disassociated
    
    [ Upstream commit 4fc5461823c9cad547a9bdfbf17d13f0da0d6bb5 ]
    
    MAD message received by the user has EINVAL error in all flows
    including when the device is disassociated. That makes it impossible
    for the applications to treat such flow differently.
    
    Change it to return EIO, so the applications will be able to perform
    disassociation recovery.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/20210125121339.837518-2-leon@kernel.org
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a66455533d15079d5fba9a12b2d77faa113e682
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Fri Jan 22 16:39:40 2021 +0100

    auxdisplay: ht16k33: Fix refresh rate handling
    
    [ Upstream commit e89b0a426721a8ca5971bc8d70aa5ea35c020f90 ]
    
    Drop the call to msecs_to_jiffies(), as "HZ / fbdev->refresh_rate" is
    already the number of jiffies to wait.
    
    Fixes: 8992da44c6805d53 ("auxdisplay: ht16k33: Driver for LED controller")
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Miguel Ojeda <ojeda@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45f6dcbb6a132d1837fdf5e2bfc83ee43936e5e9
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Jan 18 04:04:55 2021 -0800

    isofs: release buffer head before return
    
    [ Upstream commit 0a6dc67a6aa45f19bd4ff89b4f468fc50c4b8daa ]
    
    Release the buffer_head before returning error code in
    do_isofs_readdir() and isofs_find_entry().
    
    Fixes: 2deb1acc653c ("isofs: fix access to unallocated memory when reading corrupted filesystem")
    Link: https://lore.kernel.org/r/20210118120455.118955-1-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51817f1eeb6d77a4c3e541442ba0d4239f12ee41
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Jan 19 21:00:25 2021 -0800

    spi: atmel: Put allocated master before return
    
    [ Upstream commit 21ea2743f015dbacec1831bdc8afc848db9c2b8c ]
    
    The allocated master is not released. Goto error handling label rather
    than directly return.
    
    Fixes: 5e9af37e46bc ("spi: atmel: introduce probe deferring")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Fixes: 5e9af37e46bc ("spi: atmel: introduce probe deferring")
    Reviewed-by: Tudor Ambarus <tudor.ambarus@microchip.com>
    Link: https://lore.kernel.org/r/20210120050025.25426-1-bianpan2016@163.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 197254b9baf3c5a8f259294ec6d06a7e073171bf
Author: David Howells <dhowells@redhat.com>
Date:   Fri Nov 20 19:04:23 2020 +0100

    certs: Fix blacklist flag type confusion
    
    [ Upstream commit 4993e1f9479a4161fd7d93e2b8b30b438f00cb0f ]
    
    KEY_FLAG_KEEP is not meant to be passed to keyring_alloc() or key_alloc(),
    as these only take KEY_ALLOC_* flags.  KEY_FLAG_KEEP has the same value as
    KEY_ALLOC_BYPASS_RESTRICTION, but fortunately only key_create_or_update()
    uses it.  LSMs using the key_alloc hook don't check that flag.
    
    KEY_FLAG_KEEP is then ignored but fortunately (again) the root user cannot
    write to the blacklist keyring, so it is not possible to remove a key/hash
    from it.
    
    Fix this by adding a KEY_ALLOC_SET_KEEP flag that tells key_alloc() to set
    KEY_FLAG_KEEP on the new key.  blacklist_init() can then, correctly, pass
    this to keyring_alloc().
    
    We can also use this in ima_mok_init() rather than setting the flag
    manually.
    
    Note that this doesn't fix an observable bug with the current
    implementation but it is required to allow addition of new hashes to the
    blacklist in the future without making it possible for them to be removed.
    
    Fixes: 734114f8782f ("KEYS: Add a system blacklist keyring")
    Reported-by: Mickaël Salaün <mic@linux.microsoft.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Mickaël Salaün <mic@linux.microsoft.com>
    cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ce3f6b734fd00c54076839e1c5517acbdcdd3bd
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Jan 20 04:33:13 2021 -0800

    regulator: axp20x: Fix reference cout leak
    
    [ Upstream commit e78bf6be7edaacb39778f3a89416caddfc6c6d70 ]
    
    Decrements the reference count of device node and its child node.
    
    Fixes: dfe7a1b058bb ("regulator: AXP20x: Add support for regulators subsystem")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/20210120123313.107640-1-bianpan2016@163.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37e3176286360bae405ed4f9b2f3a79b8a5bc852
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 13:19:55 2021 -0800

    clocksource/drivers/mxs_timer: Add missing semicolon when DEBUG is defined
    
    [ Upstream commit 7da390694afbaed8e0f05717a541dfaf1077ba51 ]
    
    When DEBUG is defined this error occurs
    
    drivers/clocksource/mxs_timer.c:138:1: error:
      expected ‘;’ before ‘}’ token
    
    The preceding statement needs a semicolon.
    Replace pr_info() with pr_debug() and remove the unneeded ifdef.
    
    Fixes: eb8703e2ef7c ("clockevents/drivers/mxs: Migrate to new 'set-state' interface")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20210118211955.763609-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f563bfafd76f101d3149d7a689571e9b03217c7c
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Thu Jan 14 11:22:17 2021 +0100

    rtc: s5m: select REGMAP_I2C
    
    [ Upstream commit 1f0cbda3b452b520c5f3794f8f0e410e8bc7386a ]
    
    The rtc-s5m uses the I2C regmap but doesn't select it in Kconfig so
    depending on the configuration the build may fail. Fix it.
    
    Fixes: 959df7778bbd ("rtc: Enable compile testing for Maxim and Samsung drivers")
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20210114102219.23682-2-brgl@bgdev.pl
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20c30a03a7976c4a768c4a614a3422684c8e9d95
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Dec 16 14:57:31 2020 +0200

    power: reset: at91-sama5d2_shdwc: fix wkupdbc mask
    
    [ Upstream commit 95aa21a3f1183260db1b0395e03df5bebc5ed641 ]
    
    According to datasheet WKUPDBC mask is b/w bits 26..24.
    
    Fixes: f80cb48843987 ("power: reset: at91-shdwc: add new shutdown controller driver")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Reviewed-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08e97a81ad6c83f81403be8c43794354a87d1432
Author: Nicolas Boichat <drinkcat@chromium.org>
Date:   Fri Jan 15 11:45:44 2021 +0000

    of/fdt: Make sure no-map does not remove already reserved regions
    
    [ Upstream commit 8a5a75e5e9e55de1cef5d83ca3589cb4899193ef ]
    
    If the device tree is incorrectly configured, and attempts to
    define a "no-map" reserved memory that overlaps with the kernel
    data/code, the kernel would crash quickly after boot, with no
    obvious clue about the nature of the issue.
    
    For example, this would happen if we have the kernel mapped at
    these addresses (from /proc/iomem):
    40000000-41ffffff : System RAM
      40080000-40dfffff : Kernel code
      40e00000-411fffff : reserved
      41200000-413e0fff : Kernel data
    
    And we declare a no-map shared-dma-pool region at a fixed address
    within that range:
    mem_reserved: mem_region {
            compatible = "shared-dma-pool";
            reg = <0 0x40000000 0 0x01A00000>;
            no-map;
    };
    
    To fix this, when removing memory regions at early boot (which is
    what "no-map" regions do), we need to make sure that the memory
    is not already reserved. If we do, __reserved_mem_reserve_reg
    will throw an error:
    [    0.000000] OF: fdt: Reserved memory: failed to reserve memory
       for node 'mem_region': base 0x0000000040000000, size 26 MiB
    and the code that will try to use the region should also fail,
    later on.
    
    We do not do anything for non-"no-map" regions, as memblock
    explicitly allows reserved regions to overlap, and the commit
    that this fixes removed the check for that precise reason.
    
    [ qperret: fixed conflicts caused by the usage of memblock_mark_nomap ]
    
    Fixes: 094cb98179f19b7 ("of/fdt: memblock_reserve /memreserve/ regions in the case of partial overlap")
    Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Link: https://lore.kernel.org/r/20210115114544.1830068-3-qperret@google.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d56ae8d98481f77f9c29bd26e9a37728c7948c66
Author: KarimAllah Ahmed <karahmed@amazon.de>
Date:   Fri Jan 15 11:45:43 2021 +0000

    fdt: Properly handle "no-map" field in the memory region
    
    [ Upstream commit 86588296acbfb1591e92ba60221e95677ecadb43 ]
    
    Mark the memory region with NOMAP flag instead of completely removing it
    from the memory blocks. That makes the FDT handling consistent with the EFI
    memory map handling.
    
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Frank Rowand <frowand.list@gmail.com>
    Cc: devicetree@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: KarimAllah Ahmed <karahmed@amazon.de>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Link: https://lore.kernel.org/r/20210115114544.1830068-2-qperret@google.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17b4294adc433825e14b4342f365fa1d1d211250
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Jan 12 18:00:56 2021 +0900

    mfd: bd9571mwv: Use devm_mfd_add_devices()
    
    [ Upstream commit c58ad0f2b052b5675d6394e03713ee41e721b44c ]
    
    To remove mfd devices when unload this driver, should use
    devm_mfd_add_devices() instead.
    
    Fixes: d3ea21272094 ("mfd: Add ROHM BD9571MWV-M MFD PMIC driver")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Acked-for-MFD-by: Lee Jones <lee.jones@linaro.org>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Matti Vaittinen <matti.vaittinen@fi.rohmeurope.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9950bb1a102f118477a32b800dcddab0c237ed0
Author: Ferry Toth <ftoth@exalondelft.nl>
Date:   Tue Jan 12 23:37:49 2021 +0100

    dmaengine: hsu: disable spurious interrupt
    
    [ Upstream commit 035b73b2b3b2e074a56489a7bf84b6a8012c0e0d ]
    
    On Intel Tangier B0 and Anniedale the interrupt line, disregarding
    to have different numbers, is shared between HSU DMA and UART IPs.
    Thus on such SoCs we are expecting that IRQ handler is called in
    UART driver only. hsu_pci_irq was handling the spurious interrupt
    from HSU DMA by returning immediately. This wastes CPU time and
    since HSU DMA and HSU UART interrupt occur simultaneously they race
    to be handled causing delay to the HSU UART interrupt handling.
    Fix this by disabling the interrupt entirely.
    
    Fixes: 4831e0d9054c ("serial: 8250_mid: handle interrupt correctly in DMA case")
    Signed-off-by: Ferry Toth <ftoth@exalondelft.nl>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20210112223749.97036-1-ftoth@exalondelft.nl
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb02d6058f20561484a70b2e6232d8365856efab
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 12 17:06:14 2020 +0100

    dmaengine: fsldma: Fix a resource leak in an error handling path of the probe function
    
    [ Upstream commit b202d4e82531a62a33a6b14d321dd2aad491578e ]
    
    In case of error, the previous 'fsl_dma_chan_probe()' calls must be undone
    by some 'fsl_dma_chan_remove()', as already done in the remove function.
    
    It was added in the remove function in commit 77cd62e8082b ("fsldma: allow
    Freescale Elo DMA driver to be compiled as a module")
    
    Fixes: d3f620b2c4fe ("fsldma: simplify IRQ probing and handling")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201212160614.92576-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b216e93d5fb7e3b382cf1446e66e8373b86f78ea
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 12 17:05:16 2020 +0100

    dmaengine: fsldma: Fix a resource leak in the remove function
    
    [ Upstream commit cbc0ad004c03ad7971726a5db3ec84dba3dcb857 ]
    
    A 'irq_dispose_mapping()' call is missing in the remove function.
    Add it.
    
    This is needed to undo the 'irq_of_parse_and_map() call from the probe
    function and already part of the error handling path of the probe function.
    
    It was added in the probe function only in commit d3f620b2c4fe ("fsldma:
    simplify IRQ probing and handling")
    
    Fixes: 77cd62e8082b ("fsldma: allow Freescale Elo DMA driver to be compiled as a module")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201212160516.92515-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ab52597fba8d2de3bcf9f13c9f18c9bb13c4783
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Dec 16 17:12:21 2020 -0800

    HID: core: detect and skip invalid inputs to snto32()
    
    [ Upstream commit a0312af1f94d13800e63a7d0a66e563582e39aec ]
    
    Prevent invalid (0, 0) inputs to hid-core's snto32() function.
    
    Maybe it is just the dummy device here that is causing this, but
    there are hundreds of calls to snto32(0, 0). Having n (bits count)
    of 0 is causing the current UBSAN trap with a shift value of
    0xffffffff (-1, or n - 1 in this function).
    
    Either of the value to shift being 0 or the bits count being 0 can be
    handled by just returning 0 to the caller, avoiding the following
    complex shift + OR operations:
    
            return value & (1 << (n - 1)) ? value | (~0U << n) : value;
    
    Fixes: dde5845a529f ("[PATCH] Generic HID layer - code split")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: syzbot+1e911ad71dd4ea72e04a@syzkaller.appspotmail.com
    Cc: Jiri Kosina <jikos@kernel.org>
    Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: linux-input@vger.kernel.org
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6effaabf64946f7f7e89f28534ac7cfa9ea517fb
Author: Pratyush Yadav <p.yadav@ti.com>
Date:   Wed Dec 23 00:14:20 2020 +0530

    spi: cadence-quadspi: Abort read if dummy cycles required are too many
    
    [ Upstream commit ceeda328edeeeeac7579e9dbf0610785a3b83d39 ]
    
    The controller can only support up to 31 dummy cycles. If the command
    requires more it falls back to using 31. This command is likely to fail
    because the correct number of cycles are not waited upon. Rather than
    silently issuing an incorrect command, fail loudly so the caller can get
    a chance to find out the command can't be supported by the controller.
    
    Fixes: 140623410536 ("mtd: spi-nor: Add driver for Cadence Quad SPI Flash Controller")
    Signed-off-by: Pratyush Yadav <p.yadav@ti.com>
    Link: https://lore.kernel.org/r/20201222184425.7028-3-p.yadav@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e62632ab43324ccad2bf33062011f10f3fbf39b
Author: Jan Kara <jack@suse.cz>
Date:   Tue Dec 22 12:09:53 2020 +0100

    quota: Fix memory leak when handling corrupted quota file
    
    [ Upstream commit a4db1072e1a3bd7a8d9c356e1902b13ac5deb8ef ]
    
    When checking corrupted quota file we can bail out and leak allocated
    info structure. Properly free info structure on error return.
    
    Reported-by: syzbot+77779c9b52ab78154b08@syzkaller.appspotmail.com
    Fixes: 11c514a99bb9 ("quota: Sanity-check quota file headers on load")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05e5e66c6781f5b7cebfae772f8fcb68fbb074f2
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Dec 26 13:15:54 2020 +0100

    clk: meson: clk-pll: fix initializing the old rate (fallback) for a PLL
    
    [ Upstream commit 2f290b7c67adf6459a17a4c978102af35cd62e4a ]
    
    The "rate" parameter in meson_clk_pll_set_rate() contains the new rate.
    Retrieve the old rate with clk_hw_get_rate() so we don't inifinitely try
    to switch from the new rate to the same rate again.
    
    Fixes: 7a29a869434e8b ("clk: meson: Add support for Meson clock controller")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20201226121556.975418-2-martin.blumenstingl@googlemail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48ba5315db7de0f997597510f60fbeb7bdd64f5f
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Thu Dec 17 09:42:00 2020 -0600

    capabilities: Don't allow writing ambiguous v3 file capabilities
    
    [ Upstream commit 95ebabde382c371572297915b104e55403674e73 ]
    
    The v3 file capabilities have a uid field that records the filesystem
    uid of the root user of the user namespace the file capabilities are
    valid in.
    
    When someone is silly enough to have the same underlying uid as the
    root uid of multiple nested containers a v3 filesystem capability can
    be ambiguous.
    
    In the spirit of don't do that then, forbid writing a v3 filesystem
    capability if it is ambiguous.
    
    Fixes: 8db6c34f1dbc ("Introduce v3 namespaced file capabilities")
    Reviewed-by: Andrew G. Morgan <morgan@kernel.org>
    Reviewed-by: Serge Hallyn <serge@hallyn.com>
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b98e29527244255dad43b807fee1757aa414d7
Author: Tom Rix <trix@redhat.com>
Date:   Wed Dec 30 06:56:04 2020 -0800

    jffs2: fix use after free in jffs2_sum_write_data()
    
    [ Upstream commit 19646447ad3a680d2ab08c097585b7d96a66126b ]
    
    clang static analysis reports this problem
    
    fs/jffs2/summary.c:794:31: warning: Use of memory after it is freed
                    c->summary->sum_list_head = temp->u.next;
                                                ^~~~~~~~~~~~
    
    In jffs2_sum_write_data(), in a loop summary data is handles a node at
    a time.  When it has written out the node it is removed the summary list,
    and the node is deleted.  In the corner case when a
    JFFS2_FEATURE_RWCOMPAT_COPY is seen, a call is made to
    jffs2_sum_disable_collecting().  jffs2_sum_disable_collecting() deletes
    the whole list which conflicts with the loop's deleting the list by parts.
    
    To preserve the old behavior of stopping the write midway, bail out of
    the loop after disabling summary collection.
    
    Fixes: 6171586a7ae5 ("[JFFS2] Correct handling of JFFS2_FEATURE_RWCOMPAT_COPY nodes.")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20808ec6b7477a077995933573907f2bb24eb3b6
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Feb 11 13:01:08 2021 +0000

    fs/jfs: fix potential integer overflow on shift of a int
    
    [ Upstream commit 4208c398aae4c2290864ba15c3dab7111f32bec1 ]
    
    The left shift of int 32 bit integer constant 1 is evaluated using 32 bit
    arithmetic and then assigned to a signed 64 bit integer. In the case where
    l2nb is 32 or more this can lead to an overflow.  Avoid this by shifting
    the value 1LL instead.
    
    Addresses-Coverity: ("Uninitentional integer overflow")
    Fixes: b40c2e665cd5 ("fs/jfs: TRIM support for JFS Filesystem")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 159f5d5ca0ac8d04db296525b7127bb8a4748d06
Author: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
Date:   Thu Feb 4 09:49:51 2021 -0800

    ima: Free IMA measurement buffer after kexec syscall
    
    [ Upstream commit f31e3386a4e92ba6eda7328cb508462956c94c64 ]
    
    IMA allocates kernel virtual memory to carry forward the measurement
    list, from the current kernel to the next kernel on kexec system call,
    in ima_add_kexec_buffer() function.  This buffer is not freed before
    completing the kexec system call resulting in memory leak.
    
    Add ima_buffer field in "struct kimage" to store the virtual address
    of the buffer allocated for the IMA measurement list.
    Free the memory allocated for the IMA measurement list in
    kimage_file_post_load_cleanup() function.
    
    Signed-off-by: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
    Suggested-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Fixes: 7b8589cc29e7 ("ima: on soft reboot, save the measurement list")
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eeda29f9ad82e1ddc7a2efd0f405a3858f590631
Author: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
Date:   Thu Feb 4 09:49:50 2021 -0800

    ima: Free IMA measurement buffer on error
    
    [ Upstream commit 6d14c6517885fa68524238787420511b87d671df ]
    
    IMA allocates kernel virtual memory to carry forward the measurement
    list, from the current kernel to the next kernel on kexec system call,
    in ima_add_kexec_buffer() function.  In error code paths this memory
    is not freed resulting in memory leak.
    
    Free the memory allocated for the IMA measurement list in
    the error code paths in ima_add_kexec_buffer() function.
    
    Signed-off-by: Lakshmi Ramasubramanian <nramas@linux.microsoft.com>
    Suggested-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Fixes: 7b8589cc29e7 ("ima: on soft reboot, save the measurement list")
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c62a8dbd2689c5f9cd633069003ef60a549a29b
Author: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
Date:   Wed Feb 3 11:28:37 2021 +0000

    crypto: ecdh_helper - Ensure 'len >= secret.len' in decode_key()
    
    [ Upstream commit a53ab94eb6850c3657392e2d2ce9b38c387a2633 ]
    
    The length ('len' parameter) passed to crypto_ecdh_decode_key() is never
    checked against the length encoded in the passed buffer ('buf'
    parameter). This could lead to an out-of-bounds access when the passed
    length is less than the encoded length.
    
    Add a check to prevent that.
    
    Fixes: 3c4b23901a0c7 ("crypto: ecdh - Add ECDH software support")
    Signed-off-by: Daniele Alessandrelli <daniele.alessandrelli@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5a759c1f708622f3bdc0ce5cd80a96d5f5f296b
Author: Jan Henrik Weinstock <jan.weinstock@rwth-aachen.de>
Date:   Mon Feb 1 16:14:59 2021 +0100

    hwrng: timeriomem - Fix cooldown period calculation
    
    [ Upstream commit e145f5565dc48ccaf4cb50b7cfc48777bed8c100 ]
    
    Ensure cooldown period tolerance of 1% is actually accounted for.
    
    Fixes: ca3bff70ab32 ("hwrng: timeriomem - Improve performance...")
    Signed-off-by: Jan Henrik Weinstock <jan.weinstock@rwth-aachen.de>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ace3844f17eea1d9fc0c191c867ec35d52b1718e
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Fri Nov 20 09:08:04 2020 +0800

    btrfs: clarify error returns values in __load_free_space_cache
    
    [ Upstream commit 3cc64e7ebfb0d7faaba2438334c43466955a96e8 ]
    
    Return value in __load_free_space_cache is not properly set after
    (unlikely) memory allocation failures and 0 is returned instead.
    This is not a problem for the caller load_free_space_cache because only
    value 1 is considered as 'cache loaded' but for clarity it's better
    to set the errors accordingly.
    
    Fixes: a67509c30079 ("Btrfs: add a io_ctl struct and helpers for dealing with the space cache")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6204f09290537d165047693ccf0697e370b8a85
Author: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
Date:   Wed Dec 9 08:08:25 2020 +0100

    Drivers: hv: vmbus: Avoid use-after-free in vmbus_onoffer_rescind()
    
    [ Upstream commit e3fa4b747f085d2cda09bba0533b86fa76038635 ]
    
    When channel->device_obj is non-NULL, vmbus_onoffer_rescind() could
    invoke put_device(), that will eventually release the device and free
    the channel object (cf. vmbus_device_release()).  However, a pointer
    to the object is dereferenced again later to load the primary_channel.
    The use-after-free can be avoided by noticing that this load/check is
    redundant if device_obj is non-NULL: primary_channel must be NULL if
    device_obj is non-NULL, cf. vmbus_add_channel_work().
    
    Fixes: 54a66265d6754b ("Drivers: hv: vmbus: Fix rescind handling")
    Reported-by: Juan Vazquez <juvazq@microsoft.com>
    Signed-off-by: Andrea Parri (Microsoft) <parri.andrea@gmail.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20201209070827.29335-5-parri.andrea@gmail.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10c097aacd333e5012e1621190a40f3404452b0b
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jan 29 10:28:45 2021 -0800

    ata: ahci_brcm: Add back regulators management
    
    [ Upstream commit 10340f8d7b6dd54e616339c8ccb2f397133ebea0 ]
    
    While reworking the resources management and departing from using
    ahci_platform_enable_resources() which did not allow a proper step
    separation like we need, we unfortunately lost the ability to control
    AHCI regulators. This broke some Broadcom STB systems that do expect
    regulators to be turned on to link up with attached hard drives.
    
    Fixes: c0cdf2ac4b5b ("ata: ahci_brcm: Fix AHCI resources management")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbc1f7bc286e6f58ec5b7e57766d7bf5edc9ed8a
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Dec 20 15:11:13 2020 +0100

    media: uvcvideo: Accept invalid bFormatIndex and bFrameIndex values
    
    [ Upstream commit dc9455ffae02d7b7fb51ba1e007fffcb9dc5d890 ]
    
    The Renkforce RF AC4K 300 Action Cam 4K reports invalid bFormatIndex and
    bFrameIndex values when negotiating the video probe and commit controls.
    The UVC descriptors report a single supported format and frame size,
    with bFormatIndex and bFrameIndex both equal to 2, but the video probe
    and commit controls report bFormatIndex and bFrameIndex set to 1.
    
    The device otherwise operates correctly, but the driver rejects the
    values and fails the format try operation. Fix it by ignoring the
    invalid indices, and assuming that the format and frame requested by the
    driver are accepted by the device.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=210767
    
    Fixes: 8a652a17e3c0 ("media: uvcvideo: Ensure all probed info is returned to v4l2")
    Reported-by: Till Dörges <doerges@pre-sense.de>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0202b4ad2bd795b0bd7955f9feb0ecda4c5ebe52
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jan 18 14:45:13 2021 +0100

    media: pxa_camera: declare variable when DEBUG is defined
    
    [ Upstream commit 031b9212eeee365443aaef013360ea6cded7b2c4 ]
    
    When DEBUG is defined this error occurs
    
    drivers/media/platform/pxa_camera.c:1410:7: error:
      ‘i’ undeclared (first use in this function)
      for (i = 0; i < vb->num_planes; i++)
           ^
    The variable 'i' is missing, so declare it.
    
    Fixes: 6f28435d1c15 ("[media] media: platform: pxa_camera: trivial move of functions")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 339bd7906a30ebc7322a7e8f19b5959025d035c2
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Jan 16 22:21:46 2021 +0100

    media: cx25821: Fix a bug when reallocating some dma memory
    
    [ Upstream commit b2de3643c5024fc4fd128ba7767c7fb8b714bea7 ]
    
    This function looks like a realloc.
    
    However, if 'risc->cpu != NULL', the memory will be freed, but never
    reallocated with the bigger 'size'.
    Explicitly set 'risc->cpu' to NULL, so that the reallocation is
    correctly performed a few lines below.
    
    [hverkuil: NULL != risc->cpu -> risc->cpu]
    
    Fixes: 5ede94c70553 ("[media] cx25821: remove bogus btcx_risc dependency)
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60a4e06a815b9cfdd9e6379e086355669675a0cb
Author: Luo Meng <luomeng12@huawei.com>
Date:   Wed Nov 25 02:34:37 2020 +0100

    media: qm1d1c0042: fix error return code in qm1d1c0042_init()
    
    [ Upstream commit fcf8d018bdca0453b8d6359062e6bc1512d04c38 ]
    
    Fix to return a negative error code from the error handling case
    instead of 0 in function qm1d1c0042_init(), as done elsewhere
    in this function.
    
    Fixes: ab4d14528fdf ("[media] em28xx: add support for PLEX PX-BCUD (ISDB-S)")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Acked-by: Akihiro Tsukada <tskd08@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13bdc1530b5281bbf277729099c8ed8eec78b5e9
Author: Joe Perches <joe@perches.com>
Date:   Sun Aug 23 20:13:31 2020 +0200

    media: lmedm04: Fix misuse of comma
    
    [ Upstream commit 59a3e78f8cc33901fe39035c1ab681374bba95ad ]
    
    There's a comma used instead of a semicolon that causes multiple
    statements to be executed after an if instead of just the intended
    single statement.
    
    Replace the comma with a semicolon.
    
    Fixes: 15e1ce33182d ("[media] lmedm04: Fix usb_submit_urb BOGUS urb xfer, pipe 1 != type 3 in interrupt urb")
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39eacff12281068d6d0564240af00043def58ea8
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Tue Jan 5 00:02:37 2021 +0100

    crypto: bcm - Rename struct device_private to bcm_device_private
    
    [ Upstream commit f7f2b43eaf6b4cfe54c75100709be31d5c4b52c8 ]
    
    Renaming 'struct device_private' to 'struct bcm_device_private',
    because it clashes with 'struct device_private' from
    'drivers/base/base.h'.
    
    While it's not a functional problem, it's causing two distinct
    type hierarchies in BTF data. It also breaks build with options:
      CONFIG_DEBUG_INFO_BTF=y
      CONFIG_CRYPTO_DEV_BCM_SPU=y
    
    as reported by Qais Yousef [1].
    
    [1] https://lore.kernel.org/lkml/20201229151352.6hzmjvu3qh6p2qgg@e107158-lin/
    
    Fixes: 9d12ba86f818 ("crypto: brcm - Add Broadcom SPU driver")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c7f5e9ccd36a073f431d7343f772d9813a585e5
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Dec 11 13:07:59 2020 +0300

    ASoC: cs42l56: fix up error handling in probe
    
    [ Upstream commit 856fe64da84c95a1d415564b981ae3908eea2a76 ]
    
    There are two issues with this code.  The first error path forgot to set
    the error code and instead returns success.  The second error path
    doesn't clean up.
    
    Fixes: 272b5edd3b8f ("ASoC: Add support for CS42L56 CODEC")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/X9NE/9nK9/TuxuL+@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac485578db9f5760a9f62550b1fff3f335b0c0e4
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Jan 2 09:26:37 2021 +0100

    media: tm6000: Fix memleak in tm6000_start_stream
    
    [ Upstream commit 76aaf8a96771c16365b8510f1fb97738dc88026e ]
    
    When usb_clear_halt() fails, dvb->bulk_urb->transfer_buffer
    and dvb->bulk_urb should be freed just like when
    usb_submit_urb() fails.
    
    Fixes: 3169c9b26fffa ("V4L/DVB (12788): tm6000: Add initial DVB-T support")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27f0cbd4507380bc6a75c67ea6cfea18a770211d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Jan 2 07:27:22 2021 +0100

    media: media/pci: Fix memleak in empress_init
    
    [ Upstream commit 15d0c52241ecb1c9d802506bff6f5c3f7872c0df ]
    
    When vb2_queue_init() fails, dev->empress_dev
    should be released just like other error handling
    paths.
    
    Fixes: 2ada815fc48bb ("[media] saa7134: convert to vb2")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fadd6f198e10bababb8aea483577f49f4afd330c
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 12 18:41:19 2020 +0100

    media: vsp1: Fix an error handling path in the probe function
    
    [ Upstream commit 7113469dafc2d545fa4fa9bc649c31dc27db492e ]
    
    A previous 'rcar_fcp_get()' call must be undone in the error handling path,
    as already done in the remove function.
    
    Fixes: 94fcdf829793 ("[media] v4l: vsp1: Add FCP support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e55ef042021803768cc440fa1eef5b0ddbfac14d
Author: Jacopo Mondi <jacopo@jmondi.org>
Date:   Mon Dec 21 18:52:20 2020 +0100

    media: i2c: ov5670: Fix PIXEL_RATE minimum value
    
    [ Upstream commit dc1eb7c9c290cba52937c9a224b22a400bb0ffd7 ]
    
    The driver currently reports a single supported value for
    V4L2_CID_PIXEL_RATE and initializes the control's minimum value to 0,
    which is very risky, as userspace might accidentally use it as divider
    when calculating the time duration of a line.
    
    Fix this by using as minimum the only supported value when registering
    the control.
    
    Fixes: 5de35c9b8dcd1 ("media: i2c: Add Omnivision OV5670 5M sensor support")
    Signed-off-by: Jacopo Mondi <jacopo@jmondi.org>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1868cde585737dd3e93b6bb3286f4c1e22f4b02
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Jan 5 13:15:48 2021 -0700

    MIPS: lantiq: Explicitly compare LTQ_EBU_PCC_ISTAT against 0
    
    [ Upstream commit c6f2a9e17b9bef7677caddb1626c2402f3e9d2bd ]
    
    When building xway_defconfig with clang:
    
    arch/mips/lantiq/irq.c:305:48: error: use of logical '&&' with constant
    operand [-Werror,-Wconstant-logical-operand]
            if ((irq == LTQ_ICU_EBU_IRQ) && (module == 0) && LTQ_EBU_PCC_ISTAT)
                                                          ^ ~~~~~~~~~~~~~~~~~
    arch/mips/lantiq/irq.c:305:48: note: use '&' for a bitwise operation
            if ((irq == LTQ_ICU_EBU_IRQ) && (module == 0) && LTQ_EBU_PCC_ISTAT)
                                                          ^~
                                                          &
    arch/mips/lantiq/irq.c:305:48: note: remove constant to silence this
    warning
            if ((irq == LTQ_ICU_EBU_IRQ) && (module == 0) && LTQ_EBU_PCC_ISTAT)
                                                         ~^~~~~~~~~~~~~~~~~~~~
    1 error generated.
    
    Explicitly compare the constant LTQ_EBU_PCC_ISTAT against 0 to fix the
    warning. Additionally, remove the unnecessary parentheses as this is a
    simple conditional statement and shorthand '== 0' to '!'.
    
    Fixes: 3645da0276ae ("OF: MIPS: lantiq: implement irq_domain support")
    Link: https://github.com/ClangBuiltLinux/linux/issues/807
    Reported-by: Dmitry Golovin <dima@golovin.in>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 13a9bae54fdf945d51363a2de993ae60bd4b036c
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Tue Jan 5 13:34:56 2021 -0700

    MIPS: c-r4k: Fix section mismatch for loongson2_sc_init
    
    [ Upstream commit c58734eee6a2151ba033c0dcb31902c89e310374 ]
    
    When building with clang, the following section mismatch warning occurs:
    
    WARNING: modpost: vmlinux.o(.text+0x24490): Section mismatch in
    reference from the function r4k_cache_init() to the function
    .init.text:loongson2_sc_init()
    
    This should have been fixed with commit ad4fddef5f23 ("mips: fix Section
    mismatch in reference") but it was missed. Remove the improper __init
    annotation like that commit did.
    
    Fixes: 078a55fc824c ("MIPS: Delete __cpuinit/__CPUINIT usage from MIPS code")
    Link: https://github.com/ClangBuiltLinux/linux/issues/787
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Huacai Chen <chenhuacai@kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27170a3b4036fa559bd07f282f0e04aded288d6f
Author: Corentin Labbe <clabbe@baylibre.com>
Date:   Mon Dec 14 20:02:30 2020 +0000

    crypto: sun4i-ss - fix kmap usage
    
    [ Upstream commit 9bc3dd24e7dccd50757db743a3635ad5b0497e6e ]
    
    With the recent kmap change, some tests which were conditional on
    CONFIG_DEBUG_HIGHMEM now are enabled by default.
    This permit to detect a problem in sun4i-ss usage of kmap.
    
    sun4i-ss uses two kmap via sg_miter (one for input, one for output), but
    using two kmap at the same time is hard:
    "the ordering has to be correct and with sg_miter that's probably hard to get
    right." (quoting Tlgx)
    
    So the easiest solution is to never have two sg_miter/kmap open at the same time.
    After each use of sg_miter, I store the current index, for being able to
    resume sg_miter to the right place.
    
    Fixes: 6298e948215f ("crypto: sunxi-ss - Add Allwinner Security System crypto accelerator")
    Signed-off-by: Corentin Labbe <clabbe@baylibre.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d5462cb46de594afb2ce0be84a06afcb541b2c8
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Dec 3 11:40:48 2020 +0300

    gma500: clean up error handling in init
    
    [ Upstream commit 15ccc39b3aab667c6fa131206f01f31bfbccdf6a ]
    
    The main problem with this error handling was that it didn't clean up if
    i2c_add_numbered_adapter() failed.  This code is pretty old, and doesn't
    match with today's checkpatch.pl standards so I took the opportunity to
    tidy it up a bit.  I changed the NULL comparison, and removed the
    WARNING message if kzalloc() fails and updated the label names.
    
    Fixes: 1b082ccf5901 ("gma500: Add Oaktrail support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/X8ikkAqZfnDO2lu6@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b23f238fb1bc6d70cc8ace9c0c4d9c7e820cb52
Author: Jialin Zhang <zhangjialin11@huawei.com>
Date:   Mon Nov 30 10:02:16 2020 +0800

    drm/gma500: Fix error return code in psb_driver_load()
    
    [ Upstream commit 6926872ae24452d4f2176a3ba2dee659497de2c4 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 5c49fd3aa0ab ("gma500: Add the core DRM files and headers")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Jialin Zhang <zhangjialin11@huawei.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201130020216.1906141-1-zhangjialin11@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff83f93a06336b23e04f6238a33879a23233e431
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Nov 26 19:17:52 2020 -0800

    fbdev: aty: SPARC64 requires FB_ATY_CT
    
    [ Upstream commit c6c90c70db4d9a0989111d6b994d545659410f7a ]
    
    It looks like SPARC64 requires FB_ATY_CT to build without errors,
    so have FB_ATY select FB_ATY_CT if both SPARC64 and PCI are enabled
    instead of using "default y if SPARC64 && PCI", which is not strong
    enough to prevent build errors.
    
    As it currently is, FB_ATY_CT can be disabled, resulting in build
    errors:
    
    ERROR: modpost: "aty_postdividers" [drivers/video/fbdev/aty/atyfb.ko] undefined!
    ERROR: modpost: "aty_ld_pll_ct" [drivers/video/fbdev/aty/atyfb.ko] undefined!
    
    Reviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Fixes: f7018c213502 ("video: move fbdev to drivers/video/fbdev")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: sparclinux@vger.kernel.org
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: dri-devel@lists.freedesktop.org
    Cc: linux-fbdev@vger.kernel.org
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201127031752.10371-1-rdunlap@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eeb81cc720067081e2623e63a1b922ff0db22839
Author: Maxime Chevallier <maxime.chevallier@bootlin.com>
Date:   Tue Feb 16 10:25:35 2021 +0100

    net: mvneta: Remove per-cpu queue mapping for Armada 3700
    
    [ Upstream commit cf9bf871280d9e0a8869d98c2602d29caf69dfa3 ]
    
    According to Errata #23 "The per-CPU GbE interrupt is limited to Core
    0", we can't use the per-cpu interrupt mechanism on the Armada 3700
    familly.
    
    This is correctly checked for RSS configuration, but the initial queue
    mapping is still done by having the queues spread across all the CPUs in
    the system, both in the init path and in the cpu_hotplug path.
    
    Fixes: 2636ac3cc2b4 ("net: mvneta: Add network support for Armada 3700 SoC")
    Signed-off-by: Maxime Chevallier <maxime.chevallier@bootlin.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb302bd0840ff71203bbb05b13b2e738a937cc23
Author: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>
Date:   Wed Feb 17 00:37:09 2021 +0530

    net: amd-xgbe: Reset link when the link never comes back
    
    [ Upstream commit 84fe68eb67f9499309cffd97c1ba269de125ff14 ]
    
    Normally, auto negotiation and reconnect should be automatically done by
    the hardware. But there seems to be an issue where auto negotiation has
    to be restarted manually. This happens because of link training and so
    even though still connected to the partner the link never "comes back".
    This needs an auto-negotiation restart.
    
    Also, a change in xgbe-mdio is needed to get ethtool to recognize the
    link down and get the link change message. This change is only
    required in a backplane connection mode.
    
    Fixes: abf0a1c2b26a ("amd-xgbe: Add support for SFP+ modules")
    Co-developed-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
    Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
    Signed-off-by: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df11a131262f83c8bf8ea4dbc85d2f3584f16758
Author: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>
Date:   Wed Feb 17 00:37:07 2021 +0530

    net: amd-xgbe: Reset the PHY rx data path when mailbox command timeout
    
    [ Upstream commit 30b7edc82ec82578f4f5e6706766f0a9535617d3 ]
    
    Sometimes mailbox commands timeout when the RX data path becomes
    unresponsive. This prevents the submission of new mailbox commands to DXIO.
    This patch identifies the timeout and resets the RX data path so that the
    next message can be submitted properly.
    
    Fixes: 549b32af9f7c ("amd-xgbe: Simplify mailbox interface rate change code")
    Co-developed-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
    Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
    Signed-off-by: Shyam Sundar S K <Shyam-sundar.S-k@amd.com>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 757923bde30b79a31cb90891da530dc0defe6a93
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Fri Feb 12 20:49:00 2021 -0600

    ibmvnic: skip send_request_unmap for timeout reset
    
    [ Upstream commit 7d3a7b9ea59ddb223aec59b45fa1713c633aaed4 ]
    
    Timeout reset will trigger the VIOS to unmap it automatically,
    similarly as FAILVOER and MOBILITY events. If we unmap it
    in the linux side, we will see errors like
    "30000003: Error 4 in REQUEST_UNMAP_RSP".
    So, don't call send_request_unmap for timeout reset.
    
    Fixes: ed651a10875f ("ibmvnic: Updated reset handling")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dffd9ff4e13c0cc5cf53e23e161312de9e8b9b6e
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 15 12:05:32 2021 +0000

    b43: N-PHY: Fix the update of coef for the PHY revision >= 3case
    
    [ Upstream commit 4773acf3d4b50768bf08e9e97a204819e9ea0895 ]
    
    The documentation for the PHY update [1] states:
    
    Loop 4 times with index i
    
        If PHY Revision >= 3
            Copy table[i] to coef[i]
        Otherwise
            Set coef[i] to 0
    
    the copy of the table to coef is currently implemented the wrong way
    around, table is being updated from uninitialized values in coeff.
    Fix this by swapping the assignment around.
    
    [1] https://bcm-v4.sipsolutions.net/802.11/PHY/N/RestoreCal/
    
    Fixes: 2f258b74d13c ("b43: N-PHY: implement restoring general configuration")
    Addresses-Coverity: ("Uninitialized scalar variable")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8eab1a29d48875f1efe03e5e28e0d4032af766db
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Feb 5 17:53:52 2021 +0000

    mac80211: fix potential overflow when multiplying to u32 integers
    
    [ Upstream commit 6194f7e6473be78acdc5d03edd116944bdbb2c4e ]
    
    The multiplication of the u32 variables tx_time and estimated_retx is
    performed using a 32 bit multiplication and the result is stored in
    a u64 result. This has a potential u32 overflow issue, so avoid this
    by casting tx_time to a u64 to force a 64 bit multiply.
    
    Addresses-Coverity: ("Unintentional integer overflow")
    Fixes: 050ac52cbe1f ("mac80211: code for on-demand Hybrid Wireless Mesh Protocol")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20210205175352.208841-1-colin.king@canonical.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8ab90d5317c162642b5117ba9f28e0dc2d6dc3c
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Feb 11 11:16:12 2021 +0100

    xen/netback: fix spurious event detection for common event case
    
    [ Upstream commit a3daf3d39132b405781be8d9ede0c449b244b64e ]
    
    In case of a common event for rx and tx queue the event should be
    regarded to be spurious if no rx and no tx requests are pending.
    
    Unfortunately the condition for testing that is wrong causing to
    decide a event being spurious if no rx OR no tx requests are
    pending.
    
    Fix that plus using local variables for rx/tx pending indicators in
    order to split function calls and if condition.
    
    Fixes: 23025393dbeb3b ("xen/netback: use lateeoi irq binding")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Paul Durrant <paul@xen.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39c896a79a5800556d222242f9715c31266a8a6a
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Thu Feb 11 02:24:23 2021 -0500

    bnxt_en: reverse order of TX disable and carrier off
    
    [ Upstream commit 132e0b65dc2b8bfa9721bfce834191f24fd1d7ed ]
    
    A TX queue can potentially immediately timeout after it is stopped
    and the last TX timestamp on that queue was more than 5 seconds ago with
    carrier still up.  Prevent these intermittent false TX timeouts
    by bringing down carrier first before calling netif_tx_disable().
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2df511a6ae5a2937247c264a7b71509875797480
Author: Linus Lüssing <ll@simonwunderlich.de>
Date:   Wed Feb 10 09:53:44 2021 +0200

    ath9k: fix data bus crash when setting nf_override via debugfs
    
    [ Upstream commit 12c8f3d1cdd84f01ee777b756db9dddc1f1c9d17 ]
    
    When trying to set the noise floor via debugfs, a "data bus error"
    crash like the following can happen:
    
    [   88.433133] Data bus error, epc == 80221c28, ra == 83314e60
    [   88.438895] Oops[#1]:
    [   88.441246] CPU: 0 PID: 7263 Comm: sh Not tainted 4.14.195 #0
    [   88.447174] task: 838a1c20 task.stack: 82d5e000
    [   88.451847] $ 0   : 00000000 00000030 deadc0de 83141de4
    [   88.457248] $ 4   : b810a2c4 0000a2c4 83230fd4 00000000
    [   88.462652] $ 8   : 0000000a 00000000 00000001 00000000
    [   88.468055] $12   : 7f8ef318 00000000 00000000 77f802a0
    [   88.473457] $16   : 83230080 00000002 0000001b 83230080
    [   88.478861] $20   : 83a1c3f8 00841000 77f7adb0 ffffff92
    [   88.484263] $24   : 00000fa4 77edd860
    [   88.489665] $28   : 82d5e000 82d5fda8 00000000 83314e60
    [   88.495070] Hi    : 00000000
    [   88.498044] Lo    : 00000000
    [   88.501040] epc   : 80221c28 ioread32+0x8/0x10
    [   88.505671] ra    : 83314e60 ath9k_hw_loadnf+0x88/0x520 [ath9k_hw]
    [   88.512049] Status: 1000fc03 KERNEL EXL IE
    [   88.516369] Cause : 5080801c (ExcCode 07)
    [   88.520508] PrId  : 00019374 (MIPS 24Kc)
    [   88.524556] Modules linked in: ath9k ath9k_common pppoe ppp_async l2tp_ppp cdc_mbim batman_adv ath9k_hw ath sr9700 smsc95xx sierra_net rndis_host qmi_wwan pppox ppp_generic pl2303 nf_conntrack_ipv6 mcs7830 mac80211 kalmia iptable_nat ipt_REJECT ipt_MASQUERADE huawei_cdc_ncm ftdi_sio dm9601 cfg80211 cdc_subset cdc_ncm cdc_ether cdc_eem ax88179_178a asix xt_time xt_tcpudp xt_tcpmss xt_statistic xt_state xt_nat xt_multiport xt_mark xt_mac xt_limit xt_length xt_hl xt_ecn xt_dscp xt_conntrack xt_comment xt_TCPMSS xt_REDIRECT xt_NETMAP xt_LOG xt_HL xt_FLOWOFFLOAD xt_DSCP xt_CLASSIFY usbserial usbnet usbhid slhc rtl8150 r8152 pegasus nf_reject_ipv4 nf_nat_redirect nf_nat_masquerade_ipv4 nf_conntrack_ipv4 nf_nat_ipv4 nf_nat nf_log_ipv4 nf_flow_table_hw nf_flow_table nf_defrag_ipv6 nf_defrag_ipv4 nf_conntrack
    [   88.597894]  libcrc32c kaweth iptable_mangle iptable_filter ipt_ECN ipheth ip_tables hso hid_generic crc_ccitt compat cdc_wdm cdc_acm br_netfilter hid evdev input_core nf_log_ipv6 nf_log_common ip6table_mangle ip6table_filter ip6_tables ip6t_REJECT x_tables nf_reject_ipv6 l2tp_netlink l2tp_core udp_tunnel ip6_udp_tunnel xfrm6_mode_tunnel xfrm6_mode_transport xfrm6_mode_beet ipcomp6 xfrm6_tunnel esp6 ah6 xfrm4_tunnel xfrm4_mode_tunnel xfrm4_mode_transport xfrm4_mode_beet ipcomp esp4 ah4 tunnel6 tunnel4 tun xfrm_user xfrm_ipcomp af_key xfrm_algo sha256_generic sha1_generic jitterentropy_rng drbg md5 hmac echainiv des_generic deflate zlib_inflate zlib_deflate cbc authenc crypto_acompress ehci_platform ehci_hcd gpio_button_hotplug usbcore nls_base usb_common crc16 mii aead crypto_null cryptomgr crc32c_generic
    [   88.671671]  crypto_hash
    [   88.674292] Process sh (pid: 7263, threadinfo=82d5e000, task=838a1c20, tls=77f81efc)
    [   88.682279] Stack : 00008060 00000008 00000200 00000000 00000000 00000000 00000000 00000002
    [   88.690916]         80500000 83230080 82d5fe22 00841000 77f7adb0 00000000 00000000 83156858
    [   88.699553]         00000000 8352fa00 83ad62b0 835302a8 00000000 300a00f8 00000003 82d5fe38
    [   88.708190]         82d5fef4 00000001 77f54dc4 77f80000 77f7adb0 c79fe901 00000000 00000000
    [   88.716828]         80510000 00000002 00841000 77f54dc4 77f80000 801ce4cc 0000000b 41824292
    [   88.725465]         ...
    [   88.727994] Call Trace:
    [   88.730532] [<80221c28>] ioread32+0x8/0x10
    [   88.734765] Code: 00000000  8c820000  0000000f <03e00008> 00000000  08088708  00000000  aca40000  03e00008
    [   88.744846]
    [   88.746464] ---[ end trace db226b2de1b69b9e ]---
    [   88.753477] Kernel panic - not syncing: Fatal exception
    [   88.759981] Rebooting in 3 seconds..
    
    The "REG_READ(ah, AR_PHY_AGC_CONTROL)" in ath9k_hw_loadnf() does not
    like being called when the hardware is asleep, leading to this crash.
    
    The easiest way to reproduce this is trying to set nf_override while
    the hardware is down:
    
      $ ip link set down dev wlan0
      $ echo "-85" > /sys/kernel/debug/ieee80211/phy0/ath9k/nf_override
    
    Fixing this crash by waking the hardware up before trying to set the
    noise floor. Similar to what other ath9k debugfs files do.
    
    Tested on a Lima board from 8devices, which has a QCA 4531 chipset.
    
    Fixes: b90189759a7f ("ath9k: add noise floor override option")
    Cc: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Linus Lüssing <ll@simonwunderlich.de>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20210209184352.4272-1-linus.luessing@c0d3.blue
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5b3c53bf4e6f472c4ead24a1d34cdcddce00dc7
Author: Marco Elver <elver@google.com>
Date:   Tue Feb 9 12:27:01 2021 +0100

    bpf_lru_list: Read double-checked variable once without lock
    
    [ Upstream commit 6df8fb83301d68ea0a0c0e1cbcc790fcc333ed12 ]
    
    For double-checked locking in bpf_common_lru_push_free(), node->type is
    read outside the critical section and then re-checked under the lock.
    However, concurrent writes to node->type result in data races.
    
    For example, the following concurrent access was observed by KCSAN:
    
      write to 0xffff88801521bc22 of 1 bytes by task 10038 on cpu 1:
       __bpf_lru_node_move_in        kernel/bpf/bpf_lru_list.c:91
       __local_list_flush            kernel/bpf/bpf_lru_list.c:298
       ...
      read to 0xffff88801521bc22 of 1 bytes by task 10043 on cpu 0:
       bpf_common_lru_push_free      kernel/bpf/bpf_lru_list.c:507
       bpf_lru_push_free             kernel/bpf/bpf_lru_list.c:555
       ...
    
    Fix the data races where node->type is read outside the critical section
    (for double-checked locking) by marking the access with READ_ONCE() as
    well as ensuring the variable is only accessed once.
    
    Fixes: 3a08c2fd7634 ("bpf: LRU List")
    Reported-by: syzbot+3536db46dfa58c573458@syzkaller.appspotmail.com
    Reported-by: syzbot+516acdb03d3e27d91bcd@syzkaller.appspotmail.com
    Signed-off-by: Marco Elver <elver@google.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Link: https://lore.kernel.org/bpf/20210209112701.3341724-1-elver@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae2b1ba3d635df62d8f695c20495ad8738487006
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Feb 4 17:23:42 2021 +0100

    ARM: s3c: fix fiq for clang IAS
    
    [ Upstream commit 7f9942c61fa60eda7cc8e42f04bd25b7d175876e ]
    
    Building with the clang integrated assembler produces a couple of
    errors for the s3c24xx fiq support:
    
      arch/arm/mach-s3c/irq-s3c24xx-fiq.S:52:2: error: instruction 'subne' can not set flags, but 's' suffix specified
        subnes pc, lr, #4 @@ return, still have work to do
    
      arch/arm/mach-s3c/irq-s3c24xx-fiq.S:64:1: error: invalid symbol redefinition
        s3c24xx_spi_fiq_txrx:
    
    There are apparently two problems: one with extraneous or duplicate
    labels, and one with old-style opcode mnemonics. Stefan Agner has
    previously fixed other problems like this, but missed this particular
    file.
    
    Fixes: bec0806cfec6 ("spi_s3c24xx: add FIQ pseudo-DMA support")
    Cc: Stefan Agner <stefan@agner.ch>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20210204162416.3030114-1-arnd@kernel.org
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 195ff8cb90ba55c8d1a20bcc2dea52b608eaded3
Author: Vincent Knecht <vincent.knecht@mailoo.org>
Date:   Sat Jan 23 11:44:16 2021 +0100

    arm64: dts: msm8916: Fix reserved and rfsa nodes unit address
    
    [ Upstream commit d5ae2528b0b56cf054b27d48b0cb85330900082f ]
    
    Fix `reserved` and `rfsa` unit address according to their reg address
    
    Fixes: 7258e10e6a0b ("ARM: dts: msm8916: Update reserved-memory")
    
    Signed-off-by: Vincent Knecht <vincent.knecht@mailoo.org>
    Link: https://lore.kernel.org/r/20210123104417.518105-1-vincent.knecht@mailoo.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8222ae77ea301ba2c1d8d675e5c0835e2e9b7f70
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Fri Jan 8 22:14:01 2021 +0800

    staging: rtl8723bs: wifi_regd.c: Fix incorrect number of regulatory rules
    
    [ Upstream commit 61834c967a929f6b4b7fcb91f43fa225cc29aa19 ]
    
    The custom regulatory ruleset in the rtl8723bs driver lists an incorrect
    number of rules: one too many. This results in an out-of-bounds access,
    as detected by KASAN. This was possible thanks to the newly added support
    for KASAN on ARMv7.
    
    Fix this by filling in the correct number of rules given.
    
    KASAN report:
    
    ==================================================================
    BUG: KASAN: global-out-of-bounds in cfg80211_does_bw_fit_range+0x14/0x4c [cfg80211]
    Read of size 4 at addr bf20c254 by task ip/971
    
    CPU: 2 PID: 971 Comm: ip Tainted: G         C        5.11.0-rc2-00020-gf7fe528a7ebe #1
    Hardware name: Allwinner sun8i Family
    [<c0113338>] (unwind_backtrace) from [<c010e8a4>] (show_stack+0x10/0x14)
    [<c010e8a4>] (show_stack) from [<c0e0f868>] (dump_stack+0x9c/0xb4)
    [<c0e0f868>] (dump_stack) from [<c0388284>] (print_address_description.constprop.2+0x1dc/0x2dc)
    [<c0388284>] (print_address_description.constprop.2) from [<c03885cc>] (kasan_report+0x1a8/0x1c4)
    [<c03885cc>] (kasan_report) from [<bf00a354>] (cfg80211_does_bw_fit_range+0x14/0x4c [cfg80211])
    [<bf00a354>] (cfg80211_does_bw_fit_range [cfg80211]) from [<bf00b41c>] (freq_reg_info_regd.part.6+0x108/0x124 [>
    [<bf00b41c>] (freq_reg_info_regd.part.6 [cfg80211]) from [<bf00df00>] (handle_channel_custom.constprop.12+0x48/>
    [<bf00df00>] (handle_channel_custom.constprop.12 [cfg80211]) from [<bf00e150>] (wiphy_apply_custom_regulatory+0>
    [<bf00e150>] (wiphy_apply_custom_regulatory [cfg80211]) from [<bf1fb9e8>] (rtw_regd_init+0x60/0x70 [r8723bs])
    [<bf1fb9e8>] (rtw_regd_init [r8723bs]) from [<bf1ee5a8>] (rtw_cfg80211_init_wiphy+0x164/0x1e8 [r8723bs])
    [<bf1ee5a8>] (rtw_cfg80211_init_wiphy [r8723bs]) from [<bf1f8d50>] (_netdev_open+0xe4/0x28c [r8723bs])
    [<bf1f8d50>] (_netdev_open [r8723bs]) from [<bf1f8f58>] (netdev_open+0x60/0x88 [r8723bs])
    [<bf1f8f58>] (netdev_open [r8723bs]) from [<c0bb3730>] (__dev_open+0x178/0x220)
    [<c0bb3730>] (__dev_open) from [<c0bb3cdc>] (__dev_change_flags+0x258/0x2c4)
    [<c0bb3cdc>] (__dev_change_flags) from [<c0bb3d88>] (dev_change_flags+0x40/0x80)
    [<c0bb3d88>] (dev_change_flags) from [<c0bc86fc>] (do_setlink+0x538/0x1160)
    [<c0bc86fc>] (do_setlink) from [<c0bcf9e8>] (__rtnl_newlink+0x65c/0xad8)
    [<c0bcf9e8>] (__rtnl_newlink) from [<c0bcfeb0>] (rtnl_newlink+0x4c/0x6c)
    [<c0bcfeb0>] (rtnl_newlink) from [<c0bc67c8>] (rtnetlink_rcv_msg+0x1f8/0x454)
    [<c0bc67c8>] (rtnetlink_rcv_msg) from [<c0c330e4>] (netlink_rcv_skb+0xc4/0x1e0)
    [<c0c330e4>] (netlink_rcv_skb) from [<c0c32478>] (netlink_unicast+0x2c8/0x3c4)
    [<c0c32478>] (netlink_unicast) from [<c0c32894>] (netlink_sendmsg+0x320/0x5f0)
    [<c0c32894>] (netlink_sendmsg) from [<c0b75eb0>] (____sys_sendmsg+0x320/0x3e0)
    [<c0b75eb0>] (____sys_sendmsg) from [<c0b78394>] (___sys_sendmsg+0xe8/0x12c)
    [<c0b78394>] (___sys_sendmsg) from [<c0b78a50>] (__sys_sendmsg+0xc0/0x120)
    [<c0b78a50>] (__sys_sendmsg) from [<c0100060>] (ret_fast_syscall+0x0/0x58)
    Exception stack(0xc5693fa8 to 0xc5693ff0)
    3fa0:                   00000074 c7a39800 00000003 b6cee648 00000000 00000000
    3fc0: 00000074 c7a39800 00000001 00000128 78d18349 00000000 b6ceeda0 004f7cb0
    3fe0: 00000128 b6cee5e8 aeca151f aec1d746
    
    The buggy address belongs to the variable:
     rtw_drv_halt+0xf908/0x6b4 [r8723bs]
    
    Memory state around the buggy address:
     bf20c100: 00 00 00 00 00 00 00 00 00 00 04 f9 f9 f9 f9 f9
     bf20c180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >bf20c200: 00 00 00 00 00 00 00 00 00 00 04 f9 f9 f9 f9 f9
                                             ^
     bf20c280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     bf20c300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    ==================================================================
    
    Fixes: 554c0a3abf21 ("staging: Add rtl8723bs sdio wifi driver")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Link: https://lore.kernel.org/r/20210108141401.31741-1-wens@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31462a9d919d21d9fe6d71510fc0ae43e54addf1
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Jan 13 12:20:51 2021 +0100

    usb: dwc2: Make "trimming xfer length" a debug message
    
    [ Upstream commit 1a9e38cabd80356ffb98c2c88fec528ea9644fd5 ]
    
    With some USB network adapters, such as DM96xx, the following message
    is seen for each maximum size receive packet.
    
    dwc2 ff540000.usb: dwc2_update_urb_state(): trimming xfer length
    
    This happens because the packet size requested by the driver is 1522
    bytes, wMaxPacketSize is 64, the dwc2 driver configures the chip to
    receive 24*64 = 1536 bytes, and the chip does indeed send more than
    1522 bytes of data. Since the event does not indicate an error condition,
    the message is just noise. Demote it to debug level.
    
    Fixes: 7359d482eb4d3 ("staging: HCD files for the DWC2 driver")
    Tested-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20210113112052.17063-4-nsaenzjulienne@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34b276f6deba69c337710b6317e938a023d94456
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Jan 13 12:20:50 2021 +0100

    usb: dwc2: Abort transaction after errors with unknown reason
    
    [ Upstream commit f74b68c61cbc4b2245022fcce038509333d63f6f ]
    
    In some situations, the following error messages are reported.
    
    dwc2 ff540000.usb: dwc2_hc_chhltd_intr_dma: Channel 1 - ChHltd set, but reason is unknown
    dwc2 ff540000.usb: hcint 0x00000002, intsts 0x04000021
    
    This is sometimes followed by:
    
    dwc2 ff540000.usb: dwc2_update_urb_state_abn(): trimming xfer length
    
    and then:
    
    WARNING: CPU: 0 PID: 0 at kernel/v4.19/drivers/usb/dwc2/hcd.c:2913
                            dwc2_assign_and_init_hc+0x98c/0x990
    
    The warning suggests that an odd buffer address is to be used for DMA.
    
    After an error is observed, the receive buffer may be full
    (urb->actual_length >= urb->length). However, the urb is still left in
    the queue unless three errors were observed in a row. When it is queued
    again, the dwc2 hcd code translates this into a 1-block transfer.
    If urb->actual_length (ie the total expected receive length) is not
    DMA-aligned, the buffer pointer programmed into the chip will be
    unaligned. This results in the observed warning.
    
    To solve the problem, abort input transactions after an error with
    unknown cause if the entire packet was already received. This may be
    a bit drastic, but we don't really know why the transfer was aborted
    even though the entire packet was received. Aborting the transfer in
    this situation is less risky than accepting a potentially corrupted
    packet.
    
    With this patch in place, the 'ChHltd set' and 'trimming xfer length'
    messages are still observed, but there are no more transfer attempts
    with odd buffer addresses.
    
    Fixes: 151d0cbdbe860 ("usb: dwc2: make the scheduler handle excessive NAKs better")
    Cc: Boris ARZUR <boris@konbu.org>
    Cc: Douglas Anderson <dianders@chromium.org>
    Tested-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20210113112052.17063-3-nsaenzjulienne@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 847cff02e3880d1bb49cf8fc3d62f44a634f7664
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Wed Jan 13 12:20:49 2021 +0100

    usb: dwc2: Do not update data length if it is 0 on inbound transfers
    
    [ Upstream commit 415fa1c7305dedbb345e2cc8ac91769bc1c83f1a ]
    
    The DWC2 documentation states that transfers with zero data length should
    set the number of packets to 1 and the transfer length to 0. This is not
    currently the case for inbound transfers: the transfer length is set to
    the maximum packet length. This can have adverse effects if the chip
    actually does transfer data as it is programmed to do. Follow chip
    documentation and keep the transfer length set to 0 in that situation.
    
    Fixes: 56f5b1cff22a1 ("staging: Core files for the DWC2 driver")
    Tested-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20210113112052.17063-2-nsaenzjulienne@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 240850fbb9eb2df7d160aeeeafcf6a8047ab6744
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Dec 30 10:42:30 2020 +0200

    ARM: dts: Configure missing thermal interrupt for 4430
    
    [ Upstream commit 44f416879a442600b006ef7dec3a6dc98bcf59c6 ]
    
    We have gpio_86 wired internally to the bandgap thermal shutdown
    interrupt on 4430 like we have it on 4460 according to the TRM.
    This can be found easily by searching for TSHUT.
    
    For some reason the thermal shutdown interrupt was never added
    for 4430, let's add it. I believe this is needed for the thermal
    shutdown interrupt handler ti_bandgap_tshut_irq_handler() to call
    orderly_poweroff().
    
    Fixes: aa9bb4bb8878 ("arm: dts: add omap4430 thermal data")
    Cc: Carl Philipp Klemm <philipp@uvos.xyz>
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Cc: Eduardo Valentin <edubezval@gmail.com>
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Peter Ujfalusi <peter.ujfalusi@gmail.com>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97fb664c6613959d28c21fcd5c5f622485dc14be
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 00:10:45 2021 -0800

    Bluetooth: Put HCI device if inquiry procedure interrupts
    
    [ Upstream commit 28a758c861ff290e39d4f1ee0aa5df0f0b9a45ee ]
    
    Jump to the label done to decrement the reference count of HCI device
    hdev on path that the Inquiry procedure is interrupted.
    
    Fixes: 3e13fa1e1fab ("Bluetooth: Fix hci_inquiry ioctl usage")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bb7209c529ce60079ba887e1f9c8c45719c2958
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Jan 20 23:34:19 2021 -0800

    Bluetooth: drop HCI device reference before return
    
    [ Upstream commit 5a3ef03afe7e12982dc3b978f4c5077c907f7501 ]
    
    Call hci_dev_put() to decrement reference count of HCI device hdev if
    fails to duplicate memory.
    
    Fixes: 0b26ab9dce74 ("Bluetooth: AMP: Handle Accept phylink command status evt")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be6e31232c8418602024375a7330301a5fb3e916
Author: Jack Pham <jackp@codeaurora.org>
Date:   Mon Jan 18 09:46:39 2021 +0100

    usb: gadget: u_audio: Free requests only after callback
    
    [ Upstream commit 7de8681be2cde9f6953d3be1fa6ce05f9fe6e637 ]
    
    As per the kernel doc for usb_ep_dequeue(), it states that "this
    routine is asynchronous, that is, it may return before the completion
    routine runs". And indeed since v5.0 the dwc3 gadget driver updated
    its behavior to place dequeued requests on to a cancelled list to be
    given back later after the endpoint is stopped.
    
    The free_ep() was incorrectly assuming that a request was ready to
    be freed after calling dequeue which results in a use-after-free
    in dwc3 when it traverses its cancelled list. Fix this by moving
    the usb_ep_free_request() call to the callback itself in case the
    ep is disabled.
    
    Fixes: eb9fecb9e69b0 ("usb: gadget: f_uac2: split out audio core")
    Reported-and-tested-by: Ferry Toth <fntoth@gmail.com>
    Reviewed-and-tested-by: Peter Chen <peter.chen@nxp.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20210118084642.322510-2-jbrunet@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c67c8a156be078a2d2830fc0077d0f7538eb4f3b
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Jan 17 15:26:44 2021 +0100

    cpufreq: brcmstb-avs-cpufreq: Fix resource leaks in ->remove()
    
    [ Upstream commit 3657f729b6fb5f2c0bf693742de2dcd49c572aa1 ]
    
    If 'cpufreq_unregister_driver()' fails, just WARN and continue, so that
    other resources are freed.
    
    Fixes: de322e085995 ("cpufreq: brcmstb-avs-cpufreq: AVS CPUfreq driver for Broadcom STB SoCs")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    [ Viresh: Updated Subject ]
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5181142711676ee253f40b1e3fefe528860fa27d
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:29:02 2020 +0100

    arm64: dts: exynos: correct PMIC interrupt trigger level on Espresso
    
    [ Upstream commit 1fea2eb2f5bbd3fbbe2513d2386b5f6e6db17fd7 ]
    
    The Samsung PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Fixes: 9589f7721e16 ("arm64: dts: Add S2MPS15 PMIC node on exynos7-espresso")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201210212903.216728-8-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4cdeb856d4443b2bf4eba1b6a2af61c0be82728b
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:29:01 2020 +0100

    arm64: dts: exynos: correct PMIC interrupt trigger level on TM2
    
    [ Upstream commit e98e2367dfb4b6d7a80c8ce795c644124eff5f36 ]
    
    The Samsung PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Fixes: 01e5d2352152 ("arm64: dts: exynos: Add dts file for Exynos5433-based TM2 board")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20201210212903.216728-7-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6826bbd10a2485557b785a1c5e31ee5fd26e864a
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:28:59 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on Arndale Octa
    
    [ Upstream commit 1ac8893c4fa3d4a34915dc5cdab568a39db5086c ]
    
    The Samsung PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  The falling edge
    interrupt will mostly work but it's not correct.
    
    Fixes: 1fed2252713e ("ARM: dts: fix pinctrl for s2mps11-irq on exynos5420-arndale-octa")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20201210212903.216728-5-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ab1dfa5da6703622d1d2e4e8d2dda418900e298
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:28:58 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on Spring
    
    [ Upstream commit 77e6a5467cb8657cf8b5e610a30a4c502085e4f9 ]
    
    The Samsung PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Fixes: 53dd4138bb0a ("ARM: dts: Add exynos5250-spring device tree")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201210212903.216728-4-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6763e54aeeeb0e2ee36536399c69cc9d624c2b6f
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:28:57 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on Rinato
    
    [ Upstream commit 437ae60947716bb479e2f32466f49445c0509b1e ]
    
    The Samsung PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Fixes: faaf348ef468 ("ARM: dts: Add board dts file for exynos3250-rinato")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20201210212903.216728-3-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bcaa0355cf1bad74e73645799002bbe5088efa2
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Dec 10 22:28:56 2020 +0100

    ARM: dts: exynos: correct PMIC interrupt trigger level on Monk
    
    [ Upstream commit 8528cda2b7c667e9cd173aef1a677c71b7d5a096 ]
    
    The Samsung PMIC datasheets describe the interrupt line as active low
    with a requirement of acknowledge from the CPU.  Without specifying the
    interrupt type in Devicetree, kernel might apply some fixed
    configuration, not necessarily working for this hardware.
    
    Fixes: e0cefb3f79d3 ("ARM: dts: add board dts file for Exynos3250-based Monk board")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201210212903.216728-2-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 615ed8fea798f4f389c2aa426221178c4ee36bb6
Author: Christopher William Snowhill <chris@kode54.net>
Date:   Sat Dec 26 19:12:32 2020 -0800

    Bluetooth: Fix initializing response id after clearing struct
    
    [ Upstream commit a5687c644015a097304a2e47476c0ecab2065734 ]
    
    Looks like this was missed when patching the source to clear the structures
    throughout, causing this one instance to clear the struct after the response
    id is assigned.
    
    Fixes: eddb7732119d ("Bluetooth: A2MP: Fix not initializing all members")
    Signed-off-by: Christopher William Snowhill <chris@kode54.net>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff95a242881daa2389b0defc04bc195d0390e21d
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 12 10:46:58 2020 +0100

    Bluetooth: btqcomsmd: Fix a resource leak in error handling paths in the probe function
    
    [ Upstream commit 9a39a927be01d89e53f04304ab99a8761e08910d ]
    
    Some resource should be released in the error handling path of the probe
    function, as already done in the remove function.
    
    The remove function was fixed in commit 5052de8deff5 ("soc: qcom: smd:
    Transition client drivers from smd to rpmsg")
    
    Fixes: 1511cc750c3d ("Bluetooth: Introduce Qualcomm WCNSS SMD based HCI driver")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29c2e2e8e95ee56d46f82b7c78204a7d76e51b98
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Jan 12 11:28:18 2021 -0800

    random: fix the RNDRESEEDCRNG ioctl
    
    commit 11a0b5e0ec8c13bef06f7414f9e914506140d5cb upstream.
    
    The RNDRESEEDCRNG ioctl reseeds the primary_crng from itself, which
    doesn't make sense.  Reseed it from the input_pool instead.
    
    Fixes: d848e5f8e1eb ("random: add new ioctl RNDRESEEDCRNG")
    Cc: stable@vger.kernel.org
    Cc: linux-crypto@vger.kernel.org
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Reviewed-by: Jann Horn <jannh@google.com>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20210112192818.69921-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 924c9f2d86156ce2173ba674e855b9b7787d962b
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Sun Jan 10 11:56:08 2021 +0000

    MIPS: vmlinux.lds.S: add missing PAGE_ALIGNED_DATA() section
    
    commit 8ac7c87acdcac156670f9920c8acbd84308ff4b1 upstream.
    
    MIPS uses its own declaration of rwdata, and thus it should be kept
    in sync with the asm-generic one. Currently PAGE_ALIGNED_DATA() is
    missing from the linker script, which emits the following ld
    warnings:
    
    mips-alpine-linux-musl-ld: warning: orphan section
    `.data..page_aligned' from `arch/mips/kernel/vdso.o' being placed
    in section `.data..page_aligned'
    mips-alpine-linux-musl-ld: warning: orphan section
    `.data..page_aligned' from `arch/mips/vdso/vdso-image.o' being placed
    in section `.data..page_aligned'
    
    Add the necessary declaration, so the mentioned structures will be
    placed in vmlinux as intended:
    
    ffffffff80630580 D __end_once
    ffffffff80630580 D __start___dyndbg
    ffffffff80630580 D __start_once
    ffffffff80630580 D __stop___dyndbg
    ffffffff80634000 d mips_vdso_data
    ffffffff80638000 d vdso_data
    ffffffff80638580 D _gp
    ffffffff8063c000 T __init_begin
    ffffffff8063c000 D _edata
    ffffffff8063c000 T _sinittext
    
    ->
    
    ffffffff805a4000 D __end_init_task
    ffffffff805a4000 D __nosave_begin
    ffffffff805a4000 D __nosave_end
    ffffffff805a4000 d mips_vdso_data
    ffffffff805a8000 d vdso_data
    ffffffff805ac000 D mmlist_lock
    ffffffff805ac080 D tasklist_lock
    
    Fixes: ebb5e78cc634 ("MIPS: Initial implementation of a VDSO")
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Cc: stable@vger.kernel.org # 4.4+
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afeb3e90a967678c6fdc94fd4517c047f1b2634e
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Fri Jan 22 16:35:56 2021 +0530

    kdb: Make memory allocations more robust
    
    commit 93f7a6d818deef69d0ba652d46bae6fbabbf365c upstream.
    
    Currently kdb uses in_interrupt() to determine whether its library
    code has been called from the kgdb trap handler or from a saner calling
    context such as driver init. This approach is broken because
    in_interrupt() alone isn't able to determine kgdb trap handler entry from
    normal task context. This can happen during normal use of basic features
    such as breakpoints and can also be trivially reproduced using:
    echo g > /proc/sysrq-trigger
    
    We can improve this by adding check for in_dbg_master() instead which
    explicitly determines if we are running in debugger context.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Link: https://lore.kernel.org/r/1611313556-4004-1-git-send-email-sumit.garg@linaro.org
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1f9dc2e9f2647b5e066c78df680bdb738fa42f8
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Feb 5 12:22:18 2021 -0800

    vmlinux.lds.h: add DWARF v5 sections
    
    commit 3c4fa46b30c551b1df2fb1574a684f68bc22067c upstream.
    
    We expect toolchains to produce these new debug info sections as part of
    DWARF v5. Add explicit placements to prevent the linker warnings from
    --orphan-section=warn.
    
    Compilers may produce such sections with explicit -gdwarf-5, or based on
    the implicit default version of DWARF when -g is used via DEBUG_INFO.
    This implicit default changes over time, and has changed to DWARF v5
    with GCC 11.
    
    .debug_sup was mentioned in review, but without compilers producing it
    today, let's wait to add it until it becomes necessary.
    
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1922707
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Suggested-by: Fangrui Song <maskray@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Reviewed-by: Mark Wielaard <mark@klomp.org>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 669b5247ca75094eaa22716044f4f8dd124f9b1f
Author: Rong Chen <rong.a.chen@intel.com>
Date:   Fri Feb 12 20:52:41 2021 -0800

    scripts/recordmcount.pl: support big endian for ARCH sh
    
    [ Upstream commit 93ca696376dd3d44b9e5eae835ffbc84772023ec ]
    
    The kernel test robot reported the following issue:
    
        CC [M]  drivers/soc/litex/litex_soc_ctrl.o
      sh4-linux-objcopy: Unable to change endianness of input file(s)
      sh4-linux-ld: cannot find drivers/soc/litex/.tmp_gl_litex_soc_ctrl.o: No such file or directory
      sh4-linux-objcopy: 'drivers/soc/litex/.tmp_mx_litex_soc_ctrl.o': No such file
    
    The problem is that the format of input file is elf32-shbig-linux, but
    sh4-linux-objcopy wants to output a file which format is elf32-sh-linux:
    
      $ sh4-linux-objdump -d drivers/soc/litex/litex_soc_ctrl.o | grep format
      drivers/soc/litex/litex_soc_ctrl.o:     file format elf32-shbig-linux
    
    Link: https://lkml.kernel.org/r/20210210150435.2171567-1-rong.a.chen@intel.com
    Link: https://lore.kernel.org/linux-mm/202101261118.GbbYSlHu-lkp@intel.com
    Signed-off-by: Rong Chen <rong.a.chen@intel.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Yoshinori Sato <ysato@users.osdn.me>
    Cc: Rich Felker <dalias@libc.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e0031bac99faafa17fa743a27a57043a96ae629
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Thu Feb 11 03:26:54 2021 -0800

    cifs: Set CIFS_MOUNT_USE_PREFIX_PATH flag on setting cifs_sb->prepath.
    
    [ Upstream commit a738c93fb1c17e386a09304b517b1c6b2a6a5a8b ]
    
    While debugging another issue today, Steve and I noticed that if a
    subdir for a file share is already mounted on the client, any new
    mount of any other subdir (or the file share root) of the same share
    results in sharing the cifs superblock, which e.g. can result in
    incorrect device name.
    
    While setting prefix path for the root of a cifs_sb,
    CIFS_MOUNT_USE_PREFIX_PATH flag should also be set.
    Without it, prepath is not even considered in some places,
    and output of "mount" and various /proc/<>/*mount* related
    options can be missing part of the device name.
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3fc23dd9f13e37a1b35004912b74e994af3d726b
Author: Christoph Schemmel <christoph.schemmel@gmail.com>
Date:   Tue Feb 2 09:45:23 2021 +0100

    NET: usb: qmi_wwan: Adding support for Cinterion MV31
    
    [ Upstream commit a4dc7eee9106a9d2a6e08b442db19677aa9699c7 ]
    
    Adding support for Cinterion MV31 with PID 0x00B7.
    
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 11 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00b7 Rev=04.14
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion USB Mobile Broadband
    S:  SerialNumber=b3246eed
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Christoph Schemmel <christoph.schemmel@gmail.com>
    Link: https://lore.kernel.org/r/20210202084523.4371-1-christoph.schemmel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 910d1e771772fab90fe4b70248792e6009a05003
Author: Sameer Pujar <spujar@nvidia.com>
Date:   Thu Jan 7 10:36:10 2021 +0530

    arm64: tegra: Add power-domain for Tegra210 HDA
    
    commit 1e0ca5467445bc1f41a9e403d6161a22f313dae7 upstream.
    
    HDA initialization is failing occasionally on Tegra210 and following
    print is observed in the boot log. Because of this probe() fails and
    no sound card is registered.
    
      [16.800802] tegra-hda 70030000.hda: no codecs found!
    
    Codecs request a state change and enumeration by the controller. In
    failure cases this does not seem to happen as STATETS register reads 0.
    
    The problem seems to be related to the HDA codec dependency on SOR
    power domain. If it is gated during HDA probe then the failure is
    observed. Building Tegra HDA driver into kernel image avoids this
    failure but does not completely address the dependency part. Fix this
    problem by adding 'power-domains' DT property for Tegra210 HDA. Note
    that Tegra186 and Tegra194 HDA do this already.
    
    Fixes: 742af7e7a0a1 ("arm64: tegra: Add Tegra210 support")
    Depends-on: 96d1f078ff0 ("arm64: tegra: Add SOR power-domain for Tegra210")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sameer Pujar <spujar@nvidia.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad5a7df61ce5b34f691c637e286c428d54fa5bec
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Wed Feb 24 12:00:30 2021 -0800

    ntfs: check for valid standard information attribute
    
    commit 4dfe6bd94959222e18d512bdf15f6bf9edb9c27c upstream.
    
    Mounting a corrupted filesystem with NTFS resulted in a kernel crash.
    
    We should check for valid STANDARD_INFORMATION attribute offset and length
    before trying to access it
    
    Link: https://lkml.kernel.org/r/20210217155930.1506815-1-rkovhaev@gmail.com
    Link: https://syzkaller.appspot.com/bug?extid=c584225dabdea2f71969
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Reported-by: syzbot+c584225dabdea2f71969@syzkaller.appspotmail.com
    Tested-by: syzbot+c584225dabdea2f71969@syzkaller.appspotmail.com
    Acked-by: Anton Altaparmakov <anton@tuxera.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59d5014a04a57d4c126958ca57b4989e244c97f9
Author: Stefan Ursella <stefan.ursella@wolfvision.net>
Date:   Wed Feb 10 15:07:11 2021 +0100

    usb: quirks: add quirk to start video capture on ELMO L-12F document camera reliable
    
    commit 1ebe718bb48278105816ba03a0408ecc2d6cf47f upstream.
    
    Without this quirk starting a video capture from the device often fails with
    
    kernel: uvcvideo: Failed to set UVC probe control : -110 (exp. 34).
    
    Signed-off-by: Stefan Ursella <stefan.ursella@wolfvision.net>
    Link: https://lore.kernel.org/r/20210210140713.18711-1-stefan.ursella@wolfvision.net
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7736eb1846c8ce9e46d67e35378fc99f5fad6e60
Author: Will McVicker <willmcvicker@google.com>
Date:   Sat Dec 5 00:48:48 2020 +0000

    HID: make arrays usage and value to be the same
    
    commit ed9be64eefe26d7d8b0b5b9fa3ffdf425d87a01f upstream.
    
    The HID subsystem allows an "HID report field" to have a different
    number of "values" and "usages" when it is allocated. When a field
    struct is created, the size of the usage array is guaranteed to be at
    least as large as the values array, but it may be larger. This leads to
    a potential out-of-bounds write in
    __hidinput_change_resolution_multipliers() and an out-of-bounds read in
    hidinput_count_leds().
    
    To fix this, let's make sure that both the usage and value arrays are
    the same size.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Will McVicker <willmcvicker@google.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53936c88537ceeb609aa1772ebd5853bb8911283
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Feb 23 14:00:34 2021 +0100

    Linux 4.14.222
    
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210222121027.174911182@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3781a65d00d3545dc284b5d6c4830c538be46a87
Author: Lai Jiangshan <laijs@linux.alibaba.com>
Date:   Thu Dec 17 23:41:18 2020 +0800

    kvm: check tlbs_dirty directly
    
    commit 88bf56d04bc3564542049ec4ec168a8b60d0b48c upstream
    
    In kvm_mmu_notifier_invalidate_range_start(), tlbs_dirty is used as:
            need_tlb_flush |= kvm->tlbs_dirty;
    with need_tlb_flush's type being int and tlbs_dirty's type being long.
    
    It means that tlbs_dirty is always used as int and the higher 32 bits
    is useless.  We need to check tlbs_dirty in a correct way and this
    change checks it directly without propagating it to need_tlb_flush.
    
    Note: it's _extremely_ unlikely this neglecting of higher 32 bits can
    cause problems in practice.  It would require encountering tlbs_dirty
    on a 4 billion count boundary, and KVM would need to be using shadow
    paging or be running a nested guest.
    
    Cc: stable@vger.kernel.org
    Fixes: a4ee1ca4a36e ("KVM: MMU: delay flush all tlbs on sync_page path")
    Signed-off-by: Lai Jiangshan <laijs@linux.alibaba.com>
    Message-Id: <20201217154118.16497-1-jiangshanlai@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 888923b8661d5e16a8c740e55d63ff04e7ec133a
Author: Manish Narani <manish.narani@xilinx.com>
Date:   Tue Nov 17 12:43:35 2020 +0530

    usb: gadget: u_ether: Fix MTU size mismatch with RX packet size
    
    commit 0a88fa221ce911c331bf700d2214c5b2f77414d3 upstream
    
    Fix the MTU size issue with RX packet size as the host sends the packet
    with extra bytes containing ethernet header. This causes failure when
    user sets the MTU size to the maximum i.e. 15412. In this case the
    ethernet packet received will be of length 15412 plus the ethernet header
    length. This patch fixes the issue where there is a check that RX packet
    length must not be more than max packet length.
    
    Fixes: bba787a860fa ("usb: gadget: ether: Allow jumbo frames")
    Signed-off-by: Manish Narani <manish.narani@xilinx.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1605597215-122027-1-git-send-email-manish.narani@xilinx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit daf19b3204573e06fe9c2e8796855711e65c617d
Author: John Greb <h3x4m3r0n@gmail.com>
Date:   Sun May 6 20:01:57 2018 +0000

    USB: Gadget Ethernet: Re-enable Jumbo frames.
    
    commit eea52743eb5654ec6f52b0e8b4aefec952543697 upstream
    
    Fixes: <b3e3893e1253> ("net: use core MTU range checking")
    which patched only one of two functions used to setup the
    USB Gadget Ethernet driver, causing a serious performance
    regression in the ability to increase mtu size above 1500.
    
    Signed-off-by: John Greb <h3x4m3r0n@gmail.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bad713b63d8820235cec50719b5393d93631e5d
Author: Arun Easi <aeasi@marvell.com>
Date:   Wed Dec 2 05:23:04 2020 -0800

    scsi: qla2xxx: Fix crash during driver load on big endian machines
    
    commit 8de309e7299a00b3045fb274f82b326f356404f0 upstream
    
    Crash stack:
            [576544.715489] Unable to handle kernel paging request for data at address 0xd00000000f970000
            [576544.715497] Faulting instruction address: 0xd00000000f880f64
            [576544.715503] Oops: Kernel access of bad area, sig: 11 [#1]
            [576544.715506] SMP NR_CPUS=2048 NUMA pSeries
            :
            [576544.715703] NIP [d00000000f880f64] .qla27xx_fwdt_template_valid+0x94/0x100 [qla2xxx]
            [576544.715722] LR [d00000000f7952dc] .qla24xx_load_risc_flash+0x2fc/0x590 [qla2xxx]
            [576544.715726] Call Trace:
            [576544.715731] [c0000004d0ffb000] [c0000006fe02c350] 0xc0000006fe02c350 (unreliable)
            [576544.715750] [c0000004d0ffb080] [d00000000f7952dc] .qla24xx_load_risc_flash+0x2fc/0x590 [qla2xxx]
            [576544.715770] [c0000004d0ffb170] [d00000000f7aa034] .qla81xx_load_risc+0x84/0x1a0 [qla2xxx]
            [576544.715789] [c0000004d0ffb210] [d00000000f79f7c8] .qla2x00_setup_chip+0xc8/0x910 [qla2xxx]
            [576544.715808] [c0000004d0ffb300] [d00000000f7a631c] .qla2x00_initialize_adapter+0x4dc/0xb00 [qla2xxx]
            [576544.715826] [c0000004d0ffb3e0] [d00000000f78ce28] .qla2x00_probe_one+0xf08/0x2200 [qla2xxx]
    
    Link: https://lore.kernel.org/r/20201202132312.19966-8-njavali@marvell.com
    Fixes: f73cb695d3ec ("[SCSI] qla2xxx: Add support for ISP2071.")
    Cc: stable@vger.kernel.org
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Arun Easi <aeasi@marvell.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 478b8f20559ffb30b2514c2aaf226beaec641df3
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:56:44 2021 +0100

    xen-blkback: fix error handling in xen_blkbk_map()
    
    commit 871997bc9e423f05c7da7c9178e62dde5df2a7f8 upstream.
    
    The function uses a goto-based loop, which may lead to an earlier error
    getting discarded by a later iteration. Exit this ad-hoc loop when an
    error was encountered.
    
    The out-of-memory error path additionally fails to fill a structure
    field looked at by xen_blkbk_unmap_prepare() before inspecting the
    handle which does get properly set (to BLKBACK_INVALID_HANDLE).
    
    Since the earlier exiting from the ad-hoc loop requires the same field
    filling (invalidation) as that on the out-of-memory path, fold both
    paths. While doing so, drop the pr_alert(), as extra log messages aren't
    going to help the situation (the kernel will log oom conditions already
    anyway).
    
    This is XSA-365.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b72f20fa0a6d91feb0415803325f883856e4759
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:55:57 2021 +0100

    xen-scsiback: don't "handle" error by BUG()
    
    commit 7c77474b2d22176d2bfb592ec74e0f2cb71352c9 upstream.
    
    In particular -ENOMEM may come back here, from set_foreign_p2m_mapping().
    Don't make problems worse, the more that handling elsewhere (together
    with map's status fields now indicating whether a mapping wasn't even
    attempted, and hence has to be considered failed) doesn't require this
    odd way of dealing with errors.
    
    This is part of XSA-362.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c33d4dde870d6fd28d70719b017fa0a0532907a5
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:55:31 2021 +0100

    xen-netback: don't "handle" error by BUG()
    
    commit 3194a1746e8aabe86075fd3c5e7cf1f4632d7f16 upstream.
    
    In particular -ENOMEM may come back here, from set_foreign_p2m_mapping().
    Don't make problems worse, the more that handling elsewhere (together
    with map's status fields now indicating whether a mapping wasn't even
    attempted, and hence has to be considered failed) doesn't require this
    odd way of dealing with errors.
    
    This is part of XSA-362.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb7f62d48a47cbbf79c50a8c98f35e6267469b84
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:54:51 2021 +0100

    xen-blkback: don't "handle" error by BUG()
    
    commit 5a264285ed1cd32e26d9de4f3c8c6855e467fd63 upstream.
    
    In particular -ENOMEM may come back here, from set_foreign_p2m_mapping().
    Don't make problems worse, the more that handling elsewhere (together
    with map's status fields now indicating whether a mapping wasn't even
    attempted, and hence has to be considered failed) doesn't require this
    odd way of dealing with errors.
    
    This is part of XSA-362.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2c7ea68f31f4136ce455e853d27709eae0300d4
Author: Stefano Stabellini <stefano.stabellini@xilinx.com>
Date:   Mon Feb 15 08:53:44 2021 +0100

    xen/arm: don't ignore return errors from set_phys_to_machine
    
    commit 36bf1dfb8b266e089afa9b7b984217f17027bf35 upstream.
    
    set_phys_to_machine can fail due to lack of memory, see the kzalloc call
    in arch/arm/xen/p2m.c:__set_phys_to_machine_multi.
    
    Don't ignore the potential return error in set_foreign_p2m_mapping,
    returning it to the caller instead.
    
    This is part of XSA-361.
    
    Signed-off-by: Stefano Stabellini <stefano.stabellini@xilinx.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cad8df5dd9f4c1004475fd6bf34371d8459080f
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:52:27 2021 +0100

    Xen/gntdev: correct error checking in gntdev_map_grant_pages()
    
    commit ebee0eab08594b2bd5db716288a4f1ae5936e9bc upstream.
    
    Failure of the kernel part of the mapping operation should also be
    indicated as an error to the caller, or else it may assume the
    respective kernel VA is okay to access.
    
    Furthermore gnttab_map_refs() failing still requires recording
    successfully mapped handles, so they can be unmapped subsequently. This
    in turn requires there to be a way to tell full hypercall failure from
    partial success - preset map_op status fields such that they won't
    "happen" to look as if the operation succeeded.
    
    Also again use GNTST_okay instead of implying its value (zero).
    
    This is part of XSA-361.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccb98218b0dc1e93c90fc3a8cdd266572a0cb89d
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:51:07 2021 +0100

    Xen/gntdev: correct dev_bus_addr handling in gntdev_map_grant_pages()
    
    commit dbe5283605b3bc12ca45def09cc721a0a5c853a2 upstream.
    
    We may not skip setting the field in the unmap structure when
    GNTMAP_device_map is in use - such an unmap would fail to release the
    respective resources (a page ref in the hypervisor). Otoh the field
    doesn't need setting at all when GNTMAP_device_map is not in use.
    
    To record the value for unmapping, we also better don't use our local
    p2m: In particular after a subsequent change it may not have got updated
    for all the batch elements. Instead it can simply be taken from the
    respective map's results.
    
    We can additionally avoid playing this game altogether for the kernel
    part of the mappings in (x86) PV mode.
    
    This is part of XSA-361.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 055da0fe83168be0e1f6b3f36197961a693ba10f
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:50:08 2021 +0100

    Xen/x86: also check kernel mapping in set_foreign_p2m_mapping()
    
    commit b512e1b077e5ccdbd6e225b15d934ab12453b70a upstream.
    
    We should not set up further state if either mapping failed; paying
    attention to just the user mapping's status isn't enough.
    
    Also use GNTST_okay instead of implying its value (zero).
    
    This is part of XSA-361.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5deba7de5a5327f4a9cc3fea4ad2de31b5edf53
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:49:34 2021 +0100

    Xen/x86: don't bail early from clear_foreign_p2m_mapping()
    
    commit a35f2ef3b7376bfd0a57f7844bd7454389aae1fc upstream.
    
    Its sibling (set_foreign_p2m_mapping()) as well as the sibling of its
    only caller (gnttab_map_refs()) don't clean up after themselves in case
    of error. Higher level callers are expected to do so. However, in order
    for that to really clean up any partially set up state, the operation
    should not terminate upon encountering an entry in unexpected state. It
    is particularly relevant to notice here that set_foreign_p2m_mapping()
    would skip setting up a p2m entry if its grant mapping failed, but it
    would continue to set up further p2m entries as long as their mappings
    succeeded.
    
    Arguably down the road set_foreign_p2m_mapping() may want its page state
    related WARN_ON() also converted to an error return.
    
    This is part of XSA-361.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2568d180a7565240f68ca2b30e62e0da8435fa2
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Mon Aug 6 15:17:44 2018 +0200

    tracing: Avoid calling cc-option -mrecord-mcount for every Makefile
    
    commit 07d0408120216b60625c9a5b8012d1c3a907984d upstream.
    
    Currently if CONFIG_FTRACE_MCOUNT_RECORD is enabled -mrecord-mcount
    compiler flag support is tested for every Makefile.
    
    Top 4 cc-option usages:
        511 -mrecord-mcount
         11  -fno-stack-protector
          9 -Wno-override-init
          2 -fsched-pressure
    
    To address that move cc-option from scripts/Makefile.build to top Makefile
    and export CC_USING_RECORD_MCOUNT to be used in original place.
    
    While doing that also add -mrecord-mcount to CC_FLAGS_FTRACE (if gcc
    actually supports it).
    
    Link: http://lkml.kernel.org/r/patch-2.thread-aa7b8d.git-de935bace15a.your-ad-here.call-01533557518-ext-9465@work.hours
    
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 598f990a63874c542d3c1b024a030a4af16f25bc
Author: Greg Thelen <gthelen@google.com>
Date:   Fri Jun 8 14:47:46 2018 -0700

    tracing: Fix SKIP_STACK_VALIDATION=1 build due to bad merge with -mrecord-mcount
    
    commit ed7d40bc67b8353c677b38c6cdddcdc310c0f452 upstream.
    
    Non gcc-5 builds with CONFIG_STACK_VALIDATION=y and
    SKIP_STACK_VALIDATION=1 fail.
    Example output:
      /bin/sh: init/.tmp_main.o: Permission denied
    
    commit 96f60dfa5819 ("trace: Use -mcount-record for dynamic ftrace"),
    added a mismatched endif.  This causes cmd_objtool to get mistakenly
    set.
    
    Relocate endif to balance the newly added -record-mcount check.
    
    Link: http://lkml.kernel.org/r/20180608214746.136554-1-gthelen@google.com
    
    Fixes: 96f60dfa5819 ("trace: Use -mcount-record for dynamic ftrace")
    Acked-by: Andi Kleen <ak@linux.intel.com>
    Tested-by: David Rientjes <rientjes@google.com>
    Signed-off-by: Greg Thelen <gthelen@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 767f162d2dbd3ed82861fbb738aaf82ab55ebd7b
Author: Andi Kleen <ak@linux.intel.com>
Date:   Mon Nov 27 13:34:13 2017 -0800

    trace: Use -mcount-record for dynamic ftrace
    
    commit 96f60dfa5819a065bfdd2f2ba0df7d9cbce7f4dd upstream.
    
    gcc 5 supports a new -mcount-record option to generate ftrace
    tables directly. This avoids the need to run record_mcount
    manually.
    
    Use this option when available.
    
    So far doesn't use -mcount-nop, which also exists now.
    
    This is needed to make ftrace work with LTO because the
    normal record-mcount script doesn't run over the link
    time output.
    
    It should also improve build times slightly in the general
    case.
    Link: http://lkml.kernel.org/r/20171127213423.27218-12-andi@firstfloor.org
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72212c68ea930e2a729f7372173daa509c5a7956
Author: Borislav Petkov <bp@suse.de>
Date:   Mon Feb 8 16:43:30 2021 +0100

    x86/build: Disable CET instrumentation in the kernel for 32-bit too
    
    commit 256b92af784d5043eeb7d559b6d5963dcc2ecb10 upstream.
    
    Commit
    
      20bf2b378729 ("x86/build: Disable CET instrumentation in the kernel")
    
    disabled CET instrumentation which gets added by default by the Ubuntu
    gcc9 and 10 by default, but did that only for 64-bit builds. It would
    still fail when building a 32-bit target. So disable CET for all x86
    builds.
    
    Fixes: 20bf2b378729 ("x86/build: Disable CET instrumentation in the kernel")
    Reported-by: AC <achirvasub@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Tested-by: AC <achirvasub@gmail.com>
    Link: https://lkml.kernel.org/r/YCCIgMHkzh/xT4ex@arch-chirva.localdomain
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f75383e40c61773d5e13900b0c9824b933618bcd
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Feb 12 20:52:54 2021 -0800

    h8300: fix PREEMPTION build, TI_PRE_COUNT undefined
    
    [ Upstream commit ade9679c159d5bbe14fb7e59e97daf6062872e2b ]
    
    Fix a build error for undefined 'TI_PRE_COUNT' by adding it to
    asm-offsets.c.
    
      h8300-linux-ld: arch/h8300/kernel/entry.o: in function `resume_kernel': (.text+0x29a): undefined reference to `TI_PRE_COUNT'
    
    Link: https://lkml.kernel.org/r/20210212021650.22740-1-rdunlap@infradead.org
    Fixes: df2078b8daa7 ("h8300: Low level entry")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8523415c67496a2f91116ed6e35f926e70e70e93
Author: Alain Volmat <alain.volmat@foss.st.com>
Date:   Fri Feb 5 09:51:40 2021 +0100

    i2c: stm32f7: fix configuration of the digital filter
    
    [ Upstream commit 3d6a3d3a2a7a3a60a824e7c04e95fd50dec57812 ]
    
    The digital filter related computation are present in the driver
    however the programming of the filter within the IP is missing.
    The maximum value for the DNF is wrong and should be 15 instead of 16.
    
    Fixes: aeb068c57214 ("i2c: i2c-stm32f7: add driver")
    
    Signed-off-by: Alain Volmat <alain.volmat@foss.st.com>
    Signed-off-by: Pierre-Yves MORDRET <pierre-yves.mordret@foss.st.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 102052a7b2f9e553bb966445d5f3220d3f64d77d
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Tue Feb 9 09:52:19 2021 +0100

    vsock: fix locking in vsock_shutdown()
    
    commit 1c5fae9c9a092574398a17facc31c533791ef232 upstream.
    
    In vsock_shutdown() we touched some socket fields without holding the
    socket lock, such as 'state' and 'sk_flags'.
    
    Also, after the introduction of multi-transport, we are accessing
    'vsk->transport' in vsock_send_shutdown() without holding the lock
    and this call can be made while the connection is in progress, so
    the transport can change in the meantime.
    
    To avoid issues, we hold the socket lock when we enter in
    vsock_shutdown() and release it when we leave.
    
    Among the transports that implement the 'shutdown' callback, only
    hyperv_transport acquired the lock. Since the caller now holds it,
    we no longer take it.
    
    Fixes: d021c344051a ("VSOCK: Introduce VM Sockets")
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6362d5500e1f028dc23a557fb76a4fd03867cbb
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon Feb 8 15:44:54 2021 +0100

    vsock/virtio: update credit only if socket is not closed
    
    commit ce7536bc7398e2ae552d2fabb7e0e371a9f1fe46 upstream.
    
    If the socket is closed or is being released, some resources used by
    virtio_transport_space_update() such as 'vsk->trans' may be released.
    
    To avoid a use after free bug we should only update the available credit
    when we are sure the socket is still open and we have the lock held.
    
    Fixes: 06a8fc78367d ("VSOCK: Introduce virtio_vsock_common.ko")
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/20210208144454.84438-1-sgarzare@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0d5171c5c87473d1d27d0eba486917051c5d449
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Fri Feb 5 17:37:32 2021 -0800

    net: watchdog: hold device global xmit lock during tx disable
    
    commit 3aa6bce9af0e25b735c9c1263739a5639a336ae8 upstream.
    
    Prevent netif_tx_disable() running concurrently with dev_watchdog() by
    taking the device global xmit lock. Otherwise, the recommended:
    
            netif_carrier_off(dev);
            netif_tx_disable(dev);
    
    driver shutdown sequence can happen after the watchdog has already
    checked carrier, resulting in possible false alarms. This is because
    netif_tx_lock() only sets the frozen bit without maintaining the locks
    on the individual queues.
    
    Fixes: c3f26a269c24 ("netdev: Fix lockdep warnings in multiqueue configurations.")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25c5f521eb416f68376307374a55c2340b1bbc08
Author: Norbert Slusarek <nslusarek@gmx.net>
Date:   Fri Feb 5 13:14:05 2021 +0100

    net/vmw_vsock: improve locking in vsock_connect_timeout()
    
    commit 3d0bc44d39bca615b72637e340317b7899b7f911 upstream.
    
    A possible locking issue in vsock_connect_timeout() was recognized by
    Eric Dumazet which might cause a null pointer dereference in
    vsock_transport_cancel_pkt(). This patch assures that
    vsock_transport_cancel_pkt() will be called within the lock, so a race
    condition won't occur which could result in vsk->transport to be set to NULL.
    
    Fixes: 380feae0def7 ("vsock: cancel packets when failing to connect")
    Reported-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Norbert Slusarek <nslusarek@gmx.net>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/trinity-f8e0937a-cf0e-4d80-a76e-d9a958ba3ef1-1612535522360@3c-app-gmx-bap12
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee9bc47cd8f5f5eedc58803a3af6f80e408a9d68
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu Dec 10 11:50:07 2020 +0300

    usb: dwc3: ulpi: Replace CPU-based busyloop with Protocol-based one
    
    commit fca3f138105727c3a22edda32d02f91ce1bf11c9 upstream
    
    Originally the procedure of the ULPI transaction finish detection has been
    developed as a simple busy-loop with just decrementing counter and no
    delays. It's wrong since on different systems the loop will take a
    different time to complete. So if the system bus and CPU are fast enough
    to overtake the ULPI bus and the companion PHY reaction, then we'll get to
    take a false timeout error. Fix this by converting the busy-loop procedure
    to take the standard bus speed, address value and the registers access
    mode into account for the busy-loop delay calculation.
    
    Here is the way the fix works. It's known that the ULPI bus is clocked
    with 60MHz signal. In accordance with [1] the ULPI bus protocol is created
    so to spend 5 and 6 clock periods for immediate register write and read
    operations respectively, and 6 and 7 clock periods - for the extended
    register writes and reads. Based on that we can easily pre-calculate the
    time which will be needed for the controller to perform a requested IO
    operation. Note we'll still preserve the attempts counter in case if the
    DWC USB3 controller has got some internals delays.
    
    [1] UTMI+ Low Pin Interface (ULPI) Specification, Revision 1.1,
        October 20, 2004, pp. 30 - 36.
    
    Fixes: 88bc9d194ff6 ("usb: dwc3: add ULPI interface support")
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Link: https://lore.kernel.org/r/20201210085008.13264-3-Sergey.Semin@baikalelectronics.ru
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 364d66e20d8a34afe0e1af051ea3db89a6b57003
Author: Felipe Balbi <balbi@kernel.org>
Date:   Thu Aug 13 08:30:38 2020 +0300

    usb: dwc3: ulpi: fix checkpatch warning
    
    commit 2a499b45295206e7f3dc76edadde891c06cc4447 upstream
    
    no functional changes.
    
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5f2c1a99e3af1c1ed5b29fc4379eda17f538442
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Feb 5 12:56:43 2021 +0100

    netfilter: conntrack: skip identical origin tuple in same zone only
    
    [ Upstream commit 07998281c268592963e1cd623fe6ab0270b65ae4 ]
    
    The origin skip check needs to re-test the zone. Else, we might skip
    a colliding tuple in the reply direction.
    
    This only occurs when using 'directional zones' where origin tuples
    reside in different zones but the reply tuples share the same zone.
    
    This causes the new conntrack entry to be dropped at confirmation time
    because NAT clash resolution was elided.
    
    Fixes: 4e35c1cb9460240 ("netfilter: nf_nat: skip nat clash resolution for same-origin entries")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a89f74e52aae457bfca50b0ae3c0cef159ec5726
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Feb 2 08:09:38 2021 +0100

    xen/netback: avoid race in xenvif_rx_ring_slots_available()
    
    [ Upstream commit ec7d8e7dd3a59528e305a18e93f1cb98f7faf83b ]
    
    Since commit 23025393dbeb3b8b3 ("xen/netback: use lateeoi irq binding")
    xenvif_rx_ring_slots_available() is no longer called only from the rx
    queue kernel thread, so it needs to access the rx queue with the
    associated queue held.
    
    Reported-by: Igor Druzhinin <igor.druzhinin@citrix.com>
    Fixes: 23025393dbeb3b8b3 ("xen/netback: use lateeoi irq binding")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Acked-by: Wei Liu <wl@xen.org>
    Link: https://lore.kernel.org/r/20210202070938.7863-1-jgross@suse.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41ca88c2348961cf2e6bef26e0346e894a0bc7be
Author: Jozsef Kadlecsik <kadlec@mail.kfki.hu>
Date:   Fri Jan 29 20:57:43 2021 +0100

    netfilter: xt_recent: Fix attempt to update deleted entry
    
    [ Upstream commit b1bdde33b72366da20d10770ab7a49fe87b5e190 ]
    
    When both --reap and --update flag are specified, there's a code
    path at which the entry to be updated is reaped beforehand,
    which then leads to kernel crash. Reap only entries which won't be
    updated.
    
    Fixes kernel bugzilla #207773.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=207773
    Reported-by: Reindl Harald <h.reindl@thelounge.net>
    Fixes: 0079c5aee348 ("netfilter: xt_recent: add an entry reaper")
    Signed-off-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5539fe5370c13c382d931040498d8a524288ab5
Author: Bui Quang Minh <minhquangbui99@gmail.com>
Date:   Wed Jan 27 06:36:53 2021 +0000

    bpf: Check for integer overflow when using roundup_pow_of_two()
    
    [ Upstream commit 6183f4d3a0a2ad230511987c6c362ca43ec0055f ]
    
    On 32-bit architecture, roundup_pow_of_two() can return 0 when the argument
    has upper most bit set due to resulting 1UL << 32. Add a check for this case.
    
    Fixes: d5a3b1f69186 ("bpf: introduce BPF_MAP_TYPE_STACK_TRACE")
    Signed-off-by: Bui Quang Minh <minhquangbui99@gmail.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://lore.kernel.org/bpf/20210127063653.3576-1-minhquangbui99@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94475229a4dfcb2d6351936895475a464fa7740c
Author: Roman Gushchin <guro@fb.com>
Date:   Thu Feb 4 18:32:36 2021 -0800

    memblock: do not start bottom-up allocations with kernel_end
    
    [ Upstream commit 2dcb3964544177c51853a210b6ad400de78ef17d ]
    
    With kaslr the kernel image is placed at a random place, so starting the
    bottom-up allocation with the kernel_end can result in an allocation
    failure and a warning like this one:
    
      hugetlb_cma: reserve 2048 MiB, up to 2048 MiB per node
      ------------[ cut here ]------------
      memblock: bottom-up allocation failed, memory hotremove may be affected
      WARNING: CPU: 0 PID: 0 at mm/memblock.c:332 memblock_find_in_range_node+0x178/0x25a
      Modules linked in:
      CPU: 0 PID: 0 Comm: swapper Not tainted 5.10.0+ #1169
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.14.0-1.fc33 04/01/2014
      RIP: 0010:memblock_find_in_range_node+0x178/0x25a
      Code: e9 6d ff ff ff 48 85 c0 0f 85 da 00 00 00 80 3d 9b 35 df 00 00 75 15 48 c7 c7 c0 75 59 88 c6 05 8b 35 df 00 01 e8 25 8a fa ff <0f> 0b 48 c7 44 24 20 ff ff ff ff 44 89 e6 44 89 ea 48 c7 c1 70 5c
      RSP: 0000:ffffffff88803d18 EFLAGS: 00010086 ORIG_RAX: 0000000000000000
      RAX: 0000000000000000 RBX: 0000000240000000 RCX: 00000000ffffdfff
      RDX: 00000000ffffdfff RSI: 00000000ffffffea RDI: 0000000000000046
      RBP: 0000000100000000 R08: ffffffff88922788 R09: 0000000000009ffb
      R10: 00000000ffffe000 R11: 3fffffffffffffff R12: 0000000000000000
      R13: 0000000000000000 R14: 0000000080000000 R15: 00000001fb42c000
      FS:  0000000000000000(0000) GS:ffffffff88f71000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffffa080fb401000 CR3: 00000001fa80a000 CR4: 00000000000406b0
      Call Trace:
        memblock_alloc_range_nid+0x8d/0x11e
        cma_declare_contiguous_nid+0x2c4/0x38c
        hugetlb_cma_reserve+0xdc/0x128
        flush_tlb_one_kernel+0xc/0x20
        native_set_fixmap+0x82/0xd0
        flat_get_apic_id+0x5/0x10
        register_lapic_address+0x8e/0x97
        setup_arch+0x8a5/0xc3f
        start_kernel+0x66/0x547
        load_ucode_bsp+0x4c/0xcd
        secondary_startup_64_no_verify+0xb0/0xbb
      random: get_random_bytes called from __warn+0xab/0x110 with crng_init=0
      ---[ end trace f151227d0b39be70 ]---
    
    At the same time, the kernel image is protected with memblock_reserve(),
    so we can just start searching at PAGE_SIZE.  In this case the bottom-up
    allocation has the same chances to success as a top-down allocation, so
    there is no reason to fallback in the case of a failure.  All together it
    simplifies the logic.
    
    Link: https://lkml.kernel.org/r/20201217201214.3414100-2-guro@fb.com
    Fixes: 8fabc623238e ("powerpc: Ensure that swiotlb buffer is allocated from low memory")
    Signed-off-by: Roman Gushchin <guro@fb.com>
    Reviewed-by: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Wonhyuk Yang <vvghjk1234@gmail.com>
    Cc: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a9e6f44ecceb6510a5628e15338a9e77ca7a294
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Fri Jan 29 10:19:07 2021 +0000

    ARM: ensure the signal page contains defined contents
    
    [ Upstream commit 9c698bff66ab4914bb3d71da7dc6112519bde23e ]
    
    Ensure that the signal page contains our poison instruction to increase
    the protection against ROP attacks and also contains well defined
    contents.
    
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea30d32ab6c186e02edf376cdb0b0192df4b7d62
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Wed Feb 3 10:03:20 2021 +0100

    ARM: dts: lpc32xx: Revert set default clock rate of HCLK PLL
    
    [ Upstream commit 5638159f6d93b99ec9743ac7f65563fca3cf413d ]
    
    This reverts commit c17e9377aa81664d94b4f2102559fcf2a01ec8e7.
    
    The lpc32xx clock driver is not able to actually change the PLL rate as
    this would require reparenting ARM_CLK, DDRAM_CLK, PERIPH_CLK to SYSCLK,
    then stop the PLL, update the register, restart the PLL and wait for the
    PLL to lock and finally reparent ARM_CLK, DDRAM_CLK, PERIPH_CLK to HCLK
    PLL.
    
    Currently, the HCLK driver simply updates the registers but this has no
    real effect and all the clock rate calculation end up being wrong. This is
    especially annoying for the peripheral (e.g. UARTs, I2C, SPI).
    
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Tested-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Link: https://lore.kernel.org/r/20210203090320.GA3760268@piout.net'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3597f229db1af3d50476d7aa889cdf462535accc
Author: Amir Goldstein <amir73il@gmail.com>
Date:   Sat Dec 19 12:16:08 2020 +0200

    ovl: skip getxattr of security labels
    
    [ Upstream commit 03fedf93593c82538b18476d8c4f0e8f8435ea70 ]
    
    When inode has no listxattr op of its own (e.g. squashfs) vfs_listxattr
    calls the LSM inode_listsecurity hooks to list the xattrs that LSMs will
    intercept in inode_getxattr hooks.
    
    When selinux LSM is installed but not initialized, it will list the
    security.selinux xattr in inode_listsecurity, but will not intercept it
    in inode_getxattr.  This results in -ENODATA for a getxattr call for an
    xattr returned by listxattr.
    
    This situation was manifested as overlayfs failure to copy up lower
    files from squashfs when selinux is built-in but not initialized,
    because ovl_copy_xattr() iterates the lower inode xattrs by
    vfs_listxattr() and vfs_getxattr().
    
    ovl_copy_xattr() skips copy up of security labels that are indentified by
    inode_copy_up_xattr LSM hooks, but it does that after vfs_getxattr().
    Since we are not going to copy them, skip vfs_getxattr() of the security
    labels.
    
    Reported-by: Michael Labriola <michael.d.labriola@gmail.com>
    Tested-by: Michael Labriola <michael.d.labriola@gmail.com>
    Link: https://lore.kernel.org/linux-unionfs/2nv9d47zt7.fsf@aldarion.sourceruckus.org/
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0796349c3c97bde3cfe6418cd309cdd7c150086
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Jan 28 10:22:48 2021 +0100

    cap: fix conversions on getxattr
    
    [ Upstream commit f2b00be488730522d0fb7a8a5de663febdcefe0a ]
    
    If a capability is stored on disk in v2 format cap_inode_getsecurity() will
    currently return in v2 format unconditionally.
    
    This is wrong: v2 cap should be equivalent to a v3 cap with zero rootid,
    and so the same conversions performed on it.
    
    If the rootid cannot be mapped, v3 is returned unconverted.  Fix this so
    that both v2 and v3 return -EOVERFLOW if the rootid (or the owner of the fs
    user namespace in case of v2) cannot be mapped into the current user
    namespace.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 600071db7bcb8070669c36878784749bd293ddba
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Jan 28 10:22:48 2021 +0100

    ovl: perform vfs_getxattr() with mounter creds
    
    [ Upstream commit 554677b97257b0b69378bd74e521edb7e94769ff ]
    
    The vfs_getxattr() in ovl_xattr_set() is used to check whether an xattr
    exist on a lower layer file that is to be removed.  If the xattr does not
    exist, then no need to copy up the file.
    
    This call of vfs_getxattr() wasn't wrapped in credential override, and this
    is probably okay.  But for consitency wrap this instance as well.
    
    Reported-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d0ddc0edc218b48b8c9a83ff619c6e712a6e1b6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jan 20 13:49:41 2021 +0100

    platform/x86: hp-wmi: Disable tablet-mode reporting by default
    
    [ Upstream commit 67fbe02a5cebc3c653610f12e3c0424e58450153 ]
    
    Recently userspace has started making more use of SW_TABLET_MODE
    (when an input-dev reports this).
    
    Specifically recent GNOME3 versions will:
    
    1.  When SW_TABLET_MODE is reported and is reporting 0:
    1.1 Disable accelerometer-based screen auto-rotation
    1.2 Disable automatically showing the on-screen keyboard when a
        text-input field is focussed
    
    2.  When SW_TABLET_MODE is reported and is reporting 1:
    2.1 Ignore input-events from the builtin keyboard and touchpad
        (this is for 360° hinges style 2-in-1s where the keyboard and
         touchpads are accessible on the back of the tablet when folded
         into tablet-mode)
    
    This means that claiming to support SW_TABLET_MODE when it does not
    actually work / reports correct values has bad side-effects.
    
    The check in the hp-wmi code which is used to decide if the input-dev
    should claim SW_TABLET_MODE support, only checks if the
    HPWMI_HARDWARE_QUERY is supported. It does *not* check if the hardware
    actually is capable of reporting SW_TABLET_MODE.
    
    This leads to the hp-wmi input-dev claiming SW_TABLET_MODE support,
    while in reality it will always report 0 as SW_TABLET_MODE value.
    This has been seen on a "HP ENVY x360 Convertible 15-cp0xxx" and
    this likely is the case on a whole lot of other HP models.
    
    This problem causes both auto-rotation and on-screen keyboard
    support to not work on affected x360 models.
    
    There is no easy fix for this, but since userspace expects
    SW_TABLET_MODE reporting to be reliable when advertised it is
    better to not claim/report SW_TABLET_MODE support at all, then
    to claim to support it while it does not work.
    
    To avoid the mentioned problems, add a new enable_tablet_mode_sw
    module-parameter which defaults to false.
    
    Note I've made this an int using the standard -1=auto, 0=off, 1=on
    triplett, with the hope that in the future we can come up with a
    better way to detect SW_TABLET_MODE support. ATM the default
    auto option just does the same as off.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1918255
    Cc: Stefan Brüns <stefan.bruens@rwth-aachen.de>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mark Gross <mgross@linux.intel.com>
    Link: https://lore.kernel.org/r/20210120124941.73409-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cfdfc76fe9396163eafb45b64b2345c4eb309def
Author: Marc Zyngier <maz@kernel.org>
Date:   Sat Aug 15 13:51:12 2020 +0100

    arm64: dts: rockchip: Fix PCIe DT properties on rk3399
    
    [ Upstream commit 43f20b1c6140896916f4e91aacc166830a7ba849 ]
    
    It recently became apparent that the lack of a 'device_type = "pci"'
    in the PCIe root complex node for rk3399 is a violation of the PCI
    binding, as documented in IEEE Std 1275-1994. Changes to the kernel's
    parsing of the DT made such violation fatal, as drivers cannot
    probe the controller anymore.
    
    Add the missing property makes the PCIe node compliant. While we
    are at it, drop the pointless linux,pci-domain property, which only
    makes sense when there are multiple host bridges.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200815125112.462652-3-maz@kernel.org
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6519477b4fc3de098476467350fb8456800fe80d
Author: Jaedon Shin <jaedon.shin@gmail.com>
Date:   Tue Feb 6 12:13:21 2018 +0900

    MIPS: BMIPS: Fix section mismatch warning
    
    commit 627f4a2bdf113ab88abc65cb505c89cbf615eae0 upstream.
    
    Remove the __init annotation from bmips_cpu_setup() to avoid the
    following warning.
    
    WARNING: vmlinux.o(.text+0x35c950): Section mismatch in reference from the function brcmstb_pm_s3() to the function .init.text:bmips_cpu_setup()
    The function brcmstb_pm_s3() references
    the function __init bmips_cpu_setup().
    This is often because brcmstb_pm_s3 lacks a __init
    annotation or the annotation of bmips_cpu_setup is wrong.
    
    Signed-off-by: Jaedon Shin <jaedon.shin@gmail.com>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Kevin Cernekee <cernekee@gmail.com>
    Cc: linux-mips@linux-mips.org
    Reviewed-by: James Hogan <jhogan@kernel.org>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Patchwork: https://patchwork.linux-mips.org/patch/18589/
    Signed-off-by: James Hogan <jhogan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1edfd330121995e033df8170681ead3a76651d37
Author: Julien Grall <jgrall@amazon.com>
Date:   Wed Feb 10 17:06:54 2021 +0000

    arm/xen: Don't probe xenbus as part of an early initcall
    
    commit c4295ab0b485b8bc50d2264bcae2acd06f25caaf upstream.
    
    After Commit 3499ba8198cad ("xen: Fix event channel callback via
    INTX/GSI"), xenbus_probe() will be called too early on Arm. This will
    recent to a guest hang during boot.
    
    If the hang wasn't there, we would have ended up to call
    xenbus_probe() twice (the second time is in xenbus_probe_initcall()).
    
    We don't need to initialize xenbus_probe() early for Arm guest.
    Therefore, the call in xen_guest_init() is now removed.
    
    After this change, there is no more external caller for xenbus_probe().
    So the function is turned to a static one. Interestingly there were two
    prototypes for it.
    
    Cc: stable@vger.kernel.org
    Fixes: 3499ba8198cad ("xen: Fix event channel callback via INTX/GSI")
    Reported-by: Ian Jackson <iwj@xenproject.org>
    Signed-off-by: Julien Grall <jgrall@amazon.com>
    Reviewed-by: David Woodhouse <dwmw@amazon.co.uk>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Link: https://lore.kernel.org/r/20210210170654.5377-1-julien@xen.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32f2a458498230a27e9ce065bf0fa673eaf5ffce
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Wed Feb 10 11:53:22 2021 -0500

    tracing: Check length before giving out the filter buffer
    
    commit b220c049d5196dd94d992dd2dc8cba1a5e6123bf upstream.
    
    When filters are used by trace events, a page is allocated on each CPU and
    used to copy the trace event fields to this page before writing to the ring
    buffer. The reason to use the filter and not write directly into the ring
    buffer is because a filter may discard the event and there's more overhead
    on discarding from the ring buffer than the extra copy.
    
    The problem here is that there is no check against the size being allocated
    when using this page. If an event asks for more than a page size while being
    filtered, it will get only a page, leading to the caller writing more that
    what was allocated.
    
    Check the length of the request, and if it is more than PAGE_SIZE minus the
    header default back to allocating from the ring buffer directly. The ring
    buffer may reject the event if its too big anyway, but it wont overflow.
    
    Link: https://lore.kernel.org/ath10k/1612839593-2308-1-git-send-email-wgong@codeaurora.org/
    
    Cc: stable@vger.kernel.org
    Fixes: 0fc1b09ff1ff4 ("tracing: Use temp buffer when filtering events")
    Reported-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f38cd7abc7598e86f63807d5b27ec860d96d52b
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Feb 5 15:40:04 2021 -0500

    tracing: Do not count ftrace events in top level enable output
    
    commit 256cfdd6fdf70c6fcf0f7c8ddb0ebd73ce8f3bc9 upstream.
    
    The file /sys/kernel/tracing/events/enable is used to enable all events by
    echoing in "1", or disabling all events when echoing in "0". To know if all
    events are enabled, disabled, or some are enabled but not all of them,
    cating the file should show either "1" (all enabled), "0" (all disabled), or
    "X" (some enabled but not all of them). This works the same as the "enable"
    files in the individule system directories (like tracing/events/sched/enable).
    
    But when all events are enabled, the top level "enable" file shows "X". The
    reason is that its checking the "ftrace" events, which are special events
    that only exist for their format files. These include the format for the
    function tracer events, that are enabled when the function tracer is
    enabled, but not by the "enable" file. The check includes these events,
    which will always be disabled, and even though all true events are enabled,
    the top level "enable" file will show "X" instead of "1".
    
    To fix this, have the check test the event's flags to see if it has the
    "IGNORE_ENABLE" flag set, and if so, not test it.
    
    Cc: stable@vger.kernel.org
    Fixes: 553552ce1796c ("tracing: Combine event filter_active and enable into single flags field")
    Reported-by: "Yordan Karadzhov (VMware)" <y.karadz@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5aa078014df953ebb6f39d1e80aeed4ad129a8de
Author: Phillip Lougher <phillip@squashfs.org.uk>
Date:   Tue Feb 9 13:42:00 2021 -0800

    squashfs: add more sanity checks in xattr id lookup
    
    commit 506220d2ba21791314af569211ffd8870b8208fa upstream.
    
    Sysbot has reported a warning where a kmalloc() attempt exceeds the
    maximum limit.  This has been identified as corruption of the xattr_ids
    count when reading the xattr id lookup table.
    
    This patch adds a number of additional sanity checks to detect this
    corruption and others.
    
    1. It checks for a corrupted xattr index read from the inode.  This could
       be because the metadata block is uncompressed, or because the
       "compression" bit has been corrupted (turning a compressed block
       into an uncompressed block).  This would cause an out of bounds read.
    
    2. It checks against corruption of the xattr_ids count.  This can either
       lead to the above kmalloc failure, or a smaller than expected
       table to be read.
    
    3. It checks the contents of the index table for corruption.
    
    [phillip@squashfs.org.uk: fix checkpatch issue]
      Link: https://lkml.kernel.org/r/270245655.754655.1612770082682@webmail.123-reg.co.uk
    
    Link: https://lkml.kernel.org/r/20210204130249.4495-5-phillip@squashfs.org.uk
    Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
    Reported-by: syzbot+2ccea6339d368360800d@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 318b5d239aa438b210087ef7c7ff1f004c49aec5
Author: Phillip Lougher <phillip@squashfs.org.uk>
Date:   Tue Feb 9 13:41:56 2021 -0800

    squashfs: add more sanity checks in inode lookup
    
    commit eabac19e40c095543def79cb6ffeb3a8588aaff4 upstream.
    
    Sysbot has reported an "slab-out-of-bounds read" error which has been
    identified as being caused by a corrupted "ino_num" value read from the
    inode.  This could be because the metadata block is uncompressed, or
    because the "compression" bit has been corrupted (turning a compressed
    block into an uncompressed block).
    
    This patch adds additional sanity checks to detect this, and the
    following corruption.
    
    1. It checks against corruption of the inodes count.  This can either
       lead to a larger table to be read, or a smaller than expected
       table to be read.
    
       In the case of a too large inodes count, this would often have been
       trapped by the existing sanity checks, but this patch introduces
       a more exact check, which can identify too small values.
    
    2. It checks the contents of the index table for corruption.
    
    [phillip@squashfs.org.uk: fix checkpatch issue]
      Link: https://lkml.kernel.org/r/527909353.754618.1612769948607@webmail.123-reg.co.uk
    
    Link: https://lkml.kernel.org/r/20210204130249.4495-4-phillip@squashfs.org.uk
    Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
    Reported-by: syzbot+04419e3ff19d2970ea28@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3207af4319e73747d97279a9ed6a08661e792663
Author: Phillip Lougher <phillip@squashfs.org.uk>
Date:   Tue Feb 9 13:41:53 2021 -0800

    squashfs: add more sanity checks in id lookup
    
    commit f37aa4c7366e23f91b81d00bafd6a7ab54e4a381 upstream.
    
    Sysbot has reported a number of "slab-out-of-bounds reads" and
    "use-after-free read" errors which has been identified as being caused
    by a corrupted index value read from the inode.  This could be because
    the metadata block is uncompressed, or because the "compression" bit has
    been corrupted (turning a compressed block into an uncompressed block).
    
    This patch adds additional sanity checks to detect this, and the
    following corruption.
    
    1. It checks against corruption of the ids count.  This can either
       lead to a larger table to be read, or a smaller than expected
       table to be read.
    
       In the case of a too large ids count, this would often have been
       trapped by the existing sanity checks, but this patch introduces
       a more exact check, which can identify too small values.
    
    2. It checks the contents of the index table for corruption.
    
    Link: https://lkml.kernel.org/r/20210204130249.4495-3-phillip@squashfs.org.uk
    Signed-off-by: Phillip Lougher <phillip@squashfs.org.uk>
    Reported-by: syzbot+b06d57ba83f604522af2@syzkaller.appspotmail.com
    Reported-by: syzbot+c021ba012da41ee9807c@syzkaller.appspotmail.com
    Reported-by: syzbot+5024636e8b5fd19f0f19@syzkaller.appspotmail.com
    Reported-by: syzbot+bcbc661df46657d0fa4f@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c1ed1759cdd5b59581ecd3735671b59f659c7f5
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Thu Jan 30 22:11:04 2020 -0800

    memcg: fix a crash in wb_workfn when a device disappears
    
    [ Upstream commit 68f23b89067fdf187763e75a56087550624fdbee ]
    
    Without memcg, there is a one-to-one mapping between the bdi and
    bdi_writeback structures.  In this world, things are fairly
    straightforward; the first thing bdi_unregister() does is to shutdown
    the bdi_writeback structure (or wb), and part of that writeback ensures
    that no other work queued against the wb, and that the wb is fully
    drained.
    
    With memcg, however, there is a one-to-many relationship between the bdi
    and bdi_writeback structures; that is, there are multiple wb objects
    which can all point to a single bdi.  There is a refcount which prevents
    the bdi object from being released (and hence, unregistered).  So in
    theory, the bdi_unregister() *should* only get called once its refcount
    goes to zero (bdi_put will drop the refcount, and when it is zero,
    release_bdi gets called, which calls bdi_unregister).
    
    Unfortunately, del_gendisk() in block/gen_hd.c never got the memo about
    the Brave New memcg World, and calls bdi_unregister directly.  It does
    this without informing the file system, or the memcg code, or anything
    else.  This causes the root wb associated with the bdi to be
    unregistered, but none of the memcg-specific wb's are shutdown.  So when
    one of these wb's are woken up to do delayed work, they try to
    dereference their wb->bdi->dev to fetch the device name, but
    unfortunately bdi->dev is now NULL, thanks to the bdi_unregister()
    called by del_gendisk().  As a result, *boom*.
    
    Fortunately, it looks like the rest of the writeback path is perfectly
    happy with bdi->dev and bdi->owner being NULL, so the simplest fix is to
    create a bdi_dev_name() function which can handle bdi->dev being NULL.
    This also allows us to bulletproof the writeback tracepoints to prevent
    them from dereferencing a NULL pointer and crashing the kernel if one is
    tracing with memcg's enabled, and an iSCSI device dies or a USB storage
    stick is pulled.
    
    The most common way of triggering this will be hotremoval of a device
    while writeback with memcg enabled is going on.  It was triggering
    several times a day in a heavily loaded production environment.
    
    Google Bug Id: 145475544
    
    Link: https://lore.kernel.org/r/20191227194829.150110-1-tytso@mit.edu
    Link: http://lkml.kernel.org/r/20191228005211.163952-1-tytso@mit.edu
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: Chris Mason <clm@fb.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89c289db89e446dccd8a1723ad72564e79ea6f82
Author: Qian Cai <cai@lca.pw>
Date:   Wed Sep 25 16:46:16 2019 -0700

    include/trace/events/writeback.h: fix -Wstringop-truncation warnings
    
    [ Upstream commit d1a445d3b86c9341ce7a0954c23be0edb5c9bec5 ]
    
    There are many of those warnings.
    
    In file included from ./arch/powerpc/include/asm/paca.h:15,
                     from ./arch/powerpc/include/asm/current.h:13,
                     from ./include/linux/thread_info.h:21,
                     from ./include/asm-generic/preempt.h:5,
                     from ./arch/powerpc/include/generated/asm/preempt.h:1,
                     from ./include/linux/preempt.h:78,
                     from ./include/linux/spinlock.h:51,
                     from fs/fs-writeback.c:19:
    In function 'strncpy',
        inlined from 'perf_trace_writeback_page_template' at
    ./include/trace/events/writeback.h:56:1:
    ./include/linux/string.h:260:9: warning: '__builtin_strncpy' specified
    bound 32 equals destination size [-Wstringop-truncation]
      return __builtin_strncpy(p, q, size);
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Fix it by using the new strscpy_pad() which was introduced in "lib/string:
    Add strscpy_pad() function" and will always be NUL-terminated instead of
    strncpy().  Also, change strlcpy() to use strscpy_pad() in this file for
    consistency.
    
    Link: http://lkml.kernel.org/r/1564075099-27750-1-git-send-email-cai@lca.pw
    Fixes: 455b2864686d ("writeback: Initial tracing support")
    Fixes: 028c2dd184c0 ("writeback: Add tracing to balance_dirty_pages")
    Fixes: e84d0a4f8e39 ("writeback: trace event writeback_queue_io")
    Fixes: b48c104d2211 ("writeback: trace event bdi_dirty_ratelimit")
    Fixes: cc1676d917f3 ("writeback: Move requeueing when I_SYNC set to writeback_sb_inodes()")
    Fixes: 9fb0a7da0c52 ("writeback: add more tracepoints")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Tobin C. Harding <tobin@kernel.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Dave Chinner <dchinner@redhat.com>
    Cc: Fengguang Wu <fengguang.wu@intel.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Joe Perches <joe@perches.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Nitin Gote <nitin.r.gote@intel.com>
    Cc: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Cc: Stephen Kitt <steve@sk2.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 04c55a8c77353d4e1fdd24fd2be8299f8cd38c3d
Author: Tobin C. Harding <tobin@kernel.org>
Date:   Fri Apr 5 12:58:58 2019 +1100

    lib/string: Add strscpy_pad() function
    
    [ Upstream commit 458a3bf82df4fe1f951d0f52b1e0c1e9d5a88a3b ]
    
    We have a function to copy strings safely and we have a function to copy
    strings and zero the tail of the destination (if source string is
    shorter than destination buffer) but we do not have a function to do
    both at once.  This means developers must write this themselves if they
    desire this functionality.  This is a chore, and also leaves us open to
    off by one errors unnecessarily.
    
    Add a function that calls strscpy() then memset()s the tail to zero if
    the source string is shorter than the destination buffer.
    
    Acked-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Tobin C. Harding <tobin@kernel.org>
    Signed-off-by: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6ad267c8c509e7294b7561b84fdd45a93181358
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Thu Jan 21 16:17:24 2021 -0500

    SUNRPC: Handle 0 length opaque XDR object data properly
    
    [ Upstream commit e4a7d1f7707eb44fd953a31dd59eff82009d879c ]
    
    When handling an auth_gss downcall, it's possible to get 0-length
    opaque object for the acceptor.  In the case of a 0-length XDR
    object, make sure simple_get_netobj() fills in dest->data = NULL,
    and does not continue to kmemdup() which will set
    dest->data = ZERO_SIZE_PTR for the acceptor.
    
    The trace event code can handle NULL but not ZERO_SIZE_PTR for a
    string, and so without this patch the rpcgss_context trace event
    will crash the kernel as follows:
    
    [  162.887992] BUG: kernel NULL pointer dereference, address: 0000000000000010
    [  162.898693] #PF: supervisor read access in kernel mode
    [  162.900830] #PF: error_code(0x0000) - not-present page
    [  162.902940] PGD 0 P4D 0
    [  162.904027] Oops: 0000 [#1] SMP PTI
    [  162.905493] CPU: 4 PID: 4321 Comm: rpc.gssd Kdump: loaded Not tainted 5.10.0 #133
    [  162.908548] Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
    [  162.910978] RIP: 0010:strlen+0x0/0x20
    [  162.912505] Code: 48 89 f9 74 09 48 83 c1 01 80 39 00 75 f7 31 d2 44 0f b6 04 16 44 88 04 11 48 83 c2 01 45 84 c0 75 ee c3 0f 1f 80 00 00 00 00 <80> 3f 00 74 10 48 89 f8 48 83 c0 01 80 38 00 75 f7 48 29 f8 c3 31
    [  162.920101] RSP: 0018:ffffaec900c77d90 EFLAGS: 00010202
    [  162.922263] RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00000000fffde697
    [  162.925158] RDX: 000000000000002f RSI: 0000000000000080 RDI: 0000000000000010
    [  162.928073] RBP: 0000000000000010 R08: 0000000000000e10 R09: 0000000000000000
    [  162.930976] R10: ffff8e698a590cb8 R11: 0000000000000001 R12: 0000000000000e10
    [  162.933883] R13: 00000000fffde697 R14: 000000010034d517 R15: 0000000000070028
    [  162.936777] FS:  00007f1e1eb93700(0000) GS:ffff8e6ab7d00000(0000) knlGS:0000000000000000
    [  162.940067] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  162.942417] CR2: 0000000000000010 CR3: 0000000104eba000 CR4: 00000000000406e0
    [  162.945300] Call Trace:
    [  162.946428]  trace_event_raw_event_rpcgss_context+0x84/0x140 [auth_rpcgss]
    [  162.949308]  ? __kmalloc_track_caller+0x35/0x5a0
    [  162.951224]  ? gss_pipe_downcall+0x3a3/0x6a0 [auth_rpcgss]
    [  162.953484]  gss_pipe_downcall+0x585/0x6a0 [auth_rpcgss]
    [  162.955953]  rpc_pipe_write+0x58/0x70 [sunrpc]
    [  162.957849]  vfs_write+0xcb/0x2c0
    [  162.959264]  ksys_write+0x68/0xe0
    [  162.960706]  do_syscall_64+0x33/0x40
    [  162.962238]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  162.964346] RIP: 0033:0x7f1e1f1e57df
    
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f6511f803cdaa0a4acb7c5a5730feb386826204
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Thu Jan 21 16:17:23 2021 -0500

    SUNRPC: Move simple_get_bytes and simple_get_netobj into private header
    
    [ Upstream commit ba6dfce47c4d002d96cd02a304132fca76981172 ]
    
    Remove duplicated helper functions to parse opaque XDR objects
    and place inside new file net/sunrpc/auth_gss/auth_gss_internal.h.
    In the new file carry the license and copyright from the source file
    net/sunrpc/auth_gss/auth_gss.c.  Finally, update the comment inside
    include/linux/sunrpc/xdr.h since lockd is not the only user of
    struct xdr_netobj.
    
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3108461a26cbacb4704394a728ba0956d15b468a
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 22 14:52:41 2021 +0200

    iwlwifi: mvm: guard against device removal in reprobe
    
    [ Upstream commit 7a21b1d4a728a483f07c638ccd8610d4b4f12684 ]
    
    If we get into a problem severe enough to attempt a reprobe,
    we schedule a worker to do that. However, if the problem gets
    more severe and the device is actually destroyed before this
    worker has a chance to run, we use a free device. Bump up the
    reference count of the device until the worker runs to avoid
    this situation.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20210122144849.871f0892e4b2.I94819e11afd68d875f3e242b98bef724b8236f1e@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c999471a14ab910c7f47e4c8b87a83ffb496b84
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Fri Jan 15 13:05:55 2021 +0200

    iwlwifi: pcie: add a NULL check in iwl_pcie_txq_unmap
    
    [ Upstream commit 98c7d21f957b10d9c07a3a60a3a5a8f326a197e5 ]
    
    I hit a NULL pointer exception in this function when the
    init flow went really bad.
    
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20210115130252.2e8da9f2c132.I0234d4b8ddaf70aaa5028a20c863255e05bc1f84@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35c08cd301430bce9a0fabc0029a33afb424bb0e
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 15 13:05:48 2021 +0200

    iwlwifi: mvm: take mutex for calling iwl_mvm_get_sync_time()
    
    [ Upstream commit 5c56d862c749669d45c256f581eac4244be00d4d ]
    
    We need to take the mutex to call iwl_mvm_get_sync_time(), do it.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20210115130252.4bb5ccf881a6.I62973cbb081e80aa5b0447a5c3b9c3251a65cf6b@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93dfa05313ab385ba593c3a6cb181cbdaa2e3c6e
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Thu Jan 21 17:11:42 2021 -0500

    pNFS/NFSv4: Try to return invalid layout in pnfs_layout_process()
    
    [ Upstream commit 08bd8dbe88825760e953759d7ec212903a026c75 ]
    
    If the server returns a new stateid that does not match the one in our
    cache, then try to return the one we hold instead of just invalidating
    it on the client side. This ensures that both client and server will
    agree that the stateid is invalid.
    
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9b76a2967e24826a1af6cf2d6d533c96205dde0
Author: Cong Wang <cong.wang@bytedance.com>
Date:   Sat Dec 26 16:50:20 2020 -0800

    af_key: relax availability checks for skb size calculation
    
    [ Upstream commit afbc293add6466f8f3f0c3d944d85f53709c170f ]
    
    xfrm_probe_algs() probes kernel crypto modules and changes the
    availability of struct xfrm_algo_desc. But there is a small window
    where ealg->available and aalg->available get changed between
    count_ah_combs()/count_esp_combs() and dump_ah_combs()/dump_esp_combs(),
    in this case we may allocate a smaller skb but later put a larger
    amount of data and trigger the panic in skb_put().
    
    Fix this by relaxing the checks when counting the size, that is,
    skipping the test of ->available. We may waste some memory for a few
    of sizeof(struct sadb_comb), but it is still much better than a panic.
    
    Reported-by: syzbot+b2bf2652983d23734c5c@syzkaller.appspotmail.com
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Cong Wang <cong.wang@bytedance.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55cbd0b60379310498b0fc15005a7610048285e6
Author: Sibi Sankar <sibis@codeaurora.org>
Date:   Thu Jul 23 01:40:45 2020 +0530

    remoteproc: qcom_q6v5_mss: Validate MBA firmware size before load
    
    commit e013f455d95add874f310dc47c608e8c70692ae5 upstream
    
    The following mem abort is observed when the mba firmware size exceeds
    the allocated mba region. MBA firmware size is restricted to a maximum
    size of 1M and remaining memory region is used by modem debug policy
    firmware when available. Hence verify whether the MBA firmware size lies
    within the allocated memory region and is not greater than 1M before
    loading.
    
    Err Logs:
    Unable to handle kernel paging request at virtual address
    Mem abort info:
    ...
    Call trace:
      __memcpy+0x110/0x180
      rproc_start+0x40/0x218
      rproc_boot+0x5b4/0x608
      state_store+0x54/0xf8
      dev_attr_store+0x44/0x60
      sysfs_kf_write+0x58/0x80
      kernfs_fop_write+0x140/0x230
      vfs_write+0xc4/0x208
      ksys_write+0x74/0xf8
      __arm64_sys_write+0x24/0x30
    ...
    
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Fixes: 051fb70fd4ea4 ("remoteproc: qcom: Driver for the self-authenticating Hexagon v5")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sibi Sankar <sibis@codeaurora.org>
    Link: https://lore.kernel.org/r/20200722201047.12975-2-sibis@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    [sudip: manual backport to old file path]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 448cd94288f1bedba0363e06093b5f37ba50efb6
Author: Sibi Sankar <sibis@codeaurora.org>
Date:   Thu Jul 23 01:40:46 2020 +0530

    remoteproc: qcom_q6v5_mss: Validate modem blob firmware size before load
    
    commit 135b9e8d1cd8ba5ac9ad9bcf24b464b7b052e5b8 upstream
    
    The following mem abort is observed when one of the modem blob firmware
    size exceeds the allocated mpss region. Fix this by restricting the copy
    size to segment size using request_firmware_into_buf before load.
    
    Err Logs:
    Unable to handle kernel paging request at virtual address
    Mem abort info:
    ...
    Call trace:
      __memcpy+0x110/0x180
      rproc_start+0xd0/0x190
      rproc_boot+0x404/0x550
      state_store+0x54/0xf8
      dev_attr_store+0x44/0x60
      sysfs_kf_write+0x58/0x80
      kernfs_fop_write+0x140/0x230
      vfs_write+0xc4/0x208
      ksys_write+0x74/0xf8
    ...
    
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Fixes: 051fb70fd4ea4 ("remoteproc: qcom: Driver for the self-authenticating Hexagon v5")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sibi Sankar <sibis@codeaurora.org>
    Link: https://lore.kernel.org/r/20200722201047.12975-3-sibis@codeaurora.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    [sudip: manual backport to old file path]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8498447d440014722b26a50ab25f46792f08bd6
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Jan 29 10:13:53 2021 -0500

    fgraph: Initialize tracing_graph_pause at task creation
    
    commit 7e0a9220467dbcfdc5bc62825724f3e52e50ab31 upstream.
    
    On some archs, the idle task can call into cpu_suspend(). The cpu_suspend()
    will disable or pause function graph tracing, as there's some paths in
    bringing down the CPU that can have issues with its return address being
    modified. The task_struct structure has a "tracing_graph_pause" atomic
    counter, that when set to something other than zero, the function graph
    tracer will not modify the return address.
    
    The problem is that the tracing_graph_pause counter is initialized when the
    function graph tracer is enabled. This can corrupt the counter for the idle
    task if it is suspended in these architectures.
    
       CPU 1                                CPU 2
       -----                                -----
      do_idle()
        cpu_suspend()
          pause_graph_tracing()
              task_struct->tracing_graph_pause++ (0 -> 1)
    
                                    start_graph_tracing()
                                      for_each_online_cpu(cpu) {
                                        ftrace_graph_init_idle_task(cpu)
                                          task-struct->tracing_graph_pause = 0 (1 -> 0)
    
          unpause_graph_tracing()
              task_struct->tracing_graph_pause-- (0 -> -1)
    
    The above should have gone from 1 to zero, and enabled function graph
    tracing again. But instead, it is set to -1, which keeps it disabled.
    
    There's no reason that the field tracing_graph_pause on the task_struct can
    not be initialized at boot up.
    
    Cc: stable@vger.kernel.org
    Fixes: 380c4b1411ccd ("tracing/function-graph-tracer: append the tracing_graph_flag")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=211339
    Reported-by: pierre.gondois@arm.com
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7624156ca8d8f96bca10b09e84ac8cc6d23a5cd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 10 09:12:10 2021 +0100

    Linux 4.14.221
    
    Tested-by: Jason Self <jason@bluehome.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210208145805.239714726@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c756fa27f8a3c1380d06c8d50a34b6b698a1d3a
Author: DENG Qingfang <dqfext@gmail.com>
Date:   Sat Jan 30 21:43:34 2021 +0800

    net: dsa: mv88e6xxx: override existent unicast portvec in port_fdb_add
    
    commit f72f2fb8fb6be095b98af5d740ac50cffd0b0cae upstream.
    
    Having multiple destination ports for a unicast address does not make
    sense.
    Make port_db_load_purge override existent unicast portvec instead of
    adding a new port bit.
    
    Fixes: 884729399260 ("net: dsa: mv88e6xxx: handle multiple ports in ATU")
    Signed-off-by: DENG Qingfang <dqfext@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20210130134334.10243-1-dqfext@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0374fbc8cd0b9a0c8b174ece4eb060bce2ec3c39
Author: Nadav Amit <namit@vmware.com>
Date:   Wed Jan 27 09:53:17 2021 -0800

    iommu/vt-d: Do not use flush-queue when caching-mode is on
    
    commit 29b32839725f8c89a41cb6ee054c85f3116ea8b5 upstream.
    
    When an Intel IOMMU is virtualized, and a physical device is
    passed-through to the VM, changes of the virtual IOMMU need to be
    propagated to the physical IOMMU. The hypervisor therefore needs to
    monitor PTE mappings in the IOMMU page-tables. Intel specifications
    provide "caching-mode" capability that a virtual IOMMU uses to report
    that the IOMMU is virtualized and a TLB flush is needed after mapping to
    allow the hypervisor to propagate virtual IOMMU mappings to the physical
    IOMMU. To the best of my knowledge no real physical IOMMU reports
    "caching-mode" as turned on.
    
    Synchronizing the virtual and the physical IOMMU tables is expensive if
    the hypervisor is unaware which PTEs have changed, as the hypervisor is
    required to walk all the virtualized tables and look for changes.
    Consequently, domain flushes are much more expensive than page-specific
    flushes on virtualized IOMMUs with passthrough devices. The kernel
    therefore exploited the "caching-mode" indication to avoid domain
    flushing and use page-specific flushing in virtualized environments. See
    commit 78d5f0f500e6 ("intel-iommu: Avoid global flushes with caching
    mode.")
    
    This behavior changed after commit 13cf01744608 ("iommu/vt-d: Make use
    of iova deferred flushing"). Now, when batched TLB flushing is used (the
    default), full TLB domain flushes are performed frequently, requiring
    the hypervisor to perform expensive synchronization between the virtual
    TLB and the physical one.
    
    Getting batched TLB flushes to use page-specific invalidations again in
    such circumstances is not easy, since the TLB invalidation scheme
    assumes that "full" domain TLB flushes are performed for scalability.
    
    Disable batched TLB flushes when caching-mode is on, as the performance
    benefit from using batched TLB invalidations is likely to be much
    smaller than the overhead of the virtual-to-physical IOMMU page-tables
    synchronization.
    
    Fixes: 13cf01744608 ("iommu/vt-d: Make use of iova deferred flushing")
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Lu Baolu <baolu.lu@linux.intel.com>
    Cc: Joerg Roedel <joro@8bytes.org>
    Cc: Will Deacon <will@kernel.org>
    Cc: stable@vger.kernel.org
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20210127175317.1600473-1-namit@vmware.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd822f333fadfb40b5d068b2e5dafe2d9002a0de
Author: Benjamin Valentin <benpicco@googlemail.com>
Date:   Thu Jan 21 19:24:17 2021 -0800

    Input: xpad - sync supported devices with fork on GitHub
    
    commit 9bbd77d5bbc9aff8cb74d805c31751f5f0691ba8 upstream.
    
    There is a fork of this driver on GitHub [0] that has been updated
    with new device IDs.
    
    Merge those into the mainline driver, so the out-of-tree fork is not
    needed for users of those devices anymore.
    
    [0] https://github.com/paroj/xpad
    
    Signed-off-by: Benjamin Valentin <benpicco@googlemail.com>
    Link: https://lore.kernel.org/r/20210121142523.1b6b050f@rechenknecht2k11
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d677f6b46bdeedb288970668598062f4be26fbd
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Thu Mar 5 09:47:08 2020 -0800

    x86/apic: Add extra serialization for non-serializing MSRs
    
    commit 25a068b8e9a4eb193d755d58efcb3c98928636e0 upstream.
    
    Jan Kiszka reported that the x2apic_wrmsr_fence() function uses a plain
    MFENCE while the Intel SDM (10.12.3 MSR Access in x2APIC Mode) calls for
    MFENCE; LFENCE.
    
    Short summary: we have special MSRs that have weaker ordering than all
    the rest. Add fencing consistent with current SDM recommendations.
    
    This is not known to cause any issues in practice, only in theory.
    
    Longer story below:
    
    The reason the kernel uses a different semantic is that the SDM changed
    (roughly in late 2017). The SDM changed because folks at Intel were
    auditing all of the recommended fences in the SDM and realized that the
    x2apic fences were insufficient.
    
    Why was the pain MFENCE judged insufficient?
    
    WRMSR itself is normally a serializing instruction. No fences are needed
    because the instruction itself serializes everything.
    
    But, there are explicit exceptions for this serializing behavior written
    into the WRMSR instruction documentation for two classes of MSRs:
    IA32_TSC_DEADLINE and the X2APIC MSRs.
    
    Back to x2apic: WRMSR is *not* serializing in this specific case.
    But why is MFENCE insufficient? MFENCE makes writes visible, but
    only affects load/store instructions. WRMSR is unfortunately not a
    load/store instruction and is unaffected by MFENCE. This means that a
    non-serializing WRMSR could be reordered by the CPU to execute before
    the writes made visible by the MFENCE have even occurred in the first
    place.
    
    This means that an x2apic IPI could theoretically be triggered before
    there is any (visible) data to process.
    
    Does this affect anything in practice? I honestly don't know. It seems
    quite possible that by the time an interrupt gets to consume the (not
    yet) MFENCE'd data, it has become visible, mostly by accident.
    
    To be safe, add the SDM-recommended fences for all x2apic WRMSRs.
    
    This also leaves open the question of the _other_ weakly-ordered WRMSR:
    MSR_IA32_TSC_DEADLINE. While it has the same ordering architecture as
    the x2APIC MSRs, it seems substantially less likely to be a problem in
    practice. While writes to the in-memory Local Vector Table (LVT) might
    theoretically be reordered with respect to a weakly-ordered WRMSR like
    TSC_DEADLINE, the SDM has this to say:
    
      In x2APIC mode, the WRMSR instruction is used to write to the LVT
      entry. The processor ensures the ordering of this write and any
      subsequent WRMSR to the deadline; no fencing is required.
    
    But, that might still leave xAPIC exposed. The safest thing to do for
    now is to add the extra, recommended LFENCE.
    
     [ bp: Massage commit message, fix typos, drop accidentally added
       newline to tools/arch/x86/include/asm/barrier.h. ]
    
    Reported-by: Jan Kiszka <jan.kiszka@siemens.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200305174708.F77040DD@viggo.jf.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e025908d78c01a38d3b97df8d2e34930d070e1c
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jan 28 15:52:19 2021 -0600

    x86/build: Disable CET instrumentation in the kernel
    
    commit 20bf2b378729c4a0366a53e2018a0b70ace94bcd upstream.
    
    With retpolines disabled, some configurations of GCC, and specifically
    the GCC versions 9 and 10 in Ubuntu will add Intel CET instrumentation
    to the kernel by default. That breaks certain tracing scenarios by
    adding a superfluous ENDBR64 instruction before the fentry call, for
    functions which can be called indirectly.
    
    CET instrumentation isn't currently necessary in the kernel, as CET is
    only supported in user space. Disable it unconditionally and move it
    into the x86's Makefile as CET/CFI... enablement should be a per-arch
    decision anyway.
    
     [ bp: Massage and extend commit message. ]
    
    Fixes: 29be86d7f9cb ("kbuild: add -fcf-protection=none when using retpoline flags")
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Tested-by: Nikolay Borisov <nborisov@suse.com>
    Cc: <stable@vger.kernel.org>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Link: https://lkml.kernel.org/r/20210128215219.6kct3h2eiustncws@treble
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 495d2873d9f0099670551bdb24c24bd5152559d3
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Feb 4 18:32:31 2021 -0800

    mm: thp: fix MADV_REMOVE deadlock on shmem THP
    
    commit 1c2f67308af4c102b4e1e6cd6f69819ae59408e0 upstream.
    
    Sergey reported deadlock between kswapd correctly doing its usual
    lock_page(page) followed by down_read(page->mapping->i_mmap_rwsem), and
    madvise(MADV_REMOVE) on an madvise(MADV_HUGEPAGE) area doing
    down_write(page->mapping->i_mmap_rwsem) followed by lock_page(page).
    
    This happened when shmem_fallocate(punch hole)'s unmap_mapping_range()
    reaches zap_pmd_range()'s call to __split_huge_pmd().  The same deadlock
    could occur when partially truncating a mapped huge tmpfs file, or using
    fallocate(FALLOC_FL_PUNCH_HOLE) on it.
    
    __split_huge_pmd()'s page lock was added in 5.8, to make sure that any
    concurrent use of reuse_swap_page() (holding page lock) could not catch
    the anon THP's mapcounts and swapcounts while they were being split.
    
    Fortunately, reuse_swap_page() is never applied to a shmem or file THP
    (not even by khugepaged, which checks PageSwapCache before calling), and
    anonymous THPs are never created in shmem or file areas: so that
    __split_huge_pmd()'s page lock can only be necessary for anonymous THPs,
    on which there is no risk of deadlock with i_mmap_rwsem.
    
    Link: https://lkml.kernel.org/r/alpine.LSU.2.11.2101161409470.2022@eggly.anvils
    Fixes: c444eb564fb1 ("mm: thp: make the THP mapcount atomic against __split_huge_pmd_locked()")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reported-by: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 037e0a5648681e9f77435ebe219b2067ffe81557
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:13 2021 -0800

    mm: hugetlb: remove VM_BUG_ON_PAGE from page_huge_active
    
    commit ecbf4724e6061b4b01be20f6d797d64d462b2bc8 upstream.
    
    The page_huge_active() can be called from scan_movable_pages() which do
    not hold a reference count to the HugeTLB page.  So when we call
    page_huge_active() from scan_movable_pages(), the HugeTLB page can be
    freed parallel.  Then we will trigger a BUG_ON which is in the
    page_huge_active() when CONFIG_DEBUG_VM is enabled.  Just remove the
    VM_BUG_ON_PAGE.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-6-songmuchun@bytedance.com
    Fixes: 7e1f049efb86 ("mm: hugetlb: cleanup using paeg_huge_active()")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32daa408e52e2d90a4d20e2c047603c3e855bf49
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:10 2021 -0800

    mm: hugetlb: fix a race between isolating and freeing page
    
    commit 0eb2df2b5629794020f75e94655e1994af63f0d4 upstream.
    
    There is a race between isolate_huge_page() and __free_huge_page().
    
      CPU0:                                     CPU1:
    
      if (PageHuge(page))
                                                put_page(page)
                                                  __free_huge_page(page)
                                                      spin_lock(&hugetlb_lock)
                                                      update_and_free_page(page)
                                                        set_compound_page_dtor(page,
                                                          NULL_COMPOUND_DTOR)
                                                      spin_unlock(&hugetlb_lock)
        isolate_huge_page(page)
          // trigger BUG_ON
          VM_BUG_ON_PAGE(!PageHead(page), page)
          spin_lock(&hugetlb_lock)
          page_huge_active(page)
            // trigger BUG_ON
            VM_BUG_ON_PAGE(!PageHuge(page), page)
          spin_unlock(&hugetlb_lock)
    
    When we isolate a HugeTLB page on CPU0.  Meanwhile, we free it to the
    buddy allocator on CPU1.  Then, we can trigger a BUG_ON on CPU0, because
    it is already freed to the buddy allocator.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-5-songmuchun@bytedance.com
    Fixes: c8721bbbdd36 ("mm: memory-hotplug: enable memory hotplug to handle hugepage")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59c9acd13d591765e739dea7ab18ae5bfe9c12a9
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Thu Feb 4 18:32:03 2021 -0800

    mm: hugetlbfs: fix cannot migrate the fallocated HugeTLB page
    
    commit 585fc0d2871c9318c949fbf45b1f081edd489e96 upstream.
    
    If a new hugetlb page is allocated during fallocate it will not be
    marked as active (set_page_huge_active) which will result in a later
    isolate_huge_page failure when the page migration code would like to
    move that page.  Such a failure would be unexpected and wrong.
    
    Only export set_page_huge_active, just leave clear_page_huge_active as
    static.  Because there are no external users.
    
    Link: https://lkml.kernel.org/r/20210115124942.46403-3-songmuchun@bytedance.com
    Fixes: 70c3547e36f5 (hugetlbfs: add hugetlbfs_fallocate())
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7fdb261bf3e8bd824634e4cd81050795461507aa
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Sun Oct 18 09:39:21 2020 +0100

    ARM: footbridge: fix dc21285 PCI configuration accessors
    
    commit 39d3454c3513840eb123b3913fda6903e45ce671 upstream.
    
    Building with gcc 4.9.2 reveals a latent bug in the PCI accessors
    for Footbridge platforms, which causes a fatal alignment fault
    while accessing IO memory. Fix this by making the assembly volatile.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94313b2a408d5a588b90ce707f58276abb2ece64
Author: Thorsten Leemhuis <linux@leemhuis.info>
Date:   Fri Jan 29 06:24:42 2021 +0100

    nvme-pci: avoid the deepest sleep state on Kingston A2000 SSDs
    
    commit 538e4a8c571efdf131834431e0c14808bcfb1004 upstream.
    
    Some Kingston A2000 NVMe SSDs sooner or later get confused and stop
    working when they use the deepest APST sleep while running Linux. The
    system then crashes and one has to cold boot it to get the SSD working
    again.
    
    Kingston seems to known about this since at least mid-September 2020:
    https://bbs.archlinux.org/viewtopic.php?pid=1926994#p1926994
    
    Someone working for a German company representing Kingston to the German
    press confirmed to me Kingston engineering is aware of the issue and
    investigating; the person stated that to their current knowledge only
    the deepest APST sleep state causes trouble. Therefore, make Linux avoid
    it for now by applying the NVME_QUIRK_NO_DEEPEST_PS to this SSD.
    
    I have two such SSDs, but it seems the problem doesn't occur with them.
    I hence couldn't verify if this patch really fixes the problem, but all
    the data in front of me suggests it should.
    
    This patch can easily be reverted or improved upon if a better solution
    surfaces.
    
    FWIW, there are many reports about the issue scattered around the web;
    most of the users disabled APST completely to make things work, some
    just made Linux avoid the deepest sleep state:
    
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c65
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c73
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c74
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c78
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c79
    https://bugzilla.kernel.org/show_bug.cgi?id=195039#c80
    https://askubuntu.com/questions/1222049/nvmekingston-a2000-sometimes-stops-giving-response-in-ubuntu-18-04dell-inspir
    https://community.acer.com/en/discussion/604326/m-2-nvme-ssd-aspire-517-51g-issue-compatibility-kingston-a2000-linux-ubuntu
    
    For the record, some data from 'nvme id-ctrl /dev/nvme0'
    
    NVME Identify Controller:
    vid       : 0x2646
    ssvid     : 0x2646
    mn        : KINGSTON SA2000M81000G
    fr        : S5Z42105
    [...]
    ps    0 : mp:9.00W operational enlat:0 exlat:0 rrt:0 rrl:0
              rwt:0 rwl:0 idle_power:- active_power:-
    ps    1 : mp:4.60W operational enlat:0 exlat:0 rrt:1 rrl:1
              rwt:1 rwl:1 idle_power:- active_power:-
    ps    2 : mp:3.80W operational enlat:0 exlat:0 rrt:2 rrl:2
              rwt:2 rwl:2 idle_power:- active_power:-
    ps    3 : mp:0.0450W non-operational enlat:2000 exlat:2000 rrt:3 rrl:3
              rwt:3 rwl:3 idle_power:- active_power:-
    ps    4 : mp:0.0040W non-operational enlat:15000 exlat:15000 rrt:4 rrl:4
              rwt:4 rwl:4 idle_power:- active_power:-
    
    Cc: stable@vger.kernel.org # 4.14+
    Signed-off-by: Thorsten Leemhuis <linux@leemhuis.info>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33ec1023f7906521da4e1fc5898a70ec2c951f6b
Author: Fengnan Chang <fengnanchang@gmail.com>
Date:   Sat Jan 23 11:32:31 2021 +0800

    mmc: core: Limit retries when analyse of SDIO tuples fails
    
    commit f92e04f764b86e55e522988e6f4b6082d19a2721 upstream.
    
    When analysing tuples fails we may loop indefinitely to retry. Let's avoid
    this by using a 10s timeout and bail if not completed earlier.
    
    Signed-off-by: Fengnan Chang <fengnanchang@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20210123033230.36442-1-fengnanchang@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b6e16167ff29321837ffab3d6cd5fa0b9c69969
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Mon Feb 1 20:36:54 2021 -0600

    smb3: Fix out-of-bounds bug in SMB2_negotiate()
    
    commit 8d8d1dbefc423d42d626cf5b81aac214870ebaab upstream.
    
    While addressing some warnings generated by -Warray-bounds, I found this
    bug that was introduced back in 2017:
    
      CC [M]  fs/cifs/smb2pdu.o
    fs/cifs/smb2pdu.c: In function ‘SMB2_negotiate’:
    fs/cifs/smb2pdu.c:822:16: warning: array subscript 1 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      822 |   req->Dialects[1] = cpu_to_le16(SMB30_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    fs/cifs/smb2pdu.c:823:16: warning: array subscript 2 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      823 |   req->Dialects[2] = cpu_to_le16(SMB302_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    fs/cifs/smb2pdu.c:824:16: warning: array subscript 3 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      824 |   req->Dialects[3] = cpu_to_le16(SMB311_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    fs/cifs/smb2pdu.c:816:16: warning: array subscript 1 is above array bounds
    of ‘__le16[1]’ {aka ‘short unsigned int[1]’} [-Warray-bounds]
      816 |   req->Dialects[1] = cpu_to_le16(SMB302_PROT_ID);
          |   ~~~~~~~~~~~~~^~~
    
    At the time, the size of array _Dialects_ was changed from 1 to 3 in struct
    validate_negotiate_info_req, and then in 2019 it was changed from 3 to 4,
    but those changes were never made in struct smb2_negotiate_req, which has
    led to a 3 and a half years old out-of-bounds bug in function
    SMB2_negotiate() (fs/cifs/smb2pdu.c).
    
    Fix this by increasing the size of array _Dialects_ in struct
    smb2_negotiate_req to 4.
    
    Fixes: 9764c02fcbad ("SMB3: Add support for multidialect negotiate (SMB2.1 and later)")
    Fixes: d5c7076b772a ("smb3: add smb3.1.1 to default dialect list")
    Cc: stable@vger.kernel.org
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2d9d92d52aeea156d9d02211024d60ef9de1564
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Fri Feb 5 15:42:48 2021 +0100

    cifs: report error instead of invalid when revalidating a dentry fails
    
    commit 21b200d091826a83aafc95d847139b2b0582f6d1 upstream.
    
    Assuming
    - //HOST/a is mounted on /mnt
    - //HOST/b is mounted on /mnt/b
    
    On a slow connection, running 'df' and killing it while it's
    processing /mnt/b can make cifs_get_inode_info() returns -ERESTARTSYS.
    
    This triggers the following chain of events:
    => the dentry revalidation fail
    => dentry is put and released
    => superblock associated with the dentry is put
    => /mnt/b is unmounted
    
    This patch makes cifs_d_revalidate() return the error instead of 0
    (invalid) when cifs_revalidate_dentry() fails, except for ENOENT (file
    deleted) and ESTALE (file recreated).
    
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Suggested-by: Shyam Prasad N <nspmangalore@gmail.com>
    Reviewed-by: Shyam Prasad N <nspmangalore@gmail.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c15155ef814c37b3720b0036bcd1a54c775e2064
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Feb 3 13:37:02 2021 +0200

    xhci: fix bounce buffer usage for non-sg list case
    
    commit d4a610635400ccc382792f6be69427078541c678 upstream.
    
    xhci driver may in some special cases need to copy small amounts
    of payload data to a bounce buffer in order to meet the boundary
    and alignment restrictions set by the xHCI specification.
    
    In the majority of these cases the data is in a sg list, and
    driver incorrectly assumed data is always in urb->sg when using
    the bounce buffer.
    
    If data instead is contiguous, and in urb->transfer_buffer, we may still
    need to bounce buffer a small part if data starts very close (less than
    packet size) to a 64k boundary.
    
    Check if sg list is used before copying data to/from it.
    
    Fixes: f9c589e142d0 ("xhci: TD-fragment, align the unsplittable case with a bounce buffer")
    Cc: stable@vger.kernel.org
    Reported-by: Andreas Hartmann <andihartmann@01019freenet.de>
    Tested-by: Andreas Hartmann <andihartmann@01019freenet.de>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210203113702.436762-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 640fe6eb2b24bdf5b7d7da983d2bd6d36c0c8fbd
Author: Wang ShaoBo <bobo.shaobowang@huawei.com>
Date:   Thu Jan 28 20:44:27 2021 +0800

    kretprobe: Avoid re-registration of the same kretprobe earlier
    
    commit 0188b87899ffc4a1d36a0badbe77d56c92fd91dc upstream.
    
    Our system encountered a re-init error when re-registering same kretprobe,
    where the kretprobe_instance in rp->free_instances is illegally accessed
    after re-init.
    
    Implementation to avoid re-registration has been introduced for kprobe
    before, but lags for register_kretprobe(). We must check if kprobe has
    been re-registered before re-initializing kretprobe, otherwise it will
    destroy the data struct of kretprobe registered, which can lead to memory
    leak, system crash, also some unexpected behaviors.
    
    We use check_kprobe_rereg() to check if kprobe has been re-registered
    before running register_kretprobe()'s body, for giving a warning message
    and terminate registration process.
    
    Link: https://lkml.kernel.org/r/20210128124427.2031088-1-bobo.shaobowang@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 1f0ab40976460 ("kprobes: Prevent re-registration of the same kprobe")
    [ The above commit should have been done for kretprobes too ]
    Acked-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Acked-by: Ananth N Mavinakayanahalli <ananth@linux.ibm.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a56e7d5a5fdbffef6e7ca4a90bab6cd70dec1c8
Author: Felix Fietkau <nbd@nbd.name>
Date:   Mon Feb 1 09:33:24 2021 +0100

    mac80211: fix station rate table updates on assoc
    
    commit 18fe0fae61252b5ae6e26553e2676b5fac555951 upstream.
    
    If the driver uses .sta_add, station entries are only uploaded after the sta
    is in assoc state. Fix early station rate table updates by deferring them
    until the sta has been uploaded.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20210201083324.3134-1-nbd@nbd.name
    [use rcu_access_pointer() instead since we won't dereference here]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e62760ded51b0cfd576269a2250da3cb37cc457
Author: Liangyan <liangyan.peng@linux.alibaba.com>
Date:   Tue Dec 22 11:06:26 2020 +0800

    ovl: fix dentry leak in ovl_get_redirect
    
    commit e04527fefba6e4e66492f122cf8cc6314f3cf3bf upstream.
    
    We need to lock d_parent->d_lock before dget_dlock, or this may
    have d_lockref updated parallelly like calltrace below which will
    cause dentry->d_lockref leak and risk a crash.
    
         CPU 0                                CPU 1
    ovl_set_redirect                       lookup_fast
      ovl_get_redirect                       __d_lookup
        dget_dlock
          //no lock protection here            spin_lock(&dentry->d_lock)
          dentry->d_lockref.count++            dentry->d_lockref.count++
    
    [   49.799059] PGD 800000061fed7067 P4D 800000061fed7067 PUD 61fec5067 PMD 0
    [   49.799689] Oops: 0002 [#1] SMP PTI
    [   49.800019] CPU: 2 PID: 2332 Comm: node Not tainted 4.19.24-7.20.al7.x86_64 #1
    [   49.800678] Hardware name: Alibaba Cloud Alibaba Cloud ECS, BIOS 8a46cfe 04/01/2014
    [   49.801380] RIP: 0010:_raw_spin_lock+0xc/0x20
    [   49.803470] RSP: 0018:ffffac6fc5417e98 EFLAGS: 00010246
    [   49.803949] RAX: 0000000000000000 RBX: ffff93b8da3446c0 RCX: 0000000a00000000
    [   49.804600] RDX: 0000000000000001 RSI: 000000000000000a RDI: 0000000000000088
    [   49.805252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffff993cf040
    [   49.805898] R10: ffff93b92292e580 R11: ffffd27f188a4b80 R12: 0000000000000000
    [   49.806548] R13: 00000000ffffff9c R14: 00000000fffffffe R15: ffff93b8da3446c0
    [   49.807200] FS:  00007ffbedffb700(0000) GS:ffff93b927880000(0000) knlGS:0000000000000000
    [   49.807935] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   49.808461] CR2: 0000000000000088 CR3: 00000005e3f74006 CR4: 00000000003606a0
    [   49.809113] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   49.809758] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   49.810410] Call Trace:
    [   49.810653]  d_delete+0x2c/0xb0
    [   49.810951]  vfs_rmdir+0xfd/0x120
    [   49.811264]  do_rmdir+0x14f/0x1a0
    [   49.811573]  do_syscall_64+0x5b/0x190
    [   49.811917]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   49.812385] RIP: 0033:0x7ffbf505ffd7
    [   49.814404] RSP: 002b:00007ffbedffada8 EFLAGS: 00000297 ORIG_RAX: 0000000000000054
    [   49.815098] RAX: ffffffffffffffda RBX: 00007ffbedffb640 RCX: 00007ffbf505ffd7
    [   49.815744] RDX: 0000000004449700 RSI: 0000000000000000 RDI: 0000000006c8cd50
    [   49.816394] RBP: 00007ffbedffaea0 R08: 0000000000000000 R09: 0000000000017d0b
    [   49.817038] R10: 0000000000000000 R11: 0000000000000297 R12: 0000000000000012
    [   49.817687] R13: 00000000072823d8 R14: 00007ffbedffb700 R15: 00000000072823d8
    [   49.818338] Modules linked in: pvpanic cirrusfb button qemu_fw_cfg atkbd libps2 i8042
    [   49.819052] CR2: 0000000000000088
    [   49.819368] ---[ end trace 4e652b8aa299aa2d ]---
    [   49.819796] RIP: 0010:_raw_spin_lock+0xc/0x20
    [   49.821880] RSP: 0018:ffffac6fc5417e98 EFLAGS: 00010246
    [   49.822363] RAX: 0000000000000000 RBX: ffff93b8da3446c0 RCX: 0000000a00000000
    [   49.823008] RDX: 0000000000000001 RSI: 000000000000000a RDI: 0000000000000088
    [   49.823658] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffff993cf040
    [   49.825404] R10: ffff93b92292e580 R11: ffffd27f188a4b80 R12: 0000000000000000
    [   49.827147] R13: 00000000ffffff9c R14: 00000000fffffffe R15: ffff93b8da3446c0
    [   49.828890] FS:  00007ffbedffb700(0000) GS:ffff93b927880000(0000) knlGS:0000000000000000
    [   49.830725] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   49.832359] CR2: 0000000000000088 CR3: 00000005e3f74006 CR4: 00000000003606a0
    [   49.834085] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   49.835792] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Cc: <stable@vger.kernel.org>
    Fixes: a6c606551141 ("ovl: redirect on rename-dir")
    Signed-off-by: Liangyan <liangyan.peng@linux.alibaba.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 617a874d0549d01c39324bebc7143c881221dfee
Author: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
Date:   Wed Jan 27 11:39:19 2021 +0100

    usb: dwc2: Fix endpoint direction check in ep_from_windex
    
    commit f670e9f9c8cac716c3506c6bac9e997b27ad441a upstream.
    
    dwc2_hsotg_process_req_status uses ep_from_windex() to retrieve
    the endpoint for the index provided in the wIndex request param.
    
    In a test-case with a rndis gadget running and sending a malformed
    packet to it like:
        dev.ctrl_transfer(
            0x82,      # bmRequestType
            0x00,       # bRequest
            0x0000,     # wValue
            0x0001,     # wIndex
            0x00       # wLength
        )
    it is possible to cause a crash:
    
    [  217.533022] dwc2 ff300000.usb: dwc2_hsotg_process_req_status: USB_REQ_GET_STATUS
    [  217.559003] Unable to handle kernel read from unreadable memory at virtual address 0000000000000088
    ...
    [  218.313189] Call trace:
    [  218.330217]  ep_from_windex+0x3c/0x54
    [  218.348565]  usb_gadget_giveback_request+0x10/0x20
    [  218.368056]  dwc2_hsotg_complete_request+0x144/0x184
    
    This happens because ep_from_windex wants to compare the endpoint
    direction even if index_to_ep() didn't return an endpoint due to
    the direction not matching.
    
    The fix is easy insofar that the actual direction check is already
    happening when calling index_to_ep() which will return NULL if there
    is no endpoint for the targeted direction, so the offending check
    can go away completely.
    
    Fixes: c6f5c050e2a7 ("usb: dwc2: gadget: add bi-directional endpoint support")
    Cc: stable@vger.kernel.org
    Reported-by: Gerhard Klostermeier <gerhard.klostermeier@syss.de>
    Signed-off-by: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
    Link: https://lore.kernel.org/r/20210127103919.58215-1-heiko@sntech.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2981d5641aee64b1909c49c8220438f7bbaa4e09
Author: Jeremy Figgins <kernel@jeremyfiggins.com>
Date:   Sat Jan 23 18:21:36 2021 -0600

    USB: usblp: don't call usb_set_interface if there's a single alt
    
    commit d8c6edfa3f4ee0d45d7ce5ef18d1245b78774b9d upstream.
    
    Some devices, such as the Winbond Electronics Corp. Virtual Com Port
    (Vendor=0416, ProdId=5011), lockup when usb_set_interface() or
    usb_clear_halt() are called. This device has only a single
    altsetting, so it should not be necessary to call usb_set_interface().
    
    Acked-by: Pete Zaitcev <zaitcev@redhat.com>
    Signed-off-by: Jeremy Figgins <kernel@jeremyfiggins.com>
    Link: https://lore.kernel.org/r/YAy9kJhM/rG8EQXC@watson
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e4e825ba54a128936898b4a8af60bffde7e7cca
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 28 12:33:42 2021 +0300

    USB: gadget: legacy: fix an error code in eth_bind()
    
    commit 3e1f4a2e1184ae6ad7f4caf682ced9554141a0f4 upstream.
    
    This code should return -ENOMEM if the allocation fails but it currently
    returns success.
    
    Fixes: 9b95236eebdb ("usb: gadget: ether: allocate and init otg descriptor by otg capabilities")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/YBKE9rqVuJEOUWpW@mwanda
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0a35823607a3f3228d81874206c2f3e97fcbcbb
Author: Wei Wang <weiwan@google.com>
Date:   Wed Oct 16 12:03:15 2019 -0700

    ipv4: fix race condition between route lookup and invalidation
    
    [ upstream commit 5018c59607a511cdee743b629c76206d9c9e6d7b ]
    
    Jesse and Ido reported the following race condition:
    <CPU A, t0> - Received packet A is forwarded and cached dst entry is
    taken from the nexthop ('nhc->nhc_rth_input'). Calls skb_dst_set()
    
    <t1> - Given Jesse has busy routers ("ingesting full BGP routing tables
    from multiple ISPs"), route is added / deleted and rt_cache_flush() is
    called
    
    <CPU B, t2> - Received packet B tries to use the same cached dst entry
    from t0, but rt_cache_valid() is no longer true and it is replaced in
    rt_cache_route() by the newer one. This calls dst_dev_put() on the
    original dst entry which assigns the blackhole netdev to 'dst->dev'
    
    <CPU A, t3> - dst_input(skb) is called on packet A and it is dropped due
    to 'dst->dev' being the blackhole netdev
    
    There are 2 issues in the v4 routing code:
    1. A per-netns counter is used to do the validation of the route. That
    means whenever a route is changed in the netns, users of all routes in
    the netns needs to redo lookup. v6 has an implementation of only
    updating fn_sernum for routes that are affected.
    2. When rt_cache_valid() returns false, rt_cache_route() is called to
    throw away the current cache, and create a new one. This seems
    unnecessary because as long as this route does not change, the route
    cache does not need to be recreated.
    
    To fully solve the above 2 issues, it probably needs quite some code
    changes and requires careful testing, and does not suite for net branch.
    
    So this patch only tries to add the deleted cached rt into the uncached
    list, so user could still be able to use it to receive packets until
    it's done.
    
    Fixes: 95c47f9cf5e0 ("ipv4: call dst_dev_put() properly")
    Signed-off-by: Wei Wang <weiwan@google.com>
    Reported-by: Ido Schimmel <idosch@idosch.org>
    Reported-by: Jesse Hathaway <jesse@mbuki-mvuki.org>
    Tested-by: Jesse Hathaway <jesse@mbuki-mvuki.org>
    Acked-by: Martin KaFai Lau <kafai@fb.com>
    Cc: David Ahern <dsahern@gmail.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Carsten Schmid <carsten_schmid@mentor.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 304b9b4fa3f5cf210f482f79ebc2e04a0d4d9289
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Dec 11 13:36:46 2020 -0800

    elfcore: fix building with clang
    
    commit 6e7b64b9dd6d96537d816ea07ec26b7dedd397b9 upstream.
    
    kernel/elfcore.c only contains weak symbols, which triggers a bug with
    clang in combination with recordmcount:
    
      Cannot find symbol for section 2: .text.
      kernel/elfcore.o: failed
    
    Move the empty stubs into linux/elfcore.h as inline functions.  As only
    two architectures use these, just use the architecture specific Kconfig
    symbols to key off the declaration.
    
    Link: https://lkml.kernel.org/r/20201204165742.3815221-2-arnd@kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Nathan Chancellor <natechancellor@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Barret Rhoden <brho@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 182adc33c91ff63c9bddb0d574e45f8d0edae6ff
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Wed Apr 1 13:23:27 2020 -0500

    objtool: Support Clang non-section symbols in ORC generation
    
    commit e81e0724432542af8d8c702c31e9d82f57b1ff31 upstream.
    
    When compiling the kernel with AS=clang, objtool produces a lot of
    warnings:
    
      warning: objtool: missing symbol for section .text
      warning: objtool: missing symbol for section .init.text
      warning: objtool: missing symbol for section .ref.text
    
    It then fails to generate the ORC table.
    
    The problem is that objtool assumes text section symbols always exist.
    But the Clang assembler is aggressive about removing them.
    
    When generating relocations for the ORC table, objtool always tries to
    reference instructions by their section symbol offset.  If the section
    symbol doesn't exist, it bails.
    
    Do a fallback: when a section symbol isn't available, reference a
    function symbol instead.
    
    Reported-by: Dmitry Golovin <dima@golovin.in>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://github.com/ClangBuiltLinux/linux/issues/669
    Link: https://lkml.kernel.org/r/9a9cae7fcf628843aabe5a086b1a3c5bf50f42e8.1585761021.git.jpoimboe@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 360196d239d6baccb2634f60d86d1c7c28a2ac54
Author: Xie He <xie.he.0141@gmail.com>
Date:   Sun Jan 31 21:57:06 2021 -0800

    net: lapb: Copy the skb before sending a packet
    
    [ Upstream commit 88c7a9fd9bdd3e453f04018920964c6f848a591a ]
    
    When sending a packet, we will prepend it with an LAPB header.
    This modifies the shared parts of a cloned skb, so we should copy the
    skb rather than just clone it, before we prepend the header.
    
    In "Documentation/networking/driver.rst" (the 2nd point), it states
    that drivers shouldn't modify the shared parts of a cloned skb when
    transmitting.
    
    The "dev_queue_xmit_nit" function in "net/core/dev.c", which is called
    when an skb is being sent, clones the skb and sents the clone to
    AF_PACKET sockets. Because the LAPB drivers first remove a 1-byte
    pseudo-header before handing over the skb to us, if we don't copy the
    skb before prepending the LAPB header, the first byte of the packets
    received on AF_PACKET sockets can be corrupted.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Link: https://lore.kernel.org/r/20210201055706.415842-1-xie.he.0141@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79c548411630e6915043b4bbb7f21f23029029e2
Author: Zyta Szpak <zr@semihalf.com>
Date:   Thu Jan 21 16:52:37 2021 +0100

    arm64: dts: ls1046a: fix dcfg address range
    
    [ Upstream commit aa880c6f3ee6dbd0d5ab02026a514ff8ea0a3328 ]
    
    Dcfg was overlapping with clockgen address space which resulted
    in failure in memory allocation for dcfg. According regs description
    dcfg size should not be bigger than 4KB.
    
    Signed-off-by: Zyta Szpak <zr@semihalf.com>
    Fixes: 8126d88162a5 ("arm64: dts: add QorIQ LS1046A SoC support")
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac2be5eae98b137c0cdc3d36f73b24e613e051c4
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Sun Jan 3 17:59:51 2021 -0800

    Input: i8042 - unbreak Pegatron C15B
    
    [ Upstream commit a3a9060ecad030e2c7903b2b258383d2c716b56c ]
    
    g++ reports
    
            drivers/input/serio/i8042-x86ia64io.h:225:3: error: ‘.matches’ designator used multiple times in the same initializer list
    
    C99 semantics is that last duplicated initialiser wins,
    so DMI entry gets overwritten.
    
    Fixes: a48491c65b51 ("Input: i8042 - add ByteSpeed touchpad to noloop table")
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Acked-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Link: https://lore.kernel.org/r/20201228072335.GA27766@localhost.localdomain
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d09c41453532a211db0483235f85272f040424b9
Author: Christoph Schemmel <christoph.schemmel@gmail.com>
Date:   Wed Jan 27 20:58:46 2021 +0100

    USB: serial: option: Adding support for Cinterion MV31
    
    commit e478d6029dca9d8462f426aee0d32896ef64f10f upstream.
    
    Adding support for Cinterion device MV31 for enumeration with
    PID 0x00B3 and 0x00B7.
    
    usb-devices output for 0x00B3
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  6 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00b3 Rev=04.14
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion PID 0x00B3 USB Mobile Broadband
    S:  SerialNumber=b3246eed
    C:  #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=cdc_wdm
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    usb-devices output for 0x00B7
    T:  Bus=04 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  1
    P:  Vendor=1e2d ProdID=00b7 Rev=04.14
    S:  Manufacturer=Cinterion
    S:  Product=Cinterion PID 0x00B3 USB Mobile Broadband
    S:  SerialNumber=b3246eed
    C:  #Ifs= 4 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    
    Signed-off-by: Christoph Schemmel <christoph.schemmel@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eadd9cb9924459db4634d54953b62c9c4da47b5
Author: Chenxin Jin <bg4akv@hotmail.com>
Date:   Wed Jan 13 16:59:05 2021 +0800

    USB: serial: cp210x: add new VID/PID for supporting Teraoka AD2000
    
    commit 43377df70480f82919032eb09832e9646a8a5efb upstream.
    
    Teraoka AD2000 uses the CP210x driver, but the chip VID/PID is
    customized with 0988/0578. We need the driver to support the new
    VID/PID.
    
    Signed-off-by: Chenxin Jin <bg4akv@hotmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c602ae15d8bc25da71c11442613ea7f41042f8e3
Author: Pho Tran <Pho.Tran@silabs.com>
Date:   Mon Jan 25 09:26:54 2021 +0000

    USB: serial: cp210x: add pid/vid for WSDA-200-USB
    
    commit 3c4f6ecd93442f4376a58b38bb40ee0b8c46e0e6 upstream.
    
    Information pid/vid of WSDA-200-USB, Lord corporation company:
    vid: 199b
    pid: ba30
    
    Signed-off-by: Pho Tran <pho.tran@silabs.com>
    [ johan: amend comment with product name ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80157374475d1821b72a50ee59e78d78b0dc2876
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Feb 7 14:47:41 2021 +0100

    Linux 4.14.220
    
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210205140649.733510103@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb6ae14b6d3da14f6e3110554e382f9bf377ded4
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Jan 12 11:24:04 2021 +0100

    kthread: Extract KTHREAD_IS_PER_CPU
    
    [ Upstream commit ac687e6e8c26181a33270efd1a2e2241377924b0 ]
    
    There is a need to distinguish geniune per-cpu kthreads from kthreads
    that happen to have a single CPU affinity.
    
    Geniune per-cpu kthreads are kthreads that are CPU affine for
    correctness, these will obviously have PF_KTHREAD set, but must also
    have PF_NO_SETAFFINITY set, lest userspace modify their affinity and
    ruins things.
    
    However, these two things are not sufficient, PF_NO_SETAFFINITY is
    also set on other tasks that have their affinities controlled through
    other means, like for instance workqueues.
    
    Therefore another bit is needed; it turns out kthread_create_per_cpu()
    already has such a bit: KTHREAD_IS_PER_CPU, which is used to make
    kthread_park()/kthread_unpark() work correctly.
    
    Expose this flag and remove the implicit setting of it from
    kthread_create_on_cpu(); the io_uring usage of it seems dubious at
    best.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Tested-by: Valentin Schneider <valentin.schneider@arm.com>
    Link: https://lkml.kernel.org/r/20210121103506.557620262@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 046cb2f32f456612b1aa87c3ad9950cd2f6441b3
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Jan 14 16:14:01 2021 -0600

    objtool: Don't fail on missing symbol table
    
    [ Upstream commit 1d489151e9f9d1647110277ff77282fe4d96d09b ]
    
    Thanks to a recent binutils change which doesn't generate unused
    symbols, it's now possible for thunk_64.o be completely empty without
    CONFIG_PREEMPTION: no text, no data, no symbols.
    
    We could edit the Makefile to only build that file when
    CONFIG_PREEMPTION is enabled, but that will likely create confusion
    if/when the thunks end up getting used by some other code again.
    
    Just ignore it and move on.
    
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Miroslav Benes <mbenes@suse.cz>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1254
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db4701518534b765b494923799d41ea7021f79dd
Author: Brian King <brking@linux.vnet.ibm.com>
Date:   Tue Jan 12 09:06:38 2021 -0600

    scsi: ibmvfc: Set default timeout to avoid crash during migration
    
    [ Upstream commit 764907293edc1af7ac857389af9dc858944f53dc ]
    
    While testing live partition mobility, we have observed occasional crashes
    of the Linux partition. What we've seen is that during the live migration,
    for specific configurations with large amounts of memory, slow network
    links, and workloads that are changing memory a lot, the partition can end
    up being suspended for 30 seconds or longer. This resulted in the following
    scenario:
    
    CPU 0                          CPU 1
    -------------------------------  ----------------------------------
    scsi_queue_rq                    migration_store
     -> blk_mq_start_request          -> rtas_ibm_suspend_me
      -> blk_add_timer                 -> on_each_cpu(rtas_percpu_suspend_me
                  _______________________________________V
                 |
                 V
        -> IPI from CPU 1
         -> rtas_percpu_suspend_me
                                         -> __rtas_suspend_last_cpu
    
    -- Linux partition suspended for > 30 seconds --
                                          -> for_each_online_cpu(cpu)
                                               plpar_hcall_norets(H_PROD
     -> scsi_dispatch_cmd
                                          -> scsi_times_out
                                           -> scsi_abort_command
                                            -> queue_delayed_work
      -> ibmvfc_queuecommand_lck
       -> ibmvfc_send_event
        -> ibmvfc_send_crq
         - returns H_CLOSED
       <- returns SCSI_MLQUEUE_HOST_BUSY
    -> __blk_mq_requeue_request
    
                                          -> scmd_eh_abort_handler
                                           -> scsi_try_to_abort_cmd
                                             - returns SUCCESS
                                           -> scsi_queue_insert
    
    Normally, the SCMD_STATE_COMPLETE bit would protect against the command
    completion and the timeout, but that doesn't work here, since we don't
    check that at all in the SCSI_MLQUEUE_HOST_BUSY path.
    
    In this case we end up calling scsi_queue_insert on a request that has
    already been queued, or possibly even freed, and we crash.
    
    The patch below simply increases the default I/O timeout to avoid this race
    condition. This is also the timeout value that nearly all IBM SAN storage
    recommends setting as the default value.
    
    Link: https://lore.kernel.org/r/1610463998-19791-1-git-send-email-brking@linux.vnet.ibm.com
    Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a94a51c756cef9b952f30f9177630300a82f80f3
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Dec 18 19:47:17 2020 +0100

    mac80211: fix fast-rx encryption check
    
    [ Upstream commit 622d3b4e39381262da7b18ca1ed1311df227de86 ]
    
    When using WEP, the default unicast key needs to be selected, instead of
    the STA PTK.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20201218184718.93650-5-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0dafda189ddfac22cbc2f8d5475f3af768abdfa
Author: Javed Hasan <jhasan@marvell.com>
Date:   Tue Dec 15 11:47:31 2020 -0800

    scsi: libfc: Avoid invoking response handler twice if ep is already completed
    
    [ Upstream commit b2b0f16fa65e910a3ec8771206bb49ee87a54ac5 ]
    
    A race condition exists between the response handler getting called because
    of exchange_mgr_reset() (which clears out all the active XIDs) and the
    response we get via an interrupt.
    
    Sequence of events:
    
             rport ba0200: Port timeout, state PLOGI
             rport ba0200: Port entered PLOGI state from PLOGI state
             xid 1052: Exchange timer armed : 20000 msecs      xid timer armed here
             rport ba0200: Received LOGO request while in state PLOGI
             rport ba0200: Delete port
             rport ba0200: work event 3
             rport ba0200: lld callback ev 3
             bnx2fc: rport_event_hdlr: event = 3, port_id = 0xba0200
             bnx2fc: ba0200 - rport not created Yet!!
             /* Here we reset any outstanding exchanges before
             freeing rport using the exch_mgr_reset() */
             xid 1052: Exchange timer canceled
             /* Here we got two responses for one xid */
             xid 1052: invoking resp(), esb 20000000 state 3
             xid 1052: invoking resp(), esb 20000000 state 3
             xid 1052: fc_rport_plogi_resp() : ep->resp_active 2
             xid 1052: fc_rport_plogi_resp() : ep->resp_active 2
    
    Skip the response if the exchange is already completed.
    
    Link: https://lore.kernel.org/r/20201215194731.2326-1-jhasan@marvell.com
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 745e63ca21de19b0238d38c550995dbada790aa3
Author: Martin Wilck <mwilck@suse.com>
Date:   Mon Jan 11 15:25:41 2021 +0100

    scsi: scsi_transport_srp: Don't block target in failfast state
    
    [ Upstream commit 72eeb7c7151302ef007f1acd018cbf6f30e50321 ]
    
    If the port is in SRP_RPORT_FAIL_FAST state when srp_reconnect_rport() is
    entered, a transition to SDEV_BLOCK would be illegal, and a kernel WARNING
    would be triggered. Skip scsi_target_block() in this case.
    
    Link: https://lore.kernel.org/r/20210111142541.21534-1-mwilck@suse.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd06a8c292b38324f69f789c40b8f1d4a9d9b560
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Jan 7 11:14:25 2021 +0100

    x86: __always_inline __{rd,wr}msr()
    
    [ Upstream commit 66a425011c61e71560c234492d204e83cfb73d1d ]
    
    When the compiler choses to not inline the trivial MSR helpers:
    
      vmlinux.o: warning: objtool: __sev_es_nmi_complete()+0xce: call to __wrmsr.constprop.14() leaves .noinstr.text section
    
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Link: https://lore.kernel.org/r/X/bf3gV+BW7kGEsB@hirez.programming.kicks-ass.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84fbaa97715fd6d7a75071172f6da92c71c4c1c8
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Dec 30 12:21:05 2020 +0200

    phy: cpcap-usb: Fix warning for missing regulator_disable
    
    [ Upstream commit 764257d9069a9c19758b626cc1ba4ae079335d9e ]
    
    On deferred probe, we will get the following splat:
    
    cpcap-usb-phy cpcap-usb-phy.0: could not initialize VBUS or ID IIO: -517
    WARNING: CPU: 0 PID: 21 at drivers/regulator/core.c:2123 regulator_put+0x68/0x78
    ...
    (regulator_put) from [<c068ebf0>] (release_nodes+0x1b4/0x1fc)
    (release_nodes) from [<c068a9a4>] (really_probe+0x104/0x4a0)
    (really_probe) from [<c068b034>] (driver_probe_device+0x58/0xb4)
    
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20201230102105.11826-1-tony@atomide.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7debd62b5a9edb39aa77b873c9700f4516f8c78e
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jan 15 19:30:51 2021 +0100

    driver core: Extend device_is_dependent()
    
    commit 3d1cf435e201d1fd63e4346b141881aed086effd upstream
    
    If the device passed as the target (second argument) to
    device_is_dependent() is not completely registered (that is, it has
    been initialized, but not added yet), but the parent pointer of it
    is set, it may be missing from the list of the parent's children
    and device_for_each_child() called by device_is_dependent() cannot
    be relied on to catch that dependency.
    
    For this reason, modify device_is_dependent() to check the ancestors
    of the target device by following its parent pointer in addition to
    the device_for_each_child() walk.
    
    Fixes: 9ed9895370ae ("driver core: Functional dependencies tracking support")
    Reported-by: Stephan Gerhold <stephan@gerhold.net>
    Tested-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Saravana Kannan <saravanak@google.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Link: https://lore.kernel.org/r/17705994.d592GUb2YH@kreacher
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ea996b0d75e6bbbfda5eddbb48a3b1d57d2a205
Author: Benjamin Gaignard <benjamin.gaignard@linaro.org>
Date:   Mon Jul 16 13:37:44 2018 +0200

    base: core: Remove WARN_ON from link dependencies check
    
    commit e16f4f3e0b7daecd48d4f944ab4147c1a6cb16a8 upstream
    
    In some cases the link between between customer and supplier
    already exist, for example when a device use its parent as a supplier.
    Do not warn about already existing dependencies because device_link_add()
    takes care of this case.
    
    Link: http://lkml.kernel.org/r/20180709111753eucas1p1f32e66fb2f7ea3216097cd72a132355d~-rzycA5Rg0378203782eucas1p1C@eucas1p1.samsung.com
    
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Benjamin Gaignard <benjamin.gaignard@st.com>
    Reviewed-by: Rafael J. Wysocki <rafael@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 573ced30e3b21aab55a10a4f8f2958bf98dd2f13
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 14 10:19:29 2021 -0800

    net_sched: gen_estimator: support large ewma log
    
    commit dd5e073381f2ada3630f36be42833c6e9c78b75e upstream
    
    syzbot report reminded us that very big ewma_log were supported in the past,
    even if they made litle sense.
    
    tc qdisc replace dev xxx root est 1sec 131072sec ...
    
    While fixing the bug, also add boundary checks for ewma_log, in line
    with range supported by iproute2.
    
    UBSAN: shift-out-of-bounds in net/core/gen_estimator.c:83:38
    shift exponent -1 is negative
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.10.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:395
     est_timer.cold+0xbb/0x12d net/core/gen_estimator.c:83
     call_timer_fn+0x1a5/0x710 kernel/time/timer.c:1417
     expire_timers kernel/time/timer.c:1462 [inline]
     __run_timers.part.0+0x692/0xa80 kernel/time/timer.c:1731
     __run_timers kernel/time/timer.c:1712 [inline]
     run_timer_softirq+0xb3/0x1d0 kernel/time/timer.c:1744
     __do_softirq+0x2bc/0xa77 kernel/softirq.c:343
     asm_call_irq_on_stack+0xf/0x20
     </IRQ>
     __run_on_irqstack arch/x86/include/asm/irq_stack.h:26 [inline]
     run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:77 [inline]
     do_softirq_own_stack+0xaa/0xd0 arch/x86/kernel/irq_64.c:77
     invoke_softirq kernel/softirq.c:226 [inline]
     __irq_exit_rcu+0x17f/0x200 kernel/softirq.c:420
     irq_exit_rcu+0x5/0x20 kernel/softirq.c:432
     sysvec_apic_timer_interrupt+0x4d/0x100 arch/x86/kernel/apic/apic.c:1096
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:628
    RIP: 0010:native_save_fl arch/x86/include/asm/irqflags.h:29 [inline]
    RIP: 0010:arch_local_save_flags arch/x86/include/asm/irqflags.h:79 [inline]
    RIP: 0010:arch_irqs_disabled arch/x86/include/asm/irqflags.h:169 [inline]
    RIP: 0010:acpi_safe_halt drivers/acpi/processor_idle.c:111 [inline]
    RIP: 0010:acpi_idle_do_entry+0x1c9/0x250 drivers/acpi/processor_idle.c:516
    
    Fixes: 1c0d32fde5bd ("net_sched: gen_estimator: complete rewrite of rate estimators")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20210114181929.1717985-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90674e35ac76961d25c4b22b3e6e2c78843cef9f
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 14 08:06:37 2021 -0800

    net_sched: reject silly cell_log in qdisc_get_rtab()
    
    commit e4bedf48aaa5552bc1f49703abd17606e7e6e82a upstream
    
    iproute2 probably never goes beyond 8 for the cell exponent,
    but stick to the max shift exponent for signed 32bit.
    
    UBSAN reported:
    UBSAN: shift-out-of-bounds in net/sched/sch_api.c:389:22
    shift exponent 130 is too large for 32-bit type 'int'
    CPU: 1 PID: 8450 Comm: syz-executor586 Not tainted 5.11.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x183/0x22e lib/dump_stack.c:120
     ubsan_epilogue lib/ubsan.c:148 [inline]
     __ubsan_handle_shift_out_of_bounds+0x432/0x4d0 lib/ubsan.c:395
     __detect_linklayer+0x2a9/0x330 net/sched/sch_api.c:389
     qdisc_get_rtab+0x2b5/0x410 net/sched/sch_api.c:435
     cbq_init+0x28f/0x12c0 net/sched/sch_cbq.c:1180
     qdisc_create+0x801/0x1470 net/sched/sch_api.c:1246
     tc_modify_qdisc+0x9e3/0x1fc0 net/sched/sch_api.c:1662
     rtnetlink_rcv_msg+0xb1d/0xe60 net/core/rtnetlink.c:5564
     netlink_rcv_skb+0x1f0/0x460 net/netlink/af_netlink.c:2494
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x7de/0x9b0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0xaa6/0xe90 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0x5a2/0x900 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x319/0x400 net/socket.c:2432
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Cong Wang <cong.wang@bytedance.com>
    Link: https://lore.kernel.org/r/20210114160637.1660597-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67590e7f456d615df1c64ad15c4d114295ed5189
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Jan 14 19:34:22 2021 +0100

    ACPI: thermal: Do not call acpi_thermal_check() directly
    
    commit 81b704d3e4674e09781d331df73d76675d5ad8cb upstream.
    
    Calling acpi_thermal_check() from acpi_thermal_notify() directly
    is problematic if _TMP triggers Notify () on the thermal zone for
    which it has been evaluated (which happens on some systems), because
    it causes a new acpi_thermal_notify() invocation to be queued up
    every time and if that takes place too often, an indefinite number of
    pending work items may accumulate in kacpi_notify_wq over time.
    
    Besides, it is not really useful to queue up a new invocation of
    acpi_thermal_check() if one of them is pending already.
    
    For these reasons, rework acpi_thermal_notify() to queue up a thermal
    check instead of calling acpi_thermal_check() directly and only allow
    one thermal check to be pending at a time.  Moreover, only allow one
    acpi_thermal_check_fn() instance at a time to run
    thermal_zone_device_update() for one thermal zone and make it return
    early if it sees other instances running for the same thermal zone.
    
    While at it, fold acpi_thermal_check() into acpi_thermal_check_fn(),
    as it is only called from there after the other changes made here.
    
    [This issue appears to have been exposed by commit 6d25be5782e4
     ("sched/core, workqueues: Distangle worker accounting from rq
     lock"), but it is unclear why it was not visible earlier.]
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=208877
    Reported-by: Stephen Berman <stephen.berman@gmx.net>
    Diagnosed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Tested-by: Stephen Berman <stephen.berman@gmx.net>
    Cc: All applicable <stable@vger.kernel.org>
    [bigeasy: Backported to v5.4.y]
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dad073557b13cbc7ad96d76d445ea65759aae42
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Wed Jan 27 19:34:42 2021 -0600

    ibmvnic: Ensure that CRQ entry read are correctly ordered
    
    commit e41aec79e62fa50f940cf222d1e9577f14e149dc upstream.
    
    Ensure that received Command-Response Queue (CRQ) entries are
    properly read in order by the driver. dma_rmb barrier has
    been added before accessing the CRQ descriptor to ensure
    the entire descriptor is read before processing.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20210128013442.88319-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9ff4596e7196607d939bc24a7894c51b26886b7
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 04:33:43 2021 -0800

    net: dsa: bcm_sf2: put device node before return
    
    commit cf3c46631e1637582f517a574c77cd6c05793817 upstream.
    
    Put the device node dn before return error code on failure path.
    
    Fixes: 461cd1b03e32 ("net: dsa: bcm_sf2: Register our slave MDIO bus")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/20210121123343.26330-1-bianpan2016@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bb5285b5994a6eabfc9743aa57df11a06650689
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Feb 3 23:22:23 2021 +0100

    Linux 4.14.219
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210202132942.138623851@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77af69448772f76893e5980cacb7a3a8079deec5
Author: Pengcheng Yang <yangpc@wangsu.com>
Date:   Sun Jan 24 13:07:14 2021 +0800

    tcp: fix TLP timer not set when CA_STATE changes from DISORDER to OPEN
    
    commit 62d9f1a6945ba69c125e548e72a36d203b30596e upstream.
    
    Upon receiving a cumulative ACK that changes the congestion state from
    Disorder to Open, the TLP timer is not set. If the sender is app-limited,
    it can only wait for the RTO timer to expire and retransmit.
    
    The reason for this is that the TLP timer is set before the congestion
    state changes in tcp_ack(), so we delay the time point of calling
    tcp_set_xmit_timer() until after tcp_fastretrans_alert() returns and
    remove the FLAG_SET_XMIT_TIMER from ack_flag when the RACK reorder timer
    is set.
    
    This commit has two additional benefits:
    1) Make sure to reset RTO according to RFC6298 when receiving ACK, to
    avoid spurious RTO caused by RTO timer early expires.
    2) Reduce the xmit timer reschedule once per ACK when the RACK reorder
    timer is set.
    
    Fixes: df92c8394e6e ("tcp: fix xmit timer to only be reset if data ACKed/SACKed")
    Link: https://lore.kernel.org/netdev/1611311242-6675-1-git-send-email-yangpc@wangsu.com
    Signed-off-by: Pengcheng Yang <yangpc@wangsu.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/1611464834-23030-1-git-send-email-yangpc@wangsu.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a44c93e26f6c726706a482c79646fddada9fd928
Author: Ivan Vecera <ivecera@redhat.com>
Date:   Mon Jan 25 08:44:16 2021 +0100

    team: protect features update by RCU to avoid deadlock
    
    commit f0947d0d21b219e03940b9be6628a43445c0de7a upstream.
    
    Function __team_compute_features() is protected by team->lock
    mutex when it is called from team_compute_features() used when
    features of an underlying device is changed. This causes
    a deadlock when NETDEV_FEAT_CHANGE notifier for underlying device
    is fired due to change propagated from team driver (e.g. MTU
    change). It's because callbacks like team_change_mtu() or
    team_vlan_rx_{add,del}_vid() protect their port list traversal
    by team->lock mutex.
    
    Example (r8169 case where this driver disables TSO for certain MTU
    values):
    ...
    [ 6391.348202]  __mutex_lock.isra.6+0x2d0/0x4a0
    [ 6391.358602]  team_device_event+0x9d/0x160 [team]
    [ 6391.363756]  notifier_call_chain+0x47/0x70
    [ 6391.368329]  netdev_update_features+0x56/0x60
    [ 6391.373207]  rtl8169_change_mtu+0x14/0x50 [r8169]
    [ 6391.378457]  dev_set_mtu_ext+0xe1/0x1d0
    [ 6391.387022]  dev_set_mtu+0x52/0x90
    [ 6391.390820]  team_change_mtu+0x64/0xf0 [team]
    [ 6391.395683]  dev_set_mtu_ext+0xe1/0x1d0
    [ 6391.399963]  do_setlink+0x231/0xf50
    ...
    
    In fact team_compute_features() called from team_device_event()
    does not need to be protected by team->lock mutex and rcu_read_lock()
    is sufficient there for port list traversal.
    
    Fixes: 3d249d4ca7d0 ("net: introduce ethernet teaming device")
    Cc: Saeed Mahameed <saeed@kernel.org>
    Signed-off-by: Ivan Vecera <ivecera@redhat.com>
    Reviewed-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Link: https://lore.kernel.org/r/20210125074416.4056484-1-ivecera@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cf9ac0da533061d79bf4ed6c13aa4bf1b49be3c
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 07:37:45 2021 -0800

    NFC: fix possible resource leak
    
    commit d8f923c3ab96dbbb4e3c22d1afc1dc1d3b195cd8 upstream.
    
    Put the device to avoid resource leak on path that the polling flag is
    invalid.
    
    Fixes: a831b9132065 ("NFC: Do not return EBUSY when stopping a poll that's already stopped")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/20210121153745.122184-1-bianpan2016@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 436a8b624f79675f2b15b3994e76bb6c97b1d095
Author: Pan Bian <bianpan2016@163.com>
Date:   Thu Jan 21 07:27:48 2021 -0800

    NFC: fix resource leak when target index is invalid
    
    commit 3a30537cee233fb7da302491b28c832247d89bbe upstream.
    
    Goto to the label put_dev instead of the label error to fix potential
    resource leak on path that the target index is invalid.
    
    Fixes: c4fbb6515a4d ("NFC: The core part should generate the target index")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Link: https://lore.kernel.org/r/20210121152748.98409-1-bianpan2016@163.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 060454983898380493ea9c0dfa0372391ed5f338
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Feb 2 01:04:45 2021 +0100

    iommu/vt-d: Don't dereference iommu_device if IOMMU_API is not built
    
    commit 9def3b1a07c41e21c68a0eb353e3e569fdd1d2b1 upstream.
    
    Since commit c40aaaac1018 ("iommu/vt-d: Gracefully handle DMAR units
    with no supported address widths") dmar.c needs struct iommu_device to
    be selected. We can drop this dependency by not dereferencing struct
    iommu_device if IOMMU_API is not selected and by reusing the information
    stored in iommu->drhd->ignored instead.
    
    This fixes the following build error when IOMMU_API is not selected:
    
    drivers/iommu/dmar.c: In function ‘free_iommu’:
    drivers/iommu/dmar.c:1139:41: error: ‘struct iommu_device’ has no member named ‘ops’
     1139 |  if (intel_iommu_enabled && iommu->iommu.ops) {
                                                    ^
    
    Fixes: c40aaaac1018 ("iommu/vt-d: Gracefully handle DMAR units with no supported address widths")
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Acked-by: David Woodhouse <dwmw@amazon.co.uk>
    Link: https://lore.kernel.org/r/20201013073055.11262-1-brgl@bgdev.pl
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    [ - context change due to moving drivers/iommu/dmar.c to
        drivers/iommu/intel/dmar.c
      - set the drhr in the iommu like in upstream commit b1012ca8dc4f
        ("iommu/vt-d: Skip TE disabling on quirky gfx dedicated iommu") ]
    Signed-off-by: Filippo Sironi <sironi@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5367b91963070c611406ecf8e41c3db20e2e03ff
Author: David Woodhouse <dwmw@amazon.co.uk>
Date:   Tue Feb 2 01:04:44 2021 +0100

    iommu/vt-d: Gracefully handle DMAR units with no supported address widths
    
    commit c40aaaac1018ff1382f2d35df5129a6bcea3df6b upstream.
    
    Instead of bailing out completely, such a unit can still be used for
    interrupt remapping.
    
    Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
    Reviewed-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/linux-iommu/549928db2de6532117f36c9c810373c14cf76f51.camel@infradead.org/
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    [ context change due to moving drivers/iommu/dmar.c to
      drivers/iommu/intel/dmar.c ]
    Signed-off-by: Filippo Sironi <sironi@amazon.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f04df99fea1a75dff6b6654bee22fa17d45a696b
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Jun 26 22:45:52 2018 -0700

    x86/entry/64/compat: Fix "x86/entry/64/compat: Preserve r8-r11 in int $0x80"
    
    commit 22cd978e598618e82c3c3348d2069184f6884182 upstream.
    
    Commit:
    
      8bb2610bc496 ("x86/entry/64/compat: Preserve r8-r11 in int $0x80")
    
    was busted: my original patch had a minor conflict with
    some of the nospec changes, but "git apply" is very clever
    and silently accepted the patch by making the same changes
    to a different function in the same file.  There was obviously
    a huge offset, but "git apply" for some reason doesn't feel
    any need to say so.
    
    Move the changes to the correct function.  Now the
    test_syscall_vdso_32 selftests passes.
    
    If anyone cares to observe the original problem, try applying the
    patch at:
    
      https://lore.kernel.org/lkml/d4c4d9985fbe64f8c9e19291886453914b48caee.1523975710.git.luto@kernel.org/raw
    
    to the kernel at 316d097c4cd4e7f2ef50c40cff2db266593c4ec4:
    
     - "git am" and "git apply" accept the patch without any complaints at all
     - "patch -p1" at least prints out a message about the huge offset.
    
    Reported-by: zhijianx.li@intel.com
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Arjan van de Ven <arjan@linux.intel.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Josh Poimboeuf <jpoimboe@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org #v4.17+
    Fixes: 8bb2610bc496 ("x86/entry/64/compat: Preserve r8-r11 in int $0x80")
    Link: http://lkml.kernel.org/r/6012b922485401bc42676e804171ded262fc2ef2.1530078306.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Alistair Delva <adelva@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7084621f8a950c08ed075342333f7e3b54c9cc85
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Apr 17 07:36:36 2018 -0700

    x86/entry/64/compat: Preserve r8-r11 in int $0x80
    
    commit 8bb2610bc4967f19672444a7b0407367f1540028 upstream.
    
    32-bit user code that uses int $80 doesn't care about r8-r11.  There is,
    however, some 64-bit user code that intentionally uses int $0x80 to invoke
    32-bit system calls.  From what I've seen, basically all such code assumes
    that r8-r15 are all preserved, but the kernel clobbers r8-r11.  Since I
    doubt that there's any code that depends on int $0x80 zeroing r8-r11,
    change the kernel to preserve them.
    
    I suspect that very little user code is broken by the old clobber, since
    r8-r11 are only rarely allocated by gcc, and they're clobbered by function
    calls, so they only way we'd see a problem is if the same function that
    invokes int $0x80 also spills something important to one of these
    registers.
    
    The current behavior seems to date back to the historical commit
    "[PATCH] x86-64 merge for 2.6.4".  Before that, all regs were
    preserved.  I can't find any explanation of why this change was made.
    
    Update the test_syscall_vdso_32 testcase as well to verify the new
    behavior, and it strengthens the test to make sure that the kernel doesn't
    accidentally permute r8..r15.
    
    Suggested-by: Denys Vlasenko <dvlasenk@redhat.com>
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dominik Brodowski <linux@dominikbrodowski.net>
    Link: https://lkml.kernel.org/r/d4c4d9985fbe64f8c9e19291886453914b48caee.1523975710.git.luto@kernel.org
    Signed-off-by: Alistair Delva <adelva@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 495d577697159878ddc4fb43af0cda636e060f75
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jan 21 09:08:05 2021 +0300

    can: dev: prevent potential information leak in can_fill_info()
    
    [ Upstream commit b552766c872f5b0d90323b24e4c9e8fa67486dd5 ]
    
    The "bec" struct isn't necessarily always initialized. For example, the
    mcp251xfd_get_berr_counter() function doesn't initialize anything if the
    interface is down.
    
    Fixes: 52c793f24054 ("can: netlink support for bus-error reporting and counters")
    Link: https://lore.kernel.org/r/YAkaRdRJncsJO8Ve@mwanda
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5e56228c9d057ebc6b4d3fbbe669dfe45cb7a2b
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 22 17:11:16 2021 +0100

    mac80211: pause TX while changing interface type
    
    [ Upstream commit 054c9939b4800a91475d8d89905827bf9e1ad97a ]
    
    syzbot reported a crash that happened when changing the interface
    type around a lot, and while it might have been easy to fix just
    the symptom there, a little deeper investigation found that really
    the reason is that we allowed packets to be transmitted while in
    the middle of changing the interface type.
    
    Disallow TX by stopping the queues while changing the type.
    
    Fixes: 34d4bc4d41d2 ("mac80211: support runtime interface type changes")
    Reported-by: syzbot+d7a3b15976bf7de2238a@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20210122171115.b321f98f4d4f.I6997841933c17b093535c31d29355be3c0c39628@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76cbefa7e6ab1b45d88fb27eb99a0b66b01846c0
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 15 13:05:58 2021 +0200

    iwlwifi: pcie: reschedule in long-running memory reads
    
    [ Upstream commit 3d372c4edfd4dffb7dea71c6b096fb414782b776 ]
    
    If we spin for a long time in memory reads that (for some reason in
    hardware) take a long time, then we'll eventually get messages such
    as
    
      watchdog: BUG: soft lockup - CPU#2 stuck for 24s! [kworker/2:2:272]
    
    This is because the reading really does take a very long time, and
    we don't schedule, so we're hogging the CPU with this task, at least
    if CONFIG_PREEMPT is not set, e.g. with CONFIG_PREEMPT_VOLUNTARY=y.
    
    Previously I misinterpreted the situation and thought that this was
    only going to happen if we had interrupts disabled, and then fixed
    this (which is good anyway, however), but that didn't always help;
    looking at it again now I realized that the spin unlock will only
    reschedule if CONFIG_PREEMPT is used.
    
    In order to avoid this issue, change the code to cond_resched() if
    we've been spinning for too long here.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Fixes: 04516706bb99 ("iwlwifi: pcie: limit memory read spin time")
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20210115130253.217a9d6a6a12.If964cb582ab0aaa94e81c4ff3b279eaafda0fd3f@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c32cc237f3e7b68f56749209efb4246e17a35ab
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Jan 15 13:05:57 2021 +0200

    iwlwifi: pcie: use jiffies for memory read spin time limit
    
    [ Upstream commit 6701317476bbfb1f341aa935ddf75eb73af784f9 ]
    
    There's no reason to use ktime_get() since we don't need any better
    precision than jiffies, and since we no longer disable interrupts
    around this code (when grabbing NIC access), jiffies will work fine.
    Use jiffies instead of ktime_get().
    
    This cleanup is preparation for the following patch "iwlwifi: pcie: reschedule
    in long-running memory reads". The code gets simpler with the weird clock use
    etc. removed before we add cond_resched().
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20210115130253.621c948b1fad.I3ee9f4bc4e74a0c9125d42fb7c35cd80df4698a1@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b44d9aa06ba49ede18ecb3dc4d517ac3d0b9bb88
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Thu Jan 14 21:14:23 2021 +0200

    RDMA/cxgb4: Fix the reported max_recv_sge value
    
    [ Upstream commit a372173bf314d374da4dd1155549d8ca7fc44709 ]
    
    The max_recv_sge value is wrongly reported when calling query_qp, This is
    happening due to a typo when assigning the max_recv_sge value, the value
    of sq_max_sges was assigned instead of rq_max_sges.
    
    Fixes: 3e5c02c9ef9a ("iw_cxgb4: Support query_qp() verb")
    Link: https://lore.kernel.org/r/20210114191423.423529-1-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Reviewed-by: Potnuri Bharat Teja <bharat@chelsio.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5af1a9f7d7c6c9c7399ecb3cff45ad2a976f5417
Author: Shmulik Ladkani <shmulik@metanetworks.com>
Date:   Mon Dec 14 15:38:32 2020 +0200

    xfrm: Fix oops in xfrm_replay_advance_bmp
    
    [ Upstream commit 56ce7c25ae1525d83cf80a880cf506ead1914250 ]
    
    When setting xfrm replay_window to values higher than 32, a rare
    page-fault occurs in xfrm_replay_advance_bmp:
    
      BUG: unable to handle page fault for address: ffff8af350ad7920
      #PF: supervisor write access in kernel mode
      #PF: error_code(0x0002) - not-present page
      PGD ad001067 P4D ad001067 PUD 0
      Oops: 0002 [#1] SMP PTI
      CPU: 3 PID: 30 Comm: ksoftirqd/3 Kdump: loaded Not tainted 5.4.52-050452-generic #202007160732
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-2.el7 04/01/2014
      RIP: 0010:xfrm_replay_advance_bmp+0xbb/0x130
      RSP: 0018:ffffa1304013ba40 EFLAGS: 00010206
      RAX: 000000000000010d RBX: 0000000000000002 RCX: 00000000ffffff4b
      RDX: 0000000000000018 RSI: 00000000004c234c RDI: 00000000ffb3dbff
      RBP: ffffa1304013ba50 R08: ffff8af330ad7920 R09: 0000000007fffffa
      R10: 0000000000000800 R11: 0000000000000010 R12: ffff8af29d6258c0
      R13: ffff8af28b95c700 R14: 0000000000000000 R15: ffff8af29d6258fc
      FS:  0000000000000000(0000) GS:ffff8af339ac0000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: ffff8af350ad7920 CR3: 0000000015ee4000 CR4: 00000000001406e0
      Call Trace:
       xfrm_input+0x4e5/0xa10
       xfrm4_rcv_encap+0xb5/0xe0
       xfrm4_udp_encap_rcv+0x140/0x1c0
    
    Analysis revealed offending code is when accessing:
    
            replay_esn->bmp[nr] |= (1U << bitnr);
    
    with 'nr' being 0x07fffffa.
    
    This happened in an SMP system when reordering of packets was present;
    A packet arrived with a "too old" sequence number (outside the window,
    i.e 'diff > replay_window'), and therefore the following calculation:
    
                            bitnr = replay_esn->replay_window - (diff - pos);
    
    yields a negative result, but since bitnr is u32 we get a large unsigned
    quantity (in crash dump above: 0xffffff4b seen in ecx).
    
    This was supposed to be protected by xfrm_input()'s former call to:
    
                    if (x->repl->check(x, skb, seq)) {
    
    However, the state's spinlock x->lock is *released* after '->check()'
    is performed, and gets re-acquired before '->advance()' - which gives a
    chance for a different core to update the xfrm state, e.g. by advancing
    'replay_esn->seq' when it encounters more packets - leading to a
    'diff > replay_window' situation when original core continues to
    xfrm_replay_advance_bmp().
    
    An attempt to fix this issue was suggested in commit bcf66bf54aab
    ("xfrm: Perform a replay check after return from async codepaths"),
    by calling 'x->repl->recheck()' after lock is re-acquired, but fix
    applied only to asyncronous crypto algorithms.
    
    Augment the fix, by *always* calling 'recheck()' - irrespective if we're
    using async crypto.
    
    Fixes: 0ebea8ef3559 ("[IPSEC]: Move state lock into x->type->input")
    Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d536096a7263580cd629621bcb2de756a44e7efd
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sat Jan 16 19:20:15 2021 +0100

    netfilter: nft_dynset: add timeout extension to template
    
    commit 0c5b7a501e7400869ee905b4f7af3d6717802bcb upstream.
    
    Otherwise, the newly create element shows no timeout when listing the
    ruleset. If the set definition does not specify a default timeout, then
    the set element only shows the expiration time, but not the timeout.
    This is a problem when restoring a stateful ruleset listing since it
    skips the timeout policy entirely.
    
    Fixes: 22fe54d5fefc ("netfilter: nf_tables: add support for dynamic set updates")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e115fe9bc6613b15d8949265eed06a2e6ce9a69
Author: Max Krummenacher <max.oss.09@gmail.com>
Date:   Mon Jan 11 16:17:04 2021 +0100

    ARM: imx: build suspend-imx6.S with arm instruction set
    
    commit a88afa46b86ff461c89cc33fc3a45267fff053e8 upstream.
    
    When the kernel is configured to use the Thumb-2 instruction set
    "suspend-to-memory" fails to resume. Observed on a Colibri iMX6ULL
    (i.MX 6ULL) and Apalis iMX6 (i.MX 6Q).
    
    It looks like the CPU resumes unconditionally in ARM instruction mode
    and then chokes on the presented Thumb-2 code it should execute.
    
    Fix this by using the arm instruction set for all code in
    suspend-imx6.S.
    
    Signed-off-by: Max Krummenacher <max.krummenacher@toradex.com>
    Fixes: df595746fa69 ("ARM: imx: add suspend in ocram support for i.mx6q")
    Acked-by: Oleksandr Suvorov <oleksandr.suvorov@toradex.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85d79f4c5cc9bfd3bfd073f2e061af38a56dfe19
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Tue Jan 19 11:57:27 2021 +0100

    xen-blkfront: allow discard-* nodes to be optional
    
    commit 0549cd67b01016b579047bce045b386202a8bcfc upstream.
    
    This is inline with the specification described in blkif.h:
    
     * discard-granularity: should be set to the physical block size if
       node is not present.
     * discard-alignment, discard-secure: should be set to 0 if node not
       present.
    
    This was detected as QEMU would only create the discard-granularity
    node but not discard-alignment, and thus the setup done in
    blkfront_setup_discard would fail.
    
    Fix blkfront_setup_discard to not fail on missing nodes, and also fix
    blkif_set_queue_limits to set the discard granularity to the physical
    block size if none is specified in xenbus.
    
    Fixes: ed30bf317c5ce ('xen-blkfront: Handle discard requests.')
    Reported-by: Arthur Borsboom <arthurborsboom@gmail.com>
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Tested-By: Arthur Borsboom <arthurborsboom@gmail.com>
    Link: https://lore.kernel.org/r/20210119105727.95173-1-roger.pau@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ad847911f4b420f8488057faf453ee9ab03e75f
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Thu Jan 14 18:10:52 2021 +0100

    mt7601u: fix rx buffer refcounting
    
    commit d24c790577ef01bfa01da2b131313a38c843a634 upstream.
    
    Fix the following crash due to erroneous page refcounting:
    
    [   32.445919] BUG: Bad page state in process swapper/1  pfn:11f65a
    [   32.447409] page:00000000938f0632 refcount:0 mapcount:-128 mapping:0000000000000000 index:0x0 pfn:0x11f65a
    [   32.449605] flags: 0x8000000000000000()
    [   32.450421] raw: 8000000000000000 ffffffff825b0148 ffffea00045ae988 0000000000000000
    [   32.451795] raw: 0000000000000000 0000000000000001 00000000ffffff7f 0000000000000000
    [   32.452999] page dumped because: nonzero mapcount
    [   32.453888] Modules linked in:
    [   32.454492] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.11.0-rc2+ #1976
    [   32.455695] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-1.fc33 04/01/2014
    [   32.457157] Call Trace:
    [   32.457636]  <IRQ>
    [   32.457993]  dump_stack+0x77/0x97
    [   32.458576]  bad_page.cold+0x65/0x96
    [   32.459198]  get_page_from_freelist+0x46a/0x11f0
    [   32.460008]  __alloc_pages_nodemask+0x10a/0x2b0
    [   32.460794]  mt7601u_rx_tasklet+0x651/0x720
    [   32.461505]  tasklet_action_common.constprop.0+0x6b/0xd0
    [   32.462343]  __do_softirq+0x152/0x46c
    [   32.462928]  asm_call_irq_on_stack+0x12/0x20
    [   32.463610]  </IRQ>
    [   32.463953]  do_softirq_own_stack+0x5b/0x70
    [   32.464582]  irq_exit_rcu+0x9f/0xe0
    [   32.465028]  common_interrupt+0xae/0x1a0
    [   32.465536]  asm_common_interrupt+0x1e/0x40
    [   32.466071] RIP: 0010:default_idle+0x18/0x20
    [   32.468981] RSP: 0018:ffffc90000077f00 EFLAGS: 00000246
    [   32.469648] RAX: 0000000000000000 RBX: 0000000000000001 RCX: 0000000000000000
    [   32.470550] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff81aac3dd
    [   32.471463] RBP: ffff88810022ab00 R08: 0000000000000001 R09: 0000000000000001
    [   32.472335] R10: 0000000000000046 R11: 0000000000005aa0 R12: 0000000000000000
    [   32.473235] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    [   32.474139]  ? default_idle_call+0x4d/0x200
    [   32.474681]  default_idle_call+0x74/0x200
    [   32.475192]  do_idle+0x1d5/0x250
    [   32.475612]  cpu_startup_entry+0x19/0x20
    [   32.476114]  secondary_startup_64_no_verify+0xb0/0xbb
    [   32.476765] Disabling lock debugging due to kernel taint
    
    Fixes: c869f77d6abb ("add mt7601u driver")
    Co-developed-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Acked-by: Jakub Kicinski <kubakici@wp.pl>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/62b2380c8c2091834cfad05e1059b55f945bd114.1610643952.git.lorenzo@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a3eb35e298de5f69e39874fc27b630026cf0f5e
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Sun Jan 17 22:46:01 2021 +0100

    mt7601u: fix kernel crash unplugging the device
    
    commit 0acb20a5438c36e0cf2b8bf255f314b59fcca6ef upstream.
    
    The following crash log can occur unplugging the usb dongle since,
    after the urb poison in mt7601u_free_tx_queue(), usb_submit_urb() will
    always fail resulting in a skb kfree while the skb has been already
    queued.
    
    Fix the issue enqueuing the skb only if usb_submit_urb() succeed.
    
    Hardware name: Hewlett-Packard 500-539ng/2B2C, BIOS 80.06 04/01/2015
    Workqueue: usb_hub_wq hub_event
    RIP: 0010:skb_trim+0x2c/0x30
    RSP: 0000:ffffb4c88005bba8 EFLAGS: 00010206
    RAX: 000000004ad483ee RBX: ffff9a236625dee0 RCX: 000000000000662f
    RDX: 000000000000000c RSI: 0000000000000000 RDI: ffff9a2343179300
    RBP: ffff9a2343179300 R08: 0000000000000001 R09: 0000000000000000
    R10: ffff9a23748f7840 R11: 0000000000000001 R12: ffff9a236625e4d4
    R13: ffff9a236625dee0 R14: 0000000000001080 R15: 0000000000000008
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007fd410a34ef8 CR3: 00000001416ee001 CR4: 00000000001706f0
    Call Trace:
     mt7601u_tx_status+0x3e/0xa0 [mt7601u]
     mt7601u_dma_cleanup+0xca/0x110 [mt7601u]
     mt7601u_cleanup+0x22/0x30 [mt7601u]
     mt7601u_disconnect+0x22/0x60 [mt7601u]
     usb_unbind_interface+0x8a/0x270
     ? kernfs_find_ns+0x35/0xd0
     __device_release_driver+0x17a/0x230
     device_release_driver+0x24/0x30
     bus_remove_device+0xdb/0x140
     device_del+0x18b/0x430
     ? kobject_put+0x98/0x1d0
     usb_disable_device+0xc6/0x1f0
     usb_disconnect.cold+0x7e/0x20a
     hub_event+0xbf3/0x1870
     process_one_work+0x1b6/0x350
     worker_thread+0x53/0x3e0
     ? process_one_work+0x350/0x350
     kthread+0x11b/0x140
     ? __kthread_bind_mask+0x60/0x60
     ret_from_fork+0x22/0x30
    
    Fixes: 23377c200b2eb ("mt7601u: fix possible memory leak when the device is disconnected")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Acked-by: Jakub Kicinski <kubakici@wp.pl>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/3b85219f669a63a8ced1f43686de05915a580489.1610919247.git.lorenzo@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3d08b331b14d7cb3f2e678eaea10562d1012a6d
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Wed Nov 25 16:18:22 2020 +0100

    leds: trigger: fix potential deadlock with libata
    
    commit 27af8e2c90fba242460b01fa020e6e19ed68c495 upstream.
    
    We have the following potential deadlock condition:
    
     ========================================================
     WARNING: possible irq lock inversion dependency detected
     5.10.0-rc2+ #25 Not tainted
     --------------------------------------------------------
     swapper/3/0 just changed the state of lock:
     ffff8880063bd618 (&host->lock){-...}-{2:2}, at: ata_bmdma_interrupt+0x27/0x200
     but this lock took another, HARDIRQ-READ-unsafe lock in the past:
      (&trig->leddev_list_lock){.+.?}-{2:2}
    
     and interrupts could create inverse lock ordering between them.
    
     other info that might help us debug this:
      Possible interrupt unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(&trig->leddev_list_lock);
                                    local_irq_disable();
                                    lock(&host->lock);
                                    lock(&trig->leddev_list_lock);
       <Interrupt>
         lock(&host->lock);
    
      *** DEADLOCK ***
    
     no locks held by swapper/3/0.
    
     the shortest dependencies between 2nd lock and 1st lock:
      -> (&trig->leddev_list_lock){.+.?}-{2:2} ops: 46 {
         HARDIRQ-ON-R at:
                           lock_acquire+0x15f/0x420
                           _raw_read_lock+0x42/0x90
                           led_trigger_event+0x2b/0x70
                           rfkill_global_led_trigger_worker+0x94/0xb0
                           process_one_work+0x240/0x560
                           worker_thread+0x58/0x3d0
                           kthread+0x151/0x170
                           ret_from_fork+0x1f/0x30
         IN-SOFTIRQ-R at:
                           lock_acquire+0x15f/0x420
                           _raw_read_lock+0x42/0x90
                           led_trigger_event+0x2b/0x70
                           kbd_bh+0x9e/0xc0
                           tasklet_action_common.constprop.0+0xe9/0x100
                           tasklet_action+0x22/0x30
                           __do_softirq+0xcc/0x46d
                           run_ksoftirqd+0x3f/0x70
                           smpboot_thread_fn+0x116/0x1f0
                           kthread+0x151/0x170
                           ret_from_fork+0x1f/0x30
         SOFTIRQ-ON-R at:
                           lock_acquire+0x15f/0x420
                           _raw_read_lock+0x42/0x90
                           led_trigger_event+0x2b/0x70
                           rfkill_global_led_trigger_worker+0x94/0xb0
                           process_one_work+0x240/0x560
                           worker_thread+0x58/0x3d0
                           kthread+0x151/0x170
                           ret_from_fork+0x1f/0x30
         INITIAL READ USE at:
                               lock_acquire+0x15f/0x420
                               _raw_read_lock+0x42/0x90
                               led_trigger_event+0x2b/0x70
                               rfkill_global_led_trigger_worker+0x94/0xb0
                               process_one_work+0x240/0x560
                               worker_thread+0x58/0x3d0
                               kthread+0x151/0x170
                               ret_from_fork+0x1f/0x30
       }
       ... key      at: [<ffffffff83da4c00>] __key.0+0x0/0x10
       ... acquired at:
        _raw_read_lock+0x42/0x90
        led_trigger_blink_oneshot+0x3b/0x90
        ledtrig_disk_activity+0x3c/0xa0
        ata_qc_complete+0x26/0x450
        ata_do_link_abort+0xa3/0xe0
        ata_port_freeze+0x2e/0x40
        ata_hsm_qc_complete+0x94/0xa0
        ata_sff_hsm_move+0x177/0x7a0
        ata_sff_pio_task+0xc7/0x1b0
        process_one_work+0x240/0x560
        worker_thread+0x58/0x3d0
        kthread+0x151/0x170
        ret_from_fork+0x1f/0x30
    
     -> (&host->lock){-...}-{2:2} ops: 69 {
        IN-HARDIRQ-W at:
                         lock_acquire+0x15f/0x420
                         _raw_spin_lock_irqsave+0x52/0xa0
                         ata_bmdma_interrupt+0x27/0x200
                         __handle_irq_event_percpu+0xd5/0x2b0
                         handle_irq_event+0x57/0xb0
                         handle_edge_irq+0x8c/0x230
                         asm_call_irq_on_stack+0xf/0x20
                         common_interrupt+0x100/0x1c0
                         asm_common_interrupt+0x1e/0x40
                         native_safe_halt+0xe/0x10
                         arch_cpu_idle+0x15/0x20
                         default_idle_call+0x59/0x1c0
                         do_idle+0x22c/0x2c0
                         cpu_startup_entry+0x20/0x30
                         start_secondary+0x11d/0x150
                         secondary_startup_64_no_verify+0xa6/0xab
        INITIAL USE at:
                        lock_acquire+0x15f/0x420
                        _raw_spin_lock_irqsave+0x52/0xa0
                        ata_dev_init+0x54/0xe0
                        ata_link_init+0x8b/0xd0
                        ata_port_alloc+0x1f1/0x210
                        ata_host_alloc+0xf1/0x130
                        ata_host_alloc_pinfo+0x14/0xb0
                        ata_pci_sff_prepare_host+0x41/0xa0
                        ata_pci_bmdma_prepare_host+0x14/0x30
                        piix_init_one+0x21f/0x600
                        local_pci_probe+0x48/0x80
                        pci_device_probe+0x105/0x1c0
                        really_probe+0x221/0x490
                        driver_probe_device+0xe9/0x160
                        device_driver_attach+0xb2/0xc0
                        __driver_attach+0x91/0x150
                        bus_for_each_dev+0x81/0xc0
                        driver_attach+0x1e/0x20
                        bus_add_driver+0x138/0x1f0
                        driver_register+0x91/0xf0
                        __pci_register_driver+0x73/0x80
                        piix_init+0x1e/0x2e
                        do_one_initcall+0x5f/0x2d0
                        kernel_init_freeable+0x26f/0x2cf
                        kernel_init+0xe/0x113
                        ret_from_fork+0x1f/0x30
      }
      ... key      at: [<ffffffff83d9fdc0>] __key.6+0x0/0x10
      ... acquired at:
        __lock_acquire+0x9da/0x2370
        lock_acquire+0x15f/0x420
        _raw_spin_lock_irqsave+0x52/0xa0
        ata_bmdma_interrupt+0x27/0x200
        __handle_irq_event_percpu+0xd5/0x2b0
        handle_irq_event+0x57/0xb0
        handle_edge_irq+0x8c/0x230
        asm_call_irq_on_stack+0xf/0x20
        common_interrupt+0x100/0x1c0
        asm_common_interrupt+0x1e/0x40
        native_safe_halt+0xe/0x10
        arch_cpu_idle+0x15/0x20
        default_idle_call+0x59/0x1c0
        do_idle+0x22c/0x2c0
        cpu_startup_entry+0x20/0x30
        start_secondary+0x11d/0x150
        secondary_startup_64_no_verify+0xa6/0xab
    
    This lockdep splat is reported after:
    commit e918188611f0 ("locking: More accurate annotations for read_lock()")
    
    To clarify:
     - read-locks are recursive only in interrupt context (when
       in_interrupt() returns true)
     - after acquiring host->lock in CPU1, another cpu (i.e. CPU2) may call
       write_lock(&trig->leddev_list_lock) that would be blocked by CPU0
       that holds trig->leddev_list_lock in read-mode
     - when CPU1 (ata_ac_complete()) tries to read-lock
       trig->leddev_list_lock, it would be blocked by the write-lock waiter
       on CPU2 (because we are not in interrupt context, so the read-lock is
       not recursive)
     - at this point if an interrupt happens on CPU0 and
       ata_bmdma_interrupt() is executed it will try to acquire host->lock,
       that is held by CPU1, that is currently blocked by CPU2, so:
    
       * CPU0 blocked by CPU1
       * CPU1 blocked by CPU2
       * CPU2 blocked by CPU0
    
         *** DEADLOCK ***
    
    The deadlock scenario is better represented by the following schema
    (thanks to Boqun Feng <boqun.feng@gmail.com> for the schema and the
    detailed explanation of the deadlock condition):
    
     CPU 0:                          CPU 1:                        CPU 2:
     -----                           -----                         -----
     led_trigger_event():
       read_lock(&trig->leddev_list_lock);
                                    <workqueue>
                                    ata_hsm_qc_complete():
                                      spin_lock_irqsave(&host->lock);
                                                                    write_lock(&trig->leddev_list_lock);
                                      ata_port_freeze():
                                        ata_do_link_abort():
                                          ata_qc_complete():
                                            ledtrig_disk_activity():
                                              led_trigger_blink_oneshot():
                                                read_lock(&trig->leddev_list_lock);
                                                // ^ not in in_interrupt() context, so could get blocked by CPU 2
     <interrupt>
       ata_bmdma_interrupt():
         spin_lock_irqsave(&host->lock);
    
    Fix by using read_lock_irqsave/irqrestore() in led_trigger_event(), so
    that no interrupt can happen in between, preventing the deadlock
    condition.
    
    Apply the same change to led_trigger_blink_setup() as well, since the
    same deadlock scenario can also happen in power_supply_update_bat_leds()
    -> led_trigger_blink() -> led_trigger_blink_setup() (workqueue context),
    and potentially prevent other similar usages.
    
    Link: https://lore.kernel.org/lkml/20201101092614.GB3989@xps-13-7390/
    Fixes: eb25cb9956cc ("leds: convert IDE trigger to common disk trigger")
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce624f6db4033889f072d3f0db5fe5b2d9dbed0f
Author: David Woodhouse <dwmw@amazon.co.uk>
Date:   Tue Jan 26 17:01:49 2021 +0000

    xen: Fix XenStore initialisation for XS_LOCAL
    
    commit 5f46400f7a6a4fad635d5a79e2aa5a04a30ffea1 upstream.
    
    In commit 3499ba8198ca ("xen: Fix event channel callback via INTX/GSI")
    I reworked the triggering of xenbus_probe().
    
    I tried to simplify things by taking out the workqueue based startup
    triggered from wake_waiting(); the somewhat poorly named xenbus IRQ
    handler.
    
    I missed the fact that in the XS_LOCAL case (Dom0 starting its own
    xenstored or xenstore-stubdom, which happens after the kernel is booted
    completely), that IRQ-based trigger is still actually needed.
    
    So... put it back, except more cleanly. By just spawning a xenbus_probe
    thread which waits on xb_waitq and runs the probe the first time it
    gets woken, just as the workqueue-based hack did.
    
    This is actually a nicer approach for *all* the back ends with different
    interrupt methods, and we can switch them all over to that without the
    complex conditions for when to trigger it. But not in -rc6. This is
    the minimal fix for the regression, although it's a step in the right
    direction instead of doing a partial revert and actually putting the
    workqueue back. It's also simpler than the workqueue.
    
    Fixes: 3499ba8198ca ("xen: Fix event channel callback via INTX/GSI")
    Reported-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/4c9af052a6e0f6485d1de43f2c38b1461996db99.camel@infradead.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Cc: Jason Andryuk <jandryuk@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20733921bca0cbec1e649a439c18600b8e0f4a8c
Author: Jay Zhou <jianjay.zhou@huawei.com>
Date:   Mon Jan 18 16:47:20 2021 +0800

    KVM: x86: get smi pending status correctly
    
    commit 1f7becf1b7e21794fc9d460765fe09679bc9b9e0 upstream.
    
    The injection process of smi has two steps:
    
        Qemu                        KVM
    Step1:
        cpu->interrupt_request &= \
            ~CPU_INTERRUPT_SMI;
        kvm_vcpu_ioctl(cpu, KVM_SMI)
    
                                    call kvm_vcpu_ioctl_smi() and
                                    kvm_make_request(KVM_REQ_SMI, vcpu);
    
    Step2:
        kvm_vcpu_ioctl(cpu, KVM_RUN, 0)
    
                                    call process_smi() if
                                    kvm_check_request(KVM_REQ_SMI, vcpu) is
                                    true, mark vcpu->arch.smi_pending = true;
    
    The vcpu->arch.smi_pending will be set true in step2, unfortunately if
    vcpu paused between step1 and step2, the kvm_run->immediate_exit will be
    set and vcpu has to exit to Qemu immediately during step2 before mark
    vcpu->arch.smi_pending true.
    During VM migration, Qemu will get the smi pending status from KVM using
    KVM_GET_VCPU_EVENTS ioctl at the downtime, then the smi pending status
    will be lost.
    
    Signed-off-by: Jay Zhou <jianjay.zhou@huawei.com>
    Signed-off-by: Shengen Zhuang <zhuangshengen@huawei.com>
    Message-Id: <20210118084720.1585-1-jianjay.zhou@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da321609336f431d915d75ee03c3a8079ac51061
Author: Like Xu <like.xu@linux.intel.com>
Date:   Wed Dec 30 16:19:16 2020 +0800

    KVM: x86/pmu: Fix HW_REF_CPU_CYCLES event pseudo-encoding in intel_arch_events[]
    
    commit 98dd2f108e448988d91e296173e773b06fb978b8 upstream.
    
    The HW_REF_CPU_CYCLES event on the fixed counter 2 is pseudo-encoded as
    0x0300 in the intel_perfmon_event_map[]. Correct its usage.
    
    Fixes: 62079d8a4312 ("KVM: PMU: add proper support for fixed counter 2")
    Signed-off-by: Like Xu <like.xu@linux.intel.com>
    Message-Id: <20201230081916.63417-1-like.xu@linux.intel.com>
    Reviewed-by: Sean Christopherson <seanjc@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 02ae89319db41149b34f9a7dad05df002d9e63bc
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Fri Jan 22 14:21:34 2021 +0200

    drivers: soc: atmel: add null entry at the end of at91_soc_allowed_list[]
    
    commit 680896556805d3ad3fa47f6002b87b3041a45ac2 upstream.
    
    of_match_node() calls __of_match_node() which loops though the entries of
    matches array. It stops when condition:
    (matches->name[0] || matches->type[0] || matches->compatible[0]) is
    false. Thus, add a null entry at the end of at91_soc_allowed_list[]
    array.
    
    Fixes: caab13b49604 ("drivers: soc: atmel: Avoid calling at91_soc_init on non AT91 SoCs")
    Cc: stable@vger.kernel.org #4.12+
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c052c0f35d130bf713b65f4364b45a15feeda299
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Dec 11 13:58:46 2020 +0000

    drivers: soc: atmel: Avoid calling at91_soc_init on non AT91 SoCs
    
    commit caab13b4960416b9fee83169a758eb0f31e65109 upstream.
    
    Since at91_soc_init is called unconditionally from atmel_soc_device_init,
    we get the following warning on all non AT91 SoCs:
            " AT91: Could not find identification node"
    
    Fix the same by filtering with allowed AT91 SoC list.
    
    Cc: Nicolas Ferre <nicolas.ferre@microchip.com>
    Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: Ludovic Desroches <ludovic.desroches@microchip.com>
    Cc: stable@vger.kernel.org #4.12+
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20201211135846.1334322-1-sudeep.holla@arm.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a34ac972bb83144a4ab49e7f8888a16cbad2b931
Author: Giacinto Cifelli <gciofono@gmail.com>
Date:   Wed Jan 20 05:56:50 2021 +0100

    net: usb: qmi_wwan: added support for Thales Cinterion PLSx3 modem family
    
    commit 7e0e63d09516e96994c879f07c5a3c3269d7015e upstream.
    
    Bus 003 Device 009: ID 1e2d:006f
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass          239 Miscellaneous Device
      bDeviceSubClass         2 ?
      bDeviceProtocol         1 Interface Association
      bMaxPacketSize0        64
      idVendor           0x1e2d
      idProduct          0x006f
      bcdDevice            0.00
      iManufacturer           3 Cinterion Wireless Modules
      iProduct                2 PLSx3
      iSerial                 4 fa3c1419
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength          303
        bNumInterfaces          9
        bConfigurationValue     1
        iConfiguration          1 Cinterion Configuration
        bmAttributes         0xe0
          Self Powered
          Remote Wakeup
        MaxPower              500mA
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         0
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          1
          CDC Union:
            bMasterInterface        0
            bSlaveInterface         1
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         2
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          3
          CDC Union:
            bMasterInterface        2
            bSlaveInterface         3
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         4
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          5
          CDC Union:
            bMasterInterface        4
            bSlaveInterface         5
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         6
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          7
          CDC Union:
            bMasterInterface        6
            bSlaveInterface         7
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        7
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x88  EP 8 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        8
          bAlternateSetting       0
          bNumEndpoints           3
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol    255 Vendor Specific Protocol
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x89  EP 9 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x8a  EP 10 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x05  EP 5 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
    Device Qualifier (for other device speed):
      bLength                10
      bDescriptorType         6
      bcdUSB               2.00
      bDeviceClass          239 Miscellaneous Device
      bDeviceSubClass         2 ?
      bDeviceProtocol         1 Interface Association
      bMaxPacketSize0        64
      bNumConfigurations      1
    Device Status:     0x0000
      (Bus Powered)
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Giacinto Cifelli <gciofono@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20210120045650.10855-1-gciofono@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b28ee90cb04152e9d98a4653d8a80323a6d70c19
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Jan 21 17:16:22 2021 +0100

    wext: fix NULL-ptr-dereference with cfg80211's lack of commit()
    
    commit 5122565188bae59d507d90a9a9fd2fd6107f4439 upstream.
    
    Since cfg80211 doesn't implement commit, we never really cared about
    that code there (and it's configured out w/o CONFIG_WIRELESS_EXT).
    After all, since it has no commit, it shouldn't return -EIWCOMMIT to
    indicate commit is needed.
    
    However, EIWCOMMIT is actually an alias for EINPROGRESS, which _can_
    happen if e.g. we try to change the frequency but we're already in
    the process of connecting to some network, and drivers could return
    that value (or even cfg80211 itself might).
    
    This then causes us to crash because dev->wireless_handlers is NULL
    but we try to check dev->wireless_handlers->standard[0].
    
    Fix this by also checking dev->wireless_handlers. Also simplify the
    code a little bit.
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+444248c79e117bc99f46@syzkaller.appspotmail.com
    Reported-by: syzbot+8b2a88a09653d4084179@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20210121171621.2076e4a37d5a.I5d9c72220fe7bb133fb718751da0180a57ecba4e@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bf01fa2bd2df6adfed8253b264318888c17aeff
Author: Koen Vandeputte <koen.vandeputte@citymesh.com>
Date:   Thu Jan 7 10:19:06 2021 +0100

    ARM: dts: imx6qdl-gw52xx: fix duplicate regulator naming
    
    commit 5a22747b76ca2384057d8e783265404439d31d7f upstream.
    
    2 regulator descriptions carry identical naming.
    
    This leads to following boot warning:
    [    0.173138] debugfs: Directory 'vdd1p8' with parent 'regulator' already present!
    
    Fix this by renaming the one used for audio.
    
    Fixes: 5051bff33102 ("ARM: dts: imx: ventana: add LTC3676 PMIC support")
    Signed-off-by: Tim Harvey <tharvey@gateworks.com>
    Signed-off-by: Koen Vandeputte <koen.vandeputte@ncentric.com>
    Cc: stable@vger.kernel.org # v4.11
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e33c8a6ccb6df5fca772438981e172d359df0c11
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri Jan 22 20:53:02 2021 +0800

    ACPI: sysfs: Prefer "compatible" modalias
    
    commit 36af2d5c4433fb40ee2af912c4ac0a30991aecfc upstream.
    
    Commit 8765c5ba1949 ("ACPI / scan: Rework modalias creation when
    "compatible" is present") may create two "MODALIAS=" in one uevent
    file if specific conditions are met.
    
    This breaks systemd-udevd, which assumes each "key" in one uevent file
    to be unique. The internal implementation of systemd-udevd overwrites
    the first MODALIAS with the second one, so its kmod rule doesn't load
    the driver for the first MODALIAS.
    
    So if both the ACPI modalias and the OF modalias are present, use the
    latter to ensure that there will be only one MODALIAS.
    
    Link: https://github.com/systemd/systemd/pull/18163
    Suggested-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Fixes: 8765c5ba1949 ("ACPI / scan: Rework modalias creation when "compatible" is present")
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: 4.1+ <stable@vger.kernel.org> # 4.1+
    [ rjw: Subject and changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 174c53710d5fd93ed6c5d59a245207df4998119c
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Jan 25 12:21:02 2021 -0500

    nbd: freeze the queue while we're adding connections
    
    commit b98e762e3d71e893b221f871825dc64694cfb258 upstream.
    
    When setting up a device, we can krealloc the config->socks array to add
    new sockets to the configuration.  However if we happen to get a IO
    request in at this point even though we aren't setup we could hit a UAF,
    as we deref config->socks without any locking, assuming that the
    configuration was setup already and that ->socks is safe to access it as
    we have a reference on the configuration.
    
    But there's nothing really preventing IO from occurring at this point of
    the device setup, we don't want to incur the overhead of a lock to
    access ->socks when it will never change while the device is running.
    To fix this UAF scenario simply freeze the queue if we are adding
    sockets.  This will protect us from this particular case without adding
    any additional overhead for the normal running case.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4be96f9b23d4533863d0fa905ba6e53477a3696
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 30 13:31:17 2021 +0100

    Linux 4.14.218
    
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210129105913.476540890@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fb094b4701b26afd548f32bec3b2b53dfd9b33d1
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Jan 25 12:37:44 2021 -0800

    fs: fix lazytime expiration handling in __writeback_single_inode()
    
    commit 1e249cb5b7fc09ff216aa5a12f6c302e434e88f9 upstream.
    
    When lazytime is enabled and an inode is being written due to its
    in-memory updated timestamps having expired, either due to a sync() or
    syncfs() system call or due to dirtytime_expire_interval having elapsed,
    the VFS needs to inform the filesystem so that the filesystem can copy
    the inode's timestamps out to the on-disk data structures.
    
    This is done by __writeback_single_inode() calling
    mark_inode_dirty_sync(), which then calls ->dirty_inode(I_DIRTY_SYNC).
    
    However, this occurs after __writeback_single_inode() has already
    cleared the dirty flags from ->i_state.  This causes two bugs:
    
    - mark_inode_dirty_sync() redirties the inode, causing it to remain
      dirty.  This wastefully causes the inode to be written twice.  But
      more importantly, it breaks cases where sync_filesystem() is expected
      to clean dirty inodes.  This includes the FS_IOC_REMOVE_ENCRYPTION_KEY
      ioctl (as reported at
      https://lore.kernel.org/r/20200306004555.GB225345@gmail.com), as well
      as possibly filesystem freezing (freeze_super()).
    
    - Since ->i_state doesn't contain I_DIRTY_TIME when ->dirty_inode() is
      called from __writeback_single_inode() for lazytime expiration,
      xfs_fs_dirty_inode() ignores the notification.  (XFS only cares about
      lazytime expirations, and it assumes that i_state will contain
      I_DIRTY_TIME during those.)  Therefore, lazy timestamps aren't
      persisted by sync(), syncfs(), or dirtytime_expire_interval on XFS.
    
    Fix this by moving the call to mark_inode_dirty_sync() to earlier in
    __writeback_single_inode(), before the dirty flags are cleared from
    i_state.  This makes filesystems be properly notified of the timestamp
    expiration, and it avoids incorrectly redirtying the inode.
    
    This fixes xfstest generic/580 (which tests
    FS_IOC_REMOVE_ENCRYPTION_KEY) when run on ext4 or f2fs with lazytime
    enabled.  It also fixes the new lazytime xfstest I've proposed, which
    reproduces the above-mentioned XFS bug
    (https://lore.kernel.org/r/20210105005818.92978-1-ebiggers@kernel.org).
    
    Alternatively, we could call ->dirty_inode(I_DIRTY_SYNC) directly.  But
    due to the introduction of I_SYNC_QUEUED, mark_inode_dirty_sync() is the
    right thing to do because mark_inode_dirty_sync() now knows not to move
    the inode to a writeback list if it is currently queued for sync.
    
    Fixes: 0ae45f63d4ef ("vfs: add support for a lazytime mount option")
    Cc: stable@vger.kernel.org
    Depends-on: 5afced3bf281 ("writeback: Avoid skipping inode writeback")
    Link: https://lore.kernel.org/r/20210112190253.64307-2-ebiggers@kernel.org
    Suggested-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd834c5233181994455477e5a0be253006ae8aa4
Author: Jan Kara <jack@suse.cz>
Date:   Mon Jan 25 12:37:43 2021 -0800

    writeback: Drop I_DIRTY_TIME_EXPIRE
    
    commit 5fcd57505c002efc5823a7355e21f48dd02d5a51 upstream.
    
    The only use of I_DIRTY_TIME_EXPIRE is to detect in
    __writeback_single_inode() that inode got there because flush worker
    decided it's time to writeback the dirty inode time stamps (either
    because we are syncing or because of age). However we can detect this
    directly in __writeback_single_inode() and there's no need for the
    strange propagation with I_DIRTY_TIME_EXPIRE flag.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60ed1878f4b2945ff9a55aad06478b02cf1bb410
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jan 25 12:37:42 2021 -0800

    fs: move I_DIRTY_INODE to fs.h
    
    commit 0e11f6443f522f89509495b13ef1f3745640144d upstream.
    
    And use it in a few more places rather than opencoding the values.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c3a6615c157055e5cc529cd6de93643d1002708
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Tue Aug 11 20:43:08 2020 -0400

    x86/boot/compressed: Disable relocation relaxation
    
    commit 09e43968db40c33a73e9ddbfd937f46d5c334924 upstream.
    
    The x86-64 psABI [0] specifies special relocation types
    (R_X86_64_[REX_]GOTPCRELX) for indirection through the Global Offset
    Table, semantically equivalent to R_X86_64_GOTPCREL, which the linker
    can take advantage of for optimization (relaxation) at link time. This
    is supported by LLD and binutils versions 2.26 onwards.
    
    The compressed kernel is position-independent code, however, when using
    LLD or binutils versions before 2.27, it must be linked without the -pie
    option. In this case, the linker may optimize certain instructions into
    a non-position-independent form, by converting foo@GOTPCREL(%rip) to $foo.
    
    This potential issue has been present with LLD and binutils-2.26 for a
    long time, but it has never manifested itself before now:
    
    - LLD and binutils-2.26 only relax
            movq    foo@GOTPCREL(%rip), %reg
      to
            leaq    foo(%rip), %reg
      which is still position-independent, rather than
            mov     $foo, %reg
      which is permitted by the psABI when -pie is not enabled.
    
    - GCC happens to only generate GOTPCREL relocations on mov instructions.
    
    - CLang does generate GOTPCREL relocations on non-mov instructions, but
      when building the compressed kernel, it uses its integrated assembler
      (due to the redefinition of KBUILD_CFLAGS dropping -no-integrated-as),
      which has so far defaulted to not generating the GOTPCRELX
      relocations.
    
    Nick Desaulniers reports [1,2]:
    
      "A recent change [3] to a default value of configuration variable
       (ENABLE_X86_RELAX_RELOCATIONS OFF -> ON) in LLVM now causes Clang's
       integrated assembler to emit R_X86_64_GOTPCRELX/R_X86_64_REX_GOTPCRELX
       relocations. LLD will relax instructions with these relocations based
       on whether the image is being linked as position independent or not.
       When not, then LLD will relax these instructions to use absolute
       addressing mode (R_RELAX_GOT_PC_NOPIC). This causes kernels built with
       Clang and linked with LLD to fail to boot."
    
    Patch series [4] is a solution to allow the compressed kernel to be
    linked with -pie unconditionally, but even if merged is unlikely to be
    backported. As a simple solution that can be applied to stable as well,
    prevent the assembler from generating the relaxed relocation types using
    the -mrelax-relocations=no option. For ease of backporting, do this
    unconditionally.
    
    [0] https://gitlab.com/x86-psABIs/x86-64-ABI/-/blob/master/x86-64-ABI/linker-optimization.tex#L65
    [1] https://lore.kernel.org/lkml/20200807194100.3570838-1-ndesaulniers@google.com/
    [2] https://github.com/ClangBuiltLinux/linux/issues/1121
    [3] https://reviews.llvm.org/rGc41a18cf61790fc898dcda1055c3efbf442c14c0
    [4] https://lore.kernel.org/lkml/20200731202738.2577854-1-nivedita@alum.mit.edu/
    
    Reported-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200812004308.1448603-1-nivedita@alum.mit.edu
    [nc: Backport to 4.14]
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28c4db868f70d3ccacc18b8c441a59d25bde0bd1
Author: Gaurav Kohli <gkohli@codeaurora.org>
Date:   Tue Oct 6 15:03:53 2020 +0530

    tracing: Fix race in trace_open and buffer resize call
    
    commit bbeb97464eefc65f506084fd9f18f21653e01137 upstream.
    
    Below race can come, if trace_open and resize of
    cpu buffer is running parallely on different cpus
    CPUX                                CPUY
                                        ring_buffer_resize
                                        atomic_read(&buffer->resize_disabled)
    tracing_open
    tracing_reset_online_cpus
    ring_buffer_reset_cpu
    rb_reset_cpu
                                        rb_update_pages
                                        remove/insert pages
    resetting pointer
    
    This race can cause data abort or some times infinte loop in
    rb_remove_pages and rb_insert_pages while checking pages
    for sanity.
    
    Take buffer lock to fix this.
    
    Link: https://lkml.kernel.org/r/1601976833-24377-1-git-send-email-gkohli@codeaurora.org
    
    Cc: stable@vger.kernel.org
    Fixes: 83f40318dab00 ("ring-buffer: Make removal of ring buffer pages atomic")
    Reported-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Gaurav Kohli <gkohli@codeaurora.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52b00f42529caa4e3b4718c568e3229e81ea83d6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Jan 18 19:01:21 2021 +0100

    futex: Handle faults correctly for PI futexes
    
    commit 34b1a1ce1458f50ef27c54e28eb9b1947012907a upstream
    
    fixup_pi_state_owner() tries to ensure that the state of the rtmutex,
    pi_state and the user space value related to the PI futex are consistent
    before returning to user space. In case that the user space value update
    faults and the fault cannot be resolved by faulting the page in via
    fault_in_user_writeable() the function returns with -EFAULT and leaves
    the rtmutex and pi_state owner state inconsistent.
    
    A subsequent futex_unlock_pi() operates on the inconsistent pi_state and
    releases the rtmutex despite not owning it which can corrupt the RB tree of
    the rtmutex and cause a subsequent kernel stack use after free.
    
    It was suggested to loop forever in fixup_pi_state_owner() if the fault
    cannot be resolved, but that results in runaway tasks which is especially
    undesired when the problem happens due to a programming error and not due
    to malice.
    
    As the user space value cannot be fixed up, the proper solution is to make
    the rtmutex and the pi_state consistent so both have the same owner. This
    leaves the user space value out of sync. Any subsequent operation on the
    futex will fail because the 10th rule of PI futexes (pi_state owner and
    user space value are consistent) has been violated.
    
    As a consequence this removes the inept attempts of 'fixing' the situation
    in case that the current task owns the rtmutex when returning with an
    unresolvable fault by unlocking the rtmutex which left pi_state::owner and
    rtmutex::owner out of sync in a different and only slightly less dangerous
    way.
    
    Fixes: 1b7558e457ed ("futexes: fix fault handling in futex_lock_pi")
    Reported-by: gzobqq@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e5fef105b081d350e76d7fa11e6b1c596db6d77
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 19 16:26:38 2021 +0100

    futex: Simplify fixup_pi_state_owner()
    
    commit f2dac39d93987f7de1e20b3988c8685523247ae2 upstream
    
    Too many gotos already and an upcoming fix would make it even more
    unreadable.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04322c0cc960d1be8bfe203da12ea3a4aeb96940
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jan 20 11:35:19 2021 +0100

    futex: Use pi_state_update_owner() in put_pi_state()
    
    commit 6ccc84f917d33312eb2846bd7b567639f585ad6d upstream
    
    No point in open coding it. This way it gains the extra sanity checks.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a9f8d68a33f7c945d0914476105db3225dd2eaf
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jan 20 11:32:07 2021 +0100

    rtmutex: Remove unused argument from rt_mutex_proxy_unlock()
    
    commit 2156ac1934166d6deb6cd0f6ffc4c1076ec63697 upstream
    
    Nothing uses the argument. Remove it as preparation to use
    pi_state_update_owner().
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 995c9ea5475e49d38513759d298315d7689baac8
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 19 15:21:35 2021 +0100

    futex: Provide and use pi_state_update_owner()
    
    commit c5cade200ab9a2a3be9e7f32a752c8d86b502ec7 upstream
    
    Updating pi_state::owner is done at several places with the same
    code. Provide a function for it and use that at the obvious places.
    
    This is also a preparation for a bug fix to avoid yet another copy of the
    same code or alternatively introducing a completely unpenetratable mess of
    gotos.
    
    Originally-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db9138eeb74ae815f853a3041512de9058415615
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jan 19 16:06:10 2021 +0100

    futex: Replace pointless printk in fixup_owner()
    
    commit 04b79c55201f02ffd675e1231d731365e335c307 upstream
    
    If that unexpected case of inconsistent arguments ever happens then the
    futex state is left completely inconsistent and the printk is not really
    helpful. Replace it with a warning and make the state consistent.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c2039f73fb49371f8042187057fc2186e3eefbe
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jan 20 16:00:24 2021 +0100

    futex: Ensure the correct return value from futex_lock_pi()
    
    commit 12bb3f7f1b03d5913b3f9d4236a488aa7774dfe9 upstream
    
    In case that futex_lock_pi() was aborted by a signal or a timeout and the
    task returned without acquiring the rtmutex, but is the designated owner of
    the futex due to a concurrent futex_unlock_pi() fixup_owner() is invoked to
    establish consistent state. In that case it invokes fixup_pi_state_owner()
    which in turn tries to acquire the rtmutex again. If that succeeds then it
    does not propagate this success to fixup_owner() and futex_lock_pi()
    returns -EINTR or -ETIMEOUT despite having the futex locked.
    
    Return success from fixup_pi_state_owner() in all cases where the current
    task owns the rtmutex and therefore the futex and propagate it correctly
    through fixup_owner(). Fixup the other callsite which does not expect a
    positive return value.
    
    Fixes: c1e2f0eaf015 ("futex: Avoid violating the 10th rule of futex")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 007cb8cb05a90fa023b919c078a84c2f53713bbc
Author: Wang Hai <wanghai38@huawei.com>
Date:   Thu Jan 28 19:32:50 2021 +0800

    Revert "mm/slub: fix a memory leak in sysfs_slab_add()"
    
    commit 757fed1d0898b893d7daa84183947c70f27632f3 upstream.
    
    This reverts commit dde3c6b72a16c2db826f54b2d49bdea26c3534a2.
    
    syzbot report a double-free bug. The following case can cause this bug.
    
     - mm/slab_common.c: create_cache(): if the __kmem_cache_create() fails,
       it does:
    
            out_free_cache:
                    kmem_cache_free(kmem_cache, s);
    
     - but __kmem_cache_create() - at least for slub() - will have done
    
            sysfs_slab_add(s)
                    -> sysfs_create_group() .. fails ..
                    -> kobject_del(&s->kobj); .. which frees s ...
    
    We can't remove the kmem_cache_free() in create_cache(), because other
    error cases of __kmem_cache_create() do not free this.
    
    So, revert the commit dde3c6b72a16 ("mm/slub: fix a memory leak in
    sysfs_slab_add()") to fix this.
    
    Reported-by: syzbot+d0bd96b4696c1ef67991@syzkaller.appspotmail.com
    Fixes: dde3c6b72a16 ("mm/slub: fix a memory leak in sysfs_slab_add()")
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2a8ee9609444b54a023c8777737cd044e1785fc
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Sun Jan 17 15:17:02 2021 +0200

    gpio: mvebu: fix pwm .get_state period calculation
    
    commit e73b0101ae5124bf7cd3fb5d250302ad2f16a416 upstream.
    
    The period is the sum of on and off values. That is, calculate period as
    
      ($on + $off) / clkrate
    
    instead of
    
      $off / clkrate - $on / clkrate
    
    that makes no sense.
    
    Reported-by: Russell King <linux@armlinux.org.uk>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Fixes: 757642f9a584e ("gpio: mvebu: Add limited PWM support")
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    [baruch: backport to kernels <= v5.10]
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb195af00cf8a2fa744907e1ad8129039c6ee352
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Nov 30 15:35:44 2017 +0100

    futex: futex_wake_op, fix sign_extend32 sign bits
    
    commit d70ef22892ed6c066e51e118b225923c9b74af34 upstream.
    
    sign_extend32 counts the sign bit parameter from 0, not from 1.  So we
    have to use "11" for 12th bit, not "12".
    
    This mistake means we have not allowed negative op and cmp args since
    commit 30d6e0a4190d ("futex: Remove duplicated code and fix undefined
    behaviour") till now.
    
    Fixes: 30d6e0a4190d ("futex: Remove duplicated code and fix undefined behaviour")
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Darren Hart <dvhart@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91bb0190a8dbf4c608f44edcd03e56003d422df7
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 19 17:48:03 2021 +0300

    net: dsa: b53: fix an off by one in checking "vlan->vid"
    
    commit 8e4052c32d6b4b39c1e13c652c7e33748d447409 upstream.
    
    The > comparison should be >= to prevent accessing one element beyond
    the end of the dev->vlans[] array in the caller function, b53_vlan_add().
    The "dev->vlans" array is allocated in the b53_switch_init() function
    and it has "dev->num_vlans" elements.
    
    Fixes: a2482d2ce349 ("net: dsa: b53: Plug in VLAN support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/YAbxI97Dl/pmBy5V@mwanda
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25ae4c5d8c5ae0f30850e56c8a2aa25db261c1d0
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Jan 14 10:52:29 2021 -0800

    net_sched: avoid shift-out-of-bounds in tcindex_set_parms()
    
    commit bcd0cf19ef8258ac31b9a20248b05c15a1f4b4b0 upstream.
    
    tc_index being 16bit wide, we need to check that TCA_TCINDEX_SHIFT
    attribute is not silly.
    
    UBSAN: shift-out-of-bounds in net/sched/cls_tcindex.c:260:29
    shift exponent 255 is too large for 32-bit type 'int'
    CPU: 0 PID: 8516 Comm: syz-executor228 Not tainted 5.10.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:395
     valid_perfect_hash net/sched/cls_tcindex.c:260 [inline]
     tcindex_set_parms.cold+0x1b/0x215 net/sched/cls_tcindex.c:425
     tcindex_change+0x232/0x340 net/sched/cls_tcindex.c:546
     tc_new_tfilter+0x13fb/0x21b0 net/sched/cls_api.c:2127
     rtnetlink_rcv_msg+0x8b6/0xb80 net/core/rtnetlink.c:5555
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2494
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x907/0xe40 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2336
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2390
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2423
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Link: https://lore.kernel.org/r/20210114185229.1742255-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08e41a93df7c5cbcd2c645be4922e3fa44daab4e
Author: Matteo Croce <mcroce@microsoft.com>
Date:   Fri Jan 15 19:42:08 2021 +0100

    ipv6: create multicast route with RTPROT_KERNEL
    
    commit a826b04303a40d52439aa141035fca5654ccaccd upstream.
    
    The ff00::/8 multicast route is created without specifying the fc_protocol
    field, so the default RTPROT_BOOT value is used:
    
      $ ip -6 -d route
      unicast ::1 dev lo proto kernel scope global metric 256 pref medium
      unicast fe80::/64 dev eth0 proto kernel scope global metric 256 pref medium
      unicast ff00::/8 dev eth0 proto boot scope global metric 256 pref medium
    
    As the documentation says, this value identifies routes installed during
    boot, but the route is created when interface is set up.
    Change the value to RTPROT_KERNEL which is a better value.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Matteo Croce <mcroce@microsoft.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea8624b6008862e6f066174e2309bd2190c875df
Author: Guillaume Nault <gnault@redhat.com>
Date:   Sat Jan 16 11:44:22 2021 +0100

    udp: mask TOS bits in udp_v4_early_demux()
    
    commit 8d2b51b008c25240914984208b2ced57d1dd25a5 upstream.
    
    udp_v4_early_demux() is the only function that calls
    ip_mc_validate_source() with a TOS that hasn't been masked with
    IPTOS_RT_MASK.
    
    This results in different behaviours for incoming multicast UDPv4
    packets, depending on if ip_mc_validate_source() is called from the
    early-demux path (udp_v4_early_demux) or from the regular input path
    (ip_route_input_noref).
    
    ECN would normally not be used with UDP multicast packets, so the
    practical consequences should be limited on that side. However,
    IPTOS_RT_MASK is used to also masks the TOS' high order bits, to align
    with the non-early-demux path behaviour.
    
    Reproducer:
    
      Setup two netns, connected with veth:
      $ ip netns add ns0
      $ ip netns add ns1
      $ ip -netns ns0 link set dev lo up
      $ ip -netns ns1 link set dev lo up
      $ ip link add name veth01 netns ns0 type veth peer name veth10 netns ns1
      $ ip -netns ns0 link set dev veth01 up
      $ ip -netns ns1 link set dev veth10 up
      $ ip -netns ns0 address add 192.0.2.10 peer 192.0.2.11/32 dev veth01
      $ ip -netns ns1 address add 192.0.2.11 peer 192.0.2.10/32 dev veth10
    
      In ns0, add route to multicast address 224.0.2.0/24 using source
      address 198.51.100.10:
      $ ip -netns ns0 address add 198.51.100.10/32 dev lo
      $ ip -netns ns0 route add 224.0.2.0/24 dev veth01 src 198.51.100.10
    
      In ns1, define route to 198.51.100.10, only for packets with TOS 4:
      $ ip -netns ns1 route add 198.51.100.10/32 tos 4 dev veth10
    
      Also activate rp_filter in ns1, so that incoming packets not matching
      the above route get dropped:
      $ ip netns exec ns1 sysctl -wq net.ipv4.conf.veth10.rp_filter=1
    
      Now try to receive packets on 224.0.2.11:
      $ ip netns exec ns1 socat UDP-RECVFROM:1111,ip-add-membership=224.0.2.11:veth10,ignoreeof -
    
      In ns0, send packet to 224.0.2.11 with TOS 4 and ECT(0) (that is,
      tos 6 for socat):
      $ echo test0 | ip netns exec ns0 socat - UDP-DATAGRAM:224.0.2.11:1111,bind=:1111,tos=6
    
      The "test0" message is properly received by socat in ns1, because
      early-demux has no cached dst to use, so source address validation
      is done by ip_route_input_mc(), which receives a TOS that has the
      ECN bits masked.
    
      Now send another packet to 224.0.2.11, still with TOS 4 and ECT(0):
      $ echo test1 | ip netns exec ns0 socat - UDP-DATAGRAM:224.0.2.11:1111,bind=:1111,tos=6
    
      The "test1" message isn't received by socat in ns1, because, now,
      early-demux has a cached dst to use and calls ip_mc_validate_source()
      immediately, without masking the ECN bits.
    
    Fixes: bc044e8db796 ("udp: perform source validation for mcast early demux")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4ec8b2b57f2a32f7ae8cbc89355d3cbbcd74e0a
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Fri Jan 15 15:04:40 2021 +0000

    skbuff: back tiny skbs with kmalloc() in __netdev_alloc_skb() too
    
    commit 66c556025d687dbdd0f748c5e1df89c977b6c02a upstream.
    
    Commit 3226b158e67c ("net: avoid 32 x truesize under-estimation for
    tiny skbs") ensured that skbs with data size lower than 1025 bytes
    will be kmalloc'ed to avoid excessive page cache fragmentation and
    memory consumption.
    However, the fix adressed only __napi_alloc_skb() (primarily for
    virtio_net and napi_get_frags()), but the issue can still be achieved
    through __netdev_alloc_skb(), which is still used by several drivers.
    Drivers often allocate a tiny skb for headers and place the rest of
    the frame to frags (so-called copybreak).
    Mirror the condition to __netdev_alloc_skb() to handle this case too.
    
    Since v1 [0]:
     - fix "Fixes:" tag;
     - refine commit message (mention copybreak usecase).
    
    [0] https://lore.kernel.org/netdev/20210114235423.232737-1-alobakin@pm.me
    
    Fixes: a1c7fff7e18f ("net: netdev_alloc_skb() use build_skb()")
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Link: https://lore.kernel.org/r/20210115150354.85967-1-alobakin@pm.me
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c81bf1817ec4a7ca1a8a23cf56d36e58bde38e5
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 18 16:08:12 2021 +0100

    sh_eth: Fix power down vs. is_opened flag ordering
    
    commit f6a2e94b3f9d89cb40771ff746b16b5687650cbb upstream.
    
    sh_eth_close() does a synchronous power down of the device before
    marking it closed.  Revert the order, to make sure the device is never
    marked opened while suspended.
    
    While at it, use pm_runtime_put() instead of pm_runtime_put_sync(), as
    there is no reason to do a synchronous power down.
    
    Fixes: 7fa2955ff70ce453 ("sh_eth: Fix sleeping function called from invalid context")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Link: https://lore.kernel.org/r/20210118150812.796791-1-geert+renesas@glider.be
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ddb0363056ed1f1459e9ffd1928b79c73b438b3
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Thu Sep 17 18:45:48 2020 +0300

    sh: dma: fix kconfig dependency for G2_DMA
    
    commit f477a538c14d07f8c45e554c8c5208d588514e98 upstream.
    
    When G2_DMA is enabled and SH_DMA is disabled, it results in the following
    Kbuild warning:
    
    WARNING: unmet direct dependencies detected for SH_DMA_API
      Depends on [n]: SH_DMA [=n]
      Selected by [y]:
      - G2_DMA [=y] && SH_DREAMCAST [=y]
    
    The reason is that G2_DMA selects SH_DMA_API without depending on or
    selecting SH_DMA while SH_DMA_API depends on SH_DMA.
    
    When G2_DMA was first introduced with commit 40f49e7ed77f
    ("sh: dma: Make G2 DMA configurable."), this wasn't an issue since
    SH_DMA_API didn't have such dependency, and this way was the only way to
    enable it since SH_DMA_API was non-visible. However, later SH_DMA_API was
    made visible and dependent on SH_DMA with commit d8902adcc1a9
    ("dmaengine: sh: Add Support SuperH DMA Engine driver").
    
    Let G2_DMA depend on SH_DMA_API instead to avoid Kbuild issues.
    
    Fixes: d8902adcc1a9 ("dmaengine: sh: Add Support SuperH DMA Engine driver")
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5552659f5a1e309a155a57175dccc65918bdda42
Author: Guillaume Nault <gnault@redhat.com>
Date:   Sat Jan 16 11:44:26 2021 +0100

    netfilter: rpfilter: mask ecn bits before fib lookup
    
    commit 2e5a6266fbb11ae93c468dfecab169aca9c27b43 upstream.
    
    RT_TOS() only masks one of the two ECN bits. Therefore rpfilter_mt()
    treats Not-ECT or ECT(1) packets in a different way than those with
    ECT(0) or CE.
    
    Reproducer:
    
      Create two netns, connected with a veth:
      $ ip netns add ns0
      $ ip netns add ns1
      $ ip link add name veth01 netns ns0 type veth peer name veth10 netns ns1
      $ ip -netns ns0 link set dev veth01 up
      $ ip -netns ns1 link set dev veth10 up
      $ ip -netns ns0 address add 192.0.2.10/32 dev veth01
      $ ip -netns ns1 address add 192.0.2.11/32 dev veth10
    
      Add a route to ns1 in ns0:
      $ ip -netns ns0 route add 192.0.2.11/32 dev veth01
    
      In ns1, only packets with TOS 4 can be routed to ns0:
      $ ip -netns ns1 route add 192.0.2.10/32 tos 4 dev veth10
    
      Ping from ns0 to ns1 works regardless of the ECN bits, as long as TOS
      is 4:
      $ ip netns exec ns0 ping -Q 4 192.0.2.11   # TOS 4, Not-ECT
        ... 0% packet loss ...
      $ ip netns exec ns0 ping -Q 5 192.0.2.11   # TOS 4, ECT(1)
        ... 0% packet loss ...
      $ ip netns exec ns0 ping -Q 6 192.0.2.11   # TOS 4, ECT(0)
        ... 0% packet loss ...
      $ ip netns exec ns0 ping -Q 7 192.0.2.11   # TOS 4, CE
        ... 0% packet loss ...
    
      Now use iptable's rpfilter module in ns1:
      $ ip netns exec ns1 iptables-legacy -t raw -A PREROUTING -m rpfilter --invert -j DROP
    
      Not-ECT and ECT(1) packets still pass:
      $ ip netns exec ns0 ping -Q 4 192.0.2.11   # TOS 4, Not-ECT
        ... 0% packet loss ...
      $ ip netns exec ns0 ping -Q 5 192.0.2.11   # TOS 4, ECT(1)
        ... 0% packet loss ...
    
      But ECT(0) and ECN packets are dropped:
      $ ip netns exec ns0 ping -Q 6 192.0.2.11   # TOS 4, ECT(0)
        ... 100% packet loss ...
      $ ip netns exec ns0 ping -Q 7 192.0.2.11   # TOS 4, CE
        ... 100% packet loss ...
    
    After this patch, rpfilter doesn't drop ECT(0) and CE packets anymore.
    
    Fixes: 8f97339d3feb ("netfilter: add ipv4 reverse path filter match")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 776fe5f5f4a693d45e6d433aee1c86f2ba067e3a
Author: Will Deacon <will@kernel.org>
Date:   Tue Jan 12 22:48:32 2021 +0000

    compiler.h: Raise minimum version of GCC to 5.1 for arm64
    
    commit dca5244d2f5b94f1809f0c02a549edf41ccd5493 upstream.
    
    GCC versions >= 4.9 and < 5.1 have been shown to emit memory references
    beyond the stack pointer, resulting in memory corruption if an interrupt
    is taken after the stack pointer has been adjusted but before the
    reference has been executed. This leads to subtle, infrequent data
    corruption such as the EXT4 problems reported by Russell King at the
    link below.
    
    Life is too short for buggy compilers, so raise the minimum GCC version
    required by arm64 to 5.1.
    
    Reported-by: Russell King <linux@armlinux.org.uk>
    Suggested-by: Arnd Bergmann <arnd@kernel.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Cc: Theodore Ts'o <tytso@mit.edu>
    Cc: Florian Weimer <fweimer@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20210105154726.GD1551@shell.armlinux.org.uk
    Link: https://lore.kernel.org/r/20210112224832.10980-1-will@kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    [will: backport to 4.4.y/4.9.y/4.14.y; add __clang__ check]
    Link: https://lore.kernel.org/r/CA+G9fYuzE9WMSB7uGjV4gTzK510SHEdJb_UXQCzsQ5MqA=h9SA@mail.gmail.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63092bda2877c48a300a0aeb8944beb50557cbd2
Author: JC Kuo <jckuo@nvidia.com>
Date:   Fri Jan 15 18:19:07 2021 +0200

    xhci: tegra: Delay for disabling LFPS detector
    
    commit da7e0c3c2909a3d9bf8acfe1db3cb213bd7febfb upstream.
    
    Occasionally, we are seeing some SuperSpeed devices resumes right after
    being directed to U3. This commits add 500us delay to ensure LFPS
    detector is disabled before sending ACK to firmware.
    
    [   16.099363] tegra-xusb 70090000.usb: entering ELPG
    [   16.104343] tegra-xusb 70090000.usb: 2-1 isn't suspended: 0x0c001203
    [   16.114576] tegra-xusb 70090000.usb: not all ports suspended: -16
    [   16.120789] tegra-xusb 70090000.usb: entering ELPG failed
    
    The register write passes through a few flop stages of 32KHz clock domain.
    NVIDIA ASIC designer reviewed RTL and suggests 500us delay.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: JC Kuo <jckuo@nvidia.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210115161907.2875631-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ca98cc18c45280c19ec911206b34b5c3e397a96
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Fri Jan 15 18:19:06 2021 +0200

    xhci: make sure TRB is fully written before giving it to the controller
    
    commit 576667bad341516edc4e18eb85acb0a2b4c9c9d9 upstream.
    
    Once the command ring doorbell is rung the xHC controller will parse all
    command TRBs on the command ring that have the cycle bit set properly.
    
    If the driver just started writing the next command TRB to the ring when
    hardware finished the previous TRB, then HW might fetch an incomplete TRB
    as long as its cycle bit set correctly.
    
    A command TRB is 16 bytes (128 bits) long.
    Driver writes the command TRB in four 32 bit chunks, with the chunk
    containing the cycle bit last. This does however not guarantee that
    chunks actually get written in that order.
    
    This was detected in stress testing when canceling URBs with several
    connected USB devices.
    Two consecutive "Set TR Dequeue pointer" commands got queued right
    after each other, and the second one was only partially written when
    the controller parsed it, causing the dequeue pointer to be set
    to bogus values. This was seen as error messages:
    
    "Mismatch between completed Set TR Deq Ptr command & xHCI internal state"
    
    Solution is to add a write memory barrier before writing the cycle bit.
    
    Cc: <stable@vger.kernel.org>
    Tested-by: Ross Zwisler <zwisler@google.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20210115161907.2875631-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76140a5b95ac25d677e7b0ba716f378caca590b1
Author: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
Date:   Mon Jan 18 21:36:15 2021 +0100

    usb: bdc: Make bdc pci driver depend on BROKEN
    
    commit ef02684c4e67d8c35ac83083564135bc7b1d3445 upstream.
    
    The bdc pci driver is going to be removed due to it not existing in the
    wild. This patch turns off compilation of the driver so that stable
    kernels can also pick up the change. This helps the out-of-tree
    facetimehd webcam driver as the pci id conflicts with bdc.
    
    Cc: Al Cooper <alcooperx@gmail.com>
    Cc: <stable@vger.kernel.org>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://lore.kernel.org/r/20210118203615.13995-1-patrik.r.jakobsson@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12531ed39c017b4f769b39dfd68bdcb5678782a6
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Jan 14 00:09:51 2021 -0800

    usb: udc: core: Use lock when write to soft_connect
    
    commit c28095bc99073ddda65e4f31f6ae0d908d4d5cd8 upstream.
    
    Use lock to guard against concurrent access for soft-connect/disconnect
    operations when writing to soft_connect sysfs.
    
    Fixes: 2ccea03a8f7e ("usb: gadget: introduce UDC Class")
    Cc: stable@vger.kernel.org
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/338ea01fbd69b1985ef58f0f59af02c805ddf189.1610611437.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05dadd9dac8ad43003c18ac8db18772255fb5cc7
Author: Longfang Liu <liulongfang@huawei.com>
Date:   Tue Jan 12 09:57:27 2021 +0800

    USB: ehci: fix an interrupt calltrace error
    
    commit 643a4df7fe3f6831d14536fd692be85f92670a52 upstream.
    
    The system that use Synopsys USB host controllers goes to suspend
    when using USB audio player. This causes the USB host controller
    continuous send interrupt signal to system, When the number of
    interrupts exceeds 100000, the system will forcibly close the
    interrupts and output a calltrace error.
    
    When the system goes to suspend, the last interrupt is reported to
    the driver. At this time, the system has set the state to suspend.
    This causes the last interrupt to not be processed by the system and
    not clear the interrupt flag. This uncleared interrupt flag constantly
    triggers new interrupt event. This causing the driver to receive more
    than 100,000 interrupts, which causes the system to forcibly close the
    interrupt report and report the calltrace error.
    
    so, when the driver goes to sleep and changes the system state to
    suspend, the interrupt flag needs to be cleared.
    
    Signed-off-by: Longfang Liu <liulongfang@huawei.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/1610416647-45774-1-git-send-email-liulongfang@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfc45d082aca8e7d5add95be800b29f144d78aeb
Author: Eugene Korenevsky <ekorenevsky@astralinux.ru>
Date:   Sun Jan 10 20:36:09 2021 +0300

    ehci: fix EHCI host controller initialization sequence
    
    commit 280a9045bb18833db921b316a5527d2b565e9f2e upstream.
    
    According to EHCI spec, EHCI HC clears USBSTS.HCHalted whenever
    USBCMD.RS=1.
    
    However, it is a good practice to wait some time after setting USBCMD.RS
    (approximately 100ms) until USBSTS.HCHalted become zero.
    
    Without this waiting, VirtualBox's EHCI virtual HC accidentally hangs
    (see BugLink).
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=211095
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Eugene Korenevsky <ekorenevsky@astralinux.ru>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210110173609.GA17313@himera.home
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c225d212ed49dbe8b380541a682b587ee3176e04
Author: Wang Hui <john.wanghui@huawei.com>
Date:   Fri Jan 15 22:59:16 2021 +0300

    stm class: Fix module init return on allocation failure
    
    commit 927633a6d20af319d986f3e42c3ef9f6d7835008 upstream.
    
    In stm_heartbeat_init(): return value gets reset after the first
    iteration by stm_source_register_device(), so allocation failures
    after that will, after a clean up, return success. Fix that.
    
    Fixes: 119291853038 ("stm class: Add heartbeat stm source device")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hui <john.wanghui@huawei.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: https://lore.kernel.org/r/20210115195917.3184-2-alexander.shishkin@linux.intel.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f828be30226ac79b7c6f354f705ecd4cc6fe258
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Fri Jan 15 22:59:17 2021 +0300

    intel_th: pci: Add Alder Lake-P support
    
    commit cb5c681ab9037e25fcca20689c82cf034566d610 upstream.
    
    This adds support for the Trace Hub in Alder Lake-P.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Link: https://lore.kernel.org/r/20210115195917.3184-3-alexander.shishkin@linux.intel.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b229bf23de7a99e0a838c58ba07a506f32ce7849
Author: Mathias Kresin <dev@kresin.me>
Date:   Thu Jan 7 22:36:03 2021 +0100

    irqchip/mips-cpu: Set IPI domain parent chip
    
    commit 599b3063adf4bf041a87a69244ee36aded0d878f upstream.
    
    Since commit 55567976629e ("genirq/irqdomain: Allow partial trimming of
    irq_data hierarchy") the irq_data chain is valided.
    
    The irq_domain_trim_hierarchy() function doesn't consider the irq + ipi
    domain hierarchy as valid, since the ipi domain has the irq domain set
    as parent, but the parent domain has no chip set. Hence the boot ends in
    a kernel panic.
    
    Set the chip for the parent domain as it is done in the mips gic irq
    driver, to have a valid irq_data chain.
    
    Fixes: 3838a547fda2 ("irqchip: mips-cpu: Introduce IPI IRQ domain support")
    Cc: <stable@vger.kernel.org> # v5.10+
    Signed-off-by: Mathias Kresin <dev@kresin.me>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20210107213603.1637781-1-dev@kresin.me
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdfdb7b5e9282e04a6f5eb047aad1d989f539799
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Wed Dec 9 11:46:49 2020 +0100

    iio: ad5504: Fix setting power-down state
    
    commit efd597b2839a9895e8a98fcb0b76d2f545802cd4 upstream.
    
    The power-down mask of the ad5504 is actually a power-up mask. Meaning if
    a bit is set the corresponding channel is powered up and if it is not set
    the channel is powered down.
    
    The driver currently has this the wrong way around, resulting in the
    channel being powered up when requested to be powered down and vice versa.
    
    Fixes: 3bbbf150ffde ("staging:iio:dac:ad5504: Use strtobool for boolean values")
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Link: https://lore.kernel.org/r/20201209104649.5794-1-lars@metafoo.de
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 12f66c212bd1dcb61e55fbc0fe39211dc6ed7aad
Author: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
Date:   Wed Jan 20 20:41:36 2021 +0900

    can: vxcan: vxcan_xmit: fix use after free bug
    
    [ Upstream commit 75854cad5d80976f6ea0f0431f8cedd3bcc475cb ]
    
    After calling netif_rx_ni(skb), dereferencing skb is unsafe.
    Especially, the canfd_frame cfd which aliases skb memory is accessed
    after the netif_rx_ni().
    
    Fixes: a8f820a380a2 ("can: add Virtual CAN Tunnel driver (vxcan)")
    Link: https://lore.kernel.org/r/20210120114137.200019-3-mailhol.vincent@wanadoo.fr
    Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 280a483ebd7b90d708e943c59e6fdb0a2598d980
Author: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
Date:   Wed Jan 20 20:41:35 2021 +0900

    can: dev: can_restart: fix use after free bug
    
    [ Upstream commit 03f16c5075b22c8902d2af739969e878b0879c94 ]
    
    After calling netif_rx_ni(skb), dereferencing skb is unsafe.
    Especially, the can_frame cf which aliases skb memory is accessed
    after the netif_rx_ni() in:
          stats->rx_bytes += cf->len;
    
    Reordering the lines solves the issue.
    
    Fixes: 39549eef3587 ("can: CAN Network device driver and Netlink interface")
    Link: https://lore.kernel.org/r/20210120114137.200019-2-mailhol.vincent@wanadoo.fr
    Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 048321b218f64b13d4cee3ca880b82c07f54046c
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sat Jan 9 13:43:08 2021 +0100

    i2c: octeon: check correct size of maximum RECV_LEN packet
    
    [ Upstream commit 1b2cfa2d1dbdcc3b6dba1ecb7026a537a1d7277f ]
    
    I2C_SMBUS_BLOCK_MAX defines already the maximum number as defined in the
    SMBus 2.0 specs. No reason to add one to it.
    
    Fixes: 886f6f8337dd ("i2c: octeon: Support I2C_M_RECV_LEN")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Robert Richter <rric@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 840c73d774c0dc4fc615fef30eecddff632092da
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 13 17:12:52 2021 +1000

    drm/nouveau/i2c/gm200: increase width of aux semaphore owner fields
    
    [ Upstream commit ba6e9ab0fcf3d76e3952deb12b5f993991621d9c ]
    
    Noticed while debugging GA102.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 638192fca9bd3457160acfafd7172ddcd2c0d8f7
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 13 17:12:52 2021 +1000

    drm/nouveau/privring: ack interrupts the same way as RM
    
    [ Upstream commit e05e06cd34f5311f677294a08b609acfbc315236 ]
    
    Whatever it is that we were doing before doesn't work on Ampere.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 166e118db08a2e167fa4daf314ea59501fd11d37
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 13 17:12:52 2021 +1000

    drm/nouveau/bios: fix issue shadowing expansion ROMs
    
    [ Upstream commit 402a89660e9dc880710b12773076a336c9dab3d7 ]
    
    This issue has generally been covered up by the presence of additional
    expansion ROMs after the ones we're interested in, with header fetches
    of subsequent images loading enough of the ROM to hide the issue.
    
    Noticed on GA102, which lacks a type 0x70 image compared to TU102,.
    
    [  906.364197] nouveau 0000:09:00.0: bios: 00000000: type 00, 65024 bytes
    [  906.381205] nouveau 0000:09:00.0: bios: 0000fe00: type 03, 91648 bytes
    [  906.405213] nouveau 0000:09:00.0: bios: 00026400: type e0, 22016 bytes
    [  906.410984] nouveau 0000:09:00.0: bios: 0002ba00: type e0, 366080 bytes
    
    vs
    
    [   22.961901] nouveau 0000:09:00.0: bios: 00000000: type 00, 60416 bytes
    [   22.984174] nouveau 0000:09:00.0: bios: 0000ec00: type 03, 71168 bytes
    [   23.010446] nouveau 0000:09:00.0: bios: 00020200: type e0, 48128 bytes
    [   23.028220] nouveau 0000:09:00.0: bios: 0002be00: type e0, 140800 bytes
    [   23.080196] nouveau 0000:09:00.0: bios: 0004e400: type 70, 7168 bytes
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08909d4a5ee68f42fd1b9ea2014f857f4acd7f0c
Author: David Woodhouse <dwmw@amazon.co.uk>
Date:   Wed Jan 13 13:26:02 2021 +0000

    xen: Fix event channel callback via INTX/GSI
    
    [ Upstream commit 3499ba8198cad47b731792e5e56b9ec2a78a83a2 ]
    
    For a while, event channel notification via the PCI platform device
    has been broken, because we attempt to communicate with xenstore before
    we even have notifications working, with the xs_reset_watches() call
    in xs_init().
    
    We tend to get away with this on Xen versions below 4.0 because we avoid
    calling xs_reset_watches() anyway, because xenstore might not cope with
    reading a non-existent key. And newer Xen *does* have the vector
    callback support, so we rarely fall back to INTX/GSI delivery.
    
    To fix it, clean up a bit of the mess of xs_init() and xenbus_probe()
    startup. Call xs_init() directly from xenbus_init() only in the !XS_HVM
    case, deferring it to be called from xenbus_probe() in the XS_HVM case
    instead.
    
    Then fix up the invocation of xenbus_probe() to happen either from its
    device_initcall if the callback is available early enough, or when the
    callback is finally set up. This means that the hack of calling
    xenbus_probe() from a workqueue after the first interrupt, or directly
    from the PCI platform device setup, is no longer needed.
    
    Signed-off-by: David Woodhouse <dwmw@amazon.co.uk>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20210113132606.422794-2-dwmw2@infradead.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f343ccaf748faed96c2b93cb5788fb503733e61c
Author: Can Guo <cang@codeaurora.org>
Date:   Mon Dec 28 04:04:36 2020 -0800

    scsi: ufs: Correct the LUN used in eh_device_reset_handler() callback
    
    [ Upstream commit 35fc4cd34426c242ab015ef280853b7bff101f48 ]
    
    Users can initiate resets to specific SCSI device/target/host through
    IOCTL. When this happens, the SCSI cmd passed to eh_device/target/host
    _reset_handler() callbacks is initialized with a request whose tag is -1.
    In this case it is not right for eh_device_reset_handler() callback to
    count on the LUN get from hba->lrb[-1]. Fix it by getting LUN from the SCSI
    device associated with the SCSI cmd.
    
    Link: https://lore.kernel.org/r/1609157080-26283-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c43ee6ada6efcdc3982dc4501f0e0c6c879ec283
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Thu Dec 17 11:54:01 2020 +0100

    ASoC: Intel: haswell: Add missing pm_ops
    
    [ Upstream commit bb224c3e3e41d940612d4cc9573289cdbd5cb8f5 ]
    
    haswell machine board is missing pm_ops what prevents it from undergoing
    suspend-resume procedure successfully. Assign default snd_soc_pm_ops so
    this is no longer the case.
    
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/20201217105401.27865-1-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c7ce57fad75e06d0d49ab85818a1b2f6ab9dd15
Author: Pan Bian <bianpan2016@163.com>
Date:   Tue Jan 19 04:11:27 2021 -0800

    drm/atomic: put state on error path
    
    commit 43b67309b6b2a3c08396cc9b3f83f21aa529d273 upstream.
    
    Put the state before returning error code.
    
    Fixes: 44596b8c4750 ("drm/atomic: Unify conflicting encoder handling.")
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210119121127.84127-1-bianpan2016@163.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09b9ea8848cbeed99e2741b34afee0b3ee0ea625
Author: Hannes Reinecke <hare@suse.de>
Date:   Thu Jan 21 18:50:56 2021 +0100

    dm: avoid filesystem lookup in dm_get_dev_t()
    
    commit 809b1e4945774c9ec5619a8f4e2189b7b3833c0c upstream.
    
    This reverts commit
    644bda6f3460 ("dm table: fall back to getting device using name_to_dev_t()")
    
    dm_get_dev_t() is just used to convert an arbitrary 'path' string
    into a dev_t. It doesn't presume that the device is present; that
    check will be done later, as the only caller is dm_get_device(),
    which does a dm_get_table_device() later on, which will properly
    open the device.
    
    So if the path string already _is_ in major:minor representation
    we can convert it directly, avoiding a recursion into the filesystem
    to lookup the block device.
    
    This avoids a hang in multipath_message() when the filesystem is
    inaccessible.
    
    Fixes: 644bda6f3460 ("dm table: fall back to getting device using name_to_dev_t()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3efa249a9d6ad3802e89d9a3c56784860c6ebad3
Author: Alex Leibovich <alexl@marvell.com>
Date:   Fri Dec 11 15:16:56 2020 +0100

    mmc: sdhci-xenon: fix 1.8v regulator stabilization
    
    commit 1a3ed0dc3594d99ff341ec63865a40519ea24b8d upstream.
    
    Automatic Clock Gating is a feature used for the power consumption
    optimisation. It turned out that during early init phase it may prevent the
    stable voltage switch to 1.8V - due to that on some platforms an endless
    printout in dmesg can be observed: "mmc1: 1.8V regulator output did not
    became stable" Fix the problem by disabling the ACG at very beginning of
    the sdhci_init and let that be enabled later.
    
    Fixes: 3a3748dba881 ("mmc: sdhci-xenon: Add Marvell Xenon SDHC core functionality")
    Signed-off-by: Alex Leibovich <alexl@marvell.com>
    Signed-off-by: Marcin Wojtas <mw@semihalf.com>
    Cc: stable@vger.kernel.org
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20201211141656.24915-1-mw@semihalf.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef176821b6efe5016f88e95b13964360b33a2679
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Jan 15 22:57:52 2021 +0100

    ACPI: scan: Make acpi_bus_get_device() clear return pointer on error
    
    commit 78a18fec5258c8df9435399a1ea022d73d3eceb9 upstream.
    
    Set the acpi_device pointer which acpi_bus_get_device() returns-by-
    reference to NULL on errors.
    
    We've recently had 2 cases where callers of acpi_bus_get_device()
    did not properly error check the return value, so set the returned-
    by-reference acpi_device pointer to NULL, because at least some
    callers of acpi_bus_get_device() expect that to be done on errors.
    
    [ rjw: This issue was exposed by commit 71da201f38df ("ACPI: scan:
      Defer enumeration of devices with _DEP lists") which caused it to
      be much more likely to occur on some systems, but the real defect
      had been introduced by an earlier commit. ]
    
    Fixes: 40e7fcb19293 ("ACPI: Add _DEP support to fix battery issue on Asus T100TA")
    Fixes: bcfcd409d4db ("usb: split code locating ACPI companion into port and device")
    Reported-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Tested-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Diagnosed-by: Rafael J. Wysocki <rafael@kernel.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Cc: All applicable <stable@vger.kernel.org>
    [ rjw: Subject and changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a216cf04964a1968faa95d7ed0d87469a1a0104c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Jan 14 08:24:53 2021 +0100

    ALSA: hda/via: Add minimum mute flag
    
    commit 67ea698c3950d10925be33c21ca49ffb64e21842 upstream.
    
    It turned out that VIA codecs also mute the sound in the lowest mixer
    level.  Turn on the dac_min_mute flag to indicate the mute-as-minimum
    in TLV like already done in Conexant and IDT codecs.
    
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=210559
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210114072453.11379-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87a1061b0a11bac953b8dd4cc545c03be434eb11
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jan 15 10:34:28 2021 +0100

    ALSA: seq: oss: Fix missing error check in snd_seq_oss_synth_make_info()
    
    commit 217bfbb8b0bfa24619b11ab75c135fec99b99b20 upstream.
    
    snd_seq_oss_synth_make_info() didn't check the error code from
    snd_seq_oss_midi_make_info(), and this leads to the call of strlcpy()
    with the uninitialized string as the source, which may lead to the
    access over the limit.
    
    Add the proper error check for avoiding the failure.
    
    Reported-by: syzbot+e42504ff21cff05a595f@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210115093428.15882-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 016e7d7de0019b7e6b626b4647fa4a7e4a830c8a
Author: Mikko Perttunen <mperttunen@nvidia.com>
Date:   Tue Jan 12 12:22:25 2021 +0200

    i2c: bpmp-tegra: Ignore unknown I2C_M flags
    
    commit bc1c2048abbe3c3074b4de91d213595c57741a6b upstream.
    
    In order to not to start returning errors when new I2C_M flags are
    added, change behavior to just ignore all flags that we don't know
    about. This includes the I2C_M_DMA_SAFE flag that already exists but
    causes -EINVAL to be returned for valid transactions.
    
    Cc: stable@vger.kernel.org # v4.19+
    Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45bb06b3b6a45cf2a36c0259b04381d1984e926d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 23 15:48:48 2021 +0100

    Linux 4.14.217
    
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210122160828.128883527@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e46efeb59309d92bc7e7d0760de9cd913690e57
Author: Michael Hennerich <michael.hennerich@analog.com>
Date:   Thu Jan 14 17:42:17 2021 +0200

    spi: cadence: cache reference clock rate during probe
    
    commit 4d163ad79b155c71bf30366dc38f8d2502f78844 upstream.
    
    The issue is that using SPI from a callback under the CCF lock will
    deadlock, since this code uses clk_get_rate().
    
    Fixes: c474b38665463 ("spi: Add driver for Cadence SPI controller")
    Signed-off-by: Michael Hennerich <michael.hennerich@analog.com>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Link: https://lore.kernel.org/r/20210114154217.51996-1-alexandru.ardelean@analog.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23dc14bf805f25e87f964316464f80d3600b98b8
Author: Aya Levin <ayal@nvidia.com>
Date:   Thu Jan 7 15:50:18 2021 +0200

    net: ipv6: Validate GSO SKB before finish IPv6 processing
    
    [ Upstream commit b210de4f8c97d57de051e805686248ec4c6cfc52 ]
    
    There are cases where GSO segment's length exceeds the egress MTU:
     - Forwarding of a TCP GRO skb, when DF flag is not set.
     - Forwarding of an skb that arrived on a virtualisation interface
       (virtio-net/vhost/tap) with TSO/GSO size set by other network
       stack.
     - Local GSO skb transmitted on an NETIF_F_TSO tunnel stacked over an
       interface with a smaller MTU.
     - Arriving GRO skb (or GSO skb in a virtualised environment) that is
       bridged to a NETIF_F_TSO tunnel stacked over an interface with an
       insufficient MTU.
    
    If so:
     - Consume the SKB and its segments.
     - Issue an ICMP packet with 'Packet Too Big' message containing the
       MTU, allowing the source host to reduce its Path MTU appropriately.
    
    Note: These cases are handled in the same manner in IPv4 output finish.
    This patch aligns the behavior of IPv6 and the one of IPv4.
    
    Fixes: 9e50849054a4 ("netfilter: ipv6: move POSTROUTING invocation before fragmentation")
    Signed-off-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Link: https://lore.kernel.org/r/1610027418-30438-1-git-send-email-ayal@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f010c87b01ac83483e2d9f35a573293d8192634
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Mon Jan 13 18:42:26 2020 -0500

    net: skbuff: disambiguate argument and member for skb_list_walk_safe helper
    
    commit 5eee7bd7e245914e4e050c413dfe864e31805207 upstream.
    
    This worked before, because we made all callers name their next pointer
    "next". But in trying to be more "drop-in" ready, the silliness here is
    revealed. This commit fixes the problem by making the macro argument and
    the member use different names.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90702a4606fcccd10d0ba2fdd472a8eb86e6e703
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jan 8 16:59:02 2020 -0500

    net: introduce skb_list_walk_safe for skb segment walking
    
    commit dcfea72e79b0aa7a057c8f6024169d86a1bbc84b upstream.
    
    As part of the continual effort to remove direct usage of skb->next and
    skb->prev, this patch adds a helper for iterating through the
    singly-linked variant of skb lists, which are used for lists of GSO
    packet. The name "skb_list_..." has been chosen to match the existing
    function, "kfree_skb_list, which also operates on these singly-linked
    lists, and the "..._walk_safe" part is the same idiom as elsewhere in
    the kernel.
    
    This patch removes the helper from wireguard and puts it into
    linux/skbuff.h, while making it a bit more robust for general usage. In
    particular, parenthesis are added around the macro argument usage, and it
    now accounts for trying to iterate through an already-null skb pointer,
    which will simply run the iteration zero times. This latter enhancement
    means it can be used to replace both do { ... } while and while (...)
    open-coded idioms.
    
    This should take care of these three possible usages, which match all
    current methods of iterations.
    
    skb_list_walk_safe(segs, skb, next) { ... }
    skb_list_walk_safe(skb, skb, next) { ... }
    skb_list_walk_safe(segs, skb, segs) { ... }
    
    Gcc appears to generate efficient code for each of these.
    
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [ Just the skbuff.h changes for backporting - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5667bc4aabe4586f909f3cda671fdb1e6ca9387
Author: Edward Cree <ecree@solarflare.com>
Date:   Tue Dec 4 17:37:57 2018 +0000

    net: use skb_list_del_init() to remove from RX sublists
    
    [ Upstream commit 22f6bbb7bcfcef0b373b0502a7ff390275c575dd ]
    
    list_del() leaves the skb->next pointer poisoned, which can then lead to
     a crash in e.g. OVS forwarding.  For example, setting up an OVS VXLAN
     forwarding bridge on sfc as per:
    
    ========
    $ ovs-vsctl show
    5dfd9c47-f04b-4aaa-aa96-4fbb0a522a30
        Bridge "br0"
            Port "br0"
                Interface "br0"
                    type: internal
            Port "enp6s0f0"
                Interface "enp6s0f0"
            Port "vxlan0"
                Interface "vxlan0"
                    type: vxlan
                    options: {key="1", local_ip="10.0.0.5", remote_ip="10.0.0.4"}
        ovs_version: "2.5.0"
    ========
    (where 10.0.0.5 is an address on enp6s0f1)
    and sending traffic across it will lead to the following panic:
    ========
    general protection fault: 0000 [#1] SMP PTI
    CPU: 5 PID: 0 Comm: swapper/5 Not tainted 4.20.0-rc3-ehc+ #701
    Hardware name: Dell Inc. PowerEdge R710/0M233H, BIOS 6.4.0 07/23/2013
    RIP: 0010:dev_hard_start_xmit+0x38/0x200
    Code: 53 48 89 fb 48 83 ec 20 48 85 ff 48 89 54 24 08 48 89 4c 24 18 0f 84 ab 01 00 00 48 8d 86 90 00 00 00 48 89 f5 48 89 44 24 10 <4c> 8b 33 48 c7 03 00 00 00 00 48 8b 05 c7 d1 b3 00 4d 85 f6 0f 95
    RSP: 0018:ffff888627b437e0 EFLAGS: 00010202
    RAX: 0000000000000000 RBX: dead000000000100 RCX: ffff88862279c000
    RDX: ffff888614a342c0 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffff888618a88000 R08: 0000000000000001 R09: 00000000000003e8
    R10: 0000000000000000 R11: ffff888614a34140 R12: 0000000000000000
    R13: 0000000000000062 R14: dead000000000100 R15: ffff888616430000
    FS:  0000000000000000(0000) GS:ffff888627b40000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f6d2bc6d000 CR3: 000000000200a000 CR4: 00000000000006e0
    Call Trace:
     <IRQ>
     __dev_queue_xmit+0x623/0x870
     ? masked_flow_lookup+0xf7/0x220 [openvswitch]
     ? ep_poll_callback+0x101/0x310
     do_execute_actions+0xaba/0xaf0 [openvswitch]
     ? __wake_up_common+0x8a/0x150
     ? __wake_up_common_lock+0x87/0xc0
     ? queue_userspace_packet+0x31c/0x5b0 [openvswitch]
     ovs_execute_actions+0x47/0x120 [openvswitch]
     ovs_dp_process_packet+0x7d/0x110 [openvswitch]
     ovs_vport_receive+0x6e/0xd0 [openvswitch]
     ? dst_alloc+0x64/0x90
     ? rt_dst_alloc+0x50/0xd0
     ? ip_route_input_slow+0x19a/0x9a0
     ? __udp_enqueue_schedule_skb+0x198/0x1b0
     ? __udp4_lib_rcv+0x856/0xa30
     ? __udp4_lib_rcv+0x856/0xa30
     ? cpumask_next_and+0x19/0x20
     ? find_busiest_group+0x12d/0xcd0
     netdev_frame_hook+0xce/0x150 [openvswitch]
     __netif_receive_skb_core+0x205/0xae0
     __netif_receive_skb_list_core+0x11e/0x220
     netif_receive_skb_list+0x203/0x460
     ? __efx_rx_packet+0x335/0x5e0 [sfc]
     efx_poll+0x182/0x320 [sfc]
     net_rx_action+0x294/0x3c0
     __do_softirq+0xca/0x297
     irq_exit+0xa6/0xb0
     do_IRQ+0x54/0xd0
     common_interrupt+0xf/0xf
     </IRQ>
    ========
    So, in all listified-receive handling, instead pull skbs off the lists with
     skb_list_del_init().
    
    Fixes: 9af86f933894 ("net: core: fix use-after-free in __netif_receive_skb_list_core")
    Fixes: 7da517a3bc52 ("net: core: Another step of skb receive list processing")
    Fixes: a4ca8b7df73c ("net: ipv4: fix drop handling in ip_list_rcv() and ip_list_rcv_finish()")
    Fixes: d8269e2cbf90 ("net: ipv6: listify ipv6_rcv() and ip6_rcv_finish()")
    Signed-off-by: Edward Cree <ecree@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [ for 4.14.y and older, just take the skbuff.h change - gregkh ]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9922f6917bda030f4aa8f69e8107e506e7cec08
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    [ Upstream commit b77413446408fdd256599daf00d5be72b5f3e7c6 ]
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7d86fe9e708169523ab3bf129587bbc7f2f5e87
Author: David Howells <dhowells@redhat.com>
Date:   Tue Jan 12 15:23:51 2021 +0000

    rxrpc: Fix handling of an unsupported token type in rxrpc_read()
    
    [ Upstream commit d52e419ac8b50c8bef41b398ed13528e75d7ad48 ]
    
    Clang static analysis reports the following:
    
    net/rxrpc/key.c:657:11: warning: Assigned value is garbage or undefined
                    toksize = toksizes[tok++];
                            ^ ~~~~~~~~~~~~~~~
    
    rxrpc_read() contains two consecutive loops.  The first loop calculates the
    token sizes and stores the results in toksizes[] and the second one uses
    the array.  When there is an error in identifying the token in the first
    loop, the token is skipped, no change is made to the toksizes[] array.
    When the same error happens in the second loop, the token is not skipped.
    This will cause the toksizes[] array to be out of step and will overrun
    past the calculated sizes.
    
    Fix this by making both loops log a message and return an error in this
    case.  This should only happen if a new token type is incompletely
    implemented, so it should normally be impossible to trigger this.
    
    Fixes: 9a059cd5ca7d ("rxrpc: Downgrade the BUG() for unsupported token type in rxrpc_read()")
    Reported-by: Tom Rix <trix@redhat.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Tom Rix <trix@redhat.com>
    Link: https://lore.kernel.org/r/161046503122.2445787.16714129930607546635.stgit@warthog.procyon.org.uk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d010cb90288438bc94f8fcbbeff3ec664aebcbc6
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jan 13 08:18:19 2021 -0800

    net: avoid 32 x truesize under-estimation for tiny skbs
    
    [ Upstream commit 3226b158e67cfaa677fd180152bfb28989cb2fac ]
    
    Both virtio net and napi_get_frags() allocate skbs
    with a very small skb->head
    
    While using page fragments instead of a kmalloc backed skb->head might give
    a small performance improvement in some cases, there is a huge risk of
    under estimating memory usage.
    
    For both GOOD_COPY_LEN and GRO_MAX_HEAD, we can fit at least 32 allocations
    per page (order-3 page in x86), or even 64 on PowerPC
    
    We have been tracking OOM issues on GKE hosts hitting tcp_mem limits
    but consuming far more memory for TCP buffers than instructed in tcp_mem[2]
    
    Even if we force napi_alloc_skb() to only use order-0 pages, the issue
    would still be there on arches with PAGE_SIZE >= 32768
    
    This patch makes sure that small skb head are kmalloc backed, so that
    other objects in the slab page can be reused instead of being held as long
    as skbs are sitting in socket queues.
    
    Note that we might in the future use the sk_buff napi cache,
    instead of going through a more expensive __alloc_skb()
    
    Another idea would be to use separate page sizes depending
    on the allocated length (to never have more than 4 frags per page)
    
    I would like to thank Greg Thelen for his precious help on this matter,
    analysing crash dumps is always a time consuming task.
    
    Fixes: fd11a83dd363 ("net: Pull out core bits of __netdev_alloc_skb and add __napi_alloc_skb")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Greg Thelen <gthelen@google.com>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/20210113161819.1155526-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9628a5fc38734dabdfec1606b888fa8289c016a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Jan 13 17:29:47 2021 -0800

    net: sit: unregister_netdevice on newlink's error path
    
    [ Upstream commit 47e4bb147a96f1c9b4e7691e7e994e53838bfff8 ]
    
    We need to unregister the netdevice if config failed.
    .ndo_uninit takes care of most of the heavy lifting.
    
    This was uncovered by recent commit c269a24ce057 ("net: make
    free_netdev() more lenient with unregistering devices").
    Previously the partially-initialized device would be left
    in the system.
    
    Reported-and-tested-by: syzbot+2393580080a2da190f04@syzkaller.appspotmail.com
    Fixes: e2f1f072db8d ("sit: allow to configure 6rd tunnels via netlink")
    Acked-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Link: https://lore.kernel.org/r/20210114012947.2515313-1-kuba@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf852ebc7624f269744b8d283e7e09f35e144aae
Author: David Wu <david.wu@rock-chips.com>
Date:   Wed Jan 13 11:41:09 2021 +0800

    net: stmmac: Fixed mtu channged by cache aligned
    
    [ Upstream commit 5b55299eed78538cc4746e50ee97103a1643249c ]
    
    Since the original mtu is not used when the mtu is updated,
    the mtu is aligned with cache, this will get an incorrect.
    For example, if you want to configure the mtu to be 1500,
    but mtu 1536 is configured in fact.
    
    Fixed: eaf4fac478077 ("net: stmmac: Do not accept invalid MTU values")
    Signed-off-by: David Wu <david.wu@rock-chips.com>
    Link: https://lore.kernel.org/r/20210113034109.27865-1-david.wu@rock-chips.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19a8b8d0c3548fe1330c54163ac3808f7e209256
Author: Petr Machata <petrm@nvidia.com>
Date:   Mon Jan 11 18:07:07 2021 +0100

    net: dcb: Accept RTM_GETDCB messages carrying set-like DCB commands
    
    [ Upstream commit df85bc140a4d6cbaa78d8e9c35154e1a2f0622c7 ]
    
    In commit 826f328e2b7e ("net: dcb: Validate netlink message in DCB
    handler"), Linux started rejecting RTM_GETDCB netlink messages if they
    contained a set-like DCB_CMD_ command.
    
    The reason was that privileges were only verified for RTM_SETDCB messages,
    but the value that determined the action to be taken is the command, not
    the message type. And validation of message type against the DCB command
    was the obvious missing piece.
    
    Unfortunately it turns out that mlnx_qos, a somewhat widely deployed tool
    for configuration of DCB, accesses the DCB set-like APIs through
    RTM_GETDCB.
    
    Therefore do not bounce the discrepancy between message type and command.
    Instead, in addition to validating privileges based on the actual message
    type, validate them also based on the expected message type. This closes
    the loophole of allowing DCB configuration on non-admin accounts, while
    maintaining backward compatibility.
    
    Fixes: 2f90b8657ec9 ("ixgbe: this patch adds support for DCB to the kernel and ixgbe driver")
    Fixes: 826f328e2b7e ("net: dcb: Validate netlink message in DCB handler")
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Link: https://lore.kernel.org/r/a3edcfda0825f2aa2591801c5232f2bbf2d8a554.1610384801.git.me@pmachata.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a0ea2a33f627898ddec8e355a76158e32ee8be2
Author: Petr Machata <me@pmachata.org>
Date:   Tue Dec 22 22:49:44 2020 +0100

    net: dcb: Validate netlink message in DCB handler
    
    [ Upstream commit 826f328e2b7e8854dd42ea44e6519cd75018e7b1 ]
    
    DCB uses the same handler function for both RTM_GETDCB and RTM_SETDCB
    messages. dcb_doit() bounces RTM_SETDCB mesasges if the user does not have
    the CAP_NET_ADMIN capability.
    
    However, the operation to be performed is not decided from the DCB message
    type, but from the DCB command. Thus DCB_CMD_*_GET commands are used for
    reading DCB objects, the corresponding SET and DEL commands are used for
    manipulation.
    
    The assumption is that set-like commands will be sent via an RTM_SETDCB
    message, and get-like ones via RTM_GETDCB. However, this assumption is not
    enforced.
    
    It is therefore possible to manipulate DCB objects without CAP_NET_ADMIN
    capability by sending the corresponding command in an RTM_GETDCB message.
    That is a bug. Fix it by validating the type of the request message against
    the type used for the response.
    
    Fixes: 2f90b8657ec9 ("ixgbe: this patch adds support for DCB to the kernel and ixgbe driver")
    Signed-off-by: Petr Machata <me@pmachata.org>
    Link: https://lore.kernel.org/r/a2a9b88418f3a58ef211b718f2970128ef9e3793.1608673640.git.me@pmachata.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e39bf9facf04b7a86f2e27e95b2d04ffd7b9af16
Author: Willem de Bruijn <willemb@google.com>
Date:   Sat Jan 9 17:18:34 2021 -0500

    esp: avoid unneeded kmap_atomic call
    
    [ Upstream commit 9bd6b629c39e3fa9e14243a6d8820492be1a5b2e ]
    
    esp(6)_output_head uses skb_page_frag_refill to allocate a buffer for
    the esp trailer.
    
    It accesses the page with kmap_atomic to handle highmem. But
    skb_page_frag_refill can return compound pages, of which
    kmap_atomic only maps the first underlying page.
    
    skb_page_frag_refill does not return highmem, because flag
    __GFP_HIGHMEM is not set. ESP uses it in the same manner as TCP.
    That also does not call kmap_atomic, but directly uses page_address,
    in skb_copy_to_page_nocache. Do the same for ESP.
    
    This issue has become easier to trigger with recent kmap local
    debugging feature CONFIG_DEBUG_KMAP_LOCAL_FORCE_MAP.
    
    Fixes: cac2661c53f3 ("esp4: Avoid skb_cow_data whenever possible")
    Fixes: 03e2a30f6a27 ("esp6: Avoid skb_cow_data whenever possible")
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4e0f098ac728bc5e8bfd2bfb4f8c555cd0903caf
Author: Andrey Zhizhikin <andrey.zhizhikin@leica-geosystems.com>
Date:   Fri Jan 8 09:58:39 2021 +0000

    rndis_host: set proper input size for OID_GEN_PHYSICAL_MEDIUM request
    
    [ Upstream commit e56b3d94d939f52d46209b9e1b6700c5bfff3123 ]
    
    MSFT ActiveSync implementation requires that the size of the response for
    incoming query is to be provided in the request input length. Failure to
    set the input size proper results in failed request transfer, where the
    ActiveSync counterpart reports the NDIS_STATUS_INVALID_LENGTH (0xC0010014L)
    error.
    
    Set the input size for OID_GEN_PHYSICAL_MEDIUM query to the expected size
    of the response in order for the ActiveSync to properly respond to the
    request.
    
    Fixes: 039ee17d1baa ("rndis_host: Add RNDIS physical medium checking into generic_rndis_bind()")
    Signed-off-by: Andrey Zhizhikin <andrey.zhizhikin@leica-geosystems.com>
    Link: https://lore.kernel.org/r/20210108095839.3335-1-andrey.zhizhikin@leica-geosystems.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9c155c25b658000b922fd9589eed34af4e27aa6
Author: Manish Chopra <manishc@marvell.com>
Date:   Thu Jan 7 02:15:20 2021 -0800

    netxen_nic: fix MSI/MSI-x interrupts
    
    [ Upstream commit a2bc221b972db91e4be1970e776e98f16aa87904 ]
    
    For all PCI functions on the netxen_nic adapter, interrupt
    mode (INTx or MSI) configuration is dependent on what has
    been configured by the PCI function zero in the shared
    interrupt register, as these adapters do not support mixed
    mode interrupts among the functions of a given adapter.
    
    Logic for setting MSI/MSI-x interrupt mode in the shared interrupt
    register based on PCI function id zero check is not appropriate for
    all family of netxen adapters, as for some of the netxen family
    adapters PCI function zero is not really meant to be probed/loaded
    in the host but rather just act as a management function on the device,
    which caused all the other PCI functions on the adapter to always use
    legacy interrupt (INTx) mode instead of choosing MSI/MSI-x interrupt mode.
    
    This patch replaces that check with port number so that for all
    type of adapters driver attempts for MSI/MSI-x interrupt modes.
    
    Fixes: b37eb210c076 ("netxen_nic: Avoid mixed mode interrupts")
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Link: https://lore.kernel.org/r/20210107101520.6735-1-manishc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0625005bba0b05db9b2e61cdd5281122fd3de1e5
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Mon Jan 11 16:01:29 2021 -0500

    nfsd4: readdirplus shouldn't return parent of export
    
    commit 51b2ee7d006a736a9126e8111d1f24e4fd0afaa6 upstream.
    
    If you export a subdirectory of a filesystem, a READDIRPLUS on the root
    of that export will return the filehandle of the parent with the ".."
    entry.
    
    The filehandle is optional, so let's just not return the filehandle for
    ".." if we're at the root of an export.
    
    Note that once the client learns one filehandle outside of the export,
    they can trivially access the rest of the export using further lookups.
    
    However, it is also not very difficult to guess filehandles outside of
    the export.  So exporting a subdirectory of a filesystem should
    considered equivalent to providing access to the entire filesystem.  To
    avoid confusion, we recommend only exporting entire filesystems.
    
    Reported-by: Youjipeng <wangzhibei1999@gmail.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7312b6ec135e05c92cff404f607607a8feecae5e
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Fri Sep 11 09:25:12 2020 +1200

    usb: ohci: Make distrust_firmware param default to false
    
    commit c4005a8f65edc55fb1700dfc5c1c3dc58be80209 upstream.
    
    The 'distrust_firmware' module parameter dates from 2004 and the USB
    subsystem is a lot more mature and reliable now than it was then.
    Alter the default to false now.
    
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Link: https://lore.kernel.org/r/20200910212512.16670-2-hamish.martin@alliedtelesis.co.nz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b5711c51b9cfd362237857b34d05c3fa2b0d78f
Author: Jesper Dangaard Brouer <brouer@redhat.com>
Date:   Fri Jan 8 12:44:33 2021 +0100

    netfilter: conntrack: fix reading nf_conntrack_buckets
    
    commit f6351c3f1c27c80535d76cac2299aec44c36291e upstream.
    
    The old way of changing the conntrack hashsize runtime was through changing
    the module param via file /sys/module/nf_conntrack/parameters/hashsize. This
    was extended to sysctl change in commit 3183ab8997a4 ("netfilter: conntrack:
    allow increasing bucket size via sysctl too").
    
    The commit introduced second "user" variable nf_conntrack_htable_size_user
    which shadow actual variable nf_conntrack_htable_size. When hashsize is
    changed via module param this "user" variable isn't updated. This results in
    sysctl net/netfilter/nf_conntrack_buckets shows the wrong value when users
    update via the old way.
    
    This patch fix the issue by always updating "user" variable when reading the
    proc file. This will take care of changes to the actual variable without
    sysctl need to be aware.
    
    Fixes: 3183ab8997a4 ("netfilter: conntrack: allow increasing bucket size via sysctl too")
    Reported-by: Yoel Caspersen <yoel@kviknet.dk>
    Signed-off-by: Jesper Dangaard Brouer <brouer@redhat.com>
    Acked-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 711050a75dcf802d0ee3040e4dd233b3079b4277
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 11 14:02:50 2021 +0100

    ALSA: fireface: Fix integer overflow in transmit_midi_msg()
    
    commit e7c22eeaff8565d9a8374f320238c251ca31480b upstream.
    
    As snd_ff.rx_bytes[] is unsigned int, and NSEC_PER_SEC is 1000000000L,
    the second multiplication in
    
        ff->rx_bytes[port] * 8 * NSEC_PER_SEC / 31250
    
    always overflows on 32-bit platforms, truncating the result.  Fix this
    by precalculating "NSEC_PER_SEC / 31250", which is an integer constant.
    
    Note that this assumes ff->rx_bytes[port] <= 16777.
    
    Fixes: 19174295788de77d ("ALSA: fireface: add transaction support")
    Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20210111130251.361335-2-geert+renesas@glider.be
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9300b7846fa7d110bcae38d5c2e3d53e13351ec
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Mon Jan 11 14:02:51 2021 +0100

    ALSA: firewire-tascam: Fix integer overflow in midi_port_work()
    
    commit 9f65df9c589f249435255da37a5dd11f1bc86f4d upstream.
    
    As snd_fw_async_midi_port.consume_bytes is unsigned int, and
    NSEC_PER_SEC is 1000000000L, the second multiplication in
    
        port->consume_bytes * 8 * NSEC_PER_SEC / 31250
    
    always overflows on 32-bit platforms, truncating the result.  Fix this
    by precalculating "NSEC_PER_SEC / 31250", which is an integer constant.
    
    Note that this assumes port->consume_bytes <= 16777.
    
    Fixes: 531f471834227d03 ("ALSA: firewire-lib/firewire-tascam: localize async midi port")
    Reviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/20210111130251.361335-3-geert+renesas@glider.be
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9faa6de04ff73d092be605395b7e5d08474121c
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Wed Jan 6 18:19:05 2021 -0500

    dm: eliminate potential source of excessive kernel log noise
    
    commit 0378c625afe80eb3f212adae42cc33c9f6f31abf upstream.
    
    There wasn't ever a real need to log an error in the kernel log for
    ioctls issued with insufficient permissions. Simply return an error
    and if an admin/user is sufficiently motivated they can enable DM's
    dynamic debugging to see an explanation for why the ioctls were
    disallowed.
    
    Reported-by: Nir Soffer <nsoffer@redhat.com>
    Fixes: e980f62353c6 ("dm: don't allow ioctls to targets that don't map to whole devices")
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 796275ab82e26ced863743af887810ae7d80ace1
Author: j.nixdorf@avm.de <j.nixdorf@avm.de>
Date:   Tue Jan 5 15:17:01 2021 +0100

    net: sunrpc: interpret the return value of kstrtou32 correctly
    
    commit 86b53fbf08f48d353a86a06aef537e78e82ba721 upstream.
    
    A return value of 0 means success. This is documented in lib/kstrtox.c.
    
    This was found by trying to mount an NFS share from a link-local IPv6
    address with the interface specified by its index:
    
      mount("[fe80::1%1]:/srv/nfs", "/mnt", "nfs", 0, "nolock,addr=fe80::1%1")
    
    Before this commit this failed with EINVAL and also caused the following
    message in dmesg:
    
      [...] NFS: bad IP address specified: addr=fe80::1%1
    
    The syscall using the same address based on the interface name instead
    of its index succeeds.
    
    Credits for this patch go to my colleague Christian Speich, who traced
    the origin of this bug to this line of code.
    
    Signed-off-by: Johannes Nixdorf <j.nixdorf@avm.de>
    Fixes: 00cfaa943ec3 ("replace strict_strto calls")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 705ba179ed24cdad28874df53d0299ecfd9e7014
Author: Jann Horn <jannh@google.com>
Date:   Tue Jan 12 15:49:04 2021 -0800

    mm, slub: consider rest of partial list if acquire_slab() fails
    
    commit 8ff60eb052eeba95cfb3efe16b08c9199f8121cf upstream.
    
    acquire_slab() fails if there is contention on the freelist of the page
    (probably because some other CPU is concurrently freeing an object from
    the page).  In that case, it might make sense to look for a different page
    (since there might be more remote frees to the page from other CPUs, and
    we don't want contention on struct page).
    
    However, the current code accidentally stops looking at the partial list
    completely in that case.  Especially on kernels without CONFIG_NUMA set,
    this means that get_partial() fails and new_slab_objects() falls back to
    new_slab(), allocating new pages.  This could lead to an unnecessary
    increase in memory fragmentation.
    
    Link: https://lkml.kernel.org/r/20201228130853.1871516-1-jannh@google.com
    Fixes: 7ced37197196 ("slub: Acquire_slab() avoid loop")
    Signed-off-by: Jann Horn <jannh@google.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Acked-by: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0eee726d6fe70ae8d77f4a0e4580ea2fcfe3f5a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Dec 26 15:42:48 2020 +0800

    RDMA/usnic: Fix memleak in find_free_vf_and_create_qp_grp
    
    commit a306aba9c8d869b1fdfc8ad9237f1ed718ea55e6 upstream.
    
    If usnic_ib_qp_grp_create() fails at the first call, dev_list
    will not be freed on error, which leads to memleak.
    
    Fixes: e3cf00d0a87f ("IB/usnic: Add Cisco VIC low-level hardware driver")
    Link: https://lore.kernel.org/r/20201226074248.2893-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c978b31d4e7a77478277eb114ecdbb9d802fb8a
Author: Jan Kara <jack@suse.cz>
Date:   Wed Dec 16 11:18:43 2020 +0100

    ext4: fix superblock checksum failure when setting password salt
    
    commit dfd56c2c0c0dbb11be939b804ddc8d5395ab3432 upstream.
    
    When setting password salt in the superblock, we forget to recompute the
    superblock checksum so it will not match until the next superblock
    modification which recomputes the checksum. Fix it.
    
    CC: Michael Halcrow <mhalcrow@google.com>
    Reported-by: Andreas Dilger <adilger@dilger.ca>
    Fixes: 9bd8212f981e ("ext4 crypto: add encryption policy and password salt support")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20201216101844.22917-8-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 694f9f3d1f2e268d85e4488916f5a54e83fefcf9
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Jan 10 15:58:08 2021 -0500

    NFS: nfs_igrab_and_active must first reference the superblock
    
    commit 896567ee7f17a8a736cda8a28cc987228410a2ac upstream.
    
    Before referencing the inode, we must ensure that the superblock can be
    referenced. Otherwise, we can end up with iput() calling superblock
    operations that are no longer valid or accessible.
    
    Fixes: ea7c38fef0b7 ("NFSv4: Ensure we reference the inode for return-on-close in delegreturn")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3eef6b40803b57ac2744bc2d5026b5350f9cf2c
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Jan 4 13:35:46 2021 -0500

    pNFS: Mark layout for return if return-on-close was not sent
    
    commit 67bbceedc9bb8ad48993a8bd6486054756d711f4 upstream.
    
    If the layout return-on-close failed because the layoutreturn was never
    sent, then we should mark the layout for return again.
    
    Fixes: 9c47b18cf722 ("pNFS: Ensure we do clear the return-on-close layout stateid on fatal errors")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84f1a332049b57bd7e2c1cd8a4cc7c1df58fbcc2
Author: Dave Wysochanski <dwysocha@redhat.com>
Date:   Fri Dec 11 05:12:51 2020 -0500

    NFS4: Fix use-after-free in trace_event_raw_event_nfs4_set_lock
    
    commit 3d1a90ab0ed93362ec8ac85cf291243c87260c21 upstream.
    
    It is only safe to call the tracepoint before rpc_put_task() because
    'data' is freed inside nfs4_lock_release (rpc_release).
    
    Fixes: 48c9579a1afe ("Adding stateid information to tracepoints")
    Signed-off-by: Dave Wysochanski <dwysocha@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91091c2eb0cca2a1889b50b9124d29a9ae51b5ac
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Dec 11 13:06:52 2020 +0300

    ASoC: Intel: fix error code cnl_set_dsp_D0()
    
    commit f373a811fd9a69fc8bafb9bcb41d2cfa36c62665 upstream.
    
    Return -ETIMEDOUT if the dsp boot times out instead of returning
    success.
    
    Fixes: cb6a55284629 ("ASoC: Intel: cnl: Add sst library functions for cnl platform")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Link: https://lore.kernel.org/r/X9NEvCzuN+IObnTN@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4739f60fe555e1b121ee30d2164f1356bbd1f030
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jan 5 14:43:46 2021 -0500

    dump_common_audit_data(): fix racy accesses to ->d_name
    
    commit d36a1dd9f77ae1e72da48f4123ed35627848507d upstream.
    
    We are not guaranteed the locking environment that would prevent
    dentry getting renamed right under us.  And it's possible for
    old long name to be freed after rename, leading to UAF here.
    
    Cc: stable@kernel.org # v2.6.2+
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3bf135e46e767d7ed4ad0451d216fdfe550196e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Dec 30 16:20:05 2020 +0100

    ARM: picoxcell: fix missing interrupt-parent properties
    
    [ Upstream commit bac717171971176b78c72d15a8b6961764ab197f ]
    
    dtc points out that the interrupts for some devices are not parsable:
    
    picoxcell-pc3x2.dtsi:45.19-49.5: Warning (interrupts_property): /paxi/gem@30000: Missing interrupt-parent
    picoxcell-pc3x2.dtsi:51.21-55.5: Warning (interrupts_property): /paxi/dmac@40000: Missing interrupt-parent
    picoxcell-pc3x2.dtsi:57.21-61.5: Warning (interrupts_property): /paxi/dmac@50000: Missing interrupt-parent
    picoxcell-pc3x2.dtsi:233.21-237.5: Warning (interrupts_property): /rwid-axi/axi2pico@c0000000: Missing interrupt-parent
    
    There are two VIC instances, so it's not clear which one needs to be
    used. I found the BSP sources that reference VIC0, so use that:
    
    https://github.com/r1mikey/meta-picoxcell/blob/master/recipes-kernel/linux/linux-picochip-3.0/0001-picoxcell-support-for-Picochip-picoXcell-SoC.patch
    
    Acked-by: Jamie Iles <jamie@jamieiles.com>
    Link: https://lore.kernel.org/r/20201230152010.3914962-1-arnd@kernel.org'
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a76dc5075f16f6c6ff4deb9126bef38228917566
Author: Shawn Guo <shawn.guo@linaro.org>
Date:   Thu Dec 31 19:35:25 2020 +0800

    ACPI: scan: add stub acpi_create_platform_device() for !CONFIG_ACPI
    
    [ Upstream commit ee61cfd955a64a58ed35cbcfc54068fcbd486945 ]
    
    It adds a stub acpi_create_platform_device() for !CONFIG_ACPI build, so
    that caller doesn't have to deal with !CONFIG_ACPI build issue.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06abd771b44fe186d28cedd0ea4671743f1382e1
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Jan 5 20:15:15 2021 +1100

    net: ethernet: fs_enet: Add missing MODULE_LICENSE
    
    [ Upstream commit 445c6198fe7be03b7d38e66fe8d4b3187bc251d4 ]
    
    Since commit 1d6cd3929360 ("modpost: turn missing MODULE_LICENSE()
    into error") the ppc32_allmodconfig build fails with:
    
      ERROR: modpost: missing MODULE_LICENSE() in drivers/net/ethernet/freescale/fs_enet/mii-fec.o
      ERROR: modpost: missing MODULE_LICENSE() in drivers/net/ethernet/freescale/fs_enet/mii-bitbang.o
    
    Add the missing MODULE_LICENSEs to fix the build. Both files include a
    copyright header indicating they are GPL v2.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51d29484a78efe13cebee8b7bbfaf11d2eed53fc
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:36:22 2021 +0100

    misdn: dsp: select CONFIG_BITREVERSE
    
    [ Upstream commit 51049bd903a81307f751babe15a1df8d197884e8 ]
    
    Without this, we run into a link error
    
    arm-linux-gnueabi-ld: drivers/isdn/mISDN/dsp_audio.o: in function `dsp_audio_generate_law_tables':
    (.text+0x30c): undefined reference to `byte_rev_table'
    arm-linux-gnueabi-ld: drivers/isdn/mISDN/dsp_audio.o:(.text+0x5e4): more undefined references to `byte_rev_table' follow
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90175992795c04e5bf13496bd1aa533bc3114dba
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Jan 4 19:44:53 2021 -0800

    arch/arc: add copy_user_page() to <asm/page.h> to fix build error on ARC
    
    [ Upstream commit 8a48c0a3360bf2bf4f40c980d0ec216e770e58ee ]
    
    fs/dax.c uses copy_user_page() but ARC does not provide that interface,
    resulting in a build error.
    
    Provide copy_user_page() in <asm/page.h>.
    
    ../fs/dax.c: In function 'copy_cow_page_dax':
    ../fs/dax.c:702:2: error: implicit declaration of function 'copy_user_page'; did you mean 'copy_to_user_page'? [-Werror=implicit-function-declaration]
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: linux-snps-arc@lists.infradead.org
    Cc: Dan Williams <dan.j.williams@intel.com>
    #Acked-by: Vineet Gupta <vgupta@synopsys.com> # v1
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Jan Kara <jack@suse.cz>
    Cc: linux-fsdevel@vger.kernel.org
    Cc: linux-nvdimm@lists.01.org
    #Reviewed-by: Ira Weiny <ira.weiny@intel.com> # v2
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc40bc469c1e469365278c5dfbcecedda16d8212
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Fri Dec 18 11:55:37 2020 +0100

    ethernet: ucc_geth: fix definition and size of ucc_geth_tx_global_pram
    
    [ Upstream commit 887078de2a23689e29d6fa1b75d7cbc544c280be ]
    
    Table 8-53 in the QUICC Engine Reference manual shows definitions of
    fields up to a size of 192 bytes, not just 128. But in table 8-111,
    one does find the text
    
      Base Address of the Global Transmitter Parameter RAM Page. [...]
      The user needs to allocate 128 bytes for this page. The address must
      be aligned to the page size.
    
    I've checked both rev. 7 (11/2015) and rev. 9 (05/2018) of the manual;
    they both have this inconsistency (and the table numbers are the
    same).
    
    Adding a bit of debug printing, on my board the struct
    ucc_geth_tx_global_pram is allocated at offset 0x880, while
    the (opaque) ucc_geth_thread_data_tx gets allocated immediately
    afterwards, at 0x900. So whatever the engine writes into the thread
    data overlaps with the tail of the global tx pram (and devmem says
    that something does get written during a simple ping).
    
    I haven't observed any failure that could be attributed to this, but
    it seems to be the kind of thing that would be extremely hard to
    debug. So extend the struct definition so that we do allocate 192
    bytes.
    
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09000e8db6448f8462f20527cb8a479605b714ef
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Dec 14 10:10:45 2020 +0000

    btrfs: fix transaction leak and crash after RO remount caused by qgroup rescan
    
    [ Upstream commit cb13eea3b49055bd78e6ddf39defd6340f7379fc ]
    
    If we remount a filesystem in RO mode while the qgroup rescan worker is
    running, we can end up having it still running after the remount is done,
    and at unmount time we may end up with an open transaction that ends up
    never getting committed. If that happens we end up with several memory
    leaks and can crash when hardware acceleration is unavailable for crc32c.
    Possibly it can lead to other nasty surprises too, due to use-after-free
    issues.
    
    The following steps explain how the problem happens.
    
    1) We have a filesystem mounted in RW mode and the qgroup rescan worker is
       running;
    
    2) We remount the filesystem in RO mode, and never stop/pause the rescan
       worker, so after the remount the rescan worker is still running. The
       important detail here is that the rescan task is still running after
       the remount operation committed any ongoing transaction through its
       call to btrfs_commit_super();
    
    3) The rescan is still running, and after the remount completed, the
       rescan worker started a transaction, after it finished iterating all
       leaves of the extent tree, to update the qgroup status item in the
       quotas tree. It does not commit the transaction, it only releases its
       handle on the transaction;
    
    4) A filesystem unmount operation starts shortly after;
    
    5) The unmount task, at close_ctree(), stops the transaction kthread,
       which had not had a chance to commit the open transaction since it was
       sleeping and the commit interval (default of 30 seconds) has not yet
       elapsed since the last time it committed a transaction;
    
    6) So after stopping the transaction kthread we still have the transaction
       used to update the qgroup status item open. At close_ctree(), when the
       filesystem is in RO mode and no transaction abort happened (or the
       filesystem is in error mode), we do not expect to have any transaction
       open, so we do not call btrfs_commit_super();
    
    7) We then proceed to destroy the work queues, free the roots and block
       groups, etc. After that we drop the last reference on the btree inode
       by calling iput() on it. Since there are dirty pages for the btree
       inode, corresponding to the COWed extent buffer for the quotas btree,
       btree_write_cache_pages() is invoked to flush those dirty pages. This
       results in creating a bio and submitting it, which makes us end up at
       btrfs_submit_metadata_bio();
    
    8) At btrfs_submit_metadata_bio() we end up at the if-then-else branch
       that calls btrfs_wq_submit_bio(), because check_async_write() returned
       a value of 1. This value of 1 is because we did not have hardware
       acceleration available for crc32c, so BTRFS_FS_CSUM_IMPL_FAST was not
       set in fs_info->flags;
    
    9) Then at btrfs_wq_submit_bio() we call btrfs_queue_work() against the
       workqueue at fs_info->workers, which was already freed before by the
       call to btrfs_stop_all_workers() at close_ctree(). This results in an
       invalid memory access due to a use-after-free, leading to a crash.
    
    When this happens, before the crash there are several warnings triggered,
    since we have reserved metadata space in a block group, the delayed refs
    reservation, etc:
    
      ------------[ cut here ]------------
      WARNING: CPU: 4 PID: 1729896 at fs/btrfs/block-group.c:125 btrfs_put_block_group+0x63/0xa0 [btrfs]
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      CPU: 4 PID: 1729896 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_put_block_group+0x63/0xa0 [btrfs]
      Code: f0 01 00 00 48 39 c2 75 (...)
      RSP: 0018:ffffb270826bbdd8 EFLAGS: 00010206
      RAX: 0000000000000001 RBX: ffff947ed73e4000 RCX: ffff947ebc8b29c8
      RDX: 0000000000000001 RSI: ffffffffc0b150a0 RDI: ffff947ebc8b2800
      RBP: ffff947ebc8b2800 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff947ed73e4110
      R13: ffff947ed73e4160 R14: ffff947ebc8b2988 R15: dead000000000100
      FS:  00007f15edfea840(0000) GS:ffff9481ad600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f37e2893320 CR3: 0000000138f68001 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       btrfs_free_block_groups+0x17f/0x2f0 [btrfs]
       close_ctree+0x2ba/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15ee221ee7
      Code: ff 0b 00 f7 d8 64 89 01 48 (...)
      RSP: 002b:00007ffe9470f0f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f15ee347264 RCX: 00007f15ee221ee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 000056169701d000
      RBP: 0000561697018a30 R08: 0000000000000000 R09: 00007f15ee2e2be0
      R10: 000056169701efe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 000056169701d000 R14: 0000561697018b40 R15: 0000561697018c60
      irq event stamp: 0
      hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      hardirqs last disabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last  enabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      ---[ end trace dd74718fef1ed5c6 ]---
      ------------[ cut here ]------------
      WARNING: CPU: 2 PID: 1729896 at fs/btrfs/block-rsv.c:459 btrfs_release_global_block_rsv+0x70/0xc0 [btrfs]
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      CPU: 2 PID: 1729896 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_release_global_block_rsv+0x70/0xc0 [btrfs]
      Code: 48 83 bb b0 03 00 00 00 (...)
      RSP: 0018:ffffb270826bbdd8 EFLAGS: 00010206
      RAX: 000000000033c000 RBX: ffff947ed73e4000 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffffffffc0b0d8c1 RDI: 00000000ffffffff
      RBP: ffff947ebc8b7000 R08: 0000000000000001 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff947ed73e4110
      R13: ffff947ed73e5278 R14: dead000000000122 R15: dead000000000100
      FS:  00007f15edfea840(0000) GS:ffff9481aca00000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000561a79f76e20 CR3: 0000000138f68006 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       btrfs_free_block_groups+0x24c/0x2f0 [btrfs]
       close_ctree+0x2ba/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15ee221ee7
      Code: ff 0b 00 f7 d8 64 89 01 (...)
      RSP: 002b:00007ffe9470f0f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f15ee347264 RCX: 00007f15ee221ee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 000056169701d000
      RBP: 0000561697018a30 R08: 0000000000000000 R09: 00007f15ee2e2be0
      R10: 000056169701efe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 000056169701d000 R14: 0000561697018b40 R15: 0000561697018c60
      irq event stamp: 0
      hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      hardirqs last disabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last  enabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      ---[ end trace dd74718fef1ed5c7 ]---
      ------------[ cut here ]------------
      WARNING: CPU: 2 PID: 1729896 at fs/btrfs/block-group.c:3377 btrfs_free_block_groups+0x25d/0x2f0 [btrfs]
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      CPU: 5 PID: 1729896 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_free_block_groups+0x25d/0x2f0 [btrfs]
      Code: ad de 49 be 22 01 00 (...)
      RSP: 0018:ffffb270826bbde8 EFLAGS: 00010206
      RAX: ffff947ebeae1d08 RBX: ffff947ed73e4000 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff947e9d823ae8 RDI: 0000000000000246
      RBP: ffff947ebeae1d08 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000000 R11: 0000000000000001 R12: ffff947ebeae1c00
      R13: ffff947ed73e5278 R14: dead000000000122 R15: dead000000000100
      FS:  00007f15edfea840(0000) GS:ffff9481ad200000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f1475d98ea8 CR3: 0000000138f68005 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       close_ctree+0x2ba/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f15ee221ee7
      Code: ff 0b 00 f7 d8 64 89 (...)
      RSP: 002b:00007ffe9470f0f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f15ee347264 RCX: 00007f15ee221ee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 000056169701d000
      RBP: 0000561697018a30 R08: 0000000000000000 R09: 00007f15ee2e2be0
      R10: 000056169701efe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 000056169701d000 R14: 0000561697018b40 R15: 0000561697018c60
      irq event stamp: 0
      hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      hardirqs last disabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last  enabled at (0): [<ffffffff8bcae560>] copy_process+0x8a0/0x1d70
      softirqs last disabled at (0): [<0000000000000000>] 0x0
      ---[ end trace dd74718fef1ed5c8 ]---
      BTRFS info (device sdc): space_info 4 has 268238848 free, is not full
      BTRFS info (device sdc): space_info total=268435456, used=114688, pinned=0, reserved=16384, may_use=0, readonly=65536
      BTRFS info (device sdc): global_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): trans_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): chunk_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): delayed_block_rsv: size 0 reserved 0
      BTRFS info (device sdc): delayed_refs_rsv: size 524288 reserved 0
    
    And the crash, which only happens when we do not have crc32c hardware
    acceleration, produces the following trace immediately after those
    warnings:
    
      stack segment: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      CPU: 2 PID: 1749129 Comm: umount Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:btrfs_queue_work+0x36/0x190 [btrfs]
      Code: 54 55 53 48 89 f3 (...)
      RSP: 0018:ffffb27082443ae8 EFLAGS: 00010282
      RAX: 0000000000000004 RBX: ffff94810ee9ad90 RCX: 0000000000000000
      RDX: 0000000000000001 RSI: ffff94810ee9ad90 RDI: ffff947ed8ee75a0
      RBP: a56b6b6b6b6b6b6b R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000000007 R11: 0000000000000001 R12: ffff947fa9b435a8
      R13: ffff94810ee9ad90 R14: 0000000000000000 R15: ffff947e93dc0000
      FS:  00007f3cfe974840(0000) GS:ffff9481ac600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007f1b42995a70 CR3: 0000000127638003 CR4: 00000000003706e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       btrfs_wq_submit_bio+0xb3/0xd0 [btrfs]
       btrfs_submit_metadata_bio+0x44/0xc0 [btrfs]
       submit_one_bio+0x61/0x70 [btrfs]
       btree_write_cache_pages+0x414/0x450 [btrfs]
       ? kobject_put+0x9a/0x1d0
       ? trace_hardirqs_on+0x1b/0xf0
       ? _raw_spin_unlock_irqrestore+0x3c/0x60
       ? free_debug_processing+0x1e1/0x2b0
       do_writepages+0x43/0xe0
       ? lock_acquired+0x199/0x490
       __writeback_single_inode+0x59/0x650
       writeback_single_inode+0xaf/0x120
       write_inode_now+0x94/0xd0
       iput+0x187/0x2b0
       close_ctree+0x2c6/0x2fa [btrfs]
       generic_shutdown_super+0x6c/0x100
       kill_anon_super+0x14/0x30
       btrfs_kill_super+0x12/0x20 [btrfs]
       deactivate_locked_super+0x31/0x70
       cleanup_mnt+0x100/0x160
       task_work_run+0x68/0xb0
       exit_to_user_mode_prepare+0x1bb/0x1c0
       syscall_exit_to_user_mode+0x4b/0x260
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f3cfebabee7
      Code: ff 0b 00 f7 d8 64 89 01 (...)
      RSP: 002b:00007ffc9c9a05f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000a6
      RAX: 0000000000000000 RBX: 00007f3cfecd1264 RCX: 00007f3cfebabee7
      RDX: ffffffffffffff78 RSI: 0000000000000000 RDI: 0000562b6b478000
      RBP: 0000562b6b473a30 R08: 0000000000000000 R09: 00007f3cfec6cbe0
      R10: 0000562b6b479fe0 R11: 0000000000000246 R12: 0000000000000000
      R13: 0000562b6b478000 R14: 0000562b6b473b40 R15: 0000562b6b473c60
      Modules linked in: btrfs dm_snapshot dm_thin_pool (...)
      ---[ end trace dd74718fef1ed5cc ]---
    
    Finally when we remove the btrfs module (rmmod btrfs), there are several
    warnings about objects that were allocated from our slabs but were never
    freed, consequence of the transaction that was never committed and got
    leaked:
    
      =============================================================================
      BUG btrfs_delayed_ref_head (Tainted: G    B   W        ): Objects remaining in btrfs_delayed_ref_head on __kmem_cache_shutdown()
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x0000000094c2ae56 objects=24 used=2 fp=0x000000002bfa2521 flags=0x17fffc000010200
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       slab_err+0xb7/0xdc
       ? lock_acquired+0x199/0x490
       __kmem_cache_shutdown+0x1ac/0x3c0
       ? lock_release+0x20e/0x4c0
       kmem_cache_destroy+0x55/0x120
       btrfs_delayed_ref_exit+0x11/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      INFO: Object 0x0000000050cbdd61 @offset=12104
      INFO: Allocated in btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs] age=1894 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs]
            btrfs_free_tree_block+0x128/0x360 [btrfs]
            __btrfs_cow_block+0x489/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
            btrfs_mount+0x13b/0x3e0 [btrfs]
      INFO: Freed in __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs] age=4292 cpu=2 pid=1729526
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            commit_cowonly_roots+0xfb/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            sync_filesystem+0x74/0x90
            generic_shutdown_super+0x22/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      INFO: Object 0x0000000086e9b0ff @offset=12776
      INFO: Allocated in btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs] age=1900 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0xbb/0x480 [btrfs]
            btrfs_alloc_tree_block+0x2bf/0x360 [btrfs]
            alloc_tree_block_no_bg_flush+0x4f/0x60 [btrfs]
            __btrfs_cow_block+0x12d/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
      INFO: Freed in __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs] age=3141 cpu=6 pid=1729803
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x1117/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            btrfs_write_dirty_block_groups+0x17d/0x3d0 [btrfs]
            commit_cowonly_roots+0x248/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            close_ctree+0x113/0x2fa [btrfs]
            generic_shutdown_super+0x6c/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      kmem_cache_destroy btrfs_delayed_ref_head: Slab cache still has objects
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       kmem_cache_destroy+0x119/0x120
       btrfs_delayed_ref_exit+0x11/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 0b (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      =============================================================================
      BUG btrfs_delayed_tree_ref (Tainted: G    B   W        ): Objects remaining in btrfs_delayed_tree_ref on __kmem_cache_shutdown()
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x0000000011f78dc0 objects=37 used=2 fp=0x0000000032d55d91 flags=0x17fffc000010200
      CPU: 3 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       slab_err+0xb7/0xdc
       ? lock_acquired+0x199/0x490
       __kmem_cache_shutdown+0x1ac/0x3c0
       ? lock_release+0x20e/0x4c0
       kmem_cache_destroy+0x55/0x120
       btrfs_delayed_ref_exit+0x1d/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      INFO: Object 0x000000001a340018 @offset=4408
      INFO: Allocated in btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs] age=1917 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs]
            btrfs_free_tree_block+0x128/0x360 [btrfs]
            __btrfs_cow_block+0x489/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
            btrfs_mount+0x13b/0x3e0 [btrfs]
      INFO: Freed in __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs] age=4167 cpu=4 pid=1729795
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            btrfs_commit_transaction+0x60/0xc40 [btrfs]
            create_subvol+0x56a/0x990 [btrfs]
            btrfs_mksubvol+0x3fb/0x4a0 [btrfs]
            __btrfs_ioctl_snap_create+0x119/0x1a0 [btrfs]
            btrfs_ioctl_snap_create+0x58/0x80 [btrfs]
            btrfs_ioctl+0x1a92/0x36f0 [btrfs]
            __x64_sys_ioctl+0x83/0xb0
            do_syscall_64+0x33/0x80
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      INFO: Object 0x000000002b46292a @offset=13648
      INFO: Allocated in btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs] age=1923 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_add_delayed_tree_ref+0x9e/0x480 [btrfs]
            btrfs_alloc_tree_block+0x2bf/0x360 [btrfs]
            alloc_tree_block_no_bg_flush+0x4f/0x60 [btrfs]
            __btrfs_cow_block+0x12d/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
      INFO: Freed in __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs] age=3164 cpu=6 pid=1729803
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0x63d/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            commit_cowonly_roots+0xfb/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            close_ctree+0x113/0x2fa [btrfs]
            generic_shutdown_super+0x6c/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      kmem_cache_destroy btrfs_delayed_tree_ref: Slab cache still has objects
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       kmem_cache_destroy+0x119/0x120
       btrfs_delayed_ref_exit+0x1d/0x35 [btrfs]
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      =============================================================================
      BUG btrfs_delayed_extent_op (Tainted: G    B   W        ): Objects remaining in btrfs_delayed_extent_op on __kmem_cache_shutdown()
      -----------------------------------------------------------------------------
    
      INFO: Slab 0x00000000f145ce2f objects=22 used=1 fp=0x00000000af0f92cf flags=0x17fffc000010200
      CPU: 5 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       slab_err+0xb7/0xdc
       ? lock_acquired+0x199/0x490
       __kmem_cache_shutdown+0x1ac/0x3c0
       ? __mutex_unlock_slowpath+0x45/0x2a0
       kmem_cache_destroy+0x55/0x120
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 f5 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      INFO: Object 0x000000004cf95ea8 @offset=6264
      INFO: Allocated in btrfs_alloc_tree_block+0x1e0/0x360 [btrfs] age=1931 cpu=6 pid=1729873
            __slab_alloc.isra.0+0x109/0x1c0
            kmem_cache_alloc+0x7bb/0x830
            btrfs_alloc_tree_block+0x1e0/0x360 [btrfs]
            alloc_tree_block_no_bg_flush+0x4f/0x60 [btrfs]
            __btrfs_cow_block+0x12d/0x5f0 [btrfs]
            btrfs_cow_block+0xf7/0x220 [btrfs]
            btrfs_search_slot+0x62a/0xc40 [btrfs]
            btrfs_del_orphan_item+0x65/0xd0 [btrfs]
            btrfs_find_orphan_roots+0x1bf/0x200 [btrfs]
            open_ctree+0x125a/0x18a0 [btrfs]
            btrfs_mount_root.cold+0x13/0xed [btrfs]
            legacy_get_tree+0x30/0x60
            vfs_get_tree+0x28/0xe0
            fc_mount+0xe/0x40
            vfs_kern_mount.part.0+0x71/0x90
            btrfs_mount+0x13b/0x3e0 [btrfs]
      INFO: Freed in __btrfs_run_delayed_refs+0xabd/0x1290 [btrfs] age=3173 cpu=6 pid=1729803
            kmem_cache_free+0x34c/0x3c0
            __btrfs_run_delayed_refs+0xabd/0x1290 [btrfs]
            btrfs_run_delayed_refs+0x81/0x210 [btrfs]
            commit_cowonly_roots+0xfb/0x300 [btrfs]
            btrfs_commit_transaction+0x367/0xc40 [btrfs]
            close_ctree+0x113/0x2fa [btrfs]
            generic_shutdown_super+0x6c/0x100
            kill_anon_super+0x14/0x30
            btrfs_kill_super+0x12/0x20 [btrfs]
            deactivate_locked_super+0x31/0x70
            cleanup_mnt+0x100/0x160
            task_work_run+0x68/0xb0
            exit_to_user_mode_prepare+0x1bb/0x1c0
            syscall_exit_to_user_mode+0x4b/0x260
            entry_SYSCALL_64_after_hwframe+0x44/0xa9
      kmem_cache_destroy btrfs_delayed_extent_op: Slab cache still has objects
      CPU: 3 PID: 1729921 Comm: rmmod Tainted: G    B   W         5.10.0-rc4-btrfs-next-73 #1
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      Call Trace:
       dump_stack+0x8d/0xb5
       kmem_cache_destroy+0x119/0x120
       exit_btrfs_fs+0xa/0x59 [btrfs]
       __x64_sys_delete_module+0x194/0x260
       ? fpregs_assert_state_consistent+0x1e/0x40
       ? exit_to_user_mode_prepare+0x55/0x1c0
       ? trace_hardirqs_on+0x1b/0xf0
       do_syscall_64+0x33/0x80
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f693e305897
      Code: 73 01 c3 48 8b 0d f9 (...)
      RSP: 002b:00007ffcf73eb508 EFLAGS: 00000206 ORIG_RAX: 00000000000000b0
      RAX: ffffffffffffffda RBX: 0000559df504f760 RCX: 00007f693e305897
      RDX: 000000000000000a RSI: 0000000000000800 RDI: 0000559df504f7c8
      RBP: 00007ffcf73eb568 R08: 0000000000000000 R09: 0000000000000000
      R10: 00007f693e378ac0 R11: 0000000000000206 R12: 00007ffcf73eb740
      R13: 00007ffcf73ec5a6 R14: 0000559df504f2a0 R15: 0000559df504f760
      BTRFS: state leak: start 30408704 end 30425087 state 1 in tree 1 refs 1
    
    Fix this issue by having the remount path stop the qgroup rescan worker
    when we are remounting RO and teach the rescan worker to stop when a
    remount is in progress. If later a remount in RW mode happens, we are
    already resuming the qgroup rescan worker through the call to
    btrfs_qgroup_rescan_resume(), so we do not need to worry about that.
    
    Tested-by: Fabian Vogt <fvogt@suse.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e8179e94208a52f5f606c8fcc630d0085669afb
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 22 04:36:54 2020 +0900

    ARC: build: add boot_targets to PHONY
    
    [ Upstream commit 0cfccb3c04934cdef42ae26042139f16e805b5f7 ]
    
    The top-level boot_targets (uImage and uImage.*) should be phony
    targets. They just let Kbuild descend into arch/arc/boot/ and create
    files there.
    
    If a file exists in the top directory with the same name, the boot
    image will not be created.
    
    You can confirm it by the following steps:
    
      $ export CROSS_COMPILE=<your-arc-compiler-prefix>
      $ make -s ARCH=arc defconfig all   # vmlinux will be built
      $ touch uImage.gz
      $ make ARCH=arc uImage.gz
      CALL    scripts/atomic/check-atomics.sh
      CALL    scripts/checksyscalls.sh
      CHK     include/generated/compile.h
      # arch/arc/boot/uImage.gz is not created
    
    Specify the targets as PHONY to fix this.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit def6716587afcd98891a93fbb4a17df2c6a9f15d
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 22 04:36:53 2020 +0900

    ARC: build: add uImage.lzma to the top-level target
    
    [ Upstream commit f2712ec76a5433e5ec9def2bd52a95df1f96d050 ]
    
    arch/arc/boot/Makefile supports uImage.lzma, but you cannot do
    'make uImage.lzma' because the corresponding target is missing
    in arch/arc/Makefile. Add it.
    
    I also changed the assignment operator '+=' to ':=' since this is the
    only place where we expect this variable to be set.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49dd29b29a32d9cd47f8e49a4181fec24c85c140
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Nov 22 04:36:52 2020 +0900

    ARC: build: remove non-existing bootpImage from KBUILD_IMAGE
    
    [ Upstream commit 9836720911cfec25d3fbdead1c438bf87e0f2841 ]
    
    The deb-pkg builds for ARCH=arc fail.
    
      $ export CROSS_COMPILE=<your-arc-compiler-prefix>
      $ make -s ARCH=arc defconfig
      $ make ARCH=arc bindeb-pkg
      SORTTAB vmlinux
      SYSMAP  System.map
      MODPOST Module.symvers
      make KERNELRELEASE=5.10.0-rc4 ARCH=arc KBUILD_BUILD_VERSION=2 -f ./Makefile intdeb-pkg
      sh ./scripts/package/builddeb
      cp: cannot stat 'arch/arc/boot/bootpImage': No such file or directory
      make[4]: *** [scripts/Makefile.package:87: intdeb-pkg] Error 1
      make[3]: *** [Makefile:1527: intdeb-pkg] Error 2
      make[2]: *** [debian/rules:13: binary-arch] Error 2
      dpkg-buildpackage: error: debian/rules binary subprocess returned exit status 2
      make[1]: *** [scripts/Makefile.package:83: bindeb-pkg] Error 2
      make: *** [Makefile:1527: bindeb-pkg] Error 2
    
    The reason is obvious; arch/arc/Makefile sets $(boot)/bootpImage as
    the default image, but there is no rule to build it.
    
    Remove the meaningless KBUILD_IMAGE assignment so it will fallback
    to the default vmlinux. With this change, you can build the deb package.
    
    I removed the 'bootpImage' target as well. At best, it provides
    'make bootpImage' as an alias of 'make vmlinux', but I do not see
    much sense in doing so.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67dc91e3632de79cbfb48e7c3d3804238439a26c
Author: yangerkun <yangerkun@huawei.com>
Date:   Tue Jan 5 14:28:57 2021 +0800

    ext4: fix bug for rename with RENAME_WHITEOUT
    
    [ Upstream commit 6b4b8e6b4ad8553660421d6360678b3811d5deb9 ]
    
    We got a "deleted inode referenced" warning cross our fsstress test. The
    bug can be reproduced easily with following steps:
    
      cd /dev/shm
      mkdir test/
      fallocate -l 128M img
      mkfs.ext4 -b 1024 img
      mount img test/
      dd if=/dev/zero of=test/foo bs=1M count=128
      mkdir test/dir/ && cd test/dir/
      for ((i=0;i<1000;i++)); do touch file$i; done # consume all block
      cd ~ && renameat2(AT_FDCWD, /dev/shm/test/dir/file1, AT_FDCWD,
        /dev/shm/test/dir/dst_file, RENAME_WHITEOUT) # ext4_add_entry in
        ext4_rename will return ENOSPC!!
      cd /dev/shm/ && umount test/ && mount img test/ && ls -li test/dir/file1
      We will get the output:
      "ls: cannot access 'test/dir/file1': Structure needs cleaning"
      and the dmesg show:
      "EXT4-fs error (device loop0): ext4_lookup:1626: inode #2049: comm ls:
      deleted inode referenced: 139"
    
    ext4_rename will create a special inode for whiteout and use this 'ino'
    to replace the source file's dir entry 'ino'. Once error happens
    latter(the error above was the ENOSPC return from ext4_add_entry in
    ext4_rename since all space has been consumed), the cleanup do drop the
    nlink for whiteout, but forget to restore 'ino' with source file. This
    will trigger the bug describle as above.
    
    Signed-off-by: yangerkun <yangerkun@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: stable@vger.kernel.org
    Fixes: cd808deced43 ("ext4: support RENAME_WHITEOUT")
    Link: https://lore.kernel.org/r/20210105062857.3566-1-yangerkun@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e2e840d65ff6ce177935807584de0da6744bdc
Author: Leon Schuermann <leon@is.currently.online>
Date:   Mon Jan 11 20:03:13 2021 +0100

    r8152: Add Lenovo Powered USB-C Travel Hub
    
    commit cb82a54904a99df9e8f9e9d282046055dae5a730 upstream.
    
    This USB-C Hub (17ef:721e) based on the Realtek RTL8153B chip used to
    use the cdc_ether driver. However, using this driver, with the system
    suspended the device constantly sends pause-frames as soon as the
    receive buffer fills up. This causes issues with other devices, where
    some Ethernet switches stop forwarding packets altogether.
    
    Using the Realtek driver (r8152) fixes this issue. Pause frames are no
    longer sent while the host system is suspended.
    
    Signed-off-by: Leon Schuermann <leon@is.currently.online>
    Tested-by: Leon Schuermann <leon@is.currently.online>
    Link: https://lore.kernel.org/r/20210111190312.12589-2-leon@is.currently.online
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ebb730876c5d79865b8ace6b64d544afa0e0a34
Author: Akilesh Kailash <akailash@google.com>
Date:   Mon Dec 28 07:14:07 2020 +0000

    dm snapshot: flush merged data before committing metadata
    
    commit fcc42338375a1e67b8568dbb558f8b784d0f3b01 upstream.
    
    If the origin device has a volatile write-back cache and the following
    events occur:
    
    1: After finishing merge operation of one set of exceptions,
       merge_callback() is invoked.
    2: Update the metadata in COW device tracking the merge completion.
       This update to COW device is flushed cleanly.
    3: System crashes and the origin device's cache where the recent
       merge was completed has not been flushed.
    
    During the next cycle when we read the metadata from the COW device,
    we will skip reading those metadata whose merge was completed in
    step (1). This will lead to data loss/corruption.
    
    To address this, flush the origin device post merge IO before
    updating the metadata.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Akilesh Kailash <akailash@google.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba16d6ec4f756358c104cc983cbaf0384a8ffad9
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Jan 12 15:49:24 2021 -0800

    mm/hugetlb: fix potential missing huge page size info
    
    commit 0eb98f1588c2cc7a79816d84ab18a55d254f481c upstream.
    
    The huge page size is encoded for VM_FAULT_HWPOISON errors only.  So if
    we return VM_FAULT_HWPOISON, huge page size would just be ignored.
    
    Link: https://lkml.kernel.org/r/20210107123449.38481-1-linmiaohe@huawei.com
    Fixes: aa50d3a7aa81 ("Encode huge page size for VM_FAULT_HWPOISON errors")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3486faebbb964d1d14e0b975577948fbad1c8c52
Author: Dexuan Cui <decui@microsoft.com>
Date:   Thu Jan 7 23:23:48 2021 -0800

    ACPI: scan: Harden acpi_device_add() against device ID overflows
    
    commit a58015d638cd4e4555297b04bec9b49028369075 upstream.
    
    Linux VM on Hyper-V crashes with the latest mainline:
    
    [    4.069624] detected buffer overflow in strcpy
    [    4.077733] kernel BUG at lib/string.c:1149!
    ..
    [    4.085819] RIP: 0010:fortify_panic+0xf/0x11
    ...
    [    4.085819] Call Trace:
    [    4.085819]  acpi_device_add.cold.15+0xf2/0xfb
    [    4.085819]  acpi_add_single_object+0x2a6/0x690
    [    4.085819]  acpi_bus_check_add+0xc6/0x280
    [    4.085819]  acpi_ns_walk_namespace+0xda/0x1aa
    [    4.085819]  acpi_walk_namespace+0x9a/0xc2
    [    4.085819]  acpi_bus_scan+0x78/0x90
    [    4.085819]  acpi_scan_init+0xfa/0x248
    [    4.085819]  acpi_init+0x2c1/0x321
    [    4.085819]  do_one_initcall+0x44/0x1d0
    [    4.085819]  kernel_init_freeable+0x1ab/0x1f4
    
    This is because of the recent buffer overflow detection in the
    commit 6a39e62abbaf ("lib: string.h: detect intra-object overflow in
    fortified string functions")
    
    Here acpi_device_bus_id->bus_id can only hold 14 characters, while the
    the acpi_device_hid(device) returns a 22-char string
    "HYPER_V_GEN_COUNTER_V1".
    
    Per ACPI Spec v6.2, Section 6.1.5 _HID (Hardware ID), if the ID is a
    string, it must be of the form AAA#### or NNNN####, i.e. 7 chars or 8
    chars.
    
    The field bus_id in struct acpi_device_bus_id was originally defined as
    char bus_id[9], and later was enlarged to char bus_id[15] in 2007 in the
    commit bb0958544f3c ("ACPI: use more understandable bus_id for ACPI
    devices")
    
    Fix the issue by changing the field bus_id to const char *, and use
    kstrdup_const() to initialize it.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Tested-By: Jethro Beekman <jethro@fortanix.com>
    [ rjw: Subject change, whitespace adjustment ]
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea65aead412eb4bfbea9bc6edda3600f92cf6faf
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Sun Jan 10 14:21:05 2021 +0000

    MIPS: relocatable: fix possible boot hangup with KASLR enabled
    
    commit 69e976831cd53f9ba304fd20305b2025ecc78eab upstream.
    
    LLVM-built Linux triggered a boot hangup with KASLR enabled.
    
    arch/mips/kernel/relocate.c:get_random_boot() uses linux_banner,
    which is a string constant, as a random seed, but accesses it
    as an array of unsigned long (in rotate_xor()).
    When the address of linux_banner is not aligned to sizeof(long),
    such access emits unaligned access exception and hangs the kernel.
    
    Use PTR_ALIGN() to align input address to sizeof(long) and also
    align down the input length to prevent possible access-beyond-end.
    
    Fixes: 405bc8fd12f5 ("MIPS: Kernel: Implement KASLR using CONFIG_RELOCATABLE")
    Cc: stable@vger.kernel.org # 4.7+
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bb51a0c73635ac2de7193498f152d4c225ffa9c
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Wed Dec 16 23:39:56 2020 +0000

    MIPS: boot: Fix unaligned access with CONFIG_MIPS_RAW_APPENDED_DTB
    
    commit 4d4f9c1a17a3480f8fe523673f7232b254d724b7 upstream.
    
    The compressed payload is not necesarily 4-byte aligned, at least when
    compiling with Clang. In that case, the 4-byte value appended to the
    compressed payload that corresponds to the uncompressed kernel image
    size must be read using get_unaligned_le32().
    
    This fixes Clang-built kernels not booting on MIPS (tested on a Ingenic
    JZ4770 board).
    
    Fixes: b8f54f2cde78 ("MIPS: ZBOOT: copy appended dtb to the end of the kernel")
    Cc: <stable@vger.kernel.org> # v4.7
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Philippe Mathieu-Daudé <f4bug@amsat.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 886222a8fa15f7b9899831af7aacdb9a185a0dd6
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Sat Dec 12 17:20:12 2020 -0800

    ASoC: dapm: remove widget from dirty list on free
    
    commit 5c6679b5cb120f07652418524ab186ac47680b49 upstream.
    
    A widget's "dirty" list_head, much like its "list" list_head, eventually
    chains back to a list_head on the snd_soc_card itself. This means that
    the list can stick around even after the widget (or all widgets) have
    been freed. Currently, however, widgets that are in the dirty list when
    freed remain there, corrupting the entire list and leading to memory
    errors and undefined behavior when the list is next accessed or
    modified.
    
    I encountered this issue when a component failed to probe relatively
    late in snd_soc_bind_card(), causing it to bail out and call
    soc_cleanup_card_resources(), which eventually called
    snd_soc_dapm_free() with widgets that were still dirty from when they'd
    been added.
    
    Fixes: db432b414e20 ("ASoC: Do DAPM power checks only for widgets changed since last run")
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/f8b5f031d50122bf1a9bfc9cae046badf4a7a31a.1607822410.git.tommyhebb@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bb85c0d47238947c8a0b896ae30ad463c896ebe
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Jan 17 13:59:01 2021 +0100

    Linux 4.14.216
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210115121956.731354372@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e3035862f3f036e06d6659531b909403c7424b69
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Mon Dec 14 22:07:39 2020 +0300

    net: drop bogus skb with CHECKSUM_PARTIAL and offset beyond end of trimmed packet
    
    commit 54970a2fbb673f090b7f02d7f57b10b2e0707155 upstream.
    
    syzbot reproduces BUG_ON in skb_checksum_help():
    tun creates (bogus) skb with huge partial-checksummed area and
    small ip packet inside. Then ip_rcv trims the skb based on size
    of internal ip packet, after that csum offset points beyond of
    trimmed skb. Then checksum_tg() called via netfilter hook
    triggers BUG_ON:
    
            offset = skb_checksum_start_offset(skb);
            BUG_ON(offset >= skb_headlen(skb));
    
    To work around the problem this patch forces pskb_trim_rcsum_slow()
    to return -EINVAL in described scenario. It allows its callers to
    drop such kind of packets.
    
    Link: https://syzkaller.appspot.com/bug?id=b419a5ca95062664fe1a60b764621eb4526e2cd0
    Reported-by: syzbot+7010af67ced6105e5ab6@syzkaller.appspotmail.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/1b2494af-2c56-8ee2-7bc0-923fcad1cdf8@virtuozzo.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a26fc80c0217301520a6ae817eca14c943e38bc2
Author: Ming Lei <ming.lei@redhat.com>
Date:   Mon Dec 21 12:33:35 2020 +0800

    block: fix use-after-free in disk_part_iter_next
    
    commit aebf5db917055b38f4945ed6d621d9f07a44ff30 upstream.
    
    Make sure that bdgrab() is done on the 'block_device' instance before
    referring to it for avoiding use-after-free.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: syzbot+825f0f9657d4e528046e@syzkaller.appspotmail.com
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 528ece29f891eb9b034af133d26701acae95da80
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 10 08:30:59 2020 +0000

    KVM: arm64: Don't access PMCR_EL0 when no PMU is available
    
    commit 2a5f1b67ec577fb1544b563086e0377f095f88e2 upstream.
    
    We reset the guest's view of PMCR_EL0 unconditionally, based on
    the host's view of this register. It is however legal for an
    implementation not to provide any PMU, resulting in an UNDEF.
    
    The obvious fix is to skip the reset of this shadow register
    when no PMU is available, sidestepping the issue entirely.
    If no PMU is available, the guest is not able to request
    a virtual PMU anyway, so not doing nothing is the right thing
    to do!
    
    It is unlikely that this bug can hit any HW implementation
    though, as they all provide a PMU. It has been found using nested
    virt with the host KVM not implementing the PMU itself.
    
    Fixes: ab9468340d2bc ("arm64: KVM: Add access handler for PMCR register")
    Reviewed-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201210083059.1277162-1-maz@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4465c3d4a6e32f3cc932677d525788d5e3849481
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:36:23 2021 +0100

    wan: ds26522: select CONFIG_BITREVERSE
    
    commit 69931e11288520c250152180ecf9b6ac5e6e40ed upstream.
    
    Without this, the driver runs into a link failure
    
    arm-linux-gnueabi-ld: drivers/net/wan/slic_ds26522.o: in function `slic_ds26522_probe':
    slic_ds26522.c:(.text+0x100c): undefined reference to `byte_rev_table'
    arm-linux-gnueabi-ld: slic_ds26522.c:(.text+0x1cdc): undefined reference to `byte_rev_table'
    arm-linux-gnueabi-ld: drivers/net/wan/slic_ds26522.o: in function `slic_write':
    slic_ds26522.c:(.text+0x1e4c): undefined reference to `byte_rev_table'
    
    Fixes: c37d4a0085c5 ("Maxim/driver: Add driver for maxim ds26522")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c162bb82fcbe7f45c93cc5f6602af33139caa86
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Dec 28 16:48:40 2020 +0800

    net/mlx5e: Fix two double free cases
    
    commit 7a6eb072a9548492ead086f3e820e9aac71c7138 upstream.
    
    mlx5e_create_ttc_table_groups() frees ft->g on failure of
    kvzalloc(), but such failure will be caught by its caller
    in mlx5e_create_ttc_table() and ft->g will be freed again
    in mlx5e_destroy_flow_table(). The same issue also occurs
    in mlx5e_create_ttc_table_groups(). Set ft->g to NULL after
    kfree() to avoid double free.
    
    Fixes: 7b3722fa9ef6 ("net/mlx5e: Support RSS for GRE tunneled packets")
    Fixes: 33cfaaa8f36f ("net/mlx5e: Split the main flow steering table")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b9594e7812a9b287daef2c0c817d1857844c838
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Dec 21 19:27:31 2020 +0800

    net/mlx5e: Fix memleak in mlx5e_create_l2_table_groups
    
    commit 5b0bb12c58ac7d22e05b5bfdaa30a116c8c32e32 upstream.
    
    When mlx5_create_flow_group() fails, ft->g should be
    freed just like when kvzalloc() fails. The caller of
    mlx5e_create_l2_table_groups() does not catch this
    issue on failure, which leads to memleak.
    
    Fixes: 33cfaaa8f36f ("net/mlx5e: Split the main flow steering table")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4acf7ed46ef051710b2768addbc8654f1da87883
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue Jan 5 13:18:37 2021 +0800

    iommu/intel: Fix memleak in intel_irq_remapping_alloc
    
    commit ff2b46d7cff80d27d82f7f3252711f4ca1666129 upstream.
    
    When irq_domain_get_irq_data() or irqd_cfg() fails
    at i == 0, data allocated by kzalloc() has not been
    freed before returning, which leads to memleak.
    
    Fixes: b106ee63abcc ("irq_remapping/vt-d: Enhance Intel IR driver to support hierarchical irqdomains")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20210105051837.32118-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61c921e55887a7295f7509b577c4200307653d23
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:42:39 2021 +0100

    block: rsxx: select CONFIG_CRC32
    
    commit 36a106a4c1c100d55ba3d32a21ef748cfcd4fa99 upstream.
    
    Without crc32, the driver fails to link:
    
    arm-linux-gnueabi-ld: drivers/block/rsxx/config.o: in function `rsxx_load_config':
    config.c:(.text+0x124): undefined reference to `crc32_le'
    
    Fixes: 8722ff8cdbfa ("block: IBM RamSan 70/80 device driver")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1be8a1c56ea193d1144348d0061d4647bbe845e2
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:36:20 2021 +0100

    wil6210: select CONFIG_CRC32
    
    commit e186620d7bf11b274b985b839c38266d7918cc05 upstream.
    
    Without crc32, the driver fails to link:
    
    arm-linux-gnueabi-ld: drivers/net/wireless/ath/wil6210/fw.o: in function `wil_fw_verify':
    fw.c:(.text+0x74c): undefined reference to `crc32_le'
    arm-linux-gnueabi-ld: drivers/net/wireless/ath/wil6210/fw.o:fw.c:(.text+0x758): more undefined references to `crc32_le' follow
    
    Fixes: 151a9706503f ("wil6210: firmware download")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11e6ab413dc960a950f159bad3113dbdea80d96a
Author: Shravya Kumbham <shravya.kumbham@xilinx.com>
Date:   Wed Dec 23 16:51:02 2020 +0530

    dmaengine: xilinx_dma: fix mixed_enum_type coverity warning
    
    commit 2d5efea64472469117dc1a9a39530069e95b21e9 upstream.
    
    Typecast the fls(width -1) with (enum dmaengine_alignment) in
    xilinx_dma_chan_probe function to fix the coverity warning.
    
    Addresses-Coverity: Event mixed_enum_type.
    Fixes: 9cd4360de609 ("dma: Add Xilinx AXI Video Direct Memory Access Engine driver support")
    Signed-off-by: Shravya Kumbham <shravya.kumbham@xilinx.com>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1608722462-29519-4-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 644847f275dbc9af31104bc795b84061abc1171a
Author: Shravya Kumbham <shravya.kumbham@xilinx.com>
Date:   Wed Dec 23 16:51:00 2020 +0530

    dmaengine: xilinx_dma: check dma_async_device_register return value
    
    commit 99974aedbd73523969afb09f33c6e3047cd0ddae upstream.
    
    dma_async_device_register() can return non-zero error code. Add
    condition to check the return value of dma_async_device_register
    function and handle the error path.
    
    Addresses-Coverity: Event check_return.
    Fixes: 9cd4360de609 ("dma: Add Xilinx AXI Video Direct Memory Access Engine driver support")
    Signed-off-by: Shravya Kumbham <shravya.kumbham@xilinx.com>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1608722462-29519-2-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a2de22aec3232bd38aeea88333bf3de1dcc6123
Author: Roman Guskov <rguskov@dh-electronics.com>
Date:   Mon Dec 21 13:35:32 2020 +0100

    spi: stm32: FIFO threshold level - fix align packet size
    
    commit a590370d918fc66c62df6620445791fbe840344a upstream.
    
    if cur_bpw <= 8 and xfer_len < 4 then the value of fthlv will be 1 and
    SPI registers content may have been lost.
    
    * If SPI data register is accessed as a 16-bit register and DSIZE <= 8bit,
      better to select FTHLV = 2, 4, 6 etc
    
    * If SPI data register is accessed as a 32-bit register and DSIZE > 8bit,
      better to select FTHLV = 2, 4, 6 etc, while if DSIZE <= 8bit,
      better to select FTHLV = 4, 8, 12 etc
    
    Signed-off-by: Roman Guskov <rguskov@dh-electronics.com>
    Fixes: dcbe0d84dfa5 ("spi: add driver for STM32 SPI controller")
    Reviewed-by: Marek Vasut <marex@denx.de>
    Link: https://lore.kernel.org/r/20201221123532.27272-1-rguskov@dh-electronics.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43cc91c3b4248b97cbaf6c98a81ab3b4649e456d
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Jan 5 10:19:57 2021 +0000

    cpufreq: powernow-k8: pass policy rather than use cpufreq_cpu_get()
    
    commit 943bdd0cecad06da8392a33093230e30e501eccc upstream.
    
    Currently there is an unlikely case where cpufreq_cpu_get() returns a
    NULL policy and this will cause a NULL pointer dereference later on.
    
    Fix this by passing the policy to transition_frequency_fidvid() from
    the caller and hence eliminating the need for the cpufreq_cpu_get()
    and cpufreq_cpu_put().
    
    Thanks to Viresh Kumar for suggesting the fix.
    
    Addresses-Coverity: ("Dereference null return")
    Fixes: b43a7ffbf33b ("cpufreq: Notify all policy->cpus in cpufreq_notify_transition()")
    Suggested-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28eddc92b127985f7a870742092fa7595cfd5600
Author: Chunyan Zhang <chunyan.zhang@unisoc.com>
Date:   Mon Dec 14 12:58:50 2020 +0800

    i2c: sprd: use a specific timeout to avoid system hang up issue
    
    commit 0b884fe71f9ee6a5df35e677154256ea2099ebb8 upstream.
    
    If the i2c device SCL bus being pulled up due to some exception before
    message transfer done, the system cannot receive the completing interrupt
    signal any more, it would not exit waiting loop until MAX_SCHEDULE_TIMEOUT
    jiffies eclipse, that would make the system seemed hang up. To avoid that
    happen, this patch adds a specific timeout for message transfer.
    
    Fixes: 8b9ec0719834 ("i2c: Add Spreadtrum I2C controller driver")
    Signed-off-by: Linhua Xu <linhua.xu@unisoc.com>
    Signed-off-by: Chunyan Zhang <chunyan.zhang@unisoc.com>
    [wsa: changed errno to ETIMEDOUT]
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a11e6edf1aa1f1cec6c2ed567ec3585cb640cdd4
Author: Andreas Kemnade <andreas@kemnade.info>
Date:   Fri Dec 4 10:55:39 2020 +0100

    ARM: OMAP2+: omap_device: fix idling of devices during probe
    
    commit ec76c2eea903947202098090bbe07a739b5246e9 upstream.
    
    On the GTA04A5 od->_driver_status was not set to BUS_NOTIFY_BIND_DRIVER
    during probe of the second mmc used for wifi. Therefore
    omap_device_late_idle idled the device during probing causing oopses when
    accessing the registers.
    
    It was not set because od->_state was set to OMAP_DEVICE_STATE_IDLE
    in the notifier callback. Therefore set od->_driver_status also in that
    case.
    
    This came apparent after commit 21b2cec61c04 ("mmc: Set
    PROBE_PREFER_ASYNCHRONOUS for drivers that existed in v4.4") causing this
    oops:
    
    omap_hsmmc 480b4000.mmc: omap_device_late_idle: enabled but no driver.  Idling
    8<--- cut here ---
    Unhandled fault: external abort on non-linefetch (0x1028) at 0xfa0b402c
    ...
    (omap_hsmmc_set_bus_width) from [<c07996bc>] (omap_hsmmc_set_ios+0x11c/0x258)
    (omap_hsmmc_set_ios) from [<c077b2b0>] (mmc_power_up.part.8+0x3c/0xd0)
    (mmc_power_up.part.8) from [<c077c14c>] (mmc_start_host+0x88/0x9c)
    (mmc_start_host) from [<c077d284>] (mmc_add_host+0x58/0x84)
    (mmc_add_host) from [<c0799190>] (omap_hsmmc_probe+0x5fc/0x8c0)
    (omap_hsmmc_probe) from [<c0666728>] (platform_drv_probe+0x48/0x98)
    (platform_drv_probe) from [<c066457c>] (really_probe+0x1dc/0x3b4)
    
    Fixes: 04abaf07f6d5 ("ARM: OMAP2+: omap_device: Sync omap_device and pm_runtime after probe defer")
    Fixes: 21b2cec61c04 ("mmc: Set PROBE_PREFER_ASYNCHRONOUS for drivers that existed in v4.4")
    Acked-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Andreas Kemnade <andreas@kemnade.info>
    [tony@atomide.com: left out extra parens, trimmed description stack trace]
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b25c7903b20e49b3bb1b83d4681db1a30f02d19
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Sat Nov 14 19:39:05 2020 +0100

    iio: imu: st_lsm6dsx: fix edge-trigger interrupts
    
    commit 3f9bce7a22a3f8ac9d885c9d75bc45569f24ac8b upstream
    
    If we are using edge IRQs, new samples can arrive while processing
    current interrupt since there are no hw guarantees the irq line
    stays "low" long enough to properly detect the new interrupt.
    In this case the new sample will be missed.
    Polling FIFO status register in st_lsm6dsx_handler_thread routine
    allow us to read new samples even if the interrupt arrives while
    processing previous data and the timeslot where the line is "low"
    is too short to be properly detected.
    
    Fixes: 89ca88a7cdf2 ("iio: imu: st_lsm6dsx: support active-low interrupts")
    Fixes: 290a6ce11d93 ("iio: imu: add support to lsm6dsx driver")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Link: https://lore.kernel.org/r/5e93cda7dc1e665f5685c53ad8e9ea71dbae782d.1605378871.git.lorenzo@kernel.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    [sudip: manual backport to old irq handler path]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f5423d9cded3e58e35fef985b8a06e4527ca4a9
Author: Sean Nyekjaer <sean@geanix.com>
Date:   Mon Jul 15 09:07:15 2019 +0200

    iio: imu: st_lsm6dsx: flip irq return logic
    
    commit ec76d918f23034f9f662539ca9c64e2ae3ba9fba upstream
    
    No need for using reverse logic in the irq return,
    fix this by flip things around.
    
    Signed-off-by: Sean Nyekjaer <sean@geanix.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d271a67dad2d1b8fda78629f51ae75d1d283e75
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Dec 7 09:17:05 2020 +0100

    spi: pxa2xx: Fix use-after-free on unbind
    
    commit 5626308bb94d9f930aa5f7c77327df4c6daa7759 upstream
    
    pxa2xx_spi_remove() accesses the driver's private data after calling
    spi_unregister_controller() even though that function releases the last
    reference on the spi_controller and thereby frees the private data.
    
    Fix by switching over to the new devm_spi_alloc_master/slave() helper
    which keeps the private data accessible until the driver has unbound.
    
    Fixes: 32e5b57232c0 ("spi: pxa2xx: Fix controller unregister order")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v2.6.17+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v2.6.17+: 32e5b57232c0: spi: pxa2xx: Fix controller unregister order
    Cc: <stable@vger.kernel.org> # v2.6.17+
    Link: https://lore.kernel.org/r/5764b04d4a6e43069ebb7808f64c2f774ac6f193.1607286887.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 223140bb0e9ae1fd9f8090b2f032903ce61c0973
Author: Richard Weinberger <richard@nod.at>
Date:   Mon Nov 16 22:05:30 2020 +0100

    ubifs: wbuf: Don't leak kernel memory to flash
    
    commit 20f1431160c6b590cdc269a846fc5a448abf5b98 upstream
    
    Write buffers use a kmalloc()'ed buffer, they can leak
    up to seven bytes of kernel memory to flash if writes are not
    aligned.
    So use ubifs_pad() to fill these gaps with padding bytes.
    This was never a problem while scanning because the scanner logic
    manually aligns node lengths and skips over these gaps.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 1e51764a3c2ac05a2 ("UBIFS: add new flash file system")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Reviewed-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 810b82ec9572c04cc920d8ca26a184bf50aadbd9
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Dec 16 09:29:51 2020 +0000

    drm/i915: Fix mismatch between misplaced vma check and vma insert
    
    commit 0e53656ad8abc99e0a80c3de611e593ebbf55829 upstream
    
    When inserting a VMA, we restrict the placement to the low 4G unless the
    caller opts into using the full range. This was done to allow usersapce
    the opportunity to transition slowly from a 32b address space, and to
    avoid breaking inherent 32b assumptions of some commands.
    
    However, for insert we limited ourselves to 4G-4K, but on verification
    we allowed the full 4G. This causes some attempts to bind a new buffer
    to sporadically fail with -ENOSPC, but at other times be bound
    successfully.
    
    commit 48ea1e32c39d ("drm/i915/gen9: Set PIN_ZONE_4G end to 4GB - 1
    page") suggests that there is a genuine problem with stateless addressing
    that cannot utilize the last page in 4G and so we purposefully excluded
    it. This means that the quick pin pass may cause us to utilize a buggy
    placement.
    
    Reported-by: CQ Tang <cq.tang@intel.com>
    Testcase: igt/gem_exec_params/larger-than-life-batch
    Fixes: 48ea1e32c39d ("drm/i915/gen9: Set PIN_ZONE_4G end to 4GB - 1 page")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: CQ Tang <cq.tang@intel.com>
    Reviewed-by: CQ Tang <cq.tang@intel.com>
    Reviewed-by: Matthew Auld <matthew.auld@intel.com>
    Cc: <stable@vger.kernel.org> # v4.5+
    Link: https://patchwork.freedesktop.org/patch/msgid/20201216092951.7124-1-chris@chris-wilson.co.uk
    (cherry picked from commit 5f22cc0b134ab702d7f64b714e26018f7288ffee)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    [sudip: use file from old path]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17cd730d941e5fabbf465e4a0d7b1faa764add13
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Aug 21 12:42:47 2020 -0700

    vmlinux.lds.h: Add PGO and AutoFDO input sections
    
    commit eff8728fe69880d3f7983bec3fb6cea4c306261f upstream.
    
    Basically, consider .text.{hot|unlikely|unknown}.* part of .text, too.
    
    When compiling with profiling information (collected via PGO
    instrumentations or AutoFDO sampling), Clang will separate code into
    .text.hot, .text.unlikely, or .text.unknown sections based on profiling
    information. After D79600 (clang-11), these sections will have a
    trailing `.` suffix, ie.  .text.hot., .text.unlikely., .text.unknown..
    
    When using -ffunction-sections together with profiling infomation,
    either explicitly (FGKASLR) or implicitly (LTO), code may be placed in
    sections following the convention:
    .text.hot.<foo>, .text.unlikely.<bar>, .text.unknown.<baz>
    where <foo>, <bar>, and <baz> are functions.  (This produces one section
    per function; we generally try to merge these all back via linker script
    so that we don't have 50k sections).
    
    For the above cases, we need to teach our linker scripts that such
    sections might exist and that we'd explicitly like them grouped
    together, otherwise we can wind up with code outside of the
    _stext/_etext boundaries that might not be mapped properly for some
    architectures, resulting in boot failures.
    
    If the linker script is not told about possible input sections, then
    where the section is placed as output is a heuristic-laiden mess that's
    non-portable between linkers (ie. BFD and LLD), and has resulted in many
    hard to debug bugs.  Kees Cook is working on cleaning this up by adding
    --orphan-handling=warn linker flag used in ARCH=powerpc to additional
    architectures. In the case of linker scripts, borrowing from the Zen of
    Python: explicit is better than implicit.
    
    Also, ld.bfd's internal linker script considers .text.hot AND
    .text.hot.* to be part of .text, as well as .text.unlikely and
    .text.unlikely.*. I didn't see support for .text.unknown.*, and didn't
    see Clang producing such code in our kernel builds, but I see code in
    LLVM that can produce such section names if profiling information is
    missing. That may point to a larger issue with generating or collecting
    profiles, but I would much rather be safe and explicit than have to
    debug yet another issue related to orphan section placement.
    
    Reported-by: Jian Cai <jiancai@google.com>
    Suggested-by: Fāng-ruì Sòng <maskray@google.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Tested-by: Luis Lozano <llozano@google.com>
    Tested-by: Manoj Gupta <manojgupta@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: linux-arch@vger.kernel.org
    Cc: stable@vger.kernel.org
    Link: https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=add44f8d5c5c05e08b11e033127a744d61c26aee
    Link: https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=1de778ed23ce7492c523d5850c6c6dbb34152655
    Link: https://reviews.llvm.org/D79600
    Link: https://bugs.chromium.org/p/chromium/issues/detail?id=1084760
    Link: https://lore.kernel.org/r/20200821194310.3089815-7-keescook@chromium.org
    
    Debugged-by: Luis Lozano <llozano@google.com>
    [nc: Resolve small conflict due to lack of NOINSTR_TEXT]
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e48801a55a3ea35cf860069cb20eb84f117ab2a0
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Mon Jan 11 15:12:58 2021 -0800

    x86/resctrl: Don't move a task to the same resource group
    
    commit a0195f314a25582b38993bf30db11c300f4f4611 upstream
    
    Shakeel Butt reported in [1] that a user can request a task to be moved
    to a resource group even if the task is already in the group. It just
    wastes time to do the move operation which could be costly to send IPI
    to a different CPU.
    
    Add a sanity check to ensure that the move operation only happens when
    the task is not already in the resource group.
    
    [1] https://lore.kernel.org/lkml/CALvZod7E9zzHwenzf7objzGKsdBmVwTgEJ0nPgs0LUFU3SN5Pw@mail.gmail.com/
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    for older stable trees.
    
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Reported-by: Shakeel Butt <shakeelb@google.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/962ede65d8e95be793cb61102cca37f7bb018e66.1608243147.git.reinette.chatre@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2504cda46c457422a3f6eedc8054487773fbf250
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Mon Jan 11 15:12:28 2021 -0800

    x86/resctrl: Use an IPI instead of task_work_add() to update PQR_ASSOC MSR
    
    commit ae28d1aae48a1258bd09a6f707ebb4231d79a761 upstream
    
    Currently, when moving a task to a resource group the PQR_ASSOC MSR is
    updated with the new closid and rmid in an added task callback. If the
    task is running, the work is run as soon as possible. If the task is not
    running, the work is executed later in the kernel exit path when the
    kernel returns to the task again.
    
    Updating the PQR_ASSOC MSR as soon as possible on the CPU a moved task
    is running is the right thing to do. Queueing work for a task that is
    not running is unnecessary (the PQR_ASSOC MSR is already updated when
    the task is scheduled in) and causing system resource waste with the way
    in which it is implemented: Work to update the PQR_ASSOC register is
    queued every time the user writes a task id to the "tasks" file, even if
    the task already belongs to the resource group.
    
    This could result in multiple pending work items associated with a
    single task even if they are all identical and even though only a single
    update with most recent values is needed. Specifically, even if a task
    is moved between different resource groups while it is sleeping then it
    is only the last move that is relevant but yet a work item is queued
    during each move.
    
    This unnecessary queueing of work items could result in significant
    system resource waste, especially on tasks sleeping for a long time.
    For example, as demonstrated by Shakeel Butt in [1] writing the same
    task id to the "tasks" file can quickly consume significant memory. The
    same problem (wasted system resources) occurs when moving a task between
    different resource groups.
    
    As pointed out by Valentin Schneider in [2] there is an additional issue
    with the way in which the queueing of work is done in that the task_struct
    update is currently done after the work is queued, resulting in a race with
    the register update possibly done before the data needed by the update is
    available.
    
    To solve these issues, update the PQR_ASSOC MSR in a synchronous way
    right after the new closid and rmid are ready during the task movement,
    only if the task is running. If a moved task is not running nothing
    is done since the PQR_ASSOC MSR will be updated next time the task is
    scheduled. This is the same way used to update the register when tasks
    are moved as part of resource group removal.
    
    [1] https://lore.kernel.org/lkml/CALvZod7E9zzHwenzf7objzGKsdBmVwTgEJ0nPgs0LUFU3SN5Pw@mail.gmail.com/
    [2] https://lore.kernel.org/lkml/20201123022433.17905-1-valentin.schneider@arm.com
    
     [ bp: Massage commit message and drop the two update_task_closid_rmid()
       variants. ]
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    for older stable trees.
    
    Since upstream commit 352940ececaca ("x86/resctrl: Rename the RDT
    functions and definitions"), resctrl functions received more generic
    names. Specifically related to this backport, intel_rdt_sched_in()
    was renamed to rescrl_sched_in().
    
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Reported-by: Shakeel Butt <shakeelb@google.com>
    Reported-by: Valentin Schneider <valentin.schneider@arm.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Signed-off-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: James Morse <james.morse@arm.com>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/17aa2fb38fc12ce7bb710106b3e7c7b45acb9e94.1608243147.git.reinette.chatre@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcef0298b67a9147d7d8246bda6809c6c6ad54c6
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jan 6 00:15:22 2021 +0100

    net: fix pmtu check in nopmtudisc mode
    
    [ Upstream commit 50c661670f6a3908c273503dfa206dfc7aa54c07 ]
    
    For some reason ip_tunnel insist on setting the DF bit anyway when the
    inner header has the DF bit set, EVEN if the tunnel was configured with
    'nopmtudisc'.
    
    This means that the script added in the previous commit
    cannot be made to work by adding the 'nopmtudisc' flag to the
    ip tunnel configuration. Doing so breaks connectivity even for the
    without-conntrack/netfilter scenario.
    
    When nopmtudisc is set, the tunnel will skip the mtu check, so no
    icmp error is sent to client. Then, because inner header has DF set,
    the outer header gets added with DF bit set as well.
    
    IP stack then sends an error to itself because the packet exceeds
    the device MTU.
    
    Fixes: 23a3647bc4f93 ("ip_tunnels: Use skb-len to PMTU check.")
    Cc: Stefano Brivio <sbrivio@redhat.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab1bfce9b8ff7b63f4d887dc3ba95107069428b5
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Jan 6 00:15:23 2021 +0100

    net: ip: always refragment ip defragmented packets
    
    [ Upstream commit bb4cc1a18856a73f0ff5137df0c2a31f4c50f6cf ]
    
    Conntrack reassembly records the largest fragment size seen in IPCB.
    However, when this gets forwarded/transmitted, fragmentation will only
    be forced if one of the fragmented packets had the DF bit set.
    
    In that case, a flag in IPCB will force fragmentation even if the
    MTU is large enough.
    
    This should work fine, but this breaks with ip tunnels.
    Consider client that sends a UDP datagram of size X to another host.
    
    The client fragments the datagram, so two packets, of size y and z, are
    sent. DF bit is not set on any of these packets.
    
    Middlebox netfilter reassembles those packets back to single size-X
    packet, before routing decision.
    
    packet-size-vs-mtu checks in ip_forward are irrelevant, because DF bit
    isn't set.  At output time, ip refragmentation is skipped as well
    because x is still smaller than the mtu of the output device.
    
    If ttransmit device is an ip tunnel, the packet size increases to
    x+overhead.
    
    Also, tunnel might be configured to force DF bit on outer header.
    
    In this case, packet will be dropped (exceeds MTU) and an ICMP error is
    generated back to sender.
    
    But sender already respects the announced MTU, all the packets that
    it sent did fit the announced mtu.
    
    Force refragmentation as per original sizes unconditionally so ip tunnel
    will encapsulate the fragments instead.
    
    The only other solution I see is to place ip refragmentation in
    the ip_tunnel code to handle this case.
    
    Fixes: d6b915e29f4ad ("ip_fragment: don't forward defragmented DF packet")
    Reported-by: Christian Perle <christian.perle@secunet.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3aa575035f9d3f508503d85c7a7246519a87e5c7
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Dec 30 19:40:27 2020 -0800

    net: vlan: avoid leaks on register_vlan_dev() failures
    
    [ Upstream commit 55b7ab1178cbf41f979ff83236d3321ad35ed2ad ]
    
    VLAN checks for NETREG_UNINITIALIZED to distinguish between
    registration failure and unregistration in progress.
    
    Since commit cb626bf566eb ("net-sysfs: Fix reference count leak")
    registration failure may, however, result in NETREG_UNREGISTERED
    as well as NETREG_UNINITIALIZED.
    
    This fix is similer to cebb69754f37 ("rtnetlink: Fix
    memory(net_device) leak when ->newlink fails")
    
    Fixes: cb626bf566eb ("net-sysfs: Fix reference count leak")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9290c6c3c1a62e6062e750f19df6eeb71d0db97
Author: Jouni K. Seppänen <jks@iki.fi>
Date:   Tue Jan 5 06:52:49 2021 +0200

    net: cdc_ncm: correct overhead in delayed_ndp_size
    
    [ Upstream commit 7a68d725e4ea384977445e0bcaed3d7de83ab5b3 ]
    
    Aligning to tx_ndp_modulus is not sufficient because the next align
    call can be cdc_ncm_align_tail, which can add up to ctx->tx_modulus +
    ctx->tx_remainder - 1 bytes. This used to lead to occasional crashes
    on a Huawei 909s-120 LTE module as follows:
    
    - the condition marked /* if there is a remaining skb [...] */ is true
      so the swaps happen
    - skb_out is set from ctx->tx_curr_skb
    - skb_out->len is exactly 0x3f52
    - ctx->tx_curr_size is 0x4000 and delayed_ndp_size is 0xac
      (note that the sum of skb_out->len and delayed_ndp_size is 0x3ffe)
    - the for loop over n is executed once
    - the cdc_ncm_align_tail call marked /* align beginning of next frame */
      increases skb_out->len to 0x3f56 (the sum is now 0x4002)
    - the condition marked /* check if we had enough room left [...] */ is
      false so we break out of the loop
    - the condition marked /* If requested, put NDP at end of frame. */ is
      true so the NDP is written into skb_out
    - now skb_out->len is 0x4002, so padding_count is minus two interpreted
      as an unsigned number, which is used as the length argument to memset,
      leading to a crash with various symptoms but usually including
    
    > Call Trace:
    >  <IRQ>
    >  cdc_ncm_fill_tx_frame+0x83a/0x970 [cdc_ncm]
    >  cdc_mbim_tx_fixup+0x1d9/0x240 [cdc_mbim]
    >  usbnet_start_xmit+0x5d/0x720 [usbnet]
    
    The cdc_ncm_align_tail call first aligns on a ctx->tx_modulus
    boundary (adding at most ctx->tx_modulus-1 bytes), then adds
    ctx->tx_remainder bytes. Alternatively, the next alignment call can
    occur in cdc_ncm_ndp16 or cdc_ncm_ndp32, in which case at most
    ctx->tx_ndp_modulus-1 bytes are added.
    
    A similar problem has occurred before, and the code is nontrivial to
    reason about, so add a guard before the crashing call. By that time it
    is too late to prevent any memory corruption (we'll have written past
    the end of the buffer already) but we can at least try to get a warning
    written into an on-disk log by avoiding the hard crash caused by padding
    past the buffer with a huge number of zeros.
    
    Signed-off-by: Jouni K. Seppänen <jks@iki.fi>
    Fixes: 4a0e3e989d66 ("cdc_ncm: Add support for moving NDP to end of NCM frame")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=209407
    Reported-by: kernel test robot <lkp@intel.com>
    Reviewed-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a5286b4d54e7ac39b9a8df3bc77a31fde4c15a
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Wed Jan 13 07:12:44 2021 +0000

    powerpc: Fix incorrect stw{, ux, u, x} instructions in __set_pte_at
    
    [ Upstream commit d85be8a49e733dcd23674aa6202870d54bf5600d ]
    
    The placeholder for instruction selection should use the second
    argument's operand, which is %1, not %0. This could generate incorrect
    assembly code if the memory addressing of operand %0 is a different
    form from that of operand %1.
    
    Also remove the %Un placeholder because having %Un placeholders
    for two operands which are based on the same local var (ptep) doesn't
    make much sense. By the way, it doesn't change the current behaviour
    because "<>" constraint is missing for the associated "=m".
    
    [chleroy: revised commit log iaw segher's comments and removed %U0]
    
    Fixes: 9bf2b5cdc5fe ("powerpc: Fixes for CONFIG_PTE_64BIT for SMP support")
    Cc: <stable@vger.kernel.org> # v2.6.28+
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Acked-by: Segher Boessenkool <segher@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/96354bd77977a6a933fe9020da57629007fdb920.1603358942.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc8a0ad5f046eb672da4a9aff0debabcf987d455
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jan 12 20:09:15 2021 +0100

    Linux 4.14.215
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20210111130033.715773309@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17fe2a6ac5572ee21c3f3d3735147a6e5ea4b538
Author: David Disseldorp <ddiss@suse.de>
Date:   Tue Nov 3 02:21:58 2020 +0100

    scsi: target: Fix XCOPY NAA identifier lookup
    
    commit 2896c93811e39d63a4d9b63ccf12a8fbc226e5e4 upstream.
    
    When attempting to match EXTENDED COPY CSCD descriptors with corresponding
    se_devices, target_xcopy_locate_se_dev_e4() currently iterates over LIO's
    global devices list which includes all configured backstores.
    
    This change ensures that only initiator-accessible backstores are
    considered during CSCD descriptor lookup, according to the session's
    se_node_acl LUN list.
    
    To avoid LUN removal race conditions, device pinning is changed from being
    configfs based to instead using the se_node_acl lun_ref.
    
    Reference: CVE-2020-28374
    Fixes: cbf031f425fd ("target: Add support for EXTENDED_COPY copy offload emulation")
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: David Disseldorp <ddiss@suse.de>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c340ece81f76437ceae5b4737c866f12bc5a521e
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Dec 22 05:20:43 2020 -0500

    KVM: x86: fix shift out of bounds reported by UBSAN
    
    commit 2f80d502d627f30257ba7e3655e71c373b7d1a5a upstream.
    
    Since we know that e >= s, we can reassociate the left shift,
    changing the shifted number from 1 to 2 in exchange for
    decreasing the right hand side by 1.
    
    Reported-by: syzbot+e87846c48bf72bc85311@syzkaller.appspotmail.com
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6985a587abfa8796a41b33080e1e1c1853defc84
Author: Ying-Tsun Huang <ying-tsun.huang@amd.com>
Date:   Tue Dec 15 15:07:20 2020 +0800

    x86/mtrr: Correct the range check before performing MTRR type lookups
    
    commit cb7f4a8b1fb426a175d1708f05581939c61329d4 upstream.
    
    In mtrr_type_lookup(), if the input memory address region is not in the
    MTRR, over 4GB, and not over the top of memory, a write-back attribute
    is returned. These condition checks are for ensuring the input memory
    address region is actually mapped to the physical memory.
    
    However, if the end address is just aligned with the top of memory,
    the condition check treats the address is over the top of memory, and
    write-back attribute is not returned.
    
    And this hits in a real use case with NVDIMM: the nd_pmem module tries
    to map NVDIMMs as cacheable memories when NVDIMMs are connected. If a
    NVDIMM is the last of the DIMMs, the performance of this NVDIMM becomes
    very low since it is aligned with the top of memory and its memory type
    is uncached-minus.
    
    Move the input end address change to inclusive up into
    mtrr_type_lookup(), before checking for the top of memory in either
    mtrr_type_lookup_{variable,fixed}() helpers.
    
     [ bp: Massage commit message. ]
    
    Fixes: 0cc705f56e40 ("x86/mm/mtrr: Clean up mtrr_type_lookup()")
    Signed-off-by: Ying-Tsun Huang <ying-tsun.huang@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20201215070721.4349-1-ying-tsun.huang@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2428978bef366821e3d42cd9708aac5e5a3ec11d
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Dec 22 23:23:56 2020 +0100

    netfilter: xt_RATEEST: reject non-null terminated string from userspace
    
    commit 6cb56218ad9e580e519dcd23bfb3db08d8692e5a upstream.
    
    syzbot reports:
    detected buffer overflow in strlen
    [..]
    Call Trace:
     strlen include/linux/string.h:325 [inline]
     strlcpy include/linux/string.h:348 [inline]
     xt_rateest_tg_checkentry+0x2a5/0x6b0 net/netfilter/xt_RATEEST.c:143
    
    strlcpy assumes src is a c-string. Check info->name before its used.
    
    Reported-by: syzbot+e86f7c428c8c50db65b4@syzkaller.appspotmail.com
    Fixes: 5859034d7eb8793 ("[NETFILTER]: x_tables: add RATEEST target")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38b3584cca2ac6bb97730688fb10a47b1fa79bc4
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Dec 17 17:53:18 2020 +0300

    netfilter: ipset: fix shift-out-of-bounds in htable_bits()
    
    commit 5c8193f568ae16f3242abad6518dc2ca6c8eef86 upstream.
    
    htable_bits() can call jhash_size(32) and trigger shift-out-of-bounds
    
    UBSAN: shift-out-of-bounds in net/netfilter/ipset/ip_set_hash_gen.h:151:6
    shift exponent 32 is too large for 32-bit type 'unsigned int'
    CPU: 0 PID: 8498 Comm: syz-executor519
     Not tainted 5.10.0-rc7-next-20201208-syzkaller #0
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x107/0x163 lib/dump_stack.c:120
     ubsan_epilogue+0xb/0x5a lib/ubsan.c:148
     __ubsan_handle_shift_out_of_bounds.cold+0xb1/0x181 lib/ubsan.c:395
     htable_bits net/netfilter/ipset/ip_set_hash_gen.h:151 [inline]
     hash_mac_create.cold+0x58/0x9b net/netfilter/ipset/ip_set_hash_gen.h:1524
     ip_set_create+0x610/0x1380 net/netfilter/ipset/ip_set_core.c:1115
     nfnetlink_rcv_msg+0xecc/0x1180 net/netfilter/nfnetlink.c:252
     netlink_rcv_skb+0x153/0x420 net/netlink/af_netlink.c:2494
     nfnetlink_rcv+0x1ac/0x420 net/netfilter/nfnetlink.c:600
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x533/0x7d0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x907/0xe40 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2345
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2399
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2432
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    This patch replaces htable_bits() by simple fls(hashsize - 1) call:
    it alone returns valid nbits both for round and non-round hashsizes.
    It is normal to set any nbits here because it is validated inside
    following htable_size() call which returns 0 for nbits>31.
    
    Fixes: 1feab10d7e6d("netfilter: ipset: Unified hash type generation")
    Reported-by: syzbot+d66bfadebca46cf61a2b@syzkaller.appspotmail.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24731b706a0be7f1d32e399e3a06a4a8fb0d2572
Author: Bard Liao <yung-chuan.liao@linux.intel.com>
Date:   Tue Jan 5 17:11:45 2021 +0800

    Revert "device property: Keep secondary firmware node secondary by type"
    
    commit 47f4469970d8861bc06d2d4d45ac8200ff07c693 upstream.
    
    While commit d5dcce0c414f ("device property: Keep secondary firmware
    node secondary by type") describes everything correct in its commit
    message, the change it made does the opposite and original commit
    c15e1bdda436 ("device property: Fix the secondary firmware node handling
    in set_primary_fwnode()") was fully correct.
    
    Revert the former one here and improve documentation in the next patch.
    
    Fixes: d5dcce0c414f ("device property: Keep secondary firmware node secondary by type")
    Signed-off-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: 5.10+ <stable@vger.kernel.org> # 5.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6eb4cca76db0c9012903d9a89bf063981ae3eaa
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Oct 23 14:46:47 2020 +0800

    ALSA: hda/realtek - Fix speaker volume control on Lenovo C940
    
    commit f86de9b1c0663b0a3ca2dcddec9aa910ff0fbf2c upstream.
    
    Cannot adjust speaker's volume on Lenovo C940.
    Applying the alc298_fixup_speaker_volume function can fix the issue.
    
    [ Additional note: C940 has I2S amp for the speaker and this needs the
      same initialization as Dell machines.
      The patch was slightly modified so that the quirk entry is moved
      next to the corresponding Dell quirk entry. -- tiwai ]
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/ea25b4e5c468491aa2e9d6cb1f2fced3@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5a5a16b2d1f09ef79835b7cd4a8e90ac770e7dc
Author: bo liu <bo.liu@senarytech.com>
Date:   Tue Dec 29 11:52:26 2020 +0800

    ALSA: hda/conexant: add a new hda codec CX11970
    
    commit 744a11abc56405c5a106e63da30a941b6d27f737 upstream.
    
    The current kernel does not support the cx11970 codec chip.
    Add a codec configuration item to kernel.
    
    [ Minor coding style fix by tiwai ]
    
    Signed-off-by: bo liu <bo.liu@senarytech.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201229035226.62120-1-bo.liu@senarytech.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f98ff29a87c3ff381460674c03cbd94546526ad
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Wed Dec 2 22:28:12 2020 -0800

    x86/mm: Fix leak of pmd ptlock
    
    commit d1c5246e08eb64991001d97a3bd119c93edbc79a upstream.
    
    Commit
    
      28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    
    introduced a new location where a pmd was released, but neglected to
    run the pmd page destructor. In fact, this happened previously for a
    different pmd release path and was fixed by commit:
    
      c283610e44ec ("x86, mm: do not leak page->ptl for pmd page tables").
    
    This issue was hidden until recently because the failure mode is silent,
    but commit:
    
      b2b29d6d0119 ("mm: account PMD tables like PTE tables")
    
    turns the failure mode into this signature:
    
     BUG: Bad page state in process lt-pmem-ns  pfn:15943d
     page:000000007262ed7b refcount:0 mapcount:-1024 mapping:0000000000000000 index:0x0 pfn:0x15943d
     flags: 0xaffff800000000()
     raw: 00affff800000000 dead000000000100 0000000000000000 0000000000000000
     raw: 0000000000000000 ffff913a029bcc08 00000000fffffbff 0000000000000000
     page dumped because: nonzero mapcount
     [..]
      dump_stack+0x8b/0xb0
      bad_page.cold+0x63/0x94
      free_pcp_prepare+0x224/0x270
      free_unref_page+0x18/0xd0
      pud_free_pmd_page+0x146/0x160
      ioremap_pud_range+0xe3/0x350
      ioremap_page_range+0x108/0x160
      __ioremap_caller.constprop.0+0x174/0x2b0
      ? memremap+0x7a/0x110
      memremap+0x7a/0x110
      devm_memremap+0x53/0xa0
      pmem_attach_disk+0x4ed/0x530 [nd_pmem]
      ? __devm_release_region+0x52/0x80
      nvdimm_bus_probe+0x85/0x210 [libnvdimm]
    
    Given this is a repeat occurrence it seemed prudent to look for other
    places where this destructor might be missing and whether a better
    helper is needed. try_to_free_pmd_page() looks like a candidate, but
    testing with setting up and tearing down pmd mappings via the dax unit
    tests is thus far not triggering the failure.
    
    As for a better helper pmd_free() is close, but it is a messy fit
    due to requiring an @mm arg. Also, ___pmd_free_tlb() wants to call
    paravirt_tlb_remove_table() instead of free_page(), so open-coded
    pgtable_pmd_page_dtor() seems the best way forward for now.
    
    Debugged together with Matthew Wilcox <willy@infradead.org>.
    
    Fixes: 28ee90fe6048 ("x86/mm: implement free pmd/pte page interfaces")
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Yi Zhang <yi.zhang@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/160697689204.605323.17629854984697045602.stgit@dwillia2-desk3.amr.corp.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ac65b29f6571c1abb850b1e0ba80f90b9706e1b
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Jan 8 15:55:28 2021 +0100

    USB: serial: keyspan_pda: remove unused variable
    
    Remove an unused variable which was mistakingly left by commit
    37faf5061541 ("USB: serial: keyspan_pda: fix write-wakeup
    use-after-free") and only removed by a later change.
    
    This is needed to suppress a W=1 warning about the unused variable in
    the stable trees that the build bots triggers.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28921f213922417cfce6df29fbd4cd3be7132349
Author: Eddie Hung <eddie.hung@mediatek.com>
Date:   Tue Dec 29 18:53:35 2020 +0800

    usb: gadget: configfs: Fix use-after-free issue with udc_name
    
    commit 64e6bbfff52db4bf6785fab9cffab850b2de6870 upstream.
    
    There is a use-after-free issue, if access udc_name
    in function gadget_dev_desc_UDC_store after another context
    free udc_name in function unregister_gadget.
    
    Context 1:
    gadget_dev_desc_UDC_store()->unregister_gadget()->
    free udc_name->set udc_name to NULL
    
    Context 2:
    gadget_dev_desc_UDC_show()-> access udc_name
    
    Call trace:
    dump_backtrace+0x0/0x340
    show_stack+0x14/0x1c
    dump_stack+0xe4/0x134
    print_address_description+0x78/0x478
    __kasan_report+0x270/0x2ec
    kasan_report+0x10/0x18
    __asan_report_load1_noabort+0x18/0x20
    string+0xf4/0x138
    vsnprintf+0x428/0x14d0
    sprintf+0xe4/0x12c
    gadget_dev_desc_UDC_show+0x54/0x64
    configfs_read_file+0x210/0x3a0
    __vfs_read+0xf0/0x49c
    vfs_read+0x130/0x2b4
    SyS_read+0x114/0x208
    el0_svc_naked+0x34/0x38
    
    Add mutex_lock to protect this kind of scenario.
    
    Signed-off-by: Eddie Hung <eddie.hung@mediatek.com>
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1609239215-21819-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b481e326a4fc77e1ef1ab14f61d17345885436ed
Author: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
Date:   Tue Dec 29 14:44:43 2020 -0800

    usb: gadget: configfs: Preserve function ordering after bind failure
    
    commit 6cd0fe91387917be48e91385a572a69dfac2f3f7 upstream.
    
    When binding the ConfigFS gadget to a UDC, the functions in each
    configuration are added in list order. However, if usb_add_function()
    fails, the failed function is put back on its configuration's
    func_list and purge_configs_funcs() is called to further clean up.
    
    purge_configs_funcs() iterates over the configurations and functions
    in forward order, calling unbind() on each of the previously added
    functions. But after doing so, each function gets moved to the
    tail of the configuration's func_list. This results in reshuffling
    the original order of the functions within a configuration such
    that the failed function now appears first even though it may have
    originally appeared in the middle or even end of the list. At this
    point if the ConfigFS gadget is attempted to re-bind to the UDC,
    the functions will be added in a different order than intended,
    with the only recourse being to remove and relink the functions all
    over again.
    
    An example of this as follows:
    
    ln -s functions/mass_storage.0 configs/c.1
    ln -s functions/ncm.0 configs/c.1
    ln -s functions/ffs.adb configs/c.1     # oops, forgot to start adbd
    echo "<udc device>" > UDC               # fails
    start adbd
    echo "<udc device>" > UDC               # now succeeds, but...
                                            # bind order is
                                            # "ADB", mass_storage, ncm
    
    [30133.118289] configfs-gadget gadget: adding 'Mass Storage Function'/ffffff810af87200 to config 'c'/ffffff817d6a2520
    [30133.119875] configfs-gadget gadget: adding 'cdc_network'/ffffff80f48d1a00 to config 'c'/ffffff817d6a2520
    [30133.119974] using random self ethernet address
    [30133.120002] using random host ethernet address
    [30133.139604] usb0: HOST MAC 3e:27:46:ba:3e:26
    [30133.140015] usb0: MAC 6e:28:7e:42:66:6a
    [30133.140062] configfs-gadget gadget: adding 'Function FS Gadget'/ffffff80f3868438 to config 'c'/ffffff817d6a2520
    [30133.140081] configfs-gadget gadget: adding 'Function FS Gadget'/ffffff80f3868438 --> -19
    [30133.140098] configfs-gadget gadget: unbind function 'Mass Storage Function'/ffffff810af87200
    [30133.140119] configfs-gadget gadget: unbind function 'cdc_network'/ffffff80f48d1a00
    [30133.173201] configfs-gadget a600000.dwc3: failed to start g1: -19
    [30136.661933] init: starting service 'adbd'...
    [30136.700126] read descriptors
    [30136.700413] read strings
    [30138.574484] configfs-gadget gadget: adding 'Function FS Gadget'/ffffff80f3868438 to config 'c'/ffffff817d6a2520
    [30138.575497] configfs-gadget gadget: adding 'Mass Storage Function'/ffffff810af87200 to config 'c'/ffffff817d6a2520
    [30138.575554] configfs-gadget gadget: adding 'cdc_network'/ffffff80f48d1a00 to config 'c'/ffffff817d6a2520
    [30138.575631] using random self ethernet address
    [30138.575660] using random host ethernet address
    [30138.595338] usb0: HOST MAC 2e:cf:43:cd:ca:c8
    [30138.597160] usb0: MAC 6a:f0:9f:ee:82:a0
    [30138.791490] configfs-gadget gadget: super-speed config #1: c
    
    Fix this by reversing the iteration order of the functions in
    purge_config_funcs() when unbinding them, and adding them back to
    the config's func_list at the head instead of the tail. This
    ensures that we unbind and unwind back to the original list order.
    
    Fixes: 88af8bbe4ef7 ("usb: gadget: the start of the configfs interface")
    Signed-off-by: Chandana Kishori Chiluveru <cchiluve@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20201229224443.31623-1-jackp@codeaurora.org
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfa5061dda06ec1749da480dcc6ee71ba0389c8a
Author: Sriharsha Allenki <sallenki@codeaurora.org>
Date:   Wed Dec 2 18:32:20 2020 +0530

    usb: gadget: Fix spinlock lockup on usb_function_deactivate
    
    commit 5cc35c224a80aa5a5a539510ef049faf0d6ed181 upstream.
    
    There is a spinlock lockup as part of composite_disconnect
    when it tries to acquire cdev->lock as part of usb_gadget_deactivate.
    This is because the usb_gadget_deactivate is called from
    usb_function_deactivate with the same spinlock held.
    
    This would result in the below call stack and leads to stall.
    
    rcu: INFO: rcu_preempt detected stalls on CPUs/tasks:
    rcu:     3-...0: (1 GPs behind) idle=162/1/0x4000000000000000
    softirq=10819/10819 fqs=2356
     (detected by 2, t=5252 jiffies, g=20129, q=3770)
     Task dump for CPU 3:
     task:uvc-gadget_wlhe state:R  running task     stack:    0 pid:  674 ppid:
     636 flags:0x00000202
     Call trace:
      __switch_to+0xc0/0x170
      _raw_spin_lock_irqsave+0x84/0xb0
      composite_disconnect+0x28/0x78
      configfs_composite_disconnect+0x68/0x70
      usb_gadget_disconnect+0x10c/0x128
      usb_gadget_deactivate+0xd4/0x108
      usb_function_deactivate+0x6c/0x80
      uvc_function_disconnect+0x20/0x58
      uvc_v4l2_release+0x30/0x88
      v4l2_release+0xbc/0xf0
      __fput+0x7c/0x230
      ____fput+0x14/0x20
      task_work_run+0x88/0x140
      do_notify_resume+0x240/0x6f0
      work_pending+0x8/0x200
    
    Fix this by doing an unlock on cdev->lock before the usb_gadget_deactivate
    call from usb_function_deactivate.
    
    The same lockup can happen in the usb_gadget_activate path. Fix that path
    as well.
    
    Reported-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/linux-usb/20201102094936.GA29581@b29397-desktop/
    Tested-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Sriharsha Allenki <sallenki@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201202130220.24926-1-sallenki@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ce8f334b0f201460bb70c42a0ff69d0c0b22141
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 17 17:29:55 2020 +0800

    USB: gadget: legacy: fix return error code in acm_ms_bind()
    
    commit c91d3a6bcaa031f551ba29a496a8027b31289464 upstream.
    
    If usb_otg_descriptor_alloc() failed, it need return ENOMEM.
    
    Fixes: 578aa8a2b12c ("usb: gadget: acm_ms: allocate and init otg descriptor by otg capabilities")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201117092955.4102785-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c06a5f76e60c4da3ce6cd79491410d6773bbeed4
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Thu Dec 10 10:01:48 2020 +0800

    usb: gadget: function: printer: Fix a memory leak for interface descriptor
    
    commit 2cc332e4ee4febcbb685e2962ad323fe4b3b750a upstream.
    
    When printer driver is loaded, the printer_func_bind function is called, in
    this function, the interface descriptor be allocated memory, if after that,
    the error occurred, the interface descriptor memory need to be free.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Link: https://lore.kernel.org/r/20201210020148.6691-1-qiang.zhang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bba0f484dbc2ded6fdfc79879209862f40f3d0ee
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Mon Dec 21 18:35:28 2020 +0100

    usb: gadget: f_uac2: reset wMaxPacketSize
    
    commit 9389044f27081d6ec77730c36d5bf9a1288bcda2 upstream.
    
    With commit 913e4a90b6f9 ("usb: gadget: f_uac2: finalize wMaxPacketSize according to bandwidth")
    wMaxPacketSize is computed dynamically but the value is never reset.
    
    Because of this, the actual maximum packet size can only decrease each time
    the audio gadget is instantiated.
    
    Reset the endpoint maximum packet size and mark wMaxPacketSize as dynamic
    to solve the problem.
    
    Fixes: 913e4a90b6f9 ("usb: gadget: f_uac2: finalize wMaxPacketSize according to bandwidth")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201221173531.215169-2-jbrunet@baylibre.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 763f9e9209da89e07b9623a4c171617b5199284f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Sun Jan 3 22:42:17 2021 +0100

    usb: gadget: select CONFIG_CRC32
    
    commit d7889c2020e08caab0d7e36e947f642d91015bd0 upstream.
    
    Without crc32 support, this driver fails to link:
    
    arm-linux-gnueabi-ld: drivers/usb/gadget/function/f_eem.o: in function `eem_unwrap':
    f_eem.c:(.text+0x11cc): undefined reference to `crc32_le'
    arm-linux-gnueabi-ld: drivers/usb/gadget/function/f_ncm.o:f_ncm.c:(.text+0x1e40):
    more undefined references to `crc32_le' follow
    
    Fixes: 6d3865f9d41f ("usb: gadget: NCM: Add transmit multi-frame.")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20210103214224.1996535-1-arnd@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7de2ebdd673af0dab4d0ac1e58f490cb00ecc996
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Dec 23 18:45:57 2020 +0100

    ALSA: usb-audio: Fix UBSAN warnings for MIDI jacks
    
    commit c06ccf3ebb7503706ea49fd248e709287ef385a3 upstream.
    
    The calculation of in_cables and out_cables bitmaps are done with the
    bit shift by the value from the descriptor, which is an arbitrary
    value, and can lead to UBSAN shift-out-of-bounds warnings.
    
    Fix it by filtering the bad descriptor values with the check of the
    upper bound 0x10 (the cable bitmaps are 16 bits).
    
    Reported-by: syzbot+92e45ae45543f89e8c88@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201223174557.10249-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20e807e262c9bedfdd30da2ce669ef8bfa2fc757
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 4 15:53:02 2021 +0100

    USB: usblp: fix DMA to stack
    
    commit 020a1f453449294926ca548d8d5ca970926e8dfd upstream.
    
    Stack-allocated buffers cannot be used for DMA (on all architectures).
    
    Replace the HP-channel macro with a helper function that allocates a
    dedicated transfer buffer so that it can continue to be used with
    arguments from the stack.
    
    Note that the buffer is cleared on allocation as usblp_ctrl_msg()
    returns success also on short transfers (the buffer is only used for
    debugging).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20210104145302.2087-1-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb5544856137df2a7bfa0bf9072fc31c24a5a206
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Dec 14 11:30:53 2020 +0100

    USB: yurex: fix control-URB timeout handling
    
    commit 372c93131998c0622304bed118322d2a04489e63 upstream.
    
    Make sure to always cancel the control URB in write() so that it can be
    reused after a timeout or spurious CMD_ACK.
    
    Currently any further write requests after a timeout would fail after
    triggering a WARN() in usb_submit_urb() when attempting to submit the
    already active URB.
    
    Reported-by: syzbot+e87ebe0f7913f71f2ea5@syzkaller.appspotmail.com
    Fixes: 6bc235a2e24a ("USB: add driver for Meywa-Denki & Kayac YUREX")
    Cc: stable <stable@vger.kernel.org>     # 2.6.37
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a841a69ec809568f7db51e626f7c272ca1b73a3
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Dec 30 16:25:34 2020 +0100

    USB: serial: option: add Quectel EM160R-GL
    
    commit d6c1ddd938d84a1adef7e19e8efc10e1b4df5034 upstream.
    
    New modem using ff/ff/30 for QCDM, ff/00/00 for  AT and NMEA,
    and ff/ff/ff for RMNET/QMI.
    
    T: Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 2 Spd=5000 MxCh= 0
    D: Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs= 1
    P: Vendor=2c7c ProdID=0620 Rev= 4.09
    S: Manufacturer=Quectel
    S: Product=EM160R-GL
    S: SerialNumber=e31cedc1
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E: Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=83(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=85(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=84(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=87(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=04(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E: Ad=88(I) Atr=03(Int.) MxPS= 8 Ivl=32ms
    E: Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    [ johan: add model comment ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc00680b37ac4cf665edd5434d46a7bfa004ed85
Author: Daniel Palmer <daniel@0x0f.com>
Date:   Sun Dec 27 12:17:16 2020 +0900

    USB: serial: option: add LongSung M5710 module support
    
    commit 0e2d6795e8dbe91c2f5473564c6b25d11df3778b upstream.
    
    Add a device-id entry for the LongSung M5710 module.
    
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2df3 ProdID=9d03 Rev= 1.00
    S:  Manufacturer=Marvell
    S:  Product=Mobile Composite Device Bus
    S:  SerialNumber=<snip>
    C:* #Ifs= 5 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=e0(wlcon) Sub=01 Prot=03
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=e0(wlcon) Sub=01 Prot=03 Driver=rndis_host
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0c(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0b(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0a(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Daniel Palmer <daniel@0x0f.com>
    https://lore.kernel.org/r/20201227031716.1343300-1-daniel@0x0f.com
    [ johan: drop id defines, only bind to vendor class ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2dad120d9f1c6a0098d6a8e01fbe5c37f8e2f9f7
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jan 4 15:50:07 2021 +0100

    USB: serial: iuu_phoenix: fix DMA from stack
    
    commit 54d0a3ab80f49f19ee916def62fe067596833403 upstream.
    
    Stack-allocated buffers cannot be used for DMA (on all architectures) so
    allocate the flush command buffer using kmalloc().
    
    Fixes: 60a8fc017103 ("USB: add iuu_phoenix driver")
    Cc: stable <stable@vger.kernel.org>     # 2.6.25
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea7d77637613d8c6efb190745ee8045c3578f0b0
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Mon Jan 4 20:07:15 2021 -0800

    usb: uas: Add PNY USB Portable SSD to unusual_uas
    
    commit 96ebc9c871d8a28fb22aa758dd9188a4732df482 upstream.
    
    Here's another variant PNY Pro Elite USB 3.1 Gen 2 portable SSD that
    hangs and doesn't respond to ATA_1x pass-through commands. If it doesn't
    support these commands, it should respond properly to the host. Add it
    to the unusual uas list to be able to move forward with other
    operations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Link: https://lore.kernel.org/r/2edc7af892d0913bf06f5b35e49ec463f03d5ed8.1609819418.git.Thinh.Nguyen@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93673d45fb2bb117596383a55dcec5daab2c0a8d
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Mon Dec 28 23:13:09 2020 -0800

    usb: usbip: vhci_hcd: protect shift size
    
    commit 718bf42b119de652ebcc93655a1f33a9c0d04b3c upstream.
    
    Fix shift out-of-bounds in vhci_hcd.c:
    
      UBSAN: shift-out-of-bounds in ../drivers/usb/usbip/vhci_hcd.c:399:41
      shift exponent 768 is too large for 32-bit type 'int'
    
    Fixes: 03cd00d538a6 ("usbip: vhci-hcd: Set the vhci structure up to work")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: syzbot+297d20e437b79283bf6d@syzkaller.appspotmail.com
    Cc: Yuyang Du <yuyang.du@intel.com>
    Cc: Shuah Khan <shuahkh@osg.samsung.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: linux-usb@vger.kernel.org
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201229071309.18418-1-rdunlap@infradead.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 889f0e33224e9399a2dad3a98316217b9df1025e
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Tue Dec 15 20:31:47 2020 +0100

    USB: xhci: fix U1/U2 handling for hardware with XHCI_INTEL_HOST quirk set
    
    commit 5d5323a6f3625f101dbfa94ba3ef7706cce38760 upstream.
    
    The commit 0472bf06c6fd ("xhci: Prevent U1/U2 link pm states if exit
    latency is too long") was constraining the xhci code not to allow U1/U2
    sleep states if the latency to wake up from the U-states reached the
    service interval of an periodic endpoint. This fix was not taking into
    account that in case the quirk XHCI_INTEL_HOST is set, the wakeup time
    will be calculated and configured differently.
    
    It checks for u1_params.mel/u2_params.mel as a limit. But the code could
    decide to write another MEL into the hardware. This leads to broken
    cases where not enough bandwidth is available for other devices:
    
    usb 1-2: can't set config #1, error -28
    
    This patch is fixing that case by checking for timeout_ns after the
    wakeup time was calculated depending on the quirks.
    
    Fixes: 0472bf06c6fd ("xhci: Prevent U1/U2 link pm states if exit latency is too long")
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201215193147.11738-1-m.grzeschik@pengutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2a388c7bebf79a9418aa7665e1be0521d1e7096
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Nov 17 09:14:30 2020 +0800

    usb: chipidea: ci_hdrc_imx: add missing put_device() call in usbmisc_get_init_data()
    
    commit 83a43ff80a566de8718dfc6565545a0080ec1fb5 upstream.
    
    if of_find_device_by_node() succeed, usbmisc_get_init_data() doesn't have
    a corresponding put_device(). Thus add put_device() to fix the exception
    handling for this function implementation.
    
    Fixes: ef12da914ed6 ("usb: chipidea: imx: properly check for usbmisc")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201117011430.642589-1-yukuai3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd6747bde55ad578ae422a62e4f7971f068f699e
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu Dec 10 11:50:06 2020 +0300

    usb: dwc3: ulpi: Use VStsDone to detect PHY regs access completion
    
    commit ce722da66d3e9384aa2de9d33d584ee154e5e157 upstream.
    
    In accordance with [1] the DWC_usb3 core sets the GUSB2PHYACCn.VStsDone
    bit when the PHY vendor control access is done and clears it when the
    application initiates a new transaction. The doc doesn't say anything
    about the GUSB2PHYACCn.VStsBsy flag serving for the same purpose. Moreover
    we've discovered that the VStsBsy flag can be cleared before the VStsDone
    bit. So using the former as a signal of the PHY control registers
    completion might be dangerous. Let's have the VStsDone flag utilized
    instead then.
    
    [1] Synopsys DesignWare Cores SuperSpeed USB 3.0 xHCI Host Controller
        Databook, 2.70a, December 2013, p.388
    
    Fixes: 88bc9d194ff6 ("usb: dwc3: add ULPI interface support")
    Acked-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Link: https://lore.kernel.org/r/20201210085008.13264-2-Sergey.Semin@baikalelectronics.ru
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dc54e128b2ece10683f6e1e990b5937d2ea3b29
Author: Sean Young <sean@mess.org>
Date:   Sun Dec 27 13:45:02 2020 +0000

    USB: cdc-acm: blacklist another IR Droid device
    
    commit 0ffc76539e6e8d28114f95ac25c167c37b5191b3 upstream.
    
    This device is supported by the IR Toy driver.
    
    Reported-by: Georgi Bakalski <georgi.bakalski@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201227134502.4548-2-sean@mess.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8df7250b1d08404656420dbf922fa0de286688ea
Author: taehyun.cho <taehyun.cho@samsung.com>
Date:   Thu Jan 7 00:46:25 2021 +0900

    usb: gadget: enable super speed plus
    
    commit e2459108b5a0604c4b472cae2b3cb8d3444c77fb upstream.
    
    Enable Super speed plus in configfs to support USB3.1 Gen2.
    This ensures that when a USB gadget is plugged in, it is
    enumerated as Gen 2 and connected at 10 Gbps if the host and
    cable are capable of it.
    
    Many in-tree gadget functions (fs, midi, acm, ncm, mass_storage,
    etc.) already have SuperSpeed Plus support.
    
    Tested: plugged gadget into Linux host and saw:
    [284907.385986] usb 8-2: new SuperSpeedPlus Gen 2 USB device number 3 using xhci_hcd
    
    Tested-by: Lorenzo Colitti <lorenzo@google.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: taehyun.cho <taehyun.cho@samsung.com>
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Link: https://lore.kernel.org/r/20210106154625.2801030-1-lorenzo@google.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d378656fc26c5a042c988ac52c4bf2d09c0ae40
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Sat Jan 2 14:59:09 2021 +0100

    crypto: ecdh - avoid buffer overflow in ecdh_set_secret()
    
    commit 0aa171e9b267ce7c52d3a3df7bc9c1fc0203dec5 upstream.
    
    Pavel reports that commit 17858b140bf4 ("crypto: ecdh - avoid unaligned
    accesses in ecdh_set_secret()") fixes one problem but introduces another:
    the unconditional memcpy() introduced by that commit may overflow the
    target buffer if the source data is invalid, which could be the result of
    intentional tampering.
    
    So check params.key_size explicitly against the size of the target buffer
    before validating the key further.
    
    Fixes: 17858b140bf4 ("crypto: ecdh - avoid unaligned accesses in ecdh_set_secret()")
    Reported-by: Pavel Machek <pavel@denx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8916ba2d0f302a88cc645a32befe88b1081e23a6
Author: Dexuan Cui <decui@microsoft.com>
Date:   Sat Jan 9 14:53:58 2021 -0800

    video: hyperv_fb: Fix the mmap() regression for v5.4.y and older
    
    db49200b1dad is backported from the mainline commit
    5f1251a48c17 ("video: hyperv_fb: Fix the cache type when mapping the VRAM"),
    to v5.4.y and older stable branches, but unluckily db49200b1dad causes
    mmap() to fail for /dev/fb0 due to EINVAL:
    
    [ 5797.049560] x86/PAT: a.out:1910 map pfn expected mapping type
      uncached-minus for [mem 0xf8200000-0xf85cbfff], got write-back
    
    This means the v5.4.y kernel detects an incompatibility issue about the
    mapping type of the VRAM: db49200b1dad changes to use Write-Back when
    mapping the VRAM, while the mmap() syscall tries to use Uncached-minus.
    That’s to say, the kernel thinks Uncached-minus is incompatible with
    Write-Back: see drivers/video/fbdev/core/fbmem.c: fb_mmap() ->
    vm_iomap_memory() -> io_remap_pfn_range() -> ... -> track_pfn_remap() ->
    reserve_pfn_range().
    
    Note: any v5.5 and newer kernel doesn't have the issue, because they
    have commit
    d21987d709e8 ("video: hyperv: hyperv_fb: Support deferred IO for Hyper-V frame buffer driver")
    , and when the hyperv_fb driver has the deferred_io support,
    fb_deferred_io_init() overrides info->fbops->fb_mmap with
    fb_deferred_io_mmap(), which doesn’t check the mapping type
    incompatibility. Note: since it's VRAM here, the checking is not really
    necessary.
    
    Fix the regression by ioremap_wc(), which uses Write-combining. The kernel
    thinks it's compatible with Uncached-minus. The VRAM mappped by
    ioremap_wc() is slightly slower than mapped by ioremap_cache(), but is
    still significantly faster than by ioremap().
    
    Change the comment accordingly. Linux VM on ARM64 Hyper-V is still not
    working in the latest mainline yet, and when it works in future, the ARM64
    support is unlikely to be backported to v5.4 and older, so using
    ioremap_wc() in v5.4 and older should be ok.
    
    Note: this fix is only targeted at the stable branches:
    v5.4.y, v4.19.y, v4.14.y, v4.9.y and v4.4.y.
    
    Fixes: db49200b1dad ("video: hyperv_fb: Fix the cache type when mapping the VRAM")
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7601d1646996e5877d75858ff6e72227d71ef88e
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Dec 18 09:38:43 2020 -0800

    net: systemport: set dev->max_mtu to UMAC_MAX_MTU_SIZE
    
    [ Upstream commit 54ddbdb024882e226055cc4c3c246592ddde2ee5 ]
    
    The driver is already allocating receive buffers of 2KiB and the
    Ethernet MAC is configured to accept frames up to UMAC_MAX_MTU_SIZE.
    
    Fixes: bfcb813203e6 ("net: dsa: configure the MTU for switch ports")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20201218173843.141046-1-f.fainelli@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a277b0439cf6e918c61f7cb24c4876cd57735025
Author: Stefan Chulski <stefanc@marvell.com>
Date:   Sun Dec 20 13:02:29 2020 +0200

    net: mvpp2: Fix GoP port 3 Networking Complex Control configurations
    
    [ Upstream commit 2575bc1aa9d52a62342b57a0b7d0a12146cf6aed ]
    
    During GoP port 2 Networking Complex Control mode of operation configurations,
    also GoP port 3 mode of operation was wrongly set.
    Patch removes these configurations.
    
    Fixes: f84bf386f395 ("net: mvpp2: initialize the GoP")
    Acked-by: Marcin Wojtas <mw@semihalf.com>
    Signed-off-by: Stefan Chulski <stefanc@marvell.com>
    Link: https://lore.kernel.org/r/1608462149-1702-1-git-send-email-stefanc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2025973017f73def3f2459bac35c7b30b8ce075
Author: Antoine Tenart <atenart@kernel.org>
Date:   Wed Dec 23 22:23:21 2020 +0100

    net-sysfs: take the rtnl lock when accessing xps_cpus_map and num_tc
    
    [ Upstream commit fb25038586d0064123e393cadf1fadd70a9df97a ]
    
    Accesses to dev->xps_cpus_map (when using dev->num_tc) should be
    protected by the rtnl lock, like we do for netif_set_xps_queue. I didn't
    see an actual bug being triggered, but let's be safe here and take the
    rtnl lock while accessing the map in sysfs.
    
    Fixes: 184c449f91fe ("net: Add support for XPS with QoS via traffic classes")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67abcf3e4a546310da88ea93a08a1ea75cc4e530
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Dec 24 22:23:44 2020 -0800

    net: sched: prevent invalid Scell_log shift count
    
    [ Upstream commit bd1248f1ddbc48b0c30565fce897a3b6423313b8 ]
    
    Check Scell_log shift size in red_check_params() and modify all callers
    of red_check_params() to pass Scell_log.
    
    This prevents a shift out-of-bounds as detected by UBSAN:
      UBSAN: shift-out-of-bounds in ./include/net/red.h:252:22
      shift exponent 72 is too large for 32-bit type 'int'
    
    Fixes: 8afa10cbe281 ("net_sched: red: Avoid illegal values")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Reported-by: syzbot+97c5bd9cc81eca63d36e@syzkaller.appspotmail.com
    Cc: Nogah Frankel <nogahf@mellanox.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Cong Wang <xiyou.wangcong@gmail.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: netdev@vger.kernel.org
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3b4fe0b69b5fd7ea75f8cda68e6c4c549772af9
Author: Yunjian Wang <wangyunjian@huawei.com>
Date:   Tue Dec 29 10:01:48 2020 +0800

    vhost_net: fix ubuf refcount incorrectly when sendmsg fails
    
    [ Upstream commit 01e31bea7e622f1890c274f4aaaaf8bccd296aa5 ]
    
    Currently the vhost_zerocopy_callback() maybe be called to decrease
    the refcount when sendmsg fails in tun. The error handling in vhost
    handle_tx_zerocopy() will try to decrease the same refcount again.
    This is wrong. To fix this issue, we only call vhost_net_ubuf_put()
    when vq->heads[nvq->desc].len == VHOST_DMA_IN_PROGRESS.
    
    Fixes: bab632d69ee4 ("vhost: vhost TX zero-copy support")
    Signed-off-by: Yunjian Wang <wangyunjian@huawei.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Link: https://lore.kernel.org/r/1609207308-20544-1-git-send-email-wangyunjian@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c4411a1c9a9db85e66a67f87673f2bdbe479f1b
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Dec 30 16:24:51 2020 +0100

    net: usb: qmi_wwan: add Quectel EM160R-GL
    
    [ Upstream commit cfd82dfc9799c53ef109343a23af006a0f6860a9 ]
    
    New modem using ff/ff/30 for QCDM, ff/00/00 for  AT and NMEA,
    and ff/ff/ff for RMNET/QMI.
    
    T: Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 2 Spd=5000 MxCh= 0
    D: Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs= 1
    P: Vendor=2c7c ProdID=0620 Rev= 4.09
    S: Manufacturer=Quectel
    S: Product=EM160R-GL
    S: SerialNumber=e31cedc1
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=(none)
    E: Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=83(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=85(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=84(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    E: Ad=87(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
    E: Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=04(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    E: Ad=88(I) Atr=03(Int.) MxPS= 8 Ivl=32ms
    E: Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E: Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20201230152451.245271-1-bjorn@mork.no
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19d7bff7bcb2bd67aecc2786df3c743689500c87
Author: Roland Dreier <roland@kernel.org>
Date:   Wed Dec 23 19:21:16 2020 -0800

    CDC-NCM: remove "connected" log message
    
    [ Upstream commit 59b4a8fa27f5a895582ada1ae5034af7c94a57b5 ]
    
    The cdc_ncm driver passes network connection notifications up to
    usbnet_link_change(), which is the right place for any logging.
    Remove the netdev_info() duplicating this from the driver itself.
    
    This stops devices such as my "TRENDnet USB 10/100/1G/2.5G LAN"
    (ID 20f4:e02b) adapter from spamming the kernel log with
    
        cdc_ncm 2-2:2.0 enp0s2u2c2: network connection: connected
    
    messages every 60 msec or so.
    
    Signed-off-by: Roland Dreier <roland@kernel.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201224032116.2453938-1-roland@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7852972b16e92cd8a6d74854aae99051dd3a638
Author: Xie He <xie.he.0141@gmail.com>
Date:   Sun Dec 27 18:53:39 2020 -0800

    net: hdlc_ppp: Fix issues when mod_timer is called while timer is running
    
    [ Upstream commit 1fef73597fa545c35fddc953979013882fbd4e55 ]
    
    ppp_cp_event is called directly or indirectly by ppp_rx with "ppp->lock"
    held. It may call mod_timer to add a new timer. However, at the same time
    ppp_timer may be already running and waiting for "ppp->lock". In this
    case, there's no need for ppp_timer to continue running and it can just
    exit.
    
    If we let ppp_timer continue running, it may call add_timer. This causes
    kernel panic because add_timer can't be called with a timer pending.
    This patch fixes this problem.
    
    Fixes: e022c2f07ae5 ("WAN: new synchronous PPP implementation for generic HDLC.")
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a61f0bc9316468ea358c383192c8d6efccf4c9c5
Author: Yunjian Wang <wangyunjian@huawei.com>
Date:   Sat Dec 26 16:10:05 2020 +0800

    net: hns: fix return value check in __lb_other_process()
    
    [ Upstream commit 5ede3ada3da7f050519112b81badc058190b9f9f ]
    
    The function skb_copy() could return NULL, the return value
    need to be checked.
    
    Fixes: b5996f11ea54 ("net: add Hisilicon Network Subsystem basic ethernet support")
    Signed-off-by: Yunjian Wang <wangyunjian@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e38d41b566eda6be69da7f1c821a60e76cb7584
Author: Guillaume Nault <gnault@redhat.com>
Date:   Thu Dec 24 20:01:09 2020 +0100

    ipv4: Ignore ECN bits for fib lookups in fib_compute_spec_dst()
    
    [ Upstream commit 21fdca22eb7df2a1e194b8adb812ce370748b733 ]
    
    RT_TOS() only clears one of the ECN bits. Therefore, when
    fib_compute_spec_dst() resorts to a fib lookup, it can return
    different results depending on the value of the second ECN bit.
    
    For example, ECT(0) and ECT(1) packets could be treated differently.
    
      $ ip netns add ns0
      $ ip netns add ns1
      $ ip link add name veth01 netns ns0 type veth peer name veth10 netns ns1
      $ ip -netns ns0 link set dev lo up
      $ ip -netns ns1 link set dev lo up
      $ ip -netns ns0 link set dev veth01 up
      $ ip -netns ns1 link set dev veth10 up
    
      $ ip -netns ns0 address add 192.0.2.10/24 dev veth01
      $ ip -netns ns1 address add 192.0.2.11/24 dev veth10
    
      $ ip -netns ns1 address add 192.0.2.21/32 dev lo
      $ ip -netns ns1 route add 192.0.2.10/32 tos 4 dev veth10 src 192.0.2.21
      $ ip netns exec ns1 sysctl -wq net.ipv4.icmp_echo_ignore_broadcasts=0
    
    With TOS 4 and ECT(1), ns1 replies using source address 192.0.2.21
    (ping uses -Q to set all TOS and ECN bits):
    
      $ ip netns exec ns0 ping -c 1 -b -Q 5 192.0.2.255
      [...]
      64 bytes from 192.0.2.21: icmp_seq=1 ttl=64 time=0.544 ms
    
    But with TOS 4 and ECT(0), ns1 replies using source address 192.0.2.11
    because the "tos 4" route isn't matched:
    
      $ ip netns exec ns0 ping -c 1 -b -Q 6 192.0.2.255
      [...]
      64 bytes from 192.0.2.11: icmp_seq=1 ttl=64 time=0.597 ms
    
    After this patch the ECN bits don't affect the result anymore:
    
      $ ip netns exec ns0 ping -c 1 -b -Q 6 192.0.2.255
      [...]
      64 bytes from 192.0.2.21: icmp_seq=1 ttl=64 time=0.591 ms
    
    Fixes: 35ebf65e851c ("ipv4: Create and use fib_compute_spec_dst() helper.")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83f339bef42b1b8e78e74957ea04c3efc4fff9d8
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Dec 24 18:24:05 2020 +0200

    net: ethernet: ti: cpts: fix ethtool output when no ptp_clock registered
    
    [ Upstream commit 4614792eebcbf81c60ad3604c1aeeb2b0899cea4 ]
    
    The CPTS driver registers PTP PHC clock when first netif is going up and
    unregister it when all netif are down. Now ethtool will show:
     - PTP PHC clock index 0 after boot until first netif is up;
     - the last assigned PTP PHC clock index even if PTP PHC clock is not
    registered any more after all netifs are down.
    
    This patch ensures that -1 is returned by ethtool when PTP PHC clock is not
    registered any more.
    
    Fixes: 8a2c9a5ab4b9 ("net: ethernet: ti: cpts: rework initialization/deinitialization")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Link: https://lore.kernel.org/r/20201224162405.28032-1-grygorii.strashko@ti.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3daf631897e27fe3ed52e68693b0a7822cd8781b
Author: Antoine Tenart <atenart@kernel.org>
Date:   Wed Dec 23 22:23:20 2020 +0100

    net-sysfs: take the rtnl lock when storing xps_cpus
    
    [ Upstream commit 1ad58225dba3f2f598d2c6daed4323f24547168f ]
    
    Two race conditions can be triggered when storing xps cpus, resulting in
    various oops and invalid memory accesses:
    
    1. Calling netdev_set_num_tc while netif_set_xps_queue:
    
       - netif_set_xps_queue uses dev->tc_num as one of the parameters to
         compute the size of new_dev_maps when allocating it. dev->tc_num is
         also used to access the map, and the compiler may generate code to
         retrieve this field multiple times in the function.
    
       - netdev_set_num_tc sets dev->tc_num.
    
       If new_dev_maps is allocated using dev->tc_num and then dev->tc_num
       is set to a higher value through netdev_set_num_tc, later accesses to
       new_dev_maps in netif_set_xps_queue could lead to accessing memory
       outside of new_dev_maps; triggering an oops.
    
    2. Calling netif_set_xps_queue while netdev_set_num_tc is running:
    
       2.1. netdev_set_num_tc starts by resetting the xps queues,
            dev->tc_num isn't updated yet.
    
       2.2. netif_set_xps_queue is called, setting up the map with the
            *old* dev->num_tc.
    
       2.3. netdev_set_num_tc updates dev->tc_num.
    
       2.4. Later accesses to the map lead to out of bound accesses and
            oops.
    
       A similar issue can be found with netdev_reset_tc.
    
    One way of triggering this is to set an iface up (for which the driver
    uses netdev_set_num_tc in the open path, such as bnx2x) and writing to
    xps_cpus in a concurrent thread. With the right timing an oops is
    triggered.
    
    Both issues have the same fix: netif_set_xps_queue, netdev_set_num_tc
    and netdev_reset_tc should be mutually exclusive. We do that by taking
    the rtnl lock in xps_cpus_store.
    
    Fixes: 184c449f91fe ("net: Add support for XPS with QoS via traffic classes")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e18c8e65a3f6f0a8208c5652b1aef9e863983fe5
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Dec 23 19:06:12 2020 +0800

    net: ethernet: Fix memleak in ethoc_probe
    
    [ Upstream commit 5d41f9b7ee7a5a5138894f58846a4ffed601498a ]
    
    When mdiobus_register() fails, priv->mdio allocated
    by mdiobus_alloc() has not been freed, which leads
    to memleak.
    
    Fixes: e7f4dc3536a4 ("mdio: Move allocation of interrupts into core")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20201223110615.31389-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 710cf83081342bb4945c002bc5b5f76a4a47db7c
Author: John Wang <wangzhiqiang.bj@bytedance.com>
Date:   Wed Dec 23 13:55:23 2020 +0800

    net/ncsi: Use real net-device for response handler
    
    [ Upstream commit 427c940558560bff2583d07fc119a21094675982 ]
    
    When aggregating ncsi interfaces and dedicated interfaces to bond
    interfaces, the ncsi response handler will use the wrong net device to
    find ncsi_dev, so that the ncsi interface will not work properly.
    Here, we use the original net device to fix it.
    
    Fixes: 138635cc27c9 ("net/ncsi: NCSI response packet handler")
    Signed-off-by: John Wang <wangzhiqiang.bj@bytedance.com>
    Link: https://lore.kernel.org/r/20201223055523.2069-1-wangzhiqiang.bj@bytedance.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 591e1867ec5426bdaa35e8d931a37d46ff776c5f
Author: Jeff Dike <jdike@akamai.com>
Date:   Tue Dec 22 21:54:21 2020 -0500

    virtio_net: Fix recursive call to cpus_read_lock()
    
    [ Upstream commit de33212f768c5d9e2fe791b008cb26f92f0aa31c ]
    
    virtnet_set_channels can recursively call cpus_read_lock if CONFIG_XPS
    and CONFIG_HOTPLUG are enabled.
    
    The path is:
        virtnet_set_channels - calls get_online_cpus(), which is a trivial
    wrapper around cpus_read_lock()
        netif_set_real_num_tx_queues
        netif_reset_xps_queues_gt
        netif_reset_xps_queues - calls cpus_read_lock()
    
    This call chain and potential deadlock happens when the number of TX
    queues is reduced.
    
    This commit the removes netif_set_real_num_[tr]x_queues calls from
    inside the get/put_online_cpus section, as they don't require that it
    be held.
    
    Fixes: 47be24796c13 ("virtio-net: fix the set affinity bug when CPU IDs are not consecutive")
    Signed-off-by: Jeff Dike <jdike@akamai.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/20201223025421.671-1-jdike@akamai.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09172c416517afd912121cc73a7e332a97b478af
Author: Manish Chopra <manishc@marvell.com>
Date:   Mon Dec 21 06:55:30 2020 -0800

    qede: fix offload for IPIP tunnel packets
    
    [ Upstream commit 5d5647dad259bb416fd5d3d87012760386d97530 ]
    
    IPIP tunnels packets are unknown to device,
    hence these packets are incorrectly parsed and
    caused the packet corruption, so disable offlods
    for such packets at run time.
    
    Signed-off-by: Manish Chopra <manishc@marvell.com>
    Signed-off-by: Sudarsana Kalluru <skalluru@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Link: https://lore.kernel.org/r/20201221145530.7771-1-manishc@marvell.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4d004f681f23ca726a16a144f6be5eb10124994
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Sat Dec 19 14:01:44 2020 +0300

    atm: idt77252: call pci_disable_device() on error path
    
    [ Upstream commit 8df66af5c1e5f80562fe728db5ec069b21810144 ]
    
    This error path needs to disable the pci device before returning.
    
    Fixes: ede58ef28e10 ("atm: remove deprecated use of pci api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/X93dmC4NX0vbTpGp@mwanda
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 803f450da40ae885228155345464bb1005c68b35
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Fri Dec 18 11:55:36 2020 +0100

    ethernet: ucc_geth: set dev->max_mtu to 1518
    
    [ Upstream commit 1385ae5c30f238f81bc6528d897c6d7a0816783f ]
    
    All the buffers and registers are already set up appropriately for an
    MTU slightly above 1500, so we just need to expose this to the
    networking stack. AFAICT, there's no need to implement .ndo_change_mtu
    when the receive buffers are always set up to support the max_mtu.
    
    This fixes several warnings during boot on our mpc8309-board with an
    embedded mv88e6250 switch:
    
    mv88e6085 mdio@e0102120:10: nonfatal error -34 setting MTU 1500 on port 0
    ...
    mv88e6085 mdio@e0102120:10: nonfatal error -34 setting MTU 1500 on port 4
    ucc_geth e0102000.ethernet eth1: error -22 setting MTU to 1504 to include DSA overhead
    
    The last line explains what the DSA stack tries to do: achieving an MTU
    of 1500 on-the-wire requires that the master netdevice connected to
    the CPU port supports an MTU of 1500+the tagging overhead.
    
    Fixes: bfcb813203e6 ("net: dsa: configure the MTU for switch ports")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a287e5b678aab12fbe2dc1bfe6b53a2bb6050252
Author: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
Date:   Fri Dec 18 11:55:38 2020 +0100

    ethernet: ucc_geth: fix use-after-free in ucc_geth_remove()
    
    [ Upstream commit e925e0cd2a705aaacb0b907bb3691fcac3a973a4 ]
    
    ugeth is the netdiv_priv() part of the netdevice. Accessing the memory
    pointed to by ugeth (such as done by ucc_geth_memclean() and the two
    of_node_puts) after free_netdev() is thus use-after-free.
    
    Fixes: 80a9fad8e89a ("ucc_geth: fix module removal")
    Signed-off-by: Rasmus Villemoes <rasmus.villemoes@prevas.dk>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dcbce11a59c7bcde10e8f63309c59cf49016a84
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 28 11:40:22 2020 -0800

    depmod: handle the case of /sbin/depmod without /sbin in PATH
    
    [ Upstream commit cedd1862be7e666be87ec824dabc6a2b05618f36 ]
    
    Commit 436e980e2ed5 ("kbuild: don't hardcode depmod path") stopped
    hard-coding the path of depmod, but in the process caused trouble for
    distributions that had that /sbin location, but didn't have it in the
    PATH (generally because /sbin is limited to the super-user path).
    
    Work around it for now by just adding /sbin to the end of PATH in the
    depmod.sh script.
    
    Reported-and-tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 595786fd29d53bcda62d2cfa96ae506138e272df
Author: Huang Shijie <sjhuang@iluvatar.ai>
Date:   Tue Dec 29 15:14:58 2020 -0800

    lib/genalloc: fix the overflow when size is too big
    
    [ Upstream commit 36845663843fc59c5d794e3dc0641472e3e572da ]
    
    Some graphic card has very big memory on chip, such as 32G bytes.
    
    In the following case, it will cause overflow:
    
        pool = gen_pool_create(PAGE_SHIFT, NUMA_NO_NODE);
        ret = gen_pool_add(pool, 0x1000000, SZ_32G, NUMA_NO_NODE);
    
        va = gen_pool_alloc(pool, SZ_4G);
    
    The overflow occurs in gen_pool_alloc_algo_owner():
    
                    ....
                    size = nbits << order;
                    ....
    
    The @nbits is "int" type, so it will overflow.
    Then the gen_pool_avail() will return the wrong value.
    
    This patch converts some "int" to "unsigned long", and
    changes the compare code in while.
    
    Link: https://lkml.kernel.org/r/20201229060657.3389-1-sjhuang@iluvatar.ai
    Signed-off-by: Huang Shijie <sjhuang@iluvatar.ai>
    Reported-by: Shi Jiasheng <jiasheng.shi@iluvatar.ai>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7359485cf1878278c48683bdc492bd42faed19e6
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Tue Dec 8 21:29:46 2020 -0800

    scsi: ide: Do not set the RQF_PREEMPT flag for sense requests
    
    [ Upstream commit 96d86e6a80a3ab9aff81d12f9f1f2a0da2917d38 ]
    
    RQF_PREEMPT is used for two different purposes in the legacy IDE code:
    
     1. To mark power management requests.
    
     2. To mark requests that should preempt another request. An (old)
        explanation of that feature is as follows: "The IDE driver in the Linux
        kernel normally uses a series of busywait delays during its
        initialization. When the driver executes these busywaits, the kernel
        does nothing for the duration of the wait. The time spent in these
        waits could be used for other initialization activities, if they could
        be run concurrently with these waits.
    
        More specifically, busywait-style delays such as udelay() in module
        init functions inhibit kernel preemption because the Big Kernel Lock is
        held, while yielding APIs such as schedule_timeout() allow
        preemption. This is true because the kernel handles the BKL specially
        and releases and reacquires it across reschedules allowed by the
        current thread.
    
        This IDE-preempt specification requires that the driver eliminate these
        busywaits and replace them with a mechanism that allows other work to
        proceed while the IDE driver is initializing."
    
    Since I haven't found an implementation of (2), do not set the PREEMPT flag
    for sense requests. This patch causes sense requests to be postponed while
    a drive is suspended instead of being submitted to ide_queue_rq().
    
    If it would ever be necessary to restore the IDE PREEMPT functionality,
    that can be done by introducing a new flag in struct ide_request.
    
    Link: https://lore.kernel.org/r/20201209052951.16136-4-bvanassche@acm.org
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Can Guo <cang@codeaurora.org>
    Cc: Stanley Chu <stanley.chu@mediatek.com>
    Cc: Ming Lei <ming.lei@redhat.com>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f14e13176b959ecd8341113522aeb5ee46ccae35
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Mon Dec 7 10:31:18 2020 +0200

    scsi: ufs-pci: Ensure UFS device is in PowerDown mode for suspend-to-disk ->poweroff()
    
    [ Upstream commit af423534d2de86cd0db729a5ac41f056ca8717de ]
    
    The expectation for suspend-to-disk is that devices will be powered-off, so
    the UFS device should be put in PowerDown mode. If spm_lvl is not 5, then
    that will not happen. Change the pm callbacks to force spm_lvl 5 for
    suspend-to-disk poweroff.
    
    Link: https://lore.kernel.org/r/20201207083120.26732-3-adrian.hunter@intel.com
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b92f6d1bc55dcf19891d6abd326dc69a67dbae40
Author: Yunfeng Ye <yeyunfeng@huawei.com>
Date:   Thu Nov 19 14:21:25 2020 +0800

    workqueue: Kick a worker based on the actual activation of delayed works
    
    [ Upstream commit 01341fbd0d8d4e717fc1231cdffe00343088ce0b ]
    
    In realtime scenario, We do not want to have interference on the
    isolated cpu cores. but when invoking alloc_workqueue() for percpu wq
    on the housekeeping cpu, it kick a kworker on the isolated cpu.
    
      alloc_workqueue
        pwq_adjust_max_active
          wake_up_worker
    
    The comment in pwq_adjust_max_active() said:
      "Need to kick a worker after thawed or an unbound wq's
       max_active is bumped"
    
    So it is unnecessary to kick a kworker for percpu's wq when invoking
    alloc_workqueue(). this patch only kick a worker based on the actual
    activation of delayed works.
    
    Signed-off-by: Yunfeng Ye <yeyunfeng@huawei.com>
    Reviewed-by: Lai Jiangshan <jiangshanlai@gmail.com>
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0056c1dc6551e0f21edf6fd2fc661140bb87d3d3
Author: Dominique Martinet <asmadeus@codewreck.org>
Date:   Tue Dec 1 14:17:30 2020 +0100

    kbuild: don't hardcode depmod path
    
    commit 436e980e2ed526832de822cbf13c317a458b78e1 upstream.
    
    depmod is not guaranteed to be in /sbin, just let make look for
    it in the path like all the other invoked programs
    
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c608afd3a9250f78bb3ffd237fcb0e38758a41c
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Jan 9 13:37:40 2021 +0100

    Linux 4.14.214
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20210107143052.973437064@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31603eff0db2abd50d721b35377f8dbb0db76ded
Author: Zhang Xiaohui <ruc_zhangxiaohui@163.com>
Date:   Sun Dec 6 16:48:01 2020 +0800

    mwifiex: Fix possible buffer overflows in mwifiex_cmd_802_11_ad_hoc_start
    
    [ Upstream commit 5c455c5ab332773464d02ba17015acdca198f03d ]
    
    mwifiex_cmd_802_11_ad_hoc_start() calls memcpy() without checking
    the destination size may trigger a buffer overflower,
    which a local user could use to cause denial of service
    or the execution of arbitrary code.
    Fix it by putting the length check before calling memcpy().
    
    Signed-off-by: Zhang Xiaohui <ruc_zhangxiaohui@163.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201206084801.26479-1-ruc_zhangxiaohui@163.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 605802b5c5115059dd66bcfbe89e169dee444d0d
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Sep 20 12:27:37 2020 +0100

    iio:magnetometer:mag3110: Fix alignment and data leak issues.
    
    commit 89deb1334252ea4a8491d47654811e28b0790364 upstream
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp() assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    This data is allocated with kzalloc() so no data can leak apart from
    previous readings.
    
    The explicit alignment of ts is not necessary in this case but
    does make the code slightly less fragile so I have included it.
    
    Fixes: 39631b5f9584 ("iio: Add Freescale mag3110 magnetometer driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200920112742.170751-4-jic23@kernel.org
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c855b4617c129c499c2d9f843971c63c4f59a253
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Sep 20 12:27:39 2020 +0100

    iio:imu:bmi160: Fix alignment and data leak issues
    
    commit 7b6b51234df6cd8b04fe736b0b89c25612d896b8 upstream
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable array in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc() so no
    data can leak apart from previous readings.
    
    In this driver, depending on which channels are enabled, the timestamp
    can be in a number of locations.  Hence we cannot use a structure
    to specify the data layout without it being misleading.
    
    Fixes: 77c4ad2d6a9b ("iio: imu: Add initial support for Bosch BMI160")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: Daniel Baluta  <daniel.baluta@gmail.com>
    Cc: Daniel Baluta <daniel.baluta@oss.nxp.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200920112742.170751-6-jic23@kernel.org
    [sudip: adjust context and use bmi160_data in old location]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d03648d7c93763af25cb3e423178ec40acd252ef
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Tue Dec 29 15:14:55 2020 -0800

    kdev_t: always inline major/minor helper functions
    
    commit aa8c7db494d0a83ecae583aa193f1134ef25d506 upstream.
    
    Silly GCC doesn't always inline these trivial functions.
    
    Fixes the following warning:
    
      arch/x86/kernel/sys_ia32.o: warning: objtool: cp_stat64()+0xd8: call to new_encode_dev() with UACCESS enabled
    
    Link: https://lkml.kernel.org/r/984353b44a4484d86ba9f73884b7306232e25e30.1608737428.git.jpoimboe@redhat.com
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>  [build-tested]
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f311998b9aff5eb7be6d5520369c0410a510a14
Author: Hyeongseok Kim <hyeongseok@gmail.com>
Date:   Thu Dec 3 09:46:59 2020 +0900

    dm verity: skip verity work if I/O error when system is shutting down
    
    [ Upstream commit 252bd1256396cebc6fc3526127fdb0b317601318 ]
    
    If emergency system shutdown is called, like by thermal shutdown,
    a dm device could be alive when the block device couldn't process
    I/O requests anymore. In this state, the handling of I/O errors
    by new dm I/O requests or by those already in-flight can lead to
    a verity corruption state, which is a misjudgment.
    
    So, skip verity work in response to I/O error when system is shutting
    down.
    
    Signed-off-by: Hyeongseok Kim <hyeongseok@gmail.com>
    Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fea534481433c12c54e15332721f37da2f955b9
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 18 15:56:25 2020 +0100

    ALSA: pcm: Clear the full allocated memory at hw_params
    
    [ Upstream commit 618de0f4ef11acd8cf26902e65493d46cc20cc89 ]
    
    The PCM hw_params core function tries to clear up the PCM buffer
    before actually using for avoiding the information leak from the
    previous usages or the usage before a new allocation.  It performs the
    memset() with runtime->dma_bytes, but this might still leave some
    remaining bytes untouched; namely, the PCM buffer size is aligned in
    page size for mmap, hence runtime->dma_bytes doesn't necessarily cover
    all PCM buffer pages, and the remaining bytes are exposed via mmap.
    
    This patch changes the memory clearance to cover the all buffer pages
    if the stream is supposed to be mmap-ready (that guarantees that the
    buffer size is aligned in page size).
    
    Reviewed-by: Lars-Peter Clausen <lars@metafoo.de>
    Link: https://lore.kernel.org/r/20201218145625.2045-3-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd6218c8559f774b760fa2399ab71710796ff29d
Author: Jessica Yu <jeyu@kernel.org>
Date:   Fri Nov 27 10:09:39 2020 +0100

    module: delay kobject uevent until after module init call
    
    [ Upstream commit 38dc717e97153e46375ee21797aa54777e5498f3 ]
    
    Apparently there has been a longstanding race between udev/systemd and
    the module loader. Currently, the module loader sends a uevent right
    after sysfs initialization, but before the module calls its init
    function. However, some udev rules expect that the module has
    initialized already upon receiving the uevent.
    
    This race has been triggered recently (see link in references) in some
    systemd mount unit files. For instance, the configfs module creates the
    /sys/kernel/config mount point in its init function, however the module
    loader issues the uevent before this happens. sys-kernel-config.mount
    expects to be able to mount /sys/kernel/config upon receipt of the
    module loading uevent, but if the configfs module has not called its
    init function yet, then this directory will not exist and the mount unit
    fails. A similar situation exists for sys-fs-fuse-connections.mount, as
    the fuse sysfs mount point is created during the fuse module's init
    function. If udev is faster than module initialization then the mount
    unit would fail in a similar fashion.
    
    To fix this race, delay the module KOBJ_ADD uevent until after the
    module has finished calling its init routine.
    
    References: https://github.com/systemd/systemd/issues/17586
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Tested-By: Nicolas Morey-Chaisemartin <nmoreychaisemartin@suse.com>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43145e2cfe1ffd6997f227ead11986dccf04bc88
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Wed Oct 28 17:15:51 2020 +0800

    powerpc: sysdev: add missing iounmap() on error in mpic_msgr_probe()
    
    [ Upstream commit ffa1797040c5da391859a9556be7b735acbe1242 ]
    
    I noticed that iounmap() of msgr_block_addr before return from
    mpic_msgr_probe() in the error handling case is missing. So use
    devm_ioremap() instead of just ioremap() when remapping the message
    register block, so the mapping will be automatically released on
    probe failure.
    
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201028091551.136400-1-miaoqinglang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 523737d8aebf871cc1a5735ac7eee9a0cf0ce825
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 2 16:32:10 2020 +0100

    quota: Don't overflow quota file offsets
    
    [ Upstream commit 10f04d40a9fa29785206c619f80d8beedb778837 ]
    
    The on-disk quota format supports quota files with upto 2^32 blocks. Be
    careful when computing quota file offsets in the quota files from block
    numbers as they can overflow 32-bit types. Since quota files larger than
    4GB would require ~26 millions of quota users, this is mostly a
    theoretical concern now but better be careful, fuzzers would find the
    problem sooner or later anyway...
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2dcd27e0279d4bb9e46044de9683848e7f271e3
Author: Miroslav Benes <mbenes@suse.cz>
Date:   Tue Oct 27 15:03:36 2020 +0100

    module: set MODULE_STATE_GOING state when a module fails to load
    
    [ Upstream commit 5e8ed280dab9eeabc1ba0b2db5dbe9fe6debb6b5 ]
    
    If a module fails to load due to an error in prepare_coming_module(),
    the following error handling in load_module() runs with
    MODULE_STATE_COMING in module's state. Fix it by correctly setting
    MODULE_STATE_GOING under "bug_cleanup" label.
    
    Signed-off-by: Miroslav Benes <mbenes@suse.cz>
    Signed-off-by: Jessica Yu <jeyu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aec4fb046df5c110373cd4d6cb39e79fd49e5ddb
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue Oct 20 14:12:26 2020 +0800

    rtc: sun6i: Fix memleak in sun6i_rtc_clk_init
    
    [ Upstream commit 28d211919e422f58c1e6c900e5810eee4f1ce4c8 ]
    
    When clk_hw_register_fixed_rate_with_accuracy() fails,
    clk_data should be freed. It's the same for the subsequent
    two error paths, but we should also unregister the already
    registered clocks in them.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20201020061226.6572-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f1816bc73bd6a778877a821a30ecb361bb500a1
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sun Dec 6 09:34:56 2020 +0100

    ALSA: seq: Use bool for snd_seq_queue internal flags
    
    commit 4ebd47037027c4beae99680bff3b20fdee5d7c1e upstream.
    
    The snd_seq_queue struct contains various flags in the bit fields.
    Those are categorized to two different use cases, both of which are
    protected by different spinlocks.  That implies that there are still
    potential risks of the bad operations for bit fields by concurrent
    accesses.
    
    For addressing the problem, this patch rearranges those flags to be
    a standard bool instead of a bit field.
    
    Reported-by: syzbot+63cbe31877bb80ef58f5@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201206083456.21110-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abe3342b2fc74539c2fc6bd75e79122d7151dbdb
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Nov 27 07:40:21 2020 +0100

    media: gp8psk: initialize stats at power control logic
    
    commit d0ac1a26ed5943127cb0156148735f5f52a07075 upstream.
    
    As reported on:
            https://lore.kernel.org/linux-media/20190627222020.45909-1-willemdebruijn.kernel@gmail.com/
    
    if gp8psk_usb_in_op() returns an error, the status var is not
    initialized. Yet, this var is used later on, in order to
    identify:
            - if the device was already started;
            - if firmware has loaded;
            - if the LNBf was powered on.
    
    Using status = 0 seems to ensure that everything will be
    properly powered up.
    
    So, instead of the proposed solution, let's just set
    status = 0.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0f3ad40a1f304e5cc11dddece10c4335443003a
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Nov 23 04:15:34 2020 +0530

    misc: vmw_vmci: fix kernel info-leak by initializing dbells in vmci_ctx_get_chkpt_doorbells()
    
    commit 31dcb6c30a26d32650ce134820f27de3c675a45a upstream.
    
    A kernel-infoleak was reported by syzbot, which was caused because
    dbells was left uninitialized.
    Using kzalloc() instead of kmalloc() fixes this issue.
    
    Reported-by: syzbot+a79e17c39564bedf0930@syzkaller.appspotmail.com
    Tested-by: syzbot+a79e17c39564bedf0930@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20201122224534.333471-1-anant.thazhemadam@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3a05b8113b045cd3eff01320a3226d7dd43ee8f
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Sun Nov 1 06:09:58 2020 -0800

    reiserfs: add check for an invalid ih_entry_count
    
    commit d24396c5290ba8ab04ba505176874c4e04a2d53c upstream.
    
    when directory item has an invalid value set for ih_entry_count it might
    trigger use-after-free or out-of-bounds read in bin_search_in_dir_item()
    
    ih_entry_count * IH_SIZE for directory item should not be larger than
    ih_item_len
    
    Link: https://lore.kernel.org/r/20201101140958.3650143-1-rkovhaev@gmail.com
    Reported-and-tested-by: syzbot+83b6f7cf9922cae5c4d7@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=83b6f7cf9922cae5c4d7
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96f2e1ae8c5289ff69a968f319a69d5d08b23c4c
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Nov 23 11:23:12 2020 +0100

    of: fix linker-section match-table corruption
    
    commit 5812b32e01c6d86ba7a84110702b46d8a8531fe9 upstream.
    
    Specify type alignment when declaring linker-section match-table entries
    to prevent gcc from increasing alignment and corrupting the various
    tables with padding (e.g. timers, irqchips, clocks, reserved memory).
    
    This is specifically needed on x86 where gcc (typically) aligns larger
    objects like struct of_device_id with static extent on 32-byte
    boundaries which at best prevents matching on anything but the first
    entry. Specifying alignment when declaring variables suppresses this
    optimisation.
    
    Here's a 64-bit example where all entries are corrupt as 16 bytes of
    padding has been inserted before the first entry:
    
            ffffffff8266b4b0 D __clk_of_table
            ffffffff8266b4c0 d __of_table_fixed_factor_clk
            ffffffff8266b5a0 d __of_table_fixed_clk
            ffffffff8266b680 d __clk_of_table_sentinel
    
    And here's a 32-bit example where the 8-byte-aligned table happens to be
    placed on a 32-byte boundary so that all but the first entry are corrupt
    due to the 28 bytes of padding inserted between entries:
    
            812b3ec0 D __irqchip_of_table
            812b3ec0 d __of_table_irqchip1
            812b3fa0 d __of_table_irqchip2
            812b4080 d __of_table_irqchip3
            812b4160 d irqchip_of_match_end
    
    Verified on x86 using gcc-9.3 and gcc-4.9 (which uses 64-byte
    alignment), and on arm using gcc-7.2.
    
    Note that there are no in-tree users of these tables on x86 currently
    (even if they are included in the image).
    
    Fixes: 54196ccbe0ba ("of: consolidate linker section OF match table declarations")
    Fixes: f6e916b82022 ("irqchip: add basic infrastructure")
    Cc: stable <stable@vger.kernel.org>     # 3.9
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20201123102319.8090-2-johan@kernel.org
    [ johan: adjust context to 5.4 ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63ef5c2638a4faa4760f2cf28cded2bc3d5453ca
Author: Petr Vorel <petr.vorel@gmail.com>
Date:   Mon Dec 14 19:03:21 2020 -0800

    uapi: move constants from <linux/kernel.h> to <linux/const.h>
    
    commit a85cbe6159ffc973e5702f70a3bd5185f8f3c38d upstream.
    
    and include <linux/const.h> in UAPI headers instead of <linux/kernel.h>.
    
    The reason is to avoid indirect <linux/sysinfo.h> include when using
    some network headers: <linux/netlink.h> or others -> <linux/kernel.h>
    -> <linux/sysinfo.h>.
    
    This indirect include causes on MUSL redefinition of struct sysinfo when
    included both <sys/sysinfo.h> and some of UAPI headers:
    
        In file included from x86_64-buildroot-linux-musl/sysroot/usr/include/linux/kernel.h:5,
                         from x86_64-buildroot-linux-musl/sysroot/usr/include/linux/netlink.h:5,
                         from ../include/tst_netlink.h:14,
                         from tst_crypto.c:13:
        x86_64-buildroot-linux-musl/sysroot/usr/include/linux/sysinfo.h:8:8: error: redefinition of `struct sysinfo'
         struct sysinfo {
                ^~~~~~~
        In file included from ../include/tst_safe_macros.h:15,
                         from ../include/tst_test.h:93,
                         from tst_crypto.c:11:
        x86_64-buildroot-linux-musl/sysroot/usr/include/sys/sysinfo.h:10:8: note: originally defined here
    
    Link: https://lkml.kernel.org/r/20201015190013.8901-1-petr.vorel@gmail.com
    Signed-off-by: Petr Vorel <petr.vorel@gmail.com>
    Suggested-by: Rich Felker <dalias@aerifal.cx>
    Acked-by: Rich Felker <dalias@libc.org>
    Cc: Peter Korsgaard <peter@korsgaard.com>
    Cc: Baruch Siach <baruch@tkos.co.il>
    Cc: Florian Weimer <fweimer@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b33e182e9f7e0f83a58ef1bddbcd6d1dec09fdd6
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Thu Oct 22 14:05:46 2020 +0000

    powerpc/bitops: Fix possible undefined behaviour with fls() and fls64()
    
    [ Upstream commit 1891ef21d92c4801ea082ee8ed478e304ddc6749 ]
    
    fls() and fls64() are using __builtin_ctz() and _builtin_ctzll().
    On powerpc, those builtins trivially use ctlzw and ctlzd power
    instructions.
    
    Allthough those instructions provide the expected result with
    input argument 0, __builtin_ctz() and __builtin_ctzll() are
    documented as undefined for value 0.
    
    The easiest fix would be to use fls() and fls64() functions
    defined in include/asm-generic/bitops/builtin-fls.h and
    include/asm-generic/bitops/fls64.h, but GCC output is not optimal:
    
    00000388 <testfls>:
     388:   2c 03 00 00     cmpwi   r3,0
     38c:   41 82 00 10     beq     39c <testfls+0x14>
     390:   7c 63 00 34     cntlzw  r3,r3
     394:   20 63 00 20     subfic  r3,r3,32
     398:   4e 80 00 20     blr
     39c:   38 60 00 00     li      r3,0
     3a0:   4e 80 00 20     blr
    
    000003b0 <testfls64>:
     3b0:   2c 03 00 00     cmpwi   r3,0
     3b4:   40 82 00 1c     bne     3d0 <testfls64+0x20>
     3b8:   2f 84 00 00     cmpwi   cr7,r4,0
     3bc:   38 60 00 00     li      r3,0
     3c0:   4d 9e 00 20     beqlr   cr7
     3c4:   7c 83 00 34     cntlzw  r3,r4
     3c8:   20 63 00 20     subfic  r3,r3,32
     3cc:   4e 80 00 20     blr
     3d0:   7c 63 00 34     cntlzw  r3,r3
     3d4:   20 63 00 40     subfic  r3,r3,64
     3d8:   4e 80 00 20     blr
    
    When the input of fls(x) is a constant, just check x for nullity and
    return either 0 or __builtin_clz(x). Otherwise, use cntlzw instruction
    directly.
    
    For fls64() on PPC64, do the same but with __builtin_clzll() and
    cntlzd instruction. On PPC32, lets take the generic fls64() which
    will use our fls(). The result is as expected:
    
    00000388 <testfls>:
     388:   7c 63 00 34     cntlzw  r3,r3
     38c:   20 63 00 20     subfic  r3,r3,32
     390:   4e 80 00 20     blr
    
    000003a0 <testfls64>:
     3a0:   2c 03 00 00     cmpwi   r3,0
     3a4:   40 82 00 10     bne     3b4 <testfls64+0x14>
     3a8:   7c 83 00 34     cntlzw  r3,r4
     3ac:   20 63 00 20     subfic  r3,r3,32
     3b0:   4e 80 00 20     blr
     3b4:   7c 63 00 34     cntlzw  r3,r3
     3b8:   20 63 00 40     subfic  r3,r3,64
     3bc:   4e 80 00 20     blr
    
    Fixes: 2fcff790dcb4 ("powerpc: Use builtin functions for fls()/__fls()/fls64()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Acked-by: Segher Boessenkool <segher@kernel.crashing.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/348c2d3f19ffcff8abe50d52513f989c4581d000.1603375524.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fef17dacf55ee55b4f9da779ef02f9d11324fdd7
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 26 11:43:06 2020 +0100

    USB: serial: digi_acceleport: fix write-wakeup deadlocks
    
    [ Upstream commit 5098e77962e7c8947f87bd8c5869c83e000a522a ]
    
    The driver must not call tty_wakeup() while holding its private lock as
    line disciplines are allowed to call back into write() from
    write_wakeup(), leading to a deadlock.
    
    Also remove the unneeded work struct that was used to defer wakeup in
    order to work around a possible race in ancient times (see comment about
    n_tty write_chan() in commit 14b54e39b412 ("USB: serial: remove
    changelogs and old todo entries")).
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2058d92d455180ff9737b6136fefed46484e6928
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Dec 17 16:59:04 2020 +0100

    s390/dasd: fix hanging device offline processing
    
    [ Upstream commit 658a337a606f48b7ebe451591f7681d383fa115e ]
    
    For an LCU update a read unit address configuration IO is required.
    This is started using sleep_on(), which has early exit paths in case the
    device is not usable for IO. For example when it is in offline processing.
    
    In those cases the LCU update should fail and not be retried.
    Therefore lcu_update_work checks if EOPNOTSUPP is returned or not.
    
    Commit 41995342b40c ("s390/dasd: fix endless loop after read unit address configuration")
    accidentally removed the EOPNOTSUPP return code from
    read_unit_address_configuration(), which in turn might lead to an endless
    loop of the LCU update in offline processing.
    
    Fix by returning EOPNOTSUPP again if the device is not able to perform the
    request.
    
    Fixes: 41995342b40c ("s390/dasd: fix endless loop after read unit address configuration")
    Cc: stable@vger.kernel.org #5.3
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f3bacefade77e8fa8ba39b18cf94c0e1ecc65db
Author: Eric Auger <eric.auger@redhat.com>
Date:   Fri Nov 13 18:52:02 2020 +0100

    vfio/pci: Move dummy_resources_list init in vfio_pci_probe()
    
    [ Upstream commit 16b8fe4caf499ae8e12d2ab1b1324497e36a7b83 ]
    
    In case an error occurs in vfio_pci_enable() before the call to
    vfio_pci_probe_mmaps(), vfio_pci_disable() will  try to iterate
    on an uninitialized list and cause a kernel panic.
    
    Lets move to the initialization to vfio_pci_probe() to fix the
    issue.
    
    Signed-off-by: Eric Auger <eric.auger@redhat.com>
    Fixes: 05f0c03fbac1 ("vfio-pci: Allow to mmap sub-page MMIO BARs if the mmio page is exclusive")
    CC: Stable <stable@vger.kernel.org> # v4.7+
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce86c8dab741f53b8dc7362c62cc6de0e7a3956f
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Dec 29 02:38:22 2020 +0000

    mm: memcontrol: fix excessive complexity in memory.stat reporting
    
    commit a983b5ebee57209c99f68c8327072f25e0e6e3da upstream
    
    We've seen memory.stat reads in top-level cgroups take up to fourteen
    seconds during a userspace bug that created tens of thousands of ghost
    cgroups pinned by lingering page cache.
    
    Even with a more reasonable number of cgroups, aggregating memory.stat
    is unnecessarily heavy.  The complexity is this:
    
            nr_cgroups * nr_stat_items * nr_possible_cpus
    
    where the stat items are ~70 at this point.  With 128 cgroups and 128
    CPUs - decent, not enormous setups - reading the top-level memory.stat
    has to aggregate over a million per-cpu counters.  This doesn't scale.
    
    Instead of spreading the source of truth across all CPUs, use the
    per-cpu counters merely to batch updates to shared atomic counters.
    
    This is the same as the per-cpu stocks we use for charging memory to the
    shared atomic page_counters, and also the way the global vmstat counters
    are implemented.
    
    Vmstat has elaborate spilling thresholds that depend on the number of
    CPUs, amount of memory, and memory pressure - carefully balancing the
    cost of counter updates with the amount of per-cpu error.  That's
    because the vmstat counters are system-wide, but also used for decisions
    inside the kernel (e.g.  NR_FREE_PAGES in the allocator).  Neither is
    true for the memory controller.
    
    Use the same static batch size we already use for page_counter updates
    during charging.  The per-cpu error in the stats will be 128k, which is
    an acceptable ratio of cores to memory accounting granularity.
    
    [hannes@cmpxchg.org: fix warning in __this_cpu_xchg() calls]
      Link: http://lkml.kernel.org/r/20171201135750.GB8097@cmpxchg.org
    Link: http://lkml.kernel.org/r/20171103153336.24044-3-hannes@cmpxchg.org
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: stable@vger.kernel.org
    [shaoyi@amazon.com: resolved the conflict brought by commit 17ffa29c355658c8e9b19f56cbf0388500ca7905 in mm/memcontrol.c by contextual fix]
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81da664eba3be1485512402592089c356bebc345
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Dec 29 02:35:58 2020 +0000

    mm: memcontrol: implement lruvec stat functions on top of each other
    
    commit 284542656e22c43fdada8c8cc0ca9ede8453eed7 upstream
    
    The implementation of the lruvec stat functions and their variants for
    accounting through a page, or accounting from a preemptible context, are
    mostly identical and needlessly repetitive.
    
    Implement the lruvec_page functions by looking up the page's lruvec and
    then using the lruvec function.
    
    Implement the functions for preemptible contexts by disabling preemption
    before calling the atomic context functions.
    
    Link: http://lkml.kernel.org/r/20171103153336.24044-2-hannes@cmpxchg.org
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18a557951209af1a9bf0396b7d88013c54ed4d1e
Author: Johannes Weiner <hannes@cmpxchg.org>
Date:   Tue Dec 29 02:33:42 2020 +0000

    mm: memcontrol: eliminate raw access to stat and event counters
    
    commit c9019e9bf42e66d028d70d2da6206cad4dd9250d upstream
    
    Replace all raw 'this_cpu_' modifications of the stat and event per-cpu
    counters with API functions such as mod_memcg_state().
    
    This makes the code easier to read, but is also in preparation for the
    next patch, which changes the per-cpu implementation of those counters.
    
    Link: http://lkml.kernel.org/r/20171103153336.24044-1-hannes@cmpxchg.org
    Signed-off-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Shaoying Xu <shaoyi@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13915abb449fa040bb1f07f6da44f5afb93d69b1
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jan 14 09:39:53 2020 +0100

    ALSA: usb-audio: fix sync-ep altsetting sanity check
    
    commit 5d1b71226dc4d44b4b65766fa9d74492f9d4587b upstream
    
    The altsetting sanity check in set_sync_ep_implicit_fb_quirk() was
    checking for there to be at least one altsetting but then went on to
    access the second one, which may not exist.
    
    This could lead to random slab data being used to initialise the sync
    endpoint in snd_usb_add_endpoint().
    
    Fixes: c75a8a7ae565 ("ALSA: snd-usb: add support for implicit feedback")
    Fixes: ca10a7ebdff1 ("ALSA: usb-audio: FT C400 sync playback EP to capture EP")
    Fixes: 5e35dc0338d8 ("ALSA: usb-audio: add implicit fb quirk for Behringer UFX1204")
    Fixes: 17f08b0d9aaf ("ALSA: usb-audio: add implicit fb quirk for Axe-Fx II")
    Fixes: 103e9625647a ("ALSA: usb-audio: simplify set_sync_ep_implicit_fb_quirk")
    Cc: stable <stable@vger.kernel.org>     # 3.5
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200114083953.1106-1-johan@kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22bf822bf674b918b2663e7584158cbc2a5bd1a9
Author: Alberto Aguirre <albaguirre@gmail.com>
Date:   Wed Apr 18 09:35:34 2018 -0500

    ALSA: usb-audio: simplify set_sync_ep_implicit_fb_quirk
    
    commit 103e9625647ad74d201e26fb74afcd8479142a37 upstream
    
    Signed-off-by: Alberto Aguirre <albaguirre@gmail.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b067253e2cb13478355721fec9006e74afe14807
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 13 09:51:11 2019 +0100

    ALSA: hda/ca0132 - Fix work handling in delayed HP detection
    
    commit 42fb6b1d41eb5905d77c06cad2e87b70289bdb76 upstream
    
    CA0132 has the delayed HP jack detection code that is invoked from the
    unsol handler, but it does a few weird things: it contains the cancel
    of a work inside the work handler, and yet it misses the cancel-sync
    call at (runtime-)suspend.  This patch addresses those issues.
    
    Fixes: 15c2b3cc09a3 ("ALSA: hda/ca0132 - Fix possible workqueue stall")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20191213085111.22855-4-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fd19670f0b8aee1021719194b40753579f4763d
Author: Kevin Vigor <kvigor@gmail.com>
Date:   Fri Nov 6 14:20:34 2020 -0800

    md/raid10: initialize r10_bio->read_slot before use.
    
    commit 93decc563637c4288380912eac0eb42fb246cc04 upstream.
    
    In __make_request() a new r10bio is allocated and passed to
    raid10_read_request(). The read_slot member of the bio is not
    initialized, and the raid10_read_request() uses it to index an
    array. This leads to occasional panics.
    
    Fix by initializing the field to invalid value and checking for
    valid value in raid10_read_request().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kevin Vigor <kvigor@gmail.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f4bcfd101adc49937080b437d06547f5f2e7773
Author: Jan Beulich <JBeulich@suse.com>
Date:   Mon Feb 26 04:11:21 2018 -0700

    x86/entry/64: Add instruction suffix
    
    commit a368d7fd2a3c6babb852fe974018dd97916bcd3b upstream.
    
    Omitting suffixes from instructions in AT&T mode is bad practice when
    operand size cannot be determined by the assembler from register
    operands, and is likely going to be warned about by upstream gas in the
    future (mine does already). Add the single missing suffix here.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/5A93F96902000078001ABAC8@prv-mh.provo.novell.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b170381c82913d2529ee2998a85afcaa337f02a
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 29 13:47:12 2020 +0100

    Linux 4.14.213
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201228124904.654293249@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b920110283126a88073a145d483eeba836ea374
Author: Jubin Zhong <zhongjubin@huawei.com>
Date:   Wed Dec 2 10:33:42 2020 +0800

    PCI: Fix pci_slot_release() NULL pointer dereference
    
    commit 4684709bf81a2d98152ed6b610e3d5c403f9bced upstream.
    
    If kobject_init_and_add() fails, pci_slot_release() is called to delete
    slot->list from parent->slots.  But slot->list hasn't been initialized
    yet, so we dereference a NULL pointer:
    
      Unable to handle kernel NULL pointer dereference at virtual address
    00000000
      ...
      CPU: 10 PID: 1 Comm: swapper/0 Not tainted 4.4.240 #197
      task: ffffeb398a45ef10 task.stack: ffffeb398a470000
      PC is at __list_del_entry_valid+0x5c/0xb0
      LR is at pci_slot_release+0x84/0xe4
      ...
      __list_del_entry_valid+0x5c/0xb0
      pci_slot_release+0x84/0xe4
      kobject_put+0x184/0x1c4
      pci_create_slot+0x17c/0x1b4
      __pci_hp_initialize+0x68/0xa4
      pciehp_probe+0x1a4/0x2fc
      pcie_port_probe_service+0x58/0x84
      driver_probe_device+0x320/0x470
    
    Initialize slot->list before calling kobject_init_and_add() to avoid this.
    
    Fixes: 8a94644b440e ("PCI: Fix pci_create_slot() reference count leak")
    Link: https://lore.kernel.org/r/1606876422-117457-1-git-send-email-zhongjubin@huawei.com
    Signed-off-by: Jubin Zhong <zhongjubin@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org      # v5.9+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d42909d0ae2e839ef2c15e575bf0d78372b2fbbf
Author: Dan Williams <dan.j.williams@intel.com>
Date:   Fri Nov 20 08:50:07 2020 -0800

    libnvdimm/namespace: Fix reaping of invalidated block-window-namespace labels
    
    commit 2dd2a1740ee19cd2636d247276cf27bfa434b0e2 upstream.
    
    A recent change to ndctl to attempt to reconfigure namespaces in place
    uncovered a label accounting problem in block-window-type namespaces.
    The ndctl "create.sh" test is able to trigger this signature:
    
     WARNING: CPU: 34 PID: 9167 at drivers/nvdimm/label.c:1100 __blk_label_update+0x9a3/0xbc0 [libnvdimm]
     [..]
     RIP: 0010:__blk_label_update+0x9a3/0xbc0 [libnvdimm]
     [..]
     Call Trace:
      uuid_store+0x21b/0x2f0 [libnvdimm]
      kernfs_fop_write+0xcf/0x1c0
      vfs_write+0xcc/0x380
      ksys_write+0x68/0xe0
    
    When allocated capacity for a namespace is renamed (new UUID) the labels
    with the old UUID need to be deleted. The ndctl behavior to always
    destroy namespaces on reconfiguration hid this problem.
    
    The immediate impact of this bug is limited since block-window-type
    namespaces only seem to exist in the specification and not in any
    shipping products. However, the label handling code is being reused for
    other technologies like CXL region labels, so there is a benefit to
    making sure both vertical labels sets (block-window) and horizontal
    label sets (pmem) have a functional reference implementation in
    libnvdimm.
    
    Fixes: c4703ce11c23 ("libnvdimm/namespace: Fix label tracking error")
    Cc: <stable@vger.kernel.org>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 042c5ce38787ca037b41b6cb364f6e708fe40d15
Author: SeongJae Park <sjpark@amazon.de>
Date:   Mon Dec 14 10:08:40 2020 +0100

    xenbus/xenbus_backend: Disallow pending watch messages
    
    commit 9996bd494794a2fe393e97e7a982388c6249aa76 upstream.
    
    'xenbus_backend' watches 'state' of devices, which is writable by
    guests.  Hence, if guests intensively updates it, dom0 will have lots of
    pending events that exhausting memory of dom0.  In other words, guests
    can trigger dom0 memory pressure.  This is known as XSA-349.  However,
    the watch callback of it, 'frontend_changed()', reads only 'state', so
    doesn't need to have the pending events.
    
    To avoid the problem, this commit disallows pending watch messages for
    'xenbus_backend' using the 'will_handle()' watch callback.
    
    This is part of XSA-349
    
    Cc: stable@vger.kernel.org
    Signed-off-by: SeongJae Park <sjpark@amazon.de>
    Reported-by: Michael Kurth <mku@amazon.de>
    Reported-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b6f65808cf9bfd2cd8193c7b3221cd422fa81b5
Author: SeongJae Park <sjpark@amazon.de>
Date:   Mon Dec 14 10:07:13 2020 +0100

    xen/xenbus: Count pending messages for each watch
    
    commit 3dc86ca6b4c8cfcba9da7996189d1b5a358a94fc upstream.
    
    This commit adds a counter of pending messages for each watch in the
    struct.  It is used to skip unnecessary pending messages lookup in
    'unregister_xenbus_watch()'.  It could also be used in 'will_handle'
    callback.
    
    This is part of XSA-349
    
    Cc: stable@vger.kernel.org
    Signed-off-by: SeongJae Park <sjpark@amazon.de>
    Reported-by: Michael Kurth <mku@amazon.de>
    Reported-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3372c95665eeef46efd38b2e29e5a524a1fe15a
Author: SeongJae Park <sjpark@amazon.de>
Date:   Mon Dec 14 10:05:47 2020 +0100

    xen/xenbus/xen_bus_type: Support will_handle watch callback
    
    commit be987200fbaceaef340872841d4f7af2c5ee8dc3 upstream.
    
    This commit adds support of the 'will_handle' watch callback for
    'xen_bus_type' users.
    
    This is part of XSA-349
    
    Cc: stable@vger.kernel.org
    Signed-off-by: SeongJae Park <sjpark@amazon.de>
    Reported-by: Michael Kurth <mku@amazon.de>
    Reported-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dda8dd61151ab5464e39d7d10fb6270920886ea
Author: SeongJae Park <sjpark@amazon.de>
Date:   Mon Dec 14 10:04:18 2020 +0100

    xen/xenbus: Add 'will_handle' callback support in xenbus_watch_path()
    
    commit 2e85d32b1c865bec703ce0c962221a5e955c52c2 upstream.
    
    Some code does not directly make 'xenbus_watch' object and call
    'register_xenbus_watch()' but use 'xenbus_watch_path()' instead.  This
    commit adds support of 'will_handle' callback in the
    'xenbus_watch_path()' and it's wrapper, 'xenbus_watch_pathfmt()'.
    
    This is part of XSA-349
    
    Cc: stable@vger.kernel.org
    Signed-off-by: SeongJae Park <sjpark@amazon.de>
    Reported-by: Michael Kurth <mku@amazon.de>
    Reported-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72a8b918e34db66dc593d1c50527e745210cc6e6
Author: SeongJae Park <sjpark@amazon.de>
Date:   Mon Dec 14 10:02:45 2020 +0100

    xen/xenbus: Allow watches discard events before queueing
    
    commit fed1755b118147721f2c87b37b9d66e62c39b668 upstream.
    
    If handling logics of watch events are slower than the events enqueue
    logic and the events can be created from the guests, the guests could
    trigger memory pressure by intensively inducing the events, because it
    will create a huge number of pending events that exhausting the memory.
    
    Fortunately, some watch events could be ignored, depending on its
    handler callback.  For example, if the callback has interest in only one
    single path, the watch wouldn't want multiple pending events.  Or, some
    watches could ignore events to same path.
    
    To let such watches to volutarily help avoiding the memory pressure
    situation, this commit introduces new watch callback, 'will_handle'.  If
    it is not NULL, it will be called for each new event just before
    enqueuing it.  Then, if the callback returns false, the event will be
    discarded.  No watch is using the callback for now, though.
    
    This is part of XSA-349
    
    Cc: stable@vger.kernel.org
    Signed-off-by: SeongJae Park <sjpark@amazon.de>
    Reported-by: Michael Kurth <mku@amazon.de>
    Reported-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9a5407eac727d46810417d7f98cf940585b7016
Author: Pawel Wieczorkiewicz <wipawel@amazon.de>
Date:   Mon Dec 14 10:25:57 2020 +0100

    xen-blkback: set ring->xenblkd to NULL after kthread_stop()
    
    commit 1c728719a4da6e654afb9cc047164755072ed7c9 upstream.
    
    When xen_blkif_disconnect() is called, the kernel thread behind the
    block interface is stopped by calling kthread_stop(ring->xenblkd).
    The ring->xenblkd thread pointer being non-NULL determines if the
    thread has been already stopped.
    Normally, the thread's function xen_blkif_schedule() sets the
    ring->xenblkd to NULL, when the thread's main loop ends.
    
    However, when the thread has not been started yet (i.e.
    wake_up_process() has not been called on it), the xen_blkif_schedule()
    function would not be called yet.
    
    In such case the kthread_stop() call returns -EINTR and the
    ring->xenblkd remains dangling.
    When this happens, any consecutive call to xen_blkif_disconnect (for
    example in frontend_changed() callback) leads to a kernel crash in
    kthread_stop() (e.g. NULL pointer dereference in exit_creds()).
    
    This is XSA-350.
    
    Cc: <stable@vger.kernel.org> # 4.12
    Fixes: a24fa22ce22a ("xen/blkback: don't use xen_blkif_get() in xen-blkback kthread")
    Reported-by: Olivier Benjamin <oliben@amazon.com>
    Reported-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Signed-off-by: Pawel Wieczorkiewicz <wipawel@amazon.de>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c94d9557a0548cc8393abec91bbad7647a3a4d09
Author: Terry Zhou <bjzhou@marvell.com>
Date:   Fri Nov 6 11:00:39 2020 +0100

    clk: mvebu: a3700: fix the XTAL MODE pin to MPP1_9
    
    commit 6f37689cf6b38fff96de52e7f0d3e78f22803ba0 upstream.
    
    There is an error in the current code that the XTAL MODE
    pin was set to NB MPP1_31 which should be NB MPP1_9.
    The latch register of NB MPP1_9 has different offset of 0x8.
    
    Signed-off-by: Terry Zhou <bjzhou@marvell.com>
    [pali: Fix pin name in commit message]
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: 7ea8250406a6 ("clk: mvebu: Add the xtal clock for Armada 3700 SoC")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201106100039.11385-1-pali@kernel.org
    Reviewed-by: Marek Behún <kabel@kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 467152df59d5bc6c9c1d8ef415e70d557f2756cd
Author: Zhao Heming <heming.zhao@suse.com>
Date:   Thu Nov 19 19:41:34 2020 +0800

    md/cluster: fix deadlock when node is doing resync job
    
    commit bca5b0658020be90b6b504ca514fd80110204f71 upstream.
    
    md-cluster uses MD_CLUSTER_SEND_LOCK to make node can exclusively send msg.
    During sending msg, node can concurrently receive msg from another node.
    When node does resync job, grab token_lockres:EX may trigger a deadlock:
    ```
    nodeA                       nodeB
    --------------------     --------------------
    a.
    send METADATA_UPDATED
    held token_lockres:EX
                             b.
                             md_do_sync
                              resync_info_update
                                send RESYNCING
                                 + set MD_CLUSTER_SEND_LOCK
                                 + wait for holding token_lockres:EX
    
                             c.
                             mdadm /dev/md0 --remove /dev/sdg
                              + held reconfig_mutex
                              + send REMOVE
                                 + wait_event(MD_CLUSTER_SEND_LOCK)
    
                             d.
                             recv_daemon //METADATA_UPDATED from A
                              process_metadata_update
                               + (mddev_trylock(mddev) ||
                                  MD_CLUSTER_HOLDING_MUTEX_FOR_RECVD)
                                 //this time, both return false forever
    ```
    Explaination:
    a. A send METADATA_UPDATED
       This will block another node to send msg
    
    b. B does sync jobs, which will send RESYNCING at intervals.
       This will be block for holding token_lockres:EX lock.
    
    c. B do "mdadm --remove", which will send REMOVE.
       This will be blocked by step <b>: MD_CLUSTER_SEND_LOCK is 1.
    
    d. B recv METADATA_UPDATED msg, which send from A in step <a>.
       This will be blocked by step <c>: holding mddev lock, it makes
       wait_event can't hold mddev lock. (btw,
       MD_CLUSTER_HOLDING_MUTEX_FOR_RECVD keep ZERO in this scenario.)
    
    There is a similar deadlock in commit 0ba959774e93
    ("md-cluster: use sync way to handle METADATA_UPDATED msg")
    In that commit, step c is "update sb". This patch step c is
    "mdadm --remove".
    
    For fixing this issue, we can refer the solution of function:
    metadata_update_start. Which does the same grab lock_token action.
    lock_comm can use the same steps to avoid deadlock. By moving
    MD_CLUSTER_HOLDING_MUTEX_FOR_RECVD from lock_token to lock_comm.
    It enlarge a little bit window of MD_CLUSTER_HOLDING_MUTEX_FOR_RECVD,
    but it is safe & can break deadlock.
    
    Repro steps (I only triggered 3 times with hundreds tests):
    
    two nodes share 3 iSCSI luns: sdg/sdh/sdi. Each lun size is 1GB.
    ```
    ssh root@node2 "mdadm -S --scan"
    mdadm -S --scan
    for i in {g,h,i};do dd if=/dev/zero of=/dev/sd$i oflag=direct bs=1M \
    count=20; done
    
    mdadm -C /dev/md0 -b clustered -e 1.2 -n 2 -l mirror /dev/sdg /dev/sdh \
     --bitmap-chunk=1M
    ssh root@node2 "mdadm -A /dev/md0 /dev/sdg /dev/sdh"
    
    sleep 5
    
    mkfs.xfs /dev/md0
    mdadm --manage --add /dev/md0 /dev/sdi
    mdadm --wait /dev/md0
    mdadm --grow --raid-devices=3 /dev/md0
    
    mdadm /dev/md0 --fail /dev/sdg
    mdadm /dev/md0 --remove /dev/sdg
    mdadm --grow --raid-devices=2 /dev/md0
    ```
    
    test script will hung when executing "mdadm --remove".
    
    ```
     # dump stacks by "echo t > /proc/sysrq-trigger"
    md0_cluster_rec D    0  5329      2 0x80004000
    Call Trace:
     __schedule+0x1f6/0x560
     ? _cond_resched+0x2d/0x40
     ? schedule+0x4a/0xb0
     ? process_metadata_update.isra.0+0xdb/0x140 [md_cluster]
     ? wait_woken+0x80/0x80
     ? process_recvd_msg+0x113/0x1d0 [md_cluster]
     ? recv_daemon+0x9e/0x120 [md_cluster]
     ? md_thread+0x94/0x160 [md_mod]
     ? wait_woken+0x80/0x80
     ? md_congested+0x30/0x30 [md_mod]
     ? kthread+0x115/0x140
     ? __kthread_bind_mask+0x60/0x60
     ? ret_from_fork+0x1f/0x40
    
    mdadm           D    0  5423      1 0x00004004
    Call Trace:
     __schedule+0x1f6/0x560
     ? __schedule+0x1fe/0x560
     ? schedule+0x4a/0xb0
     ? lock_comm.isra.0+0x7b/0xb0 [md_cluster]
     ? wait_woken+0x80/0x80
     ? remove_disk+0x4f/0x90 [md_cluster]
     ? hot_remove_disk+0xb1/0x1b0 [md_mod]
     ? md_ioctl+0x50c/0xba0 [md_mod]
     ? wait_woken+0x80/0x80
     ? blkdev_ioctl+0xa2/0x2a0
     ? block_ioctl+0x39/0x40
     ? ksys_ioctl+0x82/0xc0
     ? __x64_sys_ioctl+0x16/0x20
     ? do_syscall_64+0x5f/0x150
     ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    md0_resync      D    0  5425      2 0x80004000
    Call Trace:
     __schedule+0x1f6/0x560
     ? schedule+0x4a/0xb0
     ? dlm_lock_sync+0xa1/0xd0 [md_cluster]
     ? wait_woken+0x80/0x80
     ? lock_token+0x2d/0x90 [md_cluster]
     ? resync_info_update+0x95/0x100 [md_cluster]
     ? raid1_sync_request+0x7d3/0xa40 [raid1]
     ? md_do_sync.cold+0x737/0xc8f [md_mod]
     ? md_thread+0x94/0x160 [md_mod]
     ? md_congested+0x30/0x30 [md_mod]
     ? kthread+0x115/0x140
     ? __kthread_bind_mask+0x60/0x60
     ? ret_from_fork+0x1f/0x40
    ```
    
    At last, thanks for Xiao's solution.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Zhao Heming <heming.zhao@suse.com>
    Suggested-by: Xiao Ni <xni@redhat.com>
    Reviewed-by: Xiao Ni <xni@redhat.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9747f0adb85b147d7f37edcafb91377cd97e3187
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Sep 20 12:27:38 2020 +0100

    iio:imu:bmi160: Fix too large a buffer.
    
    commit dc7de42d6b50a07b37feeba4c6b5136290fcee81 upstream.
    
    The comment implies this device has 3 sensor types, but it only
    has an accelerometer and a gyroscope (both 3D).  As such the
    buffer does not need to be as long as stated.
    
    Note I've separated this from the following patch which fixes
    the alignment for passing to iio_push_to_buffers_with_timestamp()
    as they are different issues even if they affect the same line
    of code.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: Daniel Baluta <daniel.baluta@oss.nxp.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200920112742.170751-5-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 726d4ec5c8fb7757ea6d9f974b2907f72c6df388
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Sep 20 12:27:40 2020 +0100

    iio:pressure:mpl3115: Force alignment of buffer
    
    commit 198cf32f0503d2ad60d320b95ef6fb8243db857f upstream.
    
    Whilst this is another case of the issue Lars reported with
    an array of elements of smaller than 8 bytes being passed
    to iio_push_to_buffers_with_timestamp(), the solution here is
    a bit different from the other cases and relies on __aligned
    working on the stack (true since 4.6?)
    
    This one is unusual.  We have to do an explicit memset() each time
    as we are reading 3 bytes into a potential 4 byte channel which
    may sometimes be a 2 byte channel depending on what is enabled.
    As such, moving the buffer to the heap in the iio_priv structure
    doesn't save us much.  We can't use a nice explicit structure
    on the stack either as the data channels have different storage
    sizes and are all separately controlled.
    
    Fixes: cc26ad455f57 ("iio: Add Freescale MPL3115A2 pressure / temperature sensor driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: Peter Meerwald <pmeerw@pmeerw.net>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200920112742.170751-7-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ca30fdf3557a50bebc93fd4e73283cd523db94c
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Sep 20 12:27:35 2020 +0100

    iio:light:rpr0521: Fix timestamp alignment and prevent data leak.
    
    commit a61817216bcc755eabbcb1cf281d84ccad267ed1 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp() assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv().
    This data is allocated with kzalloc() so no data can leak apart
    from previous readings and in this case the status byte from the device.
    
    The forced alignment of ts is not necessary in this case but it
    potentially makes the code less fragile.
    
    >From personal communications with Mikko:
    
    We could probably split the reading of the int register, but it
    would mean a significant performance cost of 20 i2c clock cycles.
    
    Fixes: e12ffd241c00 ("iio: light: rpr0521 triggered buffer")
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: Mikko Koivunen <mikko.koivunen@fi.rohmeurope.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200920112742.170751-2-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 855dcf52d4ab664a79d70256a97238c430d28af6
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Nov 3 20:07:43 2020 +0800

    iio: adc: rockchip_saradc: fix missing clk_disable_unprepare() on error in rockchip_saradc_resume
    
    commit 560c6b914c6ec7d9d9a69fddbb5bf3bf71433e8b upstream.
    
    Fix the missing clk_disable_unprepare() of info->pclk
    before return from rockchip_saradc_resume in the error
    handling case when fails to prepare and enable info->clk.
    
    Suggested-by: Robin Murphy <robin.murphy@arm.com>
    Fixes: 44d6f2ef94f9 ("iio: adc: add driver for Rockchip saradc")
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201103120743.110662-1-miaoqinglang@huawei.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bbe7e321c197204124211c8480ebf4ec33943d5
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Thu Nov 12 15:43:22 2020 +0100

    iio: buffer: Fix demux update
    
    commit 19ef7b70ca9487773c29b449adf0c70f540a0aab upstream.
    
    When updating the buffer demux, we will skip a scan element from the
    device in the case `in_ind != out_ind` and we enter the while loop.
    in_ind should only be refreshed with `find_next_bit()` in the end of the
    loop.
    
    Note, to cause problems we need a situation where we are skippig over
    an element (channel not enabled) that happens to not have the same size
    as the next element.   Whilst this is a possible situation we haven't
    actually identified any cases in mainline where it happens as most drivers
    have consistent channel storage sizes with the exception of the timestamp
    which is the last element and hence never skipped over.
    
    Fixes: 5ada4ea9be16 ("staging:iio: add demux optionally to path from device to buffer")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20201112144323.28887-1-nuno.sa@analog.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1767fec18b98064d627f2bcca37bf5c4befc5108
Author: Sven Eckelmann <sven@narfation.org>
Date:   Tue Nov 24 07:25:06 2020 +0100

    mtd: parser: cmdline: Fix parsing of part-names with colons
    
    commit 639a82434f16a6df0ce0e7c8595976f1293940fd upstream.
    
    Some devices (especially QCA ones) are already using hardcoded partition
    names with colons in it. The OpenMesh A62 for example provides following
    mtd relevant information via cmdline:
    
      root=31:11 mtdparts=spi0.0:256k(0:SBL1),128k(0:MIBIB),384k(0:QSEE),64k(0:CDT),64k(0:DDRPARAMS),64k(0:APPSBLENV),512k(0:APPSBL),64k(0:ART),64k(custom),64k(0:KEYS),0x002b0000(kernel),0x00c80000(rootfs),15552k(inactive) rootfsname=rootfs rootwait
    
    The change to split only on the last colon between mtd-id and partitions
    will cause newpart to see following string for the first partition:
    
      KEYS),0x002b0000(kernel),0x00c80000(rootfs),15552k(inactive)
    
    Such a partition list cannot be parsed and thus the device fails to boot.
    
    Avoid this behavior by making sure that the start of the first part-name
    ("(") will also be the last byte the mtd-id split algorithm is using for
    its colon search.
    
    Fixes: eb13fa022741 ("mtd: parser: cmdline: Support MTD names containing one or more colons")
    Cc: stable@vger.kernel.org
    Cc: Ron Minnich <rminnich@google.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20201124062506.185392-1-sven@narfation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ea631276af9f31f73aac5f09b9fb4d37631cad2
Author: Evan Green <evgreen@chromium.org>
Date:   Tue Sep 29 13:30:57 2020 -0700

    soc: qcom: smp2p: Safely acquire spinlock without IRQs
    
    commit fc3e62e25c3896855b7c3d72df19ca6be3459c9f upstream.
    
    smp2p_update_bits() should disable interrupts when it acquires its
    spinlock. This is important because without the _irqsave, a priority
    inversion can occur.
    
    This function is called both with interrupts enabled in
    qcom_q6v5_request_stop(), and with interrupts disabled in
    ipa_smp2p_panic_notifier(). IRQ handling of spinlocks should be
    consistent to avoid the panic notifier deadlocking because it's
    sitting on the thread that's already got the lock via _request_stop().
    
    Found via lockdep.
    
    Cc: stable@vger.kernel.org
    Fixes: 50e99641413e7 ("soc: qcom: smp2p: Qualcomm Shared Memory Point to Point")
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Evan Green <evgreen@chromium.org>
    Link: https://lore.kernel.org/r/20200929133040.RESEND.1.Ideabf6dcdfc577cf39ce3d95b0e4aa1ac8b38f0c@changeid
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cf2a333ef2f3c414fa484b19e888695b7edc542
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Nov 8 23:41:00 2020 +0100

    spi: st-ssc4: Fix unbalanced pm_runtime_disable() in probe error path
    
    commit 5ef76dac0f2c26aeae4ee79eb830280f16d5aceb upstream.
    
    If the calls to devm_platform_ioremap_resource(), irq_of_parse_and_map()
    or devm_request_irq() fail on probe of the ST SSC4 SPI driver, the
    runtime PM disable depth is incremented even though it was not
    decremented before.  Fix it.
    
    Fixes: cd050abeba2a ("spi: st-ssc4: add missed pm_runtime_disable")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v5.5+
    Cc: Chuhong Yuan <hslester96@gmail.com>
    Link: https://lore.kernel.org/r/fbe8768c30dc829e2d77eabe7be062ca22f84024.1604874488.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1fd58a2e98bc7d1a938c00fcca8826db29826bf
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Dec 7 09:17:11 2020 +0100

    spi: sc18is602: Don't leak SPI master in probe error path
    
    commit 5b8c88462d83331dacb48aeaec8388117fef82e0 upstream.
    
    If the call to devm_gpiod_get_optional() fails on probe of the NXP
    SC18IS602/603 SPI driver, the spi_master struct is erroneously not freed.
    
    Fix by switching over to the new devm_spi_alloc_master() helper.
    
    Fixes: f99008013e19 ("spi: sc18is602: Add reset control via gpio pin.")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.9+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Phil Reid <preid@electromag.com.au>
    Link: https://lore.kernel.org/r/d5f715527b894b91d530fe11a86f51b3184a4e1a.1607286887.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53e76854c86a67d189fab86885a3f75fe8419670
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Dec 7 09:17:10 2020 +0100

    spi: rb4xx: Don't leak SPI master in probe error path
    
    commit a4729c3506c3eb1a6ca5c0289f4e7cafa4115065 upstream.
    
    If the calls to devm_clk_get(), devm_spi_register_master() or
    clk_prepare_enable() fail on probe of the Mikrotik RB4xx SPI driver,
    the spi_master struct is erroneously not freed.
    
    Fix by switching over to the new devm_spi_alloc_master() helper.
    
    Fixes: 05aec357871f ("spi: Add SPI driver for Mikrotik RB4xx series boards")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.2+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.2+
    Cc: Bert Vermeulen <bert@biot.com>
    Link: https://lore.kernel.org/r/369bf26d71927f60943b1d9d8f51810f00b0237d.1607286887.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7bc40cbe9c8f39661f0574a0925a845282a7da7
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Nov 8 23:41:00 2020 +0100

    spi: pic32: Don't leak DMA channels in probe error path
    
    commit c575e9113bff5e024d75481613faed5ef9d465b2 upstream.
    
    If the calls to devm_request_irq() or devm_spi_register_master() fail
    on probe of the PIC32 SPI driver, the DMA channels requested by
    pic32_spi_dma_prep() are erroneously not released.  Plug the leak.
    
    Fixes: 1bcb9f8ceb67 ("spi: spi-pic32: Add PIC32 SPI master driver")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.7+
    Cc: Purna Chandra Mandal <purna.mandal@microchip.com>
    Link: https://lore.kernel.org/r/9624250e3a7aa61274b38219a62375bac1def637.1604874488.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d13cb7a01c5b391c1e9cc986bcd81bd45895e1df
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Dec 7 09:17:01 2020 +0100

    spi: davinci: Fix use-after-free on unbind
    
    commit 373afef350a93519b4b8d636b0895da8650b714b upstream.
    
    davinci_spi_remove() accesses the driver's private data after it's been
    freed with spi_master_put().
    
    Fix by moving the spi_master_put() to the end of the function.
    
    Fixes: fe5fd2540947 ("spi: davinci: Use dma_request_chan() for requesting DMA channel")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Acked-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Cc: <stable@vger.kernel.org> # v4.7+
    Link: https://lore.kernel.org/r/412f7eb1cf8990e0a3a2153f4c577298deab623e.1607286887.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0fc889ead9cb8aa904760ba5bb91f91215ad713
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Dec 7 09:17:04 2020 +0100

    spi: spi-sh: Fix use-after-free on unbind
    
    commit e77df3eca12be4b17f13cf9f215cff248c57d98f upstream.
    
    spi_sh_remove() accesses the driver's private data after calling
    spi_unregister_master() even though that function releases the last
    reference on the spi_master and thereby frees the private data.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound.
    
    Fixes: 680c1305e259 ("spi/spi_sh: use spi_unregister_master instead of spi_master_put in remove path")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v3.0+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v3.0+
    Cc: Axel Lin <axel.lin@ingics.com>
    Link: https://lore.kernel.org/r/6d97628b536baf01d5e3e39db61108f84d44c8b2.1607286887.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3922a0ea393ed7e3543cd1e6e5af0834b7561c0b
Author: Zwane Mwaikambo <zwane@yosper.io>
Date:   Mon Oct 12 22:59:14 2020 -0700

    drm/dp_aux_dev: check aux_dev before use in drm_dp_aux_dev_get_by_minor()
    
    commit 73b62cdb93b68d7e2c1d373c6a411bc00c53e702 upstream.
    
    I observed this when unplugging a DP monitor whilst a computer is asleep
    and then waking it up. This left DP chardev nodes still being present on
    the filesystem and accessing these device nodes caused an oops because
    drm_dp_aux_dev_get_by_minor() assumes a device exists if it is opened.
    This can also be reproduced by creating a device node with mknod(1) and
    issuing an open(2)
    
    [166164.933198] BUG: kernel NULL pointer dereference, address: 0000000000000018
    [166164.933202] #PF: supervisor read access in kernel mode
    [166164.933204] #PF: error_code(0x0000) - not-present page
    [166164.933205] PGD 0 P4D 0
    [166164.933208] Oops: 0000 [#1] PREEMPT SMP NOPTI
    [166164.933211] CPU: 4 PID: 99071 Comm: fwupd Tainted: G        W
    5.8.0-rc6+ #1
    [166164.933213] Hardware name: LENOVO 20RD002VUS/20RD002VUS, BIOS R16ET25W
    (1.11 ) 04/21/2020
    [166164.933232] RIP: 0010:drm_dp_aux_dev_get_by_minor+0x29/0x70
    [drm_kms_helper]
    [166164.933234] Code: 00 0f 1f 44 00 00 55 48 89 e5 41 54 41 89 fc 48 c7
    c7 60 01 a4 c0 e8 26 ab 30 d7 44 89 e6 48 c7 c7 80 01 a4 c0 e8 47 94 d6 d6
    <8b> 50 18 49 89 c4 48 8d 78 18 85 d2 74 33 8d 4a 01 89 d0 f0 0f b1
    [166164.933236] RSP: 0018:ffffb7d7c41cbbf0 EFLAGS: 00010246
    [166164.933237] RAX: 0000000000000000 RBX: ffff8a90001fe900 RCX: 0000000000000000
    [166164.933238] RDX: 0000000000000000 RSI: 0000000000000003 RDI: ffffffffc0a40180
    [166164.933239] RBP: ffffb7d7c41cbbf8 R08: 0000000000000000 R09: ffff8a93e157d6d0
    [166164.933240] R10: 0000000000000000 R11: ffffffffc0a40188 R12: 0000000000000003
    [166164.933241] R13: ffff8a9402200e80 R14: ffff8a90001fe900 R15: 0000000000000000
    [166164.933244] FS:  00007f7fb041eb00(0000) GS:ffff8a9411500000(0000)
    knlGS:0000000000000000
    [166164.933245] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [166164.933246] CR2: 0000000000000018 CR3: 00000000352c2003 CR4: 00000000003606e0
    [166164.933247] Call Trace:
    [166164.933264]  auxdev_open+0x1b/0x40 [drm_kms_helper]
    [166164.933278]  chrdev_open+0xa7/0x1c0
    [166164.933282]  ? cdev_put.part.0+0x20/0x20
    [166164.933287]  do_dentry_open+0x161/0x3c0
    [166164.933291]  vfs_open+0x2d/0x30
    [166164.933297]  path_openat+0xb27/0x10e0
    [166164.933306]  ? atime_needs_update+0x73/0xd0
    [166164.933309]  do_filp_open+0x91/0x100
    [166164.933313]  ? __alloc_fd+0xb2/0x150
    [166164.933316]  do_sys_openat2+0x210/0x2d0
    [166164.933318]  do_sys_open+0x46/0x80
    [166164.933320]  __x64_sys_openat+0x20/0x30
    [166164.933328]  do_syscall_64+0x52/0xc0
    [166164.933336]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    (gdb) disassemble drm_dp_aux_dev_get_by_minor+0x29
    Dump of assembler code for function drm_dp_aux_dev_get_by_minor:
       0x0000000000017b10 <+0>:     callq  0x17b15 <drm_dp_aux_dev_get_by_minor+5>
       0x0000000000017b15 <+5>:     push   %rbp
       0x0000000000017b16 <+6>:     mov    %rsp,%rbp
       0x0000000000017b19 <+9>:     push   %r12
       0x0000000000017b1b <+11>:    mov    %edi,%r12d
       0x0000000000017b1e <+14>:    mov    $0x0,%rdi
       0x0000000000017b25 <+21>:    callq  0x17b2a <drm_dp_aux_dev_get_by_minor+26>
       0x0000000000017b2a <+26>:    mov    %r12d,%esi
       0x0000000000017b2d <+29>:    mov    $0x0,%rdi
       0x0000000000017b34 <+36>:    callq  0x17b39 <drm_dp_aux_dev_get_by_minor+41>
       0x0000000000017b39 <+41>:    mov    0x18(%rax),%edx <=========
       0x0000000000017b3c <+44>:    mov    %rax,%r12
       0x0000000000017b3f <+47>:    lea    0x18(%rax),%rdi
       0x0000000000017b43 <+51>:    test   %edx,%edx
       0x0000000000017b45 <+53>:    je     0x17b7a <drm_dp_aux_dev_get_by_minor+106>
       0x0000000000017b47 <+55>:    lea    0x1(%rdx),%ecx
       0x0000000000017b4a <+58>:    mov    %edx,%eax
       0x0000000000017b4c <+60>:    lock cmpxchg %ecx,(%rdi)
       0x0000000000017b50 <+64>:    jne    0x17b76 <drm_dp_aux_dev_get_by_minor+102>
       0x0000000000017b52 <+66>:    test   %edx,%edx
       0x0000000000017b54 <+68>:    js     0x17b6d <drm_dp_aux_dev_get_by_minor+93>
       0x0000000000017b56 <+70>:    test   %ecx,%ecx
       0x0000000000017b58 <+72>:    js     0x17b6d <drm_dp_aux_dev_get_by_minor+93>
       0x0000000000017b5a <+74>:    mov    $0x0,%rdi
       0x0000000000017b61 <+81>:    callq  0x17b66 <drm_dp_aux_dev_get_by_minor+86>
       0x0000000000017b66 <+86>:    mov    %r12,%rax
       0x0000000000017b69 <+89>:    pop    %r12
       0x0000000000017b6b <+91>:    pop    %rbp
       0x0000000000017b6c <+92>:    retq
       0x0000000000017b6d <+93>:    xor    %esi,%esi
       0x0000000000017b6f <+95>:    callq  0x17b74 <drm_dp_aux_dev_get_by_minor+100>
       0x0000000000017b74 <+100>:   jmp    0x17b5a <drm_dp_aux_dev_get_by_minor+74>
       0x0000000000017b76 <+102>:   mov    %eax,%edx
       0x0000000000017b78 <+104>:   jmp    0x17b43 <drm_dp_aux_dev_get_by_minor+51>
       0x0000000000017b7a <+106>:   xor    %r12d,%r12d
       0x0000000000017b7d <+109>:   jmp    0x17b5a <drm_dp_aux_dev_get_by_minor+74>
    End of assembler dump.
    
    (gdb) list *drm_dp_aux_dev_get_by_minor+0x29
    0x17b39 is in drm_dp_aux_dev_get_by_minor (drivers/gpu/drm/drm_dp_aux_dev.c:65).
    60      static struct drm_dp_aux_dev *drm_dp_aux_dev_get_by_minor(unsigned index)
    61      {
    62              struct drm_dp_aux_dev *aux_dev = NULL;
    63
    64              mutex_lock(&aux_idr_mutex);
    65              aux_dev = idr_find(&aux_idr, index);
    66              if (!kref_get_unless_zero(&aux_dev->refcount))
    67                      aux_dev = NULL;
    68              mutex_unlock(&aux_idr_mutex);
    69
    (gdb) p/x &((struct drm_dp_aux_dev *)(0x0))->refcount
    $8 = 0x18
    
    Looking at the caller, checks on the minor are pushed down to
    drm_dp_aux_dev_get_by_minor()
    
    static int auxdev_open(struct inode *inode, struct file *file)
    {
        unsigned int minor = iminor(inode);
        struct drm_dp_aux_dev *aux_dev;
    
        aux_dev = drm_dp_aux_dev_get_by_minor(minor); <====
        if (!aux_dev)
            return -ENODEV;
    
        file->private_data = aux_dev;
        return 0;
    }
    
    Fixes: e94cb37b34eb ("drm/dp: Add a drm_aux-dev module for reading/writing dpcd registers.")
    Cc: <stable@vger.kernel.org> # v4.6+
    Signed-off-by: Zwane Mwaikambo <zwane@yosper.io>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    [added Cc to stable]
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/alpine.DEB.2.21.2010122231070.38717@montezuma.home
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23ab19bc327f519c162c73e89579f27e78b48eb1
Author: Dave Kleikamp <dave.kleikamp@oracle.com>
Date:   Fri Nov 13 14:58:46 2020 -0600

    jfs: Fix array index bounds check in dbAdjTree
    
    commit c61b3e4839007668360ed8b87d7da96d2e59fc6c upstream.
    
    Bounds checking tools can flag a bug in dbAdjTree() for an array index
    out of bounds in dmt_stree. Since dmt_stree can refer to the stree in
    both structures dmaptree and dmapctl, use the larger array to eliminate
    the false positive.
    
    Signed-off-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Reported-by: butt3rflyh4ck <butterflyhuangxx@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1912615a74a3a8c317a8d6b6528409450679f729
Author: Zhe Li <lizhe67@huawei.com>
Date:   Fri May 29 11:37:11 2020 +0800

    jffs2: Fix GC exit abnormally
    
    commit 9afc9a8a4909fece0e911e72b1060614ba2f7969 upstream.
    
    The log of this problem is:
    jffs2: Error garbage collecting node at 0x***!
    jffs2: No space for garbage collection. Aborting GC thread
    
    This is because GC believe that it do nothing, so it abort.
    
    After going over the image of jffs2, I find a scene that
    can trigger this problem stably.
    The scene is: there is a normal dirent node at summary-area,
    but abnormal at corresponding not-summary-area with error
    name_crc.
    
    The reason that GC exit abnormally is because it find that
    abnormal dirent node to GC, but when it goes to function
    jffs2_add_fd_to_list, it cannot meet the condition listed
    below:
    
    if ((*prev)->nhash == new->nhash && !strcmp((*prev)->name, new->name))
    
    So no node is marked obsolete, statistical information of
    erase_block do not change, which cause GC exit abnormally.
    
    The root cause of this problem is: we do not check the
    name_crc of the abnormal dirent node with summary is enabled.
    
    Noticed that in function jffs2_scan_dirent_node, we use
    function jffs2_scan_dirty_space to deal with the dirent
    node with error name_crc. So this patch add a checking
    code in function read_direntry to ensure the correctness
    of dirent node. If checked failed, the dirent node will
    be marked obsolete so GC will pass this node and this
    problem will be fixed.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Zhe Li <lizhe67@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4e98be73fcd9aeb46b0a28d66a5ac70e57ef1cc
Author: Luis Henriques <lhenriques@suse.de>
Date:   Thu Nov 12 10:45:12 2020 +0000

    ceph: fix race in concurrent __ceph_remove_cap invocations
    
    commit e5cafce3ad0f8652d6849314d951459c2bff7233 upstream.
    
    A NULL pointer dereference may occur in __ceph_remove_cap with some of the
    callbacks used in ceph_iterate_session_caps, namely trim_caps_cb and
    remove_session_caps_cb. Those callers hold the session->s_mutex, so they
    are prevented from concurrent execution, but ceph_evict_inode does not.
    
    Since the callers of this function hold the i_ceph_lock, the fix is simply
    a matter of returning immediately if caps->ci is NULL.
    
    Cc: stable@vger.kernel.org
    URL: https://tracker.ceph.com/issues/43272
    Suggested-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Luis Henriques <lhenriques@suse.de>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed9f5dba39ac9ef91829f74e29fd8705169b3586
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Thu Nov 26 11:34:56 2020 +0100

    ima: Don't modify file descriptor mode on the fly
    
    commit 207cdd565dfc95a0a5185263a567817b7ebf5467 upstream.
    
    Commit a408e4a86b36b ("ima: open a new file instance if no read
    permissions") already introduced a second open to measure a file when the
    original file descriptor does not allow it. However, it didn't remove the
    existing method of changing the mode of the original file descriptor, which
    is still necessary if the current process does not have enough privileges
    to open a new one.
    
    Changing the mode isn't really an option, as the filesystem might need to
    do preliminary steps to make the read possible. Thus, this patch removes
    the code and keeps the second open as the only option to measure a file
    when it is unreadable with the original file descriptor.
    
    Cc: <stable@vger.kernel.org> # 4.20.x: 0014cc04e8ec0 ima: Set file->f_mode
    Fixes: 2fe5d6def1672 ("ima: integrity appraisal extension")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edd00bacf346b96f291802ec8fd435c3830edb3c
Author: David Hildenbrand <david@redhat.com>
Date:   Wed Nov 11 15:53:15 2020 +0100

    powerpc/powernv/memtrace: Don't leak kernel memory to user space
    
    commit c74cf7a3d59a21b290fe0468f5b470d0b8ee37df upstream.
    
    We currently leak kernel memory to user space, because memory
    offlining doesn't do any implicit clearing of memory and we are
    missing explicit clearing of memory.
    
    Let's keep it simple and clear pages before removing the linear
    mapping.
    
    Reproduced in QEMU/TCG with 10 GiB of main memory:
      [root@localhost ~]# dd obs=9G if=/dev/urandom of=/dev/null
      [... wait until "free -m" used counter no longer changes and cancel]
      19665802+0 records in
      1+0 records out
      9663676416 bytes (9.7 GB, 9.0 GiB) copied, 135.548 s, 71.3 MB/s
      [root@localhost ~]# cat /sys/devices/system/memory/block_size_bytes
      40000000
      [root@localhost ~]# echo 0x40000000 > /sys/kernel/debug/powerpc/memtrace/enable
      [  402.978663][ T1086] page:000000001bc4bc74 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x24900
      [  402.980063][ T1086] flags: 0x7ffff000001000(reserved)
      [  402.980415][ T1086] raw: 007ffff000001000 c00c000000924008 c00c000000924008 0000000000000000
      [  402.980627][ T1086] raw: 0000000000000000 0000000000000000 00000001ffffffff 0000000000000000
      [  402.980845][ T1086] page dumped because: unmovable page
      [  402.989608][ T1086] Offlined Pages 16384
      [  403.324155][ T1086] memtrace: Allocated trace memory on node 0 at 0x0000000200000000
    
    Before this patch:
      [root@localhost ~]# hexdump -C /sys/kernel/debug/powerpc/memtrace/00000000/trace  | head
      00000000  c8 25 72 51 4d 26 36 c5  5c c2 56 15 d5 1a cd 10  |.%rQM&6.\.V.....|
      00000010  19 b9 50 b2 cb e3 60 b8  ec 0a f3 ec 4b 3c 39 f0  |..P...`.....K<9.|$
      00000020  4e 5a 4c cf bd 26 19 ff  37 79 13 67 24 b7 b8 57  |NZL..&..7y.g$..W|$
      00000030  98 3e f5 be 6f 14 6a bd  a4 52 bc 6e e9 e0 c1 5d  |.>..o.j..R.n...]|$
      00000040  76 b3 ae b5 88 d7 da e3  64 23 85 2c 10 88 07 b6  |v.......d#.,....|$
      00000050  9a d8 91 de f7 50 27 69  2e 64 9c 6f d3 19 45 79  |.....P'i.d.o..Ey|$
      00000060  6a 6f 8a 61 71 19 1f c7  f1 df 28 26 ca 0f 84 55  |jo.aq.....(&...U|$
      00000070  01 3f be e4 e2 e1 da ff  7b 8c 8e 32 37 b4 24 53  |.?......{..27.$S|$
      00000080  1b 70 30 45 56 e6 8c c4  0e b5 4c fb 9f dd 88 06  |.p0EV.....L.....|$
      00000090  ef c4 18 79 f1 60 b1 5c  79 59 4d f4 36 d7 4a 5c  |...y.`.\yYM.6.J\|$
    
    After this patch:
      [root@localhost ~]# hexdump -C /sys/kernel/debug/powerpc/memtrace/00000000/trace  | head
      00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
      *
      40000000
    
    Fixes: 9d5171a8f248 ("powerpc/powernv: Enable removal of memory for in memory tracing")
    Cc: stable@vger.kernel.org # v4.14+
    Reported-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201111145322.15793-2-david@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cd25fbf5248fe45a4da8d9f06d681e9f696272d
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Dec 4 10:35:38 2020 +0000

    powerpc/xmon: Change printk() to pr_cont()
    
    commit 7c6c86b36a36dd4a13d30bba07718e767aa2e7a1 upstream.
    
    Since some time now, printk() adds carriage return, leading to
    unusable xmon output if there is no udbg backend available:
    
      [   54.288722] sysrq: Entering xmon
      [   54.292209] Vector: 0  at [cace3d2c]
      [   54.292274]     pc:
      [   54.292331] c0023650
      [   54.292468] : xmon+0x28/0x58
      [   54.292519]
      [   54.292574]     lr:
      [   54.292630] c0023724
      [   54.292749] : sysrq_handle_xmon+0xa4/0xfc
      [   54.292801]
      [   54.292867]     sp: cace3de8
      [   54.292931]    msr: 9032
      [   54.292999]   current = 0xc28d0000
      [   54.293072]     pid   = 377, comm = sh
      [   54.293157] Linux version 5.10.0-rc6-s3k-dev-01364-gedf13f0ccd76-dirty (root@po17688vm.idsi0.si.c-s.fr) (powerpc64-linux-gcc (GCC) 10.1.0, GNU ld (GNU Binutils) 2.34) #4211 PREEMPT Fri Dec 4 09:32:11 UTC 2020
      [   54.293287] enter ? for help
      [   54.293470] [cace3de8]
      [   54.293532] c0023724
      [   54.293654]  sysrq_handle_xmon+0xa4/0xfc
      [   54.293711]  (unreliable)
      ...
      [   54.296002]
      [   54.296159] --- Exception: c01 (System Call) at
      [   54.296217] 0fd4e784
      [   54.296303]
      [   54.296375] SP (7fca6ff0) is in userspace
      [   54.296431] mon>
      [   54.296484]  <no input ...>
    
    Use pr_cont() instead.
    
    Fixes: 4bcc595ccd80 ("printk: reinstate KERN_CONT for printing continuation lines")
    Cc: stable@vger.kernel.org # v4.9+
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    [mpe: Mention that it only happens when udbg is not available]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/c8a6ec704416ecd5ff2bd26213c9bc026bdd19de.1607077340.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79cc9b49d678b3dae11330c9201816a7d004f058
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Tue Dec 8 13:54:34 2020 -0600

    powerpc/rtas: Fix typo of ibm,open-errinjct in RTAS filter
    
    commit f10881a46f8914428110d110140a455c66bdf27b upstream.
    
    Commit bd59380c5ba4 ("powerpc/rtas: Restrict RTAS requests from userspace")
    introduced the following error when invoking the errinjct userspace
    tool:
    
      [root@ltcalpine2-lp5 librtas]# errinjct open
      [327884.071171] sys_rtas: RTAS call blocked - exploit attempt?
      [327884.071186] sys_rtas: token=0x26, nargs=0 (called by errinjct)
      errinjct: Could not open RTAS error injection facility
      errinjct: librtas: open: Unexpected I/O error
    
    The entry for ibm,open-errinjct in rtas_filter array has a typo where
    the "j" is omitted in the rtas call name. After fixing this typo the
    errinjct tool functions again as expected.
    
      [root@ltcalpine2-lp5 linux]# errinjct open
      RTAS error injection facility open, token = 1
    
    Fixes: bd59380c5ba4 ("powerpc/rtas: Restrict RTAS requests from userspace")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201208195434.8289-1-tyreld@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee325bab074bb63d773dbcfb96ed7aca8c09b6bb
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Thu Dec 3 10:19:49 2020 +0100

    ARM: dts: at91: sama5d2: fix CAN message ram offset and size
    
    commit 85b8350ae99d1300eb6dc072459246c2649a8e50 upstream.
    
    CAN0 and CAN1 instances share the same message ram configured
    at 0x210000 on sama5d2 Linux systems.
    According to current configuration of CAN0, we need 0x1c00 bytes
    so that the CAN1 don't overlap its message ram:
    64 x RX FIFO0 elements => 64 x 72 bytes
    32 x TXE (TX Event FIFO) elements => 32 x 8 bytes
    32 x TXB (TX Buffer) elements => 32 x 72 bytes
    So a total of 7168 bytes (0x1C00).
    
    Fix offset to match this needed size.
    Make the CAN0 message ram ioremap match exactly this size so that is
    easily understandable.  Adapt CAN1 size accordingly.
    
    Fixes: bc6d5d7666b7 ("ARM: dts: at91: sama5d2: add m_can nodes")
    Reported-by: Dan Sneddon <dan.sneddon@microchip.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Tested-by: Cristian Birsan <cristian.birsan@microchip.com>
    Cc: stable@vger.kernel.org # v4.13+
    Link: https://lore.kernel.org/r/20201203091949.9015-1-nicolas.ferre@microchip.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d3bbf9f8f48868a2f22083f175996e55ec585fe
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Nov 10 11:10:15 2020 +0000

    KVM: arm64: Introduce handling of AArch32 TTBCR2 traps
    
    commit ca4e514774930f30b66375a974b5edcbebaf0e7e upstream.
    
    ARMv8.2 introduced TTBCR2, which shares TCR_EL1 with TTBCR.
    Gracefully handle traps to this register when HCR_EL2.TVM is set.
    
    Cc: stable@vger.kernel.org
    Reported-by: James Morse <james.morse@arm.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc7ed461fb277befb4b73b53332f2c64589ae2e1
Author: Jan Kara <jack@suse.cz>
Date:   Fri Nov 27 12:06:49 2020 +0100

    ext4: fix deadlock with fs freezing and EA inodes
    
    commit 46e294efc355c48d1dd4d58501aa56dac461792a upstream.
    
    Xattr code using inodes with large xattr data can end up dropping last
    inode reference (and thus deleting the inode) from places like
    ext4_xattr_set_entry(). That function is called with transaction started
    and so ext4_evict_inode() can deadlock against fs freezing like:
    
    CPU1                                    CPU2
    
    removexattr()                           freeze_super()
      vfs_removexattr()
        ext4_xattr_set()
          handle = ext4_journal_start()
          ...
          ext4_xattr_set_entry()
            iput(old_ea_inode)
              ext4_evict_inode(old_ea_inode)
                                              sb->s_writers.frozen = SB_FREEZE_FS;
                                              sb_wait_write(sb, SB_FREEZE_FS);
                                              ext4_freeze()
                                                jbd2_journal_lock_updates()
                                                  -> blocks waiting for all
                                                     handles to stop
                sb_start_intwrite()
                  -> blocks as sb is already in SB_FREEZE_FS state
    
    Generally it is advisable to delete inodes from a separate transaction
    as it can consume quite some credits however in this case it would be
    quite clumsy and furthermore the credits for inode deletion are quite
    limited and already accounted for. So just tweak ext4_evict_inode() to
    avoid freeze protection if we have transaction already started and thus
    it is not really needed anyway.
    
    Cc: stable@vger.kernel.org
    Fixes: dec214d00e0d ("ext4: xattr inode deduplication")
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20201127110649.24730-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 927277a16b18fc12bbf762b079ee6283512b3d70
Author: Chunguang Xu <brookxu@tencent.com>
Date:   Sat Nov 7 23:58:18 2020 +0800

    ext4: fix a memory leak of ext4_free_data
    
    commit cca415537244f6102cbb09b5b90db6ae2c953bdd upstream.
    
    When freeing metadata, we will create an ext4_free_data and
    insert it into the pending free list.  After the current
    transaction is committed, the object will be freed.
    
    ext4_mb_free_metadata() will check whether the area to be freed
    overlaps with the pending free list. If true, return directly. At this
    time, ext4_free_data is leaked.  Fortunately, the probability of this
    problem is small, since it only occurs if the file system is corrupted
    such that a block is claimed by more one inode and those inodes are
    deleted within a single jbd2 transaction.
    
    Signed-off-by: Chunguang Xu <brookxu@tencent.com>
    Link: https://lore.kernel.org/r/1604764698-4269-8-git-send-email-brookxu@tencent.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a54ffe8742dfcdb6815b70b5578f5009b6a8e186
Author: Pavel Machek <pavel@denx.de>
Date:   Mon Aug 3 11:35:06 2020 +0200

    btrfs: fix return value mixup in btrfs_get_extent
    
    commit 881a3a11c2b858fe9b69ef79ac5ee9978a266dc9 upstream
    
    btrfs_get_extent() sets variable ret, but out: error path expect error
    to be in variable err so the error code is lost.
    
    Fixes: 6bf9e4bd6a27 ("btrfs: inode: Verify inode mode to avoid NULL pointer dereference")
    CC: stable@vger.kernel.org # 5.4+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Pavel Machek (CIP) <pavel@denx.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f4d044dd1c6cd0152e509eafb2ff66dfd338419
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 18 13:08:52 2019 +0100

    Btrfs: fix selftests failure due to uninitialized i_mode in test inodes
    
    commit 9f7fec0ba89108b9385f1b9fb167861224912a4a upstream
    
    Some of the self tests create a test inode, setup some extents and then do
    calls to btrfs_get_extent() to test that the corresponding extent maps
    exist and are correct. However btrfs_get_extent(), since the 5.2 merge
    window, now errors out when it finds a regular or prealloc extent for an
    inode that does not correspond to a regular file (its ->i_mode is not
    S_IFREG). This causes the self tests to fail sometimes, specially when
    KASAN, slub_debug and page poisoning are enabled:
    
      $ modprobe btrfs
      modprobe: ERROR: could not insert 'btrfs': Invalid argument
    
      $ dmesg
      [ 9414.691648] Btrfs loaded, crc32c=crc32c-intel, debug=on, assert=on, integrity-checker=on, ref-verify=on
      [ 9414.692655] BTRFS: selftest: sectorsize: 4096  nodesize: 4096
      [ 9414.692658] BTRFS: selftest: running btrfs free space cache tests
      [ 9414.692918] BTRFS: selftest: running extent only tests
      [ 9414.693061] BTRFS: selftest: running bitmap only tests
      [ 9414.693366] BTRFS: selftest: running bitmap and extent tests
      [ 9414.696455] BTRFS: selftest: running space stealing from bitmap to extent tests
      [ 9414.697131] BTRFS: selftest: running extent buffer operation tests
      [ 9414.697133] BTRFS: selftest: running btrfs_split_item tests
      [ 9414.697564] BTRFS: selftest: running extent I/O tests
      [ 9414.697583] BTRFS: selftest: running find delalloc tests
      [ 9415.081125] BTRFS: selftest: running find_first_clear_extent_bit test
      [ 9415.081278] BTRFS: selftest: running extent buffer bitmap tests
      [ 9415.124192] BTRFS: selftest: running inode tests
      [ 9415.124195] BTRFS: selftest: running btrfs_get_extent tests
      [ 9415.127909] BTRFS: selftest: running hole first btrfs_get_extent test
      [ 9415.128343] BTRFS critical (device (efault)): regular/prealloc extent found for non-regular inode 256
      [ 9415.131428] BTRFS: selftest: fs/btrfs/tests/inode-tests.c:904 expected a real extent, got 0
    
    This happens because the test inodes are created without ever initializing
    the i_mode field of the inode, and neither VFS's new_inode() nor the btrfs
    callback btrfs_alloc_inode() initialize the i_mode. Initialization of the
    i_mode is done through the various callbacks used by the VFS to create
    new inodes (regular files, directories, symlinks, tmpfiles, etc), which
    all call btrfs_new_inode() which in turn calls inode_init_owner(), which
    sets the inode's i_mode. Since the tests only uses new_inode() to create
    the test inodes, the i_mode was never initialized.
    
    This always happens on a VM I used with kasan, slub_debug and many other
    debug facilities enabled. It also happened to someone who reported this
    on bugzilla (on a 5.3-rc).
    
    Fix this by setting i_mode to S_IFREG at btrfs_new_test_inode().
    
    Fixes: 6bf9e4bd6a2778 ("btrfs: inode: Verify inode mode to avoid NULL pointer dereference")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=204397
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a94250ae085ca30faa4a5cc1d4a348315b486ca
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 25 18:45:52 2020 +0100

    USB: serial: keyspan_pda: fix write unthrottling
    
    commit 320f9028c7873c3c7710e8e93e5c979f4c857490 upstream.
    
    The driver did not update its view of the available device buffer space
    until write() was called in task context. This meant that write_room()
    would return 0 even after the device had sent a write-unthrottle
    notification, something which could lead to blocked writers not being
    woken up (e.g. when using OPOST).
    
    Note that we must also request an unthrottle notification is case a
    write() request fills the device buffer exactly.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b0f44fde8a25dea4bc1007b377b501edaf268ef
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 25 18:45:51 2020 +0100

    USB: serial: keyspan_pda: fix tx-unthrottle use-after-free
    
    commit 49fbb8e37a961396a5b6c82937c70df91de45e9d upstream.
    
    The driver's transmit-unthrottle work was never flushed on disconnect,
    something which could lead to the driver port data being freed while the
    unthrottle work is still scheduled.
    
    Fix this by cancelling the unthrottle work when shutting down the port.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90831f9fa170eaaa6ebcfbcd1e1d0a2cedd7eb2a
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 25 18:45:50 2020 +0100

    USB: serial: keyspan_pda: fix write-wakeup use-after-free
    
    commit 37faf50615412947868c49aee62f68233307f4e4 upstream.
    
    The driver's deferred write wakeup was never flushed on disconnect,
    something which could lead to the driver port data being freed while the
    wakeup work is still scheduled.
    
    Fix this by using the usb-serial write wakeup which gets cancelled
    properly on disconnect.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 987a189e62c3b73f73c2f7639fae9e09eabfed1b
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 25 18:45:49 2020 +0100

    USB: serial: keyspan_pda: fix stalled writes
    
    commit c01d2c58698f710c9e13ba3e2d296328606f74fd upstream.
    
    Make sure to clear the write-busy flag also in case no new data was
    submitted due to lack of device buffer space so that writing is
    resumed once space again becomes available.
    
    Fixes: 507ca9bc0476 ("[PATCH] USB: add ability for usb-serial drivers to determine if their write urb is currently being used.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c1aa01aa3aa0e7448b7a4ba3cc358a54d794e459
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 25 18:45:48 2020 +0100

    USB: serial: keyspan_pda: fix write deadlock
    
    commit 7353cad7ee4deaefc16e94727e69285563e219f6 upstream.
    
    The write() callback can be called in interrupt context (e.g. when used
    as a console) so interrupts must be disabled while holding the port lock
    to prevent a possible deadlock.
    
    Fixes: e81ee637e4ae ("usb-serial: possible irq lock inversion (PPP vs. usb/serial)")
    Fixes: 507ca9bc0476 ("[PATCH] USB: add ability for usb-serial drivers to determine if their write urb is currently being used.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.19
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 981022c4dc13df87773e835464e15c52c5f9dbe3
Author: Johan Hovold <johan@kernel.org>
Date:   Sun Oct 25 18:45:47 2020 +0100

    USB: serial: keyspan_pda: fix dropped unthrottle interrupts
    
    commit 696c541c8c6cfa05d65aa24ae2b9e720fc01766e upstream.
    
    Commit c528fcb116e6 ("USB: serial: keyspan_pda: fix receive sanity
    checks") broke write-unthrottle handling by dropping well-formed
    unthrottle-interrupt packets which are precisely two bytes long. This
    could lead to blocked writers not being woken up when buffer space again
    becomes available.
    
    Instead, stop unconditionally printing the third byte which is
    (presumably) only valid on modem-line changes.
    
    Fixes: c528fcb116e6 ("USB: serial: keyspan_pda: fix receive sanity checks")
    Cc: stable <stable@vger.kernel.org>     # 4.11
    Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b49d97c70830e47b6e4dbad922d1aea93a3e2e8a
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Nov 4 17:47:27 2020 +0100

    USB: serial: mos7720: fix parallel-port state restore
    
    commit 975323ab8f116667676c30ca3502a6757bd89e8d upstream.
    
    The parallel-port restore operations is called when a driver claims the
    port and is supposed to restore the provided state (e.g. saved when
    releasing the port).
    
    Fixes: b69578df7e98 ("USB: usbserial: mos7720: add support for parallel port on moschip 7715")
    Cc: stable <stable@vger.kernel.org>     # 2.6.35
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9db749c9a032ea588f7bae5675b14813892edf14
Author: Borislav Petkov <bp@suse.de>
Date:   Sun Nov 22 15:57:21 2020 +0100

    EDAC/amd64: Fix PCI component registration
    
    commit 706657b1febf446a9ba37dc51b89f46604f57ee9 upstream.
    
    In order to setup its PCI component, the driver needs any node private
    instance in order to get a reference to the PCI device and hand that
    into edac_pci_create_generic_ctl(). For convenience, it uses the 0th
    memory controller descriptor under the assumption that if any, the 0th
    will be always present.
    
    However, this assumption goes wrong when the 0th node doesn't have
    memory and the driver doesn't initialize an instance for it:
    
      EDAC amd64: F17h detected (node 0).
      ...
      EDAC amd64: Node 0: No DIMMs detected.
    
    But looking up node instances is not really needed - all one needs is
    the pointer to the proper device which gets discovered during instance
    init.
    
    So stash that pointer into a variable and use it when setting up the
    EDAC PCI component.
    
    Clear that variable when the driver needs to unwind due to some
    instances failing init to avoid any registration imbalance.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20201122150815.13808-1-bp@alien8.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53fa6750d9625848ba81e7a6a1e095ec09c00b1f
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Nov 24 11:47:19 2020 +0100

    crypto: ecdh - avoid unaligned accesses in ecdh_set_secret()
    
    commit 17858b140bf49961b71d4e73f1c3ea9bc8e7dda0 upstream.
    
    ecdh_set_secret() casts a void* pointer to a const u64* in order to
    feed it into ecc_is_key_valid(). This is not generally permitted by
    the C standard, and leads to actual misalignment faults on ARMv6
    cores. In some cases, these are fixed up in software, but this still
    leads to performance hits that are entirely avoidable.
    
    So let's copy the key into the ctx buffer first, which we will do
    anyway in the common case, and which guarantees correct alignment.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5eb53d2402b82cd6e58519a2d1d92d00a6cf4d2c
Author: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Date:   Wed Nov 25 02:26:55 2020 -0500

    powerpc/perf: Exclude kernel samples while counting events in user space.
    
    commit aa8e21c053d72b6639ea5a7f1d3a1d0209534c94 upstream.
    
    Perf event attritube supports exclude_kernel flag to avoid
    sampling/profiling in supervisor state (kernel). Based on this event
    attr flag, Monitor Mode Control Register bit is set to freeze on
    supervisor state. But sometimes (due to hardware limitation), Sampled
    Instruction Address Register (SIAR) locks on to kernel address even
    when freeze on supervisor is set. Patch here adds a check to drop
    those samples.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1606289215-1433-1-git-send-email-atrajeev@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0031d34bc70f4b150e9a073c4162df470fb148bf
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Mon Dec 7 14:58:06 2020 +0000

    staging: comedi: mf6x4: Fix AI end-of-conversion detection
    
    commit 56c90457ebfe9422496aac6ef3d3f0f0ea8b2ec2 upstream.
    
    I have had reports from two different people that attempts to read the
    analog input channels of the MF624 board fail with an `ETIMEDOUT` error.
    
    After triggering the conversion, the code calls `comedi_timeout()` with
    `mf6x4_ai_eoc()` as the callback function to check if the conversion is
    complete.  The callback returns 0 if complete or `-EBUSY` if not yet
    complete.  `comedi_timeout()` returns `-ETIMEDOUT` if it has not
    completed within a timeout period which is propagated as an error to the
    user application.
    
    The existing code considers the conversion to be complete when the EOLC
    bit is high.  However, according to the user manuals for the MF624 and
    MF634 boards, this test is incorrect because EOLC is an active low
    signal that goes high when the conversion is triggered, and goes low
    when the conversion is complete.  Fix the problem by inverting the test
    of the EOLC bit state.
    
    Fixes: 04b565021a83 ("comedi: Humusoft MF634 and MF624 DAQ cards driver")
    Cc: <stable@vger.kernel.org> # v4.4+
    Cc: Rostislav Lisovy <lisovy@gmail.com>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20201207145806.4046-1-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15920c0f25d8bd9c3ae78edba2f70113dff17660
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Dec 17 16:59:07 2020 +0100

    s390/dasd: fix list corruption of lcu list
    
    commit 53a7f655834c7c335bf683f248208d4fbe4b47bc upstream.
    
    In dasd_alias_disconnect_device_from_lcu the device is removed from any
    list on the LCU. Afterwards the LCU is removed from the lcu list if it
    does not contain devices any longer.
    
    The lcu->lock protects the lcu from parallel updates. But to cancel all
    workers and wait for completion the lcu->lock has to be unlocked.
    
    If two devices are removed in parallel and both are removed from the LCU
    the first device that takes the lcu->lock again will delete the LCU because
    it is already empty but the second device also tries to free the LCU which
    leads to a list corruption of the lcu list.
    
    Fix by removing the device right before the lcu is checked without
    unlocking the lcu->lock in between.
    
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45ee0b01962e8ffbb0b58c9e0d571ae6925b83ff
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Dec 17 16:59:06 2020 +0100

    s390/dasd: fix list corruption of pavgroup group list
    
    commit 0ede91f83aa335da1c3ec68eb0f9e228f269f6d8 upstream.
    
    dasd_alias_add_device() moves devices to the active_devices list in case
    of a scheduled LCU update regardless if they have previously been in a
    pavgroup or not.
    
    Example: device A and B are in the same pavgroup.
    
    Device A has already been in a pavgroup and the private->pavgroup pointer
    is set and points to a valid pavgroup. While going through dasd_add_device
    it is moved from the pavgroup to the active_devices list.
    
    In parallel device B might be removed from the same pavgroup in
    remove_device_from_lcu() which in turn checks if the group is empty
    and deletes it accordingly because device A has already been removed from
    there.
    
    When now device A enters remove_device_from_lcu() it is tried to remove it
    from the pavgroup again because the pavgroup pointer is still set and again
    the empty group will be cleaned up which leads to a list corruption.
    
    Fix by setting private->pavgroup to NULL in dasd_add_device.
    
    If the device has been the last device on the pavgroup an empty pavgroup
    remains but this will be cleaned up by the scheduled lcu_update which
    iterates over all existing pavgroups.
    
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bba1d9883eb01e62d047d259080198ebacf7aa2
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Thu Dec 17 16:59:05 2020 +0100

    s390/dasd: prevent inconsistent LCU device data
    
    commit a29ea01653493b94ea12bb2b89d1564a265081b6 upstream.
    
    Prevent _lcu_update from adding a device to a pavgroup if the LCU still
    requires an update. The data is not reliable any longer and in parallel
    devices might have been moved on the lists already.
    This might lead to list corruptions or invalid PAV grouping.
    Only add devices to a pavgroup if the LCU is up to date. Additional steps
    are taken by the scheduled lcu update.
    
    Fixes: 8e09f21574ea ("[S390] dasd: add hyper PAV support to DASD device driver, part 1")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c01355fc8bf15bd6ae81ab3b3f129e24ddf7b305
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Tue Dec 8 07:35:21 2020 +0100

    s390/smp: perform initial CPU reset also for SMT siblings
    
    commit b5e438ebd7e808d1d2435159ac4742e01a94b8da upstream.
    
    Not resetting the SMT siblings might leave them in unpredictable
    state. One of the observed problems was that the CPU timer wasn't
    reset and therefore large system time values where accounted during
    CPU bringup.
    
    Cc: <stable@kernel.org> # 4.0
    Fixes: 10ad34bc76dfb ("s390: add SMT support")
    Reviewed-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a59f91b5e4494d43a417f8e76f426bb14815b7c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 18 15:58:58 2020 +0100

    ALSA: usb-audio: Disable sample read check if firmware doesn't give back
    
    commit 9df28edce7c6ab38050235f6f8b43dd7ccd01b6d upstream.
    
    Some buggy firmware don't give the current sample rate but leaves
    zero.  Handle this case more gracefully without warning but just skip
    the current rate verification from the next time.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201218145858.2357-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f47fa08b991bf5670b199d0119c445fcd88b202
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 18 17:17:30 2020 +0100

    ALSA: pcm: oss: Fix a few more UBSAN fixes
    
    commit 11cb881bf075cea41092a20236ba708b18e1dbb2 upstream.
    
    There are a few places that call round{up|down}_pow_of_two() with the
    value zero, and this causes undefined behavior warnings.  Avoid
    calling those macros if such a nonsense value is passed; it's a minor
    optimization as well, as we handle it as either an error or a value to
    be skipped, instead.
    
    Reported-by: syzbot+33ef0b6639a8d2d42b4c@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201218161730.26596-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e2c953994a850451281d433cf3ac4a37d94d07c
Author: Chris Chiu <chiu@endlessos.org>
Date:   Wed Dec 9 12:57:30 2020 +0800

    ALSA: hda/realtek - Enable headset mic of ASUS Q524UQK with ALC255
    
    commit 7e413528474d5895e3e315c019fb0c43522eb6d9 upstream.
    
    The ASUS laptop Q524UQK with ALC255 codec can't detect the headset
    microphone until ALC255_FIXUP_ASUS_MIC_NO_PRESENCE quirk applied.
    
    Signed-off-by: Chris Chiu <chiu@endlessos.org>
    Signed-off-by: Jian-Hong Pan <jhp@endlessos.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201209045730.9972-1-chiu@endlessos.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b63a6807098eb10e7c79608becb2d79b2147e21
Author: Hui Wang <hui.wang@canonical.com>
Date:   Fri Dec 11 10:18:14 2020 +0800

    ACPI: PNP: compare the string length in the matching_id()
    
    commit b08221c40febcbda9309dd70c61cf1b0ebb0e351 upstream.
    
    Recently we met a touchscreen problem on some Thinkpad machines, the
    touchscreen driver (i2c-hid) is not loaded and the touchscreen can't
    work.
    
    An i2c ACPI device with the name WACF2200 is defined in the BIOS, with
    the current rule in matching_id(), this device will be regarded as
    a PNP device since there is WACFXXX in the acpi_pnp_device_ids[] and
    this PNP device is attached to the acpi device as the 1st
    physical_node, this will make the i2c bus match fail when i2c bus
    calls acpi_companion_match() to match the acpi_id_table in the i2c-hid
    driver.
    
    WACF2200 is an i2c device instead of a PNP device, after adding the
    string length comparing, the matching_id() will return false when
    matching WACF2200 and WACFXXX, and it is reasonable to compare the
    string length when matching two IDs.
    
    Suggested-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b02d88a76e777a6e36a68af341ddb8b2c7a7a47
Author: Daniel Scally <djrscally@gmail.com>
Date:   Sat Dec 5 17:04:03 2020 +0000

    Revert "ACPI / resources: Use AE_CTRL_TERMINATE to terminate resources walks"
    
    commit 12fc4dad94dfac25599f31257aac181c691ca96f upstream.
    
    This reverts commit 8a66790b7850a6669129af078768a1d42076a0ef.
    
    Switching this function to AE_CTRL_TERMINATE broke the documented
    behaviour of acpi_dev_get_resources() - AE_CTRL_TERMINATE does not, in
    fact, terminate the resource walk because acpi_walk_resource_buffer()
    ignores it (specifically converting it to AE_OK), referring to that
    value as "an OK termination by the user function". This means that
    acpi_dev_get_resources() does not abort processing when the preproc
    function returns a negative value.
    
    Signed-off-by: Daniel Scally <djrscally@gmail.com>
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bfdee9ae90323796da0285f32727f8e25c58a9f
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Tue Nov 24 20:44:00 2020 +0100

    PM: ACPI: PCI: Drop acpi_pm_set_bridge_wakeup()
    
    commit 7482c5cb90e5a7f9e9e12dd154d405e0219656e3 upstream.
    
    The idea behind acpi_pm_set_bridge_wakeup() was to allow bridges to
    be reference counted for wakeup enabling, because they may be enabled
    to signal wakeup on behalf of their subordinate devices and that
    may happen for multiple times in a row, whereas for the other devices
    it only makes sense to enable wakeup signaling once.
    
    However, this becomes problematic if the bridge itself is suspended,
    because it is treated as a "regular" device in that case and the
    reference counting doesn't work.
    
    For instance, suppose that there are two devices below a bridge and
    they both can signal wakeup.  Every time one of them is suspended,
    wakeup signaling is enabled for the bridge, so when they both have
    been suspended, the bridge's wakeup reference counter value is 2.
    
    Say that the bridge is suspended subsequently and acpi_pci_wakeup()
    is called for it.  Because the bridge can signal wakeup, that
    function will invoke acpi_pm_set_device_wakeup() to configure it
    and __acpi_pm_set_device_wakeup() will be called with the last
    argument equal to 1.  This causes __acpi_device_wakeup_enable()
    invoked by it to omit the reference counting, because the reference
    counter of the target device (the bridge) is 2 at that time.
    
    Now say that the bridge resumes and one of the device below it
    resumes too, so the bridge's reference counter becomes 0 and
    wakeup signaling is disabled for it, but there is still the other
    suspended device which may need the bridge to signal wakeup on its
    behalf and that is not going to work.
    
    To address this scenario, use wakeup enable reference counting for
    all devices, not just for bridges, so drop the last argument from
    __acpi_device_wakeup_enable() and __acpi_pm_set_device_wakeup(),
    which causes acpi_pm_set_device_wakeup() and
    acpi_pm_set_bridge_wakeup() to become identical, so drop the latter
    and use the former instead of it everywhere.
    
    Fixes: 1ba51a7c1496 ("ACPI / PCI / PM: Rework acpi_pci_propagate_wakeup()")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: 4.14+ <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5823f42a40fc4981591dbb27d2c73c2c1cb1c453
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 14 13:37:46 2020 -0800

    Input: cyapa_gen6 - fix out-of-bounds stack access
    
    commit f051ae4f6c732c231046945b36234e977f8467c6 upstream.
    
    gcc -Warray-bounds warns about a serious bug in
    cyapa_pip_retrieve_data_structure:
    
    drivers/input/mouse/cyapa_gen6.c: In function 'cyapa_pip_retrieve_data_structure.constprop':
    include/linux/unaligned/access_ok.h:40:17: warning: array subscript -1 is outside array bounds of 'struct retrieve_data_struct_cmd[1]' [-Warray-bounds]
       40 |  *((__le16 *)p) = cpu_to_le16(val);
    drivers/input/mouse/cyapa_gen6.c:569:13: note: while referencing 'cmd'
      569 |  } __packed cmd;
          |             ^~~
    
    Apparently the '-2' was added to the pointer instead of the value,
    writing garbage into the stack next to this variable.
    
    Fixes: c2c06c41f700 ("Input: cyapa - add gen6 device module support")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Link: https://lore.kernel.org/r/20201026161332.3708389-1-arnd@kernel.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ee924088b3434308d279d5e27f5d61684b09d9b
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Dec 7 09:17:12 2020 +0100

    media: netup_unidvb: Don't leak SPI master in probe error path
    
    commit e297ddf296de35037fa97f4302782def196d350a upstream.
    
    If the call to spi_register_master() fails on probe of the NetUP
    Universal DVB driver, the spi_master struct is erroneously not freed.
    
    Likewise, if spi_new_device() fails, the spi_controller struct is
    not unregistered.  Plug the leaks.
    
    While at it, fix an ordering issue in netup_spi_release() wherein
    spi_unregister_master() is called after fiddling with the IRQ control
    register.  The correct order is to call spi_unregister_master() *before*
    this teardown step because bus accesses may still be ongoing until that
    function returns.
    
    Fixes: 52b1eaf4c59a ("[media] netup_unidvb: NetUP Universal DVB-S/S2/T/T2/C PCI-E card driver")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Cc: <stable@vger.kernel.org> # v4.3+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.3+
    Cc: Kozlov Sergey <serjk@netup.ru>
    Link: https://lore.kernel.org/r/c4c24f333fc7840f4a3db24789e6e10dd660bede.1607286887.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e8f85e5e7752c1c8ce6c65682fca12d63dddd6f
Author: Sean Young <sean@mess.org>
Date:   Mon Nov 9 23:16:52 2020 +0100

    media: sunxi-cir: ensure IR is handled when it is continuous
    
    commit 3f56df4c8ffeb120ed41906d3aae71799b7e726a upstream.
    
    If a user holds a button down on a remote, then no ir idle interrupt will
    be generated until the user releases the button, depending on how quickly
    the remote repeats. No IR is processed until that point, which means that
    holding down a button may not do anything.
    
    This also resolves an issue on a Cubieboard 1 where the IR receiver is
    picking up ambient infrared as IR and spews out endless
    "rc rc0: IR event FIFO is full!" messages unless you choose to live in
    the dark.
    
    Cc: stable@vger.kernel.org
    Tested-by: Hans Verkuil <hverkuil@xs4all.nl>
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Reported-by: Hans Verkuil <hverkuil@xs4all.nl>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 188b5f840262bad87f9b0fce3ffa438308efa07a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Dec 2 18:20:04 2020 +0100

    media: gspca: Fix memory leak in probe
    
    commit e469d0b09a19496e1972a20974bbf55b728151eb upstream.
    
    The gspca driver leaks memory when a probe fails.  gspca_dev_probe2()
    calls v4l2_device_register(), which takes a reference to the
    underlying device node (in this case, a USB interface).  But the
    failure pathway neglects to call v4l2_device_unregister(), the routine
    responsible for dropping this reference.  Consequently the memory for
    the USB interface and its device never gets released.
    
    This patch adds the missing function call.
    
    Reported-and-tested-by: syzbot+44e64397bd81d5e84cba@syzkaller.appspotmail.com
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 976ac568efad0229dd8fad8ce295092bfa96af92
Author: Simon Beginn <linux@simonmicro.de>
Date:   Fri Dec 11 16:17:32 2020 -0800

    Input: goodix - add upside-down quirk for Teclast X98 Pro tablet
    
    [ Upstream commit cffdd6d90482316e18d686060a4397902ea04bd2 ]
    
    The touchscreen on the Teclast x98 Pro is also mounted upside-down in
    relation to the display orientation.
    
    Signed-off-by: Simon Beginn <linux@simonmicro.de>
    Signed-off-by: Bastien Nocera <hadess@hadess.net>
    Link: https://lore.kernel.org/r/20201117004253.27A5A27EFD@localhost
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a77a0aaa20db9ae487ebf13b21b2edf194a95eb
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Dec 9 17:59:53 2020 -0800

    Input: cros_ec_keyb - send 'scancodes' in addition to key events
    
    [ Upstream commit 80db2a087f425b63f0163bc95217abd01c637cb5 ]
    
    To let userspace know what 'scancodes' should be used in EVIOCGKEYCODE
    and EVIOCSKEYCODE ioctls, we should send EV_MSC/MSC_SCAN events in
    addition to EV_KEY/KEY_* events. The driver already declared MSC_SCAN
    capability, so it is only matter of actually sending the events.
    
    Link: https://lore.kernel.org/r/X87aOaSptPTvZ3nZ@google.com
    Acked-by: Rajat Jain <rajatja@google.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62cbe84134d7b90a5805ec5d331c3ce88310cd33
Author: Serge Hallyn <shallyn@cisco.com>
Date:   Sun Nov 15 21:55:31 2020 -0600

    fix namespaced fscaps when !CONFIG_SECURITY
    
    [ Upstream commit ed9b25d1970a4787ac6a39c2091e63b127ecbfc1 ]
    
    Namespaced file capabilities were introduced in 8db6c34f1dbc .
    When userspace reads an xattr for a namespaced capability, a
    virtualized representation of it is returned if the caller is
    in a user namespace owned by the capability's owning rootid.
    The function which performs this virtualization was not hooked
    up if CONFIG_SECURITY=n.  Therefore in that case the original
    xattr was shown instead of the virtualized one.
    
    To test this using libcap-bin (*1),
    
    $ v=$(mktemp)
    $ unshare -Ur setcap cap_sys_admin-eip $v
    $ unshare -Ur setcap -v cap_sys_admin-eip $v
    /tmp/tmp.lSiIFRvt8Y: OK
    
    "setcap -v" verifies the values instead of setting them, and
    will check whether the rootid value is set.  Therefore, with
    this bug un-fixed, and with CONFIG_SECURITY=n, setcap -v will
    fail:
    
    $ v=$(mktemp)
    $ unshare -Ur setcap cap_sys_admin=eip $v
    $ unshare -Ur setcap -v cap_sys_admin=eip $v
    nsowner[got=1000, want=0],/tmp/tmp.HHDiOOl9fY differs in []
    
    Fix this bug by calling cap_inode_getsecurity() in
    security_inode_getsecurity() instead of returning
    -EOPNOTSUPP, when CONFIG_SECURITY=n.
    
    *1 - note, if libcap is too old for getcap to have the '-n'
    option, then use verify-caps instead.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=209689
    Cc: Hervé Guillemet <herve@guillemet.org>
    Acked-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Serge Hallyn <shallyn@cisco.com>
    Signed-off-by: Andrew G. Morgan <morgan@kernel.org>
    Signed-off-by: James Morris <jamorris@linux.microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0a839897e97c17d494bab19a7b11d3be6bf0823
Author: Sara Sharon <sara.sharon@intel.com>
Date:   Sun Nov 29 17:30:44 2020 +0200

    cfg80211: initialize rekey_data
    
    [ Upstream commit f495acd8851d7b345e5f0e521b2645b1e1f928a0 ]
    
    In case we have old supplicant, the akm field is uninitialized.
    
    Signed-off-by: Sara Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20201129172929.930f0ab7ebee.Ic546e384efab3f4a89f318eafddc3eb7d556aecb@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c909f53d1361a699209f7e2d5540ca49c641b3ec
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Wed Dec 2 21:38:17 2020 +0100

    clk: sunxi-ng: Make sure divider tables have sentinel
    
    [ Upstream commit 48f68de00c1405351fa0e7bc44bca067c49cd0a3 ]
    
    Two clock divider tables are missing sentinel at the end. Effect of that
    is that clock framework reads past the last entry. Fix that with adding
    sentinel at the end.
    
    Issue was discovered with KASan.
    
    Fixes: 0577e4853bfb ("clk: sunxi-ng: Add H3 clocks")
    Fixes: c6a0637460c2 ("clk: sunxi-ng: Add A64 clocks")
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Link: https://lore.kernel.org/r/20201202203817.438713-1-jernej.skrabec@siol.net
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c19af79fdd925120a8d749677bded368e60f0d1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 12 13:28:18 2020 +0100

    clk: s2mps11: Fix a resource leak in error handling paths in the probe function
    
    [ Upstream commit d2d94fc567624f96187e8b52083795620f93e69f ]
    
    Some resource should be released in the error handling path of the probe
    function, as already done in the remove function.
    
    The remove function was fixed in commit bf416bd45738 ("clk: s2mps11: Add
    missing of_node_put and of_clk_del_provider")
    
    Fixes: 7cc560dea415 ("clk: s2mps11: Add support for s2mps11")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201212122818.86195-1-christophe.jaillet@wanadoo.fr
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 537a786390d0a78c205ec42db1f3afd7f3767637
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 16 11:38:04 2020 +0300

    qlcnic: Fix error code in probe
    
    [ Upstream commit 0d52848632a357948028eab67ff9b7cc0c12a0fb ]
    
    Return -EINVAL if we can't find the correct device.  Currently it
    returns success.
    
    Fixes: 13159183ec7a ("qlcnic: 83xx base driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/X9nHbMqEyI/xPfGd@mwanda
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 093ad7e85e0bc3a4dc6618573046dfc8c0a7ec1d
Author: Zheng Zengkai <zhengzengkai@huawei.com>
Date:   Fri Jul 3 17:33:44 2020 +0800

    perf record: Fix memory leak when using '--user-regs=?' to list registers
    
    [ Upstream commit 2eb5dd418034ecea2f7031e3d33f2991a878b148 ]
    
    When using 'perf record's option '-I' or '--user-regs=' along with
    argument '?' to list available register names, memory of variable 'os'
    allocated by strdup() needs to be released before __parse_regs()
    returns, otherwise memory leak will occur.
    
    Fixes: bcc84ec65ad1 ("perf record: Add ability to name registers to record")
    Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Li Bin <huawei.libin@huawei.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lore.kernel.org/r/20200703093344.189450-1-zhengzengkai@huawei.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5855fd50ae4adda2e01fa390b10a4d3403835e1
Author: Lokesh Vutla <lokeshvutla@ti.com>
Date:   Fri Oct 30 19:11:35 2020 +0530

    pwm: lp3943: Dynamically allocate PWM chip base
    
    [ Upstream commit 1f0f1e80fdd3aa9631f6c22cda4f8550cfcfcc3e ]
    
    When there are other PWM controllers enabled along with pwm-lp3943,
    pwm-lp3942 is failing to probe with -EEXIST error. This is because
    other PWM controllers are probed first and assigned PWM base 0 and
    pwm-lp3943 is requesting for 0 again.
    
    In order to avoid this, assign the chip base with -1, so that it is
    dynamically allocated.
    
    Fixes: af66b3c0934e ("pwm: Add LP3943 PWM driver")
    Signed-off-by: Lokesh Vutla <lokeshvutla@ti.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-könig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2257113ac6e97efac686a3d4dbb64cd98b65050a
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Tue Oct 13 10:13:21 2020 +0200

    pwm: zx: Add missing cleanup in error path
    
    [ Upstream commit 269effd03f6142df4c74814cfdd5f0b041b30bf9 ]
    
    zx_pwm_probe() called clk_prepare_enable() before; this must be undone
    in the error path.
    
    Fixes: 4836193c435c ("pwm: Add ZTE ZX PWM device driver")
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Shawn Guo <shawn.guo@linaro.org>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e262f5b47d8ecf32f65d977b33e215943e23b1fb
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:16:23 2020 +0800

    clk: ti: Fix memleak in ti_fapll_synth_setup
    
    [ Upstream commit 8c6239f6e95f583bb763d0228e02d4dd0fb3d492 ]
    
    If clk_register fails, we should goto free branch
    before function returns to prevent memleak.
    
    Fixes: 163152cbbe321 ("clk: ti: Add support for FAPLL on dm816x")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201113131623.2098222-1-zhangqilong3@huawei.com
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5344c34572324c324c42ef5dac901002106394f
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 3 23:33:42 2020 +0100

    watchdog: coh901327: add COMMON_CLK dependency
    
    [ Upstream commit 36c47df85ee8e1f8a35366ac11324f8875de00eb ]
    
    clang produces a build failure in configurations without COMMON_CLK
    when a timeout calculation goes wrong:
    
    arm-linux-gnueabi-ld: drivers/watchdog/coh901327_wdt.o: in function `coh901327_enable':
    coh901327_wdt.c:(.text+0x50): undefined reference to `__bad_udelay'
    
    Add a Kconfig dependency to only do build testing when COMMON_CLK
    is enabled.
    
    Fixes: da2a68b3eb47 ("watchdog: Enable COMPILE_TEST where possible")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201203223358.1269372-1-arnd@kernel.org
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ea91f11149ca68fe53872a1a672b15e3cbc172a
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Mon Dec 7 11:30:05 2020 +0530

    watchdog: qcom: Avoid context switch in restart handler
    
    [ Upstream commit 7948fab26bcc468aa2a76462f441291b5fb0d5c7 ]
    
    The use of msleep() in the restart handler will cause scheduler to
    induce a context switch which is not desirable. This generates below
    warning on SDX55 when WDT is the only available restart source:
    
    [   39.800188] reboot: Restarting system
    [   39.804115] ------------[ cut here ]------------
    [   39.807855] WARNING: CPU: 0 PID: 678 at kernel/rcu/tree_plugin.h:297 rcu_note_context_switch+0x190/0x764
    [   39.812538] Modules linked in:
    [   39.821954] CPU: 0 PID: 678 Comm: reboot Not tainted 5.10.0-rc1-00063-g33a9990d1d66-dirty #47
    [   39.824854] Hardware name: Generic DT based system
    [   39.833470] [<c0310fbc>] (unwind_backtrace) from [<c030c544>] (show_stack+0x10/0x14)
    [   39.838154] [<c030c544>] (show_stack) from [<c0c218f0>] (dump_stack+0x8c/0xa0)
    [   39.846049] [<c0c218f0>] (dump_stack) from [<c0322f80>] (__warn+0xd8/0xf0)
    [   39.853058] [<c0322f80>] (__warn) from [<c0c1dc08>] (warn_slowpath_fmt+0x64/0xc8)
    [   39.859925] [<c0c1dc08>] (warn_slowpath_fmt) from [<c038b6f4>] (rcu_note_context_switch+0x190/0x764)
    [   39.867503] [<c038b6f4>] (rcu_note_context_switch) from [<c0c2aa3c>] (__schedule+0x84/0x640)
    [   39.876685] [<c0c2aa3c>] (__schedule) from [<c0c2b050>] (schedule+0x58/0x10c)
    [   39.885095] [<c0c2b050>] (schedule) from [<c0c2eed0>] (schedule_timeout+0x1e8/0x3d4)
    [   39.892135] [<c0c2eed0>] (schedule_timeout) from [<c039ad40>] (msleep+0x2c/0x38)
    [   39.899947] [<c039ad40>] (msleep) from [<c0a59d0c>] (qcom_wdt_restart+0xc4/0xcc)
    [   39.907319] [<c0a59d0c>] (qcom_wdt_restart) from [<c0a58290>] (watchdog_restart_notifier+0x18/0x28)
    [   39.914715] [<c0a58290>] (watchdog_restart_notifier) from [<c03468e0>] (atomic_notifier_call_chain+0x60/0x84)
    [   39.923487] [<c03468e0>] (atomic_notifier_call_chain) from [<c030ae64>] (machine_restart+0x78/0x7c)
    [   39.933551] [<c030ae64>] (machine_restart) from [<c0348048>] (__do_sys_reboot+0xdc/0x1e0)
    [   39.942397] [<c0348048>] (__do_sys_reboot) from [<c0300060>] (ret_fast_syscall+0x0/0x54)
    [   39.950721] Exception stack(0xc3e0bfa8 to 0xc3e0bff0)
    [   39.958855] bfa0:                   0001221c bed2fe24 fee1dead 28121969 01234567 00000000
    [   39.963832] bfc0: 0001221c bed2fe24 00000003 00000058 000225e0 00000000 00000000 00000000
    [   39.971985] bfe0: b6e62560 bed2fc84 00010fd8 b6e62580
    [   39.980124] ---[ end trace 3f578288bad866e4 ]---
    
    Hence, replace msleep() with mdelay() to fix this issue.
    
    Fixes: 05e487d905ab ("watchdog: qcom: register a restart notifier")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201207060005.21293-1-manivannan.sadhasivam@linaro.org
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ec410eaaa5599f3874ee4ea14c2e28fc23bc489
Author: Vincent Stehlé <vincent.stehle@laposte.net>
Date:   Mon Dec 14 23:09:52 2020 +0100

    net: korina: fix return value
    
    [ Upstream commit 7eb000bdbe7c7da811ef51942b356f6e819b13ba ]
    
    The ndo_start_xmit() method must not attempt to free the skb to transmit
    when returning NETDEV_TX_BUSY. Therefore, make sure the
    korina_send_packet() function returns NETDEV_TX_OK when it frees a packet.
    
    Fixes: ef11291bcd5f ("Add support the Korina (IDT RC32434) Ethernet MAC")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20201214220952.19935-1-vincent.stehle@laposte.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87fb4777280fa4afb87e174c0823d444a6fb51c4
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Dec 14 21:21:17 2020 +0100

    net: allwinner: Fix some resources leak in the error handling path of the probe and in the remove function
    
    [ Upstream commit 322e53d1e2529ae9d501f5e0f20604a79b873aef ]
    
    'irq_of_parse_and_map()' should be balanced by a corresponding
    'irq_dispose_mapping()' call. Otherwise, there is some resources leaks.
    
    Add such a call in the error handling path of the probe function and in the
    remove function.
    
    Fixes: 492205050d77 ("net: Add EMAC ethernet driver found on Allwinner A10 SoC's")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201214202117.146293-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 993cd0c2007f2ba1fcf1299a8933e5bc6f1a971e
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sat Dec 12 19:20:05 2020 +0100

    net: bcmgenet: Fix a resource leak in an error handling path in the probe functin
    
    [ Upstream commit 4375ada01963d1ebf733d60d1bb6e5db401e1ac6 ]
    
    If the 'register_netdev()' call fails, we must undo a previous
    'bcmgenet_mii_init()' call.
    
    Fixes: 1c1008c793fa ("net: bcmgenet: add main driver file")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20201212182005.120437-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee911d9f1848dda76bd917e8727730c76ed27bea
Author: Dwaipayan Ray <dwaipayanray1@gmail.com>
Date:   Tue Dec 15 20:45:02 2020 -0800

    checkpatch: fix unescaped left brace
    
    [ Upstream commit 03f4935135b9efeb780b970ba023c201f81cf4e6 ]
    
    There is an unescaped left brace in a regex in OPEN_BRACE check.  This
    throws a runtime error when checkpatch is run with --fix flag and the
    OPEN_BRACE check is executed.
    
    Fix it by escaping the left brace.
    
    Link: https://lkml.kernel.org/r/20201115202928.81955-1-dwaipayanray1@gmail.com
    Fixes: 8d1824780f2f ("checkpatch: add --fix option for a couple OPEN_BRACE misuses")
    Signed-off-by: Dwaipayan Ray <dwaipayanray1@gmail.com>
    Acked-by: Joe Perches <joe@perches.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c385615a6e12ceb9691cea4b017b8ac53b432cb
Author: Vincent Stehlé <vincent.stehle@laposte.net>
Date:   Sun Dec 13 19:26:22 2020 +0100

    powerpc/ps3: use dma_mapping_error()
    
    [ Upstream commit d0edaa28a1f7830997131cbce87b6c52472825d1 ]
    
    The DMA address returned by dma_map_single() should be checked with
    dma_mapping_error(). Fix the ps3stor_setup() function accordingly.
    
    Fixes: 80071802cb9c ("[POWERPC] PS3: Storage Driver Core")
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Reviewed-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201213182622.23047-1-vincent.stehle@laposte.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34333763b061dff4f9443a23345902d4c1148799
Author: Bongsu Jeon <bongsu.jeon@samsung.com>
Date:   Sun Dec 13 18:58:50 2020 +0900

    nfc: s3fwrn5: Release the nfc firmware
    
    [ Upstream commit a4485baefa1efa596702ebffd5a9c760d42b14b5 ]
    
    add the code to release the nfc firmware when the firmware image size is
    wrong.
    
    Fixes: c04c674fadeb ("nfc: s3fwrn5: Add driver for Samsung S3FWRN5 NFC Chip")
    Signed-off-by: Bongsu Jeon <bongsu.jeon@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201213095850.28169-1-bongsu.jeon@samsung.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b435d88aa89c615918f487df8a0d81fa2e061ec
Author: Anton Ivanov <anton.ivanov@cambridgegreys.com>
Date:   Mon Dec 7 17:19:40 2020 +0000

    um: chan_xterm: Fix fd leak
    
    [ Upstream commit 9431f7c199ab0d02da1482d62255e0b4621cb1b5 ]
    
    xterm serial channel was leaking a fd used in setting up the
    port helper
    
    This bug is prehistoric - it predates switching to git. The "fixes"
    header here is really just to mark all the versions we would like this to
    apply to which is "Anything from the Cretaceous period onwards".
    
    No dinosaurs were harmed in fixing this bug.
    
    Fixes: b40997b872cd ("um: drivers/xterm.c: fix a file descriptor leak")
    Signed-off-by: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c56eec0c2d1e2155b26fc2e8fcd8783ef3d70b7a
Author: Guenter Roeck <linux@roeck-us.net>
Date:   Sun Nov 8 08:25:50 2020 -0800

    watchdog: sirfsoc: Add missing dependency on HAS_IOMEM
    
    [ Upstream commit 8ae2511112d2e18bc7d324b77f965d34083a25a2 ]
    
    If HAS_IOMEM is not defined and SIRFSOC_WATCHDOG is enabled,
    the build fails with the following error.
    
    drivers/watchdog/sirfsoc_wdt.o: in function `sirfsoc_wdt_probe':
    sirfsoc_wdt.c:(.text+0x112):
            undefined reference to `devm_platform_ioremap_resource'
    
    Reported-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Fixes: da2a68b3eb47 ("watchdog: Enable COMPILE_TEST where possible")
    Link: https://lore.kernel.org/r/20201108162550.27660-2-linux@roeck-us.net
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48d119419faf7972b748989c24d36c0fd112ebd7
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Nov 29 13:55:25 2020 +0000

    irqchip/alpine-msi: Fix freeing of interrupts on allocation error path
    
    [ Upstream commit 3841245e8498a789c65dedd7ffa8fb2fee2c0684 ]
    
    The alpine-msi driver has an interesting allocation error handling,
    where it frees the same interrupts repeatedly. Hilarity follows.
    
    This code is probably never executed, but let's fix it nonetheless.
    
    Fixes: e6b78f2c3e14 ("irqchip: Add the Alpine MSIX interrupt controller")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Reviewed-by: Antoine Tenart <atenart@kernel.org>
    Cc: Tsahee Zidenberg <tsahee@annapurnalabs.com>
    Cc: Antoine Tenart <atenart@kernel.org>
    Link: https://lore.kernel.org/r/20201129135525.396671-1-maz@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34e51d71c09b02d1d16125867a929c0a8f52c703
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Dec 9 09:54:09 2020 +0300

    ASoC: wm_adsp: remove "ctl" from list on error in wm_adsp_create_control()
    
    [ Upstream commit 85a7555575a0e48f9b73db310d0d762a08a46d63 ]
    
    The error handling frees "ctl" but it's still on the "dsp->ctl_list"
    list so that could result in a use after free.  Remove it from the list
    before returning.
    
    Fixes: 2323736dca72 ("ASoC: wm_adsp: Add basic support for rev 1 firmware file format")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/X9B0keV/02wrx9Xs@mwanda
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64c8eba7ebf9948e8a37907da0d36152630b4b00
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Dec 8 14:36:27 2020 +0100

    extcon: max77693: Fix modalias string
    
    [ Upstream commit e1efdb604f5c9903a5d92ef42244009d3c04880f ]
    
    The platform device driver name is "max77693-muic", so advertise it
    properly in the modalias string. This fixes automated module loading when
    this driver is compiled as a module.
    
    Fixes: db1b9037424b ("extcon: MAX77693: Add extcon-max77693 driver to support Maxim MAX77693 MUIC device")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 700879cf00c928191f43e54744cc80d87a837bf0
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Oct 26 01:42:12 2020 +0300

    clk: tegra: Fix duplicated SE clock entry
    
    [ Upstream commit 5bf5861d6ea6c3f4b38fc8fda2062b2dc44ac63d ]
    
    The periph_clks[] array contains duplicated entry for Security Engine
    clock which was meant to be defined for T210, but it wasn't added
    properly. This patch corrects the T210 SE entry and fixes the following
    error message on T114/T124: "Tegra clk 127: register failed with -17".
    
    Fixes: dc37fec48314 ("clk: tegra: periph: Add new periph clks and muxes for Tegra210")
    Tested-by Nicolas Chauvet <kwizart@gmail.com>
    Reported-by Nicolas Chauvet <kwizart@gmail.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Link: https://lore.kernel.org/r/20201025224212.7790-1-digetx@gmail.com
    Acked-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed74ae6f216f174f8bd9d42fd033396f3906cad8
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed Oct 28 23:31:10 2020 +0900

    x86/kprobes: Restore BTF if the single-stepping is cancelled
    
    [ Upstream commit 78ff2733ff352175eb7f4418a34654346e1b6cd2 ]
    
    Fix to restore BTF if single-stepping causes a page fault and
    it is cancelled.
    
    Usually the BTF flag was restored when the single stepping is done
    (in resume_execution()). However, if a page fault happens on the
    single stepping instruction, the fault handler is invoked and
    the single stepping is cancelled. Thus, the BTF flag is not
    restored.
    
    Fixes: 1ecc798c6764 ("x86: debugctlmsr kprobes")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/160389546985.106936.12727996109376240993.stgit@devnote2
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 493c2ab5d7bd7ba63fcc61b4947b1f1eeb7b5ce2
Author: Cheng Lin <cheng.lin130@zte.com.cn>
Date:   Tue Dec 1 07:06:35 2020 -0500

    nfs_common: need lock during iterate through the list
    
    [ Upstream commit 4a9d81caf841cd2c0ae36abec9c2963bf21d0284 ]
    
    If the elem is deleted during be iterated on it, the iteration
    process will fall into an endless loop.
    
    kernel: NMI watchdog: BUG: soft lockup - CPU#4 stuck for 22s! [nfsd:17137]
    
    PID: 17137  TASK: ffff8818d93c0000  CPU: 4   COMMAND: "nfsd"
        [exception RIP: __state_in_grace+76]
        RIP: ffffffffc00e817c  RSP: ffff8818d3aefc98  RFLAGS: 00000246
        RAX: ffff881dc0c38298  RBX: ffffffff81b03580  RCX: ffff881dc02c9f50
        RDX: ffff881e3fce8500  RSI: 0000000000000001  RDI: ffffffff81b03580
        RBP: ffff8818d3aefca0   R8: 0000000000000020   R9: ffff8818d3aefd40
        R10: ffff88017fc03800  R11: ffff8818e83933c0  R12: ffff8818d3aefd40
        R13: 0000000000000000  R14: ffff8818e8391068  R15: ffff8818fa6e4000
        CS: 0010  SS: 0018
     #0 [ffff8818d3aefc98] opens_in_grace at ffffffffc00e81e3 [grace]
     #1 [ffff8818d3aefca8] nfs4_preprocess_stateid_op at ffffffffc02a3e6c [nfsd]
     #2 [ffff8818d3aefd18] nfsd4_write at ffffffffc028ed5b [nfsd]
     #3 [ffff8818d3aefd80] nfsd4_proc_compound at ffffffffc0290a0d [nfsd]
     #4 [ffff8818d3aefdd0] nfsd_dispatch at ffffffffc027b800 [nfsd]
     #5 [ffff8818d3aefe08] svc_process_common at ffffffffc02017f3 [sunrpc]
     #6 [ffff8818d3aefe70] svc_process at ffffffffc0201ce3 [sunrpc]
     #7 [ffff8818d3aefe98] nfsd at ffffffffc027b117 [nfsd]
     #8 [ffff8818d3aefec8] kthread at ffffffff810b88c1
     #9 [ffff8818d3aeff50] ret_from_fork at ffffffff816d1607
    
    The troublemake elem:
    crash> lock_manager ffff881dc0c38298
    struct lock_manager {
      list = {
        next = 0xffff881dc0c38298,
        prev = 0xffff881dc0c38298
      },
      block_opens = false
    }
    
    Fixes: c87fb4a378f9 ("lockd: NLM grace period shouldn't block NFSv4 opens")
    Signed-off-by: Cheng Lin <cheng.lin130@zte.com.cn>
    Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64f672a04f667bdfd6ac758c5f8b8c8856ba1b36
Author: kazuo ito <kzpn200@gmail.com>
Date:   Fri Nov 27 15:26:59 2020 +0900

    nfsd: Fix message level for normal termination
    
    [ Upstream commit 4420440c57892779f265108f46f83832a88ca795 ]
    
    The warning message from nfsd terminating normally
    can confuse system adminstrators or monitoring software.
    
    Though it's not exactly fair to pin-point a commit where it
    originated, the current form in the current place started
    to appear in:
    
    Fixes: e096bbc6488d ("knfsd: remove special handling for SIGHUP")
    Signed-off-by: kazuo ito <kzpn200@gmail.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90a82de5d4e2e8ff4de3da9d856738c6a538d8b8
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 17 09:22:29 2020 +0800

    speakup: fix uninitialized flush_lock
    
    [ Upstream commit d1b928ee1cfa965a3327bbaa59bfa005d97fa0fe ]
    
    The flush_lock is uninitialized, use DEFINE_SPINLOCK
    to define and initialize flush_lock.
    
    Fixes: c6e3fd22cd53 ("Staging: add speakup to the staging directory")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Link: https://lore.kernel.org/r/20201117012229.3395186-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 047d0fea70df86c3d1b1aea2434138abca5a6f3e
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 22:58:09 2020 +0800

    usb: oxu210hp-hcd: Fix memory leak in oxu_create
    
    [ Upstream commit e5548b05631ec3e6bfdaef1cad28c799545b791b ]
    
    usb_create_hcd will alloc memory for hcd, and we should
    call usb_put_hcd to free it when adding fails to prevent
    memory leak.
    
    Fixes: b92a78e582b1a ("usb host: Oxford OXU210HP HCD driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201123145809.1456541-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ebb31214b3a3218a2cb20082dda678ec8d52f54
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 23 22:57:19 2020 +0800

    usb: ehci-omap: Fix PM disable depth umbalance in ehci_hcd_omap_probe
    
    [ Upstream commit d6ff32478d7e95d6ca199b5c852710d6964d5811 ]
    
    The pm_runtime_enable will decrement the power disable depth. Imbalance
    depth will resulted in enabling runtime PM of device fails later.  Thus
    a pairing decrement must be needed on the error handling path to keep it
    balanced.
    
    Fixes: 6c984b066d84b ("ARM: OMAP: USBHOST: Replace usbhs core driver APIs by Runtime pm APIs")
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201123145719.1455849-1-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bb19dd45a19aa834d790c33952dd6a23bd921af
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Mon Dec 7 15:51:56 2020 -0600

    powerpc/pseries/hibernation: remove redundant cacheinfo update
    
    [ Upstream commit b866459489fe8ef0e92cde3cbd6bbb1af6c4e99b ]
    
    Partitions with cache nodes in the device tree can encounter the
    following warning on resume:
    
    CPU 0 already accounted in PowerPC,POWER9@0(Data)
    WARNING: CPU: 0 PID: 3177 at arch/powerpc/kernel/cacheinfo.c:197 cacheinfo_cpu_online+0x640/0x820
    
    These calls to cacheinfo_cpu_offline/online have been redundant since
    commit e610a466d16a ("powerpc/pseries/mobility: rebuild cacheinfo
    hierarchy post-migration").
    
    Fixes: e610a466d16a ("powerpc/pseries/mobility: rebuild cacheinfo hierarchy post-migration")
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201207215200.1785968-25-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7448a681016a74d7677ce470581e46ca6ee2682d
Author: Nathan Lynch <nathanl@linux.ibm.com>
Date:   Mon Dec 7 15:51:49 2020 -0600

    powerpc/pseries/hibernation: drop pseries_suspend_begin() from suspend ops
    
    [ Upstream commit 52719fce3f4c7a8ac9eaa191e8d75a697f9fbcbc ]
    
    There are three ways pseries_suspend_begin() can be reached:
    
    1. When "mem" is written to /sys/power/state:
    
    kobj_attr_store()
    -> state_store()
      -> pm_suspend()
        -> suspend_devices_and_enter()
          -> pseries_suspend_begin()
    
    This never works because there is no way to supply a valid stream id
    using this interface, and H_VASI_STATE is called with a stream id of
    zero. So this call path is useless at best.
    
    2. When a stream id is written to /sys/devices/system/power/hibernate.
    pseries_suspend_begin() is polled directly from store_hibernate()
    until the stream is in the "Suspending" state (i.e. the platform is
    ready for the OS to suspend execution):
    
    dev_attr_store()
    -> store_hibernate()
      -> pseries_suspend_begin()
    
    3. When a stream id is written to /sys/devices/system/power/hibernate
    (continued). After #2, pseries_suspend_begin() is called once again
    from the pm core:
    
    dev_attr_store()
    -> store_hibernate()
      -> pm_suspend()
        -> suspend_devices_and_enter()
          -> pseries_suspend_begin()
    
    This is redundant because the VASI suspend state is already known to
    be Suspending.
    
    The begin() callback of platform_suspend_ops is optional, so we can
    simply remove that assignment with no loss of function.
    
    Fixes: 32d8ad4e621d ("powerpc/pseries: Partition hibernation support")
    Signed-off-by: Nathan Lynch <nathanl@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201207215200.1785968-18-nathanl@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb89667a042bc7e71f657a3a49fbc0ccd459d6c4
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Dec 4 15:47:39 2020 +0800

    scsi: fnic: Fix error return code in fnic_probe()
    
    [ Upstream commit d4fc94fe65578738ded138e9fce043db6bfc3241 ]
    
    Return a negative error code from the error handling case instead of 0 as
    done elsewhere in this function.
    
    Link: https://lore.kernel.org/r/1607068060-31203-1-git-send-email-zhangchangzhong@huawei.com
    Fixes: 5df6d737dd4b ("[SCSI] fnic: Add new Cisco PCI-Express FCoE HBA")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Reviewed-by: Karan Tilak Kumar <kartilak@cisco.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e74a8e22447764afb1b3772383974b7d684f60d5
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 26 17:10:58 2020 +0100

    seq_buf: Avoid type mismatch for seq_buf_init
    
    [ Upstream commit d9a9280a0d0ae51dc1d4142138b99242b7ec8ac6 ]
    
    Building with W=2 prints a number of warnings for one function that
    has a pointer type mismatch:
    
    linux/seq_buf.h: In function 'seq_buf_init':
    linux/seq_buf.h:35:12: warning: pointer targets in assignment from 'unsigned char *' to 'char *' differ in signedness [-Wpointer-sign]
    
    Change the type in the function prototype according to the type in
    the structure.
    
    Link: https://lkml.kernel.org/r/20201026161108.3707783-1-arnd@kernel.org
    
    Fixes: 9a7777935c34 ("tracing: Convert seq_buf fields to be like seq_file fields")
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c72c8bfe3344731b6b06d40ab11c5fbb3b687f5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Dec 5 19:55:51 2020 +0800

    scsi: pm80xx: Fix error return in pm8001_pci_probe()
    
    [ Upstream commit 97031ccffa4f62728602bfea8439dd045cd3aeb2 ]
    
    The driver did not return an error in the case where
    pm8001_configure_phy_settings() failed.
    
    Use rc to store the return value of pm8001_configure_phy_settings().
    
    Link: https://lore.kernel.org/r/20201205115551.2079471-1-zhangqilong3@huawei.com
    Fixes: 279094079a44 ("[SCSI] pm80xx: Phy settings support for motherboard controller.")
    Acked-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e71d3dc7e7af28efb023fe3648aba9f9f5a4a9b
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Mon Nov 9 17:15:18 2020 +0800

    scsi: qedi: Fix missing destroy_workqueue() on error in __qedi_probe
    
    [ Upstream commit 62eebd5247c4e4ce08826ad5995cf4dd7ce919dd ]
    
    Add the missing destroy_workqueue() before return from __qedi_probe in the
    error handling case when fails to create workqueue qedi->offload_thread.
    
    Link: https://lore.kernel.org/r/20201109091518.55941-1-miaoqinglang@huawei.com
    Fixes: ace7f46ba5fd ("scsi: qedi: Add QLogic FastLinQ offload iSCSI driver framework.")
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39e4e380e012166d5fb5b0c87b782fc5a8a0bf1a
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Nov 3 16:11:38 2020 +0100

    cpufreq: scpi: Add missing MODULE_ALIAS
    
    [ Upstream commit c0382d049d2def37b81e907a8b22661a4a4a6eb5 ]
    
    This patch adds missing MODULE_ALIAS for automatic loading of this cpufreq
    driver when it is compiled as an external module.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: 8def31034d033 ("cpufreq: arm_big_little: add SCPI interface driver")
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a7babcddbcbc7dee1940ebc23497a019e2ad700
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Nov 3 16:11:37 2020 +0100

    cpufreq: loongson1: Add missing MODULE_ALIAS
    
    [ Upstream commit b9acab091842ca8b288882798bb809f7abf5408a ]
    
    This patch adds missing MODULE_ALIAS for automatic loading of this cpufreq
    driver when it is compiled as an external module.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: a0a22cf14472f ("cpufreq: Loongson1: Add cpufreq driver for Loongson1B")
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ff15b7ca71a96acf5c1fd044dac8e944259a756
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Nov 3 16:11:35 2020 +0100

    cpufreq: st: Add missing MODULE_DEVICE_TABLE
    
    [ Upstream commit 183747ab52654eb406fc6b5bfb40806b75d31811 ]
    
    This patch adds missing MODULE_DEVICE_TABLE definition which generates
    correct modalias for automatic loading of this cpufreq driver when it is
    compiled as an external module.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: ab0ea257fc58d ("cpufreq: st: Provide runtime initialised driver for ST's platforms")
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29d046049b26799462756f3c14bb8df297481be9
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Nov 3 16:11:33 2020 +0100

    cpufreq: mediatek: Add missing MODULE_DEVICE_TABLE
    
    [ Upstream commit af6eca06501118af3e2ad46eee8edab20624b74e ]
    
    This patch adds missing MODULE_DEVICE_TABLE definition which generates
    correct modalias for automatic loading of this cpufreq driver when it is
    compiled as an external module.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: 501c574f4e3a5 ("cpufreq: mediatek: Add support of cpufreq to MT2701/MT7623 SoC")
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff4d7264d8843917f5695ec058778eb623f1f1fe
Author: Pali Rohár <pali@kernel.org>
Date:   Tue Nov 3 16:11:32 2020 +0100

    cpufreq: highbank: Add missing MODULE_DEVICE_TABLE
    
    [ Upstream commit 9433777a6e0aae27468d3434b75cd51bb88ff711 ]
    
    This patch adds missing MODULE_DEVICE_TABLE definition which generates
    correct modalias for automatic loading of this cpufreq driver when it is
    compiled as an external module.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Fixes: 6754f556103be ("cpufreq / highbank: add support for highbank cpufreq")
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f6158ee19796c6666cdc18355fe4a2af957277a0
Author: Keqian Zhu <zhukeqian1@huawei.com>
Date:   Fri Dec 4 15:31:26 2020 +0800

    clocksource/drivers/arm_arch_timer: Correct fault programming of CNTKCTL_EL1.EVNTI
    
    [ Upstream commit 8b7770b877d187bfdae1eaf587bd2b792479a31c ]
    
    ARM virtual counter supports event stream, it can only trigger an event
    when the trigger bit (the value of CNTKCTL_EL1.EVNTI) of CNTVCT_EL0 changes,
    so the actual period of event stream is 2^(cntkctl_evnti + 1). For example,
    when the trigger bit is 0, then virtual counter trigger an event for every
    two cycles.
    
    While we're at it, rework the way we compute the trigger bit position
    by making it more obvious that when bits [n:n-1] are both set (with n
    being the most significant bit), we pick bit (n + 1).
    
    Fixes: 037f637767a8 ("drivers: clocksource: add support for ARM architected timer event stream")
    Suggested-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Keqian Zhu <zhukeqian1@huawei.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201204073126.6920-3-zhukeqian1@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09e0799f23fcb326fcfda961e1920e684e994330
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Sat Nov 28 18:19:59 2020 +0800

    dm ioctl: fix error return code in target_message
    
    [ Upstream commit 4d7659bfbe277a43399a4a2d90fca141e70f29e1 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 2ca4c92f58f9 ("dm ioctl: prevent empty message")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1616c88c5519660177f1f03d796de44d1969c786
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu Dec 3 22:42:27 2020 +0800

    ASoC: jz4740-i2s: add missed checks for clk_get()
    
    [ Upstream commit 1c1fb2653a0c2e3f310c07eacd8fc3a10e08c97a ]
    
    jz4740_i2s_set_sysclk() does not check the return values of clk_get(),
    while the file dereferences the pointers in clk_put().
    Add the missed checks to fix it.
    
    Fixes: 11bd3dd1b7c2 ("ASoC: Add JZ4740 ASoC support")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Link: https://lore.kernel.org/r/20201203144227.418194-1-hslester96@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdc1effee83b18a2507fe1cf7e4f0f445521dd07
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Thu Oct 15 14:52:00 2020 +0300

    net/mlx5: Properly convey driver version to firmware
    
    [ Upstream commit 907af0f0cab4ee5d5604f182ecec2c5b5119d294 ]
    
    mlx5 firmware expects driver version in specific format X.X.X, so
    make it always correct and based on real kernel version aligned with
    the driver.
    
    Fixes: 012e50e109fd ("net/mlx5: Set driver version into firmware")
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2dbac7f35b0072413e7152779da398db3f0acdb
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Wed Nov 25 09:47:18 2020 +0800

    memstick: r592: Fix error return in r592_probe()
    
    [ Upstream commit db29d3d1c2451e673e29c7257471e3ce9d50383a ]
    
    Fix to return a error code from the error handling case instead of 0.
    
    Fixes: 926341250102 ("memstick: add driver for Ricoh R5C592 card reader")
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Link: https://lore.kernel.org/r/20201125014718.153563-1-jingxiangfeng@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be29be61befaa0a5e2ca1b22f57e677b2dd898f3
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Fri Dec 4 14:48:05 2020 +0800

    arm64: dts: rockchip: Fix UART pull-ups on rk3328
    
    [ Upstream commit 94dad6bed3c86c00050bf7c2b2ad6b630facae31 ]
    
    For UARTs, the local pull-ups should be on the RX pin, not the TX pin.
    UARTs transmit active-low, so a disconnected RX pin should be pulled
    high instead of left floating to prevent noise being interpreted as
    transmissions.
    
    This gets rid of bogus sysrq events when the UART console is not
    connected.
    
    Fixes: 52e02d377a72 ("arm64: dts: rockchip: add core dtsi file for RK3328 SoCs")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Link: https://lore.kernel.org/r/20201204064805.6480-1-wens@kernel.org
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d150255821c844ef8ea87ee7c04e506ec54d7c84
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Thu Nov 19 09:12:19 2020 +0800

    pinctrl: falcon: add missing put_device() call in pinctrl_falcon_probe()
    
    [ Upstream commit 89cce2b3f247a434ee174ab6803698041df98014 ]
    
    if of_find_device_by_node() succeed, pinctrl_falcon_probe() doesn't have
    a corresponding put_device(). Thus add put_device() to fix the exception
    handling for this function implementation.
    
    Fixes: e316cb2b16bb ("OF: pinctrl: MIPS: lantiq: adds support for FALCON SoC")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20201119011219.2248232-1-yukuai3@huawei.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 978883b6158bf19226b5f6236f7518f76db9f099
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Wed Dec 2 11:57:05 2020 +0200

    ARM: dts: at91: sama5d2: map securam as device
    
    [ Upstream commit 9b5dcc8d427e2bcb84c49eb03ffefe11e7537a55 ]
    
    Due to strobe signal not being propagated from CPU to securam
    the securam needs to be mapped as device or strongly ordered memory
    to work properly. Otherwise, updating to one offset may affect
    the adjacent locations in securam.
    
    Fixes: d4ce5f44d4409 ("ARM: dts: at91: sama5d2: Add securam node")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Acked-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Link: https://lore.kernel.org/r/1606903025-14197-3-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2846250da837aa3fa40c0b1a9d06a7e86c873a45
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Nov 16 21:51:23 2020 +0800

    clocksource/drivers/cadence_ttc: Fix memory leak in ttc_setup_clockevent()
    
    [ Upstream commit eee422c46e6840a81c9db18a497b74387a557b29 ]
    
    If clk_notifier_register() failed, ttc_setup_clockevent() will return
    without freeing 'ttcce', which will leak memory.
    
    Fixes: 70504f311d4b ("clocksource/drivers/cadence_ttc: Convert init function to return error")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20201116135123.2164033-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7894d3535ae1cc2dd22bfd6102095a982881b296
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Nov 17 08:23:40 2020 +0100

    media: saa7146: fix array overflow in vidioc_s_audio()
    
    [ Upstream commit 8e4d86e241cf035d6d3467cd346e7ce490681937 ]
    
    The "a->index" value comes from the user via the ioctl.  The problem is
    that the shift can wrap resulting in setting "mxb->cur_audinput" to an
    invalid value, which later results in an array overflow.
    
    Fixes: 6680427791c9 ("[media] mxb: fix audio handling")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 004abbd456bad45443de52ab96a3e6a4ef1dc564
Author: Jason Gunthorpe <jgg@nvidia.com>
Date:   Thu Nov 5 12:34:58 2020 -0400

    vfio-pci: Use io_remap_pfn_range() for PCI IO memory
    
    [ Upstream commit 7b06a56d468b756ad6bb43ac21b11e474ebc54a0 ]
    
    commit f8f6ae5d077a ("mm: always have io_remap_pfn_range() set
    pgprot_decrypted()") allows drivers using mmap to put PCI memory mapped
    BAR space into userspace to work correctly on AMD SME systems that default
    to all memory encrypted.
    
    Since vfio_pci_mmap_fault() is working with PCI memory mapped BAR space it
    should be calling io_remap_pfn_range() otherwise it will not work on SME
    systems.
    
    Fixes: 11c4cd07ba11 ("vfio-pci: Fault mmaps to enable vma tracking")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Acked-by: Peter Xu <peterx@redhat.com>
    Tested-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 056b363e1495e32448126d6062ab4244b191f944
Author: NeilBrown <neilb@suse.de>
Date:   Fri Nov 27 11:24:33 2020 +1100

    NFS: switch nfsiod to be an UNBOUND workqueue.
    
    [ Upstream commit bf701b765eaa82dd164d65edc5747ec7288bb5c3 ]
    
    nfsiod is currently a concurrency-managed workqueue (CMWQ).
    This means that workitems scheduled to nfsiod on a given CPU are queued
    behind all other work items queued on any CMWQ on the same CPU.  This
    can introduce unexpected latency.
    
    Occaionally nfsiod can even cause excessive latency.  If the work item
    to complete a CLOSE request calls the final iput() on an inode, the
    address_space of that inode will be dismantled.  This takes time
    proportional to the number of in-memory pages, which on a large host
    working on large files (e.g..  5TB), can be a large number of pages
    resulting in a noticable number of seconds.
    
    We can avoid these latency problems by switching nfsiod to WQ_UNBOUND.
    This causes each concurrent work item to gets a dedicated thread which
    can be scheduled to an idle CPU.
    
    There is precedent for this as several other filesystems use WQ_UNBOUND
    workqueue for handling various async events.
    
    Signed-off-by: NeilBrown <neilb@suse.de>
    Fixes: ada609ee2ac2 ("workqueue: use WQ_MEM_RECLAIM instead of WQ_RESCUER")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf9cf54889ece6d5c6a52445dd1ff2d99280885c
Author: Calum Mackay <calum.mackay@oracle.com>
Date:   Wed Oct 28 20:16:27 2020 +0000

    lockd: don't use interval-based rebinding over TCP
    
    [ Upstream commit 9b82d88d5976e5f2b8015d58913654856576ace5 ]
    
    NLM uses an interval-based rebinding, i.e. it clears the transport's
    binding under certain conditions if more than 60 seconds have elapsed
    since the connection was last bound.
    
    This rebinding is not necessary for an autobind RPC client over a
    connection-oriented protocol like TCP.
    
    It can also cause problems: it is possible for nlm_bind_host() to clear
    XPRT_BOUND whilst a connection worker is in the middle of trying to
    reconnect, after it had already been checked in xprt_connect().
    
    When the connection worker notices that XPRT_BOUND has been cleared
    under it, in xs_tcp_finish_connecting(), that results in:
    
            xs_tcp_setup_socket: connect returned unhandled error -107
    
    Worse, it's possible that the two can get into lockstep, resulting in
    the same behaviour repeated indefinitely, with the above error every
    300 seconds, without ever recovering, and the connection never being
    established. This has been seen in practice, with a large number of NLM
    client tasks, following a server restart.
    
    The existing callers of nlm_bind_host & nlm_rebind_host should not need
    to force the rebind, for TCP, so restrict the interval-based rebinding
    to UDP only.
    
    For TCP, we will still rebind when needed, e.g. on timeout, and connection
    error (including closure), since connection-related errors on an existing
    connection, ECONNREFUSED when trying to connect, and rpc_check_timeout(),
    already unconditionally clear XPRT_BOUND.
    
    To avoid having to add the fix, and explanation, to both nlm_bind_host()
    and nlm_rebind_host(), remove the duplicate code from the former, and
    have it call the latter.
    
    Drop the dprintk, which adds no value over a trace.
    
    Signed-off-by: Calum Mackay <calum.mackay@oracle.com>
    Fixes: 35f5a422ce1a ("SUNRPC: new interface to force an RPC rebind")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7adbd6e3d0e7615348618675e05dc1595cdab484
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Fri Nov 6 16:33:38 2020 -0500

    SUNRPC: xprt_load_transport() needs to support the netid "rdma6"
    
    [ Upstream commit d5aa6b22e2258f05317313ecc02efbb988ed6d38 ]
    
    According to RFC5666, the correct netid for an IPv6 addressed RDMA
    transport is "rdma6", which we've supported as a mount option since
    Linux-4.7. The problem is when we try to load the module "xprtrdma6",
    that will fail, since there is no modulealias of that name.
    
    Fixes: 181342c5ebe8 ("xprtrdma: Add rdma6 option to support NFS/RDMA IPv6")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e3a219757d3d4ec42546cb4aee1452bc041d515
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Fri Nov 6 16:03:38 2020 -0500

    NFSv4.2: condition READDIR's mask for security label based on LSM state
    
    [ Upstream commit 05ad917561fca39a03338cb21fe9622f998b0f9c ]
    
    Currently, the client will always ask for security_labels if the server
    returns that it supports that feature regardless of any LSM modules
    (such as Selinux) enforcing security policy. This adds performance
    penalty to the READDIR operation.
    
    Client adjusts superblock's support of the security_label based on
    the server's support but also current client's configuration of the
    LSM modules. Thus, prior to using the default bitmask in READDIR,
    this patch checks the server's capabilities and then instructs
    READDIR to remove FATTR4_WORD2_SECURITY_LABEL from the bitmask.
    
    v5: fixing silly mistakes of the rushed v4
    v4: simplifying logic
    v3: changing label's initialization per Ondrej's comment
    v2: dropping selinux hook and using the sb cap.
    
    Suggested-by: Ondrej Mosnacek <omosnace@redhat.com>
    Suggested-by: Scott Mayhew <smayhew@redhat.com>
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Fixes: 2b0143b5c986 ("VFS: normal filesystems (and lustre): d_inode() annotations")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0835b03e8ab51588cd8d49c61361bd0f04444274
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Nov 24 17:59:18 2020 +0200

    ath10k: Release some resources in an error handling path
    
    [ Upstream commit 6364e693f4a7a89a2fb3dd2cbd6cc06d5fd6e26d ]
    
    Should an error occur after calling 'ath10k_usb_create()', it should be
    undone by a corresponding 'ath10k_usb_destroy()' call
    
    Fixes: 4db66499df91 ("ath10k: add initial USB support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201122170358.1346065-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b8f94219ca5c050dbc26c468f530a98ed4c2337
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Nov 24 17:59:18 2020 +0200

    ath10k: Fix an error handling path
    
    [ Upstream commit ed3573bc3943c27d2d8e405a242f87ed14572ca1 ]
    
    If 'ath10k_usb_create()' fails, we should release some resources and report
    an error instead of silently continuing.
    
    Fixes: 4db66499df91 ("ath10k: add initial USB support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201122170342.1346011-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21424b8a7769e819cf70dd94c85944b785f2674f
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Sat Nov 28 23:28:17 2020 +0100

    ARM: dts: at91: at91sam9rl: fix ADC triggers
    
    [ Upstream commit 851a95da583c26e2ddeb7281e9b61f0d76ea5aba ]
    
    The triggers for the ADC were taken from at91sam9260 dtsi but are not
    correct.
    
    Fixes: a4c1d6c75822 ("ARM: at91/dt: sam9rl: add lcd, adc, usb gadget and pwm support")
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20201128222818.1910764-10-alexandre.belloni@bootlin.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02f7cb9684ea9ae6e820c9327320ba70eda673ba
Author: Bharat Gooty <bharat.gooty@broadcom.com>
Date:   Thu Oct 1 11:30:52 2020 +0530

    PCI: iproc: Fix out-of-bound array accesses
    
    [ Upstream commit a3ff529f5d368a17ff35ada8009e101162ebeaf9 ]
    
    Declare the full size array for all revisions of PAX register sets
    to avoid potentially out of bound access of the register array
    when they are being initialized in iproc_pcie_rev_init().
    
    Link: https://lore.kernel.org/r/20201001060054.6616-2-srinath.mannam@broadcom.com
    Fixes: 06324ede76cdf ("PCI: iproc: Improve core register population")
    Signed-off-by: Bharat Gooty <bharat.gooty@broadcom.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 984cea6adb670c53d2b7e84c86919d75cd1bf9c2
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Nov 29 13:55:51 2020 +0000

    genirq/irqdomain: Don't try to free an interrupt that has no mapping
    
    [ Upstream commit 4615fbc3788ddc8e7c6d697714ad35a53729aa2c ]
    
    When an interrupt allocation fails for N interrupts, it is pretty
    common for the error handling code to free the same number of interrupts,
    no matter how many interrupts have actually been allocated.
    
    This may result in the domain freeing code to be unexpectedly called
    for interrupts that have no mapping in that domain. Things end pretty
    badly.
    
    Instead, add some checks to irq_domain_free_irqs_hierarchy() to make sure
    that thiss does not follow the hierarchy if no mapping exists for a given
    interrupt.
    
    Fixes: 6a6544e520abe ("genirq/irqdomain: Remove auto-recursive hierarchy support")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20201129135551.396777-1-maz@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit caa3f537246920c09dfd3a455c9d23fcb5b0b825
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:33:21 2020 +0800

    power: supply: bq24190_charger: fix reference leak
    
    [ Upstream commit b2f6cb78eaa1cad57dd3fe11d0458cd4fae9a584 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to call pm_runtime_put_noidle will result
    in reference leak in callers(bq24190_sysfs_show,
    bq24190_charger_get_property, bq24190_charger_set_property,
    bq24190_battery_get_property, bq24190_battery_set_property),
    so we should fix it.
    
    Fixes: f385e6e2a1532 ("power: bq24190_charger: Use PM runtime autosuspend")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3cee090ae19bafe8c8dff0d731cb1a31b877383
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Tue Sep 8 09:17:11 2020 +1200

    ARM: dts: Remove non-existent i2c1 from 98dx3236
    
    [ Upstream commit 7f24479ead579459106bb55c2320a000135731f9 ]
    
    The switches with integrated CPUs have only got a single i2c controller.
    They incorrectly gained one when they were split from the Armada-XP.
    
    Fixes: 43e28ba87708 ("ARM: dts: Use armada-370-xp as a base for armada-xp-98dx3236")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52a0d02f86df1eee7d9dd247394271e5d4351239
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Mon Oct 12 10:56:43 2020 +0800

    HSI: omap_ssi: Don't jump to free ID in ssi_add_controller()
    
    [ Upstream commit 41fff6e19bc8d6d8bca79ea388427c426e72e097 ]
    
    In current code, it jumps to ida_simple_remove() when ida_simple_get()
    failes to allocate an ID. Just return to fix it.
    
    Fixes: 0fae198988b8 ("HSI: omap_ssi: built omap_ssi and omap_ssi_port into one module")
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit daa0a1515d8b9674ba8cd8289103f82b87ad0072
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 15:23:12 2020 +0100

    media: max2175: fix max2175_set_csm_mode() error code
    
    [ Upstream commit 9b1b0cb0636166187478ef68d5b95f5caea062ec ]
    
    This is supposed to return negative error codes but the type is bool so
    it returns true instead.
    
    Fixes: b47b79d8a231 ("[media] media: i2c: max2175: Add MAX2175 support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b898479ab749f49055bef29cfbf666bdeed9c7b1
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 20 15:48:47 2020 +0800

    mips: cdmm: fix use-after-free in mips_cdmm_bus_discover
    
    [ Upstream commit f0e82242b16826077a2775eacfe201d803bb7a22 ]
    
    kfree(dev) has been called inside put_device so anther
    kfree would cause a use-after-free bug/
    
    Fixes: 8286ae03308c ("MIPS: Add CDMM bus support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Acked-by: Serge Semin <fancer.lancer@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 958f23e340dbce6582cebaf2bfb21dca6f637131
Author: Daniel T. Lee <danieltimlee@gmail.com>
Date:   Tue Nov 24 09:03:09 2020 +0000

    samples: bpf: Fix lwt_len_hist reusing previous BPF map
    
    [ Upstream commit 0afe0a998c40085a6342e1aeb4c510cccba46caf ]
    
    Currently, lwt_len_hist's map lwt_len_hist_map is uses pinning, and the
    map isn't cleared on test end. This leds to reuse of that map for
    each test, which prevents the results of the test from being accurate.
    
    This commit fixes the problem by removing of pinned map from bpffs.
    Also, this commit add the executable permission to shell script
    files.
    
    Fixes: f74599f7c5309 ("bpf: Add tests and samples for LWT-BPF")
    Signed-off-by: Daniel T. Lee <danieltimlee@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20201124090310.24374-7-danieltimlee@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 809277a7f12a944e110b25f7c050fba5944fed7f
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Wed Sep 9 14:56:57 2020 +0200

    media: siano: fix memory leak of debugfs members in smsdvb_hotplug
    
    [ Upstream commit abf287eeff4c6da6aa804bbd429dfd9d0dfb6ea7 ]
    
    When dvb_create_media_graph fails, the debugfs kept inside client should
    be released. However, the current implementation does not release them.
    
    Fix this by adding a new goto label to call smsdvb_debugfs_release.
    
    Fixes: 0d3ab8410dcb ("[media] dvb core: must check dvb_create_media_graph()")
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be4085ab7928642a34f01fb37b646394a847fcfc
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Thu Nov 19 15:08:42 2020 +0800

    cw1200: fix missing destroy_workqueue() on error in cw1200_init_common
    
    [ Upstream commit 7ec8a926188eb8e7a3cbaca43ec44f2d7146d71b ]
    
    Add the missing destroy_workqueue() before return from
    cw1200_init_common in the error handling case.
    
    Fixes: a910e4a94f69 ("cw1200: add driver for the ST-E CW1100 & CW1200 WLAN chipsets")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201119070842.1011-1-miaoqinglang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29c284f578fda2f23518c727c088aed16ac84516
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Fri Nov 13 22:22:43 2020 +0100

    orinoco: Move context allocation after processing the skb
    
    [ Upstream commit a31eb615646a63370aa1da1053c45439c7653d83 ]
    
    ezusb_xmit() allocates a context which is leaked if
    orinoco_process_xmit_skb() returns an error.
    
    Move ezusb_alloc_ctx() after the invocation of
    orinoco_process_xmit_skb() because the context is not needed so early.
    ezusb_access_ltv() will cleanup the context in case of an error.
    
    Fixes: bac6fafd4d6a0 ("orinoco: refactor xmit path")
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201113212252.2243570-2-bigeasy@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 867e637ef7efe64e68d125519243c277f687bf34
Author: Cristian Birsan <cristian.birsan@microchip.com>
Date:   Wed Nov 18 14:00:19 2020 +0200

    ARM: dts: at91: sama5d3_xplained: add pincontrol for USB Host
    
    [ Upstream commit e1062fa7292f1e3744db0a487c4ac0109e09b03d ]
    
    The pincontrol node is needed for USB Host since Linux v5.7-rc1. Without
    it the driver probes but VBus is not powered because of wrong pincontrol
    configuration.
    
    Fixes: b7c2b61570798 ("ARM: at91: add Atmel's SAMA5D3 Xplained board")
    Signed-off-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Link: https://lore.kernel.org/r/20201118120019.1257580-4-cristian.birsan@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb514328b28c01ecf2f876dfd6857b01164c4fc7
Author: Cristian Birsan <cristian.birsan@microchip.com>
Date:   Wed Nov 18 14:00:18 2020 +0200

    ARM: dts: at91: sama5d4_xplained: add pincontrol for USB Host
    
    [ Upstream commit be4dd2d448816a27c1446f8f37fce375daf64148 ]
    
    The pincontrol node is needed for USB Host since Linux v5.7-rc1. Without
    it the driver probes but VBus is not powered because of wrong pincontrol
    configuration.
    
    Fixes: 38153a017896f ("ARM: at91/dt: sama5d4: add dts for sama5d4 xplained board")
    Signed-off-by: Cristian Birsan <cristian.birsan@microchip.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Acked-by: Ludovic Desroches <ludovic.desroches@microchip.com>
    Link: https://lore.kernel.org/r/20201118120019.1257580-3-cristian.birsan@microchip.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d337e766d79e702fdf178d54321eea79c51f45c
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Nov 20 15:48:46 2020 +0800

    memstick: fix a double-free bug in memstick_check
    
    [ Upstream commit e3e9ced5c93803d5b2ea1942c4bf0192622531d6 ]
    
    kfree(host->card) has been called in put_device so that
    another kfree would raise cause a double-free bug.
    
    Fixes: 0193383a5833 ("memstick: core: fix device_register() error handling")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Link: https://lore.kernel.org/r/20201120074846.31322-1-miaoqinglang@huawei.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23aa886fd8a93bdc93183769d3edd21e3fa12c80
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Sun Nov 8 15:20:07 2020 +0200

    RDMA/cxgb4: Validate the number of CQEs
    
    [ Upstream commit 6d8285e604e0221b67bd5db736921b7ddce37d00 ]
    
    Before create CQ, make sure that the requested number of CQEs is in the
    supported range.
    
    Fixes: cfdda9d76436 ("RDMA/cxgb4: Add driver for Chelsio T4 RNIC")
    Link: https://lore.kernel.org/r/20201108132007.67537-1-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ade0a8d65d2f7076181936ea227dbdbd136fd04
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 20 16:36:49 2020 -0800

    Input: omap4-keypad - fix runtime PM error handling
    
    [ Upstream commit 59bbf83835f591b95c3bdd09d900f3584fa227af ]
    
    In omap4_keypad_probe, the patch fix several bugs.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to pm_runtime_put_noidle will result in
         reference leak.
    
      2) In err_unmap, forget to disable runtime of device,
         pm_runtime_enable will increase power disable depth. Thus a
         pairing decrement is needed on the error handling path to keep
         it balanced.
    
      3) In err_pm_disable, it will call pm_runtime_put_sync twice not
         one time.
    
    To fix this we factor out code reading revision and disabling touchpad, and
    drop PM reference once we are done talking to the device.
    
    Fixes: f77621cc640a7 ("Input: omap-keypad - dynamically handle register offsets")
    Fixes: 5ad567ffbaf20 ("Input: omap4-keypad - wire up runtime PM handling")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201120133918.2559681-1-zhangqilong3@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18f2622499d1bda1c3de05a478c7a73c0fb60143
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Sat Nov 21 19:22:38 2020 -0800

    drivers: soc: ti: knav_qmss_queue: Fix error return code in knav_queue_probe
    
    [ Upstream commit 4cba398f37f868f515ff12868418dc28574853a1 ]
    
    Fix to return the error code from of_get_child_by_name() instaed of 0
    in knav_queue_probe().
    
    Fixes: 41f93af900a20d1a0a ("soc: ti: add Keystone Navigator QMSS driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 093a542db24e581336358ec0621c4a9e46f8cec2
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:37 2020 -0800

    soc: ti: Fix reference imbalance in knav_dma_probe
    
    [ Upstream commit b4fa73358c306d747a2200aec6f7acb97e5750e6 ]
    
    The patch fix two reference leak.
    
      1) pm_runtime_get_sync will increment pm usage counter even it
         failed. Forgetting to call put operation will result in
         reference leak.
    
      2) The pm_runtime_enable will increase power disable depth. Thus
         a pairing decrement is needed on the error handling path to
         keep it balanced.
    
    We fix it by: 1) adding call pm_runtime_put_noidle or
    pm_runtime_put_sync in error handling. 2) adding pm_runtime_disable
    in error handling, to keep usage counter and disable depth balanced.
    
    Fixes: 88139ed030583 ("soc: ti: add Keystone Navigator DMA support")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f161809b02c6d3fb43573058405403582849c233
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 21 19:22:00 2020 -0800

    soc: ti: knav_qmss: fix reference leak in knav_queue_probe
    
    [ Upstream commit ec8684847d8062496c4619bc3fcff31c19d56847 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in knav_queue_probe, so we should fix it.
    
    Fixes: 41f93af900a20 ("soc: ti: add Keystone Navigator QMSS driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa2a215564b54d147ef1b70596e27683347fe3e7
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:17:28 2020 +0800

    crypto: omap-aes - Fix PM disable depth imbalance in omap_aes_probe
    
    [ Upstream commit ff8107200367f4abe0e5bce66a245e8d0f2d229e ]
    
    The pm_runtime_enable will increase power disable depth.
    Thus a pairing decrement is needed on the error handling
    path to keep it balanced according to context.
    
    Fixes: f7b2b5dd6a62a ("crypto: omap-aes - add error check for pm_runtime_get_sync")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit caa7779ed582658ec6f825f33cb90b2b94397faf
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Tue Nov 3 18:07:12 2020 +0000

    powerpc/feature: Fix CPU_FTRS_ALWAYS by removing CPU_FTRS_GENERIC_32
    
    [ Upstream commit 78665179e569c7e1fe102fb6c21d0f5b6951f084 ]
    
    On 8xx, we get the following features:
    
    [    0.000000] cpu_features      = 0x0000000000000100
    [    0.000000]   possible        = 0x0000000000000120
    [    0.000000]   always          = 0x0000000000000000
    
    This is not correct. As CONFIG_PPC_8xx is mutually exclusive with all
    other configurations, the three lines should be equal.
    
    The problem is due to CPU_FTRS_GENERIC_32 which is taken when
    CONFIG_BOOK3S_32 is NOT selected. This CPU_FTRS_GENERIC_32 is
    pointless because there is no generic configuration supporting
    all 32 bits but book3s/32.
    
    Remove this pointless generic features definition to unbreak the
    calculation of 'possible' features and 'always' features.
    
    Fixes: 76bc080ef5a3 ("[POWERPC] Make default cputable entries reflect selected CPU family")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/76a85f30bf981d1aeaae00df99321235494da254.1604426550.git.christophe.leroy@csgroup.eu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b3a5a849418b43f083f81ce489658eab15e0a9b
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Nov 11 17:17:11 2020 -0800

    Input: ads7846 - fix unaligned access on 7845
    
    [ Upstream commit 03e2c9c782f721b661a0e42b1b58f394b5298544 ]
    
    req->sample[1] is not naturally aligned at word boundary, and therefore we
    should use get_unaligned_be16() when accessing it.
    
    Fixes: 3eac5c7e44f3 ("Input: ads7846 - extend the driver for ads7845 controller support")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bc3a1fbb2bfaeb4f8e03ef5049482446eadb56d
Author: Oleksij Rempel <o.rempel@pengutronix.de>
Date:   Tue Nov 17 15:33:24 2020 -0800

    Input: ads7846 - fix integer overflow on Rt calculation
    
    [ Upstream commit 820830ec918f6c3dcd77a54a1c6198ab57407916 ]
    
    In some rare cases the 32 bit Rt value will overflow if z2 and x is max,
    z1 is minimal value and x_plate_ohms is relatively high (for example 800
    ohm). This would happen on some screen age with low pressure.
    
    There are two possible fixes:
    - make Rt 64bit
    - reorder calculation to avoid overflow
    
    The second variant seems to be preferable, since 64 bit calculation on
    32 bit system is a bit more expensive.
    
    Fixes: ffa458c1bd9b6f653008d450f337602f3d52a646 ("spi: ads7846 driver")
    Co-developed-by: David Jander <david@protonic.nl>
    Signed-off-by: David Jander <david@protonic.nl>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20201113112240.1360-1-o.rempel@pengutronix.de
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7c61b1ee77a25cffa0de5995715b5861c010b37
Author: David Jander <david@protonic.nl>
Date:   Wed Nov 11 11:00:59 2020 -0800

    Input: ads7846 - fix race that causes missing releases
    
    [ Upstream commit e52cd628a03f72a547dbf90ccb703ee64800504a ]
    
    If touchscreen is released while busy reading HWMON device, the release
    can be missed. The IRQ thread is not started because no touch is active
    and BTN_TOUCH release event is never sent.
    
    Fixes: f5a28a7d4858f94a ("Input: ads7846 - avoid pen up/down when reading hwmon")
    Co-developed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: David Jander <david@protonic.nl>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://lore.kernel.org/r/20201027105416.18773-1-o.rempel@pengutronix.de
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f01b0ce018825fe9a732136602cb79ff8369f25b
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Nov 17 14:10:45 2020 +0800

    drm/omap: dmm_tiler: fix return error code in omap_dmm_probe()
    
    [ Upstream commit 723ae803218da993143387bf966042eccefac077 ]
    
    Return -ENOMEM when allocating refill memory failed.
    
    Fixes: 71e8831f6407 ("drm/omap: DMM/TILER support for OMAP4+ platform")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201117061045.3452287-1-yangyingliang@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e126f9f63079c86027f49b04dc1598cd01993c8d
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Wed Nov 11 04:22:01 2020 +0100

    media: solo6x10: fix missing snd_card_free in error handling case
    
    [ Upstream commit dcdff74fa6bc00c32079d0bebd620764c26f2d89 ]
    
    Fix to goto snd_error in error handling case when fails
    to do snd_ctl_add, as done elsewhere in this function.
    
    Fixes: 28cae868cd24 ("[media] solo6x10: move out of staging into drivers/media/pci.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75a657c5cd19311dbaba658da6d4fdc642c25c9b
Author: Martin Wilck <mwilck@suse.com>
Date:   Thu Oct 29 18:08:45 2020 +0100

    scsi: core: Fix VPD LUN ID designator priorities
    
    [ Upstream commit 2e4209b3806cda9b89c30fd5e7bfecb7044ec78b ]
    
    The current implementation of scsi_vpd_lun_id() uses the designator length
    as an implicit measure of priority. This works most of the time, but not
    always. For example, some Hitachi storage arrays return this in VPD 0x83:
    
    VPD INQUIRY: Device Identification page
      Designation descriptor number 1, descriptor length: 24
        designator_type: T10 vendor identification,  code_set: ASCII
        associated with the Addressed logical unit
          vendor id: HITACHI
          vendor specific: 5030C3502025
      Designation descriptor number 2, descriptor length: 6
        designator_type: vendor specific [0x0],  code_set: Binary
        associated with the Target port
          vendor specific: 08 03
      Designation descriptor number 3, descriptor length: 20
        designator_type: NAA,  code_set: Binary
        associated with the Addressed logical unit
          NAA 6, IEEE Company_id: 0x60e8
          Vendor Specific Identifier: 0x7c35000
          Vendor Specific Identifier Extension: 0x30c35000002025
          [0x60060e8007c350000030c35000002025]
    
    The current code would use the first descriptor because it's longer than
    the NAA descriptor. But this is wrong, the kernel is supposed to prefer NAA
    descriptors over T10 vendor ID. Designator length should only be used to
    compare designators of the same type.
    
    This patch addresses the issue by separating designator priority and
    length.
    
    Link: https://lore.kernel.org/r/20201029170846.14786-1-mwilck@suse.com
    Fixes: 9983bed3907c ("scsi: Add scsi_vpd_lun_id()")
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69503879edbfca2f5f9c02048c561d6a94164a14
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Fri Oct 9 14:38:02 2020 +0200

    media: mtk-vcodec: add missing put_device() call in mtk_vcodec_release_dec_pm()
    
    [ Upstream commit 27c3943683f74e35e1d390ceb2e3639eff616ad6 ]
    
    mtk_vcodec_release_dec_pm() will be called in two places:
    
    a. mtk_vcodec_init_dec_pm() succeed while mtk_vcodec_probe() return error.
    b. mtk_vcodec_dec_remove().
    
    In both cases put_device() call is needed, since of_find_device_by_node()
    was called in mtk_vcodec_init_dec_pm() previously.
    
    Thus add put_devices() call in mtk_vcodec_release_dec_pm()
    
    Fixes: 590577a4e525 ("[media] vcodec: mediatek: Add Mediatek V4L2 Video Decoder Driver")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4185ca27340a0ad93c06d396e17f4ca6051d77b3
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 9 21:13:46 2020 +0800

    staging: greybus: codecs: Fix reference counter leak in error handling
    
    [ Upstream commit 3952659a6108f77a0d062d8e8487bdbdaf52a66c ]
    
    gb_pm_runtime_get_sync has increased the usage counter of the device here.
    Forgetting to call gb_pm_runtime_put_noidle will result in usage counter
    leak in the error branch of (gbcodec_hw_params and gbcodec_prepare). We
    fixed it by adding it.
    
    Fixes: c388ae7696992 ("greybus: audio: Update pm runtime support in dai_ops callback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201109131347.1725288-2-zhangqilong3@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d56cabe63e3863f9b0e65ea2325a13ea4011137a
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Tue Nov 3 00:34:01 2020 +0300

    MIPS: BCM47XX: fix kconfig dependency bug for BCM47XX_BCMA
    
    [ Upstream commit 3a5fe2fb9635c43359c9729352f45044f3c8df6b ]
    
    When BCM47XX_BCMA is enabled and BCMA_DRIVER_PCI is disabled, it results
    in the following Kbuild warning:
    
    WARNING: unmet direct dependencies detected for BCMA_DRIVER_PCI_HOSTMODE
      Depends on [n]: MIPS [=y] && BCMA_DRIVER_PCI [=n] && PCI_DRIVERS_LEGACY [=y] && BCMA [=y]=y
      Selected by [y]:
      - BCM47XX_BCMA [=y] && BCM47XX [=y] && PCI [=y]
    
    The reason is that BCM47XX_BCMA selects BCMA_DRIVER_PCI_HOSTMODE without
    depending on or selecting BCMA_DRIVER_PCI while BCMA_DRIVER_PCI_HOSTMODE
    depends on BCMA_DRIVER_PCI. This can also fail building the kernel.
    
    Honor the kconfig dependency to remove unmet direct dependency warnings
    and avoid any potential build failures.
    
    Fixes: c1d1c5d4213e ("bcm47xx: add support for bcma bus")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=209879
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f148715a99e6a9290077a777892c325660cb7c5d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 26 22:12:30 2020 +0100

    RDMa/mthca: Work around -Wenum-conversion warning
    
    [ Upstream commit fbb7dc5db6dee553b5a07c27e86364a5223e244c ]
    
    gcc points out a suspicious mixing of enum types in a function that
    converts from MTHCA_OPCODE_* values to IB_WC_* values:
    
    drivers/infiniband/hw/mthca/mthca_cq.c: In function 'mthca_poll_one':
    drivers/infiniband/hw/mthca/mthca_cq.c:607:21: warning: implicit conversion from 'enum <anonymous>' to 'enum ib_wc_opcode' [-Wenum-conversion]
      607 |    entry->opcode    = MTHCA_OPCODE_INVALID;
    
    Nothing seems to ever check for MTHCA_OPCODE_INVALID again, no idea if
    this is meaningful, but it seems harmless as it deals with an invalid
    input.
    
    Remove MTHCA_OPCODE_INVALID and set the ib_wc_opcode to 0xFF, which is
    still bogus, but at least doesn't make compiler warnings.
    
    Fixes: 2a4443a69934 ("[PATCH] IB/mthca: fill in opcode field for send completions")
    Link: https://lore.kernel.org/r/20201026211311.3887003-1-arnd@kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56150cbcb3a7c9c7ec9cefcf102db2a804e6307b
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Wed Nov 11 21:09:20 2020 +0800

    ASoC: arizona: Fix a wrong free in wm8997_probe
    
    [ Upstream commit 5e7aace13df24ff72511f29c14ebbfe638ef733c ]
    
    In the normal path, we should not free the arizona,
    we should return immediately. It will be free when
    call remove operation.
    
    Fixes: 31833ead95c2c ("ASoC: arizona: Move request of speaker IRQs into bus probe")
    Reported-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20201111130923.220186-2-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2cd40d396ecbf41c14054e64d60c76ba28d2566
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Wed Nov 11 12:13:26 2020 +0800

    ASoC: wm8998: Fix PM disable depth imbalance on error
    
    [ Upstream commit 193aa0a043645220d2a2f783ba06ae13d4601078 ]
    
    The pm_runtime_enable will increase power disable depth. Thus
    a pairing decrement is needed on the error handling path to
    keep it balanced according to context.
    
    Fixes: 31833ead95c2c ("ASoC: arizona: Move request of speaker IRQs into bus probe")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Richard Fitzgerald <rf@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20201111041326.1257558-4-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab90de7c074e513b9a25812a0f0f47be2311edeb
Author: Tsuchiya Yuto <kitakar@gmail.com>
Date:   Wed Oct 28 23:21:09 2020 +0900

    mwifiex: fix mwifiex_shutdown_sw() causing sw reset failure
    
    [ Upstream commit fa74cb1dc0f4da46c441b735ca865ac52de42c0e ]
    
    When a PCIe function level reset (FLR) is performed but without fw reset for
    some reasons (e.g., on Microsoft Surface devices, fw reset requires other
    quirks), it fails to reset wifi properly. You can trigger the issue on such
    devices via debugfs entry for reset:
    
        $ echo 1 | sudo tee /sys/kernel/debug/mwifiex/mlan0/reset
    
    and the resulting dmesg log:
    
        [   45.740508] mwifiex_pcie 0000:03:00.0: Resetting per request
        [   45.742937] mwifiex_pcie 0000:03:00.0: info: successfully disconnected from [BSSID]: reason code 3
        [   45.744666] mwifiex_pcie 0000:03:00.0: info: shutdown mwifiex...
        [   45.751530] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.751539] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771691] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771695] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   45.771697] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771698] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   45.771699] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771701] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   45.771702] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771703] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   45.771704] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771705] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   45.771707] mwifiex_pcie 0000:03:00.0: PREP_CMD: card is removed
        [   45.771708] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   53.099343] mwifiex_pcie 0000:03:00.0: info: trying to associate to '[SSID]' bssid [BSSID]
        [   53.241870] mwifiex_pcie 0000:03:00.0: info: associated to bssid [BSSID] successfully
        [   75.377942] mwifiex_pcie 0000:03:00.0: cmd_wait_q terminated: -110
        [   85.385491] mwifiex_pcie 0000:03:00.0: info: successfully disconnected from [BSSID]: reason code 15
        [   87.539408] mwifiex_pcie 0000:03:00.0: cmd_wait_q terminated: -110
        [   87.539412] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [   99.699917] mwifiex_pcie 0000:03:00.0: cmd_wait_q terminated: -110
        [   99.699925] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [  111.859802] mwifiex_pcie 0000:03:00.0: cmd_wait_q terminated: -110
        [  111.859808] mwifiex_pcie 0000:03:00.0: deleting the crypto keys
        [...]
    
    When comparing mwifiex_shutdown_sw() with mwifiex_pcie_remove(), it
    lacks mwifiex_init_shutdown_fw().
    
    This commit fixes mwifiex_shutdown_sw() by adding the missing
    mwifiex_init_shutdown_fw().
    
    Fixes: 4c5dae59d2e9 ("mwifiex: add PCIe function level reset support")
    Signed-off-by: Tsuchiya Yuto <kitakar@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201028142110.18144-2-kitakar@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d96dd6d3edf76c2cd9229cdcf523660cda8e804
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:06 2020 +0800

    spi: tegra114: fix reference leak in tegra spi ops
    
    [ Upstream commit a042184c7fb99961ea083d4ec192614bec671969 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_spi_setup and
    tegra_spi_resume), so we should fix it.
    
    Fixes: f333a331adfac ("spi/tegra114: add spi driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141306.5607-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f726e6352b737edd62513b79d4cca6341dd040a4
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:23 2020 +0800

    spi: tegra20-sflash: fix reference leak in tegra_sflash_resume
    
    [ Upstream commit 3482e797ab688da6703fe18d8bad52f94199f4f2 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in tegra_sflash_resume, so we should fix it.
    
    Fixes: 8528547bcc336 ("spi: tegra: add spi driver for sflash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141323.5841-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de23898f1dee568911e5446df40773d9e981472c
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:13:45 2020 +0800

    spi: tegra20-slink: fix reference leak in slink ops of tegra20
    
    [ Upstream commit 763eab7074f6e71babd85d796156f05a675f9510 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in two callers(tegra_slink_setup and
    tegra_slink_resume), so we should fix it.
    
    Fixes: dc4dc36056392 ("spi: tegra: add spi driver for SLINK controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103141345.6188-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 253fe666862b36c7e1e06d1a33f169d8db2d6a4f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 3 22:09:47 2020 +0800

    spi: spi-ti-qspi: fix reference leak in ti_qspi_setup
    
    [ Upstream commit 45c0cba753641e5d7c3207f04241bd0e7a021698 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in ti_qspi_setup, so we should fix it.
    
    Fixes: 505a14954e2d7 ("spi/qspi: Add qspi flash controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201103140947.3815-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f26cea1b93eba929e0de56ddd9a5bb9a551c36e
Author: Anmol Karn <anmol.karan123@gmail.com>
Date:   Wed Sep 30 19:48:13 2020 +0530

    Bluetooth: Fix null pointer dereference in hci_event_packet()
    
    [ Upstream commit 6dfccd13db2ff2b709ef60a50163925d477549aa ]
    
    AMP_MGR is getting derefernced in hci_phy_link_complete_evt(), when called
    from hci_event_packet() and there is a possibility, that hcon->amp_mgr may
    not be found when accessing after initialization of hcon.
    
    - net/bluetooth/hci_event.c:4945
    The bug seems to get triggered in this line:
    
    bredr_hcon = hcon->amp_mgr->l2cap_conn->hcon;
    
    Fix it by adding a NULL check for the hcon->amp_mgr before checking the ev-status.
    
    Fixes: d5e911928bd8 ("Bluetooth: AMP: Process Physical Link Complete evt")
    Reported-and-tested-by: syzbot+0bef568258653cff272f@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=0bef568258653cff272f
    Signed-off-by: Anmol Karn <anmol.karan123@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05b1d625cc7bdb578722c392c635ae5f5101d2ea
Author: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
Date:   Sat Nov 7 14:39:26 2020 +0100

    arm64: dts: exynos: Correct psci compatible used on Exynos7
    
    [ Upstream commit e1e47fbca668507a81bb388fcae044b89d112ecc ]
    
    It's not possible to reboot or poweroff Exynos7420 using PSCI. Instead
    we need to use syscon reboot/poweroff drivers, like it's done for other
    Exynos SoCs. This was confirmed by checking vendor source and testing it
    on Samsung Galaxy S6 device based on this SoC.
    
    To be able to use custom restart/poweroff handlers instead of PSCI
    functions, we need to correct psci compatible. This also requires us to
    provide function ids for CPU_ON and CPU_OFF.
    
    Fixes: fb026cb65247 ("arm64: dts: Add reboot node for exynos7")
    Fixes: b9024cbc937d ("arm64: dts: Add initial device tree support for exynos7")
    Signed-off-by: Paweł Chmiel <pawel.mikolaj.chmiel@gmail.com>
    Link: https://lore.kernel.org/r/20201107133926.37187-2-pawel.mikolaj.chmiel@gmail.com
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e364c175e5a3a5718f2d95df15031281c1d85db
Author: Paul Moore <paul@paul-moore.com>
Date:   Tue Nov 3 11:49:38 2020 -0500

    selinux: fix inode_doinit_with_dentry() LABEL_INVALID error handling
    
    [ Upstream commit 200ea5a2292dc444a818b096ae6a32ba3caa51b9 ]
    
    A previous fix, commit 83370b31a915 ("selinux: fix error initialization
    in inode_doinit_with_dentry()"), changed how failures were handled
    before a SELinux policy was loaded.  Unfortunately that patch was
    potentially problematic for two reasons: it set the isec->initialized
    state without holding a lock, and it didn't set the inode's SELinux
    label to the "default" for the particular filesystem.  The later can
    be a problem if/when a later attempt to revalidate the inode fails
    and SELinux reverts to the existing inode label.
    
    This patch should restore the default inode labeling that existed
    before the original fix, without affecting the LABEL_INVALID marking
    such that revalidation will still be attempted in the future.
    
    Fixes: 83370b31a915 ("selinux: fix error initialization in inode_doinit_with_dentry()")
    Reported-by: Sven Schnelle <svens@linux.ibm.com>
    Tested-by: Sven Schnelle <svens@linux.ibm.com>
    Reviewed-by: Ondrej Mosnacek <omosnace@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2cc5f799786451fa394fe55e86564af6a7c80be3
Author: Cezary Rojewski <cezary.rojewski@intel.com>
Date:   Mon Oct 26 11:01:29 2020 +0100

    ASoC: pcm: DRAIN support reactivation
    
    [ Upstream commit 4c22b80f61540ea99d9b4af0127315338755f05b ]
    
    soc-pcm's dpcm_fe_dai_do_trigger() supported DRAIN commnad up to kernel
    v5.4 where explicit switch(cmd) has been introduced which takes into
    account all SNDRV_PCM_TRIGGER_xxx but SNDRV_PCM_TRIGGER_DRAIN. Update
    switch statement to reactive support for it.
    
    As DRAIN is somewhat unique by lacking negative/stop counterpart, bring
    behaviour of dpcm_fe_dai_do_trigger() for said command back to its
    pre-v5.4 state by adding it to START/RESUME/PAUSE_RELEASE group.
    
    Fixes: acbf27746ecf ("ASoC: pcm: update FE/BE trigger order based on the command")
    Signed-off-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Link: https://lore.kernel.org/r/20201026100129.8216-1-cezary.rojewski@intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c80dcdb2180542d20d72a5202bcbc41958114898
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Nov 2 22:56:51 2020 +0800

    spi: img-spfi: fix reference leak in img_spfi_resume
    
    [ Upstream commit ee5558a9084584015c8754ffd029ce14a5827fa8 ]
    
    pm_runtime_get_sync will increment pm usage counter even it
    failed. Forgetting to pm_runtime_put_noidle will result in
    reference leak in img_spfi_resume, so we should fix it.
    
    Fixes: deba25800a12b ("spi: Add driver for IMG SPFI controller")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201102145651.3875-1-zhangqilong3@huawei.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96e1f033a71ab877f16f9bca5886fe2b26205452
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Thu Oct 8 09:34:56 2020 +0000

    crypto: talitos - Fix return type of current_desc_hdr()
    
    [ Upstream commit 0237616173fd363a54bd272aa3bd376faa1d7caa ]
    
    current_desc_hdr() returns a u32 but in fact this is a __be32,
    leading to a lot of sparse warnings.
    
    Change the return type to __be32 and ensure it is handled as
    sure by the caller.
    
    Fixes: 3e721aeb3df3 ("crypto: talitos - handle descriptor not found in error path")
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b52f2e63c29455c1ecf95e4983a71a02ba64960d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Oct 20 16:46:55 2020 +0200

    sched: Reenable interrupts in do_sched_yield()
    
    [ Upstream commit 345a957fcc95630bf5535d7668a59ed983eb49a7 ]
    
    do_sched_yield() invokes schedule() with interrupts disabled which is
    not allowed. This goes back to the pre git era to commit a6efb709806c
    ("[PATCH] irqlock patch 2.5.27-H6") in the history tree.
    
    Reenable interrupts and remove the misleading comment which "explains" it.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/87r1pt7y5c.fsf@nanos.tec.linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dba26b2d33801f666f5ea22570c5d0a3db31f59a
Author: Peng Liu <iwtbavbm@gmail.com>
Date:   Thu Oct 8 23:49:42 2020 +0800

    sched/deadline: Fix sched_dl_global_validate()
    
    [ Upstream commit a57415f5d1e43c3a5c5d412cd85e2792d7ed9b11 ]
    
    When change sched_rt_{runtime, period}_us, we validate that the new
    settings should at least accommodate the currently allocated -dl
    bandwidth:
    
      sched_rt_handler()
        --> sched_dl_bandwidth_validate()
            {
                    new_bw = global_rt_runtime()/global_rt_period();
    
                    for_each_possible_cpu(cpu) {
                            dl_b = dl_bw_of(cpu);
                            if (new_bw < dl_b->total_bw)    <-------
                                    ret = -EBUSY;
                    }
            }
    
    But under CONFIG_SMP, dl_bw is per root domain , but not per CPU,
    dl_b->total_bw is the allocated bandwidth of the whole root domain.
    Instead, we should compare dl_b->total_bw against "cpus*new_bw",
    where 'cpus' is the number of CPUs of the root domain.
    
    Also, below annotation(in kernel/sched/sched.h) implied implementation
    only appeared in SCHED_DEADLINE v2[1], then deadline scheduler kept
    evolving till got merged(v9), but the annotation remains unchanged,
    meaningless and misleading, update it.
    
    * With respect to SMP, the bandwidth is given on a per-CPU basis,
    * meaning that:
    *  - dl_bw (< 100%) is the bandwidth of the system (group) on each CPU;
    *  - dl_total_bw array contains, in the i-eth element, the currently
    *    allocated bandwidth on the i-eth CPU.
    
    [1]: https://lore.kernel.org/lkml/1267385230.13676.101.camel@Palantir/
    
    Fixes: 332ac17ef5bf ("sched/deadline: Add bandwidth management for SCHED_DEADLINE tasks")
    Signed-off-by: Peng Liu <iwtbavbm@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Daniel Bristot de Oliveira <bristot@redhat.com>
    Acked-by: Juri Lelli <juri.lelli@redhat.com>
    Link: https://lkml.kernel.org/r/db6bbda316048cda7a1bbc9571defde193a8d67e.1602171061.git.iwtbavbm@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2e0f852bd1aa853ea857eb108715e303b0b5eb3
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Sep 21 00:10:16 2020 +0200

    ARM: p2v: fix handling of LPAE translation in BE mode
    
    [ Upstream commit 4e79f0211b473f8e1eab8211a9fd50cc41a3a061 ]
    
    When running in BE mode on LPAE hardware with a PA-to-VA translation
    that exceeds 4 GB, we patch bits 39:32 of the offset into the wrong
    byte of the opcode. So fix that, by rotating the offset in r0 to the
    right by 8 bits, which will put the 8-bit immediate in bits 31:24.
    
    Note that this will also move bit #22 in its correct place when
    applying the rotation to the constant #0x400000.
    
    Fixes: d9a790df8e984 ("ARM: 7883/1: fix mov to mvn conversion in case of 64 bit phys_addr_t and BE")
    Acked-by: Nicolas Pitre <nico@fluxnic.net>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29956cfe5ee47b15e8063fb7ab72460773e73ae4
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Tue Oct 27 19:06:48 2020 -0400

    x86/mm/ident_map: Check for errors from ident_pud_init()
    
    [ Upstream commit 1fcd009102ee02e217f2e7635ab65517d785da8e ]
    
    Commit
    
      ea3b5e60ce80 ("x86/mm/ident_map: Add 5-level paging support")
    
    added ident_p4d_init() to support 5-level paging, but this function
    doesn't check and return errors from ident_pud_init().
    
    For example, the decompressor stub uses this code to create an identity
    mapping. If it runs out of pages while trying to allocate a PMD
    pagetable, the error will be currently ignored.
    
    Fix this to propagate errors.
    
     [ bp: Space out statements for better readability. ]
    
    Fixes: ea3b5e60ce80 ("x86/mm/ident_map: Add 5-level paging support")
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Link: https://lkml.kernel.org/r/20201027230648.1885111-1-nivedita@alum.mit.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aadca36630a7bbf4ef1afe18d1ff5c5bcaf701f8
Author: Bob Pearson <rpearsonhpe@gmail.com>
Date:   Tue Oct 13 12:07:42 2020 -0500

    RDMA/rxe: Compute PSN windows correctly
    
    [ Upstream commit bb3ab2979fd69db23328691cb10067861df89037 ]
    
    The code which limited the number of unacknowledged PSNs was incorrect.
    The PSNs are limited to 24 bits and wrap back to zero from 0x00ffffff.
    The test was computing a 32 bit value which wraps at 32 bits so that
    qp->req.psn can appear smaller than the limit when it is actually larger.
    
    Replace '>' test with psn_compare which is used for other PSN comparisons
    and correctly handles the 24 bit size.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20201013170741.3590-1-rpearson@hpe.com
    Signed-off-by: Bob Pearson <rpearson@hpe.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55294cebd16407a64493e460bc711df00f9b3d37
Author: Tianyue Ren <rentianyue@kylinos.cn>
Date:   Fri Oct 9 09:36:30 2020 +0800

    selinux: fix error initialization in inode_doinit_with_dentry()
    
    [ Upstream commit 83370b31a915493231e5b9addc72e4bef69f8d31 ]
    
    Mark the inode security label as invalid if we cannot find
    a dentry so that we will retry later rather than marking it
    initialized with the unlabeled SID.
    
    Fixes: 9287aed2ad1f ("selinux: Convert isec->lock into a spinlock")
    Signed-off-by: Tianyue Ren <rentianyue@kylinos.cn>
    [PM: minor comment tweaks]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 473ae283fc9b18f54f19b5b92da147347b32ad9f
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Wed Oct 21 14:49:52 2020 +0300

    RDMA/bnxt_re: Set queue pair state when being queried
    
    [ Upstream commit 53839b51a7671eeb3fb44d479d541cf3a0f2dd45 ]
    
    The API for ib_query_qp requires the driver to set cur_qp_state on return,
    add the missing set.
    
    Fixes: 1ac5a4047975 ("RDMA/bnxt_re: Add bnxt_re RoCE driver")
    Link: https://lore.kernel.org/r/20201021114952.38876-1-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Acked-by: Selvin Xavier <selvin.xavier@broadcom.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48b4d4ab96116b45d00933ab12cf6dfea316ec7a
Author: Nicolas Boichat <drinkcat@chromium.org>
Date:   Mon Sep 28 11:31:35 2020 +0800

    soc: mediatek: Check if power domains can be powered on at boot time
    
    [ Upstream commit 4007844b05815717f522c7ea9914e24ad0ff6c79 ]
    
    In the error case, where a power domain cannot be powered on
    successfully at boot time (in mtk_register_power_domains),
    pm_genpd_init would still be called with is_off=false, and the
    system would later try to disable the power domain again, triggering
    warnings as disabled clocks are disabled again (and other potential
    issues).
    
    Also print a warning splat in that case, as this should never
    happen.
    
    Fixes: c84e358718a66f7 ("soc: Mediatek: Add SCPSYS power domain driver")
    Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
    Link: https://lore.kernel.org/r/20200928113107.v2.1.I5e6f8c262031d0451fe7241b744f4f3111c1ce71@changeid
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e6b599f3783505c248b8540090f6c25c679b7f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 23 14:31:42 2020 +0300

    soc: renesas: rmobile-sysc: Fix some leaks in rmobile_init_pm_domains()
    
    [ Upstream commit cf25d802e029c31efac8bdc979236927f37183bd ]
    
    This code needs to call iounmap() on one error path.
    
    Fixes: 2173fc7cb681 ("ARM: shmobile: R-Mobile: Add DT support for PM domains")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200923113142.GC1473821@mwanda
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36602f03deb4a877be04333c2b219228a3c4ad86
Author: Tom Rix <trix@redhat.com>
Date:   Sat Oct 3 12:39:28 2020 -0700

    drm/gma500: fix double free of gma_connector
    
    [ Upstream commit 4e19d51ca5b28a1d435a844c7b2a8e1b1b6fa237 ]
    
    clang static analysis reports this problem:
    
    cdv_intel_dp.c:2101:2: warning: Attempt to free released memory
            kfree(gma_connector);
            ^~~~~~~~~~~~~~~~~~~~
    
    In cdv_intel_dp_init() when the call to cdv_intel_edp_panel_vdd_off()
    fails, the handler calls cdv_intel_dp_destroy(connector) which does
    the first free of gma_connector. So adjust the goto label and skip
    the second free.
    
    Fixes: d112a8163f83 ("gma500/cdv: Add eDP support")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201003193928.18869-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f64ef792773cb1d73e2e3e924cfba7bfdbb0b4c3
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Wed Sep 9 03:17:00 2020 -0400

    Bluetooth: Fix slab-out-of-bounds read in hci_le_direct_adv_report_evt()
    
    commit f7e0e8b2f1b0a09b527885babda3e912ba820798 upstream.
    
    `num_reports` is not being properly checked. A malformed event packet with
    a large `num_reports` number makes hci_le_direct_adv_report_evt() read out
    of bounds. Fix it.
    
    Cc: stable@vger.kernel.org
    Fixes: 2f010b55884e ("Bluetooth: Add support for handling LE Direct Advertising Report events")
    Reported-and-tested-by: syzbot+24ebd650e20bd263ca01@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=24ebd650e20bd263ca01
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35b86f20e9e216717a1d155b08f5a632593a2877
Author: Dae R. Jeong <dae.r.jeong@kaist.ac.kr>
Date:   Thu Oct 22 10:21:28 2020 +0900

    md: fix a warning caused by a race between concurrent md_ioctl()s
    
    commit c731b84b51bf7fe83448bea8f56a6d55006b0615 upstream.
    
    Syzkaller reports a warning as belows.
    WARNING: CPU: 0 PID: 9647 at drivers/md/md.c:7169
    ...
    Call Trace:
    ...
    RIP: 0010:md_ioctl+0x4017/0x5980 drivers/md/md.c:7169
    RSP: 0018:ffff888096027950 EFLAGS: 00010293
    RAX: ffff88809322c380 RBX: 0000000000000932 RCX: ffffffff84e266f2
    RDX: 0000000000000000 RSI: ffffffff84e299f7 RDI: 0000000000000007
    RBP: ffff888096027bc0 R08: ffff88809322c380 R09: ffffed101341a482
    R10: ffff888096027940 R11: ffff88809a0d240f R12: 0000000000000932
    R13: ffff8880a2c14100 R14: ffff88809a0d2268 R15: ffff88809a0d2408
     __blkdev_driver_ioctl block/ioctl.c:304 [inline]
     blkdev_ioctl+0xece/0x1c10 block/ioctl.c:606
     block_ioctl+0xee/0x130 fs/block_dev.c:1930
     vfs_ioctl fs/ioctl.c:46 [inline]
     file_ioctl fs/ioctl.c:509 [inline]
     do_vfs_ioctl+0xd5f/0x1380 fs/ioctl.c:696
     ksys_ioctl+0xab/0xd0 fs/ioctl.c:713
     __do_sys_ioctl fs/ioctl.c:720 [inline]
     __se_sys_ioctl fs/ioctl.c:718 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:718
     do_syscall_64+0xfd/0x680 arch/x86/entry/common.c:301
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    This is caused by a race between two concurrenct md_ioctl()s closing
    the array.
    CPU1 (md_ioctl())                   CPU2 (md_ioctl())
    ------                              ------
    set_bit(MD_CLOSING, &mddev->flags);
    did_set_md_closing = true;
                                        WARN_ON_ONCE(test_bit(MD_CLOSING,
                                                &mddev->flags));
    if(did_set_md_closing)
        clear_bit(MD_CLOSING, &mddev->flags);
    
    Fix the warning by returning immediately if the MD_CLOSING bit is set
    in &mddev->flags which indicates that the array is being closed.
    
    Fixes: 065e519e71b2 ("md: MD_CLOSING needs to be cleared after called md_set_readonly or do_md_stop")
    Reported-by: syzbot+1e46a0864c1a6e9bd3d8@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dae R. Jeong <dae.r.jeong@kaist.ac.kr>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a175a09e4cebea03ec8acbad864a696f49aa5e49
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Oct 26 13:07:15 2020 -0700

    crypto: af_alg - avoid undefined behavior accessing salg_name
    
    commit 92eb6c3060ebe3adf381fd9899451c5b047bb14d upstream.
    
    Commit 3f69cc60768b ("crypto: af_alg - Allow arbitrarily long algorithm
    names") made the kernel start accepting arbitrarily long algorithm names
    in sockaddr_alg.  However, the actual length of the salg_name field
    stayed at the original 64 bytes.
    
    This is broken because the kernel can access indices >= 64 in salg_name,
    which is undefined behavior -- even though the memory that is accessed
    is still located within the sockaddr structure.  It would only be
    defined behavior if the array were properly marked as arbitrary-length
    (either by making it a flexible array, which is the recommended way
    these days, or by making it an array of length 0 or 1).
    
    We can't simply change salg_name into a flexible array, since that would
    break source compatibility with userspace programs that embed
    sockaddr_alg into another struct, or (more commonly) declare a
    sockaddr_alg like 'struct sockaddr_alg sa = { .salg_name = "foo" };'.
    
    One solution would be to change salg_name into a flexible array only
    when '#ifdef __KERNEL__'.  However, that would keep userspace without an
    easy way to actually use the longer algorithm names.
    
    Instead, add a new structure 'sockaddr_alg_new' that has the flexible
    array field, and expose it to both userspace and the kernel.
    Make the kernel use it correctly in alg_bind().
    
    This addresses the syzbot report
    "UBSAN: array-index-out-of-bounds in alg_bind"
    (https://syzkaller.appspot.com/bug?extid=92ead4eb8e26a26d465e).
    
    Reported-by: syzbot+92ead4eb8e26a26d465e@syzkaller.appspotmail.com
    Fixes: 3f69cc60768b ("crypto: af_alg - Allow arbitrarily long algorithm names")
    Cc: <stable@vger.kernel.org> # v4.12+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c33d158cad203873c55afe6bfde0b8e013797c22
Author: Antti Palosaari <crope@iki.fi>
Date:   Sat Aug 17 03:12:10 2019 +0200

    media: msi2500: assign SPI bus number dynamically
    
    commit 9c60cc797cf72e95bb39f32316e9f0e5f85435f9 upstream.
    
    SPI bus number must be assigned dynamically for each device, otherwise it
    will crash when multiple devices are plugged to system.
    
    Reported-and-tested-by: syzbot+c60ddb60b685777d9d59@syzkaller.appspotmail.com
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Antti Palosaari <crope@iki.fi>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b4b449c9bd10d03ba2aaa32518a5687b3fd630e
Author: Jan Kara <jack@suse.cz>
Date:   Mon Nov 2 16:16:29 2020 +0100

    quota: Sanity-check quota file headers on load
    
    commit 11c514a99bb960941535134f0587102855e8ddee upstream.
    
    Perform basic sanity checks of quota headers to avoid kernel crashes on
    corrupted quota files.
    
    CC: stable@vger.kernel.org
    Reported-by: syzbot+f816042a7ae2225f25ba@syzkaller.appspotmail.com
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7807c6b2c839eaf122334c13cb2b1927440be0f4
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Thu Dec 3 16:58:34 2020 +1100

    serial_core: Check for port state when tty is in error state
    
    commit 2f70e49ed860020f5abae4f7015018ebc10e1f0e upstream.
    
    At the moment opening a serial device node (such as /dev/ttyS3)
    succeeds even if there is no actual serial device behind it.
    Reading/writing/ioctls fail as expected because the uart port is not
    initialized (the type is PORT_UNKNOWN) and the TTY_IO_ERROR error state
    bit is set fot the tty.
    
    However setting line discipline does not have these checks
    8250_port.c (8250 is the default choice made by univ8250_console_init()).
    As the result of PORT_UNKNOWN, uart_port::iobase is NULL which
    a platform translates onto some address accessing which produces a crash
    like below.
    
    This adds tty_port_initialized() to uart_set_ldisc() to prevent the crash.
    
    Found by syzkaller.
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Link: https://lore.kernel.org/r/20201203055834.45838-1-aik@ozlabs.ru
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58d2fe580eed2260041155467954c71f149f6aff
Author: Julian Sax <jsbc@gmx.de>
Date:   Thu Nov 26 18:51:58 2020 +0100

    HID: i2c-hid: add Vero K147 to descriptor override
    
    commit c870d50ce387d84b6438211a7044c60afbd5d60a upstream.
    
    This device uses the SIPODEV SP1064 touchpad, which does not
    supply descriptors, so it has to be added to the override list.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Julian Sax <jsbc@gmx.de>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab05782ed01125d30b39944d76d2b5f0fb93f03a
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Oct 15 20:20:43 2020 +0200

    ARM: dts: exynos: fix USB 3.0 pins supply being turned off on Odroid XU
    
    commit bd7e7ff56feea7810df900fb09c9741d259861d9 upstream.
    
    On Odroid XU LDO12 and LDO15 supplies the power to USB 3.0 blocks but
    the GPK GPIO pins are supplied by LDO7 (VDDQ_LCD).  LDO7 also supplies
    GPJ GPIO pins.
    
    The Exynos pinctrl driver does not take any supplies, so to have entire
    GPIO block always available, make the regulator always on.
    
    Fixes: 88644b4c750b ("ARM: dts: exynos: Configure PWM, usb3503, PMIC and thermal on Odroid XU board")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201015182044.480562-3-krzk@kernel.org
    Tested-by: Gabriel Ribba Esteva <gabriel.ribbae@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35ab7ec27c05eb887b536de1f3cfe731d5e4c06d
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Oct 15 20:20:42 2020 +0200

    ARM: dts: exynos: fix USB 3.0 VBUS control and over-current pins on Exynos5410
    
    commit 3d992fd8f4e0f09c980726308d2f2725587b32d6 upstream.
    
    The VBUS control (PWREN) and over-current pins of USB 3.0 DWC3
    controllers are on Exynos5410 regular GPIOs.  This is different than for
    example on Exynos5422 where these are special ETC pins with proper reset
    values (pulls, functions).
    
    Therefore these pins should be configured to enable proper USB 3.0
    peripheral and host modes.  This also fixes over-current warning:
    
        [    6.024658] usb usb4-port1: over-current condition
        [    6.028271] usb usb3-port1: over-current condition
    
    Fixes: cb0896562228 ("ARM: dts: exynos: Add USB to Exynos5410")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201015182044.480562-2-krzk@kernel.org
    Tested-by: Gabriel Ribba Esteva <gabriel.ribbae@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cab949e15fae0d5e11627431b685d09609abbe5d
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Oct 15 20:20:41 2020 +0200

    ARM: dts: exynos: fix roles of USB 3.0 ports on Odroid XU
    
    commit ecc1ff532b499d20304a4f682247137025814c34 upstream.
    
    On Odroid XU board the USB3-0 port is a microUSB and USB3-1 port is USB
    type A (host).  The roles were copied from Odroid XU3 (Exynos5422)
    design which has it reversed.
    
    Fixes: 8149afe4dbf9 ("ARM: dts: exynos: Add initial support for Odroid XU board")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201015182044.480562-1-krzk@kernel.org
    Tested-by: Gabriel Ribba Esteva <gabriel.ribbae@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f9a8f519b6de5ce9bb79c429befff083cd531c5
Author: Fabio Estevam <festevam@gmail.com>
Date:   Mon Dec 7 10:09:09 2020 +0800

    usb: chipidea: ci_hdrc_imx: Pass DISABLE_DEVICE_STREAMING flag to imx6ul
    
    commit c7721e15f434920145c376e8fe77e1c079fc3726 upstream.
    
    According to the i.MX6UL Errata document:
    https://www.nxp.com/docs/en/errata/IMX6ULCE.pdf
    
    ERR007881 also affects i.MX6UL, so pass the
    CI_HDRC_DISABLE_DEVICE_STREAMING flag to workaround the issue.
    
    Fixes: 52fe568e5d71 ("usb: chipidea: imx: add imx6ul usb support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20201207020909.22483-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 958abb725b1d8f98c2b1ae2b8d559da91b5303df
Author: Will McVicker <willmcvicker@google.com>
Date:   Fri Nov 27 15:05:55 2020 +0100

    USB: gadget: f_rndis: fix bitrate for SuperSpeed and above
    
    commit b00f444f9add39b64d1943fa75538a1ebd54a290 upstream.
    
    Align the SuperSpeed Plus bitrate for f_rndis to match f_ncm's ncm_bitrate
    defined by commit 1650113888fe ("usb: gadget: f_ncm: add SuperSpeed descriptors
    for CDC NCM").
    
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: EJ Hsu <ejh@nvidia.com>
    Cc: Peter Chen <peter.chen@nxp.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Will McVicker <willmcvicker@google.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20201127140559.381351-2-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5eacf292742699a3fd0e78a901c6f7e9da39e2d6
Author: Jack Pham <jackp@codeaurora.org>
Date:   Tue Oct 27 16:07:31 2020 -0700

    usb: gadget: f_fs: Re-use SS descriptors for SuperSpeedPlus
    
    commit a353397b0d5dfa3c99b372505db3378fc919c6c6 upstream.
    
    In many cases a function that supports SuperSpeed can very well
    operate in SuperSpeedPlus, if a gadget controller supports it,
    as the endpoint descriptors (and companion descriptors) are
    generally identical and can be re-used. This is true for two
    commonly used functions: Android's ADB and MTP. So we can simply
    assign the usb_function's ssp_descriptors array to point to its
    ss_descriptors, if available. Similarly, we need to allow an
    epfile's ioctl for FUNCTIONFS_ENDPOINT_DESC to correctly
    return the corresponding SuperSpeed endpoint descriptor in case
    the connected speed is SuperSpeedPlus as well.
    
    The only exception is if a function wants to implement an
    Isochronous endpoint capable of transferring more than 48KB per
    service interval when operating at greater than USB 3.1 Gen1
    speed, in which case it would require an additional SuperSpeedPlus
    Isochronous Endpoint Companion descriptor to be returned as part
    of the Configuration Descriptor. Support for that would need
    to be separately added to the userspace-facing FunctionFS API
    which may not be a trivial task--likely a new descriptor format
    (v3?) may need to be devised to allow for separate SS and SSP
    descriptors to be supplied.
    
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201027230731.9073-1-jackp@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f05b89520fd6e24bb8acec301d0422d3d0099c0
Author: Will McVicker <willmcvicker@google.com>
Date:   Fri Nov 27 15:05:57 2020 +0100

    USB: gadget: f_midi: setup SuperSpeed Plus descriptors
    
    commit 457a902ba1a73b7720666b21ca038cd19764db18 upstream.
    
    Needed for SuperSpeed Plus support for f_midi.  This allows the
    gadget to work properly without crashing at SuperSpeed rates.
    
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Will McVicker <willmcvicker@google.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20201127140559.381351-4-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a48cd8ddae571f17bbbbe9398dc8e5adc1dee8f2
Author: taehyun.cho <taehyun.cho@samsung.com>
Date:   Fri Nov 27 15:05:56 2020 +0100

    USB: gadget: f_acm: add support for SuperSpeed Plus
    
    commit 3ee05c20656782387aa9eb010fdb9bb16982ac3f upstream.
    
    Setup the SuperSpeed Plus descriptors for f_acm.  This allows the gadget
    to work properly without crashing at SuperSpeed rates.
    
    Cc: Felipe Balbi <balbi@kernel.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: taehyun.cho <taehyun.cho@samsung.com>
    Signed-off-by: Will McVicker <willmcvicker@google.com>
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20201127140559.381351-3-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5660c07b66aac2ee44c156545e3f59f064fa9cea
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Dec 9 11:42:21 2020 +0100

    USB: serial: option: add interface-number sanity check to flag handling
    
    commit a251963f76fa0226d0fdf0c4f989496f18d9ae7f upstream.
    
    Add an interface-number sanity check before testing the device flags to
    avoid relying on undefined behaviour when left shifting in case a device
    uses an interface number greater than or equal to BITS_PER_LONG (i.e. 64
    or 32).
    
    Reported-by: syzbot+8881b478dad0a7971f79@syzkaller.appspotmail.com
    Fixes: c3a65808f04a ("USB: serial: option: reimplement interface masking")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcc7abbe4893bb9fdb6530fc2252fe6cba316368
Author: Nicolin Chen <nicoleotsuka@gmail.com>
Date:   Wed Nov 18 20:44:57 2020 -0800

    soc/tegra: fuse: Fix index bug in get_process_id
    
    commit b9ce9b0f83b536a4ac7de7567a265d28d13e5bea upstream.
    
    This patch simply fixes a bug of referencing speedos[num] in every
    for-loop iteration in get_process_id function.
    
    Fixes: 0dc5a0d83675 ("soc/tegra: fuse: Add Tegra210 support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Nicolin Chen <nicoleotsuka@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d12b762940494b63be5b381cf4fecd88fa3e2e6b
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Nov 13 15:19:10 2020 +0100

    dm table: Remove BUG_ON(in_interrupt())
    
    [ Upstream commit e7b624183d921b49ef0a96329f21647d38865ee9 ]
    
    The BUG_ON(in_interrupt()) in dm_table_event() is a historic leftover from
    a rework of the dm table code which changed the calling context.
    
    Issuing a BUG for a wrong calling context is frowned upon and
    in_interrupt() is deprecated and only covering parts of the wrong
    contexts. The sanity check for the context is covered by
    CONFIG_DEBUG_ATOMIC_SLEEP and other debug facilities already.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d21c3e7c541c9d4ee22327232e4b92e7fddfeb4
Author: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
Date:   Mon Nov 30 13:57:33 2020 +0530

    scsi: mpt3sas: Increase IOCInit request timeout to 30s
    
    [ Upstream commit 85dad327d9b58b4c9ce08189a2707167de392d23 ]
    
    Currently the IOCInit request message timeout is set to 10s. This is not
    sufficient in some scenarios such as during HBA FW downgrade operations.
    
    Increase the IOCInit request timeout to 30s.
    
    Link: https://lore.kernel.org/r/20201130082733.26120-1-sreekanth.reddy@broadcom.com
    Signed-off-by: Sreekanth Reddy <sreekanth.reddy@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb05c453f797409496101eb063f7fb0e0a2df415
Author: Sven Eckelmann <sven@narfation.org>
Date:   Thu Nov 26 13:52:47 2020 +0100

    vxlan: Copy needed_tailroom from lowerdev
    
    [ Upstream commit a5e74021e84bb5eadf760aaf2c583304f02269be ]
    
    While vxlan doesn't need any extra tailroom, the lowerdev might need it. In
    that case, copy it over to reduce the chance for additional (re)allocations
    in the transmit path.
    
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Link: https://lore.kernel.org/r/20201126125247.1047977-2-sven@narfation.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 175691576ed7185e14ac4a50175dc0675a95db51
Author: Sven Eckelmann <sven@narfation.org>
Date:   Thu Nov 26 13:52:46 2020 +0100

    vxlan: Add needed_headroom for lower device
    
    [ Upstream commit 0a35dc41fea67ac4495ce7584406bf9557a6e7d0 ]
    
    It was observed that sending data via batadv over vxlan (on top of
    wireguard) reduced the performance massively compared to raw ethernet or
    batadv on raw ethernet. A check of perf data showed that the
    vxlan_build_skb was calling all the time pskb_expand_head to allocate
    enough headroom for:
    
      min_headroom = LL_RESERVED_SPACE(dst->dev) + dst->header_len
                    + VXLAN_HLEN + iphdr_len;
    
    But the vxlan_config_apply only requested needed headroom for:
    
      lowerdev->hard_header_len + VXLAN6_HEADROOM or VXLAN_HEADROOM
    
    So it completely ignored the needed_headroom of the lower device. The first
    caller of net_dev_xmit could therefore never make sure that enough headroom
    was allocated for the rest of the transmit path.
    
    Cc: Annika Wickert <annika.wickert@exaring.de>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Tested-by: Annika Wickert <aw@awlnx.space>
    Link: https://lore.kernel.org/r/20201126125247.1047977-1-sven@narfation.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit beb1fcb879f2a48778170ac61d169c5af91beb6a
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Fri Oct 30 09:34:24 2020 +0800

    drm/tegra: sor: Disable clocks on error in tegra_sor_init()
    
    [ Upstream commit bf3a3cdcad40e5928a22ea0fd200d17fd6d6308d ]
    
    Fix the missing clk_disable_unprepare() before return from
    tegra_sor_init() in the error handling case.
    
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fa8aa4ec829159f9e3a3b0ba1fd9b6981b1ce8eb
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Thu Nov 26 20:25:29 2020 +1000

    kernel/cpu: add arch override for clear_tasks_mm_cpumask() mm handling
    
    [ Upstream commit 8ff00399b153440c1c83e20c43020385b416415b ]
    
    powerpc/64s keeps a counter in the mm which counts bits set in
    mm_cpumask as well as other things. This means it can't use generic code
    to clear bits out of the mask and doesn't adjust the arch specific
    counter.
    
    Add an arch override that allows powerpc/64s to use
    clear_tasks_mm_cpumask().
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Reviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201126102530.691335-4-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 876e19e7b6015df905a85e717e26a815846506e1
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Fri Dec 4 08:42:05 2020 +0200

    RDMA/cm: Fix an attempt to use non-valid pointer when cleaning timewait
    
    [ Upstream commit 340b940ea0ed12d9adbb8f72dea17d516b2019e8 ]
    
    If cm_create_timewait_info() fails, the timewait_info pointer will contain
    an error value and will be used in cm_remove_remote() later.
    
      general protection fault, probably for non-canonical address 0xdffffc0000000024: 0000 [#1] SMP KASAN PTI
      KASAN: null-ptr-deref in range [0×0000000000000120-0×0000000000000127]
      CPU: 2 PID: 12446 Comm: syz-executor.3 Not tainted 5.10.0-rc5-5d4c0742a60e #27
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      RIP: 0010:cm_remove_remote.isra.0+0x24/0×170 drivers/infiniband/core/cm.c:978
      Code: 84 00 00 00 00 00 41 54 55 53 48 89 fb 48 8d ab 2d 01 00 00 e8 7d bf 4b fe 48 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <0f> b6 04 02 48 89 ea 83 e2 07 38 d0 7f 08 84 c0 0f 85 fc 00 00 00
      RSP: 0018:ffff888013127918 EFLAGS: 00010006
      RAX: dffffc0000000000 RBX: fffffffffffffff4 RCX: ffffc9000a18b000
      RDX: 0000000000000024 RSI: ffffffff82edc573 RDI: fffffffffffffff4
      RBP: 0000000000000121 R08: 0000000000000001 R09: ffffed1002624f1d
      R10: 0000000000000003 R11: ffffed1002624f1c R12: ffff888107760c70
      R13: ffff888107760c40 R14: fffffffffffffff4 R15: ffff888107760c9c
      FS:  00007fe1ffcc1700(0000) GS:ffff88811a600000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000001b2ff21000 CR3: 000000010f504001 CR4: 0000000000370ee0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       cm_destroy_id+0x189/0×15b0 drivers/infiniband/core/cm.c:1155
       cma_connect_ib drivers/infiniband/core/cma.c:4029 [inline]
       rdma_connect_locked+0x1100/0×17c0 drivers/infiniband/core/cma.c:4107
       rdma_connect+0x2a/0×40 drivers/infiniband/core/cma.c:4140
       ucma_connect+0x277/0×340 drivers/infiniband/core/ucma.c:1069
       ucma_write+0x236/0×2f0 drivers/infiniband/core/ucma.c:1724
       vfs_write+0x220/0×830 fs/read_write.c:603
       ksys_write+0x1df/0×240 fs/read_write.c:658
       do_syscall_64+0x33/0×40 arch/x86/entry/common.c:46
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: a977049dacde ("[PATCH] IB: Add the kernel CM implementation")
    Link: https://lore.kernel.org/r/20201204064205.145795-1-leon@kernel.org
    Reviewed-by: Maor Gottlieb <maorg@nvidia.com>
    Reported-by: Amit Matityahu <mitm@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8683bfbb2632f0c932de958269051ae366d654e5
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Dec 4 14:35:06 2020 +0100

    can: softing: softing_netdev_open(): fix error handling
    
    [ Upstream commit 4d1be581ec6b92a338bb7ed23e1381f45ddf336f ]
    
    If softing_netdev_open() fails, we should call close_candev() to avoid
    reference leak.
    
    Fixes: 03fd3cf5a179d ("can: add driver for Softing card")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Acked-by: Kurt Van Dijck <dev.kurt@vandijck-laurijssen.be>
    Link: https://lore.kernel.org/r/20201202151632.1343786-1-zhangqilong3@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Link: https://lore.kernel.org/r/20201204133508.742120-2-mkl@pengutronix.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0428141216a3db8854ec444ad061c4f8c769fa98
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Nov 28 23:09:16 2020 -0800

    scsi: bnx2i: Requires MMU
    
    [ Upstream commit 2d586494c4a001312650f0b919d534e429dd1e09 ]
    
    The SCSI_BNX2_ISCSI kconfig symbol selects CNIC and CNIC selects UIO, which
    depends on MMU.
    
    Since 'select' does not follow dependency chains, add the same MMU
    dependency to SCSI_BNX2_ISCSI.
    
    Quietens this kconfig warning:
    
    WARNING: unmet direct dependencies detected for CNIC
      Depends on [n]: NETDEVICES [=y] && ETHERNET [=y] && NET_VENDOR_BROADCOM [=y] && PCI [=y] && (IPV6 [=m] || IPV6 [=m]=n) && MMU [=n]
      Selected by [m]:
      - SCSI_BNX2_ISCSI [=m] && SCSI_LOWLEVEL [=y] && SCSI [=y] && NET [=y] && PCI [=y] && (IPV6 [=m] || IPV6 [=m]=n)
    
    Link: https://lore.kernel.org/r/20201129070916.3919-1-rdunlap@infradead.org
    Fixes: cf4e6363859d ("[SCSI] bnx2i: Add bnx2i iSCSI driver.")
    Cc: linux-scsi@vger.kernel.org
    Cc: Nilesh Javali <njavali@marvell.com>
    Cc: Manish Rangankar <mrangankar@marvell.com>
    Cc: GR-QLogic-Storage-Upstream@marvell.com
    Cc: "James E.J. Bottomley" <jejb@linux.ibm.com>
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c2f0a256c54d53a7f87ed006192572df7e0086e2
Author: Baruch Siach <baruch@tkos.co.il>
Date:   Wed Dec 2 09:15:32 2020 +0200

    gpio: mvebu: fix potential user-after-free on probe
    
    [ Upstream commit 7ee1a01e47403f72b9f38839a737692f6991263e ]
    
    When mvebu_pwm_probe() fails IRQ domain is not released. Move pwm probe
    before IRQ domain allocation. Add pwm cleanup code to the failure path.
    
    Fixes: 757642f9a584 ("gpio: mvebu: Add limited PWM support")
    Reported-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Baruch Siach <baruch@tkos.co.il>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ad7fc068fdacb77741d8fe636762509e05acb38
Author: Icenowy Zheng <icenowy@aosc.io>
Date:   Fri Nov 20 13:08:51 2020 +0800

    ARM: dts: sun8i: v3s: fix GIC node memory range
    
    [ Upstream commit a98fd117a2553ab1a6d2fe3c7acae88c1eca4372 ]
    
    Currently the GIC node in V3s DTSI follows some old DT examples, and
    being broken. This leads a warning at boot.
    
    Fix this.
    
    Fixes: f989086ccbc6 ("ARM: dts: sunxi: add dtsi file for V3s SoC")
    Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20201120050851.4123759-1-icenowy@aosc.io
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b157896349258e5121ad51e4bfa48dadd348b380
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Nov 12 21:03:01 2020 +0200

    pinctrl: baytrail: Avoid clearing debounce value when turning it off
    
    [ Upstream commit 0b74e40a4e41f3cbad76dff4c50850d47b525b26 ]
    
    Baytrail pin control has a common register to set up debounce timeout.
    When a pin configuration requested debounce to be disabled, the rest
    of the pins may still want to have debounce enabled and thus rely on
    the common timeout value. Avoid clearing debounce value when turning
    it off for one pin while others may still use it.
    
    Fixes: 658b476c742f ("pinctrl: baytrail: Add debounce configuration")
    Depends-on: 04ff5a095d66 ("pinctrl: baytrail: Rectify debounce support")
    Depends-on: 827e1579e1d5 ("pinctrl: baytrail: Rectify debounce support (part 2)")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8c1f65064bf4777de3d1f2db8211c34284f1c94
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Nov 11 14:06:05 2020 +0200

    pinctrl: merrifield: Set default bias in case no particular value given
    
    [ Upstream commit 0fa86fc2e28227f1e64f13867e73cf864c6d25ad ]
    
    When GPIO library asks pin control to set the bias, it doesn't pass
    any value of it and argument is considered boolean (and this is true
    for ACPI GpioIo() / GpioInt() resources, by the way). Thus, individual
    drivers must behave well, when they got the resistance value of 1 Ohm,
    i.e. transforming it to sane default.
    
    In case of Intel Merrifield pin control hardware the 20 kOhm sounds plausible
    because it gives a good trade off between weakness and minimization of leakage
    current (will be only 50 uA with the above choice).
    
    Fixes: 4e80c8f50574 ("pinctrl: intel: Add Intel Merrifield pin controller support")
    Depends-on: 2956b5d94a76 ("pinctrl / gpio: Introduce .set_config() callback for GPIO chips")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4efd6662d83283fe7d4633c33eb9df5627a0656a
Author: Xin Xiong <xiongx18@fudan.edu.cn>
Date:   Sun Jul 19 23:45:45 2020 +0800

    drm: fix drm_dp_mst_port refcount leaks in drm_dp_mst_allocate_vcpi
    
    commit a34a0a632dd991a371fec56431d73279f9c54029 upstream
    
    drm_dp_mst_allocate_vcpi() invokes
    drm_dp_mst_topology_get_port_validated(), which increases the refcount
    of the "port".
    
    These reference counting issues take place in two exception handling
    paths separately. Either when “slots” is less than 0 or when
    drm_dp_init_vcpi() returns a negative value, the function forgets to
    reduce the refcnt increased drm_dp_mst_topology_get_port_validated(),
    which results in a refcount leak.
    
    Fix these issues by pulling up the error handling when "slots" is less
    than 0, and calling drm_dp_mst_topology_put_port() before termination
    when drm_dp_init_vcpi() returns a negative value.
    
    Fixes: 1e797f556c61 ("drm/dp: Split drm_dp_mst_allocate_vcpi")
    Cc: <stable@vger.kernel.org> # v4.12+
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: Xin Xiong <xiongx18@fudan.edu.cn>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200719154545.GA41231@xin-virtual-machine
    [sudip: use old functions before rename]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d10be28c06987468bc86b2182ec773a3aac96f7
Author: Alexander Sverdlin <alexander.sverdlin@gmail.com>
Date:   Thu Dec 10 06:52:57 2020 +0100

    serial: 8250_omap: Avoid FIFO corruption caused by MDR1 access
    
    commit d96f04d347e4011977abdbb4da5d8f303ebd26f8 upstream.
    
    It has been observed that once per 300-1300 port openings the first
    transmitted byte is being corrupted on AM3352 ("v" written to FIFO appeared
    as "e" on the wire). It only happened if single byte has been transmitted
    right after port open, which means, DMA is not used for this transfer and
    the corruption never happened afterwards.
    
    Therefore I've carefully re-read the MDR1 errata (link below), which says
    "when accessing the MDR1 registers that causes a dummy under-run condition
    that will freeze the UART in IrDA transmission. In UART mode, this may
    corrupt the transferred data". Strictly speaking,
    omap_8250_mdr1_errataset() performs a read access and if the value is the
    same as should be written, exits without errata-recommended FIFO reset.
    
    A brief check of the serial_omap_mdr1_errataset() from the competing
    omap-serial driver showed it has no read access of MDR1. After removing the
    read access from omap_8250_mdr1_errataset() the data corruption never
    happened any more.
    
    Link: https://www.ti.com/lit/er/sprz360i/sprz360i.pdf
    Fixes: 61929cf0169d ("tty: serial: Add 8250-core based omap driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@gmail.com>
    Link: https://lore.kernel.org/r/20201210055257.1053028-1-alexander.sverdlin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d632a73f0c35e42b2575d02deac9d2ccd68143ae
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Dec 9 09:45:52 2020 +0100

    ALSA: pcm: oss: Fix potential out-of-bounds shift
    
    commit 175b8d89fe292796811fdee87fa39799a5b6b87a upstream.
    
    syzbot spotted a potential out-of-bounds shift in the PCM OSS layer
    where it calculates the buffer size with the arbitrary shift value
    given via an ioctl.
    
    Add a range check for avoiding the undefined behavior.
    As the value can be treated by a signed integer, the max shift should
    be 30.
    
    Reported-by: syzbot+df7dc146ebdd6435eea3@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201209084552.17109-2-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4665b3eb4461a6b92633c9fddc6e36627da3338a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Oct 19 12:06:30 2020 +0200

    USB: sisusbvga: Make console support depend on BROKEN
    
    commit 862ee699fefe1e6d6f2c1518395f0b999b8beb15 upstream.
    
    The console part of sisusbvga is broken vs. printk(). It uses in_atomic()
    to detect contexts in which it cannot sleep despite the big fat comment in
    preempt.h which says: Do not use in_atomic() in driver code.
    
    in_atomic() does not work on kernels with CONFIG_PREEMPT_COUNT=n which
    means that spin/rw_lock held regions are not detected by it.
    
    There is no way to make this work by handing context information through to
    the driver and this only can be solved once the core printk infrastructure
    supports sleepable console drivers.
    
    Make it depend on BROKEN for now.
    
    Fixes: 1bbb4f2035d9 ("[PATCH] USB: sisusb[vga] update")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: Thomas Winischhofer <thomas@winischhofer.net>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: linux-usb@vger.kernel.org
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201019101109.603244207@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9c07e0dd9aa6406daaed2a9491f6e058f962c7b
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Dec 9 16:26:39 2020 +0100

    USB: UAS: introduce a quirk to set no_write_same
    
    commit 8010622c86ca5bb44bc98492f5968726fc7c7a21 upstream.
    
    UAS does not share the pessimistic assumption storage is making that
    devices cannot deal with WRITE_SAME.  A few devices supported by UAS,
    are reported to not deal well with WRITE_SAME. Those need a quirk.
    
    Add it to the device that needs it.
    
    Reported-by: David C. Partridge <david.partridge@perdrix.co.uk>
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201209152639.9195-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8fd7c0fa78136a4ca23a9228cbd4650191fbc00
Author: Li Jun <jun.li@nxp.com>
Date:   Tue Dec 8 11:29:12 2020 +0200

    xhci: Give USB2 ports time to enter U3 in bus suspend
    
    commit c1373f10479b624fb6dba0805d673e860f1b421d upstream.
    
    If a USB2 device wakeup is not enabled/supported the link state may
    still be in U0 in xhci_bus_suspend(), where it's then manually put
    to suspended U3 state.
    
    Just as with selective suspend the device needs time to enter U3
    suspend before continuing with further suspend operations
    (e.g. system suspend), otherwise we may enter system suspend with link
    state in U0.
    
    [commit message rewording -Mathias]
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20201208092912.1773650-6-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5304be388725641c178a0c5aa8c6ce18d35f196
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Dec 11 14:00:48 2020 +0100

    ALSA: usb-audio: Fix control 'access overflow' errors from chmap
    
    commit c6dde8ffd071aea9d1ce64279178e470977b235c upstream.
    
    The current channel-map control implementation in USB-audio driver may
    lead to an error message like
      "control 3:0:0:Playback Channel Map:0: access overflow"
    when CONFIG_SND_CTL_VALIDATION is set.  It's because the chmap get
    callback clears the whole array no matter which count is set, and
    rather the false-positive detection.
    
    This patch fixes the problem by clearing only the needed array range
    at usb_chmap_ctl_get().
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201211130048.6358-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e8e1c22895116986bb5c24cb41d76dddb2a6e31
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Dec 9 09:45:51 2020 +0100

    ALSA: usb-audio: Fix potential out-of-bounds shift
    
    commit 43d5ca88dfcd35e43010fdd818e067aa9a55f5ba upstream.
    
    syzbot spotted a potential out-of-bounds shift in the USB-audio format
    parser that receives the arbitrary shift value from the USB
    descriptor.
    
    Add a range check for avoiding the undefined behavior.
    
    Reported-by: syzbot+df7dc146ebdd6435eea3@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201209084552.17109-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a0abcecc1bc30ce76b82a792ce17fedebe781be
Author: Oliver Neukum <oneukum@suse.com>
Date:   Mon Dec 7 14:03:23 2020 +0100

    USB: add RESET_RESUME quirk for Snapscan 1212
    
    commit 08a02f954b0def3ada8ed6d4b2c7bcb67e885e9c upstream.
    
    I got reports that some models of this old scanner need
    this when using runtime PM.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201207130323.23857-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd0682e27feee6303351de5dfde69ac17747c751
Author: Bui Quang Minh <minhquangbui99@gmail.com>
Date:   Fri Dec 4 06:24:49 2020 +0000

    USB: dummy-hcd: Fix uninitialized array use in init()
    
    commit e90cfa813da7a527785033a0b247594c2de93dd8 upstream.
    
    This error path
    
            err_add_pdata:
                    for (i = 0; i < mod_data.num; i++)
                            kfree(dum[i]);
    
    can be triggered when not all dum's elements are initialized.
    
    Fix this by initializing all dum's elements to NULL.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Bui Quang Minh <minhquangbui99@gmail.com>
    Link: https://lore.kernel.org/r/1607063090-3426-1-git-send-email-minhquangbui99@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef43e6fa77864c8474585436dc3775d70b0e973c
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Dec 4 08:24:28 2020 -0800

    mac80211: mesh: fix mesh_pathtbl_init() error path
    
    [ Upstream commit 905b2032fa424f253d9126271439cc1db2b01130 ]
    
    If tbl_mpp can not be allocated, we call mesh_table_free(tbl_path)
    while tbl_path rhashtable has not yet been initialized, which causes
    panics.
    
    Simply factorize the rhashtable_init() call into mesh_table_alloc()
    
    WARNING: CPU: 1 PID: 8474 at kernel/workqueue.c:3040 __flush_work kernel/workqueue.c:3040 [inline]
    WARNING: CPU: 1 PID: 8474 at kernel/workqueue.c:3040 __cancel_work_timer+0x514/0x540 kernel/workqueue.c:3136
    Modules linked in:
    CPU: 1 PID: 8474 Comm: syz-executor663 Not tainted 5.10.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__flush_work kernel/workqueue.c:3040 [inline]
    RIP: 0010:__cancel_work_timer+0x514/0x540 kernel/workqueue.c:3136
    Code: 5d c3 e8 bf ae 29 00 0f 0b e9 f0 fd ff ff e8 b3 ae 29 00 0f 0b 43 80 3c 3e 00 0f 85 31 ff ff ff e9 34 ff ff ff e8 9c ae 29 00 <0f> 0b e9 dc fe ff ff 89 e9 80 e1 07 80 c1 03 38 c1 0f 8c 7d fd ff
    RSP: 0018:ffffc9000165f5a0 EFLAGS: 00010293
    RAX: ffffffff814b7064 RBX: 0000000000000001 RCX: ffff888021c80000
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffff888024039ca0 R08: dffffc0000000000 R09: fffffbfff1dd3e64
    R10: fffffbfff1dd3e64 R11: 0000000000000000 R12: 1ffff920002cbebd
    R13: ffff888024039c88 R14: 1ffff11004807391 R15: dffffc0000000000
    FS:  0000000001347880(0000) GS:ffff8880b9d00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000140 CR3: 000000002cc0a000 CR4: 00000000001506e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     rhashtable_free_and_destroy+0x25/0x9c0 lib/rhashtable.c:1137
     mesh_table_free net/mac80211/mesh_pathtbl.c:69 [inline]
     mesh_pathtbl_init+0x287/0x2e0 net/mac80211/mesh_pathtbl.c:785
     ieee80211_mesh_init_sdata+0x2ee/0x530 net/mac80211/mesh.c:1591
     ieee80211_setup_sdata+0x733/0xc40 net/mac80211/iface.c:1569
     ieee80211_if_add+0xd5c/0x1cd0 net/mac80211/iface.c:1987
     ieee80211_add_iface+0x59/0x130 net/mac80211/cfg.c:125
     rdev_add_virtual_intf net/wireless/rdev-ops.h:45 [inline]
     nl80211_new_interface+0x563/0xb40 net/wireless/nl80211.c:3855
     genl_family_rcv_msg_doit net/netlink/genetlink.c:739 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]
     genl_rcv_msg+0xe4e/0x1280 net/netlink/genetlink.c:800
     netlink_rcv_skb+0x190/0x3a0 net/netlink/af_netlink.c:2494
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:811
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x780/0x930 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x9a8/0xd40 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg net/socket.c:671 [inline]
     ____sys_sendmsg+0x519/0x800 net/socket.c:2353
     ___sys_sendmsg net/socket.c:2407 [inline]
     __sys_sendmsg+0x2b1/0x360 net/socket.c:2440
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 60854fd94573 ("mac80211: mesh: convert path table to rhashtable")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reviewed-by: Johannes Berg <johannes@sipsolutions.net>
    Link: https://lore.kernel.org/r/20201204162428.2583119-1-eric.dumazet@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92c7f80f29d8bfaa35c036cebef6c6c2d9529df1
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Dec 4 16:48:56 2020 +0800

    net: bridge: vlan: fix error return code in __vlan_add()
    
    [ Upstream commit ee4f52a8de2c6f78b01f10b4c330867d88c1653a ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: f8ed289fab84 ("bridge: vlan: use br_vlan_(get|put)_master to deal with refcounts")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Acked-by: Nikolay Aleksandrov <nikolay@nvidia.com>
    Link: https://lore.kernel.org/r/1607071737-33875-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c6ad588508057dc95744aa40dbfd3711eb74420
Author: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
Date:   Sat Dec 5 22:32:07 2020 +0100

    net: stmmac: dwmac-meson8b: fix mask definition of the m250_sel mux
    
    [ Upstream commit 82ca4c922b8992013a238d65cf4e60cc33e12f36 ]
    
    The m250_sel mux clock uses bit 4 in the PRG_ETH0 register. Fix this by
    shifting the PRG_ETH0_CLK_M250_SEL_MASK accordingly as the "mask" in
    struct clk_mux expects the mask relative to the "shift" field in the
    same struct.
    
    While here, get rid of the PRG_ETH0_CLK_M250_SEL_SHIFT macro and use
    __ffs() to determine it from the existing PRG_ETH0_CLK_M250_SEL_MASK
    macro.
    
    Fixes: 566e8251625304 ("net: stmmac: add a glue driver for the Amlogic Meson 8b / GXBB DWMAC")
    Signed-off-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Reviewed-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20201205213207.519341-1-martin.blumenstingl@googlemail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de6600303c8d92a50ae67ca05aed9af3299f61d4
Author: Fugang Duan <fugang.duan@nxp.com>
Date:   Mon Dec 7 18:51:40 2020 +0800

    net: stmmac: delete the eee_ctrl_timer after napi disabled
    
    [ Upstream commit 5f58591323bf3f342920179f24515935c4b5fd60 ]
    
    There have chance to re-enable the eee_ctrl_timer and fire the timer
    in napi callback after delete the timer in .stmmac_release(), which
    introduces to access eee registers in the timer function after clocks
    are disabled then causes system hang. Found this issue when do
    suspend/resume and reboot stress test.
    
    It is safe to delete the timer after napi disabled and disable lpi mode.
    
    Fixes: d765955d2ae0b ("stmmac: add the Energy Efficient Ethernet support")
    Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b8231c627ed2de3a869e2793e12abf7a29b53a3
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Wed Dec 9 15:03:39 2020 +0200

    net/mlx4_en: Handle TX error CQE
    
    [ Upstream commit ba603d9d7b1215c72513d7c7aa02b6775fd4891b ]
    
    In case error CQE was found while polling TX CQ, the QP is in error
    state and all posted WQEs will generate error CQEs without any data
    transmitted. Fix it by reopening the channels, via same method used for
    TX timeout handling.
    
    In addition add some more info on error CQE and WQE for debug.
    
    Fixes: bd2f631d7c60 ("net/mlx4_en: Notify user when TX ring in error state")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be6314869542644b362c171f4ace59caca5d9ec0
Author: Moshe Shemesh <moshe@mellanox.com>
Date:   Wed Dec 9 15:03:38 2020 +0200

    net/mlx4_en: Avoid scheduling restart task if it is already running
    
    [ Upstream commit fed91613c9dd455dd154b22fa8e11b8526466082 ]
    
    Add restarting state flag to avoid scheduling another restart task while
    such task is already running. Change task name from watchdog_task to
    restart_task to better fit the task role.
    
    Fixes: 1e338db56e5a ("mlx4_en: Fix a race at restart task")
    Signed-off-by: Moshe Shemesh <moshe@mellanox.com>
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b20b755321749b2171317602fcb86a58b253fd27
Author: Neal Cardwell <ncardwell@google.com>
Date:   Tue Dec 8 22:57:59 2020 -0500

    tcp: fix cwnd-limited bug for TSO deferral where we send nothing
    
    [ Upstream commit 299bcb55ecd1412f6df606e9dc0912d55610029e ]
    
    When cwnd is not a multiple of the TSO skb size of N*MSS, we can get
    into persistent scenarios where we have the following sequence:
    
    (1) ACK for full-sized skb of N*MSS arrives
      -> tcp_write_xmit() transmit full-sized skb with N*MSS
      -> move pacing release time forward
      -> exit tcp_write_xmit() because pacing time is in the future
    
    (2) TSQ callback or TCP internal pacing timer fires
      -> try to transmit next skb, but TSO deferral finds remainder of
         available cwnd is not big enough to trigger an immediate send
         now, so we defer sending until the next ACK.
    
    (3) repeat...
    
    So we can get into a case where we never mark ourselves as
    cwnd-limited for many seconds at a time, even with
    bulk/infinite-backlog senders, because:
    
    o In case (1) above, every time in tcp_write_xmit() we have enough
    cwnd to send a full-sized skb, we are not fully using the cwnd
    (because cwnd is not a multiple of the TSO skb size). So every time we
    send data, we are not cwnd limited, and so in the cwnd-limited
    tracking code in tcp_cwnd_validate() we mark ourselves as not
    cwnd-limited.
    
    o In case (2) above, every time in tcp_write_xmit() that we try to
    transmit the "remainder" of the cwnd but defer, we set the local
    variable is_cwnd_limited to true, but we do not send any packets, so
    sent_pkts is zero, so we don't call the cwnd-limited logic to update
    tp->is_cwnd_limited.
    
    Fixes: ca8a22634381 ("tcp: make cwnd-limited checks measurement-based, and gentler")
    Reported-by: Ingemar Johansson <ingemar.s.johansson@ericsson.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20201209035759.1225145-1-ncardwell.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4b77ac01b49e330ba8dda97a843f1ab2c3bf773
Author: Fugang Duan <fugang.duan@nxp.com>
Date:   Mon Dec 7 18:51:39 2020 +0800

    net: stmmac: free tx skb buffer in stmmac_resume()
    
    [ Upstream commit 4ec236c7c51f89abb0224a4da4a6b77f9beb6600 ]
    
    When do suspend/resume test, there have WARN_ON() log dump from
    stmmac_xmit() funciton, the code logic:
            entry = tx_q->cur_tx;
            first_entry = entry;
            WARN_ON(tx_q->tx_skbuff[first_entry]);
    
    In normal case, tx_q->tx_skbuff[txq->cur_tx] should be NULL because
    the skb should be handled and freed in stmmac_tx_clean().
    
    But stmmac_resume() reset queue parameters like below, skb buffers
    may not be freed.
            tx_q->cur_tx = 0;
            tx_q->dirty_tx = 0;
    
    So free tx skb buffer in stmmac_resume() to avoid warning and
    memory leak.
    
    log:
    [   46.139824] ------------[ cut here ]------------
    [   46.144453] WARNING: CPU: 0 PID: 0 at drivers/net/ethernet/stmicro/stmmac/stmmac_main.c:3235 stmmac_xmit+0x7a0/0x9d0
    [   46.154969] Modules linked in: crct10dif_ce vvcam(O) flexcan can_dev
    [   46.161328] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G           O      5.4.24-2.1.0+g2ad925d15481 #1
    [   46.170369] Hardware name: NXP i.MX8MPlus EVK board (DT)
    [   46.175677] pstate: 80000005 (Nzcv daif -PAN -UAO)
    [   46.180465] pc : stmmac_xmit+0x7a0/0x9d0
    [   46.184387] lr : dev_hard_start_xmit+0x94/0x158
    [   46.188913] sp : ffff800010003cc0
    [   46.192224] x29: ffff800010003cc0 x28: ffff000177e2a100
    [   46.197533] x27: ffff000176ef0840 x26: ffff000176ef0090
    [   46.202842] x25: 0000000000000000 x24: 0000000000000000
    [   46.208151] x23: 0000000000000003 x22: ffff8000119ddd30
    [   46.213460] x21: ffff00017636f000 x20: ffff000176ef0cc0
    [   46.218769] x19: 0000000000000003 x18: 0000000000000000
    [   46.224078] x17: 0000000000000000 x16: 0000000000000000
    [   46.229386] x15: 0000000000000079 x14: 0000000000000000
    [   46.234695] x13: 0000000000000003 x12: 0000000000000003
    [   46.240003] x11: 0000000000000010 x10: 0000000000000010
    [   46.245312] x9 : ffff00017002b140 x8 : 0000000000000000
    [   46.250621] x7 : ffff00017636f000 x6 : 0000000000000010
    [   46.255930] x5 : 0000000000000001 x4 : ffff000176ef0000
    [   46.261238] x3 : 0000000000000003 x2 : 00000000ffffffff
    [   46.266547] x1 : ffff000177e2a000 x0 : 0000000000000000
    [   46.271856] Call trace:
    [   46.274302]  stmmac_xmit+0x7a0/0x9d0
    [   46.277874]  dev_hard_start_xmit+0x94/0x158
    [   46.282056]  sch_direct_xmit+0x11c/0x338
    [   46.285976]  __qdisc_run+0x118/0x5f0
    [   46.289549]  net_tx_action+0x110/0x198
    [   46.293297]  __do_softirq+0x120/0x23c
    [   46.296958]  irq_exit+0xb8/0xd8
    [   46.300098]  __handle_domain_irq+0x64/0xb8
    [   46.304191]  gic_handle_irq+0x5c/0x148
    [   46.307936]  el1_irq+0xb8/0x180
    [   46.311076]  cpuidle_enter_state+0x84/0x360
    [   46.315256]  cpuidle_enter+0x34/0x48
    [   46.318829]  call_cpuidle+0x18/0x38
    [   46.322314]  do_idle+0x1e0/0x280
    [   46.325539]  cpu_startup_entry+0x24/0x40
    [   46.329460]  rest_init+0xd4/0xe0
    [   46.332687]  arch_call_rest_init+0xc/0x14
    [   46.336695]  start_kernel+0x420/0x44c
    [   46.340353] ---[ end trace bc1ee695123cbacd ]---
    
    Fixes: 47dd7a540b8a0 ("net: add support for STMicroelectronics Ethernet controllers.")
    Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc220d2e67d75b32fdfbe226199b7298ef395edd
Author: Ansuel Smith <ansuelsmth@gmail.com>
Date:   Mon Jun 15 23:06:00 2020 +0200

    PCI: qcom: Add missing reset for ipq806x
    
    commit ee367e2cdd2202b5714982739e684543cd2cee0e upstream
    
    Add missing ext reset used by ipq8064 SoC in PCIe qcom driver.
    
    Link: https://lore.kernel.org/r/20200615210608.21469-5-ansuelsmth@gmail.com
    Fixes: 82a823833f4e ("PCI: qcom: Add Qualcomm PCIe controller driver")
    Signed-off-by: Sham Muthayyan <smuthayy@codeaurora.org>
    Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Acked-by: Stanimir Varbanov <svarbanov@mm-sol.com>
    Cc: stable@vger.kernel.org # v4.5+
    [sudip: manual backport]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b673840cdd7deaf0c1572c54d8a2a2e0e51f75c7
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Wed Nov 11 11:09:45 2020 -0500

    x86/mm/mem_encrypt: Fix definition of PMD_FLAGS_DEC_WP
    
    commit 29ac40cbed2bc06fa218ca25d7f5e280d3d08a25 upstream.
    
    The PAT bit is in different locations for 4k and 2M/1G page table
    entries.
    
    Add a definition for _PAGE_LARGE_CACHE_MASK to represent the three
    caching bits (PWT, PCD, PAT), similar to _PAGE_CACHE_MASK for 4k pages,
    and use it in the definition of PMD_FLAGS_DEC_WP to get the correct PAT
    index for write-protected pages.
    
    Fixes: 6ebcb060713f ("x86/mm: Add support to encrypt the kernel in-place")
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Tested-by: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20201111160946.147341-1-nivedita@alum.mit.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c70d4f51566ede691f3a61f7406bc05d1e58c9a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Dec 3 15:18:26 2020 +0300

    scsi: be2iscsi: Revert "Fix a theoretical leak in beiscsi_create_eqs()"
    
    commit eeaf06af6f87e1dba371fbe42674e6f963220b9c upstream.
    
    My patch caused kernel Oopses and delays in boot.  Revert it.
    
    The problem was that I moved the "mem->dma = paddr;" before the call to
    be_fill_queue().  But the first thing that the be_fill_queue() function
    does is memset the whole struct to zero which overwrites the assignment.
    
    Link: https://lore.kernel.org/r/X8jXkt6eThjyVP1v@mwanda
    Fixes: 38b2db564d9a ("scsi: be2iscsi: Fix a theoretical leak in beiscsi_create_eqs()")
    Cc: stable <stable@vger.kernel.org>
    Reported-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7b2341039b27c737d4f058d5ebd60095e3d20bd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Dec 11 13:36:38 2020 -0800

    kbuild: avoid static_assert for genksyms
    
    commit 14dc3983b5dff513a90bd5a8cc90acaf7867c3d0 upstream.
    
    genksyms does not know or care about the _Static_assert() built-in, and
    sometimes falls back to ignoring the later symbols, which causes
    undefined behavior such as
    
      WARNING: modpost: EXPORT symbol "ethtool_set_ethtool_phy_ops" [vmlinux] version generation failed, symbol will not be versioned.
      ld: net/ethtool/common.o: relocation R_AARCH64_ABS32 against `__crc_ethtool_set_ethtool_phy_ops' can not be used when making a shared object
      net/ethtool/common.o:(_ftrace_annotated_branch+0x0): dangerous relocation: unsupported relocation
    
    Redefine static_assert for genksyms to avoid that.
    
    Link: https://lkml.kernel.org/r/20201203230955.1482058-1-arnd@kernel.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Suggested-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Masahiro Yamada <masahiroy@kernel.org>
    Cc: Michal Marek <michal.lkml@markovi.net>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Rikard Falkeborn <rikard.falkeborn@gmail.com>
    Cc: Marco Elver <elver@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0db0a6832c6d4eff9bb100982b4ca7dc31e5e757
Author: Coiby Xu <coiby.xu@gmail.com>
Date:   Wed Nov 25 21:03:19 2020 +0800

    pinctrl: amd: remove debounce filter setting in IRQ type setting
    
    commit 47a0001436352c9853d72bf2071e85b316d688a2 upstream.
    
    Debounce filter setting should be independent from IRQ type setting
    because according to the ACPI specs, there are separate arguments for
    specifying debounce timeout and IRQ type in GpioIo() and GpioInt().
    
    Together with commit 06abe8291bc31839950f7d0362d9979edc88a666
    ("pinctrl: amd: fix incorrect way to disable debounce filter") and
    Andy's patch "gpiolib: acpi: Take into account debounce settings" [1],
    this will fix broken touchpads for laptops whose BIOS set the
    debounce timeout to a relatively large value. For example, the BIOS
    of Lenovo AMD gaming laptops including Legion-5 15ARH05 (R7000),
    Legion-5P (R7000P) and IdeaPad Gaming 3 15ARH05, set the debounce
    timeout to 124.8ms. This led to the kernel receiving only ~7 HID
    reports per second from the Synaptics touchpad
    (MSFT0001:00 06CB:7F28).
    
    Existing touchpads like [2][3] are not troubled by this bug because
    the debounce timeout has been set to 0 by the BIOS before enabling
    the debounce filter in setting IRQ type.
    
    [1] https://lore.kernel.org/linux-gpio/20201111222008.39993-11-andriy.shevchenko@linux.intel.com/
        8dcb7a15a585 ("gpiolib: acpi: Take into account debounce settings")
    [2] https://github.com/Syniurge/i2c-amd-mp2/issues/11#issuecomment-721331582
    [3] https://forum.manjaro.org/t/random-short-touchpad-freezes/30832/28
    
    Signed-off-by: Coiby Xu <coiby.xu@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-gpio/CAHp75VcwiGREBUJ0A06EEw-SyabqYsp%2Bdqs2DpSrhaY-2GVdAA%40mail.gmail.com/
    BugLink: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1887190
    Link: https://lore.kernel.org/r/20201125130320.311059-1-coiby.xu@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6c6419859b18702259a53dce26a9c45b36f42bd
Author: Chris Chiu <chiu@endlessos.org>
Date:   Wed Dec 9 20:24:47 2020 -0800

    Input: i8042 - add Acer laptops to the i8042 reset list
    
    commit ce6520b0eafad5962ffc21dc47cd7bd3250e9045 upstream.
    
    The touchpad operates in Basic Mode by default in the Acer BIOS
    setup, but some Aspire/TravelMate models require the i8042 to be
    reset in order to be correctly detected.
    
    Signed-off-by: Chris Chiu <chiu@endlessos.org>
    Link: https://lore.kernel.org/r/20201207071250.15021-1-chiu@endlessos.org
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2c082818c08bce892297a639479c9d81f15552e
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Wed Dec 9 20:13:24 2020 -0800

    Input: cm109 - do not stomp on control URB
    
    commit 82e06090473289ce63e23fdeb8737aad59b10645 upstream.
    
    We need to make sure we are not stomping on the control URB that was
    issued when opening the device when attempting to toggle buzzer.
    To do that we need to mark it as pending in cm109_open().
    
    Reported-and-tested-by: syzbot+150f793ac5bc18eee150@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 533b175b10b1d0ca2510abbd348ff7b7d4e4a63e
Author: Timo Witte <timo.witte@gmail.com>
Date:   Tue Aug 4 02:14:23 2020 +0200

    platform/x86: acer-wmi: add automatic keyboard background light toggle key as KEY_LIGHTS_TOGGLE
    
    [ Upstream commit 9e7a005ad56aa7d6ea5830c5ffcc60bf35de380b ]
    
    Got a dmesg message on my AMD Renoir based Acer laptop:
    "acer_wmi: Unknown key number - 0x84" when toggling keyboard
    background light
    
    Signed-off-by: Timo Witte <timo.witte@gmail.com>
    Reviewed-by: "Lee, Chun-Yi" <jlee@suse.com>
    Link: https://lore.kernel.org/r/20200804001423.36778-1-timo.witte@gmail.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3434a3cb0294c16b73a5ebc00f7a38fa35744dc9
Author: Hao Si <si.hao@zte.com.cn>
Date:   Tue Oct 20 10:18:32 2020 +0800

    soc: fsl: dpio: Get the cpumask through cpumask_of(cpu)
    
    [ Upstream commit 2663b3388551230cbc4606a40fabf3331ceb59e4 ]
    
    The local variable 'cpumask_t mask' is in the stack memory, and its address
    is assigned to 'desc->affinity' in 'irq_set_affinity_hint()'.
    But the memory area where this variable is located is at risk of being
    modified.
    
    During LTP testing, the following error was generated:
    
    Unable to handle kernel paging request at virtual address ffff000012e9b790
    Mem abort info:
      ESR = 0x96000007
      Exception class = DABT (current EL), IL = 32 bits
      SET = 0, FnV = 0
      EA = 0, S1PTW = 0
    Data abort info:
      ISV = 0, ISS = 0x00000007
      CM = 0, WnR = 0
    swapper pgtable: 4k pages, 48-bit VAs, pgdp = 0000000075ac5e07
    [ffff000012e9b790] pgd=00000027dbffe003, pud=00000027dbffd003,
    pmd=00000027b6d61003, pte=0000000000000000
    Internal error: Oops: 96000007 [#1] PREEMPT SMP
    Modules linked in: xt_conntrack
    Process read_all (pid: 20171, stack limit = 0x0000000044ea4095)
    CPU: 14 PID: 20171 Comm: read_all Tainted: G    B   W
    Hardware name: NXP Layerscape LX2160ARDB (DT)
    pstate: 80000085 (Nzcv daIf -PAN -UAO)
    pc : irq_affinity_hint_proc_show+0x54/0xb0
    lr : irq_affinity_hint_proc_show+0x4c/0xb0
    sp : ffff00001138bc10
    x29: ffff00001138bc10 x28: 0000ffffd131d1e0
    x27: 00000000007000c0 x26: ffff8025b9480dc0
    x25: ffff8025b9480da8 x24: 00000000000003ff
    x23: ffff8027334f8300 x22: ffff80272e97d000
    x21: ffff80272e97d0b0 x20: ffff8025b9480d80
    x19: ffff000009a49000 x18: 0000000000000000
    x17: 0000000000000000 x16: 0000000000000000
    x15: 0000000000000000 x14: 0000000000000000
    x13: 0000000000000000 x12: 0000000000000040
    x11: 0000000000000000 x10: ffff802735b79b88
    x9 : 0000000000000000 x8 : 0000000000000000
    x7 : ffff000009a49848 x6 : 0000000000000003
    x5 : 0000000000000000 x4 : ffff000008157d6c
    x3 : ffff00001138bc10 x2 : ffff000012e9b790
    x1 : 0000000000000000 x0 : 0000000000000000
    Call trace:
     irq_affinity_hint_proc_show+0x54/0xb0
     seq_read+0x1b0/0x440
     proc_reg_read+0x80/0xd8
     __vfs_read+0x60/0x178
     vfs_read+0x94/0x150
     ksys_read+0x74/0xf0
     __arm64_sys_read+0x24/0x30
     el0_svc_common.constprop.0+0xd8/0x1a0
     el0_svc_handler+0x34/0x88
     el0_svc+0x10/0x14
    Code: f9001bbf 943e0732 f94066c2 b4000062 (f9400041)
    ---[ end trace b495bdcb0b3b732b ]---
    Kernel panic - not syncing: Fatal exception
    SMP: stopping secondary CPUs
    SMP: failed to stop secondary CPUs 0,2-4,6,8,11,13-15
    Kernel Offset: disabled
    CPU features: 0x0,21006008
    Memory Limit: none
    ---[ end Kernel panic - not syncing: Fatal exception ]---
    
    Fix it by using 'cpumask_of(cpu)' to get the cpumask.
    
    Signed-off-by: Hao Si <si.hao@zte.com.cn>
    Signed-off-by: Lin Chen <chen.lin5@zte.com.cn>
    Signed-off-by: Yi Wang <wang.yi59@zte.com.cn>
    Signed-off-by: Li Yang <leoyang.li@nxp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee719515bfb3cb08a3428cbb07b68e9caee6a52c
Author: Can Guo <cang@codeaurora.org>
Date:   Tue Sep 22 00:09:04 2020 -0700

    scsi: ufs: Make sure clk scaling happens only when HBA is runtime ACTIVE
    
    [ Upstream commit 73cc291c270248567245f084dcdf5078069af6b5 ]
    
    If someone plays with the UFS clk scaling devfreq governor through sysfs,
    ufshcd_devfreq_scale may be called even when HBA is not runtime ACTIVE.
    This can lead to unexpected error. We cannot just protect it by calling
    pm_runtime_get_sync() because that may cause a race condition since HBA
    runtime suspend ops need to suspend clk scaling. To fix this call
    pm_runtime_get_noresume() and check HBA's runtime status. Only proceed if
    HBA is runtime ACTIVE, otherwise just bail.
    
    governor_store
     devfreq_performance_handler
      update_devfreq
       devfreq_set_target
        ufshcd_devfreq_target
         ufshcd_devfreq_scale
    
    Link: https://lore.kernel.org/r/1600758548-28576-1-git-send-email-cang@codeaurora.org
    Reviewed-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e154c0be456a5387054e0774c0247ecc0d48553
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Fri Nov 6 16:59:27 2020 -0800

    ARC: stack unwinding: don't assume non-current task is sleeping
    
    [ Upstream commit e42404fa10fd11fe72d0a0e149a321d10e577715 ]
    
    To start stack unwinding (SP, PC and BLINK) are needed. When the
    explicit execution context (pt_regs etc) is not available, unwinder
    assumes the task is sleeping (in __switch_to()) and fetches SP and BLINK
    from kernel mode stack.
    
    But this assumption is not true, specially in a SMP system, when top
    runs on 1 core, there may be active running processes on all cores.
    
    So when unwinding non courrent tasks, ensure they are NOT running.
    
    And while at it, handle the self unwinding case explicitly.
    
    This came out of investigation of a customer reported hang with
    rcutorture+top
    
    Link: https://github.com/foss-for-synopsys-dwc-arc-processors/linux/issues/31
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b21b3926464aa0fabe3097467c1e3cee9994760
Author: Sara Sharon <sara.sharon@intel.com>
Date:   Sat Nov 7 10:50:11 2020 +0200

    iwlwifi: mvm: fix kernel panic in case of assert during CSA
    
    [ Upstream commit fe56d05ee6c87f6a1a8c7267affd92c9438249cc ]
    
    During CSA, we briefly nullify the phy context, in __iwl_mvm_unassign_vif_chanctx.
    In case we have a FW assert right after it, it remains NULL though.
    We end up running into endless loop due to mac80211 trying repeatedly to
    move us to ASSOC state, and we keep returning -EINVAL. Later down the road
    we hit a kernel panic.
    
    Detect and avoid this endless loop.
    
    Signed-off-by: Sara Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201107104557.d64de2c17bff.Iedd0d2afa20a2aacba5259a5cae31cb3a119a4eb@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65de94cd6bc147ca9e1f07e1cc62511ae359f9fb
Author: Markus Reichl <m.reichl@fivetechno.de>
Date:   Wed Nov 4 17:23:55 2020 +0100

    arm64: dts: rockchip: Assign a fixed index to mmc devices on rk3399 boards.
    
    [ Upstream commit 0011c6d182774fc781fb9e115ebe8baa356029ae ]
    
    Recently introduced async probe on mmc devices can shuffle block IDs.
    Pin them to fixed values to ease booting in environments where UUIDs
    are not practical. Use newly introduced aliases for mmcblk devices from [1].
    
    [1]
    https://patchwork.kernel.org/patch/11747669/
    
    Signed-off-by: Markus Reichl <m.reichl@fivetechno.de>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20201104162356.1251-1-m.reichl@fivetechno.de
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 137393de15e53e859f91e13c309b514b4d593c6d
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Oct 22 16:51:03 2020 +0300

    iwlwifi: pcie: limit memory read spin time
    
    [ Upstream commit 04516706bb99889986ddfa3a769ed50d2dc7ac13 ]
    
    When we read device memory, we lock a spinlock, write the address we
    want to read from the device and then spin in a loop reading the data
    in 32-bit quantities from another register.
    
    As the description makes clear, this is rather inefficient, incurring
    a PCIe bus transaction for every read. In a typical device today, we
    want to read 786k SMEM if it crashes, leading to 192k register reads.
    Occasionally, we've seen the whole loop take over 20 seconds and then
    triggering the soft lockup detector.
    
    Clearly, it is unreasonable to spin here for such extended periods of
    time.
    
    To fix this, break the loop down into an outer and an inner loop, and
    break out of the inner loop if more than half a second elapsed. To
    avoid too much overhead, check for that only every 128 reads, though
    there's no particular reason for that number. Then, unlock and relock
    to obtain NIC access again, reprogram the start address and continue.
    
    This will keep (interrupt) latencies on the CPU down to a reasonable
    time.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Mordechay Goodstein <mordechay.goodstein@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/iwlwifi.20201022165103.45878a7e49aa.I3b9b9c5a10002915072312ce75b68ed5b3dc6e14@changeid
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdf6fd588643cb2e6c5a3c777cb029f3bd7a97b6
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Dec 10 20:20:02 2020 +0100

    spi: bcm2835aux: Restore err assignment in bcm2835aux_spi_probe
    
    [ Upstream commit d853b3406903a7dc5b14eb5bada3e8cd677f66a2 ]
    
    Clang warns:
    
    drivers/spi/spi-bcm2835aux.c:532:50: warning: variable 'err' is
    uninitialized when used here [-Wuninitialized]
                    dev_err(&pdev->dev, "could not get clk: %d\n", err);
                                                                   ^~~
    ./include/linux/dev_printk.h:112:32: note: expanded from macro 'dev_err'
            _dev_err(dev, dev_fmt(fmt), ##__VA_ARGS__)
                                          ^~~~~~~~~~~
    drivers/spi/spi-bcm2835aux.c:495:9: note: initialize the variable 'err'
    to silence this warning
            int err;
                   ^
                    = 0
    1 warning generated.
    
    Restore the assignment so that the error value can be used in the
    dev_err statement and there is no uninitialized memory being leaked.
    
    Fixes: e13ee6cc4781 ("spi: bcm2835aux: Fix use-after-free on unbind")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1199
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20201113180701.455541-1-natechancellor@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [lukas: backport to 4.19-stable, add stable designation]
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.4+: e13ee6cc4781: spi: bcm2835aux: Fix use-after-free on unbind
    Cc: <stable@vger.kernel.org> # v4.4+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4163ec143914e21d3847341f4d2dbd635107131a
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Dec 10 20:20:01 2020 +0100

    spi: bcm2835aux: Fix use-after-free on unbind
    
    [ Upstream commit e13ee6cc4781edaf8c7321bee19217e3702ed481 ]
    
    bcm2835aux_spi_remove() accesses the driver's private data after calling
    spi_unregister_master() even though that function releases the last
    reference on the spi_master and thereby frees the private data.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound.
    
    Fixes: b9dd3f6d4172 ("spi: bcm2835aux: Fix controller unregister order")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.4+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.4+: b9dd3f6d4172: spi: bcm2835aux: Fix controller unregister order
    Cc: <stable@vger.kernel.org> # v4.4+
    Link: https://lore.kernel.org/r/b290b06357d0c0bdee9cecc539b840a90630f101.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cdb67592f87699b38633563cec06fcd530844b4
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Dec 11 13:39:07 2020 +0100

    Linux 4.14.212
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201210142602.099683598@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e335526f38972a6eacfad103f86b5bdfdf30e5a
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Thu Dec 3 13:50:37 2020 +0900

    x86/uprobes: Do not use prefixes.nbytes when looping over prefixes.bytes
    
    commit 4e9a5ae8df5b3365183150f6df49e49dece80d8c upstream
    
    Since insn.prefixes.nbytes can be bigger than the size of
    insn.prefixes.bytes[] when a prefix is repeated, the proper check must
    be
    
      insn.prefixes.bytes[i] != 0 and i < 4
    
    instead of using insn.prefixes.nbytes.
    
    Introduce a for_each_insn_prefix() macro for this purpose. Debugged by
    Kees Cook <keescook@chromium.org>.
    
     [ bp: Massage commit message, sync with the respective header in tools/
       and drop "we". ]
    
    Fixes: 2b1444983508 ("uprobes, mm, x86: Add the ability to install and remove uprobes breakpoints")
    Reported-by: syzbot+9b64b619f10f19d19a7c@syzkaller.appspotmail.com
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/160697103739.3146288.7437620795200799020.stgit@devnote2
    [sudip: adjust context, use old insn.h]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71fa96b788f31bf25a28feb48028a11d405c9105
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Nov 24 17:45:23 2020 -0800

    Input: i8042 - fix error return code in i8042_setup_aux()
    
    commit 855b69857830f8d918d715014f05e59a3f7491a0 upstream.
    
    Fix to return a negative error code from the error handling case
    instead of 0 in function i8042_setup_aux(), as done elsewhere in this
    function.
    
    Fixes: f81134163fc7 ("Input: i8042 - use platform_driver_probe")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201123133420.4071187-1-luomeng12@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddfeb2e6b5dd76cb42552f8e2451feb665a03a94
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Nov 16 22:10:58 2020 +0800

    i2c: qup: Fix error return code in qup_i2c_bam_schedule_desc()
    
    commit e9acf0298c664f825e6f1158f2a97341bf9e03ca upstream.
    
    Fix to return the error code from qup_i2c_change_state()
    instaed of 0 in qup_i2c_bam_schedule_desc().
    
    Fixes: fbf9921f8b35d9b2 ("i2c: qup: Fix error handling")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db3609e0f4f2cf9683893bec605bea8f632b5054
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Nov 24 10:44:36 2020 -0500

    gfs2: check for empty rgrp tree in gfs2_ri_update
    
    commit 778721510e84209f78e31e2ccb296ae36d623f5e upstream.
    
    If gfs2 tries to mount a (corrupt) file system that has no resource
    groups it still tries to set preferences on the first one, which causes
    a kernel null pointer dereference. This patch adds a check to function
    gfs2_ri_update so this condition is detected and reported back as an
    error.
    
    Reported-by: syzbot+e3f23ce40269a4c9053a@syzkaller.appspotmail.com
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d4de7d7a8b4d65df0b73bccaa0b35741034bf1a
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Fri Dec 4 16:36:16 2020 -0500

    tracing: Fix userstacktrace option for instances
    
    commit bcee5278958802b40ee8b26679155a6d9231783e upstream.
    
    When the instances were able to use their own options, the userstacktrace
    option was left hardcoded for the top level. This made the instance
    userstacktrace option bascially into a nop, and will confuse users that set
    it, but nothing happens (I was confused when it happened to me!)
    
    Cc: stable@vger.kernel.org
    Fixes: 16270145ce6b ("tracing: Add trace options for core options to instances")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6808f6e07e850983d42edba77b737971a73a0a63
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Sun Dec 6 13:39:04 2020 +0100

    spi: bcm2835: Release the DMA channel if probe fails after dma_init
    
    [ Upstream commit 666224b43b4bd4612ce3b758c038f9bc5c5e3fcb ]
    
    The DMA channel was not released if either devm_request_irq() or
    devm_spi_register_controller() failed.
    
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Reviewed-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20191212135550.4634-3-peter.ujfalusi@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [lukas: backport to 4.19-stable]
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0837e33d2d30b4371849b3a36c57a02a4d5b082
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Dec 6 13:39:02 2020 +0100

    spi: bcm2835: Fix use-after-free on unbind
    
    [ Upstream commit e1483ac030fb4c57734289742f1c1d38dca61e22 ]
    
    bcm2835_spi_remove() accesses the driver's private data after calling
    spi_unregister_controller() even though that function releases the last
    reference on the spi_controller and thereby frees the private data.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound.
    
    Fixes: f8043872e796 ("spi: add driver for BCM2835")
    Reported-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v3.10+: 5e844cc37a5c: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v3.10+
    Cc: Vladimir Oltean <olteanv@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/ad66e0a0ad96feb848814842ecf5b6a4539ef35c.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eee543b6683bfff3d1bbcacc8fc43cf011565159
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Dec 6 13:39:01 2020 +0100

    spi: bcm-qspi: Fix use-after-free on unbind
    
    commit 63c5395bb7a9777a33f0e7b5906f2c0170a23692 upstream
    
    bcm_qspi_remove() calls spi_unregister_master() even though
    bcm_qspi_probe() calls devm_spi_register_master().  The spi_master is
    therefore unregistered and freed twice on unbind.
    
    Moreover, since commit 0392727c261b ("spi: bcm-qspi: Handle clock probe
    deferral"), bcm_qspi_probe() leaks the spi_master allocation if the call
    to devm_clk_get_optional() fails.
    
    Fix by switching over to the new devm_spi_alloc_master() helper which
    keeps the private data accessible until the driver has unbound and also
    avoids the spi_master leak on probe.
    
    While at it, fix an ordering issue in bcm_qspi_remove() wherein
    spi_unregister_master() is called after uninitializing the hardware,
    disabling the clock and freeing an IRQ data structure.  The correct
    order is to call spi_unregister_master() *before* those teardown steps
    because bus accesses may still be ongoing until that function returns.
    
    Fixes: fa236a7ef240 ("spi: bcm-qspi: Add Broadcom MSPI driver")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: <stable@vger.kernel.org> # v4.9+: 123456789abc: spi: Introduce device-managed SPI controller allocation
    Cc: <stable@vger.kernel.org> # v4.9+
    Cc: Kamal Dasu <kdasu.kdev@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/5e31a9a59fd1c0d0b795b2fe219f25e5ee855f9d.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d360adc981db7f68f41cfbc7615dcb25f90bb0d
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sun Dec 6 13:39:00 2020 +0100

    spi: Introduce device-managed SPI controller allocation
    
    [ Upstream commit 5e844cc37a5cbaa460e68f9a989d321d63088a89 ]
    
    SPI driver probing currently comprises two steps, whereas removal
    comprises only one step:
    
        spi_alloc_master()
        spi_register_controller()
    
        spi_unregister_controller()
    
    That's because spi_unregister_controller() calls device_unregister()
    instead of device_del(), thereby releasing the reference on the
    spi_controller which was obtained by spi_alloc_master().
    
    An SPI driver's private data is contained in the same memory allocation
    as the spi_controller struct.  Thus, once spi_unregister_controller()
    has been called, the private data is inaccessible.  But some drivers
    need to access it after spi_unregister_controller() to perform further
    teardown steps.
    
    Introduce devm_spi_alloc_master() and devm_spi_alloc_slave(), which
    release a reference on the spi_controller struct only after the driver
    has unbound, thereby keeping the memory allocation accessible.  Change
    spi_unregister_controller() to not release a reference if the
    spi_controller was allocated by one of these new devm functions.
    
    The present commit is small enough to be backportable to stable.
    It allows fixing drivers which use the private data in their ->remove()
    hook after it's been freed.  It also allows fixing drivers which neglect
    to release a reference on the spi_controller in the probe error path.
    
    Long-term, most SPI drivers shall be moved over to the devm functions
    introduced herein.  The few that can't shall be changed in a treewide
    commit to explicitly release the last reference on the controller.
    That commit shall amend spi_unregister_controller() to no longer release
    a reference, thereby completing the migration.
    
    As a result, the behaviour will be less surprising and more consistent
    with subsystems such as IIO, which also includes the private data in the
    allocation of the generic iio_dev struct, but calls device_del() in
    iio_device_unregister().
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Link: https://lore.kernel.org/r/272bae2ef08abd21388c98e23729886663d19192.1605121038.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6420613eb103afd58d3645d8e670a5ec86a844c
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Mon Dec 7 03:19:20 2020 -0600

    iommu/amd: Set DTE[IntTabLen] to represent 512 IRTEs
    
    commit 4165bf015ba9454f45beaad621d16c516d5c5afe upstream.
    
    According to the AMD IOMMU spec, the commit 73db2fc595f3
    ("iommu/amd: Increase interrupt remapping table limit to 512 entries")
    also requires the interrupt table length (IntTabLen) to be set to 9
    (power of 2) in the device table mapping entry (DTE).
    
    Fixes: 73db2fc595f3 ("iommu/amd: Increase interrupt remapping table limit to 512 entries")
    Reported-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Link: https://lore.kernel.org/r/20201207091920.3052-1-suravee.suthikulpanit@amd.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 511f202ee7b2d20407cc38339f5cf34f6d1c16ed
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Sun Nov 29 20:35:23 2020 +0100

    speakup: Reject setting the speakup line discipline outside of speakup
    
    commit f0992098cadb4c9c6a00703b66cafe604e178fea upstream.
    
    Speakup exposing a line discipline allows userland to try to use it,
    while it is deemed to be useless, and thus uselessly exposes potential
    bugs. One of them is simply that in such a case if the line sends data,
    spk_ttyio_receive_buf2 is called and crashes since spk_ttyio_synth
    is NULL.
    
    This change restricts the use of the speakup line discipline to
    speakup drivers, thus avoiding such kind of issues altogether.
    
    Cc: stable@vger.kernel.org
    Reported-by: Shisong Qin <qinshisong1205@gmail.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Tested-by: Shisong Qin <qinshisong1205@gmail.com>
    Link: https://lore.kernel.org/r/20201129193523.hm3f6n5xrn6fiyyc@function
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1df23d045eeb86bb41780efc4a01536118531450
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:19 2020 +0200

    i2c: imx: Check for I2SR_IAL after every byte
    
    commit 1de67a3dee7a279ebe4d892b359fe3696938ec15 upstream.
    
    Arbitration Lost (IAL) can happen after every single byte transfer. If
    arbitration is lost, the I2C hardware will autonomously switch from
    master mode to slave. If a transfer is not aborted in this state,
    consecutive transfers will not be executed by the hardware and will
    timeout.
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Tested (not extensively) on Vybrid VF500 (Toradex VF50):
    Tested-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1ce05be75010e3cf94537a754b2d083c5487643
Author: Christian Eggers <ceggers@arri.de>
Date:   Fri Oct 9 13:03:18 2020 +0200

    i2c: imx: Fix reset of I2SR_IAL flag
    
    commit 384a9565f70a876c2e78e58c5ca0bbf0547e4f6d upstream.
    
    According to the "VFxxx Controller Reference Manual" (and the comment
    block starting at line 97), Vybrid requires writing a one for clearing
    an interrupt flag. Syncing the method for clearing I2SR_IIF in
    i2c_imx_isr().
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Fixes: 4b775022f6fd ("i2c: imx: add struct to hold more configurable quirks")
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3c55e0a7f6267ab8f3a83ac59f01c83925bca10
Author: Qian Cai <qcai@redhat.com>
Date:   Sat Dec 5 22:14:55 2020 -0800

    mm/swapfile: do not sleep with a spin lock held
    
    commit b11a76b37a5aa7b07c3e3eeeaae20b25475bddd3 upstream.
    
    We can't call kvfree() with a spin lock held, so defer it.  Fixes a
    might_sleep() runtime warning.
    
    Fixes: 873d7bcfd066 ("mm/swapfile.c: use kvzalloc for swap_info_struct allocation")
    Signed-off-by: Qian Cai <qcai@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201202151549.10350-1-qcai@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66cfc1906e0afaf96db45ec710a002df33c0745e
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Sat Nov 28 16:54:02 2020 -0300

    cifs: fix potential use-after-free in cifs_echo_request()
    
    commit 212253367dc7b49ed3fc194ce71b0992eacaecf2 upstream.
    
    This patch fixes a potential use-after-free bug in
    cifs_echo_request().
    
    For instance,
    
      thread 1
      --------
      cifs_demultiplex_thread()
        clean_demultiplex_info()
          kfree(server)
    
      thread 2 (workqueue)
      --------
      apic_timer_interrupt()
        smp_apic_timer_interrupt()
          irq_exit()
            __do_softirq()
              run_timer_softirq()
                call_timer_fn()
                  cifs_echo_request() <- use-after-free in server ptr
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    CC: Stable <stable@vger.kernel.org>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 653231d42342db24491799ec63c6cf2d30eab35f
Author: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date:   Thu Nov 26 23:38:38 2020 +0530

    ftrace: Fix updating FTRACE_FL_TRAMP
    
    commit 4c75b0ff4e4bf7a45b5aef9639799719c28d0073 upstream.
    
    On powerpc, kprobe-direct.tc triggered FTRACE_WARN_ON() in
    ftrace_get_addr_new() followed by the below message:
      Bad trampoline accounting at: 000000004222522f (wake_up_process+0xc/0x20) (f0000001)
    
    The set of steps leading to this involved:
    - modprobe ftrace-direct-too
    - enable_probe
    - modprobe ftrace-direct
    - rmmod ftrace-direct <-- trigger
    
    The problem turned out to be that we were not updating flags in the
    ftrace record properly. From the above message about the trampoline
    accounting being bad, it can be seen that the ftrace record still has
    FTRACE_FL_TRAMP set though ftrace-direct module is going away. This
    happens because we are checking if any ftrace_ops has the
    FTRACE_FL_TRAMP flag set _before_ updating the filter hash.
    
    The fix for this is to look for any _other_ ftrace_ops that also needs
    FTRACE_FL_TRAMP.
    
    Link: https://lkml.kernel.org/r/56c113aa9c3e10c19144a36d9684c7882bf09af5.1606412433.git.naveen.n.rao@linux.vnet.ibm.com
    
    Cc: stable@vger.kernel.org
    Fixes: a124692b698b0 ("ftrace: Enable trampoline when rec count returns back to one")
    Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c18c5aacdf3afe011721a396862807a10da2818e
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Nov 27 15:11:03 2020 +0100

    ALSA: hda/generic: Add option to enforce preferred_dacs pairs
    
    commit 242d990c158d5b1dabd166516e21992baef5f26a upstream.
    
    The generic parser accepts the preferred_dacs[] pairs as a hint for
    assigning a DAC to each pin, but this hint doesn't work always
    effectively.  Currently it's merely a secondary choice after the trial
    with the path index failed.  This made sometimes it difficult to
    assign DACs without mimicking the connection list and/or the badness
    table.
    
    This patch adds a new flag, obey_preferred_dacs, that changes the
    behavior of the parser.  As its name stands, the parser obeys the
    given preferred_dacs[] pairs by skipping the path index matching and
    giving a high penalty if no DAC is assigned by the pairs.  This mode
    will help for assigning the fixed DACs forcibly from the codec
    driver.
    
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201127141104.11041-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a826f4d6eaf5ee49e8043082b19fc9b6014943d
Author: Kailang Yang <kailang@realtek.com>
Date:   Fri Nov 27 14:39:23 2020 +0800

    ALSA: hda/realtek - Add new codec supported for ALC897
    
    commit e5782a5d5054bf1e03cb7fbd87035037c2a22698 upstream.
    
    Enable new codec supported for ALC897.
    
    Signed-off-by: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/3b00520f304842aab8291eb8d9191bd8@realtek.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65b1d817178996c205b536c416cbb2377cca9915
Author: Jann Horn <jannh@google.com>
Date:   Thu Dec 3 02:25:05 2020 +0100

    tty: Fix ->session locking
    
    commit c8bcd9c5be24fb9e6132e97da5a35e55a83e36b9 upstream.
    
    Currently, locking of ->session is very inconsistent; most places
    protect it using the legacy tty mutex, but disassociate_ctty(),
    __do_SAK(), tiocspgrp() and tiocgsid() don't.
    Two of the writers hold the ctrl_lock (because they already need it for
    ->pgrp), but __proc_set_tty() doesn't do that yet.
    
    On a PREEMPT=y system, an unprivileged user can theoretically abuse
    this broken locking to read 4 bytes of freed memory via TIOCGSID if
    tiocgsid() is preempted long enough at the right point. (Other things
    might also go wrong, especially if root-only ioctls are involved; I'm
    not sure about that.)
    
    Change the locking on ->session such that:
    
     - tty_lock() is held by all writers: By making disassociate_ctty()
       hold it. This should be fine because the same lock can already be
       taken through the call to tty_vhangup_session().
       The tricky part is that we need to shorten the area covered by
       siglock to be able to take tty_lock() without ugly retry logic; as
       far as I can tell, this should be fine, since nothing in the
       signal_struct is touched in the `if (tty)` branch.
     - ctrl_lock is held by all writers: By changing __proc_set_tty() to
       hold the lock a little longer.
     - All readers that aren't holding tty_lock() hold ctrl_lock: By
       adding locking to tiocgsid() and __do_SAK(), and expanding the area
       covered by ctrl_lock in tiocspgrp().
    
    Cc: stable@kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5bf8838bb6fe00e2a6f127a1bfb4c12c7e7b8dbc
Author: Jann Horn <jannh@google.com>
Date:   Thu Dec 3 02:25:04 2020 +0100

    tty: Fix ->pgrp locking in tiocspgrp()
    
    commit 54ffccbf053b5b6ca4f6e45094b942fab92a25fc upstream.
    
    tiocspgrp() takes two tty_struct pointers: One to the tty that userspace
    passed to ioctl() (`tty`) and one to the TTY being changed (`real_tty`).
    These pointers are different when ioctl() is called with a master fd.
    
    To properly lock real_tty->pgrp, we must take real_tty->ctrl_lock.
    
    This bug makes it possible for racing ioctl(TIOCSPGRP, ...) calls on
    both sides of a PTY pair to corrupt the refcount of `struct pid`,
    leading to use-after-free errors.
    
    Fixes: 47f86834bbd4 ("redo locking of tty->pgrp")
    CC: stable@kernel.org
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2935e501d7e8faad5c82454c7b39d8afa48bb7f0
Author: Bjørn Mork <bjorn@mork.no>
Date:   Tue Dec 1 11:03:18 2020 +0100

    USB: serial: option: fix Quectel BG96 matching
    
    commit c98fff7332dbd6e028969f8c2bda3d7bc7a024d8 upstream.
    
    This is a partial revert of commit 2bb70f0a4b23 ("USB: serial:
    option: support dynamic Quectel USB compositions")
    
    The Quectel BG96 is different from most other modern Quectel modems,
    having serial functions with 3 endpoints using ff/ff/ff and ff/fe/ff
    class/subclass/protocol. Including it in the change to accommodate
    dynamic function mapping was incorrect.
    
    Revert to interface number matching for the BG96, assuming static
    layout of the RMNET function on interface 4. This restores support
    for the serial functions on interfaces 2 and 3.
    
    Full lsusb output for the BG96:
    
    Bus 002 Device 003: ID 2c7c:0296
    Device Descriptor:
     bLength                18
     bDescriptorType         1
     bcdUSB               2.00
     bDeviceClass            0 (Defined at Interface level)
     bDeviceSubClass         0
     bDeviceProtocol         0
     bMaxPacketSize0        64
     idVendor           0x2c7c
     idProduct          0x0296
     bcdDevice            0.00
     iManufacturer           3 Qualcomm, Incorporated
     iProduct                2 Qualcomm CDMA Technologies MSM
     iSerial                 4 d1098243
     bNumConfigurations      1
     Configuration Descriptor:
       bLength                 9
       bDescriptorType         2
       wTotalLength          145
       bNumInterfaces          5
       bConfigurationValue     1
       iConfiguration          1 Qualcomm Configuration
       bmAttributes         0xe0
         Self Powered
         Remote Wakeup
       MaxPower              500mA
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        0
         bAlternateSetting       0
         bNumEndpoints           2
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x81  EP 1 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x01  EP 1 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        1
         bAlternateSetting       0
         bNumEndpoints           2
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x82  EP 2 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x02  EP 2 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        2
         bAlternateSetting       0
         bNumEndpoints           3
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x83  EP 3 IN
           bmAttributes            3
             Transfer Type            Interrupt
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0040  1x 64 bytes
           bInterval               5
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x84  EP 4 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x03  EP 3 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        3
         bAlternateSetting       0
         bNumEndpoints           3
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    254
         bInterfaceProtocol    255
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x85  EP 5 IN
           bmAttributes            3
             Transfer Type            Interrupt
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0040  1x 64 bytes
           bInterval               5
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x86  EP 6 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x04  EP 4 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
       Interface Descriptor:
         bLength                 9
         bDescriptorType         4
         bInterfaceNumber        4
         bAlternateSetting       0
         bNumEndpoints           3
         bInterfaceClass       255 Vendor Specific Class
         bInterfaceSubClass    255 Vendor Specific Subclass
         bInterfaceProtocol    255 Vendor Specific Protocol
         iInterface              0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x87  EP 7 IN
           bmAttributes            3
             Transfer Type            Interrupt
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0040  1x 64 bytes
           bInterval               5
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x88  EP 8 IN
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
         Endpoint Descriptor:
           bLength                 7
           bDescriptorType         5
           bEndpointAddress     0x05  EP 5 OUT
           bmAttributes            2
             Transfer Type            Bulk
             Synch Type               None
             Usage Type               Data
           wMaxPacketSize     0x0200  1x 512 bytes
           bInterval               0
    Device Qualifier (for other device speed):
     bLength                10
     bDescriptorType         6
     bcdUSB               2.00
     bDeviceClass            0 (Defined at Interface level)
     bDeviceSubClass         0
     bDeviceProtocol         0
     bMaxPacketSize0        64
     bNumConfigurations      1
    Device Status:     0x0000
     (Bus Powered)
    
    Cc: Sebastian Sjoholm <sebastian.sjoholm@gmail.com>
    Fixes: 2bb70f0a4b23 ("USB: serial: option: support dynamic Quectel USB compositions")
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3367d3cba8f227578751639472d7453ebc2fa796
Author: Giacinto Cifelli <gciofono@gmail.com>
Date:   Wed Nov 25 15:53:04 2020 +0100

    USB: serial: option: add support for Thales Cinterion EXS82
    
    commit 6d6556c04ebaeaf4e7fa8b791c97e2a7c41b38a3 upstream.
    
    There is a single option port in this modem, and it is used as debug port.
    
    lsusb -v for this device:
    
    Bus 001 Device 002: ID 1e2d:006c
    Device Descriptor:
      bLength                18
      bDescriptorType         1
      bcdUSB               2.00
      bDeviceClass          239 Miscellaneous Device
      bDeviceSubClass         2 ?
      bDeviceProtocol         1 Interface Association
      bMaxPacketSize0        64
      idVendor           0x1e2d
      idProduct          0x006c
      bcdDevice            0.00
      iManufacturer           4
      iProduct                3
      iSerial                 5
      bNumConfigurations      1
      Configuration Descriptor:
        bLength                 9
        bDescriptorType         2
        wTotalLength          243
        bNumInterfaces          7
        bConfigurationValue     1
        iConfiguration          2
        bmAttributes         0xe0
          Self Powered
          Remote Wakeup
        MaxPower              500mA
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        0
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass       255 Vendor Specific Class
          bInterfaceSubClass    255 Vendor Specific Subclass
          bInterfaceProtocol    255 Vendor Specific Protocol
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x81  EP 1 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x01  EP 1 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         1
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        1
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          2
          CDC Union:
            bMasterInterface        1
            bSlaveInterface         2
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x82  EP 2 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        2
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x83  EP 3 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x02  EP 2 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         3
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        3
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      2 Abstract (modem)
          bInterfaceProtocol      1 AT-commands (v.25ter)
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC ACM:
            bmCapabilities       0x02
              line coding and serial state
          CDC Call Management:
            bmCapabilities       0x03
              call management
              use DataInterface
            bDataInterface          4
          CDC Union:
            bMasterInterface        3
            bSlaveInterface         4
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x84  EP 4 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        4
          bAlternateSetting       0
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x85  EP 5 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x03  EP 3 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
        Interface Association:
          bLength                 8
          bDescriptorType        11
          bFirstInterface         5
          bInterfaceCount         2
          bFunctionClass          2 Communications
          bFunctionSubClass       2 Abstract (modem)
          bFunctionProtocol       1 AT-commands (v.25ter)
          iFunction               0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        5
          bAlternateSetting       0
          bNumEndpoints           1
          bInterfaceClass         2 Communications
          bInterfaceSubClass      6 Ethernet Networking
          bInterfaceProtocol      0
          iInterface              0
          CDC Header:
            bcdCDC               1.10
          CDC Ethernet:
            iMacAddress                      1 (??)
            bmEthernetStatistics    0x00000000
            wMaxSegmentSize              16384
            wNumberMCFilters            0x0001
            bNumberPowerFilters              0
          CDC Union:
            bMasterInterface        5
            bSlaveInterface         6
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x86  EP 6 IN
            bmAttributes            3
              Transfer Type            Interrupt
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0040  1x 64 bytes
            bInterval               5
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       0
          bNumEndpoints           0
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
        Interface Descriptor:
          bLength                 9
          bDescriptorType         4
          bInterfaceNumber        6
          bAlternateSetting       1
          bNumEndpoints           2
          bInterfaceClass        10 CDC Data
          bInterfaceSubClass      0 Unused
          bInterfaceProtocol      0
          iInterface              0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x87  EP 7 IN
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
          Endpoint Descriptor:
            bLength                 7
            bDescriptorType         5
            bEndpointAddress     0x04  EP 4 OUT
            bmAttributes            2
              Transfer Type            Bulk
              Synch Type               None
              Usage Type               Data
            wMaxPacketSize     0x0200  1x 512 bytes
            bInterval               0
    
    Signed-off-by: Giacinto Cifelli <gciofono@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49f8e537d44bafd9adfe05a5a667c97dfddecb1f
Author: Vincent Palatin <vpalatin@chromium.org>
Date:   Fri Nov 20 10:28:28 2020 +0100

    USB: serial: option: add Fibocom NL668 variants
    
    commit 5e4d659b10fde14403adb2e215df4a3168fe8465 upstream.
    
    Update the USB serial option driver support for the Fibocom NL668 Cat.4
    LTE modules as there are actually several different variants.
    Got clarifications from Fibocom, there are distinct products:
    - VID:PID 1508:1001, NL668 for IOT (no MBIM interface)
    - VID:PID 2cb7:01a0, NL668-AM and NL652-EU are laptop M.2 cards (with
      MBIM interfaces for Windows/Linux/Chrome OS), respectively for Americas
      and Europe.
    
    usb-devices output for the laptop M.2 cards:
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  4 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2cb7 ProdID=01a0 Rev=03.18
    S:  Manufacturer=Fibocom Wireless Inc.
    S:  Product=Fibocom NL652-EU Modem
    S:  SerialNumber=0123456789ABCDEF
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#= 0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: Vincent Palatin <vpalatin@chromium.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b3327c4cccdb897fe4ae8bcf60c8476ab6fed43
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Dec 3 10:11:59 2020 +0100

    USB: serial: ch341: sort device-id entries
    
    commit bf193bfc12dbc3754fc8a6e0e1e3702f1af2f772 upstream.
    
    Keep the device-id entries sorted to make it easier to add new ones in
    the right spot.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c1975c51a03d89bef36b174365e88f744136f72
Author: Jan-Niklas Burfeind <kernel@aiyionpri.me>
Date:   Thu Dec 3 04:03:59 2020 +0100

    USB: serial: ch341: add new Product ID for CH341A
    
    commit 46ee4abb10a07bd8f8ce910ee6b4ae6a947d7f63 upstream.
    
    Add PID for CH340 that's found on a ch341 based Programmer made by keeyees.
    The specific device that contains the serial converter is described
    here: http://www.keeyees.com/a/Products/ej/36.html
    
    The driver works flawlessly as soon as the new PID (0x5512) is added to
    it.
    
    Signed-off-by: Jan-Niklas Burfeind <kernel@aiyionpri.me>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c628f8827aa31f43092c5f750b7b05689c70d8cb
Author: Johan Hovold <johan@kernel.org>
Date:   Fri Dec 4 09:55:19 2020 +0100

    USB: serial: kl5kusb105: fix memleak on open
    
    commit 3f203f057edfcf6bd02c6b942799262bfcf31f73 upstream.
    
    Fix memory leak of control-message transfer buffer on successful open().
    
    Fixes: 6774d5f53271 ("USB: serial: kl5kusb105: fix open error path")
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b83da04de1c05abb31ba662e7ec904080e482ded
Author: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
Date:   Mon Nov 30 12:34:53 2020 -0800

    usb: gadget: f_fs: Use local copy of descriptors for userspace copy
    
    commit a4b98a7512f18534ce33a7e98e49115af59ffa00 upstream.
    
    The function may be unbound causing the ffs_ep and its descriptors
    to be freed while userspace is in the middle of an ioctl requesting
    the same descriptors. Avoid dangling pointer reference by first
    making a local copy of desctiptors before releasing the spinlock.
    
    Fixes: c559a3534109 ("usb: gadget: f_fs: add ioctl returning ep descriptor")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
    Signed-off-by: Jack Pham <jackp@codeaurora.org>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201130203453.28154-1-jackp@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b740800b39c882fc2c95427ba8cd2678b59119f0
Author: Toke Høiland-Jørgensen <toke@redhat.com>
Date:   Tue Jul 7 13:03:25 2020 +0200

    vlan: consolidate VLAN parsing code and limit max parsing depth
    
    [ Upstream commit 469aceddfa3ed16e17ee30533fae45e90f62efd8 ]
    
    Toshiaki pointed out that we now have two very similar functions to extract
    the L3 protocol number in the presence of VLAN tags. And Daniel pointed out
    that the unbounded parsing loop makes it possible for maliciously crafted
    packets to loop through potentially hundreds of tags.
    
    Fix both of these issues by consolidating the two parsing functions and
    limiting the VLAN tag parsing to a max depth of 8 tags. As part of this,
    switch over __vlan_get_protocol() to use skb_header_pointer() instead of
    pskb_may_pull(), to avoid the possible side effects of the latter and keep
    the skb pointer 'const' through all the parsing functions.
    
    v2:
    - Use limit of 8 tags instead of 32 (matching XMIT_RECURSION_LIMIT)
    
    Reported-by: Toshiaki Makita <toshiaki.makita1@gmail.com>
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Fixes: d7bf2ebebc2b ("sched: consistently handle layer3 header accesses in the presence of VLANs")
    Signed-off-by: Toke Høiland-Jørgensen <toke@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fed0845dd869fbf8ca36e1b46338e5a516041d76
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Jun 6 11:31:50 2020 +0200

    pinctrl: baytrail: Fix pin being driven low for a while on gpiod_get(..., GPIOD_OUT_HIGH)
    
    commit 156abe2961601d60a8c2a60c6dc8dd6ce7adcdaf upstream
    
    The pins on the Bay Trail SoC have separate input-buffer and output-buffer
    enable bits and a read of the level bit of the value register will always
    return the value from the input-buffer.
    
    The BIOS of a device may configure a pin in output-only mode, only enabling
    the output buffer, and write 1 to the level bit to drive the pin high.
    This 1 written to the level bit will be stored inside the data-latch of the
    output buffer.
    
    But a subsequent read of the value register will return 0 for the level bit
    because the input-buffer is disabled. This causes a read-modify-write as
    done by byt_gpio_set_direction() to write 0 to the level bit, driving the
    pin low!
    
    Before this commit byt_gpio_direction_output() relied on
    pinctrl_gpio_direction_output() to set the direction, followed by a call
    to byt_gpio_set() to apply the selected value. This causes the pin to
    go low between the pinctrl_gpio_direction_output() and byt_gpio_set()
    calls.
    
    Change byt_gpio_direction_output() to directly make the register
    modifications itself instead. Replacing the 2 subsequent writes to the
    value register with a single write.
    
    Note that the pinctrl code does not keep track internally of the direction,
    so not going through pinctrl_gpio_direction_output() is not an issue.
    
    This issue was noticed on a Trekstor SurfTab Twin 10.1. When the panel is
    already on at boot (no external monitor connected), then the i915 driver
    does a gpiod_get(..., GPIOD_OUT_HIGH) for the panel-enable GPIO. The
    temporarily going low of that GPIO was causing the panel to reset itself
    after which it would not show an image until it was turned off and back on
    again (until a full modeset was done on it). This commit fixes this.
    
    This commit also updates the byt_gpio_direction_input() to use direct
    register accesses instead of going through pinctrl_gpio_direction_input(),
    to keep it consistent with byt_gpio_direction_output().
    
    Note for backporting, this commit depends on:
    commit e2b74419e5cc ("pinctrl: baytrail: Replace WARN with dev_info_once
    when setting direct-irq pin to output")
    
    Cc: stable@vger.kernel.org
    Fixes: 86e3ef812fe3 ("pinctrl: baytrail: Update gpio chip operations")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    [sudip: use byt_gpio and vg->pdev->dev for dev_info()]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 468bc11983ce348a6887e460a32bf0c8ff5ae750
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jan 1 15:52:43 2020 +0100

    pinctrl: baytrail: Replace WARN with dev_info_once when setting direct-irq pin to output
    
    commit e2b74419e5cc7cfc58f3e785849f73f8fa0af5b3 upstream
    
    Suspending Goodix touchscreens requires changing the interrupt pin to
    output before sending them a power-down command. Followed by wiggling
    the interrupt pin to wake the device up, after which it is put back
    in input mode.
    
    On Cherry Trail device the interrupt pin is listed as a GpioInt ACPI
    resource so we can do this without problems as long as we release the
    IRQ before changing the pin to output mode.
    
    On Bay Trail devices with a Goodix touchscreen direct-irq mode is used
    in combination with listing the pin as a normal GpioIo resource. This
    works fine, but this triggers the WARN in byt_gpio_set_direction-s output
    path because direct-irq support is enabled on the pin.
    
    This commit replaces the WARN call with a dev_info_once call, fixing a
    bunch of WARN splats in dmesg on each suspend/resume cycle.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 972a7c7605b6e9033fbff45ed3f725594da6a4ca
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Dec 8 10:17:35 2020 +0100

    Linux 4.14.211
    
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201206111555.569713359@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8ef15a472fd9243074940adf06ed57e40ff2f5c
Author: Shiraz Saleem <shiraz.saleem@intel.com>
Date:   Tue Nov 24 18:56:16 2020 -0600

    RDMA/i40iw: Address an mmap handler exploit in i40iw
    
    commit 2ed381439e89fa6d1a0839ef45ccd45d99d8e915 upstream.
    
    i40iw_mmap manipulates the vma->vm_pgoff to differentiate a push page mmap
    vs a doorbell mmap, and uses it to compute the pfn in remap_pfn_range
    without any validation. This is vulnerable to an mmap exploit as described
    in: https://lore.kernel.org/r/20201119093523.7588-1-zhudi21@huawei.com
    
    The push feature is disabled in the driver currently and therefore no push
    mmaps are issued from user-space. The feature does not work as expected in
    the x722 product.
    
    Remove the push module parameter and all VMA attribute manipulations for
    this feature in i40iw_mmap. Update i40iw_mmap to only allow DB user
    mmapings at offset = 0. Check vm_pgoff for zero and if the mmaps are bound
    to a single page.
    
    Cc: <stable@kernel.org>
    Fixes: d37498417947 ("i40iw: add files for iwarp interface")
    Link: https://lore.kernel.org/r/20201125005616.1800-2-shiraz.saleem@intel.com
    Reported-by: Di Zhu <zhudi21@huawei.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c175aff4509a2031e23ab6645cb6c1b2013eb0a
Author: Po-Hsu Lin <po-hsu.lin@canonical.com>
Date:   Mon Nov 30 22:39:40 2020 -0800

    Input: i8042 - add ByteSpeed touchpad to noloop table
    
    commit a48491c65b513e5cdc3e7a886a4db915f848a5f5 upstream.
    
    It looks like the C15B laptop got another vendor: ByteSpeed LLC.
    
    Avoid AUX loopback on this touchpad as well, thus input subsystem will
    be able to recognize a Synaptics touchpad in the AUX port.
    
    BugLink: https://bugs.launchpad.net/bugs/1906128
    Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
    Link: https://lore.kernel.org/r/20201201054723.5939-1-po-hsu.lin@canonical.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22e06f7ed66edfe44aff19cd07d21314d776a05f
Author: Sanjay Govind <sanjay.govind9@gmail.com>
Date:   Mon Nov 30 23:41:48 2020 -0800

    Input: xpad - support Ardwiino Controllers
    
    commit 2aab1561439032be2e98811dd0ddbeb5b2ae4c61 upstream.
    
    This commit adds support for Ardwiino Controllers
    
    Signed-off-by: Sanjay Govind <sanjay.govind9@gmail.com>
    Link: https://lore.kernel.org/r/20201201071922.131666-1-sanjay.govind9@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cf60287016d154f55725a9498a1e00c858df083
Author: Hector Martin <marcan@marcan.st>
Date:   Fri Nov 27 22:26:35 2020 +0900

    ALSA: usb-audio: US16x08: fix value count for level meters
    
    commit 402d5840b0d40a2a26c8651165d29b534abb6d36 upstream.
    
    The level meter control returns 34 integers of info. This fixes:
    
    snd-usb-audio 3-1:1.0: control 2:0:0:Level Meter:0: access overflow
    
    Fixes: d2bb390a2081 ("ALSA: usb-audio: Tascam US-16x08 DSP mixer quirk")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Link: https://lore.kernel.org/r/20201127132635.18947-1-marcan@marcan.st
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 268e9c0420892e832ad00ced0065a148c396e253
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Oct 26 16:36:20 2020 +0100

    dt-bindings: net: correct interrupt flags in examples
    
    [ Upstream commit 4d521943f76bd0d1e68ea5e02df7aadd30b2838a ]
    
    GPIO_ACTIVE_x flags are not correct in the context of interrupt flags.
    These are simple defines so they could be used in DTS but they will not
    have the same meaning:
    1. GPIO_ACTIVE_HIGH = 0 = IRQ_TYPE_NONE
    2. GPIO_ACTIVE_LOW  = 1 = IRQ_TYPE_EDGE_RISING
    
    Correct the interrupt flags, assuming the author of the code wanted same
    logical behavior behind the name "ACTIVE_xxx", this is:
      ACTIVE_LOW  => IRQ_TYPE_LEVEL_LOW
      ACTIVE_HIGH => IRQ_TYPE_LEVEL_HIGH
    
    Fixes: a1a8b4594f8d ("NFC: pn544: i2c: Add DTS Documentation")
    Fixes: 6be88670fc59 ("NFC: nxp-nci_i2c: Add I2C support to NXP NCI driver")
    Fixes: e3b329221567 ("dt-bindings: can: tcan4x5x: Update binding to use interrupt property")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Marc Kleine-Budde <mkl@pengutronix.de> # for tcan4x5x.txt
    Link: https://lore.kernel.org/r/20201026153620.89268-1-krzk@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 32a59302bad0bb864b8b670973a76459a94b2fc8
Author: Eran Ben Elisha <eranbe@nvidia.com>
Date:   Wed Dec 2 20:39:43 2020 -0800

    net/mlx5: Fix wrong address reclaim when command interface is down
    
    [ Upstream commit 1d2bb5ad89f47d8ce8aedc70ef85059ab3870292 ]
    
    When command interface is down, driver to reclaim all 4K page chucks that
    were hold by the Firmeware. Fix a bug for 64K page size systems, where
    driver repeatedly released only the first chunk of the page.
    
    Define helper function to fill 4K chunks for a given Firmware pages.
    Iterate over all unreleased Firmware pages and call the hepler per each.
    
    Fixes: 5adff6a08862 ("net/mlx5: Fix incorrect page count when in internal error")
    Signed-off-by: Eran Ben Elisha <eranbe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30382e89bc59d445fb7ec82fd5f21eb585ed5d47
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Dec 2 17:57:15 2020 +0800

    net: pasemi: fix error return code in pasemi_mac_open()
    
    [ Upstream commit aba84871bd4f52c4dfcf3ad5d4501a6c9d2de90e ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 72b05b9940f0 ("pasemi_mac: RX/TX ring management cleanup")
    Fixes: 8d636d8bc5ff ("pasemi_mac: jumbo frame support")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/r/1606903035-1838-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 384469cdbc96c2228f4841be9ae03c58861f04f8
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Dec 2 17:56:05 2020 +0800

    cxgb3: fix error return code in t3_sge_alloc_qset()
    
    [ Upstream commit ff9924897f8bfed82e61894b373ab9d2dfea5b10 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: b1fb1f280d09 ("cxgb3 - Fix dma mapping error path")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Acked-by: Raju Rangoju <rajur@chelsio.com>
    Link: https://lore.kernel.org/r/1606902965-1646-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8ccfe6f4712b3a9e89e224183cddb69e2bf1032
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Dec 1 18:15:12 2020 +0300

    net/x25: prevent a couple of overflows
    
    [ Upstream commit 6ee50c8e262a0f0693dad264c3c99e30e6442a56 ]
    
    The .x25_addr[] address comes from the user and is not necessarily
    NUL terminated.  This leads to a couple problems.  The first problem is
    that the strlen() in x25_bind() can read beyond the end of the buffer.
    
    The second problem is more subtle and could result in memory corruption.
    The call tree is:
      x25_connect()
      --> x25_write_internal()
          --> x25_addr_aton()
    
    The .x25_addr[] buffers are copied to the "addresses" buffer from
    x25_write_internal() so it will lead to stack corruption.
    
    Verify that the strings are NUL terminated and return -EINVAL if they
    are not.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Fixes: a9288525d2ae ("X25: Dont let x25_bind use addresses containing characters")
    Reported-by: "kiyin(尹亮)" <kiyin@tencent.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Martin Schiller <ms@dev.tdt.de>
    Link: https://lore.kernel.org/r/X8ZeAKm8FnFpN//B@mwanda
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7bd1927cd0e925aef4717c5c724be977f24e94c
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Tue Dec 1 09:52:11 2020 -0600

    ibmvnic: Fix TX completion error handling
    
    [ Upstream commit ba246c175116e2e8fa4fdfa5f8e958e086a9a818 ]
    
    TX completions received with an error return code are not
    being processed properly. When an error code is seen, do not
    proceed to the next completion before cleaning up the existing
    entry's data structures.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46c56a2bf2cc7b09866bd148ce73941f3a0999e9
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Tue Dec 1 09:52:10 2020 -0600

    ibmvnic: Ensure that SCRQ entry reads are correctly ordered
    
    [ Upstream commit b71ec952234610b4f90ef17a2fdcb124d5320070 ]
    
    Ensure that received Subordinate Command-Response Queue (SCRQ)
    entries are properly read in order by the driver. These queues
    are used in the ibmvnic device to process RX buffer and TX completion
    descriptors. dma_rmb barriers have been added after checking for a
    pending descriptor to ensure the correct descriptor entry is checked
    and after reading the SCRQ descriptor to ensure the entire
    descriptor is read before processing.
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d281b71405d0b5d16979ed0eabe7277bd12bcf5
Author: Guillaume Nault <gnault@redhat.com>
Date:   Thu Nov 26 19:09:22 2020 +0100

    ipv4: Fix tos mask in inet_rtm_getroute()
    
    [ Upstream commit 1ebf179037cb46c19da3a9c1e2ca16e7a754b75e ]
    
    When inet_rtm_getroute() was converted to use the RCU variants of
    ip_route_input() and ip_route_output_key(), the TOS parameters
    stopped being masked with IPTOS_RT_MASK before doing the route lookup.
    
    As a result, "ip route get" can return a different route than what
    would be used when sending real packets.
    
    For example:
    
        $ ip route add 192.0.2.11/32 dev eth0
        $ ip route add unreachable 192.0.2.11/32 tos 2
        $ ip route get 192.0.2.11 tos 2
        RTNETLINK answers: No route to host
    
    But, packets with TOS 2 (ECT(0) if interpreted as an ECN bit) would
    actually be routed using the first route:
    
        $ ping -c 1 -Q 2 192.0.2.11
        PING 192.0.2.11 (192.0.2.11) 56(84) bytes of data.
        64 bytes from 192.0.2.11: icmp_seq=1 ttl=64 time=0.173 ms
    
        --- 192.0.2.11 ping statistics ---
        1 packets transmitted, 1 received, 0% packet loss, time 0ms
        rtt min/avg/max/mdev = 0.173/0.173/0.173/0.000 ms
    
    This patch re-applies IPTOS_RT_MASK in inet_rtm_getroute(), to
    return results consistent with real route lookups.
    
    Fixes: 3765d35ed8b9 ("net: ipv4: Convert inet_rtm_getroute to rcu versions of route lookup")
    Signed-off-by: Guillaume Nault <gnault@redhat.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Link: https://lore.kernel.org/r/b2d237d08317ca55926add9654a48409ac1b8f5b.1606412894.git.gnault@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75fc57f47983fca7713ae72708821bd5dc70f450
Author: Antoine Tenart <atenart@kernel.org>
Date:   Mon Nov 23 18:49:02 2020 +0100

    netfilter: bridge: reset skb->pkt_type after NF_INET_POST_ROUTING traversal
    
    [ Upstream commit 44f64f23bae2f0fad25503bc7ab86cd08d04cd47 ]
    
    Netfilter changes PACKET_OTHERHOST to PACKET_HOST before invoking the
    hooks as, while it's an expected value for a bridge, routing expects
    PACKET_HOST. The change is undone later on after hook traversal. This
    can be seen with pairs of functions updating skb>pkt_type and then
    reverting it to its original value:
    
    For hook NF_INET_PRE_ROUTING:
      setup_pre_routing / br_nf_pre_routing_finish
    
    For hook NF_INET_FORWARD:
      br_nf_forward_ip / br_nf_forward_finish
    
    But the third case where netfilter does this, for hook
    NF_INET_POST_ROUTING, the packet type is changed in br_nf_post_routing
    but never reverted. A comment says:
    
      /* We assume any code from br_dev_queue_push_xmit onwards doesn't care
       * about the value of skb->pkt_type. */
    
    But when having a tunnel (say vxlan) attached to a bridge we have the
    following call trace:
    
      br_nf_pre_routing
      br_nf_pre_routing_ipv6
         br_nf_pre_routing_finish
      br_nf_forward_ip
         br_nf_forward_finish
      br_nf_post_routing           <- pkt_type is updated to PACKET_HOST
         br_nf_dev_queue_xmit      <- but not reverted to its original value
      vxlan_xmit
         vxlan_xmit_one
            skb_tunnel_check_pmtu  <- a check on pkt_type is performed
    
    In this specific case, this creates issues such as when an ICMPv6 PTB
    should be sent back. When CONFIG_BRIDGE_NETFILTER is enabled, the PTB
    isn't sent (as skb_tunnel_check_pmtu checks if pkt_type is PACKET_HOST
    and returns early).
    
    If the comment is right and no one cares about the value of
    skb->pkt_type after br_dev_queue_push_xmit (which isn't true), resetting
    it to its original value should be safe.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Antoine Tenart <atenart@kernel.org>
    Reviewed-by: Florian Westphal <fw@strlen.de>
    Link: https://lore.kernel.org/r/20201123174902.622102-1-atenart@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4fe29afc67234a62338071f88543c28b6d452f9
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Fri Nov 20 14:28:27 2020 +0000

    bonding: wait for sysfs kobject destruction before freeing struct slave
    
    [ Upstream commit b9ad3e9f5a7a760ab068e33e1f18d240ba32ce92 ]
    
    syzkaller found that with CONFIG_DEBUG_KOBJECT_RELEASE=y, releasing a
    struct slave device could result in the following splat:
    
      kobject: 'bonding_slave' (00000000cecdd4fe): kobject_release, parent 0000000074ceb2b2 (delayed 1000)
      bond0 (unregistering): (slave bond_slave_1): Releasing backup interface
      ------------[ cut here ]------------
      ODEBUG: free active (active state 0) object type: timer_list hint: workqueue_select_cpu_near kernel/workqueue.c:1549 [inline]
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x98 kernel/workqueue.c:1600
      WARNING: CPU: 1 PID: 842 at lib/debugobjects.c:485 debug_print_object+0x180/0x240 lib/debugobjects.c:485
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 1 PID: 842 Comm: kworker/u4:4 Tainted: G S                5.9.0-rc8+ #96
      Hardware name: linux,dummy-virt (DT)
      Workqueue: netns cleanup_net
      Call trace:
       dump_backtrace+0x0/0x4d8 include/linux/bitmap.h:239
       show_stack+0x34/0x48 arch/arm64/kernel/traps.c:142
       __dump_stack lib/dump_stack.c:77 [inline]
       dump_stack+0x174/0x1f8 lib/dump_stack.c:118
       panic+0x360/0x7a0 kernel/panic.c:231
       __warn+0x244/0x2ec kernel/panic.c:600
       report_bug+0x240/0x398 lib/bug.c:198
       bug_handler+0x50/0xc0 arch/arm64/kernel/traps.c:974
       call_break_hook+0x160/0x1d8 arch/arm64/kernel/debug-monitors.c:322
       brk_handler+0x30/0xc0 arch/arm64/kernel/debug-monitors.c:329
       do_debug_exception+0x184/0x340 arch/arm64/mm/fault.c:864
       el1_dbg+0x48/0xb0 arch/arm64/kernel/entry-common.c:65
       el1_sync_handler+0x170/0x1c8 arch/arm64/kernel/entry-common.c:93
       el1_sync+0x80/0x100 arch/arm64/kernel/entry.S:594
       debug_print_object+0x180/0x240 lib/debugobjects.c:485
       __debug_check_no_obj_freed lib/debugobjects.c:967 [inline]
       debug_check_no_obj_freed+0x200/0x430 lib/debugobjects.c:998
       slab_free_hook mm/slub.c:1536 [inline]
       slab_free_freelist_hook+0x190/0x210 mm/slub.c:1577
       slab_free mm/slub.c:3138 [inline]
       kfree+0x13c/0x460 mm/slub.c:4119
       bond_free_slave+0x8c/0xf8 drivers/net/bonding/bond_main.c:1492
       __bond_release_one+0xe0c/0xec8 drivers/net/bonding/bond_main.c:2190
       bond_slave_netdev_event drivers/net/bonding/bond_main.c:3309 [inline]
       bond_netdev_event+0x8f0/0xa70 drivers/net/bonding/bond_main.c:3420
       notifier_call_chain+0xf0/0x200 kernel/notifier.c:83
       __raw_notifier_call_chain kernel/notifier.c:361 [inline]
       raw_notifier_call_chain+0x44/0x58 kernel/notifier.c:368
       call_netdevice_notifiers_info+0xbc/0x150 net/core/dev.c:2033
       call_netdevice_notifiers_extack net/core/dev.c:2045 [inline]
       call_netdevice_notifiers net/core/dev.c:2059 [inline]
       rollback_registered_many+0x6a4/0xec0 net/core/dev.c:9347
       unregister_netdevice_many.part.0+0x2c/0x1c0 net/core/dev.c:10509
       unregister_netdevice_many net/core/dev.c:10508 [inline]
       default_device_exit_batch+0x294/0x338 net/core/dev.c:10992
       ops_exit_list.isra.0+0xec/0x150 net/core/net_namespace.c:189
       cleanup_net+0x44c/0x888 net/core/net_namespace.c:603
       process_one_work+0x96c/0x18c0 kernel/workqueue.c:2269
       worker_thread+0x3f0/0xc30 kernel/workqueue.c:2415
       kthread+0x390/0x498 kernel/kthread.c:292
       ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:925
    
    This is a potential use-after-free if the sysfs nodes are being accessed
    whilst removing the struct slave, so wait for the object destruction to
    complete before freeing the struct slave itself.
    
    Fixes: 07699f9a7c8d ("bonding: add sysfs /slave dir for bond slave devices.")
    Fixes: a068aab42258 ("bonding: Fix reference count leak in bond_sysfs_slave_add.")
    Cc: Qiushi Wu <wu000273@umn.edu>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Cc: Veaceslav Falico <vfalico@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201120142827.879226-1-jamie@nuviainc.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c6e69f0b110adca97e2fe10b38765e3f00cfa88
Author: Yves-Alexis Perez <corsac@corsac.net>
Date:   Thu Nov 19 18:24:39 2020 +0100

    usbnet: ipheth: fix connectivity with iOS 14
    
    [ Upstream commit f33d9e2b48a34e1558b67a473a1fc1d6e793f93c ]
    
    Starting with iOS 14 released in September 2020, connectivity using the
    personal hotspot USB tethering function of iOS devices is broken.
    
    Communication between the host and the device (for example ICMP traffic
    or DNS resolution using the DNS service running in the device itself)
    works fine, but communication to endpoints further away doesn't work.
    
    Investigation on the matter shows that no UDP and ICMP traffic from the
    tethered host is reaching the Internet at all. For TCP traffic there are
    exchanges between tethered host and server but packets are modified in
    transit leading to impossible communication.
    
    After some trials Matti Vuorela discovered that reducing the URB buffer
    size by two bytes restored the previous behavior. While a better
    solution might exist to fix the issue, since the protocol is not
    publicly documented and considering the small size of the fix, let's do
    that.
    
    Tested-by: Matti Vuorela <matti.vuorela@bitfactor.fi>
    Signed-off-by: Yves-Alexis Perez <corsac@corsac.net>
    Link: https://lore.kernel.org/linux-usb/CAAn0qaXmysJ9vx3ZEMkViv_B19ju-_ExN8Yn_uSefxpjS6g4Lw@mail.gmail.com/
    Link: https://github.com/libimobiledevice/libimobiledevice/issues/1038
    Link: https://lore.kernel.org/r/20201119172439.94988-1-corsac@corsac.net
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c85b5d3d656c16c9f8b9ffa7fefd6e71eaab8f87
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Nov 20 07:59:54 2020 -0700

    tun: honor IOCB_NOWAIT flag
    
    [ Upstream commit 5aac0390a63b8718237a61dd0d24a29201d1c94a ]
    
    tun only checks the file O_NONBLOCK flag, but it should also be checking
    the iocb IOCB_NOWAIT flag. Any fops using ->read/write_iter() should check
    both, otherwise it breaks users that correctly expect O_NONBLOCK semantics
    if IOCB_NOWAIT is set.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Link: https://lore.kernel.org/r/e9451860-96cc-c7c7-47b8-fe42cadd5f4c@kernel.dk
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e35e675d199e6ac17c8718e2a30b95fd11f04b93
Author: Alexander Duyck <alexanderduyck@fb.com>
Date:   Thu Nov 19 13:23:58 2020 -0800

    tcp: Set INET_ECN_xmit configuration in tcp_reinit_congestion_control
    
    [ Upstream commit 55472017a4219ca965a957584affdb17549ae4a4 ]
    
    When setting congestion control via a BPF program it is seen that the
    SYN/ACK for packets within a given flow will not include the ECT0 flag. A
    bit of simple printk debugging shows that when this is configured without
    BPF we will see the value INET_ECN_xmit value initialized in
    tcp_assign_congestion_control however when we configure this via BPF the
    socket is in the closed state and as such it isn't configured, and I do not
    see it being initialized when we transition the socket into the listen
    state. The result of this is that the ECT0 bit is configured based on
    whatever the default state is for the socket.
    
    Any easy way to reproduce this is to monitor the following with tcpdump:
    tools/testing/selftests/bpf/test_progs -t bpf_tcp_ca
    
    Without this patch the SYN/ACK will follow whatever the default is. If dctcp
    all SYN/ACK packets will have the ECT0 bit set, and if it is not then ECT0
    will be cleared on all SYN/ACK packets. With this patch applied the SYN/ACK
    bit matches the value seen on the other packets in the given stream.
    
    Fixes: 91b5b21c7c16 ("bpf: Add support for changing congestion control")
    Signed-off-by: Alexander Duyck <alexanderduyck@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c593fe3bcece496f6fc188f2e8f2ed9937b9130
Author: Willem de Bruijn <willemb@google.com>
Date:   Thu Nov 26 10:12:20 2020 -0500

    sock: set sk_err to ee_errno on dequeue from errq
    
    [ Upstream commit 985f7337421a811cb354ca93882f943c8335a6f5 ]
    
    When setting sk_err, set it to ee_errno, not ee_origin.
    
    Commit f5f99309fa74 ("sock: do not set sk_err in
    sock_dequeue_err_skb") disabled updating sk_err on errq dequeue,
    which is correct for most error types (origins):
    
      -       sk->sk_err = err;
    
    Commit 38b257938ac6 ("sock: reset sk_err when the error queue is
    empty") reenabled the behavior for IMCP origins, which do require it:
    
      +       if (icmp_next)
      +               sk->sk_err = SKB_EXT_ERR(skb_next)->ee.ee_origin;
    
    But read from ee_errno.
    
    Fixes: 38b257938ac6 ("sock: reset sk_err when the error queue is empty")
    Reported-by: Ayush Ranjan <ayushranjan@google.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Link: https://lore.kernel.org/r/20201126151220.2819322-1-willemdebruijn.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c600c3a1a82cd857f7a9235b7e64c2542253fbb
Author: Anmol Karn <anmol.karan123@gmail.com>
Date:   Fri Nov 20 00:40:43 2020 +0530

    rose: Fix Null pointer dereference in rose_send_frame()
    
    [ Upstream commit 3b3fd068c56e3fbea30090859216a368398e39bf ]
    
    rose_send_frame() dereferences `neigh->dev` when called from
    rose_transmit_clear_request(), and the first occurrence of the
    `neigh` is in rose_loopback_timer() as `rose_loopback_neigh`,
    and it is initialized in rose_add_loopback_neigh() as NULL.
    i.e when `rose_loopback_neigh` used in rose_loopback_timer()
    its `->dev` was still NULL and rose_loopback_timer() was calling
    rose_rx_call_request() without checking for NULL.
    
    - net/rose/rose_link.c
    This bug seems to get triggered in this line:
    
    rose_call = (ax25_address *)neigh->dev->dev_addr;
    
    Fix it by adding NULL checking for `rose_loopback_neigh->dev`
    in rose_loopback_timer().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Reported-by: syzbot+a1c743815982d9496393@syzkaller.appspotmail.com
    Tested-by: syzbot+a1c743815982d9496393@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=9d2a7ca8c7f2e4b682c97578dfa3f236258300b3
    Signed-off-by: Anmol Karn <anmol.karan123@gmail.com>
    Link: https://lore.kernel.org/r/20201119191043.28813-1-anmol.karan123@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4832e6cfed9e0c29a2a3797729e57badebb9dba7
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Fri Nov 20 11:06:57 2020 +0100

    net/af_iucv: set correct sk_protocol for child sockets
    
    [ Upstream commit c5dab0941fcdc9664eb0ec0d4d51433216d91336 ]
    
    Child sockets erroneously inherit their parent's sk_type (ie. SOCK_*),
    instead of the PF_IUCV protocol that the parent was created with in
    iucv_sock_create().
    
    We're currently not using sk->sk_protocol ourselves, so this shouldn't
    have much impact (except eg. getting the output in skb_dump() right).
    
    Fixes: eac3731bd04c ("[S390]: Add AF_IUCV socket support")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201120100657.34407-1-jwi@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 904d92cd868d87ded492cd7675a1ff28bd416f4e
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 18:46:47 2023 +0500

    Revert "net: Update window_clamp if SOCK_RCVBUF is set"
    
    This reverts commit 73743ce4c654164ee88c656809f3d8182ed32dc7.

commit 38bf5d3575372382352e85e524e482b8c7271e3b
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 18:33:12 2023 +0500

    Revert parts from 9a75c702eb6f92154418666df3be88437f0118ae causing errors

commit 9a143ffe15a9d03345091e8deb2c3f401a972dd0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Dec 2 08:34:45 2020 +0100

    Linux 4.14.210
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201201084644.803812112@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a196687185be6ed7838b9d4c3f4653aa7f3efa4a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Nov 19 12:00:40 2020 -0500

    USB: core: Fix regression in Hercules audio card
    
    commit 184eead057cc7e803558269babc1f2cfb9113ad1 upstream
    
    Commit 3e4f8e21c4f2 ("USB: core: fix check for duplicate endpoints")
    aimed to make the USB stack more reliable by detecting and skipping
    over endpoints that are duplicated between interfaces.  This caused a
    regression for a Hercules audio card (reported as Bugzilla #208357),
    which contains such non-compliant duplications.  Although the
    duplications are harmless, skipping the valid endpoints prevented the
    device from working.
    
    This patch fixes the regression by adding ENDPOINT_IGNORE quirks for
    the Hercules card, telling the kernel to ignore the invalid duplicate
    endpoints and thereby allowing the valid endpoints to be used as
    intended.
    
    Fixes: 3e4f8e21c4f2 ("USB: core: fix check for duplicate endpoints")
    CC: <stable@vger.kernel.org>
    Reported-by: Alexander Chalikiopoulos <bugzilla.kernel.org@mrtoasted.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201119170040.GA576844@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [sudip: use usb_endpoint_blacklist and USB_QUIRK_ENDPOINT_BLACKLIST]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5725fece322cf96f9dbce60585bab50fde07804
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Feb 3 16:38:28 2020 +0100

    USB: core: add endpoint-blacklist quirk
    
    commit 73f8bda9b5dc1c69df2bc55c0cbb24461a6391a9 upstream
    
    Add a new device quirk that can be used to blacklist endpoints.
    
    Since commit 3e4f8e21c4f2 ("USB: core: fix check for duplicate
    endpoints") USB core ignores any duplicate endpoints found during
    descriptor parsing.
    
    In order to handle devices where the first interfaces with duplicate
    endpoints are the ones that should have their endpoints ignored, we need
    to add a blacklist.
    
    Tested-by: edes <edes@gmx.net>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200203153830.26394-2-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ab85df292048daaa59788927da7b900d739ecf3
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Tue Dec 1 01:28:49 2020 +0800

    x86/resctrl: Add necessary kernfs_put() calls to prevent refcount leak
    
    commit 758999246965eeb8b253d47e72f7bfe508804b16 upstream.
    
    On resource group creation via a mkdir an extra kernfs_node reference is
    obtained by kernfs_get() to ensure that the rdtgroup structure remains
    accessible for the rdtgroup_kn_unlock() calls where it is removed on
    deletion. Currently the extra kernfs_node reference count is only
    dropped by kernfs_put() in rdtgroup_kn_unlock() while the rdtgroup
    structure is removed in a few other locations that lack the matching
    reference drop.
    
    In call paths of rmdir and umount, when a control group is removed,
    kernfs_remove() is called to remove the whole kernfs nodes tree of the
    control group (including the kernfs nodes trees of all child monitoring
    groups), and then rdtgroup structure is freed by kfree(). The rdtgroup
    structures of all child monitoring groups under the control group are
    freed by kfree() in free_all_child_rdtgrp().
    
    Before calling kfree() to free the rdtgroup structures, the kernfs node
    of the control group itself as well as the kernfs nodes of all child
    monitoring groups still take the extra references which will never be
    dropped to 0 and the kernfs nodes will never be freed. It leads to
    reference count leak and kernfs_node_cache memory leak.
    
    For example, reference count leak is observed in these two cases:
      (1) mount -t resctrl resctrl /sys/fs/resctrl
          mkdir /sys/fs/resctrl/c1
          mkdir /sys/fs/resctrl/c1/mon_groups/m1
          umount /sys/fs/resctrl
    
      (2) mkdir /sys/fs/resctrl/c1
          mkdir /sys/fs/resctrl/c1/mon_groups/m1
          rmdir /sys/fs/resctrl/c1
    
    The same reference count leak issue also exists in the error exit paths
    of mkdir in mkdir_rdt_prepare() and rdtgroup_mkdir_ctrl_mon().
    
    Fix this issue by following changes to make sure the extra kernfs_node
    reference on rdtgroup is dropped before freeing the rdtgroup structure.
      (1) Introduce rdtgroup removal helper rdtgroup_remove() to wrap up
      kernfs_put() and kfree().
    
      (2) Call rdtgroup_remove() in rdtgroup removal path where the rdtgroup
      structure is about to be freed by kfree().
    
      (3) Call rdtgroup_remove() or kernfs_put() as appropriate in the error
      exit paths of mkdir where an extra reference is taken by kernfs_get().
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    in older stable trees.
    
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: e02737d5b826 ("x86/intel_rdt: Add tasks files")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1604085088-31707-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6461a01c8749cd1b226976dcd72b5c5c8548af72
Author: Xiaochen Shen <xiaochen.shen@intel.com>
Date:   Tue Dec 1 01:27:08 2020 +0800

    x86/resctrl: Remove superfluous kernfs_get() calls to prevent refcount leak
    
    commit fd8d9db3559a29fd737bcdb7c4fcbe1940caae34 upstream.
    
    Willem reported growing of kernfs_node_cache entries in slabtop when
    repeatedly creating and removing resctrl subdirectories as well as when
    repeatedly mounting and unmounting the resctrl filesystem.
    
    On resource group (control as well as monitoring) creation via a mkdir
    an extra kernfs_node reference is obtained to ensure that the rdtgroup
    structure remains accessible for the rdtgroup_kn_unlock() calls where it
    is removed on deletion. The kernfs_node reference count is dropped by
    kernfs_put() in rdtgroup_kn_unlock().
    
    With the above explaining the need for one kernfs_get()/kernfs_put()
    pair in resctrl there are more places where a kernfs_node reference is
    obtained without a corresponding release. The excessive amount of
    reference count on kernfs nodes will never be dropped to 0 and the
    kernfs nodes will never be freed in the call paths of rmdir and umount.
    It leads to reference count leak and kernfs_node_cache memory leak.
    
    Remove the superfluous kernfs_get() calls and expand the existing
    comments surrounding the remaining kernfs_get()/kernfs_put() pair that
    remains in use.
    
    Superfluous kernfs_get() calls are removed from two areas:
    
      (1) In call paths of mount and mkdir, when kernfs nodes for "info",
      "mon_groups" and "mon_data" directories and sub-directories are
      created, the reference count of newly created kernfs node is set to 1.
      But after kernfs_create_dir() returns, superfluous kernfs_get() are
      called to take an additional reference.
    
      (2) kernfs_get() calls in rmdir call paths.
    
    Backporting notes:
    
    Since upstream commit fa7d949337cc ("x86/resctrl: Rename and move rdt
    files to a separate directory"), the file
    arch/x86/kernel/cpu/intel_rdt_rdtgroup.c has been renamed and moved to
    arch/x86/kernel/cpu/resctrl/rdtgroup.c.
    Apply the change against file arch/x86/kernel/cpu/intel_rdt_rdtgroup.c
    for older stable trees.
    
    Upstream commit 17eafd076291 ("x86/intel_rdt: Split resource group
    removal in two") moved part of resource group removal code from
    rdtgroup_rmdir_ctrl() into a separate function rdtgroup_ctrl_remove().
    Apply the change against original code base of rdtgroup_rmdir_ctrl() for
    older stable trees.
    
    Fixes: 17eafd076291 ("x86/intel_rdt: Split resource group removal in two")
    Fixes: 4af4a88e0c92 ("x86/intel_rdt/cqm: Add mount,umount support")
    Fixes: f3cbeacaa06e ("x86/intel_rdt/cqm: Add rmdir support")
    Fixes: d89b7379015f ("x86/intel_rdt/cqm: Add mon_data")
    Fixes: c7d9aac61311 ("x86/intel_rdt/cqm: Add mkdir support for RDT monitoring")
    Fixes: 5dc1d5c6bac2 ("x86/intel_rdt: Simplify info and base file lists")
    Fixes: 60cf5e101fd4 ("x86/intel_rdt: Add mkdir to resctrl file system")
    Fixes: 4e978d06dedb ("x86/intel_rdt: Add "info" files to resctrl file system")
    Reported-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Xiaochen Shen <xiaochen.shen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Tested-by: Willem de Bruijn <willemb@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1604085053-31639-1-git-send-email-xiaochen.shen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a93b3c539a21198a4e8318e5be55c7d83ebe85eb
Author: Anand K Mistry <amistry@google.com>
Date:   Tue Nov 10 12:33:53 2020 +1100

    x86/speculation: Fix prctl() when spectre_v2_user={seccomp,prctl},ibpb
    
    commit 33fc379df76b4991e5ae312f07bcd6820811971e upstream.
    
    When spectre_v2_user={seccomp,prctl},ibpb is specified on the command
    line, IBPB is force-enabled and STIPB is conditionally-enabled (or not
    available).
    
    However, since
    
      21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    
    the spectre_v2_user_ibpb variable is set to SPECTRE_V2_USER_{PRCTL,SECCOMP}
    instead of SPECTRE_V2_USER_STRICT, which is the actual behaviour.
    Because the issuing of IBPB relies on the switch_mm_*_ibpb static
    branches, the mitigations behave as expected.
    
    Since
    
      1978b3a53a74 ("x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP")
    
    this discrepency caused the misreporting of IB speculation via prctl().
    
    On CPUs with STIBP always-on and spectre_v2_user=seccomp,ibpb,
    prctl(PR_GET_SPECULATION_CTRL) would return PR_SPEC_PRCTL |
    PR_SPEC_ENABLE instead of PR_SPEC_DISABLE since both IBPB and STIPB are
    always on. It also allowed prctl(PR_SET_SPECULATION_CTRL) to set the IB
    speculation mode, even though the flag is ignored.
    
    Similarly, for CPUs without SMT, prctl(PR_GET_SPECULATION_CTRL) should
    also return PR_SPEC_DISABLE since IBPB is always on and STIBP is not
    available.
    
     [ bp: Massage commit message. ]
    
    Fixes: 21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    Fixes: 1978b3a53a74 ("x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP")
    Signed-off-by: Anand K Mistry <amistry@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201110123349.1.Id0cbf996d2151f4c143c90f9028651a5b49a5908@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f33eada5342aab2af57e957138f5d5a591c2205
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 17 10:16:29 2020 +0800

    usb: gadget: Fix memleak in gadgetfs_fill_super
    
    commit 87bed3d7d26c974948a3d6e7176f304b2d41272b upstream.
    
    usb_get_gadget_udc_name will alloc memory for CHIP
    in "Enomem" branch. we should free it before error
    returns to prevent memleak.
    
    Fixes: 175f712119c57 ("usb: gadget: provide interface for legacy gadgets to get UDC name")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201117021629.1470544-3-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69907d5dfd845f7ca0617bf270ceb23ff6b75159
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Nov 17 10:16:28 2020 +0800

    usb: gadget: f_midi: Fix memleak in f_midi_alloc
    
    commit e7694cb6998379341fd9bf3bd62b48c4e6a79385 upstream.
    
    In the error path, if midi is not null, we should
    free the midi->id if necessary to prevent memleak.
    
    Fixes: b85e9de9e818d ("usb: gadget: f_midi: convert to new function interface with backward compatibility")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201117021629.1470544-2-zhangqilong3@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9748d03efbac482dfafdfd498a2e31efaacd31c0
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Thu Nov 19 12:02:28 2020 -0500

    USB: core: Change %pK for __user pointers to %px
    
    commit f3bc432aa8a7a2bfe9ebb432502be5c5d979d7fe upstream.
    
    Commit 2f964780c03b ("USB: core: replace %p with %pK") used the %pK
    format specifier for a bunch of __user pointers.  But as the 'K' in
    the specifier indicates, it is meant for kernel pointers.  The reason
    for the %pK specifier is to avoid leaks of kernel addresses, but when
    the pointer is to an address in userspace the security implications
    are minimal.  In particular, no kernel information is leaked.
    
    This patch changes the __user %pK specifiers (used in a bunch of
    debugging output lines) to %px, which will always print the actual
    address with no mangling.  (Notably, there is no printk format
    specifier particularly intended for __user pointers.)
    
    Fixes: 2f964780c03b ("USB: core: replace %p with %pK")
    CC: Vamsi Krishna Samavedam <vskrishn@codeaurora.org>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201119170228.GB576844@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ec2e5ed8c8d4f8bd59d6a4f5349c4a8c24da56b
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Nov 27 14:48:46 2020 +0900

    perf probe: Fix to die_entrypc() returns error correctly
    
    [ Upstream commit ab4200c17ba6fe71d2da64317aae8a8aa684624c ]
    
    Fix die_entrypc() to return error correctly if the DIE has no
    DW_AT_ranges attribute. Since dwarf_ranges() will treat the case as an
    empty ranges and return 0, we have to check it by ourselves.
    
    Fixes: 91e2f539eeda ("perf probe: Fix to show function entry line as probe-able")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Cc: Thomas Richter <tmricht@linux.ibm.com>
    Link: http://lore.kernel.org/lkml/160645612634.2824037.5284932731175079426.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b343c842b0bc0cfc95d1b36004ce38cee73a1174
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Tue Nov 24 19:47:38 2020 +0100

    can: m_can: fix nominal bitiming tseg2 min for version >= 3.1
    
    [ Upstream commit e3409e4192535fbcc86a84b7a65d9351f46039ec ]
    
    At lest the revision 3.3.0 of the bosch m_can IP core specifies that valid
    register values for "Nominal Time segment after sample point (NTSEG2)" are from
    1 to 127. As the hardware uses a value of one more than the programmed value,
    mean tseg2_min is 2.
    
    This patch fixes the tseg2_min value accordingly.
    
    Cc: Dan Murphy <dmurphy@ti.com>
    Cc: Mario Huettel <mario.huettel@gmx.net>
    Acked-by: Sriram Dash <sriram.dash@samsung.com>
    Link: https://lore.kernel.org/r/20201124190751.3972238-1-mkl@pengutronix.de
    Fixes: b03cfc5bb0e1 ("can: m_can: Enable M_CAN version dependent initialization")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee6ed4fdcfeb8035366c8587a8e16a0b827f5be8
Author: Kaixu Xia <kaixuxia@tencent.com>
Date:   Sun Nov 22 13:49:37 2020 +0800

    platform/x86: toshiba_acpi: Fix the wrong variable assignment
    
    [ Upstream commit 2a72c46ac4d665614faa25e267c3fb27fb729ed7 ]
    
    The commit 78429e55e4057 ("platform/x86: toshiba_acpi: Clean up
    variable declaration") cleans up variable declaration in
    video_proc_write(). Seems it does the variable assignment in the
    wrong place, this results in dead code and changes the source code
    logic. Fix it by doing the assignment at the beginning of the funciton.
    
    Fixes: 78429e55e4057 ("platform/x86: toshiba_acpi: Clean up variable declaration")
    Reported-by: Tosk Robot <tencent_os_robot@tencent.com>
    Signed-off-by: Kaixu Xia <kaixuxia@tencent.com>
    Link: https://lore.kernel.org/r/1606024177-16481-1-git-send-email-kaixuxia@tencent.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80a957374e18fa6f6a8758b54bc4973f1eb9d914
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Nov 19 14:03:17 2020 +0100

    can: gs_usb: fix endianess problem with candleLight firmware
    
    [ Upstream commit 4ba1cb39fce4464151517a37ce0ac0a1a3f580d6 ]
    
    The firmware on the original USB2CAN by Geschwister Schneider Technologie
    Entwicklungs- und Vertriebs UG exchanges all data between the host and the
    device in host byte order. This is done with the struct
    gs_host_config::byte_order member, which is sent first to indicate the desired
    byte order.
    
    The widely used open source firmware candleLight doesn't support this feature
    and exchanges the data in little endian byte order. This breaks if a device
    with candleLight firmware is used on big endianess systems.
    
    To fix this problem, all u32 (but not the struct gs_host_frame::echo_id, which
    is a transparent cookie) are converted to __le32.
    
    Cc: Maximilian Schneider <max@schneidersoft.net>
    Cc: Hubert Denkmair <hubert@denkmair.de>
    Reported-by: Michael Rausch <mr@netadair.de>
    Link: https://lore.kernel.org/r/b58aace7-61f3-6df7-c6df-69fee2c66906@netadair.de
    Tested-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Fixes: d08e973a77d1 ("can: gs_usb: Added support for the GS_USB CAN devices")
    Link: https://lore.kernel.org/r/20201120103818.3386964-1-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9eafac6887a30481d2cef481051344a8fefd4945
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Nov 25 08:45:55 2020 +0100

    efivarfs: revert "fix memory leak in efivarfs_create()"
    
    [ Upstream commit ff04f3b6f2e27f8ae28a498416af2a8dd5072b43 ]
    
    The memory leak addressed by commit fe5186cf12e3 is a false positive:
    all allocations are recorded in a linked list, and freed when the
    filesystem is unmounted. This leads to double frees, and as reported
    by David, leads to crashes if SLUB is configured to self destruct when
    double frees occur.
    
    So drop the redundant kfree() again, and instead, mark the offending
    pointer variable so the allocation is ignored by kmemleak.
    
    Cc: Vamshi K Sthambamkadi <vamshi.k.sthambamkadi@gmail.com>
    Fixes: fe5186cf12e3 ("efivarfs: fix memory leak in efivarfs_create()")
    Reported-by: David Laight <David.Laight@aculab.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1fda2620b8789ac86d5e8a3d539b9a634821fd7
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Mon Nov 23 13:35:46 2020 -0600

    ibmvnic: fix NULL pointer dereference in ibmvic_reset_crq
    
    [ Upstream commit 0e435befaea45f7ea58682eecab5e37e05b2ce65 ]
    
    crq->msgs could be NULL if the previous reset did not complete after
    freeing crq->msgs. Check for NULL before dereferencing them.
    
    Snippet of call trace:
    ...
    ibmvnic 30000003 env3 (unregistering): Releasing sub-CRQ
    ibmvnic 30000003 env3 (unregistering): Releasing CRQ
    BUG: Kernel NULL pointer dereference on read at 0x00000000
    Faulting instruction address: 0xc0000000000c1a30
    Oops: Kernel access of bad area, sig: 11 [#1]
    LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    Modules linked in: ibmvnic(E-) rpadlpar_io rpaphp xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables xsk_diag tcp_diag udp_diag tun raw_diag inet_diag unix_diag bridge af_packet_diag netlink_diag stp llc rfkill sunrpc pseries_rng xts vmx_crypto uio_pdrv_genirq uio binfmt_misc ip_tables xfs libcrc32c sd_mod t10_pi sg ibmvscsi ibmveth scsi_transport_srp dm_mirror dm_region_hash dm_log dm_mod [last unloaded: ibmvnic]
    CPU: 20 PID: 8426 Comm: kworker/20:0 Tainted: G            E     5.10.0-rc1+ #12
    Workqueue: events __ibmvnic_reset [ibmvnic]
    NIP:  c0000000000c1a30 LR: c008000001b00c18 CTR: 0000000000000400
    REGS: c00000000d05b7a0 TRAP: 0380   Tainted: G            E      (5.10.0-rc1+)
    MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 44002480  XER: 20040000
    CFAR: c0000000000c19ec IRQMASK: 0
    GPR00: 0000000000000400 c00000000d05ba30 c008000001b17c00 0000000000000000
    GPR04: 0000000000000000 0000000000000000 0000000000000000 00000000000001e2
    GPR08: 000000000001f400 ffffffffffffd950 0000000000000000 c008000001b0b280
    GPR12: c0000000000c19c8 c00000001ec72e00 c00000000019a778 c00000002647b440
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000006 0000000000000001 0000000000000003 0000000000000002
    GPR24: 0000000000001000 c008000001b0d570 0000000000000005 c00000007ab5d550
    GPR28: c00000007ab5c000 c000000032fcf848 c00000007ab5cc00 c000000032fcf800
    NIP [c0000000000c1a30] memset+0x68/0x104
    LR [c008000001b00c18] ibmvnic_reset_crq+0x70/0x110 [ibmvnic]
    Call Trace:
    [c00000000d05ba30] [0000000000000800] 0x800 (unreliable)
    [c00000000d05bab0] [c008000001b0a930] do_reset.isra.40+0x224/0x634 [ibmvnic]
    [c00000000d05bb80] [c008000001b08574] __ibmvnic_reset+0x17c/0x3c0 [ibmvnic]
    [c00000000d05bc50] [c00000000018d9ac] process_one_work+0x2cc/0x800
    [c00000000d05bd20] [c00000000018df58] worker_thread+0x78/0x520
    [c00000000d05bdb0] [c00000000019a934] kthread+0x1c4/0x1d0
    [c00000000d05be20] [c00000000000d5d0] ret_from_kernel_thread+0x5c/0x6c
    
    Fixes: 032c5e82847a ("Driver for IBM System i/p VNIC protocol")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d112b58e55e03b3f2bd840a289799319dfffdf49
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Mon Nov 23 13:35:45 2020 -0600

    ibmvnic: fix NULL pointer dereference in reset_sub_crq_queues
    
    [ Upstream commit a0faaa27c71608799e0dd765c5af38a089091802 ]
    
    adapter->tx_scrq and adapter->rx_scrq could be NULL if the previous reset
    did not complete after freeing sub crqs. Check for NULL before
    dereferencing them.
    
    Snippet of call trace:
    ibmvnic 30000006 env6: Releasing sub-CRQ
    ibmvnic 30000006 env6: Releasing CRQ
    ...
    ibmvnic 30000006 env6: Got Control IP offload Response
    ibmvnic 30000006 env6: Re-setting tx_scrq[0]
    BUG: Kernel NULL pointer dereference on read at 0x00000000
    Faulting instruction address: 0xc008000003dea7cc
    Oops: Kernel access of bad area, sig: 11 [#1]
    LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
    Modules linked in: rpadlpar_io rpaphp xt_CHECKSUM xt_MASQUERADE xt_conntrack ipt_REJECT nf_reject_ipv4 nft_compat nft_counter nft_chain_nat nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 nf_tables xsk_diag tcp_diag udp_diag raw_diag inet_diag unix_diag af_packet_diag netlink_diag tun bridge stp llc rfkill sunrpc pseries_rng xts vmx_crypto uio_pdrv_genirq uio binfmt_misc ip_tables xfs libcrc32c sd_mod t10_pi sg ibmvscsi ibmvnic ibmveth scsi_transport_srp dm_mirror dm_region_hash dm_log dm_mod
    CPU: 80 PID: 1856 Comm: kworker/80:2 Tainted: G        W         5.8.0+ #4
    Workqueue: events __ibmvnic_reset [ibmvnic]
    NIP:  c008000003dea7cc LR: c008000003dea7bc CTR: 0000000000000000
    REGS: c0000007ef7db860 TRAP: 0380   Tainted: G        W          (5.8.0+)
    MSR:  800000000280b033 <SF,VEC,VSX,EE,FP,ME,IR,DR,RI,LE>  CR: 28002422  XER: 0000000d
    CFAR: c000000000bd9520 IRQMASK: 0
    GPR00: c008000003dea7bc c0000007ef7dbaf0 c008000003df7400 c0000007fa26ec00
    GPR04: c0000007fcd0d008 c0000007fcd96350 0000000000000027 c0000007fcd0d010
    GPR08: 0000000000000023 0000000000000000 0000000000000000 0000000000000000
    GPR12: 0000000000002000 c00000001ec18e00 c0000000001982f8 c0000007bad6e840
    GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000
    GPR20: 0000000000000000 0000000000000000 0000000000000000 fffffffffffffef7
    GPR24: 0000000000000402 c0000007fa26f3a8 0000000000000003 c00000016f8ec048
    GPR28: 0000000000000000 0000000000000000 0000000000000000 c0000007fa26ec00
    NIP [c008000003dea7cc] ibmvnic_reset_init+0x15c/0x258 [ibmvnic]
    LR [c008000003dea7bc] ibmvnic_reset_init+0x14c/0x258 [ibmvnic]
    Call Trace:
    [c0000007ef7dbaf0] [c008000003dea7bc] ibmvnic_reset_init+0x14c/0x258 [ibmvnic] (unreliable)
    [c0000007ef7dbb80] [c008000003de8860] __ibmvnic_reset+0x408/0x970 [ibmvnic]
    [c0000007ef7dbc50] [c00000000018b7cc] process_one_work+0x2cc/0x800
    [c0000007ef7dbd20] [c00000000018bd78] worker_thread+0x78/0x520
    [c0000007ef7dbdb0] [c0000000001984c4] kthread+0x1d4/0x1e0
    [c0000007ef7dbe20] [c00000000000cea8] ret_from_kernel_thread+0x5c/0x74
    
    Fixes: 57a49436f4e8 ("ibmvnic: Reset sub-crqs during driver reset")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c465b2f95316a1c75b9b01de315e1c6fca76650
Author: Shay Agroskin <shayagr@amazon.com>
Date:   Mon Nov 23 21:08:58 2020 +0200

    net: ena: set initial DMA width to avoid intel iommu issue
    
    [ Upstream commit 09323b3bca95181c0da79daebc8b0603e500f573 ]
    
    The ENA driver uses the readless mechanism, which uses DMA, to find
    out what the DMA mask is supposed to be.
    
    If DMA is used without setting the dma_mask first, it causes the
    Intel IOMMU driver to think that ENA is a 32-bit device and therefore
    disables IOMMU passthrough permanently.
    
    This patch sets the dma_mask to be ENA_MAX_PHYS_ADDR_SIZE_BITS=48
    before readless initialization in
    ena_device_init()->ena_com_mmio_reg_read_request_init(),
    which is large enough to workaround the intel_iommu issue.
    
    DMA mask is set again to the correct value after it's received from the
    device after readless is initialized.
    
    The patch also changes the driver to use dma_set_mask_and_coherent()
    function instead of the two pci_set_dma_mask() and
    pci_set_consistent_dma_mask() ones. Both methods achieve the same
    effect.
    
    Fixes: 1738cd3ed342 ("net: ena: Add a driver for Amazon Elastic Network Adapters (ENA)")
    Signed-off-by: Mike Cui <mikecui@amazon.com>
    Signed-off-by: Arthur Kiyanovski <akiyano@amazon.com>
    Signed-off-by: Shay Agroskin <shayagr@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0ae3d040b5c879c10af9c660bcf812c65778290
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Nov 23 17:23:51 2020 +0100

    nfc: s3fwrn5: use signed integer for parsing GPIO numbers
    
    [ Upstream commit d8f0a86795c69f5b697f7d9e5274c124da93c92d ]
    
    GPIOs - as returned by of_get_named_gpio() and used by the gpiolib - are
    signed integers, where negative number indicates error.  The return
    value of of_get_named_gpio() should not be assigned to an unsigned int
    because in case of !CONFIG_GPIOLIB such number would be a valid GPIO.
    
    Fixes: c04c674fadeb ("nfc: s3fwrn5: Add driver for Samsung S3FWRN5 NFC Chip")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20201123162351.209100-1-krzk@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5be891c2bf82e8e90de3d61544a72c0517e864c
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Nov 20 09:57:02 2020 +0800

    IB/mthca: fix return value of error branch in mthca_init_cq()
    
    [ Upstream commit 6830ff853a5764c75e56750d59d0bbb6b26f1835 ]
    
    We return 'err' in the error branch, but this variable may be set as zero
    by the above code. Fix it by setting 'err' as a negative value before we
    goto the error label.
    
    Fixes: 74c2174e7be5 ("IB uverbs: add mthca user CQ support")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Link: https://lore.kernel.org/r/1605837422-42724-1-git-send-email-wangxiongfeng2@huawei.com
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7eed49b62eb719108ea9299cd8c17df3ab4dee1
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Fri Nov 20 02:44:31 2020 -0500

    bnxt_en: Release PCI regions when DMA mask setup fails during probe.
    
    [ Upstream commit c54bc3ced5106663c2f2b44071800621f505b00e ]
    
    Jump to init_err_release to cleanup.  bnxt_unmap_bars() will also be
    called but it will do nothing if the BARs are not mapped yet.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/1605858271-8209-1-git-send-email-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83592e4b4143cdf2da0102c2e105e1372e1f4fc6
Author: Dexuan Cui <decui@microsoft.com>
Date:   Tue Nov 17 16:03:05 2020 -0800

    video: hyperv_fb: Fix the cache type when mapping the VRAM
    
    [ Upstream commit 5f1251a48c17b54939d7477305e39679a565382c ]
    
    x86 Hyper-V used to essentially always overwrite the effective cache type
    of guest memory accesses to WB. This was problematic in cases where there
    is a physical device assigned to the VM, since that often requires that
    the VM should have control over cache types. Thus, on newer Hyper-V since
    2018, Hyper-V always honors the VM's cache type, but unexpectedly Linux VM
    users start to complain that Linux VM's VRAM becomes very slow, and it
    turns out that Linux VM should not map the VRAM uncacheable by ioremap().
    Fix this slowness issue by using ioremap_cache().
    
    On ARM64, ioremap_cache() is also required as the host also maps the VRAM
    cacheable, otherwise VM Connect can't display properly with ioremap() or
    ioremap_wc().
    
    With this change, the VRAM on new Hyper-V is as fast as regular RAM, so
    it's no longer necessary to use the hacks we added to mitigate the
    slowness, i.e. we no longer need to allocate physical memory and use
    it to back up the VRAM in Generation-1 VM, and we also no longer need to
    allocate physical memory to back up the framebuffer in a Generation-2 VM
    and copy the framebuffer to the real VRAM. A further big change will
    address these for v5.11.
    
    Fixes: 68a2d20b79b1 ("drivers/video: add Hyper-V Synthetic Video Frame Buffer Driver")
    Tested-by: Boqun Feng <boqun.feng@gmail.com>
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Link: https://lore.kernel.org/r/20201118000305.24797-1-decui@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c593a45ffb846558933e8a27e1d9122023e4411a
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Thu Nov 19 21:30:21 2020 +0800

    bnxt_en: fix error return code in bnxt_init_board()
    
    [ Upstream commit 3383176efc0fb0c0900a191026468a58668b4214 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Link: https://lore.kernel.org/r/1605792621-6268-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5b6c3e935c104ec6bd4a86ee1be86822dab001b
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Wed Nov 18 20:17:31 2020 +0800

    bnxt_en: fix error return code in bnxt_init_one()
    
    [ Upstream commit b5f796b62c98cd8c219c4b788ecb6e1218e648cb ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: c213eae8d3cd ("bnxt_en: Improve VF/PF link change logic.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Link: https://lore.kernel.org/r/1605701851-20270-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10dcdbde86a627ac57ada6494b53530c25b084f9
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Thu Nov 19 14:29:16 2020 +0800

    scsi: ufs: Fix race between shutdown and runtime resume flow
    
    [ Upstream commit e92643db514803c2c87d72caf5950b4c0a8faf4a ]
    
    If UFS host device is in runtime-suspended state while UFS shutdown
    callback is invoked, UFS device shall be resumed for register
    accesses. Currently only UFS local runtime resume function will be invoked
    to wake up the host.  This is not enough because if someone triggers
    runtime resume from block layer, then race may happen between shutdown and
    runtime resume flow, and finally lead to unlocked register access.
    
    To fix this, in ufshcd_shutdown(), use pm_runtime_get_sync() instead of
    resuming UFS device by ufshcd_runtime_resume() "internally" to let runtime
    PM framework manage the whole resume flow.
    
    Link: https://lore.kernel.org/r/20201119062916.12931-1-stanley.chu@mediatek.com
    Fixes: 57d104c153d3 ("ufs: add UFS power management support")
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe86154c35d04a14eb41159bb0674fac2145814e
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sun Nov 15 10:30:04 2020 +0000

    batman-adv: set .owner to THIS_MODULE
    
    [ Upstream commit 14a2e551faea53d45bc11629a9dac88f88950ca7 ]
    
    If THIS_MODULE is not set, the module would be removed while debugfs is
    being used.
    It eventually makes kernel panic.
    
    Fixes: c6c8fea29769 ("net: Add batman-adv meshing protocol")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f010ac2d01f4a54b244e3ec34d5a312db984013
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Oct 13 10:58:20 2020 +0100

    phy: tegra: xusb: Fix dangling pointer on probe failure
    
    [ Upstream commit eb9c4dd9bdfdebaa13846c16a8c79b5b336066b6 ]
    
    If, for some reason, the xusb PHY fails to probe, it leaves
    a dangling pointer attached to the platform device structure.
    
    This would normally be harmless, but the Tegra XHCI driver then
    goes and extract that pointer from the PHY device. Things go
    downhill from there:
    
        8.752082] [004d554e5145533c] address between user and kernel address ranges
    [    8.752085] Internal error: Oops: 96000004 [#1] PREEMPT SMP
    [    8.752088] Modules linked in: max77620_regulator(E+) xhci_tegra(E+) sdhci_tegra(E+) xhci_hcd(E) sdhci_pltfm(E) cqhci(E) fixed(E) usbcore(E) scsi_mod(E) sdhci(E) host1x(E+)
    [    8.752103] CPU: 4 PID: 158 Comm: systemd-udevd Tainted: G S      W   E     5.9.0-rc7-00298-gf6337624c4fe #1980
    [    8.752105] Hardware name: NVIDIA Jetson TX2 Developer Kit (DT)
    [    8.752108] pstate: 20000005 (nzCv daif -PAN -UAO BTYPE=--)
    [    8.752115] pc : kobject_put+0x1c/0x21c
    [    8.752120] lr : put_device+0x20/0x30
    [    8.752121] sp : ffffffc012eb3840
    [    8.752122] x29: ffffffc012eb3840 x28: ffffffc010e82638
    [    8.752125] x27: ffffffc008d56440 x26: 0000000000000000
    [    8.752128] x25: ffffff81eb508200 x24: 0000000000000000
    [    8.752130] x23: ffffff81eb538800 x22: 0000000000000000
    [    8.752132] x21: 00000000fffffdfb x20: ffffff81eb538810
    [    8.752134] x19: 3d4d554e51455300 x18: 0000000000000020
    [    8.752136] x17: ffffffc008d00270 x16: ffffffc008d00c94
    [    8.752138] x15: 0000000000000004 x14: ffffff81ebd4ae90
    [    8.752140] x13: 0000000000000000 x12: ffffff81eb86a4e8
    [    8.752142] x11: ffffff81eb86a480 x10: ffffff81eb862fea
    [    8.752144] x9 : ffffffc01055fb28 x8 : ffffff81eb86a4a8
    [    8.752146] x7 : 0000000000000001 x6 : 0000000000000001
    [    8.752148] x5 : ffffff81dff8bc38 x4 : 0000000000000000
    [    8.752150] x3 : 0000000000000001 x2 : 0000000000000001
    [    8.752152] x1 : 0000000000000002 x0 : 3d4d554e51455300
    [    8.752155] Call trace:
    [    8.752157]  kobject_put+0x1c/0x21c
    [    8.752160]  put_device+0x20/0x30
    [    8.752164]  tegra_xusb_padctl_put+0x24/0x3c
    [    8.752170]  tegra_xusb_probe+0x8b0/0xd10 [xhci_tegra]
    [    8.752174]  platform_drv_probe+0x60/0xb4
    [    8.752176]  really_probe+0xf0/0x504
    [    8.752179]  driver_probe_device+0x100/0x170
    [    8.752181]  device_driver_attach+0xcc/0xd4
    [    8.752183]  __driver_attach+0xb0/0x17c
    [    8.752185]  bus_for_each_dev+0x7c/0xd4
    [    8.752187]  driver_attach+0x30/0x3c
    [    8.752189]  bus_add_driver+0x154/0x250
    [    8.752191]  driver_register+0x84/0x140
    [    8.752193]  __platform_driver_register+0x54/0x60
    [    8.752197]  tegra_xusb_init+0x40/0x1000 [xhci_tegra]
    [    8.752201]  do_one_initcall+0x54/0x2d0
    [    8.752205]  do_init_module+0x68/0x29c
    [    8.752207]  load_module+0x2178/0x26c0
    [    8.752209]  __do_sys_finit_module+0xb0/0x120
    [    8.752211]  __arm64_sys_finit_module+0x2c/0x40
    [    8.752215]  el0_svc_common.constprop.0+0x80/0x240
    [    8.752218]  do_el0_svc+0x30/0xa0
    [    8.752220]  el0_svc+0x18/0x50
    [    8.752223]  el0_sync_handler+0x90/0x318
    [    8.752225]  el0_sync+0x158/0x180
    [    8.752230] Code: a9bd7bfd 910003fd a90153f3 aa0003f3 (3940f000)
    [    8.752232] ---[ end trace 90f6c89d62d85ff5 ]---
    
    Reset the pointer on probe failure fixes the issue.
    
    Fixes: 53d2a715c2403 ("phy: Add Tegra XUSB pad controller support")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201013095820.311376-1-maz@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bd9810820152260994f2a2723d711b830a2e3c3
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Fri Nov 13 10:31:26 2020 -0800

    perf/x86: fix sysfs type mismatches
    
    [ Upstream commit ebd19fc372e3e78bf165f230e7c084e304441c08 ]
    
    This change switches rapl to use PMU_FORMAT_ATTR, and fixes two other
    macros to use device_attribute instead of kobj_attribute to avoid
    callback type mismatches that trip indirect call checking with Clang's
    Control-Flow Integrity (CFI).
    
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lkml.kernel.org/r/20201113183126.1239404-1-samitolvanen@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9312b75bbff671467df08b0abc0db4eb73996afe
Author: Mike Christie <michael.christie@oracle.com>
Date:   Fri Nov 13 19:46:18 2020 -0600

    scsi: target: iscsi: Fix cmd abort fabric stop race
    
    [ Upstream commit f36199355c64a39fe82cfddc7623d827c7e050da ]
    
    Maurizio found a race where the abort and cmd stop paths can race as
    follows:
    
     1. thread1 runs iscsit_release_commands_from_conn and sets
        CMD_T_FABRIC_STOP.
    
     2. thread2 runs iscsit_aborted_task and then does __iscsit_free_cmd. It
        then returns from the aborted_task callout and we finish
        target_handle_abort and do:
    
        target_handle_abort -> transport_cmd_check_stop_to_fabric ->
            lio_check_stop_free -> target_put_sess_cmd
    
        The cmd is now freed.
    
     3. thread1 now finishes iscsit_release_commands_from_conn and runs
        iscsit_free_cmd while accessing a command we just released.
    
    In __target_check_io_state we check for CMD_T_FABRIC_STOP and set the
    CMD_T_ABORTED if the driver is not cleaning up the cmd because of a session
    shutdown. However, iscsit_release_commands_from_conn only sets the
    CMD_T_FABRIC_STOP and does not check to see if the abort path has claimed
    completion ownership of the command.
    
    This adds a check in iscsit_release_commands_from_conn so only the abort or
    fabric stop path cleanup the command.
    
    Link: https://lore.kernel.org/r/1605318378-9269-1-git-send-email-michael.christie@oracle.com
    Reported-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Maurizio Lombardi <mlombard@redhat.com>
    Signed-off-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d7a28db8e9bc17073721d0f8c89b9f9add3b610
Author: Lee Duncan <lduncan@suse.com>
Date:   Fri Nov 6 11:33:17 2020 -0800

    scsi: libiscsi: Fix NOP race condition
    
    [ Upstream commit fe0a8a95e7134d0b44cd407bc0085b9ba8d8fe31 ]
    
    iSCSI NOPs are sometimes "lost", mistakenly sent to the user-land iscsid
    daemon instead of handled in the kernel, as they should be, resulting in a
    message from the daemon like:
    
      iscsid: Got nop in, but kernel supports nop handling.
    
    This can occur because of the new forward- and back-locks, and the fact
    that an iSCSI NOP response can occur before processing of the NOP send is
    complete. This can result in "conn->ping_task" being NULL in
    iscsi_nop_out_rsp(), when the pointer is actually in the process of being
    set.
    
    To work around this, we add a new state to the "ping_task" pointer. In
    addition to NULL (not assigned) and a pointer (assigned), we add the state
    "being set", which is signaled with an INVALID pointer (using "-1").
    
    Link: https://lore.kernel.org/r/20201106193317.16993-1-leeman.duncan@gmail.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fc39e61da31e159bcad9d023ad73a276b494f61
Author: Sugar Zhang <sugar.zhang@rock-chips.com>
Date:   Sat Nov 14 11:55:06 2020 +0800

    dmaengine: pl330: _prep_dma_memcpy: Fix wrong burst size
    
    [ Upstream commit e773ca7da8beeca7f17fe4c9d1284a2b66839cc1 ]
    
    Actually, burst size is equal to '1 << desc->rqcfg.brst_size'.
    we should use burst size, not desc->rqcfg.brst_size.
    
    dma memcpy performance on Rockchip RV1126
    @ 1512MHz A7, 1056MHz LPDDR3, 200MHz DMA:
    
    dmatest:
    
    /# echo dma0chan0 > /sys/module/dmatest/parameters/channel
    /# echo 4194304 > /sys/module/dmatest/parameters/test_buf_size
    /# echo 8 > /sys/module/dmatest/parameters/iterations
    /# echo y > /sys/module/dmatest/parameters/norandom
    /# echo y > /sys/module/dmatest/parameters/verbose
    /# echo 1 > /sys/module/dmatest/parameters/run
    
    dmatest: dma0chan0-copy0: result #1: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #2: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #3: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #4: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #5: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #6: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #7: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    dmatest: dma0chan0-copy0: result #8: 'test passed' with src_off=0x0 dst_off=0x0 len=0x400000
    
    Before:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 48 iops 200338 KB/s (0)
    
    After this patch:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 179 iops 734873 KB/s (0)
    
    After this patch and increase dma clk to 400MHz:
    
      dmatest: dma0chan0-copy0: summary 8 tests, 0 failures 259 iops 1062929 KB/s (0)
    
    Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
    Link: https://lore.kernel.org/r/1605326106-55681-1-git-send-email-sugar.zhang@rock-chips.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a1b06a7dc1edd4c2b4dc2741d396931b9144f02
Author: Minwoo Im <minwoo.im.dev@gmail.com>
Date:   Thu Nov 5 23:28:47 2020 +0900

    nvme: free sq/cq dbbuf pointers when dbbuf set fails
    
    [ Upstream commit 0f0d2c876c96d4908a9ef40959a44bec21bdd6cf ]
    
    If Doorbell Buffer Config command fails even 'dev->dbbuf_dbs != NULL'
    which means OACS indicates that NVME_CTRL_OACS_DBBUF_SUPP is set,
    nvme_dbbuf_update_and_check_event() will check event even it's not been
    successfully set.
    
    This patch fixes mismatch among dbbuf for sq/cqs in case that dbbuf
    command fails.
    
    Signed-off-by: Minwoo Im <minwoo.im.dev@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59d38a6108bc096dec02a052e5a2f77d4c9aa1a8
Author: Jens Axboe <axboe@kernel.dk>
Date:   Fri Nov 13 16:47:52 2020 -0700

    proc: don't allow async path resolution of /proc/self components
    
    [ Upstream commit 8d4c3e76e3be11a64df95ddee52e99092d42fc19 ]
    
    If this is attempted by a kthread, then return -EOPNOTSUPP as we don't
    currently support that. Once we can get task_pid_ptr() doing the right
    thing, then this can go away again.
    
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c3add5009cb7f5fc0cc8d24e82d5f0b03d34129
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Nov 2 14:36:58 2020 +0100

    HID: Add Logitech Dinovo Edge battery quirk
    
    [ Upstream commit 7940fb035abd88040d56be209962feffa33b03d0 ]
    
    The battery status is also being reported by the logitech-hidpp driver,
    so ignore the standard HID battery status to avoid reporting the same
    info twice.
    
    Note the logitech-hidpp battery driver provides more info, such as properly
    differentiating between charging and discharging. Also the standard HID
    battery info seems to be wrong, reporting a capacity of just 26% after
    fully charging the device.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e36c629a4608a2ee634f57ab12959773c1d710a3
Author: Brian Masney <bmasney@redhat.com>
Date:   Fri Nov 6 20:11:19 2020 -0500

    x86/xen: don't unbind uninitialized lock_kicker_irq
    
    [ Upstream commit 65cae18882f943215d0505ddc7e70495877308e6 ]
    
    When booting a hyperthreaded system with the kernel parameter
    'mitigations=auto,nosmt', the following warning occurs:
    
        WARNING: CPU: 0 PID: 1 at drivers/xen/events/events_base.c:1112 unbind_from_irqhandler+0x4e/0x60
        ...
        Hardware name: Xen HVM domU, BIOS 4.2.amazon 08/24/2006
        ...
        Call Trace:
         xen_uninit_lock_cpu+0x28/0x62
         xen_hvm_cpu_die+0x21/0x30
         takedown_cpu+0x9c/0xe0
         ? trace_suspend_resume+0x60/0x60
         cpuhp_invoke_callback+0x9a/0x530
         _cpu_up+0x11a/0x130
         cpu_up+0x7e/0xc0
         bringup_nonboot_cpus+0x48/0x50
         smp_init+0x26/0x79
         kernel_init_freeable+0xea/0x229
         ? rest_init+0xaa/0xaa
         kernel_init+0xa/0x106
         ret_from_fork+0x35/0x40
    
    The secondary CPUs are not activated with the nosmt mitigations and only
    the primary thread on each CPU core is used. In this situation,
    xen_hvm_smp_prepare_cpus(), and more importantly xen_init_lock_cpu(), is
    not called, so the lock_kicker_irq is not initialized for the secondary
    CPUs. Let's fix this by exiting early in xen_uninit_lock_cpu() if the
    irq is not set to avoid the warning from above for each secondary CPU.
    
    Signed-off-by: Brian Masney <bmasney@redhat.com>
    Link: https://lore.kernel.org/r/20201107011119.631442-1-bmasney@redhat.com
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad9791cdc6f57718edd37861959f0f5545a71f06
Author: Marc Ferland <ferlandm@amotus.ca>
Date:   Wed Nov 4 12:30:04 2020 +0530

    dmaengine: xilinx_dma: use readl_poll_timeout_atomic variant
    
    [ Upstream commit 0ba2df09f1500d3f27398a3382b86d39c3e6abe2 ]
    
    The xilinx_dma_poll_timeout macro is sometimes called while holding a
    spinlock (see xilinx_dma_issue_pending() for an example) this means we
    shouldn't sleep when polling the dma channel registers. To address it
    in xilinx poll timeout macro use readl_poll_timeout_atomic instead of
    readl_poll_timeout variant.
    
    Signed-off-by: Marc Ferland <ferlandm@amotus.ca>
    Signed-off-by: Radhey Shyam Pandey <radhey.shyam.pandey@xilinx.com>
    Link: https://lore.kernel.org/r/1604473206-32573-2-git-send-email-radhey.shyam.pandey@xilinx.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 881854be6584d0c5db357d1a16d83d6624684bc5
Author: Pablo Ceballos <pceballos@google.com>
Date:   Mon Nov 2 19:29:39 2020 -0500

    HID: hid-sensor-hub: Fix issue with devices with no report ID
    
    [ Upstream commit 34a9fa2025d9d3177c99351c7aaf256c5f50691f ]
    
    Some HID devices don't use a report ID because they only have a single
    report. In those cases, the report ID in struct hid_report will be zero
    and the data for the report will start at the first byte, so don't skip
    over the first byte.
    
    Signed-off-by: Pablo Ceballos <pceballos@google.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0422ffcc107d3195ad635a33b8d306c38b7f2ac8
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Mon Oct 26 20:53:57 2020 -0700

    Input: i8042 - allow insmod to succeed on devices without an i8042 controller
    
    [ Upstream commit b1884583fcd17d6a1b1bba94bbb5826e6b5c6e17 ]
    
    The i8042 module exports several symbols which may be used by other
    modules.
    
    Before this commit it would refuse to load (when built as a module itself)
    on systems without an i8042 controller.
    
    This is a problem specifically for the asus-nb-wmi module. Many Asus
    laptops support the Asus WMI interface. Some of them have an i8042
    controller and need to use i8042_install_filter() to filter some kbd
    events. Other models do not have an i8042 controller (e.g. they use an
    USB attached kbd).
    
    Before this commit the asus-nb-wmi driver could not be loaded on Asus
    models without an i8042 controller, when the i8042 code was built as
    a module (as Arch Linux does) because the module_init function of the
    i8042 module would fail with -ENODEV and thus the i8042_install_filter
    symbol could not be loaded.
    
    This commit fixes this by exiting from module_init with a return code
    of 0 if no controller is found.  It also adds a i8042_present bool to
    make the module_exit function a no-op in this case and also adds a
    check for i8042_present to the exported i8042_command function.
    
    The latter i8042_present check should not really be necessary because
    when builtin that function can already be used on systems without
    an i8042 controller, but better safe then sorry.
    
    Reported-and-tested-by: Marius Iacob <themariusus@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201008112628.3979-2-hdegoede@redhat.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28db78c1d97815f417274603061e12ab1f830d65
Author: Frank Yang <puilp0502@gmail.com>
Date:   Fri Aug 21 03:16:50 2020 +0900

    HID: cypress: Support Varmilo Keyboards' media hotkeys
    
    [ Upstream commit 652f3d00de523a17b0cebe7b90debccf13aa8c31 ]
    
    The Varmilo VA104M Keyboard (04b4:07b1, reported as Varmilo Z104M)
    exposes media control hotkeys as a USB HID consumer control device, but
    these keys do not work in the current (5.8-rc1) kernel due to the
    incorrect HID report descriptor. Fix the problem by modifying the
    internal HID report descriptor.
    
    More specifically, the keyboard report descriptor specifies the
    logical boundary as 572~10754 (0x023c ~ 0x2a02) while the usage
    boundary is specified as 0~10754 (0x00 ~ 0x2a02). This results in an
    incorrect interpretation of input reports, causing inputs to be ignored.
    By setting the Logical Minimum to zero, we align the logical boundary
    with the Usage ID boundary.
    
    Some notes:
    
    * There seem to be multiple variants of the VA104M keyboard. This
      patch specifically targets 04b4:07b1 variant.
    
    * The device works out-of-the-box on Windows platform with the generic
      consumer control device driver (hidserv.inf). This suggests that
      Windows either ignores the Logical Minimum/Logical Maximum or
      interprets the Usage ID assignment differently from the linux
      implementation; Maybe there are other devices out there that only
      works on Windows due to this problem?
    
    Signed-off-by: Frank Yang <puilp0502@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b06dc6cfc459df5100d2df6daf4df5eeec0bd83
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Tue Oct 13 18:26:28 2020 +0300

    ALSA: hda/hdmi: fix incorrect locking in hdmi_pcm_close
    
    commit ce1558c285f9ad04c03b46833a028230771cc0a7 upstream
    
    A race exists between closing a PCM and update of ELD data. In
    hdmi_pcm_close(), hinfo->nid value is modified without taking
    spec->pcm_lock. If this happens concurrently while processing an ELD
    update in hdmi_pcm_setup_pin(), converter assignment may be done
    incorrectly.
    
    This bug was found by hitting a WARN_ON in snd_hda_spdif_ctls_assign()
    in a HDMI receiver connection stress test:
    
    [2739.684569] WARNING: CPU: 5 PID: 2090 at sound/pci/hda/patch_hdmi.c:1898 check_non_pcm_per_cvt+0x41/0x50 [snd_hda_codec_hdmi]
    ...
    [2739.684707] Call Trace:
    [2739.684720]  update_eld+0x121/0x5a0 [snd_hda_codec_hdmi]
    [2739.684736]  hdmi_present_sense+0x21e/0x3b0 [snd_hda_codec_hdmi]
    [2739.684750]  check_presence_and_report+0x81/0xd0 [snd_hda_codec_hdmi]
    [2739.684842]  intel_audio_codec_enable+0x122/0x190 [i915]
    
    Fixes: 42b2987079ec ("ALSA: hda - hdmi playback without monitor in dynamic pcm bind mode")
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201013152628.920764-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 081de89806adf81774c259f16d4827d9f9b35649
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Jul 12 23:06:51 2018 +0200

    ALSA: hda/hdmi: Use single mutex unlock in error paths
    
    commit f69548ffafcc4942022f16f2f192b24143de1dba upstream
    
    Instead of calling mutex_unlock() at each error path multiple times,
    take the standard goto-and-a-single-unlock approach.  This will
    simplify the code and make easier to find the unbalanced mutex locks.
    
    No functional changes, but only the code readability improvement as a
    preliminary work for further changes.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ffd7f53fc9e9d470680a92f863f6074eae11e46
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 20 13:57:48 2020 +0000

    arm64: pgtable: Ensure dirty bit is preserved across pte_wrprotect()
    
    commit ff1712f953e27f0b0718762ec17d0adb15c9fd0b upstream.
    
    With hardware dirty bit management, calling pte_wrprotect() on a writable,
    dirty PTE will lose the dirty state and return a read-only, clean entry.
    
    Move the logic from ptep_set_wrprotect() into pte_wrprotect() to ensure that
    the dirty bit is preserved for writable entries, as this is required for
    soft-dirty bit management if we enable it in the future.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 2f4b829c625e ("arm64: Add support for hardware updates of the access and dirty pte bits")
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201120143557.6715-3-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8d6562718fdaa583336a7c710ee09e7e944180a
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 20 13:28:01 2020 +0000

    arm64: pgtable: Fix pte_accessible()
    
    commit 07509e10dcc77627f8b6a57381e878fe269958d3 upstream.
    
    pte_accessible() is used by ptep_clear_flush() to figure out whether TLB
    invalidation is necessary when unmapping pages for reclaim. Although our
    implementation is correct according to the architecture, returning true
    only for valid, young ptes in the absence of racing page-table
    modifications, this is in fact flawed due to lazy invalidation of old
    ptes in ptep_clear_flush_young() where we elide the expensive DSB
    instruction for completing the TLB invalidation.
    
    Rather than penalise the aging path, adjust pte_accessible() to return
    true for any valid pte, even if the access flag is cleared.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 76c714be0e5e ("arm64: pgtable: implement pte_accessible()")
    Reported-by: Yu Zhao <yuzhao@google.com>
    Acked-by: Yu Zhao <yuzhao@google.com>
    Reviewed-by: Minchan Kim <minchan@kernel.org>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201120143557.6715-2-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccaca187eae03332f40fabc8912a704bd27c2e27
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Mar 13 13:55:11 2019 +0800

    btrfs: inode: Verify inode mode to avoid NULL pointer dereference
    
    commit 6bf9e4bd6a277840d3fe8c5d5d530a1fbd3db592 upstream
    
    [BUG]
    When accessing a file on a crafted image, btrfs can crash in block layer:
    
      BUG: unable to handle kernel NULL pointer dereference at 0000000000000008
      PGD 136501067 P4D 136501067 PUD 124519067 PMD 0
      CPU: 3 PID: 0 Comm: swapper/3 Not tainted 5.0.0-rc8-default #252
      RIP: 0010:end_bio_extent_readpage+0x144/0x700
      Call Trace:
       <IRQ>
       blk_update_request+0x8f/0x350
       blk_mq_end_request+0x1a/0x120
       blk_done_softirq+0x99/0xc0
       __do_softirq+0xc7/0x467
       irq_exit+0xd1/0xe0
       call_function_single_interrupt+0xf/0x20
       </IRQ>
      RIP: 0010:default_idle+0x1e/0x170
    
    [CAUSE]
    The crafted image has a tricky corruption, the INODE_ITEM has a
    different type against its parent dir:
    
            item 20 key (268 INODE_ITEM 0) itemoff 2808 itemsize 160
                    generation 13 transid 13 size 1048576 nbytes 1048576
                    block group 0 mode 121644 links 1 uid 0 gid 0 rdev 0
                    sequence 9 flags 0x0(none)
    
    This mode number 0120000 means it's a symlink.
    
    But the dir item think it's still a regular file:
    
            item 8 key (264 DIR_INDEX 5) itemoff 3707 itemsize 32
                    location key (268 INODE_ITEM 0) type FILE
                    transid 13 data_len 0 name_len 2
                    name: f4
            item 40 key (264 DIR_ITEM 51821248) itemoff 1573 itemsize 32
                    location key (268 INODE_ITEM 0) type FILE
                    transid 13 data_len 0 name_len 2
                    name: f4
    
    For symlink, we don't set BTRFS_I(inode)->io_tree.ops and leave it
    empty, as symlink is only designed to have inlined extent, all handled
    by tree block read.  Thus no need to trigger btrfs_submit_bio_hook() for
    inline file extent.
    
    However end_bio_extent_readpage() expects tree->ops populated, as it's
    reading regular data extent.  This causes NULL pointer dereference.
    
    [FIX]
    This patch fixes the problem in two ways:
    
    - Verify inode mode against its dir item when looking up inode
      So in btrfs_lookup_dentry() if we find inode mode mismatch with dir
      item, we error out so that corrupted inode will not be accessed.
    
    - Verify inode mode when getting extent mapping
      Only regular file should have regular or preallocated extent.
      If we found regular/preallocated file extent for symlink or
      the rest, we error out before submitting the read bio.
    
    With this fix that crafted image can be rejected gracefully:
    
      BTRFS critical (device loop0): inode mode mismatch with dir: inode mode=0121644 btrfs type=7 dir type=1
    
    Reported-by: Yoon Jungyeon <jungyeon@gatech.edu>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=202763
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    [sudip: use original btrfs_inode_type()]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35618463bb027c4b3e398d4df6440ec52cf8ea9c
Author: Su Yue <suy.fnst@cn.fujitsu.com>
Date:   Mon Mar 5 17:13:37 2018 +0800

    btrfs: adjust return values of btrfs_inode_by_name
    
    commit 005d67127fa9dfb3382f2c9e918feed7a243a7fe upstream
    
    Previously, btrfs_inode_by_name() returned 0 which left caller to check
    objectid of location even location if the type was invalid.
    
    Let btrfs_inode_by_name() return -EUCLEAN if a corrupted location of a
    dir entry is found.  Removal of label out_err also simplifies the
    function.
    
    Signed-off-by: Su Yue <suy.fnst@cn.fujitsu.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ drop unlikely ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e0b3e6d3f29e6989cf202b371537a9e3265e15d
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Mar 13 12:17:50 2019 +0800

    btrfs: tree-checker: Enhance chunk checker to validate chunk profile
    
    commit 80e46cf22ba0bcb57b39c7c3b52961ab3a0fd5f2 upstream
    
    Btrfs-progs already have a comprehensive type checker, to ensure there
    is only 0 (SINGLE profile) or 1 (DUP/RAID0/1/5/6/10) bit set for chunk
    profile bits.
    
    Do the same work for kernel.
    
    Reported-by: Yoon Jungyeon <jungyeon@gatech.edu>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=202765
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    [sudip: manually backport and use btrfs_err instead of chunk_err]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75d7a031f230acbc538ae372e5f71dfd86117a9a
Author: Rajat Jain <rajatja@google.com>
Date:   Mon Jul 6 16:32:40 2020 -0700

    PCI: Add device even if driver attach failed
    
    commit 2194bc7c39610be7cabe7456c5f63a570604f015 upstream.
    
    device_attach() returning failure indicates a driver error while trying to
    probe the device. In such a scenario, the PCI device should still be added
    in the system and be visible to the user.
    
    When device_attach() fails, merely warn about it and keep the PCI device in
    the system.
    
    This partially reverts ab1a187bba5c ("PCI: Check device_attach() return
    value always").
    
    Link: https://lore.kernel.org/r/20200706233240.3245512-1-rajatja@google.com
    Signed-off-by: Rajat Jain <rajatja@google.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: stable@vger.kernel.org      # v4.6+
    [sudip: use dev_warn]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e586c03f9a269d2f28177063ace3e0db08d5e5e9
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Thu May 21 22:14:22 2020 +0200

    wireless: Use linux/stddef.h instead of stddef.h
    
    commit 1b9ae0c92925ac40489be526d67d0010d0724ce0 upstream.
    
    When compiling inside the kernel include linux/stddef.h instead of
    stddef.h. When I compile this header file in backports for power PC I
    run into a conflict with ptrdiff_t. I was unable to reproduce this in
    mainline kernel. I still would like to fix this problem in the kernel.
    
    Fixes: 6989310f5d43 ("wireless: Use offsetof instead of custom macro.")
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Link: https://lore.kernel.org/r/20200521201422.16493-1-hauke@hauke-m.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff39fe9a05b7e4dbccaa6a4b419872591d5b9966
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Nov 23 14:28:44 2020 +0000

    btrfs: fix lockdep splat when reading qgroup config on mount
    
    commit 3d05cad3c357a2b749912914356072b38435edfa upstream.
    
    Lockdep reported the following splat when running test btrfs/190 from
    fstests:
    
      [ 9482.126098] ======================================================
      [ 9482.126184] WARNING: possible circular locking dependency detected
      [ 9482.126281] 5.10.0-rc4-btrfs-next-73 #1 Not tainted
      [ 9482.126365] ------------------------------------------------------
      [ 9482.126456] mount/24187 is trying to acquire lock:
      [ 9482.126534] ffffa0c869a7dac0 (&fs_info->qgroup_rescan_lock){+.+.}-{3:3}, at: qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.126647]
                     but task is already holding lock:
      [ 9482.126777] ffffa0c892ebd3a0 (btrfs-quota-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.126886]
                     which lock already depends on the new lock.
    
      [ 9482.127078]
                     the existing dependency chain (in reverse order) is:
      [ 9482.127213]
                     -> #1 (btrfs-quota-00){++++}-{3:3}:
      [ 9482.127366]        lock_acquire+0xd8/0x490
      [ 9482.127436]        down_read_nested+0x45/0x220
      [ 9482.127528]        __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.127613]        btrfs_read_lock_root_node+0x41/0x130 [btrfs]
      [ 9482.127702]        btrfs_search_slot+0x514/0xc30 [btrfs]
      [ 9482.127788]        update_qgroup_status_item+0x72/0x140 [btrfs]
      [ 9482.127877]        btrfs_qgroup_rescan_worker+0xde/0x680 [btrfs]
      [ 9482.127964]        btrfs_work_helper+0xf1/0x600 [btrfs]
      [ 9482.128039]        process_one_work+0x24e/0x5e0
      [ 9482.128110]        worker_thread+0x50/0x3b0
      [ 9482.128181]        kthread+0x153/0x170
      [ 9482.128256]        ret_from_fork+0x22/0x30
      [ 9482.128327]
                     -> #0 (&fs_info->qgroup_rescan_lock){+.+.}-{3:3}:
      [ 9482.128464]        check_prev_add+0x91/0xc60
      [ 9482.128551]        __lock_acquire+0x1740/0x3110
      [ 9482.128623]        lock_acquire+0xd8/0x490
      [ 9482.130029]        __mutex_lock+0xa3/0xb30
      [ 9482.130590]        qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.131577]        btrfs_read_qgroup_config+0x43a/0x550 [btrfs]
      [ 9482.132175]        open_ctree+0x1228/0x18a0 [btrfs]
      [ 9482.132756]        btrfs_mount_root.cold+0x13/0xed [btrfs]
      [ 9482.133325]        legacy_get_tree+0x30/0x60
      [ 9482.133866]        vfs_get_tree+0x28/0xe0
      [ 9482.134392]        fc_mount+0xe/0x40
      [ 9482.134908]        vfs_kern_mount.part.0+0x71/0x90
      [ 9482.135428]        btrfs_mount+0x13b/0x3e0 [btrfs]
      [ 9482.135942]        legacy_get_tree+0x30/0x60
      [ 9482.136444]        vfs_get_tree+0x28/0xe0
      [ 9482.136949]        path_mount+0x2d7/0xa70
      [ 9482.137438]        do_mount+0x75/0x90
      [ 9482.137923]        __x64_sys_mount+0x8e/0xd0
      [ 9482.138400]        do_syscall_64+0x33/0x80
      [ 9482.138873]        entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [ 9482.139346]
                     other info that might help us debug this:
    
      [ 9482.140735]  Possible unsafe locking scenario:
    
      [ 9482.141594]        CPU0                    CPU1
      [ 9482.142011]        ----                    ----
      [ 9482.142411]   lock(btrfs-quota-00);
      [ 9482.142806]                                lock(&fs_info->qgroup_rescan_lock);
      [ 9482.143216]                                lock(btrfs-quota-00);
      [ 9482.143629]   lock(&fs_info->qgroup_rescan_lock);
      [ 9482.144056]
                      *** DEADLOCK ***
    
      [ 9482.145242] 2 locks held by mount/24187:
      [ 9482.145637]  #0: ffffa0c8411c40e8 (&type->s_umount_key#44/1){+.+.}-{3:3}, at: alloc_super+0xb9/0x400
      [ 9482.146061]  #1: ffffa0c892ebd3a0 (btrfs-quota-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.146509]
                     stack backtrace:
      [ 9482.147350] CPU: 1 PID: 24187 Comm: mount Not tainted 5.10.0-rc4-btrfs-next-73 #1
      [ 9482.147788] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      [ 9482.148709] Call Trace:
      [ 9482.149169]  dump_stack+0x8d/0xb5
      [ 9482.149628]  check_noncircular+0xff/0x110
      [ 9482.150090]  check_prev_add+0x91/0xc60
      [ 9482.150561]  ? kvm_clock_read+0x14/0x30
      [ 9482.151017]  ? kvm_sched_clock_read+0x5/0x10
      [ 9482.151470]  __lock_acquire+0x1740/0x3110
      [ 9482.151941]  ? __btrfs_tree_read_lock+0x27/0x120 [btrfs]
      [ 9482.152402]  lock_acquire+0xd8/0x490
      [ 9482.152887]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.153354]  __mutex_lock+0xa3/0xb30
      [ 9482.153826]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.154301]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.154768]  ? qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.155226]  qgroup_rescan_init+0x43/0xf0 [btrfs]
      [ 9482.155690]  btrfs_read_qgroup_config+0x43a/0x550 [btrfs]
      [ 9482.156160]  open_ctree+0x1228/0x18a0 [btrfs]
      [ 9482.156643]  btrfs_mount_root.cold+0x13/0xed [btrfs]
      [ 9482.157108]  ? rcu_read_lock_sched_held+0x5d/0x90
      [ 9482.157567]  ? kfree+0x31f/0x3e0
      [ 9482.158030]  legacy_get_tree+0x30/0x60
      [ 9482.158489]  vfs_get_tree+0x28/0xe0
      [ 9482.158947]  fc_mount+0xe/0x40
      [ 9482.159403]  vfs_kern_mount.part.0+0x71/0x90
      [ 9482.159875]  btrfs_mount+0x13b/0x3e0 [btrfs]
      [ 9482.160335]  ? rcu_read_lock_sched_held+0x5d/0x90
      [ 9482.160805]  ? kfree+0x31f/0x3e0
      [ 9482.161260]  ? legacy_get_tree+0x30/0x60
      [ 9482.161714]  legacy_get_tree+0x30/0x60
      [ 9482.162166]  vfs_get_tree+0x28/0xe0
      [ 9482.162616]  path_mount+0x2d7/0xa70
      [ 9482.163070]  do_mount+0x75/0x90
      [ 9482.163525]  __x64_sys_mount+0x8e/0xd0
      [ 9482.163986]  do_syscall_64+0x33/0x80
      [ 9482.164437]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [ 9482.164902] RIP: 0033:0x7f51e907caaa
    
    This happens because at btrfs_read_qgroup_config() we can call
    qgroup_rescan_init() while holding a read lock on a quota btree leaf,
    acquired by the previous call to btrfs_search_slot_for_read(), and
    qgroup_rescan_init() acquires the mutex qgroup_rescan_lock.
    
    A qgroup rescan worker does the opposite: it acquires the mutex
    qgroup_rescan_lock, at btrfs_qgroup_rescan_worker(), and then tries to
    update the qgroup status item in the quota btree through the call to
    update_qgroup_status_item(). This inversion of locking order
    between the qgroup_rescan_lock mutex and quota btree locks causes the
    splat.
    
    Fix this simply by releasing and freeing the path before calling
    qgroup_rescan_init() at btrfs_read_qgroup_config().
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a5ff71811f702b84d113a433616a6f698af2395
Author: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
Date:   Mon Nov 23 17:52:58 2020 +0100

    mm/userfaultfd: do not access vma->vm_mm after calling handle_userfault()
    
    commit bfe8cc1db02ab243c62780f17fc57f65bde0afe1 upstream.
    
    Alexander reported a syzkaller / KASAN finding on s390, see below for
    complete output.
    
    In do_huge_pmd_anonymous_page(), the pre-allocated pagetable will be
    freed in some cases.  In the case of userfaultfd_missing(), this will
    happen after calling handle_userfault(), which might have released the
    mmap_lock.  Therefore, the following pte_free(vma->vm_mm, pgtable) will
    access an unstable vma->vm_mm, which could have been freed or re-used
    already.
    
    For all architectures other than s390 this will go w/o any negative
    impact, because pte_free() simply frees the page and ignores the
    passed-in mm.  The implementation for SPARC32 would also access
    mm->page_table_lock for pte_free(), but there is no THP support in
    SPARC32, so the buggy code path will not be used there.
    
    For s390, the mm->context.pgtable_list is being used to maintain the 2K
    pagetable fragments, and operating on an already freed or even re-used
    mm could result in various more or less subtle bugs due to list /
    pagetable corruption.
    
    Fix this by calling pte_free() before handle_userfault(), similar to how
    it is already done in __do_huge_pmd_anonymous_page() for the WRITE /
    non-huge_zero_page case.
    
    Commit 6b251fc96cf2c ("userfaultfd: call handle_userfault() for
    userfaultfd_missing() faults") actually introduced both, the
    do_huge_pmd_anonymous_page() and also __do_huge_pmd_anonymous_page()
    changes wrt to calling handle_userfault(), but only in the latter case
    it put the pte_free() before calling handle_userfault().
    
      BUG: KASAN: use-after-free in do_huge_pmd_anonymous_page+0xcda/0xd90 mm/huge_memory.c:744
      Read of size 8 at addr 00000000962d6988 by task syz-executor.0/9334
    
      CPU: 1 PID: 9334 Comm: syz-executor.0 Not tainted 5.10.0-rc1-syzkaller-07083-g4c9720875573 #0
      Hardware name: IBM 3906 M04 701 (KVM/Linux)
      Call Trace:
        do_huge_pmd_anonymous_page+0xcda/0xd90 mm/huge_memory.c:744
        create_huge_pmd mm/memory.c:4256 [inline]
        __handle_mm_fault+0xe6e/0x1068 mm/memory.c:4480
        handle_mm_fault+0x288/0x748 mm/memory.c:4607
        do_exception+0x394/0xae0 arch/s390/mm/fault.c:479
        do_dat_exception+0x34/0x80 arch/s390/mm/fault.c:567
        pgm_check_handler+0x1da/0x22c arch/s390/kernel/entry.S:706
        copy_from_user_mvcos arch/s390/lib/uaccess.c:111 [inline]
        raw_copy_from_user+0x3a/0x88 arch/s390/lib/uaccess.c:174
        _copy_from_user+0x48/0xa8 lib/usercopy.c:16
        copy_from_user include/linux/uaccess.h:192 [inline]
        __do_sys_sigaltstack kernel/signal.c:4064 [inline]
        __s390x_sys_sigaltstack+0xc8/0x240 kernel/signal.c:4060
        system_call+0xe0/0x28c arch/s390/kernel/entry.S:415
    
      Allocated by task 9334:
        slab_alloc_node mm/slub.c:2891 [inline]
        slab_alloc mm/slub.c:2899 [inline]
        kmem_cache_alloc+0x118/0x348 mm/slub.c:2904
        vm_area_dup+0x9c/0x2b8 kernel/fork.c:356
        __split_vma+0xba/0x560 mm/mmap.c:2742
        split_vma+0xca/0x108 mm/mmap.c:2800
        mlock_fixup+0x4ae/0x600 mm/mlock.c:550
        apply_vma_lock_flags+0x2c6/0x398 mm/mlock.c:619
        do_mlock+0x1aa/0x718 mm/mlock.c:711
        __do_sys_mlock2 mm/mlock.c:738 [inline]
        __s390x_sys_mlock2+0x86/0xa8 mm/mlock.c:728
        system_call+0xe0/0x28c arch/s390/kernel/entry.S:415
    
      Freed by task 9333:
        slab_free mm/slub.c:3142 [inline]
        kmem_cache_free+0x7c/0x4b8 mm/slub.c:3158
        __vma_adjust+0x7b2/0x2508 mm/mmap.c:960
        vma_merge+0x87e/0xce0 mm/mmap.c:1209
        userfaultfd_release+0x412/0x6b8 fs/userfaultfd.c:868
        __fput+0x22c/0x7a8 fs/file_table.c:281
        task_work_run+0x200/0x320 kernel/task_work.c:151
        tracehook_notify_resume include/linux/tracehook.h:188 [inline]
        do_notify_resume+0x100/0x148 arch/s390/kernel/signal.c:538
        system_call+0xe6/0x28c arch/s390/kernel/entry.S:416
    
      The buggy address belongs to the object at 00000000962d6948 which belongs to the cache vm_area_struct of size 200
      The buggy address is located 64 bytes inside of 200-byte region [00000000962d6948, 00000000962d6a10)
      The buggy address belongs to the page: page:00000000313a09fe refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x962d6 flags: 0x3ffff00000000200(slab)
      raw: 3ffff00000000200 000040000257e080 0000000c0000000c 000000008020ba00
      raw: 0000000000000000 000f001e00000000 ffffffff00000001 0000000096959501
      page dumped because: kasan: bad access detected
      page->mem_cgroup:0000000096959501
    
      Memory state around the buggy address:
       00000000962d6880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       00000000962d6900: 00 fc fc fc fc fc fc fc fc fa fb fb fb fb fb fb
      >00000000962d6980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                            ^
       00000000962d6a00: fb fb fc fc fc fc fc fc fc fc 00 00 00 00 00 00
       00000000962d6a80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ==================================================================
    
    Changes for v4.14 stable:
      - Make it apply w/o
        * Commit 4cf58924951ef ("mm: treewide: remove unused address argument
          from pte_alloc functions")
        * Commit 2b7403035459c ("mm: Change return type int to vm_fault_t for
          fault handlers")
    
    Fixes: 6b251fc96cf2c ("userfaultfd: call handle_userfault() for userfaultfd_missing() faults")
    Reported-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Signed-off-by: Gerald Schaefer <gerald.schaefer@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Heiko Carstens <hca@linux.ibm.com>
    Cc: <stable@vger.kernel.org>    [4.3+]
    Link: https://lkml.kernel.org/r/20201110190329.11920-1-gerald.schaefer@linux.ibm.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be9baaaa643b51a65362ea39c274276cbe5a64a3
Author: Igor Lubashev <ilubashe@akamai.com>
Date:   Mon Aug 26 21:39:12 2019 -0400

    perf event: Check ref_reloc_sym before using it
    
    commit e9a6882f267a8105461066e3ea6b4b6b9be1b807 upstream.
    
    Check for ref_reloc_sym before using it instead of checking
    symbol_conf.kptr_restrict and relying solely on that check.
    
    Reported-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Igor Lubashev <ilubashe@akamai.com>
    Tested-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Suzuki Poulouse <suzuki.poulose@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Link: http://lkml.kernel.org/r/1566869956-7154-2-git-send-email-ilubashe@akamai.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Dahl <ada@thorsis.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1ad560c0ec3c8a68e3e2684ed86dc6b89c94ec6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 24 13:05:58 2020 +0100

    Linux 4.14.209
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201123121805.028396732@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d18097f6fbe4c013483d7fa1629a209df6480dd
Author: Chen Yu <yu.c.chen@intel.com>
Date:   Fri Nov 13 09:59:23 2020 +0800

    x86/microcode/intel: Check patch signature before saving microcode for early loading
    
    commit 1a371e67dc77125736cc56d3a0893f06b75855b6 upstream.
    
    Currently, scan_microcode() leverages microcode_matches() to check
    if the microcode matches the CPU by comparing the family and model.
    However, the processor stepping and flags of the microcode signature
    should also be considered when saving a microcode patch for early
    update.
    
    Use find_matching_signature() in scan_microcode() and get rid of the
    now-unused microcode_matches() which is a good cleanup in itself.
    
    Complete the verification of the patch being saved for early loading in
    save_microcode_patch() directly. This needs to be done there too because
    save_mc_for_early() will call save_microcode_patch() too.
    
    The second reason why this needs to be done is because the loader still
    tries to support, at least hypothetically, mixed-steppings systems and
    thus adds all patches to the cache that belong to the same CPU model
    albeit with different steppings.
    
    For example:
    
      microcode: CPU: sig=0x906ec, pf=0x2, rev=0xd6
      microcode: mc_saved[0]: sig=0x906e9, pf=0x2a, rev=0xd6, total size=0x19400, date = 2020-04-23
      microcode: mc_saved[1]: sig=0x906ea, pf=0x22, rev=0xd6, total size=0x19000, date = 2020-04-27
      microcode: mc_saved[2]: sig=0x906eb, pf=0x2, rev=0xd6, total size=0x19400, date = 2020-04-23
      microcode: mc_saved[3]: sig=0x906ec, pf=0x22, rev=0xd6, total size=0x19000, date = 2020-04-27
      microcode: mc_saved[4]: sig=0x906ed, pf=0x22, rev=0xd6, total size=0x19400, date = 2020-04-23
    
    The patch which is being saved for early loading, however, can only be
    the one which fits the CPU this runs on so do the signature verification
    before saving.
    
     [ bp: Do signature verification in save_microcode_patch()
           and rewrite commit message. ]
    
    Fixes: ec400ddeff20 ("x86/microcode_intel_early.c: Early update ucode on Intel's CPU")
    Signed-off-by: Chen Yu <yu.c.chen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=208535
    Link: https://lkml.kernel.org/r/20201113015923.13960-1-yu.c.chen@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3294ce4c4f06caec8a4bccedcd069c76748abce1
Author: Stefan Haberland <sth@linux.ibm.com>
Date:   Mon Nov 16 16:23:47 2020 +0100

    s390/dasd: fix null pointer dereference for ERP requests
    
    commit 6f117cb854a44a79898d844e6ae3fd23bd94e786 upstream.
    
    When requeueing all requests on the device request queue to the blocklayer
    we might get to an ERP (error recovery) request that is a copy of an
    original CQR.
    
    Those requests do not have blocklayer request information or a pointer to
    the dasd_queue set. When trying to access those data it will lead to a
    null pointer dereference in dasd_requeue_all_requests().
    
    Fix by checking if the request is an ERP request that can simply be
    ignored. The blocklayer request will be requeued by the original CQR that
    is on the device queue right behind the ERP request.
    
    Fixes: 9487cfd3430d ("s390/dasd: fix handling of internal requests")
    Cc: <stable@vger.kernel.org> #4.16
    Signed-off-by: Stefan Haberland <sth@linux.ibm.com>
    Reviewed-by: Jan Hoeppner <hoeppner@linux.ibm.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afc2f576a7eeda68c731943a6deae3d5bce9f3df
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Wed Nov 11 16:26:25 2020 +0100

    s390/cpum_sf.c: fix file permission for cpum_sfb_size
    
    commit 78d732e1f326f74f240d416af9484928303d9951 upstream.
    
    This file is installed by the s390 CPU Measurement sampling
    facility device driver to export supported minimum and
    maximum sample buffer sizes.
    This file is read by lscpumf tool to display the details
    of the device driver capabilities. The lscpumf tool might
    be invoked by a non-root user. In this case it does not
    print anything because the file contents can not be read.
    
    Fix this by allowing read access for all users. Reading
    the file contents is ok, changing the file contents is
    left to the root user only.
    
    For further reference and details see:
     [1] https://github.com/ibm-s390-tools/s390-tools/issues/97
    
    Fixes: 69f239ed335a ("s390/cpum_sf: Dynamically extend the sampling buffer if overflows occur")
    Cc: <stable@vger.kernel.org> # 3.14
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Acked-by: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0b0f0eadde3e42f74f8d632a12ac8d028b6331c
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Nov 12 11:22:04 2020 +0100

    mac80211: free sta in sta_info_insert_finish() on errors
    
    commit 7bc40aedf24d31d8bea80e1161e996ef4299fb10 upstream.
    
    If sta_info_insert_finish() fails, we currently keep the station
    around and free it only in the caller, but there's only one such
    caller and it always frees it immediately.
    
    As syzbot found, another consequence of this split is that we can
    put things that sleep only into __cleanup_single_sta() and not in
    sta_info_free(), but this is the only place that requires such of
    sta_info_free() now.
    
    Change this to free the station in sta_info_insert_finish(), in
    which case we can still sleep. This will also let us unify the
    cleanup code later.
    
    Cc: stable@vger.kernel.org
    Fixes: dcd479e10a05 ("mac80211: always wind down STA state")
    Reported-by: syzbot+32c6c38c4812d22f2f0b@syzkaller.appspotmail.com
    Reported-by: syzbot+4c81fe92e372d26c4246@syzkaller.appspotmail.com
    Reported-by: syzbot+6a7fe9faf0d1d61bc24a@syzkaller.appspotmail.com
    Reported-by: syzbot+abed06851c5ffe010921@syzkaller.appspotmail.com
    Reported-by: syzbot+b7aeb9318541a1c709f1@syzkaller.appspotmail.com
    Reported-by: syzbot+d5a9416c6cafe53b5dd0@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201112112201.ee6b397b9453.I9c31d667a0ea2151441cc64ed6613d36c18a48e0@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56a2825b2c8e7f632208d40a927217985a4f8e3b
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Nov 11 19:33:59 2020 +0100

    mac80211: minstrel: fix tx status processing corner case
    
    commit b2911a84396f72149dce310a3b64d8948212c1b3 upstream.
    
    Some drivers fill the status rate list without setting the rate index after
    the final rate to -1. minstrel_ht already deals with this, but minstrel
    doesn't, which causes it to get stuck at the lowest rate on these drivers.
    
    Fix this by checking the count as well.
    
    Cc: stable@vger.kernel.org
    Fixes: cccf129f820e ("mac80211: add the 'minstrel' rate control algorithm")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20201111183359.43528-3-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0c0c27ca9664c7c5959332839c804cb96d6bac3
Author: Felix Fietkau <nbd@nbd.name>
Date:   Wed Nov 11 19:33:58 2020 +0100

    mac80211: minstrel: remove deferred sampling code
    
    commit 4fe40b8e1566dad04c87fbf299049a1d0d4bd58d upstream.
    
    Deferring sampling attempts to the second stage has some bad interactions
    with drivers that process the rate table in hardware and use the probe flag
    to indicate probing packets (e.g. most mt76 drivers). On affected drivers
    it can lead to probing not working at all.
    
    If the link conditions turn worse, it might not be such a good idea to
    do a lot of sampling for lower rates in this case.
    
    Fix this by simply skipping the sample attempt instead of deferring it,
    but keep the checks that would allow it to be sampled if it was skipped
    too often, but only if it has less than 95% success probability.
    
    Also ensure that IEEE80211_TX_CTL_RATE_CTRL_PROBE is set for all probing
    packets.
    
    Cc: stable@vger.kernel.org
    Fixes: cccf129f820e ("mac80211: add the 'minstrel' rate control algorithm")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20201111183359.43528-2-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34da8a612fe25f80cba04baeab03b8392b7dc6ca
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Mon Nov 16 01:38:59 2020 -0800

    xtensa: disable preemption around cache alias management calls
    
    commit 3a860d165eb5f4d7cf0bf81ef6a5b5c5e1754422 upstream.
    
    Although cache alias management calls set up and tear down TLB entries
    and fast_second_level_miss is able to restore TLB entry should it be
    evicted they absolutely cannot preempt each other because they use the
    same TLBTEMP area for different purposes.
    Disable preemption around all cache alias management calls to enforce
    that.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e2e0138c55862bd81616f9e72df98a240b29ab72
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Nov 13 01:20:28 2020 +0100

    regulator: workaround self-referent regulators
    
    commit f5c042b23f7429e5c2ac987b01a31c69059a978b upstream.
    
    Workaround regulators whose supply name happens to be the same as its
    own name. This fixes boards that used to work before the early supply
    resolving was removed. The error message is left in place so that
    offending drivers can be detected.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Cc: stable@vger.kernel.org
    Reported-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Tested-by: Ahmad Fatoum <a.fatoum@pengutronix.de> # stpmic1
    Link: https://lore.kernel.org/r/d703acde2a93100c3c7a81059d716c50ad1b1f52.1605226675.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcf4e5bb79ee5ae6c2a876d85614dd2a550fc474
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Nov 13 01:20:28 2020 +0100

    regulator: avoid resolve_supply() infinite recursion
    
    commit 4b639e254d3d4f15ee4ff2b890a447204cfbeea9 upstream.
    
    When a regulator's name equals its supply's name the
    regulator_resolve_supply() recurses indefinitely. Add a check
    so that debugging the problem is easier. The "fixed" commit
    just exposed the problem.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Cc: stable@vger.kernel.org
    Reported-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Tested-by: Ahmad Fatoum <a.fatoum@pengutronix.de> # stpmic1
    Link: https://lore.kernel.org/r/c6171057cfc0896f950c4d8cb82df0f9f1b89ad9.1605226675.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 579a6463633e6e2bc4fc9e552169abef25b7f544
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Fri Nov 13 01:20:27 2020 +0100

    regulator: fix memory leak with repeated set_machine_constraints()
    
    commit 57a6ad482af256b2a13de14194fb8f67c1a65f10 upstream.
    
    Fixed commit introduced a possible second call to
    set_machine_constraints() and that allocates memory for
    rdev->constraints. Move the allocation to the caller so
    it's easier to manage and done once.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Tested-by: Ahmad Fatoum <a.fatoum@pengutronix.de> # stpmic1
    Link: https://lore.kernel.org/r/78c3d4016cebc08d441aad18cb924b4e4d9cf9df.1605226675.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86f2625b0b1fd0a8d89a9745caa8b2efef62b2a6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Nov 10 14:38:35 2020 +0100

    iio: accel: kxcjk1013: Add support for KIOX010A ACPI DSM for setting tablet-mode
    
    commit e5b1032a656e9aa4c7a4df77cb9156a2a651a5f9 upstream.
    
    Some 360 degree hinges (yoga) style 2-in-1 devices use 2 KXCJ91008-s
    to allow the OS to determine the angle between the display and the base
    of the device, so that the OS can determine if the 2-in-1 is in laptop
    or in tablet-mode.
    
    On Windows both accelerometers are read by a special HingeAngleService
    process; and this process calls a DSM (Device Specific Method) on the
    ACPI KIOX010A device node for the sensor in the display, to let the
    embedded-controller (EC) know about the mode so that it can disable the
    kbd and touchpad to avoid spurious input while folded into tablet-mode.
    
    This notifying of the EC is problematic because sometimes the EC comes up
    thinking that device is in tablet-mode and the kbd and touchpad do not
    work. This happens for example on Irbis NB111 devices after a suspend /
    resume cycle (after a complete battery drain / hard reset without having
    booted Windows at least once). Other 2-in-1s which are likely affected
    too are e.g. the Teclast F5 and F6 series.
    
    The kxcjk-1013 driver may seem like a strange place to deal with this,
    but since it is *the* driver for the ACPI KIOX010A device, it is also
    the driver which has access to the ACPI handle needed by the DSM.
    
    Add support for calling the DSM and on probe unconditionally tell the
    EC that the device is laptop mode, fixing the kbd and touchpad sometimes
    not working.
    
    Fixes: 7f6232e69539 ("iio: accel: kxcjk1013: Add KIOX010A ACPI Hardware-ID")
    Reported-and-tested-by: russianneuromancer <russianneuromancer@ya.ru>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201110133835.129080-3-hdegoede@redhat.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6de95d5ba5d5ba6e87bd70b9e03ee624ccf8a0b6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Nov 10 14:38:34 2020 +0100

    iio: accel: kxcjk1013: Replace is_smo8500_device with an acpi_type enum
    
    commit 11e94f28c3de35d5ad1ac6a242a5b30f4378991a upstream.
    
    Replace the boolean is_smo8500_device variable with an acpi_type enum.
    
    For now this can be either ACPI_GENERIC or ACPI_SMO8500, this is a
    preparation patch for adding special handling for the KIOX010A ACPI HID,
    which will add a ACPI_KIOX010A acpi_type to the introduced enum.
    
    For stable as needed as precursor for next patch.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: 7f6232e69539 ("iio: accel: kxcjk1013: Add KIOX010A ACPI Hardware-ID")
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201110133835.129080-2-hdegoede@redhat.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f101e3a1d63ad67ff220fd47cb3ead86bd93355
Author: Jan Kara <jack@suse.cz>
Date:   Wed Nov 18 16:30:32 2020 +0100

    ext4: fix bogus warning in ext4_update_dx_flag()
    
    commit f902b216501094495ff75834035656e8119c537f upstream.
    
    The idea of the warning in ext4_update_dx_flag() is that we should warn
    when we are clearing EXT4_INODE_INDEX on a filesystem with metadata
    checksums enabled since after clearing the flag, checksums for internal
    htree nodes will become invalid. So there's no need to warn (or actually
    do anything) when EXT4_INODE_INDEX is not set.
    
    Link: https://lore.kernel.org/r/20201118153032.17281-1-jack@suse.cz
    Fixes: 48a34311953d ("ext4: fix checksum errors with indexed dirs")
    Reported-by: Eric Biggers <ebiggers@kernel.org>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 875f800e6a35c025101c5399588ead868659284a
Author: Brian O'Keefe <bokeefe@alum.wpi.edu>
Date:   Fri Nov 6 10:10:34 2020 -0500

    staging: rtl8723bs: Add 024c:0627 to the list of SDIO device-ids
    
    commit aee9dccc5b64e878cf1b18207436e73f66d74157 upstream.
    
    Add 024c:0627 to the list of SDIO device-ids, based on hardware found in
    the wild. This hardware exists on at least some Acer SW1-011 tablets.
    
    Signed-off-by: Brian O'Keefe <bokeefe@alum.wpi.edu>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/b9e1523f-2ba7-fb82-646a-37f095b4440e@alum.wpi.edu
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4a59be33bd7c974e84d4032bb78d985f33bc53a
Author: Vamshi K Sthambamkadi <vamshi.k.sthambamkadi@gmail.com>
Date:   Fri Oct 23 17:24:39 2020 +0530

    efivarfs: fix memory leak in efivarfs_create()
    
    commit fe5186cf12e30facfe261e9be6c7904a170bd822 upstream.
    
    kmemleak report:
      unreferenced object 0xffff9b8915fcb000 (size 4096):
      comm "efivarfs.sh", pid 2360, jiffies 4294920096 (age 48.264s)
      hex dump (first 32 bytes):
        2d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  -...............
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000cc4d897c>] kmem_cache_alloc_trace+0x155/0x4b0
        [<000000007d1dfa72>] efivarfs_create+0x6e/0x1a0
        [<00000000e6ee18fc>] path_openat+0xe4b/0x1120
        [<000000000ad0414f>] do_filp_open+0x91/0x100
        [<00000000ce93a198>] do_sys_openat2+0x20c/0x2d0
        [<000000002a91be6d>] do_sys_open+0x46/0x80
        [<000000000a854999>] __x64_sys_openat+0x20/0x30
        [<00000000c50d89c9>] do_syscall_64+0x38/0x90
        [<00000000cecd6b5f>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    In efivarfs_create(), inode->i_private is setup with efivar_entry
    object which is never freed.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vamshi K Sthambamkadi <vamshi.k.sthambamkadi@gmail.com>
    Link: https://lore.kernel.org/r/20201023115429.GA2479@cosmos
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7ad1aec4213a2e714a7f16d556b51188c8df86a
Author: Fugang Duan <fugang.duan@nxp.com>
Date:   Wed Nov 11 10:51:36 2020 +0800

    tty: serial: imx: keep console clocks always on
    
    commit e67c139c488e84e7eae6c333231e791f0e89b3fb upstream.
    
    For below code, there has chance to cause deadlock in SMP system:
    Thread 1:
    clk_enable_lock();
    pr_info("debug message");
    clk_enable_unlock();
    
    Thread 2:
    imx_uart_console_write()
            clk_enable()
                    clk_enable_lock();
    
    Thread 1:
    Acuired clk enable_lock -> printk -> console_trylock_spinning
    Thread 2:
    console_unlock() -> imx_uart_console_write -> clk_disable -> Acquite clk enable_lock
    
    So the patch is to keep console port clocks always on like
    other console drivers.
    
    Fixes: 1cf93e0d5488 ("serial: imx: remove the uart_console() check")
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
    Link: https://lore.kernel.org/r/20201111025136.29818-1-fugang.duan@nxp.com
    Cc: stable <stable@vger.kernel.org>
    [fix up build warning - gregkh]
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd15866373be9c4000fd3e9b3cd112d4e691337c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Nov 19 13:14:40 2020 +0100

    ALSA: mixart: Fix mutex deadlock
    
    commit d21b96c8ed2aea7e6b7bf4735e1d2503cfbf4072 upstream.
    
    The code change for switching to non-atomic mode brought the
    unexpected mutex deadlock in get_msg().  It converted the spinlock
    with the existing mutex, but there were calls with the already holding
    the mutex.  Since the only place that needs the extra lock is the code
    path from snd_mixart_send_msg(), remove the mutex lock in get_msg()
    and apply in the caller side for fixing the mutex deadlock.
    
    Fixes: 8d3a8b5cb57d ("ALSA: mixart: Use nonatomic PCM ops")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201119121440.18945-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a8df3caf9fe0c2a7956e1554e3d550e140720d1
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Fri Nov 13 18:20:43 2020 +0900

    ALSA: ctl: fix error path at adding user-defined element set
    
    commit 95a793c3bc75cf888e0e641d656e7d080f487d8b upstream.
    
    When processing request to add/replace user-defined element set, check
    of given element identifier and decision of numeric identifier is done
    in "__snd_ctl_add_replace()" helper function. When the result of check
    is wrong, the helper function returns error code. The error code shall
    be returned to userspace application.
    
    Current implementation includes bug to return zero to userspace application
    regardless of the result. This commit fixes the bug.
    
    Cc: <stable@vger.kernel.org>
    Fixes: e1a7bfe38079 ("ALSA: control: Fix race between adding and removing a user element")
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20201113092043.16148-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c450962482b5079d298e06796e5c4cecc2a0a60
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Tue Nov 10 19:35:41 2020 +0100

    speakup: Do not let the line discipline be used several times
    
    commit d4122754442799187d5d537a9c039a49a67e57f1 upstream.
    
    Speakup has only one speakup_tty variable to store the tty it is managing. This
    makes sense since its codebase currently assumes that there is only one user who
    controls the screen reading.
    
    That however means that we have to forbid using the line discipline several
    times, otherwise the second closure would try to free a NULL ldisc_data, leading to
    
    general protection fault: 0000 [#1] SMP KASAN PTI
    RIP: 0010:spk_ttyio_ldisc_close+0x2c/0x60
    Call Trace:
     tty_ldisc_release+0xa2/0x340
     tty_release_struct+0x17/0xd0
     tty_release+0x9d9/0xcc0
     __fput+0x231/0x740
     task_work_run+0x12c/0x1a0
     do_exit+0x9b5/0x2230
     ? release_task+0x1240/0x1240
     ? __do_page_fault+0x562/0xa30
     do_group_exit+0xd5/0x2a0
     __x64_sys_exit_group+0x35/0x40
     do_syscall_64+0x89/0x2b0
     ? page_fault+0x8/0x30
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Cc: stable@vger.kernel.org
    Reported-by: 秦世松 <qinshisong1205@gmail.com>
    Signed-off-by: Samuel Thibault <samuel.thibault@ens-lyon.org>
    Tested-by: Shisong Qin <qinshisong1205@gmail.com>
    Link: https://lore.kernel.org/r/20201110183541.fzgnlwhjpgqzjeth@function
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 148666df1f67591d8bef8036c70557c6ab716a83
Author: Daniel Axtens <dja@axtens.net>
Date:   Mon Nov 23 15:45:07 2020 +1100

    powerpc/uaccess-flush: fix missing includes in kup-radix.h
    
    Guenter reports a build failure on cell_defconfig and maple_defconfg:
    
    In file included from arch/powerpc/include/asm/kup.h:10:0,
                     from arch/powerpc/include/asm/uaccess.h:12,
                     from arch/powerpc/lib/checksum_wrappers.c:24:
    arch/powerpc/include/asm/book3s/64/kup-radix.h:5:1: error: data definition has no type or storage class [-Werror]
     DECLARE_STATIC_KEY_FALSE(uaccess_flush_key);
     ^~~~~~~~~~~~~~~~~~~~~~~~
    arch/powerpc/include/asm/book3s/64/kup-radix.h:5:1: error: type defaults to ‘int’ in declaration of ‘DECLARE_STATIC_KEY_FALSE’ [-Werror=implicit-int]
    arch/powerpc/include/asm/book3s/64/kup-radix.h:5:1: error: parameter names (without types) in function declaration [-Werror]
    arch/powerpc/include/asm/book3s/64/kup-radix.h: In function ‘prevent_user_access’:
    arch/powerpc/include/asm/book3s/64/kup-radix.h:18:6: error: implicit declaration of function ‘static_branch_unlikely’ [-Werror=implicit-function-declaration]
      if (static_branch_unlikely(&uaccess_flush_key))
          ^~~~~~~~~~~~~~~~~~~~~~
    arch/powerpc/include/asm/book3s/64/kup-radix.h:18:30: error: ‘uaccess_flush_key’ undeclared (first use in this function); did you mean
    ‘do_uaccess_flush’?
      if (static_branch_unlikely(&uaccess_flush_key))
                                  ^~~~~~~~~~~~~~~~~
                                  do_uaccess_flush
    arch/powerpc/include/asm/book3s/64/kup-radix.h:18:30: note: each undeclared identifier is reported only once for each function it appears in
    cc1: all warnings being treated as errors
    
    This is because I failed to include linux/jump_label.h in kup-radix.h. Include it.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63efeb7d9e25deb6844f5e60a8db4c228f68dad7
Author: Yicong Yang <yangyicong@hisilicon.com>
Date:   Sat Nov 21 22:17:19 2020 -0800

    libfs: fix error cast of negative value in simple_attr_write()
    
    [ Upstream commit 488dac0c9237647e9b8f788b6a342595bfa40bda ]
    
    The attr->set() receive a value of u64, but simple_strtoll() is used for
    doing the conversion.  It will lead to the error cast if user inputs a
    negative value.
    
    Use kstrtoull() instead of simple_strtoll() to convert a string got from
    the user to an unsigned value.  The former will return '-EINVAL' if it
    gets a negetive value, but the latter can't handle the situation
    correctly.  Make 'val' unsigned long long as what kstrtoull() takes,
    this will eliminate the compile warning on no 64-bit architectures.
    
    Fixes: f7b88631a897 ("fs/libfs.c: fix simple_attr_write() on 32bit machines")
    Signed-off-by: Yicong Yang <yangyicong@hisilicon.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Link: https://lkml.kernel.org/r/1605341356-11872-1-git-send-email-yangyicong@hisilicon.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a67d53f0692ed906196b46c34f81d2df5cc53f3
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Thu Nov 19 15:17:50 2020 -0800

    xfs: revert "xfs: fix rmap key and record comparison functions"
    
    [ Upstream commit eb8409071a1d47e3593cfe077107ac46853182ab ]
    
    This reverts commit 6ff646b2ceb0eec916101877f38da0b73e3a5b7f.
    
    Your maintainer committed a major braino in the rmap code by adding the
    attr fork, bmbt, and unwritten extent usage bits into rmap record key
    comparisons.  While XFS uses the usage bits *in the rmap records* for
    cross-referencing metadata in xfs_scrub and xfs_repair, it only needs
    the owner and offset information to distinguish between reverse mappings
    of the same physical extent into the data fork of a file at multiple
    offsets.  The other bits are not important for key comparisons for index
    lookups, and never have been.
    
    Eric Sandeen reports that this causes regressions in generic/299, so
    undo this patch before it does more damage.
    
    Reported-by: Eric Sandeen <sandeen@sandeen.net>
    Fixes: 6ff646b2ceb0 ("xfs: fix rmap key and record comparison functions")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Eric Sandeen <sandeen@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 155f1d1a0b41f6a62378a355b7b5f9c96c485bde
Author: Nishanth Menon <nm@ti.com>
Date:   Wed Nov 18 08:50:09 2020 -0600

    regulator: ti-abb: Fix array out of bound read access on the first transition
    
    [ Upstream commit 2ba546ebe0ce2af47833d8912ced9b4a579f13cb ]
    
    At the start of driver initialization, we do not know what bias
    setting the bootloader has configured the system for and we only know
    for certain the very first time we do a transition.
    
    However, since the initial value of the comparison index is -EINVAL,
    this negative value results in an array out of bound access on the
    very first transition.
    
    Since we don't know what the setting is, we just set the bias
    configuration as there is nothing to compare against. This prevents
    the array out of bound access.
    
    NOTE: Even though we could use a more relaxed check of "< 0" the only
    valid values(ignoring cosmic ray induced bitflips) are -EINVAL, 0+.
    
    Fixes: 40b1936efebd ("regulator: Introduce TI Adaptive Body Bias(ABB) on-chip LDO driver")
    Link: https://lore.kernel.org/linux-mm/CA+G9fYuk4imvhyCN7D7T6PMDH6oNp6HDCRiTUKMQ6QXXjBa4ag@mail.gmail.com/
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20201118145009.10492-1-nm@ti.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a68ee19749b607342ca8a48a8562c4d6076f18f3
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Fri Nov 13 21:18:56 2020 +0800

    MIPS: Alchemy: Fix memleak in alchemy_clk_setup_cpu
    
    [ Upstream commit ac3b57adf87ad9bac7e33ca26bbbb13fae1ed62b ]
    
    If the clk_register fails, we should free h before
    function returns to prevent memleak.
    
    Fixes: 474402291a0ad ("MIPS: Alchemy: clock framework integration of onchip clocks")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a65fa4cb5a47bc2abc1bdd26e446e6df1d166c3e
Author: Srinivasa Rao Mandadapu <srivasam@codeaurora.org>
Date:   Sun Nov 15 10:26:50 2020 +0530

    ASoC: qcom: lpass-platform: Fix memory leak
    
    [ Upstream commit bd6327fda2f3ded85b69b3c3125c99aaa51c7881 ]
    
    lpass_pcm_data is not freed in error paths. Free it in
    error paths to avoid memory leak.
    
    Fixes: 022d00ee0b55 ("ASoC: lpass-platform: Fix broken pcm data usage")
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: V Sujith Kumar Reddy <vsujithk@codeaurora.org>
    Signed-off-by: Srinivasa Rao Mandadapu <srivasam@codeaurora.org>
    Link: https://lore.kernel.org/r/1605416210-14530-1-git-send-email-srivasam@codeaurora.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2643db45e7bde0c3e4ee2aa39becc6318cd1d12b
Author: Wu Bo <wubo.oduw@gmail.com>
Date:   Wed Jan 29 10:23:30 2020 +0800

    can: m_can: m_can_handle_state_change(): fix state change
    
    [ Upstream commit cd0d83eab2e0c26fe87a10debfedbb23901853c1 ]
    
    m_can_handle_state_change() is called with the new_state as an argument.
    
    In the switch statements for CAN_STATE_ERROR_ACTIVE, the comment and the
    following code indicate that a CAN_STATE_ERROR_WARNING is handled.
    
    This patch fixes this problem by changing the case to CAN_STATE_ERROR_WARNING.
    
    Signed-off-by: Wu Bo <wubo.oduw@gmail.com>
    Link: http://lore.kernel.org/r/20200129022330.21248-2-wubo.oduw@gmail.com
    Cc: Dan Murphy <dmurphy@ti.com>
    Fixes: e0d1f4816f2a ("can: m_can: add Bosch M_CAN controller support")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b348ba4567fbf22608265776c5831674b5838af6
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Nov 5 11:24:27 2020 +0000

    can: peak_usb: fix potential integer overflow on shift of a int
    
    [ Upstream commit 8a68cc0d690c9e5730d676b764c6f059343b842c ]
    
    The left shift of int 32 bit integer constant 1 is evaluated using 32 bit
    arithmetic and then assigned to a signed 64 bit variable. In the case where
    time_ref->adapter->ts_used_bits is 32 or more this can lead to an oveflow.
    Avoid this by shifting using the BIT_ULL macro instead.
    
    Fixes: bb4785551f64 ("can: usb: PEAK-System Technik USB adapters driver core")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20201105112427.40688-1-colin.king@canonical.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dbcfd73806f8d620ea563ab38c446483c876133
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Wed Aug 28 21:16:55 2019 +0200

    can: mcba_usb: mcba_usb_start_xmit(): first fill skb, then pass to can_put_echo_skb()
    
    [ Upstream commit 81c9c8e0adef3285336b942f93287c554c89e6c6 ]
    
    The driver has to first fill the skb with data and then handle it to
    can_put_echo_skb(). This patch moves the can_put_echo_skb() down, right before
    sending the skb out via USB.
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Cc: Remigiusz Kołłątaj <remigiusz.kollataj@mobica.com>
    Link: https://lore.kernel.org/r/20201111221204.1639007-1-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b0035c50ff05cdfea970647769403789af3822e
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Nov 14 19:17:08 2020 +0800

    can: ti_hecc: Fix memleak in ti_hecc_probe
    
    [ Upstream commit 7968c7c79d3be8987feb8021f0c46e6866831408 ]
    
    In the error handling, we should goto the probe_exit_candev
    to free ndev to prevent memory leak.
    
    Fixes: dabf54dd1c63 ("can: ti_hecc: Convert TI HECC driver to DT only driver")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Link: https://lore.kernel.org/r/20201114111708.3465543-1-zhangqilong3@huawei.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae10d265fe33be84861306cce4f0a790035023bc
Author: Alejandro Concepcion Rodriguez <alejandro@acoro.eu>
Date:   Thu Nov 5 21:51:47 2020 +0000

    can: dev: can_restart(): post buffer from the right context
    
    [ Upstream commit a1e654070a60d5d4f7cce59c38f4ca790bb79121 ]
    
    netif_rx() is meant to be called from interrupt contexts. can_restart() may be
    called by can_restart_work(), which is called from a worqueue, so it may run in
    process context. Use netif_rx_ni() instead.
    
    Fixes: 39549eef3587 ("can: CAN Network device driver and Netlink interface")
    Co-developed-by: Loris Fauster <loris.fauster@ttcontrol.com>
    Signed-off-by: Loris Fauster <loris.fauster@ttcontrol.com>
    Signed-off-by: Alejandro Concepcion Rodriguez <alejandro@acoro.eu>
    Link: https://lore.kernel.org/r/4e84162b-fb31-3a73-fa9a-9438b4bd5234@acoro.eu
    [mkl: use netif_rx_ni() instead of netif_rx_any_context()]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4460c37d43ef482ae5814d805068ebcb27d990e
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Nov 4 03:09:06 2020 +0530

    can: af_can: prevent potential access of uninitialized member in canfd_rcv()
    
    [ Upstream commit 9aa9379d8f868e91719333a7f063ccccc0579acc ]
    
    In canfd_rcv(), cfd->len is uninitialized when skb->len = 0, and this
    uninitialized cfd->len is accessed nonetheless by pr_warn_once().
    
    Fix this uninitialized variable access by checking cfd->len's validity
    condition (cfd->len > CANFD_MAX_DLEN) separately after the skb->len's
    condition is checked, and appropriately modify the log messages that
    are generated as well.
    In case either of the required conditions fail, the skb is freed and
    NET_RX_DROP is returned, same as before.
    
    Fixes: d4689846881d ("can: af_can: canfd_rcv(): replace WARN_ONCE by pr_warn_once")
    Reported-by: syzbot+9bcb0c9409066696d3aa@syzkaller.appspotmail.com
    Tested-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20201103213906.24219-3-anant.thazhemadam@gmail.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce0e67804b8a19bec9582695608a8470a6af330a
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Nov 4 03:09:05 2020 +0530

    can: af_can: prevent potential access of uninitialized member in can_rcv()
    
    [ Upstream commit c8c958a58fc67f353289986850a0edf553435702 ]
    
    In can_rcv(), cfd->len is uninitialized when skb->len = 0, and this
    uninitialized cfd->len is accessed nonetheless by pr_warn_once().
    
    Fix this uninitialized variable access by checking cfd->len's validity
    condition (cfd->len > CAN_MAX_DLEN) separately after the skb->len's
    condition is checked, and appropriately modify the log messages that
    are generated as well.
    In case either of the required conditions fail, the skb is freed and
    NET_RX_DROP is returned, same as before.
    
    Fixes: 8cb68751c115 ("can: af_can: can_rcv(): replace WARN_ONCE by pr_warn_once")
    Reported-by: syzbot+9bcb0c9409066696d3aa@syzkaller.appspotmail.com
    Tested-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20201103213906.24219-2-anant.thazhemadam@gmail.com
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9bf0b7e92e5d3e7001231f72d9193cf96e08888b
Author: Leo Yan <leo.yan@linaro.org>
Date:   Wed Nov 4 17:42:29 2020 +0800

    perf lock: Don't free "lock_seq_stat" if read_count isn't zero
    
    [ Upstream commit b0e5a05cc9e37763c7f19366d94b1a6160c755bc ]
    
    When execute command "perf lock report", it hits failure and outputs log
    as follows:
    
      perf: builtin-lock.c:623: report_lock_release_event: Assertion `!(seq->read_count < 0)' failed.
      Aborted
    
    This is an imbalance issue.  The locking sequence structure
    "lock_seq_stat" contains the reader counter and it is used to check if
    the locking sequence is balance or not between acquiring and releasing.
    
    If the tool wrongly frees "lock_seq_stat" when "read_count" isn't zero,
    the "read_count" will be reset to zero when allocate a new structure at
    the next time; thus it causes the wrong counting for reader and finally
    results in imbalance issue.
    
    To fix this issue, if detects "read_count" is not zero (means still have
    read user in the locking sequence), goto the "end" tag to skip freeing
    structure "lock_seq_stat".
    
    Fixes: e4cef1f65061 ("perf lock: Fix state machine to recognize lock sequence")
    Signed-off-by: Leo Yan <leo.yan@linaro.org>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Link: https://lore.kernel.org/r/20201104094229.17509-2-leo.yan@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bda2f820b7e17709bd1d06d095d89cff26a060d
Author: Fabio Estevam <festevam@gmail.com>
Date:   Thu Nov 5 18:13:20 2020 -0300

    ARM: dts: imx50-evk: Fix the chip select 1 IOMUX
    
    [ Upstream commit 33d0d843872c5ddbe28457a92fc6f2487315fb9f ]
    
    The SPI chip selects are represented as:
    
    cs-gpios = <&gpio4 11 GPIO_ACTIVE_LOW>, <&gpio4 13 GPIO_ACTIVE_LOW>;
    
    , which means that they are used in GPIO function instead of native
    SPI mode.
    
    Fix the IOMUX for the chip select 1 to use GPIO4_13 instead of
    the native CSPI_SSI function.
    
    Fixes: c605cbf5e135 ("ARM: dts: imx: add device tree support for Freescale imx50evk board")
    Signed-off-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 291abfef6249a30cd7be0f86ab72f1308b32d23a
Author: Sergey Matyukevich <geomatsi@gmail.com>
Date:   Sat Oct 24 23:11:20 2020 +0300

    arm: dts: imx6qdl-udoo: fix rgmii phy-mode for ksz9031 phy
    
    [ Upstream commit 7dd8f0ba88fce98e2953267a66af74c6f4792a56 ]
    
    Commit bcf3440c6dd7 ("net: phy: micrel: add phy-mode support for the
    KSZ9031 PHY") fixed micrel phy driver adding proper support for phy
    modes. Adapt imx6q-udoo board phy settings : explicitly set required
    delay configuration using "rgmii-id".
    
    Fixes: cbd54fe0b2bc ("ARM: dts: imx6dl-udoo: Add board support based off imx6q-udoo")
    Signed-off-by: Sergey Matyukevich <geomatsi@gmail.com>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2006742b3d0899ff4ec772450fb8cae7ef9e5c60
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Fri Oct 23 12:44:40 2020 -0700

    MIPS: export has_transparent_hugepage() for modules
    
    [ Upstream commit 31b4d8e172f614adc53ddecb4b6b2f6411a49b84 ]
    
    MIPS should export its local version of "has_transparent_hugepage"
    so that loadable modules (dax) can use it.
    
    Fixes this build error:
    ERROR: modpost: "has_transparent_hugepage" [drivers/dax/dax.ko] undefined!
    
    Fixes: fd8cfd300019 ("arch: fix has_transparent_hugepage()")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: linux-mips@vger.kernel.org
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Vishal Verma <vishal.l.verma@intel.com>
    Cc: Dave Jiang <dave.jiang@intel.com>
    Cc: linux-nvdimm@lists.01.org
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6d33c1c734bd26f00da93fa57c74bc845de5142
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Oct 26 17:10:09 2020 -0700

    Input: adxl34x - clean up a data type in adxl34x_probe()
    
    [ Upstream commit 33b6c39e747c552fa770eecebd1776f1f4a222b1 ]
    
    The "revid" is used to store negative error codes so it should be an int
    type.
    
    Fixes: e27c729219ad ("Input: add driver for ADXL345/346 Digital Accelerometers")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Link: https://lore.kernel.org/r/20201026072824.GA1620546@mwanda
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88f6ec2c95e99ea762c3088a28f9b117915d03e7
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Tue Nov 10 16:49:29 2020 -0800

    vfs: remove lockdep bogosity in __sb_start_write
    
    [ Upstream commit 22843291efc986ce7722610073fcf85a39b4cb13 ]
    
    __sb_start_write has some weird looking lockdep code that claims to
    exist to handle nested freeze locking requests from xfs.  The code as
    written seems broken -- if we think we hold a read lock on any of the
    higher freeze levels (e.g. we hold SB_FREEZE_WRITE and are trying to
    lock SB_FREEZE_PAGEFAULT), it converts a blocking lock attempt into a
    trylock.
    
    However, it's not correct to downgrade a blocking lock attempt to a
    trylock unless the downgrading code or the callers are prepared to deal
    with that situation.  Neither __sb_start_write nor its callers handle
    this at all.  For example:
    
    sb_start_pagefault ignores the return value completely, with the result
    that if xfs_filemap_fault loses a race with a different thread trying to
    fsfreeze, it will proceed without pagefault freeze protection (thereby
    breaking locking rules) and then unlocks the pagefault freeze lock that
    it doesn't own on its way out (thereby corrupting the lock state), which
    leads to a system hang shortly afterwards.
    
    Normally, this won't happen because our ownership of a read lock on a
    higher freeze protection level blocks fsfreeze from grabbing a write
    lock on that higher level.  *However*, if lockdep is offline,
    lock_is_held_type unconditionally returns 1, which means that
    percpu_rwsem_is_held returns 1, which means that __sb_start_write
    unconditionally converts blocking freeze lock attempts into trylocks,
    even when we *don't* hold anything that would block a fsfreeze.
    
    Apparently this all held together until 5.10-rc1, when bugs in lockdep
    caused lockdep to shut itself off early in an fstests run, and once
    fstests gets to the "race writes with freezer" tests, kaboom.  This
    might explain the long trail of vanishingly infrequent livelocks in
    fstests after lockdep goes offline that I've never been able to
    diagnose.
    
    We could fix it by spinning on the trylock if wait==true, but AFAICT the
    locking works fine if lockdep is not built at all (and I didn't see any
    complaints running fstests overnight), so remove this snippet entirely.
    
    NOTE: Commit f4b554af9931 in 2015 created the current weird logic (which
    used to exist in a different form in commit 5accdf82ba25c from 2012) in
    __sb_start_write.  XFS solved this whole problem in the late 2.6 era by
    creating a variant of transactions (XFS_TRANS_NO_WRITECOUNT) that don't
    grab intwrite freeze protection, thus making lockdep's solution
    unnecessary.  The commit claims that Dave Chinner explained that the
    trylock hack + comment could be removed, but nobody ever did.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc4704ae4ae747642591ba1b1be69eb4a8100e36
Author: Will Deacon <will@kernel.org>
Date:   Fri Nov 6 09:57:55 2020 +0000

    arm64: psci: Avoid printing in cpu_psci_cpu_die()
    
    [ Upstream commit 891deb87585017d526b67b59c15d38755b900fea ]
    
    cpu_psci_cpu_die() is called in the context of the dying CPU, which
    will no longer be online or tracked by RCU. It is therefore not generally
    safe to call printk() if the PSCI "cpu off" request fails, so remove the
    pr_crit() invocation.
    
    Cc: Qian Cai <cai@redhat.com>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/20201106103602.9849-2-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab73c0d414e277b3dacf8450549c2b08a0d764b8
Author: Jianqun Xu <jay.xu@rock-chips.com>
Date:   Tue Oct 13 14:37:30 2020 +0800

    pinctrl: rockchip: enable gpio pclk for rockchip_gpio_to_irq
    
    [ Upstream commit 63fbf8013b2f6430754526ef9594f229c7219b1f ]
    
    There need to enable pclk_gpio when do irq_create_mapping, since it will
    do access to gpio controller.
    
    Signed-off-by: Jianqun Xu <jay.xu@rock-chips.com>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Reviewed-by: Kever Yang<kever.yang@rock-chips.com>
    Link: https://lore.kernel.org/r/20201013063731.3618-3-jay.xu@rock-chips.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 566914d3ac8bdb66bcd3f3e214b305f4ee1fc163
Author: Joel Stanley <joel@jms.id.au>
Date:   Tue Nov 17 13:14:48 2020 +1030

    net: ftgmac100: Fix crash when removing driver
    
    [ Upstream commit 3d5179458d22dc0b4fdc724e4bed4231a655112a ]
    
    When removing the driver we would hit BUG_ON(!list_empty(&dev->ptype_specific))
    in net/core/dev.c due to still having the NC-SI packet handler
    registered.
    
     # echo 1e660000.ethernet > /sys/bus/platform/drivers/ftgmac100/unbind
      ------------[ cut here ]------------
      kernel BUG at net/core/dev.c:10254!
      Internal error: Oops - BUG: 0 [#1] SMP ARM
      CPU: 0 PID: 115 Comm: sh Not tainted 5.10.0-rc3-next-20201111-00007-g02e0365710c4 #46
      Hardware name: Generic DT based system
      PC is at netdev_run_todo+0x314/0x394
      LR is at cpumask_next+0x20/0x24
      pc : [<806f5830>]    lr : [<80863cb0>]    psr: 80000153
      sp : 855bbd58  ip : 00000001  fp : 855bbdac
      r10: 80c03d00  r9 : 80c06228  r8 : 81158c54
      r7 : 00000000  r6 : 80c05dec  r5 : 80c05d18  r4 : 813b9280
      r3 : 813b9054  r2 : 8122c470  r1 : 00000002  r0 : 00000002
      Flags: Nzcv  IRQs on  FIQs off  Mode SVC_32  ISA ARM  Segment none
      Control: 00c5387d  Table: 85514008  DAC: 00000051
      Process sh (pid: 115, stack limit = 0x7cb5703d)
     ...
      Backtrace:
      [<806f551c>] (netdev_run_todo) from [<80707eec>] (rtnl_unlock+0x18/0x1c)
       r10:00000051 r9:854ed710 r8:81158c54 r7:80c76bb0 r6:81158c10 r5:8115b410
       r4:813b9000
      [<80707ed4>] (rtnl_unlock) from [<806f5db8>] (unregister_netdev+0x2c/0x30)
      [<806f5d8c>] (unregister_netdev) from [<805a8180>] (ftgmac100_remove+0x20/0xa8)
       r5:8115b410 r4:813b9000
      [<805a8160>] (ftgmac100_remove) from [<805355e4>] (platform_drv_remove+0x34/0x4c)
    
    Fixes: bd466c3fb5a4 ("net/faraday: Support NCSI mode")
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Link: https://lore.kernel.org/r/20201117024448.1170761-1-joel@jms.id.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2304c944970a7133fc94781618f1c9286579b9cc
Author: Ryan Sharpelletti <sharpelletti@google.com>
Date:   Mon Nov 16 17:44:13 2020 +0000

    tcp: only postpone PROBE_RTT if RTT is < current min_rtt estimate
    
    [ Upstream commit 1b9e2a8c99a5c021041bfb2d512dc3ed92a94ffd ]
    
    During loss recovery, retransmitted packets are forced to use TCP
    timestamps to calculate the RTT samples, which have a millisecond
    granularity. BBR is designed using a microsecond granularity. As a
    result, multiple RTT samples could be truncated to the same RTT value
    during loss recovery. This is problematic, as BBR will not enter
    PROBE_RTT if the RTT sample is <= the current min_rtt sample, meaning
    that if there are persistent losses, PROBE_RTT will constantly be
    pushed off and potentially never re-entered. This patch makes sure
    that BBR enters PROBE_RTT by checking if RTT sample is < the current
    min_rtt sample, rather than <=.
    
    The Netflix transport/TCP team discovered this bug in the Linux TCP
    BBR code during lab tests.
    
    Fixes: 0f8782ea1497 ("tcp_bbr: add BBR congestion control")
    Signed-off-by: Ryan Sharpelletti <sharpelletti@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Link: https://lore.kernel.org/r/20201116174412.1433277-1-sharpelletti.kdev@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf572422837590d5dbb05ac781d5ac2a84da1738
Author: Filip Moc <dev@moc6.cz>
Date:   Tue Nov 17 18:36:31 2020 +0100

    net: usb: qmi_wwan: Set DTR quirk for MR400
    
    [ Upstream commit df8d85d8c69d6837817e54dcb73c84a8b5a13877 ]
    
    LTE module MR400 embedded in TL-MR6400 v4 requires DTR to be set.
    
    Signed-off-by: Filip Moc <dev@moc6.cz>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20201117173631.GA550981@moc6.cz
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dcd1b534fe92a844d7fa10c38490dd66fe9df45
Author: Vladyslav Tarasiuk <vladyslavt@nvidia.com>
Date:   Wed Oct 21 11:05:41 2020 +0300

    net/mlx5: Disable QoS when min_rates on all VFs are zero
    
    [ Upstream commit 470b74758260e4abc2508cf1614573c00a00465c ]
    
    Currently when QoS is enabled for VF and any min_rate is configured,
    the driver sets bw_share value to at least 1 and doesn’t allow to set
    it to 0 to make minimal rate unlimited. It means there is always a
    minimal rate configured for every VF, even if user tries to remove it.
    
    In order to make QoS disable possible, check whether all vports have
    configured min_rate = 0. If this is true, set their bw_share to 0 to
    disable min_rate limitations.
    
    Fixes: c9497c98901c ("net/mlx5: Add support for setting VF min rate")
    Signed-off-by: Vladyslav Tarasiuk <vladyslavt@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69a208eaabaea3238e4cd75791bc2aa80e9e34d8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Nov 14 13:22:53 2020 +0800

    sctp: change to hold/put transport for proto_unreach_timer
    
    [ Upstream commit 057a10fa1f73d745c8e69aa54ab147715f5630ae ]
    
    A call trace was found in Hangbin's Codenomicon testing with debug kernel:
    
      [ 2615.981988] ODEBUG: free active (active state 0) object type: timer_list hint: sctp_generate_proto_unreach_event+0x0/0x3a0 [sctp]
      [ 2615.995050] WARNING: CPU: 17 PID: 0 at lib/debugobjects.c:328 debug_print_object+0x199/0x2b0
      [ 2616.095934] RIP: 0010:debug_print_object+0x199/0x2b0
      [ 2616.191533] Call Trace:
      [ 2616.194265]  <IRQ>
      [ 2616.202068]  debug_check_no_obj_freed+0x25e/0x3f0
      [ 2616.207336]  slab_free_freelist_hook+0xeb/0x140
      [ 2616.220971]  kfree+0xd6/0x2c0
      [ 2616.224293]  rcu_do_batch+0x3bd/0xc70
      [ 2616.243096]  rcu_core+0x8b9/0xd00
      [ 2616.256065]  __do_softirq+0x23d/0xacd
      [ 2616.260166]  irq_exit+0x236/0x2a0
      [ 2616.263879]  smp_apic_timer_interrupt+0x18d/0x620
      [ 2616.269138]  apic_timer_interrupt+0xf/0x20
      [ 2616.273711]  </IRQ>
    
    This is because it holds asoc when transport->proto_unreach_timer starts
    and puts asoc when the timer stops, and without holding transport the
    transport could be freed when the timer is still running.
    
    So fix it by holding/putting transport instead for proto_unreach_timer
    in transport, just like other timers in transport.
    
    v1->v2:
      - Also use sctp_transport_put() for the "out_unlock:" path in
        sctp_generate_proto_unreach_event(), as Marcelo noticed.
    
    Fixes: 50b5d6ad6382 ("sctp: Fix a race between ICMP protocol unreachable and connect()")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Link: https://lore.kernel.org/r/102788809b554958b13b95d33440f5448113b8d6.1605331373.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9efd3dd12eadb6cc71807ae9293d9ebe3e746b28
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Nov 13 14:16:26 2020 +0800

    qlcnic: fix error return code in qlcnic_83xx_restart_hw()
    
    [ Upstream commit 3beb9be165083c2964eba1923601c3bfac0b02d4 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 3ced0a88cd4c ("qlcnic: Add support to run firmware POST")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/r/1605248186-16013-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73cbea03d20e84d996a44b427b4a6d5b4b7624cc
Author: Xie He <xie.he.0141@gmail.com>
Date:   Thu Nov 12 02:35:06 2020 -0800

    net: x25: Increase refcnt of "struct x25_neigh" in x25_rx_call_request
    
    [ Upstream commit 4ee18c179e5e815fa5575e0d2db0c05795a804ee ]
    
    The x25_disconnect function in x25_subr.c would decrease the refcount of
    "x25->neighbour" (struct x25_neigh) and reset this pointer to NULL.
    
    However, the x25_rx_call_request function in af_x25.c, which is called
    when we receive a connection request, does not increase the refcount when
    it assigns the pointer.
    
    Fix this issue by increasing the refcount of "struct x25_neigh" in
    x25_rx_call_request.
    
    This patch fixes frequent kernel crashes when using AF_X25 sockets.
    
    Fixes: 4becb7ee5b3d ("net/x25: Fix x25_neigh refcnt leak when x25 disconnect")
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Link: https://lore.kernel.org/r/20201112103506.5875-1-xie.he.0141@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 849200fd7e49b51fe6968e329e746e2a161a272a
Author: Aya Levin <ayal@nvidia.com>
Date:   Wed Nov 18 10:19:22 2020 +0200

    net/mlx4_core: Fix init_hca fields offset
    
    [ Upstream commit 6d9c8d15af0ef20a66a0b432cac0d08319920602 ]
    
    Slave function read the following capabilities from the wrong offset:
    1. log_mc_entry_sz
    2. fs_log_entry_sz
    3. log_mc_hash_sz
    
    Fix that by adjusting these capabilities offset to match firmware
    layout.
    
    Due to the wrong offset read, the following issues might occur:
    1+2. Negative value reported at max_mcast_qp_attach.
    3. Driver to init FW with multicast hash size of zero.
    
    Fixes: a40ded604365 ("net/mlx4_core: Add masking for a few queries on HCA caps")
    Signed-off-by: Aya Levin <ayal@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Eran Ben Elisha <eranbe@nvidia.com>
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Link: https://lore.kernel.org/r/20201118081922.553-1-tariqt@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afe21bf29e96dc355bc92ce6e79aec2a4c7b20f7
Author: Paul Moore <paul@paul-moore.com>
Date:   Fri Nov 13 16:30:40 2020 -0500

    netlabel: fix an uninitialized warning in netlbl_unlabel_staticlist()
    
    [ Upstream commit 1ba86d4366e023d96df3dbe415eea7f1dc08c303 ]
    
    Static checking revealed that a previous fix to
    netlbl_unlabel_staticlist() leaves a stack variable uninitialized,
    this patches fixes that.
    
    Fixes: 866358ec331f ("netlabel: fix our progress tracking in netlbl_unlabel_staticlist()")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Reviewed-by: James Morris <jamorris@linux.microsoft.com>
    Link: https://lore.kernel.org/r/160530304068.15651.18355773009751195447.stgit@sifl
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 430e3668021ca7127d31e919c27d7d51bfcaea84
Author: Paul Moore <paul@paul-moore.com>
Date:   Sun Nov 8 09:08:26 2020 -0500

    netlabel: fix our progress tracking in netlbl_unlabel_staticlist()
    
    [ Upstream commit 866358ec331f8faa394995fb4b511af1db0247c8 ]
    
    The current NetLabel code doesn't correctly keep track of the netlink
    dump state in some cases, in particular when multiple interfaces with
    large configurations are loaded.  The problem manifests itself by not
    reporting the full configuration to userspace, even though it is
    loaded and active in the kernel.  This patch fixes this by ensuring
    that the dump state is properly reset when necessary inside the
    netlbl_unlabel_staticlist() function.
    
    Fixes: 8cc44579d1bd ("NetLabel: Introduce static network labels for unlabeled connections")
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Link: https://lore.kernel.org/r/160484450633.3752.16512718263560813473.stgit@sifl
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1f366e408ec86afecbd14fbac125790a5d41c0f
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Mon Nov 16 19:52:34 2020 -0800

    net: Have netpoll bring-up DSA management interface
    
    [ Upstream commit 1532b9778478577152201adbafa7738b1e844868 ]
    
    DSA network devices rely on having their DSA management interface up and
    running otherwise their ndo_open() will return -ENETDOWN. Without doing
    this it would not be possible to use DSA devices as netconsole when
    configured on the command line. These devices also do not utilize the
    upper/lower linking so the check about the netpoll device having upper
    is not going to be a problem.
    
    The solution adopted here is identical to the one done for
    net/ipv4/ipconfig.c with 728c02089a0e ("net: ipv4: handle DSA enabled
    master network devices"), with the network namespace scope being
    restricted to that of the process configuring netpoll.
    
    Fixes: 04ff53f96a93 ("net: dsa: Add netconsole support")
    Tested-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20201117035236.22658-1-f.fainelli@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 597e6a96f2ca10eae310091c64da8bf7d354792f
Author: Tobias Waldekranz <tobias@waldekranz.com>
Date:   Thu Nov 12 12:43:35 2020 +0100

    net: dsa: mv88e6xxx: Avoid VTU corruption on 6097
    
    [ Upstream commit 92307069a96c07d9b6e74b96b79390e7cd7d2111 ]
    
    As soon as you add the second port to a VLAN, all other port
    membership configuration is overwritten with zeroes. The HW interprets
    this as all ports being "unmodified members" of the VLAN.
    
    In the simple case when all ports belong to the same VLAN, switching
    will still work. But using multiple VLANs or trying to set multiple
    ports as tagged members will not work.
    
    On the 6352, doing a VTU GetNext op, followed by an STU GetNext op
    will leave you with both the member- and state- data in the VTU/STU
    data registers. But on the 6097 (which uses the same implementation),
    the STU GetNext will override the information gathered from the VTU
    GetNext.
    
    Separate the two stages, parsing the result of the VTU GetNext before
    doing the STU GetNext.
    
    We opt to update the existing implementation for all applicable chips,
    as opposed to creating a separate callback for 6097, because although
    the previous implementation did work for (at least) 6352, the
    datasheet does not mention the masking behavior.
    
    Fixes: ef6fcea37f01 ("net: dsa: mv88e6xxx: get STU entry on VTU GetNext")
    Signed-off-by: Tobias Waldekranz <tobias@waldekranz.com>
    Link: https://lore.kernel.org/r/20201112114335.27371-1-tobias@waldekranz.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf1dc152bae8da41d23bf368fc7070d4130d657a
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Fri Nov 13 10:27:27 2020 +0100

    net: bridge: add missing counters to ndo_get_stats64 callback
    
    [ Upstream commit 7a30ecc9237681bb125cbd30eee92bef7e86293d ]
    
    In br_forward.c and br_input.c fields dev->stats.tx_dropped and
    dev->stats.multicast are populated, but they are ignored in
    ndo_get_stats64.
    
    Fixes: 28172739f0a2 ("net: fix 64 bit counters on 32 bit arches")
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/58ea9963-77ad-a7cf-8dfd-fc95ab95f606@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 864268dc0c2b5635d8a1400389bb72b55b21afa0
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Tue Nov 17 11:02:11 2020 +0800

    net: b44: fix error return code in b44_init_one()
    
    [ Upstream commit 7b027c249da54f492699c43e26cba486cfd48035 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 39a6f4bce6b4 ("b44: replace the ssb_dma API with the generic DMA API")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/1605582131-36735-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aeb1839d9592921924d05cb24a050f0e181b1c90
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Tue Nov 17 19:33:52 2020 +0200

    mlxsw: core: Use variable timeout for EMAD retries
    
    [ Upstream commit 1f492eab67bced119a0ac7db75ef2047e29a30c6 ]
    
    The driver sends Ethernet Management Datagram (EMAD) packets to the
    device for configuration purposes and waits for up to 200ms for a reply.
    A request is retried up to 5 times.
    
    When the system is under heavy load, replies are not always processed in
    time and EMAD transactions fail.
    
    Make the process more robust to such delays by using exponential
    backoff. First wait for up to 200ms, then retransmit and wait for up to
    400ms and so on.
    
    Fixes: caf7297e7ab5 ("mlxsw: core: Introduce support for asynchronous EMAD register access")
    Reported-by: Denis Yulevich <denisyu@nvidia.com>
    Tested-by: Denis Yulevich <denisyu@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 776ca64fc0091ecf53c7fd6462395db8bcb259df
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Nov 16 16:20:18 2020 +0800

    inet_diag: Fix error path to cancel the meseage in inet_req_diag_fill()
    
    [ Upstream commit e33de7c5317e2827b2ba6fd120a505e9eb727b05 ]
    
    nlmsg_cancel() needs to be called in the error path of
    inet_req_diag_fill to cancel the message.
    
    Fixes: d545caca827b ("net: inet: diag: expose the socket mark to privileged processes.")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20201116082018.16496-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8e8902a825f0e0ea86890991f77864e8b8330aa
Author: Wang Hai <wanghai38@huawei.com>
Date:   Fri Nov 13 19:16:22 2020 +0800

    devlink: Add missing genlmsg_cancel() in devlink_nl_sb_port_pool_fill()
    
    [ Upstream commit 849920c703392957f94023f77ec89ca6cf119d43 ]
    
    If sb_occ_port_pool_get() failed in devlink_nl_sb_port_pool_fill(),
    msg should be canceled by genlmsg_cancel().
    
    Fixes: df38dafd2559 ("devlink: implement shared buffer occupancy monitoring interface")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20201113111622.11040-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 377666113f92ee32fa12b2a8039ce6b063e33df4
Author: Edwin Peer <edwin.peer@broadcom.com>
Date:   Sun Nov 15 19:27:49 2020 -0500

    bnxt_en: read EEPROM A2h address using page 0
    
    [ Upstream commit 4260330b32b14330cfe427d568ac5f5b29b5be3d ]
    
    The module eeprom address range returned by bnxt_get_module_eeprom()
    should be 256 bytes of A0h address space, the lower half of the A2h
    address space, and page 0 for the upper half of the A2h address space.
    
    Fix the firmware call by passing page_number 0 for the A2h slave address
    space.
    
    Fixes: 42ee18fe4ca2 ("bnxt_en: Add Support for ETHTOOL_GMODULEINFO and ETHTOOL_GMODULEEEPRO")
    Signed-off-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01980a570077b6299b73ba0f0c023386a50c6a69
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Mon Nov 16 17:21:14 2020 +0100

    atm: nicstar: Unmap DMA on send error
    
    [ Upstream commit 6dceaa9f56e22d0f9b4c4ad2ed9e04e315ce7fe5 ]
    
    The `skb' is mapped for DMA in ns_send() but does not unmap DMA in case
    push_scqe() fails to submit the `skb'. The memory of the `skb' is
    released so only the DMA mapping is leaking.
    
    Unmap the DMA mapping in case push_scqe() failed.
    
    Fixes: 864a3ff635fa7 ("atm: [nicstar] remove virt_to_bus() and support 64-bit platforms")
    Cc: Chas Williams <3chas3@gmail.com>
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 250e9b7bb977784996ed0bba6a574801d252c0e7
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Tue Nov 17 10:45:05 2020 +0800

    ah6: fix error return code in ah6_input()
    
    [ Upstream commit a5ebcbdf34b65fcc07f38eaf2d60563b42619a59 ]
    
    Fix to return a negative error code from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/r/1605581105-35295-1-git-send-email-zhangchangzhong@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa3cb8115c2d90eec051ad5dd5fffb9675575564
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Nov 22 10:00:25 2020 +0100

    Linux 4.14.208
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201120104540.414709708@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d09f44063f504094395b4b0f4d6ab409ba7e69d
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Sat Nov 7 00:49:39 2020 -0800

    ACPI: GED: fix -Wformat
    
    commit 9debfb81e7654fe7388a49f45bc4d789b94c1103 upstream.
    
    Clang is more aggressive about -Wformat warnings when the format flag
    specifies a type smaller than the parameter. It turns out that gsi is an
    int. Fixes:
    
    drivers/acpi/evged.c:105:48: warning: format specifies type 'unsigned
    char' but the argument has type 'unsigned int' [-Wformat]
    trigger == ACPI_EDGE_SENSITIVE ? 'E' : 'L', gsi);
                                                ^~~
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/378
    Fixes: ea6f3af4c5e6 ("ACPI: GED: add support for _Exx / _Lxx handler methods")
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c55d3524d87e700f693caa2d606f5ccd2a4c61e5
Author: David Edmondson <david.edmondson@oracle.com>
Date:   Tue Nov 3 12:04:00 2020 +0000

    KVM: x86: clflushopt should be treated as a no-op by emulation
    
    commit 51b958e5aeb1e18c00332e0b37c5d4e95a3eff84 upstream.
    
    The instruction emulator ignores clflush instructions, yet fails to
    support clflushopt. Treat both similarly.
    
    Fixes: 13e457e0eebf ("KVM: x86: Emulator does not decode clflush well")
    Signed-off-by: David Edmondson <david.edmondson@oracle.com>
    Message-Id: <20201103120400.240882-1-david.edmondson@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b07e9060857f45b0cd6353c11fa90eb3a946a57
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Tue Jul 14 14:44:50 2020 +0800

    can: proc: can_remove_proc(): silence remove_proc_entry warning
    
    commit 3accbfdc36130282f5ae9e6eecfdf820169fedce upstream.
    
    If can_init_proc() fail to create /proc/net/can directory, can_remove_proc()
    will trigger a warning:
    
    WARNING: CPU: 6 PID: 7133 at fs/proc/generic.c:672 remove_proc_entry+0x17b0
    Kernel panic - not syncing: panic_on_warn set ...
    
    Fix to return early from can_remove_proc() if can proc_dir does not exists.
    
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Link: https://lore.kernel.org/r/1594709090-3203-1-git-send-email-zhangchangzhong@huawei.com
    Fixes: 8e8cda6d737d ("can: initial support for network namespaces")
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c70733bf8e0911c1322b01cdfac82889a2f91a69
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Oct 9 14:17:11 2020 +0200

    mac80211: always wind down STA state
    
    commit dcd479e10a0510522a5d88b29b8f79ea3467d501 upstream.
    
    When (for example) an IBSS station is pre-moved to AUTHORIZED
    before it's inserted, and then the insertion fails, we don't
    clean up the fast RX/TX states that might already have been
    created, since we don't go through all the state transitions
    again on the way down.
    
    Do that, if it hasn't been done already, when the station is
    freed. I considered only freeing the fast TX/RX state there,
    but we might add more state so it's more robust to wind down
    the state properly.
    
    Note that we warn if the station was ever inserted, it should
    have been properly cleaned up in that case, and the driver
    will probably not like things happening out of order.
    
    Reported-by: syzbot+2e293dbd67de2836ba42@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20201009141710.7223b322a955.I95bd08b9ad0e039c034927cce0b75beea38e059b@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e26db6d7e16a78bc0ab817c3fa48e3d93a6846e2
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Mon Oct 26 13:36:17 2020 -0700

    Input: sunkbd - avoid use-after-free in teardown paths
    
    commit 77e70d351db7de07a46ac49b87a6c3c7a60fca7e upstream.
    
    We need to make sure we cancel the reinit work before we tear down the
    driver structures.
    
    Reported-by: Bodong Zhao <nopitydays@gmail.com>
    Tested-by: Bodong Zhao <nopitydays@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c528c7bdde7d8381da9083f5864dcdef26f2cc0
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Mon Oct 12 08:54:31 2020 +0000

    powerpc/8xx: Always fault when _PAGE_ACCESSED is not set
    
    commit 29daf869cbab69088fe1755d9dd224e99ba78b56 upstream.
    
    The kernel expects pte_young() to work regardless of CONFIG_SWAP.
    
    Make sure a minor fault is taken to set _PAGE_ACCESSED when it
    is not already set, regardless of the selection of CONFIG_SWAP.
    
    This adds at least 3 instructions to the TLB miss exception
    handlers fast path. Following patch will reduce this overhead.
    
    Also update the rotation instruction to the correct number of bits
    to reflect all changes done to _PAGE_ACCESSED over time.
    
    Fixes: d069cb4373fe ("powerpc/8xx: Don't touch ACCESSED when no SWAP.")
    Fixes: 5f356497c384 ("powerpc/8xx: remove unused _PAGE_WRITETHRU")
    Fixes: e0a8e0d90a9f ("powerpc/8xx: Handle PAGE_USER via APG bits")
    Fixes: 5b2753fc3e8a ("powerpc/8xx: Implementation of PAGE_EXEC")
    Fixes: a891c43b97d3 ("powerpc/8xx: Prepare handlers for _PAGE_HUGE for 512k pages.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/af834e8a0f1fa97bfae65664950f0984a70c4750.1602492856.git.christophe.leroy@csgroup.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe06a60a4e9bd769f3b49fbd516771bf20aeabfa
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Tue Sep 8 15:07:49 2020 +0200

    gpio: mockup: fix resource leak in error path
    
    commit 1b02d9e770cd7087f34c743f85ccf5ea8372b047 upstream
    
    If the module init function fails after creating the debugs directory,
    it's never removed. Add proper cleanup calls to avoid this resource
    leak.
    
    Fixes: 9202ba2397d1 ("gpio: mockup: implement event injecting over debugfs")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    [sudip: adjust context]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da6aa18a6863b05791f14f42ab6d1e5258c2c0dd
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sun Sep 20 23:12:38 2020 +0200

    i2c: imx: Fix external abort on interrupt in exit paths
    
    commit e50e4f0b85be308a01b830c5fbdffc657e1a6dd0 upstream
    
    If interrupt comes late, during probe error path or device remove (could
    be triggered with CONFIG_DEBUG_SHIRQ), the interrupt handler
    i2c_imx_isr() will access registers with the clock being disabled.  This
    leads to external abort on non-linefetch on Toradex Colibri VF50 module
    (with Vybrid VF5xx):
    
        Unhandled fault: external abort on non-linefetch (0x1008) at 0x8882d003
        Internal error: : 1008 [#1] ARM
        Modules linked in:
        CPU: 0 PID: 1 Comm: swapper Not tainted 5.7.0 #607
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
          (i2c_imx_isr) from [<8017009c>] (free_irq+0x25c/0x3b0)
          (free_irq) from [<805844ec>] (release_nodes+0x178/0x284)
          (release_nodes) from [<80580030>] (really_probe+0x10c/0x348)
          (really_probe) from [<80580380>] (driver_probe_device+0x60/0x170)
          (driver_probe_device) from [<80580630>] (device_driver_attach+0x58/0x60)
          (device_driver_attach) from [<805806bc>] (__driver_attach+0x84/0xc0)
          (__driver_attach) from [<8057e228>] (bus_for_each_dev+0x68/0xb4)
          (bus_for_each_dev) from [<8057f3ec>] (bus_add_driver+0x144/0x1ec)
          (bus_add_driver) from [<80581320>] (driver_register+0x78/0x110)
          (driver_register) from [<8010213c>] (do_one_initcall+0xa8/0x2f4)
          (do_one_initcall) from [<80c0100c>] (kernel_init_freeable+0x178/0x1dc)
          (kernel_init_freeable) from [<80807048>] (kernel_init+0x8/0x110)
          (kernel_init) from [<80100114>] (ret_from_fork+0x14/0x20)
    
    Additionally, the i2c_imx_isr() could wake up the wait queue
    (imx_i2c_struct->queue) before its initialization happens.
    
    The resource-managed framework should not be used for interrupt handling,
    because the resource will be released too late - after disabling clocks.
    The interrupt handler is not prepared for such case.
    
    Fixes: 1c4b6c3bcf30 ("i2c: imx: implement bus recovery")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c50648a22f453c131af2263e397ff371158a5a7
Author: Lucas Stach <l.stach@pengutronix.de>
Date:   Thu Mar 8 14:25:17 2018 +0100

    i2c: imx: use clk notifier for rate changes
    
    commit 90ad2cbe88c22d0215225ab9594eeead0eb24fde upstream
    
    Instead of repeatedly calling clk_get_rate for each transfer, register
    a clock notifier to update the cached divider value each time the clock
    rate actually changes.
    
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>
    Reviewed-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ead8656edb2e8eb74993d5eff349cc8c4f5c03b4
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:52:44 2020 +1100

    powerpc/64s: flush L1D after user accesses
    
    commit 9a32a7e78bd0cd9a9b6332cbdc345ee5ffd0c5de upstream.
    
    IBM Power9 processors can speculatively operate on data in the L1 cache before
    it has been completely validated, via a way-prediction mechanism. It is not possible
    for an attacker to determine the contents of impermissible memory using this method,
    since these systems implement a combination of hardware and software security measures
    to prevent scenarios where protected data could be leaked.
    
    However these measures don't address the scenario where an attacker induces
    the operating system to speculatively execute instructions using data that the
    attacker controls. This can be used for example to speculatively bypass "kernel
    user access prevention" techniques, as discovered by Anthony Steinhauser of
    Google's Safeside Project. This is not an attack by itself, but there is a possibility
    it could be used in conjunction with side-channels or other weaknesses in the
    privileged code to construct an attack.
    
    This issue can be mitigated by flushing the L1 cache between privilege boundaries
    of concern. This patch flushes the L1 cache after user accesses.
    
    This is part of the fix for CVE-2020-4788.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a80e5d5c0f7a15700a4f5f657cdedc69d14d2da3
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:52:43 2020 +1100

    powerpc/uaccess: Evaluate macro arguments once, before user access is allowed
    
    commit d02f6b7dab8228487268298ea1f21081c0b4b3eb upstream.
    
    get/put_user() can be called with nontrivial arguments. fs/proc/page.c
    has a good example:
    
        if (put_user(stable_page_flags(ppage), out)) {
    
    stable_page_flags() is quite a lot of code, including spin locks in
    the page allocator.
    
    Ensure these arguments are evaluated before user access is allowed.
    
    This improves security by reducing code with access to userspace, but
    it also fixes a PREEMPT bug with KUAP on powerpc/64s:
    stable_page_flags() is currently called with AMR set to allow writes,
    it ends up calling spin_unlock(), which can call preempt_schedule. But
    the task switch code can not be called with AMR set (it relies on
    interrupts saving the register), so this blows up.
    
    It's fine if the code inside allow_user_access() is preemptible,
    because a timer or IPI will save the AMR, but it's not okay to
    explicitly cause a reschedule.
    
    Fixes: de78a9c42a79 ("powerpc: Add a framework for Kernel Userspace Access Protection")
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200407041245.600651-1-npiggin@gmail.com
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebafba3ed9db06ec19f1622751a8a97b55ab0bd3
Author: Andrew Donnellan <ajd@linux.ibm.com>
Date:   Fri Nov 20 10:52:42 2020 +1100

    powerpc: Fix __clear_user() with KUAP enabled
    
    commit 61e3acd8c693a14fc69b824cb5b08d02cb90a6e7 upstream.
    
    The KUAP implementation adds calls in clear_user() to enable and
    disable access to userspace memory. However, it doesn't add these to
    __clear_user(), which is used in the ptrace regset code.
    
    As there's only one direct user of __clear_user() (the regset code),
    and the time taken to set the AMR for KUAP purposes is going to
    dominate the cost of a quick access_ok(), there's not much point
    having a separate path.
    
    Rename __clear_user() to __arch_clear_user(), and make __clear_user()
    just call clear_user().
    
    Reported-by: syzbot+f25ecf4b2982d8c7a640@syzkaller-ppc64.appspotmail.com
    Reported-by: Daniel Axtens <dja@axtens.net>
    Suggested-by: Michael Ellerman <mpe@ellerman.id.au>
    Fixes: de78a9c42a79 ("powerpc: Add a framework for Kernel Userspace Access Protection")
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    [mpe: Use __arch_clear_user() for the asm version like arm64 & nds32]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191209132221.15328-1-ajd@linux.ibm.com
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f87cf0df227fa404e8d7585b3df516ab56a4bf2
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Nov 20 10:52:41 2020 +1100

    powerpc: Implement user_access_begin and friends
    
    commit 5cd623333e7cf4e3a334c70529268b65f2a6c2c7 upstream.
    
    Today, when a function like strncpy_from_user() is called,
    the userspace access protection is de-activated and re-activated
    for every word read.
    
    By implementing user_access_begin and friends, the protection
    is de-activated at the beginning of the copy and re-activated at the
    end.
    
    Implement user_access_begin(), user_access_end() and
    unsafe_get_user(), unsafe_put_user() and unsafe_copy_to_user()
    
    For the time being, we keep user_access_save() and
    user_access_restore() as nops.
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/36d4fbf9e56a75994aca4ee2214c77b26a5a8d35.1579866752.git.christophe.leroy@c-s.fr
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44abd5cf91fdbaf1797f04d745bb69e939318f7c
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Fri Nov 20 10:52:40 2020 +1100

    powerpc: Add a framework for user access tracking
    
    Backported from commit de78a9c42a79 ("powerpc: Add a framework
    for Kernel Userspace Access Protection"). Here we don't try to
    add the KUAP framework, we just want the helper functions
    because we want to put uaccess flush helpers in them.
    
    In terms of fixes, we don't need commit 1d8f739b07bd ("powerpc/kuap:
    Fix set direction in allow/prevent_user_access()") as we don't have
    real KUAP. Likewise as all our allows are noops and all our prevents
    are just flushes, we don't need commit 9dc086f1e9ef ("powerpc/futex:
    Fix incorrect user access blocking") The other 2 fixes we do need.
    
    The original description is:
    
    This patch implements a framework for Kernel Userspace Access
    Protection.
    
    Then subarches will have the possibility to provide their own
    implementation by providing setup_kuap() and
    allow/prevent_user_access().
    
    Some platforms will need to know the area accessed and whether it is
    accessed from read, write or both. Therefore source, destination and
    size and handed over to the two functions.
    
    mpe: Rename to allow/prevent rather than unlock/lock, and add
    read/write wrappers. Drop the 32-bit code for now until we have an
    implementation for it. Add kuap to pt_regs for 64-bit as well as
    32-bit. Don't split strings, use pr_crit_ratelimited().
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Signed-off-by: Russell Currey <ruscur@russell.cc>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41d9f029403e66027f0562944b9a3e27d284d0a9
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri Nov 20 10:52:39 2020 +1100

    powerpc/64s: flush L1D on kernel entry
    
    commit f79643787e0a0762d2409b7b8334e83f22d85695 upstream.
    
    IBM Power9 processors can speculatively operate on data in the L1 cache before
    it has been completely validated, via a way-prediction mechanism. It is not possible
    for an attacker to determine the contents of impermissible memory using this method,
    since these systems implement a combination of hardware and software security measures
    to prevent scenarios where protected data could be leaked.
    
    However these measures don't address the scenario where an attacker induces
    the operating system to speculatively execute instructions using data that the
    attacker controls. This can be used for example to speculatively bypass "kernel
    user access prevention" techniques, as discovered by Anthony Steinhauser of
    Google's Safeside Project. This is not an attack by itself, but there is a possibility
    it could be used in conjunction with side-channels or other weaknesses in the
    privileged code to construct an attack.
    
    This issue can be mitigated by flushing the L1 cache between privilege boundaries
    of concern. This patch flushes the L1 cache on kernel entry.
    
    This is part of the fix for CVE-2020-4788.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 976629a4a32d8825b977bbdae27bf7ea682883c3
Author: Daniel Axtens <dja@axtens.net>
Date:   Fri Nov 20 10:52:38 2020 +1100

    powerpc/64s: move some exception handlers out of line
    
    (backport only)
    
    We're about to grow the exception handlers, which will make a bunch of them
    no longer fit within the space available. We move them out of line.
    
    This is a fiddly and error-prone business, so in the interests of reviewability
    I haven't merged this in with the addition of the entry flush.
    
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a14c9d575d4d97b962cafc04b2f198d01b4b6346
Author: Daniel Axtens <dja@axtens.net>
Date:   Fri Nov 20 10:52:37 2020 +1100

    powerpc/64s: Define MASKABLE_RELON_EXCEPTION_PSERIES_OOL
    
    Commit da2bc4644c75 ("powerpc/64s: Add new exception vector macros")
    adds:
    
    +#define __TRAMP_REAL_VIRT_OOL_MASKABLE(name, realvec)          \
    +       TRAMP_REAL_BEGIN(tramp_virt_##name);                            \
    +       MASKABLE_RELON_EXCEPTION_PSERIES_OOL(realvec, name##_common);   \
    
    However there's no reference there or anywhere else to
    MASKABLE_RELON_EXCEPTION_PSERIES_OOL and an attempt to use it
    unsurprisingly doesn't work.
    
    Add a definition provided by mpe.
    
    Fixes: da2bc4644c75 ("powerpc/64s: Add new exception vector macros")
    Signed-off-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07b6de003e2c9c860f8305eef39e80c67b509225
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 18 18:28:03 2020 +0100

    Linux 4.14.207
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201117122111.018425544@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9625977df17b23c591d2ae62fa6f139a762223a
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon Sep 14 14:52:16 2020 +1000

    mm: fix exec activate_mm vs TLB shootdown and lazy tlb switching race
    
    commit d53c3dfb23c45f7d4f910c3a3ca84bf0a99c6143 upstream.
    
    Reading and modifying current->mm and current->active_mm and switching
    mm should be done with irqs off, to prevent races seeing an intermediate
    state.
    
    This is similar to commit 38cf307c1f20 ("mm: fix kthread_use_mm() vs TLB
    invalidate"). At exec-time when the new mm is activated, the old one
    should usually be single-threaded and no longer used, unless something
    else is holding an mm_users reference (which may be possible).
    
    Absent other mm_users, there is also a race with preemption and lazy tlb
    switching. Consider the kernel_execve case where the current thread is
    using a lazy tlb active mm:
    
      call_usermodehelper()
        kernel_execve()
          old_mm = current->mm;
          active_mm = current->active_mm;
          *** preempt *** -------------------->  schedule()
                                                   prev->active_mm = NULL;
                                                   mmdrop(prev active_mm);
                                                 ...
                          <--------------------  schedule()
          current->mm = mm;
          current->active_mm = mm;
          if (!old_mm)
              mmdrop(active_mm);
    
    If we switch back to the kernel thread from a different mm, there is a
    double free of the old active_mm, and a missing free of the new one.
    
    Closing this race only requires interrupts to be disabled while ->mm
    and ->active_mm are being switched, but the TLB problem requires also
    holding interrupts off over activate_mm. Unfortunately not all archs
    can do that yet, e.g., arm defers the switch if irqs are disabled and
    expects finish_arch_post_lock_switch() to be called to complete the
    flush; um takes a blocking lock in activate_mm().
    
    So as a first step, disable interrupts across the mm/active_mm updates
    to close the lazy tlb preempt race, and provide an arch option to
    extend that to activate_mm which allows architectures doing IPI based
    TLB shootdowns to close the second race.
    
    This is a bit ugly, but in the interest of fixing the bug and backporting
    before all architectures are converted this is a compromise.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    [mpe: Manual backport to 4.19 due to membarrier_exec_mmap(mm) changes]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200914045219.3736466-2-npiggin@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6095dad95fc4aea68f1272fb54d2b0574e0adb6f
Author: Boris Protopopov <pboris@amazon.com>
Date:   Thu Sep 24 00:36:38 2020 +0000

    Convert trailing spaces and periods in path components
    
    commit 57c176074057531b249cf522d90c22313fa74b0b upstream.
    
    When converting trailing spaces and periods in paths, do so
    for every component of the path, not just the last component.
    If the conversion is not done for every path component, then
    subsequent operations in directories with trailing spaces or
    periods (e.g. create(), mkdir()) will fail with ENOENT. This
    is because on the server, the directory will have a special
    symbol in its name, and the client needs to provide the same.
    
    Signed-off-by: Boris Protopopov <pboris@amazon.com>
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f21cafd417ad3464c41cca3dcb09087afa334c
Author: Matteo Croce <mcroce@microsoft.com>
Date:   Fri Nov 13 22:52:07 2020 -0800

    reboot: fix overflow parsing reboot cpu number
    
    commit df5b0ab3e08a156701b537809914b339b0daa526 upstream.
    
    Limit the CPU number to num_possible_cpus(), because setting it to a
    value lower than INT_MAX but higher than NR_CPUS produces the following
    error on reboot and shutdown:
    
        BUG: unable to handle page fault for address: ffffffff90ab1bb0
        #PF: supervisor read access in kernel mode
        #PF: error_code(0x0000) - not-present page
        PGD 1c09067 P4D 1c09067 PUD 1c0a063 PMD 0
        Oops: 0000 [#1] SMP
        CPU: 1 PID: 1 Comm: systemd-shutdow Not tainted 5.9.0-rc8-kvm #110
        Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
        RIP: 0010:migrate_to_reboot_cpu+0xe/0x60
        Code: ea ea 00 48 89 fa 48 c7 c7 30 57 f1 81 e9 fa ef ff ff 66 2e 0f 1f 84 00 00 00 00 00 53 8b 1d d5 ea ea 00 e8 14 33 fe ff 89 da <48> 0f a3 15 ea fc bd 00 48 89 d0 73 29 89 c2 c1 e8 06 65 48 8b 3c
        RSP: 0018:ffffc90000013e08 EFLAGS: 00010246
        RAX: ffff88801f0a0000 RBX: 0000000077359400 RCX: 0000000000000000
        RDX: 0000000077359400 RSI: 0000000000000002 RDI: ffffffff81c199e0
        RBP: ffffffff81c1e3c0 R08: ffff88801f41f000 R09: ffffffff81c1e348
        R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
        R13: 00007f32bedf8830 R14: 00000000fee1dead R15: 0000000000000000
        FS:  00007f32bedf8980(0000) GS:ffff88801f480000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: ffffffff90ab1bb0 CR3: 000000001d057000 CR4: 00000000000006a0
        DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
        DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
        Call Trace:
          __do_sys_reboot.cold+0x34/0x5b
          do_syscall_64+0x2d/0x40
    
    Fixes: 1b3a5d02ee07 ("reboot: move arch/x86 reboot= handling to generic kernel")
    Signed-off-by: Matteo Croce <mcroce@microsoft.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Fabian Frederick <fabf@skynet.be>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Robin Holt <robinmholt@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201103214025.116799-3-mcroce@linux.microsoft.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [sudip: use reboot_mode instead of mode]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae85ecfc7663e52971a88e91016997e768adf605
Author: Matteo Croce <mcroce@microsoft.com>
Date:   Fri Nov 13 22:52:02 2020 -0800

    Revert "kernel/reboot.c: convert simple_strtoul to kstrtoint"
    
    commit 8b92c4ff4423aa9900cf838d3294fcade4dbda35 upstream.
    
    Patch series "fix parsing of reboot= cmdline", v3.
    
    The parsing of the reboot= cmdline has two major errors:
    
     - a missing bound check can crash the system on reboot
    
     - parsing of the cpu number only works if specified last
    
    Fix both.
    
    This patch (of 2):
    
    This reverts commit 616feab753972b97.
    
    kstrtoint() and simple_strtoul() have a subtle difference which makes
    them non interchangeable: if a non digit character is found amid the
    parsing, the former will return an error, while the latter will just
    stop parsing, e.g.  simple_strtoul("123xyx") = 123.
    
    The kernel cmdline reboot= argument allows to specify the CPU used for
    rebooting, with the syntax `s####` among the other flags, e.g.
    "reboot=warm,s31,force", so if this flag is not the last given, it's
    silently ignored as well as the subsequent ones.
    
    Fixes: 616feab75397 ("kernel/reboot.c: convert simple_strtoul to kstrtoint")
    Signed-off-by: Matteo Croce <mcroce@microsoft.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Cc: Petr Mladek <pmladek@suse.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Pavel Tatashin <pasha.tatashin@soleen.com>
    Cc: Robin Holt <robinmholt@gmail.com>
    Cc: Fabian Frederick <fabf@skynet.be>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201103214025.116799-2-mcroce@linux.microsoft.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [sudip: use reboot_mode instead of mode]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d0d764907afe84fb0c0f3aaf93b53d6f8634797
Author: Jiri Olsa <jolsa@redhat.com>
Date:   Wed Sep 16 13:53:11 2020 +0200

    perf/core: Fix race in the perf_mmap_close() function
    
    commit f91072ed1b7283b13ca57fcfbece5a3b92726143 upstream.
    
    There's a possible race in perf_mmap_close() when checking ring buffer's
    mmap_count refcount value. The problem is that the mmap_count check is
    not atomic because we call atomic_dec() and atomic_read() separately.
    
      perf_mmap_close:
      ...
       atomic_dec(&rb->mmap_count);
       ...
       if (atomic_read(&rb->mmap_count))
          goto out_put;
    
       <ring buffer detach>
       free_uid
    
    out_put:
      ring_buffer_put(rb); /* could be last */
    
    The race can happen when we have two (or more) events sharing same ring
    buffer and they go through atomic_dec() and then they both see 0 as refcount
    value later in atomic_read(). Then both will go on and execute code which
    is meant to be run just once.
    
    The code that detaches ring buffer is probably fine to be executed more
    than once, but the problem is in calling free_uid(), which will later on
    demonstrate in related crashes and refcount warnings, like:
    
      refcount_t: addition on 0; use-after-free.
      ...
      RIP: 0010:refcount_warn_saturate+0x6d/0xf
      ...
      Call Trace:
      prepare_creds+0x190/0x1e0
      copy_creds+0x35/0x172
      copy_process+0x471/0x1a80
      _do_fork+0x83/0x3a0
      __do_sys_wait4+0x83/0x90
      __do_sys_clone+0x85/0xa0
      do_syscall_64+0x5b/0x1e0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Using atomic decrease and check instead of separated calls.
    
    Tested-by: Michael Petlan <mpetlan@redhat.com>
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Acked-by: Wade Mealing <wmealing@redhat.com>
    Fixes: 9bb5d40cd93c ("perf: Fix mmap() accounting hole");
    Link: https://lore.kernel.org/r/20200916115311.GE2301783@krava
    [sudip: used ring_buffer]
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89ccb4f5fdb66deeb381711d3536681abded16db
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:11 2020 +0100

    xen/events: block rogue events for some time
    
    commit 5f7f77400ab5b357b5fdb7122c3442239672186c upstream.
    
    In order to avoid high dom0 load due to rogue guests sending events at
    high frequency, block those events in case there was no action needed
    in dom0 to handle the events.
    
    This is done by adding a per-event counter, which set to zero in case
    an EOI without the XEN_EOI_FLAG_SPURIOUS is received from a backend
    driver, and incremented when this flag has been set. In case the
    counter is 2 or higher delay the EOI by 1 << (cnt - 2) jiffies, but
    not more than 1 second.
    
    In order not to waste memory shorten the per-event refcnt to two bytes
    (it should normally never exceed a value of 2). Add an overflow check
    to evtchn_get() to make sure the 2 bytes really won't overflow.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4edfddcea50f4c6c0863b1a4e849948e479a9d7c
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:10 2020 +0100

    xen/events: defer eoi in case of excessive number of events
    
    commit e99502f76271d6bc4e374fe368c50c67a1fd3070 upstream.
    
    In case rogue guests are sending events at high frequency it might
    happen that xen_evtchn_do_upcall() won't stop processing events in
    dom0. As this is done in irq handling a crash might be the result.
    
    In order to avoid that, delay further inter-domain events after some
    time in xen_evtchn_do_upcall() by forcing eoi processing into a
    worker on the same cpu, thus inhibiting new events coming in.
    
    The time after which eoi processing is to be delayed is configurable
    via a new module parameter "event_loop_timeout" which specifies the
    maximum event loop time in jiffies (default: 2, the value was chosen
    after some tests showing that a value of 2 was the lowest with an
    only slight drop of dom0 network throughput while multiple guests
    performed an event storm).
    
    How long eoi processing will be delayed can be specified via another
    parameter "event_eoi_delay" (again in jiffies, default 10, again the
    value was chosen after testing with different delay values).
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a2ba15525aa8fccae7f21e92a81197286445dc5
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:09 2020 +0100

    xen/events: use a common cpu hotplug hook for event channels
    
    commit 7beb290caa2adb0a399e735a1e175db9aae0523a upstream.
    
    Today only fifo event channels have a cpu hotplug callback. In order
    to prepare for more percpu (de)init work move that callback into
    events_base.c and add percpu_init() and percpu_deinit() hooks to
    struct evtchn_ops.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc2b434d239edb32bcf2326a5120321d08c55a07
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:08 2020 +0100

    xen/events: switch user event channels to lateeoi model
    
    commit c44b849cee8c3ac587da3b0980e01f77500d158c upstream.
    
    Instead of disabling the irq when an event is received and enabling
    it again when handled by the user process use the lateeoi model.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2f1345612259b044c76ce23015362f8f82206c7
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:07 2020 +0100

    xen/pciback: use lateeoi irq binding
    
    commit c2711441bc961b37bba0615dd7135857d189035f upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving pcifront use the lateeoi irq
    binding for pciback and unmask the event channel only just before
    leaving the event handling function.
    
    Restructure the handling to support that scheme. Basically an event can
    come in for two reasons: either a normal request for a pciback action,
    which is handled in a worker, or in case the guest has finished an AER
    request which was requested by pciback.
    
    When an AER request is issued to the guest and a normal pciback action
    is currently active issue an EOI early in order to be able to receive
    another event when the AER request has been finished by the guest.
    
    Let the worker processing the normal requests run until no further
    request is pending, instead of starting a new worker ion that case.
    Issue the EOI only just before leaving the worker.
    
    This scheme allows to drop calling the generic function
    xen_pcibk_test_and_schedule_op() after processing of any request as
    the handling of both request types is now separated more cleanly.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d94d5ffab0403d0998c8ff2697be0cf554e34975
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:06 2020 +0100

    xen/pvcallsback: use lateeoi irq binding
    
    commit c8d647a326f06a39a8e5f0f1af946eacfa1835f8 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving pvcallsfront use the lateeoi
    irq binding for pvcallsback and unmask the event channel only after
    handling all write requests, which are the ones coming in via an irq.
    
    This requires modifying the logic a little bit to not require an event
    for each write request, but to keep the ioworker running until no
    further data is found on the ring page to be processed.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41c1bd3da96d4bfd587fa0c9f6381f5b755f305c
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:05 2020 +0100

    xen/scsiback: use lateeoi irq binding
    
    commit 86991b6e7ea6c613b7692f65106076943449b6b7 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving scsifront use the lateeoi
    irq binding for scsiback and unmask the event channel only just before
    leaving the event handling function.
    
    In case of a ring protocol error don't issue an EOI in order to avoid
    the possibility to use that for producing an event storm. This at once
    will result in no further call of scsiback_irq_fn(), so the ring_error
    struct member can be dropped and scsiback_do_cmd_fn() can signal the
    protocol error via a negative return value.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9d8a6a1a5e70246b5e79fed9bbd99ed15d66c8e
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:04 2020 +0100

    xen/netback: use lateeoi irq binding
    
    commit 23025393dbeb3b8b3b60ebfa724cdae384992e27 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving netfront use the lateeoi
    irq binding for netback and unmask the event channel only just before
    going to sleep waiting for new events.
    
    Make sure not to issue an EOI when none is pending by introducing an
    eoi_pending element to struct xenvif_queue.
    
    When no request has been consumed set the spurious flag when sending
    the EOI for an interrupt.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ffd882416c1440076f4a9cabdf877aac158062bd
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:03 2020 +0100

    xen/blkback: use lateeoi irq binding
    
    commit 01263a1fabe30b4d542f34c7e2364a22587ddaf2 upstream.
    
    In order to reduce the chance for the system becoming unresponsive due
    to event storms triggered by a misbehaving blkfront use the lateeoi
    irq binding for blkback and unmask the event channel only after
    processing all pending requests.
    
    As the thread processing requests is used to do purging work in regular
    intervals an EOI may be sent only after having received an event. If
    there was no pending I/O request flag the EOI as spurious.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b476810c1084698f0db6d7fdac6ef64cf144488
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:02 2020 +0100

    xen/events: add a new "late EOI" evtchn framework
    
    commit 54c9de89895e0a36047fcc4ae754ea5b8655fb9d upstream.
    
    In order to avoid tight event channel related IRQ loops add a new
    framework of "late EOI" handling: the IRQ the event channel is bound
    to will be masked until the event has been handled and the related
    driver is capable to handle another event. The driver is responsible
    for unmasking the event channel via the new function xen_irq_lateeoi().
    
    This is similar to binding an event channel to a threaded IRQ, but
    without having to structure the driver accordingly.
    
    In order to support a future special handling in case a rogue guest
    is sending lots of unsolicited events, add a flag to xen_irq_lateeoi()
    which can be set by the caller to indicate the event was a spurious
    one.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Reported-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 175f84c83888ff02d33be6aba775d506c5df9e68
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:01 2020 +0100

    xen/events: fix race in evtchn_fifo_unmask()
    
    commit f01337197419b7e8a492e83089552b77d3b5fb90 upstream.
    
    Unmasking a fifo event channel can result in unmasking it twice, once
    directly in the kernel and once via a hypercall in case the event was
    pending.
    
    Fix that by doing the local unmask only if the event is not pending.
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ef31096af926a3aab06b20282c7ae6d22557a9d
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:29:00 2020 +0100

    xen/events: add a proper barrier to 2-level uevent unmasking
    
    commit 4d3fe31bd993ef504350989786858aefdb877daa upstream.
    
    A follow-up patch will require certain write to happen before an event
    channel is unmasked.
    
    While the memory barrier is not strictly necessary for all the callers,
    the main one will need it. In order to avoid an extra memory barrier
    when using fifo event channels, mandate evtchn_unmask() to provide
    write ordering.
    
    The 2-level event handling unmask operation is missing an appropriate
    barrier, so add it. Fifo event channels are fine in this regard due to
    using sync_cmpxchg().
    
    This is part of XSA-332.
    
    Cc: stable@vger.kernel.org
    Suggested-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <jgrall@amazon.com>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 303578d2ede7bb6a18da9c599e4f7ed009cf9e94
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Nov 3 15:28:59 2020 +0100

    xen/events: avoid removing an event channel while handling it
    
    commit 073d0552ead5bfc7a3a9c01de590e924f11b5dd2 upstream.
    
    Today it can happen that an event channel is being removed from the
    system while the event handling loop is active. This can lead to a
    race resulting in crashes or WARN() splats when trying to access the
    irq_info structure related to the event channel.
    
    Fix this problem by using a rwlock taken as reader in the event
    handling loop and as writer when deallocating the irq_info structure.
    
    As the observed problem was a NULL dereference in evtchn_from_irq()
    make this function more robust against races by testing the irq_info
    pointer to be not NULL before dereferencing it.
    
    And finally make all accesses to evtchn_to_irq[row][col] atomic ones
    in order to avoid seeing partial updates of an array element in irq
    handling. Note that irq handling can be entered only for event channels
    which have been valid before, so any not populated row isn't a problem
    in this regard, as rows are only ever added and never removed.
    
    This is XSA-331.
    
    Cc: stable@vger.kernel.org
    Reported-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
    Reported-by: Jinoh Kang <luke1337@theori.io>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Reviewed-by: Wei Liu <wl@xen.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46fc4c537f50030f2540d8a33db502fdd1e77c4a
Author: kiyin(尹亮) <kiyin@tencent.com>
Date:   Wed Nov 4 08:23:22 2020 +0300

    perf/core: Fix a memory leak in perf_event_parse_addr_filter()
    
    commit 7bdb157cdebbf95a1cd94ed2e01b338714075d00 upstream
    
    As shown through runtime testing, the "filename" allocation is not
    always freed in perf_event_parse_addr_filter().
    
    There are three possible ways that this could happen:
    
     - It could be allocated twice on subsequent iterations through the loop,
     - or leaked on the success path,
     - or on the failure path.
    
    Clean up the code flow to make it obvious that 'filename' is always
    freed in the reallocation path and in the two return paths as well.
    
    We rely on the fact that kfree(NULL) is NOP and filename is initialized
    with NULL.
    
    This fixes the leak. No other side effects expected.
    
    [ Dan Carpenter: cleaned up the code flow & added a changelog. ]
    [ Ingo Molnar: updated the changelog some more. ]
    
    Fixes: 375637bc5249 ("perf/core: Introduce address range filtering")
    Signed-off-by: "kiyin(尹亮)" <kiyin@tencent.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: "Srivatsa S. Bhat" <srivatsa@csail.mit.edu>
    Cc: Anthony Liguori <aliguori@amazon.com>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da8dfbdba527962a6ced4f842a6b191175bd7a49
Author: Mathieu Poirier <mathieu.poirier@linaro.org>
Date:   Mon Jul 16 17:13:51 2018 -0600

    perf/core: Fix crash when using HW tracing kernel filters
    
    commit 7f635ff187ab6be0b350b3ec06791e376af238ab upstream
    
    In function perf_event_parse_addr_filter(), the path::dentry of each struct
    perf_addr_filter is left unassigned (as it should be) when the pattern
    being parsed is related to kernel space.  But in function
    perf_addr_filter_match() the same dentries are given to d_inode() where
    the value is not expected to be NULL, resulting in the following splat:
    
      Unable to handle kernel NULL pointer dereference at virtual address 0000000000000058
      pc : perf_event_mmap+0x2fc/0x5a0
      lr : perf_event_mmap+0x2c8/0x5a0
      Process uname (pid: 2860, stack limit = 0x000000001cbcca37)
      Call trace:
       perf_event_mmap+0x2fc/0x5a0
       mmap_region+0x124/0x570
       do_mmap+0x344/0x4f8
       vm_mmap_pgoff+0xe4/0x110
       vm_mmap+0x2c/0x40
       elf_map+0x60/0x108
       load_elf_binary+0x450/0x12c4
       search_binary_handler+0x90/0x290
       __do_execve_file.isra.13+0x6e4/0x858
       sys_execve+0x3c/0x50
       el0_svc_naked+0x30/0x34
    
    This patch is fixing the problem by introducing a new check in function
    perf_addr_filter_match() to see if the filter's dentry is NULL.
    
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Cc: acme@kernel.org
    Cc: miklos@szeredi.hu
    Cc: namhyung@kernel.org
    Cc: songliubraving@fb.com
    Fixes: 9511bce9fe8e ("perf/core: Fix bad use of igrab()")
    Link: http://lkml.kernel.org/r/1531782831-1186-1-git-send-email-mathieu.poirier@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a75c702eb6f92154418666df3be88437f0118ae
Author: Song Liu <songliubraving@fb.com>
Date:   Tue Apr 17 23:29:07 2018 -0700

    perf/core: Fix bad use of igrab()
    
    commit 9511bce9fe8e5e6c0f923c09243a713eba560141 upstream
    
    As Miklos reported and suggested:
    
     "This pattern repeats two times in trace_uprobe.c and in
      kernel/events/core.c as well:
    
          ret = kern_path(filename, LOOKUP_FOLLOW, &path);
          if (ret)
              goto fail_address_parse;
    
          inode = igrab(d_inode(path.dentry));
          path_put(&path);
    
      And it's wrong.  You can only hold a reference to the inode if you
      have an active ref to the superblock as well (which is normally
      through path.mnt) or holding s_umount.
    
      This way unmounting the containing filesystem while the tracepoint is
      active will give you the "VFS: Busy inodes after unmount..." message
      and a crash when the inode is finally put.
    
      Solution: store path instead of inode."
    
    This patch fixes the issue in kernel/event/core.c.
    
    Reviewed-and-tested-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reported-by: Miklos Szeredi <miklos@szeredi.hu>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <kernel-team@fb.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vince Weaver <vincent.weaver@maine.edu>
    Fixes: 375637bc5249 ("perf/core: Introduce address range filtering")
    Link: http://lkml.kernel.org/r/20180418062907.3210386-2-songliubraving@fb.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 38cd6de2161b9b205e9d7a80ef42a96c4f37567b
Author: Anand K Mistry <amistry@google.com>
Date:   Thu Nov 5 16:33:04 2020 +1100

    x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP
    
    commit 1978b3a53a74e3230cd46932b149c6e62e832e9a upstream.
    
    On AMD CPUs which have the feature X86_FEATURE_AMD_STIBP_ALWAYS_ON,
    STIBP is set to on and
    
      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED
    
    At the same time, IBPB can be set to conditional.
    
    However, this leads to the case where it's impossible to turn on IBPB
    for a process because in the PR_SPEC_DISABLE case in ib_prctl_set() the
    
      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED
    
    condition leads to a return before the task flag is set. Similarly,
    ib_prctl_get() will return PR_SPEC_DISABLE even though IBPB is set to
    conditional.
    
    More generally, the following cases are possible:
    
    1. STIBP = conditional && IBPB = on for spectre_v2_user=seccomp,ibpb
    2. STIBP = on && IBPB = conditional for AMD CPUs with
       X86_FEATURE_AMD_STIBP_ALWAYS_ON
    
    The first case functions correctly today, but only because
    spectre_v2_user_ibpb isn't updated to reflect the IBPB mode.
    
    At a high level, this change does one thing. If either STIBP or IBPB
    is set to conditional, allow the prctl to change the task flag.
    Also, reflect that capability when querying the state. This isn't
    perfect since it doesn't take into account if only STIBP or IBPB is
    unconditionally on. But it allows the conditional feature to work as
    expected, without affecting the unconditional one.
    
     [ bp: Massage commit message and comment; space out statements for
       better readability. ]
    
    Fixes: 21998a351512 ("x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.")
    Signed-off-by: Anand K Mistry <amistry@google.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Link: https://lkml.kernel.org/r/20201105163246.v2.1.Ifd7243cd3e2c2206a893ad0a5b9a4f19549e22c6@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90d8b926289eb4b39d82030f0b6bad08485f6ece
Author: George Spelvin <lkml@sdf.org>
Date:   Sun Aug 9 06:57:44 2020 +0000

    random32: make prandom_u32() output unpredictable
    
    commit c51f8f88d705e06bd696d7510aff22b33eb8e638 upstream.
    
    Non-cryptographic PRNGs may have great statistical properties, but
    are usually trivially predictable to someone who knows the algorithm,
    given a small sample of their output.  An LFSR like prandom_u32() is
    particularly simple, even if the sample is widely scattered bits.
    
    It turns out the network stack uses prandom_u32() for some things like
    random port numbers which it would prefer are *not* trivially predictable.
    Predictability led to a practical DNS spoofing attack.  Oops.
    
    This patch replaces the LFSR with a homebrew cryptographic PRNG based
    on the SipHash round function, which is in turn seeded with 128 bits
    of strong random key.  (The authors of SipHash have *not* been consulted
    about this abuse of their algorithm.)  Speed is prioritized over security;
    attacks are rare, while performance is always wanted.
    
    Replacing all callers of prandom_u32() is the quick fix.
    Whether to reinstate a weaker PRNG for uses which can tolerate it
    is an open question.
    
    Commit f227e3ec3b5c ("random32: update the net random state on interrupt
    and activity") was an earlier attempt at a solution.  This patch replaces
    it.
    
    Reported-by: Amit Klein <aksecurity@gmail.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: "Jason A. Donenfeld" <Jason@zx2c4.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: tytso@mit.edu
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Marc Plumb <lkml.mplumb@gmail.com>
    Fixes: f227e3ec3b5c ("random32: update the net random state on interrupt and activity")
    Signed-off-by: George Spelvin <lkml@sdf.org>
    Link: https://lore.kernel.org/netdev/20200808152628.GA27941@SDF.ORG/
    [ willy: partial reversal of f227e3ec3b5c; moved SIPROUND definitions
      to prandom.h for later use; merged George's prandom_seed() proposal;
      inlined siprand_u32(); replaced the net_rand_state[] array with 4
      members to fix a build issue; cosmetic cleanups to make checkpatch
      happy; fixed RANDOM32_SELFTEST build ]
    [wt: backported to 4.14 -- various context adjustments; timer API change]
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73743ce4c654164ee88c656809f3d8182ed32dc7
Author: Mao Wenan <wenan.mao@linux.alibaba.com>
Date:   Tue Nov 10 08:16:31 2020 +0800

    net: Update window_clamp if SOCK_RCVBUF is set
    
    [ Upstream commit 909172a149749242990a6e64cb55d55460d4e417 ]
    
    When net.ipv4.tcp_syncookies=1 and syn flood is happened,
    cookie_v4_check or cookie_v6_check tries to redo what
    tcp_v4_send_synack or tcp_v6_send_synack did,
    rsk_window_clamp will be changed if SOCK_RCVBUF is set,
    which will make rcv_wscale is different, the client
    still operates with initial window scale and can overshot
    granted window, the client use the initial scale but local
    server use new scale to advertise window value, and session
    work abnormally.
    
    Fixes: e88c64f0a425 ("tcp: allow effective reduction of TCP's rcv-buffer via setsockopt")
    Signed-off-by: Mao Wenan <wenan.mao@linux.alibaba.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/1604967391-123737-1-git-send-email-wenan.mao@linux.alibaba.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc5943c366f35ec8b8a13074f95180c3a4e66676
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Nov 5 15:28:42 2020 +0100

    r8169: fix potential skb double free in an error path
    
    [ Upstream commit cc6528bc9a0c901c83b8220a2e2617f3354d6dd9 ]
    
    The caller of rtl8169_tso_csum_v2() frees the skb if false is returned.
    eth_skb_pad() internally frees the skb on error what would result in a
    double free. Therefore use __skb_put_padto() directly and instruct it
    to not free the skb on error.
    
    Fixes: b423e9ae49d7 ("r8169: fix offloaded tx checksum for small packets.")
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Link: https://lore.kernel.org/r/f7e68191-acff-9ded-4263-c016428a8762@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01f5c954791332cf9b94caf4e6fec594dd6c967a
Author: Martin Willi <martin@strongswan.org>
Date:   Fri Nov 6 08:30:30 2020 +0100

    vrf: Fix fast path output packet handling with async Netfilter rules
    
    [ Upstream commit 9e2b7fa2df4365e99934901da4fb4af52d81e820 ]
    
    VRF devices use an optimized direct path on output if a default qdisc
    is involved, calling Netfilter hooks directly. This path, however, does
    not consider Netfilter rules completing asynchronously, such as with
    NFQUEUE. The Netfilter okfn() is called for asynchronously accepted
    packets, but the VRF never passes that packet down the stack to send
    it out over the slave device. Using the slower redirect path for this
    seems not feasible, as we do not know beforehand if a Netfilter hook
    has asynchronously completing rules.
    
    Fix the use of asynchronously completing Netfilter rules in OUTPUT and
    POSTROUTING by using a special completion function that additionally
    calls dst_output() to pass the packet down the stack. Also, slightly
    adjust the use of nf_reset_ct() so that is called in the asynchronous
    case, too.
    
    Fixes: dcdd43c41e60 ("net: vrf: performance improvements for IPv4")
    Fixes: a9ec54d1b0cd ("net: vrf: performance improvements for IPv6")
    Signed-off-by: Martin Willi <martin@strongswan.org>
    Link: https://lore.kernel.org/r/20201106073030.3974927-1-martin@strongswan.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 74c801cdaee246e846171e7545684ad70a1140cf
Author: Martin Schiller <ms@dev.tdt.de>
Date:   Mon Nov 9 07:54:49 2020 +0100

    net/x25: Fix null-ptr-deref in x25_connect
    
    [ Upstream commit 361182308766a265b6c521879b34302617a8c209 ]
    
    This fixes a regression for blocking connects introduced by commit
    4becb7ee5b3d ("net/x25: Fix x25_neigh refcnt leak when x25 disconnect").
    
    The x25->neighbour is already set to "NULL" by x25_disconnect() now,
    while a blocking connect is waiting in
    x25_wait_for_connection_establishment(). Therefore x25->neighbour must
    not be accessed here again and x25->state is also already set to
    X25_STATE_0 by x25_disconnect().
    
    Fixes: 4becb7ee5b3d ("net/x25: Fix x25_neigh refcnt leak when x25 disconnect")
    Signed-off-by: Martin Schiller <ms@dev.tdt.de>
    Reviewed-by: Xie He <xie.he.0141@gmail.com>
    Link: https://lore.kernel.org/r/20201109065449.9014-1-ms@dev.tdt.de
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b707d4ba720b20557289b936f9713aa58ee0714
Author: Ursula Braun <ubraun@linux.ibm.com>
Date:   Mon Nov 9 08:57:05 2020 +0100

    net/af_iucv: fix null pointer dereference on shutdown
    
    [ Upstream commit 4031eeafa71eaf22ae40a15606a134ae86345daf ]
    
    syzbot reported the following KASAN finding:
    
    BUG: KASAN: nullptr-dereference in iucv_send_ctrl+0x390/0x3f0 net/iucv/af_iucv.c:385
    Read of size 2 at addr 000000000000021e by task syz-executor907/519
    
    CPU: 0 PID: 519 Comm: syz-executor907 Not tainted 5.9.0-syzkaller-07043-gbcf9877ad213 #0
    Hardware name: IBM 3906 M04 701 (KVM/Linux)
    Call Trace:
     [<00000000c576af60>] unwind_start arch/s390/include/asm/unwind.h:65 [inline]
     [<00000000c576af60>] show_stack+0x180/0x228 arch/s390/kernel/dumpstack.c:135
     [<00000000c9dcd1f8>] __dump_stack lib/dump_stack.c:77 [inline]
     [<00000000c9dcd1f8>] dump_stack+0x268/0x2f0 lib/dump_stack.c:118
     [<00000000c5fed016>] print_address_description.constprop.0+0x5e/0x218 mm/kasan/report.c:383
     [<00000000c5fec82a>] __kasan_report mm/kasan/report.c:517 [inline]
     [<00000000c5fec82a>] kasan_report+0x11a/0x168 mm/kasan/report.c:534
     [<00000000c98b5b60>] iucv_send_ctrl+0x390/0x3f0 net/iucv/af_iucv.c:385
     [<00000000c98b6262>] iucv_sock_shutdown+0x44a/0x4c0 net/iucv/af_iucv.c:1457
     [<00000000c89d3a54>] __sys_shutdown+0x12c/0x1c8 net/socket.c:2204
     [<00000000c89d3b70>] __do_sys_shutdown net/socket.c:2212 [inline]
     [<00000000c89d3b70>] __s390x_sys_shutdown+0x38/0x48 net/socket.c:2210
     [<00000000c9e36eac>] system_call+0xe0/0x28c arch/s390/kernel/entry.S:415
    
    There is nothing to shutdown if a connection has never been established.
    Besides that iucv->hs_dev is not yet initialized if a socket is in
    IUCV_OPEN state and iucv->path is not yet initialized if socket is in
    IUCV_BOUND state.
    So, just skip the shutdown calls for a socket in these states.
    
    Fixes: eac3731bd04c ("[S390]: Add AF_IUCV socket support")
    Fixes: 82492a355fac ("af_iucv: add shutdown for HS transport")
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    [jwi: correct one Fixes tag]
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f43ff4e7c5b57b69312adae9f807018cbacb98cd
Author: Oliver Herms <oliver.peter.herms@gmail.com>
Date:   Tue Nov 3 11:41:33 2020 +0100

    IPv6: Set SIT tunnel hard_header_len to zero
    
    [ Upstream commit 8ef9ba4d666614497a057d09b0a6eafc1e34eadf ]
    
    Due to the legacy usage of hard_header_len for SIT tunnels while
    already using infrastructure from net/ipv4/ip_tunnel.c the
    calculation of the path MTU in tnl_update_pmtu is incorrect.
    This leads to unnecessary creation of MTU exceptions for any
    flow going over a SIT tunnel.
    
    As SIT tunnels do not have a header themsevles other than their
    transport (L3, L2) headers we're leaving hard_header_len set to zero
    as tnl_update_pmtu is already taking care of the transport headers
    sizes.
    
    This will also help avoiding unnecessary IPv6 GC runs and spinlock
    contention seen when using SIT tunnels and for more than
    net.ipv6.route.gc_thresh flows.
    
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Signed-off-by: Oliver Herms <oliver.peter.herms@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20201103104133.GA1573211@tws
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1396f12fffb287a83373edc4cd9acf30e885c1ab
Author: Stefano Stabellini <stefano.stabellini@xilinx.com>
Date:   Mon Oct 26 17:02:14 2020 -0700

    swiotlb: fix "x86: Don't panic if can not alloc buffer for swiotlb"
    
    commit e9696d259d0fb5d239e8c28ca41089838ea76d13 upstream.
    
    kernel/dma/swiotlb.c:swiotlb_init gets called first and tries to
    allocate a buffer for the swiotlb. It does so by calling
    
      memblock_alloc_low(PAGE_ALIGN(bytes), PAGE_SIZE);
    
    If the allocation must fail, no_iotlb_memory is set.
    
    Later during initialization swiotlb-xen comes in
    (drivers/xen/swiotlb-xen.c:xen_swiotlb_init) and given that io_tlb_start
    is != 0, it thinks the memory is ready to use when actually it is not.
    
    When the swiotlb is actually needed, swiotlb_tbl_map_single gets called
    and since no_iotlb_memory is set the kernel panics.
    
    Instead, if swiotlb-xen.c:xen_swiotlb_init knew the swiotlb hadn't been
    initialized, it would do the initialization itself, which might still
    succeed.
    
    Fix the panic by setting io_tlb_start to 0 on swiotlb initialization
    failure, and also by setting no_iotlb_memory to false on swiotlb
    initialization success.
    
    Fixes: ac2cbab21f31 ("x86: Don't panic if can not alloc buffer for swiotlb")
    
    Reported-by: Elliott Mitchell <ehem+xen@m5p.com>
    Tested-by: Elliott Mitchell <ehem+xen@m5p.com>
    Signed-off-by: Stefano Stabellini <stefano.stabellini@xilinx.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c676770c43738b0b8c6d10561ca2847d29818896
Author: Coiby Xu <coiby.xu@gmail.com>
Date:   Fri Nov 6 07:19:09 2020 +0800

    pinctrl: amd: fix incorrect way to disable debounce filter
    
    commit 06abe8291bc31839950f7d0362d9979edc88a666 upstream.
    
    The correct way to disable debounce filter is to clear bit 5 and 6
    of the register.
    
    Cc: stable@vger.kerne.org
    Signed-off-by: Coiby Xu <coiby.xu@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/linux-gpio/df2c008b-e7b5-4fdd-42ea-4d1c62b52139@redhat.com/
    Link: https://lore.kernel.org/r/20201105231912.69527-2-coiby.xu@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7a238a77d8e488b0dd1ff4c14b9df990f5d6c64
Author: Coiby Xu <coiby.xu@gmail.com>
Date:   Fri Nov 6 07:19:10 2020 +0800

    pinctrl: amd: use higher precision for 512 RtcClk
    
    commit c64a6a0d4a928c63e5bc3b485552a8903a506c36 upstream.
    
    RTC is 32.768kHz thus 512 RtcClk equals 15625 usec. The documentation
    likely has dropped precision and that's why the driver mistakenly took
    the slightly deviated value.
    
    Cc: stable@vger.kernel.org
    Reported-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Suggested-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Suggested-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Coiby Xu <coiby.xu@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/linux-gpio/2f4706a1-502f-75f0-9596-cc25b4933b6c@redhat.com/
    Link: https://lore.kernel.org/r/20201105231912.69527-3-coiby.xu@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cea1f27fbd29ad989ca88c5836ed415f9192402
Author: Thomas Zimmermann <tzimmermann@suse.de>
Date:   Thu Nov 5 20:02:56 2020 +0100

    drm/gma500: Fix out-of-bounds access to struct drm_device.vblank[]
    
    commit 06ad8d339524bf94b89859047822c31df6ace239 upstream.
    
    The gma500 driver expects 3 pipelines in several it's IRQ functions.
    Accessing struct drm_device.vblank[], this fails with devices that only
    have 2 pipelines. An example KASAN report is shown below.
    
      [   62.267688] ==================================================================
      [   62.268856] BUG: KASAN: slab-out-of-bounds in psb_irq_postinstall+0x250/0x3c0 [gma500_gfx]
      [   62.269450] Read of size 1 at addr ffff8880012bc6d0 by task systemd-udevd/285
      [   62.269949]
      [   62.270192] CPU: 0 PID: 285 Comm: systemd-udevd Tainted: G            E     5.10.0-rc1-1-default+ #572
      [   62.270807] Hardware name:  /DN2800MT, BIOS MTCDT10N.86A.0164.2012.1213.1024 12/13/2012
      [   62.271366] Call Trace:
      [   62.271705]  dump_stack+0xae/0xe5
      [   62.272180]  print_address_description.constprop.0+0x17/0xf0
      [   62.272987]  ? psb_irq_postinstall+0x250/0x3c0 [gma500_gfx]
      [   62.273474]  __kasan_report.cold+0x20/0x38
      [   62.273989]  ? psb_irq_postinstall+0x250/0x3c0 [gma500_gfx]
      [   62.274460]  kasan_report+0x3a/0x50
      [   62.274891]  psb_irq_postinstall+0x250/0x3c0 [gma500_gfx]
      [   62.275380]  drm_irq_install+0x131/0x1f0
      <...>
      [   62.300751] Allocated by task 285:
      [   62.301223]  kasan_save_stack+0x1b/0x40
      [   62.301731]  __kasan_kmalloc.constprop.0+0xbf/0xd0
      [   62.302293]  drmm_kmalloc+0x55/0x100
      [   62.302773]  drm_vblank_init+0x77/0x210
    
    Resolve the issue by only handling vblank entries up to the number of
    CRTCs.
    
    I'm adding a Fixes tag for reference, although the bug has been present
    since the driver's initial commit.
    
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Fixes: 5c49fd3aa0ab ("gma500: Add the core DRM files and headers")
    Cc: Alan Cox <alan@linux.intel.com>
    Cc: Dave Airlie <airlied@redhat.com>
    Cc: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Cc: dri-devel@lists.freedesktop.org
    Cc: stable@vger.kernel.org#v3.3+
    Link: https://patchwork.freedesktop.org/patch/msgid/20201105190256.3893-1-tzimmermann@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f614a8f4b5bbf67e684ef5709263b5f69e5a5fb
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Oct 28 16:39:49 2020 -0400

    don't dump the threads that had been already exiting when zapped.
    
    commit 77f6ab8b7768cf5e6bdd0e72499270a0671506ee upstream.
    
    Coredump logics needs to report not only the registers of the dumping
    thread, but (since 2.5.43) those of other threads getting killed.
    
    Doing that might require extra state saved on the stack in asm glue at
    kernel entry; signal delivery logics does that (we need to be able to
    save sigcontext there, at the very least) and so does seccomp.
    
    That covers all callers of do_coredump().  Secondary threads get hit with
    SIGKILL and caught as soon as they reach exit_mm(), which normally happens
    in signal delivery, so those are also fine most of the time.  Unfortunately,
    it is possible to end up with secondary zapped when it has already entered
    exit(2) (or, worse yet, is oopsing).  In those cases we reach exit_mm()
    when mm->core_state is already set, but the stack contents is not what
    we would have in signal delivery.
    
    At least on two architectures (alpha and m68k) it leads to infoleaks - we
    end up with a chunk of kernel stack written into coredump, with the contents
    consisting of normal C stack frames of the call chain leading to exit_mm()
    instead of the expected copy of userland registers.  In case of alpha we
    leak 312 bytes of stack.  Other architectures (including the regset-using
    ones) might have similar problems - the normal user of regsets is ptrace
    and the state of tracee at the time of such calls is special in the same
    way signal delivery is.
    
    Note that had the zapper gotten to the exiting thread slightly later,
    it wouldn't have been included into coredump anyway - we skip the threads
    that have already cleared their ->mm.  So let's pretend that zapper always
    loses the race.  IOW, have exit_mm() only insert into the dumper list if
    we'd gotten there from handling a fatal signal[*]
    
    As the result, the callers of do_exit() that have *not* gone through get_signal()
    are not seen by coredump logics as secondary threads.  Which excludes voluntary
    exit()/oopsen/traps/etc.  The dumper thread itself is unaffected by that,
    so seccomp is fine.
    
    [*] originally I intended to add a new flag in tsk->flags, but ebiederman pointed
    out that PF_SIGNALED is already doing just what we need.
    
    Cc: stable@vger.kernel.org
    Fixes: d89f3847def4 ("[PATCH] thread-aware coredumps, 2.5.43-C3")
    History-tree: https://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git
    Acked-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca4d9051fc99721654df8e57093143d5875a7733
Author: Chen Zhou <chenzhou10@huawei.com>
Date:   Thu Nov 12 21:53:32 2020 +0800

    selinux: Fix error return code in sel_ib_pkey_sid_slow()
    
    commit c350f8bea271782e2733419bd2ab9bf4ec2051ef upstream.
    
    Fix to return a negative error code from the error handling case
    instead of 0 in function sel_ib_pkey_sid_slow(), as done elsewhere
    in this function.
    
    Cc: stable@vger.kernel.org
    Fixes: 409dcf31538a ("selinux: Add a cache for quicker retreival of PKey SIDs")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Chen Zhou <chenzhou10@huawei.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d62183eda9c66c6c01710a9320c485e297b230dd
Author: Wengang Wang <wen.gang.wang@oracle.com>
Date:   Fri Nov 13 22:52:23 2020 -0800

    ocfs2: initialize ip_next_orphan
    
    commit f5785283dd64867a711ca1fb1f5bb172f252ecdf upstream.
    
    Though problem if found on a lower 4.1.12 kernel, I think upstream has
    same issue.
    
    In one node in the cluster, there is the following callback trace:
    
       # cat /proc/21473/stack
       __ocfs2_cluster_lock.isra.36+0x336/0x9e0 [ocfs2]
       ocfs2_inode_lock_full_nested+0x121/0x520 [ocfs2]
       ocfs2_evict_inode+0x152/0x820 [ocfs2]
       evict+0xae/0x1a0
       iput+0x1c6/0x230
       ocfs2_orphan_filldir+0x5d/0x100 [ocfs2]
       ocfs2_dir_foreach_blk+0x490/0x4f0 [ocfs2]
       ocfs2_dir_foreach+0x29/0x30 [ocfs2]
       ocfs2_recover_orphans+0x1b6/0x9a0 [ocfs2]
       ocfs2_complete_recovery+0x1de/0x5c0 [ocfs2]
       process_one_work+0x169/0x4a0
       worker_thread+0x5b/0x560
       kthread+0xcb/0xf0
       ret_from_fork+0x61/0x90
    
    The above stack is not reasonable, the final iput shouldn't happen in
    ocfs2_orphan_filldir() function.  Looking at the code,
    
      2067         /* Skip inodes which are already added to recover list, since dio may
      2068          * happen concurrently with unlink/rename */
      2069         if (OCFS2_I(iter)->ip_next_orphan) {
      2070                 iput(iter);
      2071                 return 0;
      2072         }
      2073
    
    The logic thinks the inode is already in recover list on seeing
    ip_next_orphan is non-NULL, so it skip this inode after dropping a
    reference which incremented in ocfs2_iget().
    
    While, if the inode is already in recover list, it should have another
    reference and the iput() at line 2070 should not be the final iput
    (dropping the last reference).  So I don't think the inode is really in
    the recover list (no vmcore to confirm).
    
    Note that ocfs2_queue_orphans(), though not shown up in the call back
    trace, is holding cluster lock on the orphan directory when looking up
    for unlinked inodes.  The on disk inode eviction could involve a lot of
    IOs which may need long time to finish.  That means this node could hold
    the cluster lock for very long time, that can lead to the lock requests
    (from other nodes) to the orhpan directory hang for long time.
    
    Looking at more on ip_next_orphan, I found it's not initialized when
    allocating a new ocfs2_inode_info structure.
    
    This causes te reflink operations from some nodes hang for very long
    time waiting for the cluster lock on the orphan directory.
    
    Fix: initialize ip_next_orphan as NULL.
    
    Signed-off-by: Wengang Wang <wen.gang.wang@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201109171746.27884-1-wen.gang.wang@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56ba4d01e43c1d7cb6814fe508683adee7acba57
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Nov 6 11:52:05 2020 +0300

    futex: Don't enable IRQs unconditionally in put_pi_state()
    
    commit 1e106aa3509b86738769775969822ffc1ec21bf4 upstream.
    
    The exit_pi_state_list() function calls put_pi_state() with IRQs disabled
    and is not expecting that IRQs will be enabled inside the function.
    
    Use the _irqsave() variant so that IRQs are restored to the original state
    instead of being enabled unconditionally.
    
    Fixes: 153fbd1226fb ("futex: Fix more put_pi_state() vs. exit_pi_state_list() races")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201106085205.GA1159983@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8ced6523dff6930cd28563b19f8aff789878a9c
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Thu Oct 29 11:54:42 2020 +0200

    mei: protect mei_cl_mtu from null dereference
    
    commit bcbc0b2e275f0a797de11a10eff495b4571863fc upstream.
    
    A receive callback is queued while the client is still connected
    but can still be called after the client was disconnected. Upon
    disconnect cl->me_cl is set to NULL, hence we need to check
    that ME client is not-NULL in mei_cl_mtu to avoid
    null dereference.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20201029095444.957924-2-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7a3e71ce99ba90a949ea294d7f7817834516c70
Author: Chris Brandt <chris.brandt@renesas.com>
Date:   Wed Nov 11 08:12:09 2020 -0500

    usb: cdc-acm: Add DISABLE_ECHO for Renesas USB Download mode
    
    commit 6d853c9e4104b4fc8d55dc9cd3b99712aa347174 upstream.
    
    Renesas R-Car and RZ/G SoCs have a firmware download mode over USB.
    However, on reset a banner string is transmitted out which is not expected
    to be echoed back and will corrupt the protocol.
    
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Chris Brandt <chris.brandt@renesas.com>
    Link: https://lore.kernel.org/r/20201111131209.3977903-1-chris.brandt@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c0e46ab7557fbaa175eec10ed55596d8be0848c
Author: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
Date:   Mon Nov 2 21:28:19 2020 +0900

    uio: Fix use-after-free in uio_unregister_device()
    
    commit 092561f06702dd4fdd7fb74dd3a838f1818529b7 upstream.
    
    Commit 8fd0e2a6df26 ("uio: free uio id after uio file node is freed")
    triggered KASAN use-after-free failure at deletion of TCM-user
    backstores [1].
    
    In uio_unregister_device(), struct uio_device *idev is passed to
    uio_free_minor() to refer idev->minor. However, before uio_free_minor()
    call, idev is already freed by uio_device_release() during call to
    device_unregister().
    
    To avoid reference to idev->minor after idev free, keep idev->minor
    value in a local variable. Also modify uio_free_minor() argument to
    receive the value.
    
    [1]
    BUG: KASAN: use-after-free in uio_unregister_device+0x166/0x190
    Read of size 4 at addr ffff888105196508 by task targetcli/49158
    
    CPU: 3 PID: 49158 Comm: targetcli Not tainted 5.10.0-rc1 #1
    Hardware name: Supermicro Super Server/X10SRL-F, BIOS 2.0 12/17/2015
    Call Trace:
     dump_stack+0xae/0xe5
     ? uio_unregister_device+0x166/0x190
     print_address_description.constprop.0+0x1c/0x210
     ? uio_unregister_device+0x166/0x190
     ? uio_unregister_device+0x166/0x190
     kasan_report.cold+0x37/0x7c
     ? kobject_put+0x80/0x410
     ? uio_unregister_device+0x166/0x190
     uio_unregister_device+0x166/0x190
     tcmu_destroy_device+0x1c4/0x280 [target_core_user]
     ? tcmu_release+0x90/0x90 [target_core_user]
     ? __mutex_unlock_slowpath+0xd6/0x5d0
     target_free_device+0xf3/0x2e0 [target_core_mod]
     config_item_cleanup+0xea/0x210
     configfs_rmdir+0x651/0x860
     ? detach_groups.isra.0+0x380/0x380
     vfs_rmdir.part.0+0xec/0x3a0
     ? __lookup_hash+0x20/0x150
     do_rmdir+0x252/0x320
     ? do_file_open_root+0x420/0x420
     ? strncpy_from_user+0xbc/0x2f0
     ? getname_flags.part.0+0x8e/0x450
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7f9e2bfc91fb
    Code: 73 01 c3 48 8b 0d 9d ec 0c 00 f7 d8 64 89 01 48 83 c8 ff c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa b8 54 00 00 00 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 6d ec 0c 00 f7 d8 64 89 01 48
    RSP: 002b:00007ffdd2baafe8 EFLAGS: 00000246 ORIG_RAX: 0000000000000054
    RAX: ffffffffffffffda RBX: 00007f9e2beb44a0 RCX: 00007f9e2bfc91fb
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00007f9e1c20be90
    RBP: 00007ffdd2bab000 R08: 0000000000000000 R09: 00007f9e2bdf2440
    R10: 00007ffdd2baaf37 R11: 0000000000000246 R12: 00000000ffffff9c
    R13: 000055f9abb7e390 R14: 000055f9abcf9558 R15: 00007f9e2be7a780
    
    Allocated by task 34735:
     kasan_save_stack+0x1b/0x40
     __kasan_kmalloc.constprop.0+0xc2/0xd0
     __uio_register_device+0xeb/0xd40
     tcmu_configure_device+0x5a0/0xbc0 [target_core_user]
     target_configure_device+0x12f/0x760 [target_core_mod]
     target_dev_enable_store+0x32/0x50 [target_core_mod]
     configfs_write_file+0x2bb/0x450
     vfs_write+0x1ce/0x610
     ksys_write+0xe9/0x1b0
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 49158:
     kasan_save_stack+0x1b/0x40
     kasan_set_track+0x1c/0x30
     kasan_set_free_info+0x1b/0x30
     __kasan_slab_free+0x110/0x150
     slab_free_freelist_hook+0x5a/0x170
     kfree+0xc6/0x560
     device_release+0x9b/0x210
     kobject_put+0x13e/0x410
     uio_unregister_device+0xf9/0x190
     tcmu_destroy_device+0x1c4/0x280 [target_core_user]
     target_free_device+0xf3/0x2e0 [target_core_mod]
     config_item_cleanup+0xea/0x210
     configfs_rmdir+0x651/0x860
     vfs_rmdir.part.0+0xec/0x3a0
     do_rmdir+0x252/0x320
     do_syscall_64+0x33/0x40
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff888105196000
     which belongs to the cache kmalloc-2k of size 2048
    The buggy address is located 1288 bytes inside of
     2048-byte region [ffff888105196000, ffff888105196800)
    The buggy address belongs to the page:
    page:0000000098e6ca81 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x105190
    head:0000000098e6ca81 order:3 compound_mapcount:0 compound_pincount:0
    flags: 0x17ffffc0010200(slab|head)
    raw: 0017ffffc0010200 dead000000000100 dead000000000122 ffff888100043040
    raw: 0000000000000000 0000000000080008 00000001ffffffff ffff88810eb55c01
    page dumped because: kasan: bad access detected
    page->mem_cgroup:ffff88810eb55c01
    
    Memory state around the buggy address:
     ffff888105196400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888105196480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff888105196500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                          ^
     ffff888105196580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888105196600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: 8fd0e2a6df26 ("uio: free uio id after uio file node is freed")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Shin'ichiro Kawasaki <shinichiro.kawasaki@wdc.com>
    Link: https://lore.kernel.org/r/20201102122819.2346270-1-shinichiro.kawasaki@wdc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4221ded98ff03218b9f58d219998f594ab70a709
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Thu Oct 15 16:40:53 2020 +0800

    thunderbolt: Add the missed ida_simple_remove() in ring_request_msix()
    
    commit 7342ca34d931a357d408aaa25fadd031e46af137 upstream.
    
    ring_request_msix() misses to call ida_simple_remove() in an error path.
    Add a label 'err_ida_remove' and jump to it.
    
    Fixes: 046bee1f9ab8 ("thunderbolt: Add MSI-X support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f9ab25999f2fe5f05ee277d7330718234f50ad3
Author: Joseph Qi <joseph.qi@linux.alibaba.com>
Date:   Tue Nov 3 10:29:02 2020 +0800

    ext4: unlock xattr_sem properly in ext4_inline_data_truncate()
    
    commit 7067b2619017d51e71686ca9756b454de0e5826a upstream.
    
    It takes xattr_sem to check inline data again but without unlock it
    in case not have. So unlock it before return.
    
    Fixes: aef1c8513c1f ("ext4: let ext4_truncate handle inline data correctly")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Tao Ma <boyu.mt@taobao.com>
    Signed-off-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/1604370542-124630-1-git-send-email-joseph.qi@linux.alibaba.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b66a38044620c93e2b6c734310a40b8a7f07a6cc
Author: Kaixu Xia <kaixuxia@tencent.com>
Date:   Thu Oct 29 23:46:36 2020 +0800

    ext4: correctly report "not supported" for {usr,grp}jquota when !CONFIG_QUOTA
    
    commit 174fe5ba2d1ea0d6c5ab2a7d4aa058d6d497ae4d upstream.
    
    The macro MOPT_Q is used to indicates the mount option is related to
    quota stuff and is defined to be MOPT_NOSUPPORT when CONFIG_QUOTA is
    disabled.  Normally the quota options are handled explicitly, so it
    didn't matter that the MOPT_STRING flag was missing, even though the
    usrjquota and grpjquota mount options take a string argument.  It's
    important that's present in the !CONFIG_QUOTA case, since without
    MOPT_STRING, the mount option matcher will match usrjquota= followed
    by an integer, and will otherwise skip the table entry, and so "mount
    option not supported" error message is never reported.
    
    [ Fixed up the commit description to better explain why the fix
      works. --TYT ]
    
    Fixes: 26092bf52478 ("ext4: use a table-driven handler for mount options")
    Signed-off-by: Kaixu Xia <kaixuxia@tencent.com>
    Link: https://lore.kernel.org/r/1603986396-28917-1-git-send-email-kaixuxia@tencent.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c489ac7d720aa71785985e1f53e7733283ea8b40
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Oct 30 12:49:45 2020 +0100

    perf: Fix get_recursion_context()
    
    [ Upstream commit ce0f17fc93f63ee91428af10b7b2ddef38cd19e5 ]
    
    One should use in_serving_softirq() to detect SoftIRQ context.
    
    Fixes: 96f6d4444302 ("perf_counter: avoid recursion")
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20201030151955.120572175@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fac46a2c282d9cf2ae201e5fb8f4ad8fcf7be4c5
Author: Wang Hai <wanghai38@huawei.com>
Date:   Tue Nov 10 22:46:14 2020 +0800

    cosa: Add missing kfree in error path of cosa_write
    
    [ Upstream commit 52755b66ddcef2e897778fac5656df18817b59ab ]
    
    If memory allocation for 'kbuf' succeed, cosa_write() doesn't have a
    corresponding kfree() in exception handling. Thus add kfree() for this
    function implementation.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Acked-by: Jan "Yenya" Kasprzak <kas@fi.muni.cz>
    Link: https://lore.kernel.org/r/20201110144614.43194-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9077481e2229aeafdfefafdbbcfcd213d5ff453d
Author: Evan Nimmo <evan.nimmo@alliedtelesis.co.nz>
Date:   Tue Nov 10 15:28:25 2020 +1300

    of/address: Fix of_node memory leak in of_dma_is_coherent
    
    [ Upstream commit a5bea04fcc0b3c0aec71ee1fd58fd4ff7ee36177 ]
    
    Commit dabf6b36b83a ("of: Add OF_DMA_DEFAULT_COHERENT & select it on
    powerpc") added a check to of_dma_is_coherent which returns early
    if OF_DMA_DEFAULT_COHERENT is enabled. This results in the of_node_put()
    being skipped causing a memory leak. Moved the of_node_get() below this
    check so we now we only get the node if OF_DMA_DEFAULT_COHERENT is not
    enabled.
    
    Fixes: dabf6b36b83a ("of: Add OF_DMA_DEFAULT_COHERENT & select it on powerpc")
    Signed-off-by: Evan Nimmo <evan.nimmo@alliedtelesis.co.nz>
    Link: https://lore.kernel.org/r/20201110022825.30895-1-evan.nimmo@alliedtelesis.co.nz
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8e83eaf8482413401e7691872fc914893f40bab
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Nov 11 08:07:37 2020 -0800

    xfs: fix a missing unlock on error in xfs_fs_map_blocks
    
    [ Upstream commit 2bd3fa793aaa7e98b74e3653fdcc72fa753913b5 ]
    
    We also need to drop the iolock when invalidate_inode_pages2 fails, not
    only on all other error or successful cases.
    
    Fixes: 527851124d10 ("xfs: implement pNFS export operations")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit badd7b6c19b4bbe3d83295b2683b41d15e5d699d
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Sun Nov 8 16:32:44 2020 -0800

    xfs: fix rmap key and record comparison functions
    
    [ Upstream commit 6ff646b2ceb0eec916101877f38da0b73e3a5b7f ]
    
    Keys for extent interval records in the reverse mapping btree are
    supposed to be computed as follows:
    
    (physical block, owner, fork, is_btree, is_unwritten, offset)
    
    This provides users the ability to look up a reverse mapping from a bmbt
    record -- start with the physical block; then if there are multiple
    records for the same block, move on to the owner; then the inode fork
    type; and so on to the file offset.
    
    However, the key comparison functions incorrectly remove the
    fork/btree/unwritten information that's encoded in the on-disk offset.
    This means that lookup comparisons are only done with:
    
    (physical block, owner, offset)
    
    This means that queries can return incorrect results.  On consistent
    filesystems this hasn't been an issue because blocks are never shared
    between forks or with bmbt blocks; and are never unwritten.  However,
    this bug means that online repair cannot always detect corruption in the
    key information in internal rmapbt nodes.
    
    Found by fuzzing keys[1].attrfork = ones on xfs/371.
    
    Fixes: 4b8ed67794fe ("xfs: add rmap btree operations")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 737f4b2f68c837b8a32422259cb439f0aaf67a86
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Sun Nov 8 16:32:43 2020 -0800

    xfs: fix flags argument to rmap lookup when converting shared file rmaps
    
    [ Upstream commit ea8439899c0b15a176664df62aff928010fad276 ]
    
    Pass the same oldext argument (which contains the existing rmapping's
    unwritten state) to xfs_rmap_lookup_le_range at the start of
    xfs_rmap_convert_shared.  At this point in the code, flags is zero,
    which means that we perform lookups using the wrong key.
    
    Fixes: 3f165b334e51 ("xfs: convert unwritten status of reverse mappings for shared files")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cea26dc41144eec9c99a27711c9595fc9abf8796
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Nov 9 18:30:59 2020 +0100

    nbd: fix a block_device refcount leak in nbd_release
    
    [ Upstream commit 2bd645b2d3f0bacadaa6037f067538e1cd4e42ef ]
    
    bdget_disk needs to be paired with bdput to not leak a reference
    on the block device inode.
    
    Fixes: 08ba91ee6e2c ("nbd: Add the nbd NBD_DISCONNECT_ON_CLOSE config flag.")
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dbb4514de04f59294670031a55cf91adf909685
Author: Billy Tsai <billy_tsai@aspeedtech.com>
Date:   Fri Oct 30 13:54:50 2020 +0800

    pinctrl: aspeed: Fix GPI only function problem.
    
    [ Upstream commit 9b92f5c51e9a41352d665f6f956bd95085a56a83 ]
    
    Some gpio pin at aspeed soc is input only and the prefix name of these
    pin is "GPI" only.
    This patch fine-tune the condition of GPIO check from "GPIO" to "GPI"
    and it will fix the usage error of banks D and E in the AST2400/AST2500
    and banks T and U in the AST2600.
    
    Fixes: 4d3d0e4272d8 ("pinctrl: Add core support for Aspeed SoCs")
    Signed-off-by: Billy Tsai <billy_tsai@aspeedtech.com>
    Reviewed-by: Andrew Jeffery <andrew@aj.id.au>
    Link: https://lore.kernel.org/r/20201030055450.29613-1-billy_tsai@aspeedtech.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7aec4fc87a23e0c54450227d5f30e67c43b4e1dd
Author: Andrew Jeffery <andrew@aj.id.au>
Date:   Thu Oct 22 01:43:59 2020 +0100

    ARM: 9019/1: kprobes: Avoid fortify_panic() when copying optprobe template
    
    [ Upstream commit 9fa2e7af3d53a4b769136eccc32c02e128a4ee51 ]
    
    Setting both CONFIG_KPROBES=y and CONFIG_FORTIFY_SOURCE=y on ARM leads
    to a panic in memcpy() when injecting a kprobe despite the fixes found
    in commit e46daee53bb5 ("ARM: 8806/1: kprobes: Fix false positive with
    FORTIFY_SOURCE") and commit 0ac569bf6a79 ("ARM: 8834/1: Fix: kprobes:
    optimized kprobes illegal instruction").
    
    arch/arm/include/asm/kprobes.h effectively declares
    the target type of the optprobe_template_entry assembly label as a u32
    which leads memcpy()'s __builtin_object_size() call to determine that
    the pointed-to object is of size four. However, the symbol is used as a handle
    for the optimised probe assembly template that is at least 96 bytes in size.
    The symbol's use despite its type blows up the memcpy() in ARM's
    arch_prepare_optimized_kprobe() with a false-positive fortify_panic() when it
    should instead copy the optimised probe template into place:
    
    ```
    $ sudo perf probe -a aspeed_g6_pinctrl_probe
    [  158.457252] detected buffer overflow in memcpy
    [  158.458069] ------------[ cut here ]------------
    [  158.458283] kernel BUG at lib/string.c:1153!
    [  158.458436] Internal error: Oops - BUG: 0 [#1] SMP ARM
    [  158.458768] Modules linked in:
    [  158.459043] CPU: 1 PID: 99 Comm: perf Not tainted 5.9.0-rc7-00038-gc53ebf8167e9 #158
    [  158.459296] Hardware name: Generic DT based system
    [  158.459529] PC is at fortify_panic+0x18/0x20
    [  158.459658] LR is at __irq_work_queue_local+0x3c/0x74
    [  158.459831] pc : [<8047451c>]    lr : [<8020ecd4>]    psr: 60000013
    [  158.460032] sp : be2d1d50  ip : be2d1c58  fp : be2d1d5c
    [  158.460174] r10: 00000006  r9 : 00000000  r8 : 00000060
    [  158.460348] r7 : 8011e434  r6 : b9e0b800  r5 : 7f000000  r4 : b9fe4f0c
    [  158.460557] r3 : 80c04cc8  r2 : 00000000  r1 : be7c03cc  r0 : 00000022
    [  158.460801] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    [  158.461037] Control: 10c5387d  Table: b9cd806a  DAC: 00000051
    [  158.461251] Process perf (pid: 99, stack limit = 0x81c71a69)
    [  158.461472] Stack: (0xbe2d1d50 to 0xbe2d2000)
    [  158.461757] 1d40:                                     be2d1d84 be2d1d60 8011e724 80474510
    [  158.462104] 1d60: b9e0b800 b9fe4f0c 00000000 b9fe4f14 80c8ec80 be235000 be2d1d9c be2d1d88
    [  158.462436] 1d80: 801cee44 8011e57c b9fe4f0c 00000000 be2d1dc4 be2d1da0 801d0ad0 801cedec
    [  158.462742] 1da0: 00000000 00000000 b9fe4f00 ffffffea 00000000 be235000 be2d1de4 be2d1dc8
    [  158.463087] 1dc0: 80204604 801d0738 00000000 00000000 b9fe4004 ffffffea be2d1e94 be2d1de8
    [  158.463428] 1de0: 80205434 80204570 00385c00 00000000 00000000 00000000 be2d1e14 be2d1e08
    [  158.463880] 1e00: 802ba014 b9fe4f00 b9e718c0 b9fe4f84 b9e71ec8 be2d1e24 00000000 00385c00
    [  158.464365] 1e20: 00000000 626f7270 00000065 802b905c be2d1e94 0000002e 00000000 802b9914
    [  158.464829] 1e40: be2d1e84 be2d1e50 802b9914 8028ff78 804629d0 b9e71ec0 0000002e b9e71ec0
    [  158.465141] 1e60: be2d1ea8 80c04cc8 00000cc0 b9e713c4 00000002 80205834 80205834 0000002e
    [  158.465488] 1e80: be235000 be235000 be2d1ea4 be2d1e98 80205854 80204e94 be2d1ecc be2d1ea8
    [  158.465806] 1ea0: 801ee4a0 80205840 00000002 80c04cc8 00000000 0000002e 0000002e 00000000
    [  158.466110] 1ec0: be2d1f0c be2d1ed0 801ee5c8 801ee428 00000000 be2d0000 006b1fd0 00000051
    [  158.466398] 1ee0: 00000000 b9eedf00 0000002e 80204410 006b1fd0 be2d1f60 00000000 00000004
    [  158.466763] 1f00: be2d1f24 be2d1f10 8020442c 801ee4c4 80205834 802c613c be2d1f5c be2d1f28
    [  158.467102] 1f20: 802c60ac 8020441c be2d1fac be2d1f38 8010c764 802e9888 be2d1f5c b9eedf00
    [  158.467447] 1f40: b9eedf00 006b1fd0 0000002e 00000000 be2d1f94 be2d1f60 802c634c 802c5fec
    [  158.467812] 1f60: 00000000 00000000 00000000 80c04cc8 006b1fd0 00000003 76f7a610 00000004
    [  158.468155] 1f80: 80100284 be2d0000 be2d1fa4 be2d1f98 802c63ec 802c62e8 00000000 be2d1fa8
    [  158.468508] 1fa0: 80100080 802c63e0 006b1fd0 00000003 00000003 006b1fd0 0000002e 00000000
    [  158.468858] 1fc0: 006b1fd0 00000003 76f7a610 00000004 006b1fb0 0026d348 00000017 7ef2738c
    [  158.469202] 1fe0: 76f3431c 7ef272d8 0014ec50 76f34338 60000010 00000003 00000000 00000000
    [  158.469461] Backtrace:
    [  158.469683] [<80474504>] (fortify_panic) from [<8011e724>] (arch_prepare_optimized_kprobe+0x1b4/0x1f8)
    [  158.470021] [<8011e570>] (arch_prepare_optimized_kprobe) from [<801cee44>] (alloc_aggr_kprobe+0x64/0x70)
    [  158.470287]  r9:be235000 r8:80c8ec80 r7:b9fe4f14 r6:00000000 r5:b9fe4f0c r4:b9e0b800
    [  158.470478] [<801cede0>] (alloc_aggr_kprobe) from [<801d0ad0>] (register_kprobe+0x3a4/0x5a0)
    [  158.470685]  r5:00000000 r4:b9fe4f0c
    [  158.470790] [<801d072c>] (register_kprobe) from [<80204604>] (__register_trace_kprobe+0xa0/0xa4)
    [  158.471001]  r9:be235000 r8:00000000 r7:ffffffea r6:b9fe4f00 r5:00000000 r4:00000000
    [  158.471188] [<80204564>] (__register_trace_kprobe) from [<80205434>] (trace_kprobe_create+0x5ac/0x9ac)
    [  158.471408]  r7:ffffffea r6:b9fe4004 r5:00000000 r4:00000000
    [  158.471553] [<80204e88>] (trace_kprobe_create) from [<80205854>] (create_or_delete_trace_kprobe+0x20/0x3c)
    [  158.471766]  r10:be235000 r9:be235000 r8:0000002e r7:80205834 r6:80205834 r5:00000002
    [  158.471949]  r4:b9e713c4
    [  158.472027] [<80205834>] (create_or_delete_trace_kprobe) from [<801ee4a0>] (trace_run_command+0x84/0x9c)
    [  158.472255] [<801ee41c>] (trace_run_command) from [<801ee5c8>] (trace_parse_run_command+0x110/0x1f8)
    [  158.472471]  r6:00000000 r5:0000002e r4:0000002e
    [  158.472594] [<801ee4b8>] (trace_parse_run_command) from [<8020442c>] (probes_write+0x1c/0x28)
    [  158.472800]  r10:00000004 r9:00000000 r8:be2d1f60 r7:006b1fd0 r6:80204410 r5:0000002e
    [  158.472968]  r4:b9eedf00
    [  158.473046] [<80204410>] (probes_write) from [<802c60ac>] (vfs_write+0xcc/0x1e8)
    [  158.473226] [<802c5fe0>] (vfs_write) from [<802c634c>] (ksys_write+0x70/0xf8)
    [  158.473400]  r8:00000000 r7:0000002e r6:006b1fd0 r5:b9eedf00 r4:b9eedf00
    [  158.473567] [<802c62dc>] (ksys_write) from [<802c63ec>] (sys_write+0x18/0x1c)
    [  158.473745]  r9:be2d0000 r8:80100284 r7:00000004 r6:76f7a610 r5:00000003 r4:006b1fd0
    [  158.473932] [<802c63d4>] (sys_write) from [<80100080>] (ret_fast_syscall+0x0/0x54)
    [  158.474126] Exception stack(0xbe2d1fa8 to 0xbe2d1ff0)
    [  158.474305] 1fa0:                   006b1fd0 00000003 00000003 006b1fd0 0000002e 00000000
    [  158.474573] 1fc0: 006b1fd0 00000003 76f7a610 00000004 006b1fb0 0026d348 00000017 7ef2738c
    [  158.474811] 1fe0: 76f3431c 7ef272d8 0014ec50 76f34338
    [  158.475171] Code: e24cb004 e1a01000 e59f0004 ebf40dd3 (e7f001f2)
    [  158.475847] ---[ end trace 55a5b31c08a29f00 ]---
    [  158.476088] Kernel panic - not syncing: Fatal exception
    [  158.476375] CPU0: stopping
    [  158.476709] CPU: 0 PID: 0 Comm: swapper/0 Tainted: G      D           5.9.0-rc7-00038-gc53ebf8167e9 #158
    [  158.477176] Hardware name: Generic DT based system
    [  158.477411] Backtrace:
    [  158.477604] [<8010dd28>] (dump_backtrace) from [<8010dfd4>] (show_stack+0x20/0x24)
    [  158.477990]  r7:00000000 r6:60000193 r5:00000000 r4:80c2f634
    [  158.478323] [<8010dfb4>] (show_stack) from [<8046390c>] (dump_stack+0xcc/0xe8)
    [  158.478686] [<80463840>] (dump_stack) from [<80110750>] (handle_IPI+0x334/0x3a0)
    [  158.479063]  r7:00000000 r6:00000004 r5:80b65cc8 r4:80c78278
    [  158.479352] [<8011041c>] (handle_IPI) from [<801013f8>] (gic_handle_irq+0x88/0x94)
    [  158.479757]  r10:10c5387d r9:80c01ed8 r8:00000000 r7:c0802000 r6:80c0537c r5:000003ff
    [  158.480146]  r4:c080200c r3:fffffff4
    [  158.480364] [<80101370>] (gic_handle_irq) from [<80100b6c>] (__irq_svc+0x6c/0x90)
    [  158.480748] Exception stack(0x80c01ed8 to 0x80c01f20)
    [  158.481031] 1ec0:                                                       000128bc 00000000
    [  158.481499] 1ee0: be7b8174 8011d3a0 80c00000 00000000 80c04cec 80c04d28 80c5d7c2 80a026d4
    [  158.482091] 1f00: 10c5387d 80c01f34 80c01f38 80c01f28 80109554 80109558 60000013 ffffffff
    [  158.482621]  r9:80c00000 r8:80c5d7c2 r7:80c01f0c r6:ffffffff r5:60000013 r4:80109558
    [  158.482983] [<80109518>] (arch_cpu_idle) from [<80818780>] (default_idle_call+0x38/0x120)
    [  158.483360] [<80818748>] (default_idle_call) from [<801585a8>] (do_idle+0xd4/0x158)
    [  158.483945]  r5:00000000 r4:80c00000
    [  158.484237] [<801584d4>] (do_idle) from [<801588f4>] (cpu_startup_entry+0x28/0x2c)
    [  158.484784]  r9:80c78000 r8:00000000 r7:80c78000 r6:80c78040 r5:80c04cc0 r4:000000d6
    [  158.485328] [<801588cc>] (cpu_startup_entry) from [<80810a78>] (rest_init+0x9c/0xbc)
    [  158.485930] [<808109dc>] (rest_init) from [<80b00ae4>] (arch_call_rest_init+0x18/0x1c)
    [  158.486503]  r5:80c04cc0 r4:00000001
    [  158.486857] [<80b00acc>] (arch_call_rest_init) from [<80b00fcc>] (start_kernel+0x46c/0x548)
    [  158.487589] [<80b00b60>] (start_kernel) from [<00000000>] (0x0)
    ```
    
    Fixes: e46daee53bb5 ("ARM: 8806/1: kprobes: Fix false positive with FORTIFY_SOURCE")
    Fixes: 0ac569bf6a79 ("ARM: 8834/1: Fix: kprobes: optimized kprobes illegal instruction")
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Tested-by: Luka Oreskovic <luka.oreskovic@sartura.hr>
    Tested-by: Joel Stanley <joel@jms.id.au>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Luka Oreskovic <luka.oreskovic@sartura.hr>
    Cc: Juraj Vijtiuk <juraj.vijtiuk@sartura.hr>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d17b4f35893469e6854afedce7056ba150eba03f
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Oct 14 13:46:38 2020 +0300

    pinctrl: intel: Set default bias in case no particular value given
    
    [ Upstream commit f3c75e7a9349d1d33eb53ddc1b31640994969f73 ]
    
    When GPIO library asks pin control to set the bias, it doesn't pass
    any value of it and argument is considered boolean (and this is true
    for ACPI GpioIo() / GpioInt() resources, by the way). Thus, individual
    drivers must behave well, when they got the resistance value of 1 Ohm,
    i.e. transforming it to sane default.
    
    In case of Intel pin control hardware the 5 kOhm sounds plausible
    because on one hand it's a minimum of resistors present in all
    hardware generations and at the same time it's high enough to minimize
    leakage current (will be only 200 uA with the above choice).
    
    Fixes: e57725eabf87 ("pinctrl: intel: Add support for hardware debouncer")
    Reported-by: Jamie McClymont <jamie@kwiius.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1934e17ab2eabcb09c8250ca0f26f7a6ad323975
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Thu Oct 15 02:50:02 2020 +0000

    iommu/amd: Increase interrupt remapping table limit to 512 entries
    
    [ Upstream commit 73db2fc595f358460ce32bcaa3be1f0cce4a2db1 ]
    
    Certain device drivers allocate IO queues on a per-cpu basis.
    On AMD EPYC platform, which can support up-to 256 cpu threads,
    this can exceed the current MAX_IRQ_PER_TABLE limit of 256,
    and result in the error message:
    
        AMD-Vi: Failed to allocate IRTE
    
    This has been observed with certain NVME devices.
    
    AMD IOMMU hardware can actually support upto 512 interrupt
    remapping table entries. Therefore, update the driver to
    match the hardware limit.
    
    Please note that this also increases the size of interrupt remapping
    table to 8KB per device when using the 128-bit IRTE format.
    
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Link: https://lore.kernel.org/r/20201015025002.87997-1-suravee.suthikulpanit@amd.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e03376ef7b5accfdf8aa4b188d6f73349c9aac0
Author: Hannes Reinecke <hare@suse.de>
Date:   Thu Sep 24 12:45:59 2020 +0200

    scsi: scsi_dh_alua: Avoid crash during alua_bus_detach()
    
    [ Upstream commit 5faf50e9e9fdc2117c61ff7e20da49cd6a29e0ca ]
    
    alua_bus_detach() might be running concurrently with alua_rtpg_work(), so
    we might trip over h->sdev == NULL and call BUG_ON().  The correct way of
    handling it is to not set h->sdev to NULL in alua_bus_detach(), and call
    rcu_synchronize() before the final delete to ensure that all concurrent
    threads have left the critical section.  Then we can get rid of the
    BUG_ON() and replace it with a simple if condition.
    
    Link: https://lore.kernel.org/r/1600167537-12509-1-git-send-email-jitendra.khasdev@oracle.com
    Link: https://lore.kernel.org/r/20200924104559.26753-1-hare@suse.de
    Cc: Brian Bunker <brian@purestorage.com>
    Acked-by: Brian Bunker <brian@purestorage.com>
    Tested-by: Jitendra Khasdev <jitendra.khasdev@oracle.com>
    Reviewed-by: Jitendra Khasdev <jitendra.khasdev@oracle.com>
    Signed-off-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6359350acb0c603b3bbb9fac089da69a4e3422e5
Author: Ye Bin <yebin10@huawei.com>
Date:   Fri Oct 9 15:02:15 2020 +0800

    cfg80211: regulatory: Fix inconsistent format argument
    
    [ Upstream commit db18d20d1cb0fde16d518fb5ccd38679f174bc04 ]
    
    Fix follow warning:
    [net/wireless/reg.c:3619]: (warning) %d in format string (no. 2)
    requires 'int' but the argument type is 'unsigned int'.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Link: https://lore.kernel.org/r/20201009070215.63695-1-yebin10@huawei.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e06a0d4e1430139520414c1196f0644de7279d47
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Oct 9 13:25:41 2020 +0200

    mac80211: fix use of skb payload instead of header
    
    [ Upstream commit 14f46c1e5108696ec1e5a129e838ecedf108c7bf ]
    
    When ieee80211_skb_resize() is called from ieee80211_build_hdr()
    the skb has no 802.11 header yet, in fact it consist only of the
    payload as the ethernet frame is removed. As such, we're using
    the payload data for ieee80211_is_mgmt(), which is of course
    completely wrong. This didn't really hurt us because these are
    always data frames, so we could only have added more tailroom
    than we needed if we determined it was a management frame and
    sdata->crypto_tx_tailroom_needed_cnt was false.
    
    However, syzbot found that of course there need not be any payload,
    so we're using at best uninitialized memory for the check.
    
    Fix this to pass explicitly the kind of frame that we have instead
    of checking there, by replacing the "bool may_encrypt" argument
    with an argument that can carry the three possible states - it's
    not going to be encrypted, it's a management frame, or it's a data
    frame (and then we check sdata->crypto_tx_tailroom_needed_cnt).
    
    Reported-by: syzbot+32fd1a1bfe355e93f1e2@syzkaller.appspotmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20201009132538.e1fd7f802947.I799b288466ea2815f9d4c84349fae697dca2f189@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cc45419cd83af567c190e5fc925d412989c6a58
Author: Evan Quan <evan.quan@amd.com>
Date:   Wed Oct 28 15:29:59 2020 +0800

    drm/amdgpu: perform srbm soft reset always on SDMA resume
    
    [ Upstream commit 253475c455eb5f8da34faa1af92709e7bb414624 ]
    
    This can address the random SDMA hang after pci config reset
    seen on Hawaii.
    
    Signed-off-by: Evan Quan <evan.quan@amd.com>
    Tested-by: Sandeep Raghuraman <sandy.8925@gmail.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01a982b2ff6d57c3344b77c63daaedee43a2fd1a
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Tue Oct 27 07:31:24 2020 +0000

    scsi: hpsa: Fix memory leak in hpsa_init_one()
    
    [ Upstream commit af61bc1e33d2c0ec22612b46050f5b58ac56a962 ]
    
    When hpsa_scsi_add_host() fails, h->lastlogicals is leaked since it is
    missing a free() in the error handler.
    
    Fix this by adding free() when hpsa_scsi_add_host() fails.
    
    Link: https://lore.kernel.org/r/20201027073125.14229-1-keitasuzuki.park@sslab.ics.keio.ac.jp
    Tested-by: Don Brace <don.brace@microchip.com>
    Acked-by: Don Brace <don.brace@microchip.com>
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a7bf1e54af1ce31c6a392ed5961e9f173f97da3
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Oct 28 13:42:18 2020 -0500

    gfs2: check for live vs. read-only file system in gfs2_fitrim
    
    [ Upstream commit c5c68724696e7d2f8db58a5fce3673208d35c485 ]
    
    Before this patch, gfs2_fitrim was not properly checking for a "live" file
    system. If the file system had something to trim and the file system
    was read-only (or spectator) it would start the trim, but when it starts
    the transaction, gfs2_trans_begin returns -EROFS (read-only file system)
    and it errors out. However, if the file system was already trimmed so
    there's no work to do, it never called gfs2_trans_begin. That code is
    bypassed so it never returns the error. Instead, it returns a good
    return code with 0 work. All this makes for inconsistent behavior:
    The same fstrim command can return -EROFS in one case and 0 in another.
    This tripped up xfstests generic/537 which reports the error as:
    
        +fstrim with unrecovered metadata just ate your filesystem
    
    This patch adds a check for a "live" (iow, active journal, iow, RW)
    file system, and if not, returns the error properly.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5d8432612909f0fcc3f17a983284f0912be2c47
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Oct 27 10:10:02 2020 -0500

    gfs2: Add missing truncate_inode_pages_final for sd_aspace
    
    [ Upstream commit a9dd945ccef07a904e412f208f8de708a3d7159e ]
    
    Gfs2 creates an address space for its rgrps called sd_aspace, but it never
    called truncate_inode_pages_final on it. This confused vfs greatly which
    tried to reference the address space after gfs2 had freed the superblock
    that contained it.
    
    This patch adds a call to truncate_inode_pages_final for sd_aspace, thus
    avoiding the use-after-free.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb0ecbd0fd38a593756f990f28e0c8ac896af54b
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Oct 27 10:10:01 2020 -0500

    gfs2: Free rd_bits later in gfs2_clear_rgrpd to fix use-after-free
    
    [ Upstream commit d0f17d3883f1e3f085d38572c2ea8edbd5150172 ]
    
    Function gfs2_clear_rgrpd calls kfree(rgd->rd_bits) before calling
    return_all_reservations, but return_all_reservations still dereferences
    rgd->rd_bits in __rs_deltree.  Fix that by moving the call to kfree below the
    call to return_all_reservations.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c97edc87112c10e4efde4d297b3428f8c27c4069
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Fri Oct 2 18:01:55 2020 +0300

    usb: gadget: goku_udc: fix potential crashes in probe
    
    [ Upstream commit 0d66e04875c5aae876cf3d4f4be7978fa2b00523 ]
    
    goku_probe() goes to error label "err" and invokes goku_remove()
    in case of failures of pci_enable_device(), pci_resource_start()
    and ioremap(). goku_remove() gets a device from
    pci_get_drvdata(pdev) and works with it without any checks, in
    particular it dereferences a corresponding pointer. But
    goku_probe() did not set this device yet. So, one can expect
    various crashes. The patch moves setting the device just after
    allocation of memory for it.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Reported-by: Pavel Andrianov <andrianov@ispras.ru>
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d08d9d74a7d3fb5340f7e64add315bbd871ab83d
Author: Masashi Honma <masashi.honma@gmail.com>
Date:   Sun Aug 9 08:32:58 2020 +0900

    ath9k_htc: Use appropriate rs_datalen type
    
    commit 5024f21c159f8c1668f581fff37140741c0b1ba9 upstream.
    
    kernel test robot says:
    drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:987:20: sparse: warning: incorrect type in assignment (different base types)
    drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:987:20: sparse:    expected restricted __be16 [usertype] rs_datalen
    drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:987:20: sparse:    got unsigned short [usertype]
    drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:988:13: sparse: warning: restricted __be16 degrades to integer
    drivers/net/wireless/ath/ath9k/htc_drv_txrx.c:1001:13: sparse: warning: restricted __be16 degrades to integer
    
    Indeed rs_datalen has host byte order, so modify it's own type.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: cd486e627e67 ("ath9k_htc: Discard undersized packets")
    Signed-off-by: Masashi Honma <masashi.honma@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200808233258.4596-1-masashi.honma@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa948c5a196c7ed21901d1056d60bdfdaa6e934f
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Sep 11 17:42:28 2019 +0100

    Btrfs: fix missing error return if writeback for extent buffer never started
    
    [ Upstream commit 0607eb1d452d45c5ac4c745a9e9e0d95152ea9d0 ]
    
    If lock_extent_buffer_for_io() fails, it returns a negative value, but its
    caller btree_write_cache_pages() ignores such error. This means that a
    call to flush_write_bio(), from lock_extent_buffer_for_io(), might have
    failed. We should make btree_write_cache_pages() notice such error values
    and stop immediatelly, making sure filemap_fdatawrite_range() returns an
    error to the transaction commit path. A failure from flush_write_bio()
    should also result in the endio callback end_bio_extent_buffer_writepage()
    being invoked, which sets the BTRFS_FS_*_ERR bits appropriately, so that
    there's no risk a transaction or log commit doesn't catch a writeback
    failure.
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6ecd734a1f4c29088f29faafc3caa7fba951d52
Author: Brian Foster <bfoster@redhat.com>
Date:   Thu Oct 29 14:30:48 2020 -0700

    xfs: flush new eof page on truncate to avoid post-eof corruption
    
    [ Upstream commit 869ae85dae64b5540e4362d7fe4cd520e10ec05c ]
    
    It is possible to expose non-zeroed post-EOF data in XFS if the new
    EOF page is dirty, backed by an unwritten block and the truncate
    happens to race with writeback. iomap_truncate_page() will not zero
    the post-EOF portion of the page if the underlying block is
    unwritten. The subsequent call to truncate_setsize() will, but
    doesn't dirty the page. Therefore, if writeback happens to complete
    after iomap_truncate_page() (so it still sees the unwritten block)
    but before truncate_setsize(), the cached page becomes inconsistent
    with the on-disk block. A mapped read after the associated page is
    reclaimed or invalidated exposes non-zero post-EOF data.
    
    For example, consider the following sequence when run on a kernel
    modified to explicitly flush the new EOF page within the race
    window:
    
    $ xfs_io -fc "falloc 0 4k" -c fsync /mnt/file
    $ xfs_io -c "pwrite 0 4k" -c "truncate 1k" /mnt/file
      ...
    $ xfs_io -c "mmap 0 4k" -c "mread -v 1k 8" /mnt/file
    00000400:  00 00 00 00 00 00 00 00  ........
    $ umount /mnt/; mount <dev> /mnt/
    $ xfs_io -c "mmap 0 4k" -c "mread -v 1k 8" /mnt/file
    00000400:  cd cd cd cd cd cd cd cd  ........
    
    Update xfs_setattr_size() to explicitly flush the new EOF page prior
    to the page truncate to ensure iomap has the latest state of the
    underlying block.
    
    Fixes: 68a9f5e7007c ("xfs: implement iomap based buffered write path")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ed8e344fc46b260508ad529c615da9e5165059a
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Tue Oct 13 17:39:47 2020 +0200

    can: peak_canfd: pucan_handle_can_rx(): fix echo management when loopback is on
    
    [ Upstream commit 93ef65e5a6357cc7381f85fcec9283fe29970045 ]
    
    Echo management is driven by PUCAN_MSG_LOOPED_BACK bit, while loopback
    frames are identified with PUCAN_MSG_SELF_RECEIVE bit. Those bits are set
    for each outgoing frame written to the IP core so that a copy of each one
    will be placed into the rx path. Thus,
    
    - when PUCAN_MSG_LOOPED_BACK is set then the rx frame is an echo of a
      previously sent frame,
    - when PUCAN_MSG_LOOPED_BACK+PUCAN_MSG_SELF_RECEIVE are set, then the rx
      frame is an echo AND a loopback frame. Therefore, this frame must be
      put into the socket rx path too.
    
    This patch fixes how CAN frames are handled when these are sent while the
    can interface is configured in "loopback on" mode.
    
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Link: https://lore.kernel.org/r/20201013153947.28012-1-s.grosjean@peak-system.com
    Fixes: 8ac8321e4a79 ("can: peak: add support for PEAK PCAN-PCIe FD CAN-FD boards")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e8012bb7a71c2825d1ac47238ecb2e3442523b0
Author: Stephane Grosjean <s.grosjean@peak-system.com>
Date:   Wed Oct 14 10:56:31 2020 +0200

    can: peak_usb: peak_usb_get_ts_time(): fix timestamp wrapping
    
    [ Upstream commit ecc7b4187dd388549544195fb13a11b4ea8e6a84 ]
    
    Fabian Inostroza <fabianinostrozap@gmail.com> has discovered a potential
    problem in the hardware timestamp reporting from the PCAN-USB USB CAN interface
    (only), related to the fact that a timestamp of an event may precede the
    timestamp used for synchronization when both records are part of the same USB
    packet. However, this case was used to detect the wrapping of the time counter.
    
    This patch details and fixes the two identified cases where this problem can
    occur.
    
    Reported-by: Fabian Inostroza <fabianinostrozap@gmail.com>
    Signed-off-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Link: https://lore.kernel.org/r/20201014085631.15128-1-s.grosjean@peak-system.com
    Fixes: bb4785551f64 ("can: usb: PEAK-System Technik USB adapters driver core")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 128cf1b3e82f02cae7f468724a866840d03b7b84
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 13 17:06:04 2020 +0300

    can: peak_usb: add range checking in decode operations
    
    [ Upstream commit a6921dd524fe31d1f460c161d3526a407533b6db ]
    
    These values come from skb->data so Smatch considers them untrusted.  I
    believe Smatch is correct but I don't have a way to test this.
    
    The usb_if->dev[] array has 2 elements but the index is in the 0-15
    range without checks.  The cfd->len can be up to 255 but the maximum
    valid size is CANFD_MAX_DLEN (64) so that could lead to memory
    corruption.
    
    Fixes: 0a25e1f4f185 ("can: peak_usb: add support for PEAK new CANFD USB adapters")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200813140604.GA456946@mwanda
    Acked-by: Stephane Grosjean <s.grosjean@peak-system.com>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb53d2bda9234f16c3b7458b3d53b34574425cfa
Author: Oleksij Rempel <o.rempel@pengutronix.de>
Date:   Wed Dec 18 09:39:02 2019 +0100

    can: can_create_echo_skb(): fix echo skb generation: always use skb_clone()
    
    [ Upstream commit 286228d382ba6320f04fa2e7c6fc8d4d92e428f4 ]
    
    All user space generated SKBs are owned by a socket (unless injected into the
    key via AF_PACKET). If a socket is closed, all associated skbs will be cleaned
    up.
    
    This leads to a problem when a CAN driver calls can_put_echo_skb() on a
    unshared SKB. If the socket is closed prior to the TX complete handler,
    can_get_echo_skb() and the subsequent delivering of the echo SKB to all
    registered callbacks, a SKB with a refcount of 0 is delivered.
    
    To avoid the problem, in can_get_echo_skb() the original SKB is now always
    cloned, regardless of shared SKB or not. If the process exists it can now
    safely discard its SKBs, without disturbing the delivery of the echo SKB.
    
    The problem shows up in the j1939 stack, when it clones the incoming skb, which
    detects the already 0 refcount.
    
    We can easily reproduce this with following example:
    
    testj1939 -B -r can0: &
    cansend can0 1823ff40#0123
    
    WARNING: CPU: 0 PID: 293 at lib/refcount.c:25 refcount_warn_saturate+0x108/0x174
    refcount_t: addition on 0; use-after-free.
    Modules linked in: coda_vpu imx_vdoa videobuf2_vmalloc dw_hdmi_ahb_audio vcan
    CPU: 0 PID: 293 Comm: cansend Not tainted 5.5.0-rc6-00376-g9e20dcb7040d #1
    Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
    Backtrace:
    [<c010f570>] (dump_backtrace) from [<c010f90c>] (show_stack+0x20/0x24)
    [<c010f8ec>] (show_stack) from [<c0c3e1a4>] (dump_stack+0x8c/0xa0)
    [<c0c3e118>] (dump_stack) from [<c0127fec>] (__warn+0xe0/0x108)
    [<c0127f0c>] (__warn) from [<c01283c8>] (warn_slowpath_fmt+0xa8/0xcc)
    [<c0128324>] (warn_slowpath_fmt) from [<c0539c0c>] (refcount_warn_saturate+0x108/0x174)
    [<c0539b04>] (refcount_warn_saturate) from [<c0ad2cac>] (j1939_can_recv+0x20c/0x210)
    [<c0ad2aa0>] (j1939_can_recv) from [<c0ac9dc8>] (can_rcv_filter+0xb4/0x268)
    [<c0ac9d14>] (can_rcv_filter) from [<c0aca2cc>] (can_receive+0xb0/0xe4)
    [<c0aca21c>] (can_receive) from [<c0aca348>] (can_rcv+0x48/0x98)
    [<c0aca300>] (can_rcv) from [<c09b1fdc>] (__netif_receive_skb_one_core+0x64/0x88)
    [<c09b1f78>] (__netif_receive_skb_one_core) from [<c09b2070>] (__netif_receive_skb+0x38/0x94)
    [<c09b2038>] (__netif_receive_skb) from [<c09b2130>] (netif_receive_skb_internal+0x64/0xf8)
    [<c09b20cc>] (netif_receive_skb_internal) from [<c09b21f8>] (netif_receive_skb+0x34/0x19c)
    [<c09b21c4>] (netif_receive_skb) from [<c0791278>] (can_rx_offload_napi_poll+0x58/0xb4)
    
    Fixes: 0ae89beb283a ("can: add destructor for self generated skbs")
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: http://lore.kernel.org/r/20200124132656.22156-1-o.rempel@pengutronix.de
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18e95315b97f411c1c9b044e34697cf80356dbcc
Author: Oliver Hartkopp <socketcan@hartkopp.net>
Date:   Tue Oct 20 08:44:43 2020 +0200

    can: dev: __can_get_echo_skb(): fix real payload length return value for RTR frames
    
    [ Upstream commit ed3320cec279407a86bc4c72edc4a39eb49165ec ]
    
    The can_get_echo_skb() function returns the number of received bytes to
    be used for netdev statistics. In the case of RTR frames we get a valid
    (potential non-zero) data length value which has to be passed for further
    operations. But on the wire RTR frames have no payload length. Therefore
    the value to be used in the statistics has to be zero for RTR frames.
    
    Reported-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Link: https://lore.kernel.org/r/20201020064443.80164-1-socketcan@hartkopp.net
    Fixes: cf5046b309b3 ("can: dev: let can_get_echo_skb() return dlc of CAN frame")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d79b294f07dbc52cca0471798c529b1d5cf46f2
Author: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
Date:   Sat Oct 3 00:41:45 2020 +0900

    can: dev: can_get_echo_skb(): prevent call to kfree_skb() in hard IRQ context
    
    [ Upstream commit 2283f79b22684d2812e5c76fc2280aae00390365 ]
    
    If a driver calls can_get_echo_skb() during a hardware IRQ (which is often, but
    not always, the case), the 'WARN_ON(in_irq)' in
    net/core/skbuff.c#skb_release_head_state() might be triggered, under network
    congestion circumstances, together with the potential risk of a NULL pointer
    dereference.
    
    The root cause of this issue is the call to kfree_skb() instead of
    dev_kfree_skb_irq() in net/core/dev.c#enqueue_to_backlog().
    
    This patch prevents the skb to be freed within the call to netif_rx() by
    incrementing its reference count with skb_get(). The skb is finally freed by
    one of the in-irq-context safe functions: dev_consume_skb_any() or
    dev_kfree_skb_any(). The "any" version is used because some drivers might call
    can_get_echo_skb() in a normal context.
    
    The reason for this issue to occur is that initially, in the core network
    stack, loopback skb were not supposed to be received in hardware IRQ context.
    The CAN stack is an exeption.
    
    This bug was previously reported back in 2017 in [1] but the proposed patch
    never got accepted.
    
    While [1] directly modifies net/core/dev.c, we try to propose here a
    smoother modification local to CAN network stack (the assumption
    behind is that only CAN devices are affected by this issue).
    
    [1] http://lore.kernel.org/r/57a3ffb6-3309-3ad5-5a34-e93c3fe3614d@cetitec.com
    
    Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Link: https://lore.kernel.org/r/20201002154219.4887-2-mailhol.vincent@wanadoo.fr
    Fixes: 39549eef3587 ("can: CAN Network device driver and Netlink interface")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2af2c211d85d38d9ce9ebac3a4e9be8ca6e25b0
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Thu Jun 18 12:47:06 2020 +0200

    can: rx-offload: don't call kfree_skb() from IRQ context
    
    [ Upstream commit 2ddd6bfe7bdbb6c661835c3ff9cab8e0769940a6 ]
    
    A CAN driver, using the rx-offload infrastructure, is reading CAN frames
    (usually in IRQ context) from the hardware and placing it into the rx-offload
    queue to be delivered to the networking stack via NAPI.
    
    In case the rx-offload queue is full, trying to add more skbs results in the
    skbs being dropped using kfree_skb(). If done from hard-IRQ context this
    results in the following warning:
    
    [  682.552693] ------------[ cut here ]------------
    [  682.557360] WARNING: CPU: 0 PID: 3057 at net/core/skbuff.c:650 skb_release_head_state+0x74/0x84
    [  682.566075] Modules linked in: can_raw can coda_vpu flexcan dw_hdmi_ahb_audio v4l2_jpeg imx_vdoa can_dev
    [  682.575597] CPU: 0 PID: 3057 Comm: cansend Tainted: G        W         5.7.0+ #18
    [  682.583098] Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)
    [  682.589657] [<c0112628>] (unwind_backtrace) from [<c010c1c4>] (show_stack+0x10/0x14)
    [  682.597423] [<c010c1c4>] (show_stack) from [<c06c481c>] (dump_stack+0xe0/0x114)
    [  682.604759] [<c06c481c>] (dump_stack) from [<c0128f10>] (__warn+0xc0/0x10c)
    [  682.611742] [<c0128f10>] (__warn) from [<c0129314>] (warn_slowpath_fmt+0x5c/0xc0)
    [  682.619248] [<c0129314>] (warn_slowpath_fmt) from [<c0b95dec>] (skb_release_head_state+0x74/0x84)
    [  682.628143] [<c0b95dec>] (skb_release_head_state) from [<c0b95e08>] (skb_release_all+0xc/0x24)
    [  682.636774] [<c0b95e08>] (skb_release_all) from [<c0b95eac>] (kfree_skb+0x74/0x1c8)
    [  682.644479] [<c0b95eac>] (kfree_skb) from [<bf001d1c>] (can_rx_offload_queue_sorted+0xe0/0xe8 [can_dev])
    [  682.654051] [<bf001d1c>] (can_rx_offload_queue_sorted [can_dev]) from [<bf001d6c>] (can_rx_offload_get_echo_skb+0x48/0x94 [can_dev])
    [  682.666007] [<bf001d6c>] (can_rx_offload_get_echo_skb [can_dev]) from [<bf01efe4>] (flexcan_irq+0x194/0x5dc [flexcan])
    [  682.676734] [<bf01efe4>] (flexcan_irq [flexcan]) from [<c019c1ec>] (__handle_irq_event_percpu+0x4c/0x3ec)
    [  682.686322] [<c019c1ec>] (__handle_irq_event_percpu) from [<c019c5b8>] (handle_irq_event_percpu+0x2c/0x88)
    [  682.695993] [<c019c5b8>] (handle_irq_event_percpu) from [<c019c64c>] (handle_irq_event+0x38/0x5c)
    [  682.704887] [<c019c64c>] (handle_irq_event) from [<c01a1058>] (handle_fasteoi_irq+0xc8/0x180)
    [  682.713432] [<c01a1058>] (handle_fasteoi_irq) from [<c019b2c0>] (generic_handle_irq+0x30/0x44)
    [  682.722063] [<c019b2c0>] (generic_handle_irq) from [<c019b8f8>] (__handle_domain_irq+0x64/0xdc)
    [  682.730783] [<c019b8f8>] (__handle_domain_irq) from [<c06df4a4>] (gic_handle_irq+0x48/0x9c)
    [  682.739158] [<c06df4a4>] (gic_handle_irq) from [<c0100b30>] (__irq_svc+0x70/0x98)
    [  682.746656] Exception stack(0xe80e9dd8 to 0xe80e9e20)
    [  682.751725] 9dc0:                                                       00000001 e80e8000
    [  682.759922] 9de0: e820cf80 00000000 ffffe000 00000000 eaf08fe4 00000000 600d0013 00000000
    [  682.768117] 9e00: c1732e3c c16093a8 e820d4c0 e80e9e28 c018a57c c018b870 600d0013 ffffffff
    [  682.776315] [<c0100b30>] (__irq_svc) from [<c018b870>] (lock_acquire+0x108/0x4e8)
    [  682.783821] [<c018b870>] (lock_acquire) from [<c0e938e4>] (down_write+0x48/0xa8)
    [  682.791242] [<c0e938e4>] (down_write) from [<c02818dc>] (unlink_file_vma+0x24/0x40)
    [  682.798922] [<c02818dc>] (unlink_file_vma) from [<c027a258>] (free_pgtables+0x34/0xb8)
    [  682.806858] [<c027a258>] (free_pgtables) from [<c02835a4>] (exit_mmap+0xe4/0x170)
    [  682.814361] [<c02835a4>] (exit_mmap) from [<c01248e0>] (mmput+0x5c/0x110)
    [  682.821171] [<c01248e0>] (mmput) from [<c012e910>] (do_exit+0x374/0xbe4)
    [  682.827892] [<c012e910>] (do_exit) from [<c0130888>] (do_group_exit+0x38/0xb4)
    [  682.835132] [<c0130888>] (do_group_exit) from [<c0130914>] (__wake_up_parent+0x0/0x14)
    [  682.843063] irq event stamp: 1936
    [  682.846399] hardirqs last  enabled at (1935): [<c02938b0>] rmqueue+0xf4/0xc64
    [  682.853553] hardirqs last disabled at (1936): [<c0100b20>] __irq_svc+0x60/0x98
    [  682.860799] softirqs last  enabled at (1878): [<bf04cdcc>] raw_release+0x108/0x1f0 [can_raw]
    [  682.869256] softirqs last disabled at (1876): [<c0b8f478>] release_sock+0x18/0x98
    [  682.876753] ---[ end trace 7bca4751ce44c444 ]---
    
    This patch fixes the problem by replacing the kfree_skb() by
    dev_kfree_skb_any(), as rx-offload might be called from threaded IRQ handlers
    as well.
    
    Fixes: ca913f1ac024 ("can: rx-offload: can_rx_offload_queue_sorted(): fix error handling, avoid skb mem leak")
    Fixes: 6caf8a6d6586 ("can: rx-offload: can_rx_offload_queue_tail(): fix error handling, avoid skb mem leak")
    Link: http://lore.kernel.org/r/20201019190524.1285319-3-mkl@pengutronix.de
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c9fb464633cd4b056aa82f2ec9de78cb20b3a5f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Nov 3 13:18:07 2020 +0300

    ALSA: hda: prevent undefined shift in snd_hdac_ext_bus_get_link()
    
    [ Upstream commit 158e1886b6262c1d1c96a18c85fac5219b8bf804 ]
    
    This is harmless, but the "addr" comes from the user and it could lead
    to a negative shift or to shift wrapping if it's too high.
    
    Fixes: 0b00a5615dc4 ("ALSA: hdac_ext: add hdac extended controller")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20201103101807.GC1127762@mwanda
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1286e8fc02e9113aa32def7e4d31743d888eea7
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Mon Nov 2 00:31:03 2020 +0100

    perf tools: Add missing swap for ino_generation
    
    [ Upstream commit fe01adb72356a4e2f8735e4128af85921ca98fa1 ]
    
    We are missing swap for ino_generation field.
    
    Fixes: 5c5e854bc760 ("perf tools: Add attr->mmap2 support")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Acked-by: Namhyung Kim <namhyung@kernel.org>
    Link: https://lore.kernel.org/r/20201101233103.3537427-2-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50f0cfe1c7af3f569ff193f6e03581800fc01b74
Author: zhuoliang zhang <zhuoliang.zhang@mediatek.com>
Date:   Fri Oct 23 09:05:35 2020 +0200

    net: xfrm: fix a race condition during allocing spi
    
    [ Upstream commit a779d91314ca7208b7feb3ad817b62904397c56d ]
    
    we found that the following race condition exists in
    xfrm_alloc_userspi flow:
    
    user thread                                    state_hash_work thread
    ----                                           ----
    xfrm_alloc_userspi()
     __find_acq_core()
       /*alloc new xfrm_state:x*/
       xfrm_state_alloc()
       /*schedule state_hash_work thread*/
       xfrm_hash_grow_check()                      xfrm_hash_resize()
     xfrm_alloc_spi                                  /*hold lock*/
          x->id.spi = htonl(spi)                     spin_lock_bh(&net->xfrm.xfrm_state_lock)
          /*waiting lock release*/                     xfrm_hash_transfer()
          spin_lock_bh(&net->xfrm.xfrm_state_lock)      /*add x into hlist:net->xfrm.state_byspi*/
                                                            hlist_add_head_rcu(&x->byspi)
                                                     spin_unlock_bh(&net->xfrm.xfrm_state_lock)
    
        /*add x into hlist:net->xfrm.state_byspi 2 times*/
        hlist_add_head_rcu(&x->byspi)
    
    1. a new state x is alloced in xfrm_state_alloc() and added into the bydst hlist
    in  __find_acq_core() on the LHS;
    2. on the RHS, state_hash_work thread travels the old bydst and tranfers every xfrm_state
    (include x) into the new bydst hlist and new byspi hlist;
    3. user thread on the LHS gets the lock and adds x into the new byspi hlist again.
    
    So the same xfrm_state (x) is added into the same list_hash
    (net->xfrm.state_byspi) 2 times that makes the list_hash become
    an inifite loop.
    
    To fix the race, x->id.spi = htonl(spi) in the xfrm_alloc_spi() is moved
    to the back of spin_lock_bh, sothat state_hash_work thread no longer add x
    which id.spi is zero into the hash_list.
    
    Fixes: f034b5d4efdf ("[XFRM]: Dynamic xfrm_state hash table sizing.")
    Signed-off-by: zhuoliang zhang <zhuoliang.zhang@mediatek.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15a90574f9000496755096e422a9145e90dbc61f
Author: Olaf Hering <olaf@aepfle.de>
Date:   Thu Oct 8 09:12:15 2020 +0200

    hv_balloon: disable warning when floor reached
    
    [ Upstream commit 2c3bd2a5c86fe744e8377733c5e511a5ca1e14f5 ]
    
    It is not an error if the host requests to balloon down, but the VM
    refuses to do so. Without this change a warning is logged in dmesg
    every five minutes.
    
    Fixes:  b3bb97b8a49f3 ("Drivers: hv: balloon: Add logging for dynamic memory operations")
    
    Signed-off-by: Olaf Hering <olaf@aepfle.de>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20201008071216.16554-1-olaf@aepfle.de
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34d1828cfd4c635a50b1ab160ed72cdb971112c4
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Oct 15 21:41:44 2020 +0100

    genirq: Let GENERIC_IRQ_IPI select IRQ_DOMAIN_HIERARCHY
    
    [ Upstream commit 151a535171be6ff824a0a3875553ea38570f4c05 ]
    
    kernel/irq/ipi.c otherwise fails to compile if nothing else
    selects it.
    
    Fixes: 379b656446a3 ("genirq: Add GENERIC_IRQ_IPI Kconfig symbol")
    Reported-by: Pavel Machek <pavel@ucw.cz>
    Tested-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20201015101222.GA32747@amd
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe21062f252e74223f5fde22eb25e670a61ebb64
Author: Johannes Thumshirn <johannes.thumshirn@wdc.com>
Date:   Tue Sep 22 17:27:29 2020 +0900

    btrfs: reschedule when cloning lots of extents
    
    [ Upstream commit 6b613cc97f0ace77f92f7bc112b8f6ad3f52baf8 ]
    
    We have several occurrences of a soft lockup from fstest's generic/175
    testcase, which look more or less like this one:
    
      watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [xfs_io:10030]
      Kernel panic - not syncing: softlockup: hung tasks
      CPU: 0 PID: 10030 Comm: xfs_io Tainted: G             L    5.9.0-rc5+ #768
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4-rebuilt.opensuse.org 04/01/2014
      Call Trace:
       <IRQ>
       dump_stack+0x77/0xa0
       panic+0xfa/0x2cb
       watchdog_timer_fn.cold+0x85/0xa5
       ? lockup_detector_update_enable+0x50/0x50
       __hrtimer_run_queues+0x99/0x4c0
       ? recalibrate_cpu_khz+0x10/0x10
       hrtimer_run_queues+0x9f/0xb0
       update_process_times+0x28/0x80
       tick_handle_periodic+0x1b/0x60
       __sysvec_apic_timer_interrupt+0x76/0x210
       asm_call_on_stack+0x12/0x20
       </IRQ>
       sysvec_apic_timer_interrupt+0x7f/0x90
       asm_sysvec_apic_timer_interrupt+0x12/0x20
      RIP: 0010:btrfs_tree_unlock+0x91/0x1a0 [btrfs]
      RSP: 0018:ffffc90007123a58 EFLAGS: 00000282
      RAX: ffff8881cea2fbe0 RBX: ffff8881cea2fbe0 RCX: 0000000000000000
      RDX: ffff8881d23fd200 RSI: ffffffff82045220 RDI: ffff8881cea2fba0
      RBP: 0000000000000001 R08: 0000000000000000 R09: 0000000000000032
      R10: 0000160000000000 R11: 0000000000001000 R12: 0000000000001000
      R13: ffff8882357fd5b0 R14: ffff88816fa76e70 R15: ffff8881cea2fad0
       ? btrfs_tree_unlock+0x15b/0x1a0 [btrfs]
       btrfs_release_path+0x67/0x80 [btrfs]
       btrfs_insert_replace_extent+0x177/0x2c0 [btrfs]
       btrfs_replace_file_extents+0x472/0x7c0 [btrfs]
       btrfs_clone+0x9ba/0xbd0 [btrfs]
       btrfs_clone_files.isra.0+0xeb/0x140 [btrfs]
       ? file_update_time+0xcd/0x120
       btrfs_remap_file_range+0x322/0x3b0 [btrfs]
       do_clone_file_range+0xb7/0x1e0
       vfs_clone_file_range+0x30/0xa0
       ioctl_file_clone+0x8a/0xc0
       do_vfs_ioctl+0x5b2/0x6f0
       __x64_sys_ioctl+0x37/0xa0
       do_syscall_64+0x33/0x40
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f87977fc247
      RSP: 002b:00007ffd51a2f6d8 EFLAGS: 00000206 ORIG_RAX: 0000000000000010
      RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f87977fc247
      RDX: 00007ffd51a2f710 RSI: 000000004020940d RDI: 0000000000000003
      RBP: 0000000000000004 R08: 00007ffd51a79080 R09: 0000000000000000
      R10: 00005621f11352f2 R11: 0000000000000206 R12: 0000000000000000
      R13: 0000000000000000 R14: 00005621f128b958 R15: 0000000080000000
      Kernel Offset: disabled
      ---[ end Kernel panic - not syncing: softlockup: hung tasks ]---
    
    All of these lockup reports have the call chain btrfs_clone_files() ->
    btrfs_clone() in common. btrfs_clone_files() calls btrfs_clone() with
    both source and destination extents locked and loops over the source
    extent to create the clones.
    
    Conditionally reschedule in the btrfs_clone() loop, to give some time back
    to other processes.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f54bb8ffea90fb989eb62008a7850f8c1f34766e
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 1 08:09:01 2020 -0400

    btrfs: sysfs: init devices outside of the chunk_mutex
    
    [ Upstream commit ca10845a56856fff4de3804c85e6424d0f6d0cde ]
    
    While running btrfs/061, btrfs/073, btrfs/078, or btrfs/178 we hit the
    following lockdep splat:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      5.9.0-rc3+ #4 Not tainted
      ------------------------------------------------------
      kswapd0/100 is trying to acquire lock:
      ffff96ecc22ef4a0 (&delayed_node->mutex){+.+.}-{3:3}, at: __btrfs_release_delayed_node.part.0+0x3f/0x330
    
      but task is already holding lock:
      ffffffff8dd74700 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #3 (fs_reclaim){+.+.}-{0:0}:
             fs_reclaim_acquire+0x65/0x80
             slab_pre_alloc_hook.constprop.0+0x20/0x200
             kmem_cache_alloc+0x37/0x270
             alloc_inode+0x82/0xb0
             iget_locked+0x10d/0x2c0
             kernfs_get_inode+0x1b/0x130
             kernfs_get_tree+0x136/0x240
             sysfs_get_tree+0x16/0x40
             vfs_get_tree+0x28/0xc0
             path_mount+0x434/0xc00
             __x64_sys_mount+0xe3/0x120
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #2 (kernfs_mutex){+.+.}-{3:3}:
             __mutex_lock+0x7e/0x7e0
             kernfs_add_one+0x23/0x150
             kernfs_create_link+0x63/0xa0
             sysfs_do_create_link_sd+0x5e/0xd0
             btrfs_sysfs_add_devices_dir+0x81/0x130
             btrfs_init_new_device+0x67f/0x1250
             btrfs_ioctl+0x1ef/0x2e20
             __x64_sys_ioctl+0x83/0xb0
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #1 (&fs_info->chunk_mutex){+.+.}-{3:3}:
             __mutex_lock+0x7e/0x7e0
             btrfs_chunk_alloc+0x125/0x3a0
             find_free_extent+0xdf6/0x1210
             btrfs_reserve_extent+0xb3/0x1b0
             btrfs_alloc_tree_block+0xb0/0x310
             alloc_tree_block_no_bg_flush+0x4a/0x60
             __btrfs_cow_block+0x11a/0x530
             btrfs_cow_block+0x104/0x220
             btrfs_search_slot+0x52e/0x9d0
             btrfs_insert_empty_items+0x64/0xb0
             btrfs_insert_delayed_items+0x90/0x4f0
             btrfs_commit_inode_delayed_items+0x93/0x140
             btrfs_log_inode+0x5de/0x2020
             btrfs_log_inode_parent+0x429/0xc90
             btrfs_log_new_name+0x95/0x9b
             btrfs_rename2+0xbb9/0x1800
             vfs_rename+0x64f/0x9f0
             do_renameat2+0x320/0x4e0
             __x64_sys_rename+0x1f/0x30
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #0 (&delayed_node->mutex){+.+.}-{3:3}:
             __lock_acquire+0x119c/0x1fc0
             lock_acquire+0xa7/0x3d0
             __mutex_lock+0x7e/0x7e0
             __btrfs_release_delayed_node.part.0+0x3f/0x330
             btrfs_evict_inode+0x24c/0x500
             evict+0xcf/0x1f0
             dispose_list+0x48/0x70
             prune_icache_sb+0x44/0x50
             super_cache_scan+0x161/0x1e0
             do_shrink_slab+0x178/0x3c0
             shrink_slab+0x17c/0x290
             shrink_node+0x2b2/0x6d0
             balance_pgdat+0x30a/0x670
             kswapd+0x213/0x4c0
             kthread+0x138/0x160
             ret_from_fork+0x1f/0x30
    
      other info that might help us debug this:
    
      Chain exists of:
        &delayed_node->mutex --> kernfs_mutex --> fs_reclaim
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(fs_reclaim);
                                     lock(kernfs_mutex);
                                     lock(fs_reclaim);
        lock(&delayed_node->mutex);
    
       *** DEADLOCK ***
    
      3 locks held by kswapd0/100:
       #0: ffffffff8dd74700 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
       #1: ffffffff8dd65c50 (shrinker_rwsem){++++}-{3:3}, at: shrink_slab+0x115/0x290
       #2: ffff96ed2ade30e0 (&type->s_umount_key#36){++++}-{3:3}, at: super_cache_scan+0x38/0x1e0
    
      stack backtrace:
      CPU: 0 PID: 100 Comm: kswapd0 Not tainted 5.9.0-rc3+ #4
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      Call Trace:
       dump_stack+0x8b/0xb8
       check_noncircular+0x12d/0x150
       __lock_acquire+0x119c/0x1fc0
       lock_acquire+0xa7/0x3d0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       __mutex_lock+0x7e/0x7e0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       ? lock_acquire+0xa7/0x3d0
       ? find_held_lock+0x2b/0x80
       __btrfs_release_delayed_node.part.0+0x3f/0x330
       btrfs_evict_inode+0x24c/0x500
       evict+0xcf/0x1f0
       dispose_list+0x48/0x70
       prune_icache_sb+0x44/0x50
       super_cache_scan+0x161/0x1e0
       do_shrink_slab+0x178/0x3c0
       shrink_slab+0x17c/0x290
       shrink_node+0x2b2/0x6d0
       balance_pgdat+0x30a/0x670
       kswapd+0x213/0x4c0
       ? _raw_spin_unlock_irqrestore+0x41/0x50
       ? add_wait_queue_exclusive+0x70/0x70
       ? balance_pgdat+0x670/0x670
       kthread+0x138/0x160
       ? kthread_create_worker_on_cpu+0x40/0x40
       ret_from_fork+0x1f/0x30
    
    This happens because we are holding the chunk_mutex at the time of
    adding in a new device.  However we only need to hold the
    device_list_mutex, as we're going to iterate over the fs_devices
    devices.  Move the sysfs init stuff outside of the chunk_mutex to get
    rid of this lockdep splat.
    
    CC: stable@vger.kernel.org # 4.4.x: f3cd2c58110dad14e: btrfs: sysfs, rename device_link add/remove functions
    CC: stable@vger.kernel.org # 4.4.x
    Reported-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51d538da4630435a998b9b2895c1b5a39efa9a97
Author: Ming Lei <ming.lei@redhat.com>
Date:   Wed Oct 28 15:24:34 2020 +0800

    nbd: don't update block size after device is started
    
    [ Upstream commit b40813ddcd6bf9f01d020804e4cb8febc480b9e4 ]
    
    Mounted NBD device can be resized, one use case is rbd-nbd.
    
    Fix the issue by setting up default block size, then not touch it
    in nbd_size_update() any more. This kind of usage is aligned with loop
    which has same use case too.
    
    Cc: stable@vger.kernel.org
    Fixes: c8a83a6b54d0 ("nbd: Use set_blocksize() to set device blocksize")
    Reported-by: lining <lining2020x@163.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Cc: Josef Bacik <josef@toxicpanda.com>
    Cc: Jan Kara <jack@suse.cz>
    Tested-by: lining <lining2020x@163.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 53fee8563399ab61b72b619588544bb0db61c331
Author: Zeng Tao <prime.zeng@hisilicon.com>
Date:   Tue Sep 1 17:30:13 2020 +0800

    time: Prevent undefined behaviour in timespec64_to_ns()
    
    [ Upstream commit cb47755725da7b90fecbb2aa82ac3b24a7adb89b ]
    
    UBSAN reports:
    
    Undefined behaviour in ./include/linux/time64.h:127:27
    signed integer overflow:
    17179869187 * 1000000000 cannot be represented in type 'long long int'
    Call Trace:
     timespec64_to_ns include/linux/time64.h:127 [inline]
     set_cpu_itimer+0x65c/0x880 kernel/time/itimer.c:180
     do_setitimer+0x8e/0x740 kernel/time/itimer.c:245
     __x64_sys_setitimer+0x14c/0x2c0 kernel/time/itimer.c:336
     do_syscall_64+0xa1/0x540 arch/x86/entry/common.c:295
    
    Commit bd40a175769d ("y2038: itimer: change implementation to timespec64")
    replaced the original conversion which handled time clamping correctly with
    timespec64_to_ns() which has no overflow protection.
    
    Fix it in timespec64_to_ns() as this is not necessarily limited to the
    usage in itimers.
    
    [ tglx: Added comment and adjusted the fixes tag ]
    
    Fixes: 361a3bf00582 ("time64: Add time64.h header and define struct timespec64")
    Signed-off-by: Zeng Tao <prime.zeng@hisilicon.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1598952616-6416-1-git-send-email-prime.zeng@hisilicon.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cffbe35851da701622df8cb98997c2fdabeae07c
Author: Shijie Luo <luoshijie1@huawei.com>
Date:   Sun Nov 1 17:07:40 2020 -0800

    mm: mempolicy: fix potential pte_unmap_unlock pte error
    
    [ Upstream commit 3f08842098e842c51e3b97d0dcdebf810b32558e ]
    
    When flags in queue_pages_pte_range don't have MPOL_MF_MOVE or
    MPOL_MF_MOVE_ALL bits, code breaks and passing origin pte - 1 to
    pte_unmap_unlock seems like not a good idea.
    
    queue_pages_pte_range can run in MPOL_MF_MOVE_ALL mode which doesn't
    migrate misplaced pages but returns with EIO when encountering such a
    page.  Since commit a7f40cfe3b7a ("mm: mempolicy: make mbind() return
    -EIO when MPOL_MF_STRICT is specified") and early break on the first pte
    in the range results in pte_unmap_unlock on an underflow pte.  This can
    lead to lockups later on when somebody tries to lock the pte resp.
    page_table_lock again..
    
    Fixes: a7f40cfe3b7a ("mm: mempolicy: make mbind() return -EIO when MPOL_MF_STRICT is specified")
    Signed-off-by: Shijie Luo <luoshijie1@huawei.com>
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Oscar Salvador <osalvador@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Feilong Lin <linfeilong@huawei.com>
    Cc: Shijie Luo <luoshijie1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201019074853.50856-1-luoshijie1@huawei.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2b1730c507fb8528a36bc4c677255f9f40a621ee
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Mon Nov 2 15:31:27 2020 -0500

    ring-buffer: Fix recursion protection transitions between interrupt context
    
    [ Upstream commit b02414c8f045ab3b9afc816c3735bc98c5c3d262 ]
    
    The recursion protection of the ring buffer depends on preempt_count() to be
    correct. But it is possible that the ring buffer gets called after an
    interrupt comes in but before it updates the preempt_count(). This will
    trigger a false positive in the recursion code.
    
    Use the same trick from the ftrace function callback recursion code which
    uses a "transition" bit that gets set, to allow for a single recursion for
    to handle transitions between contexts.
    
    Cc: stable@vger.kernel.org
    Fixes: 567cd4da54ff4 ("ring-buffer: User context bit recursion checking")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5bf68a12b3c429aa9a34fb6a7e011e96fd25296
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Mon Nov 2 22:27:27 2020 +0100

    regulator: defer probe when trying to get voltage from unresolved supply
    
    [ Upstream commit cf1ad559a20d1930aa7b47a52f54e1f8718de301 ]
    
    regulator_get_voltage_rdev() is called in regulator probe() when
    applying machine constraints.  The "fixed" commit exposed the problem
    that non-bypassed regulators can forward the request to its parent
    (like bypassed ones) supply. Return -EPROBE_DEFER when the supply
    is expected but not resolved yet.
    
    Fixes: aea6cb99703e ("regulator: resolve supply after creating regulator")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Reported-by: Ondřej Jirman <megous@megous.com>
    Reported-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Tested-by: Ondřej Jirman <megous@megous.com>
    Link: https://lore.kernel.org/r/a9041d68b4d35e4a2dd71629c8a6422662acb5ee.1604351936.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a865e76e35b2a9d37a095a9bee28849d865568d5
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 10 21:10:29 2020 +0100

    Linux 4.14.206
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 333fc487b1c33af844b7205c84864bb53e7ff64d
Author: Len Brown <len.brown@intel.com>
Date:   Tue Nov 10 13:00:00 2020 -0800

    powercap: restrict energy meter to root access
    
    commit 949dd0104c496fa7c14991a23c03c62e44637e71 upstream.
    
    Remove non-privileged user access to power data contained in
    /sys/class/powercap/intel-rapl*/*/energy_uj
    
    Non-privileged users currently have read access to power data and can
    use this data to form a security attack. Some privileged
    drivers/applications need read access to this data, but don't expose it
    to non-privileged users.
    
    For example, thermald uses this data to ensure that power management
    works correctly. Thus removing non-privileged access is preferred over
    completely disabling this power reporting capability with
    CONFIG_INTEL_RAPL=n.
    
    Fixes: 95677a9a3847 ("PowerCap: Fix mode for energy counter")
    Signed-off-by: Len Brown <len.brown@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 456ea29b2c428995e4c46a909a3e7ab245f96f20
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 17:50:30 2023 +0500

    Revert "fscrypt: return -EXDEV for incompatible rename or link into encrypted dir"
    
    This reverts commit aca85554599d9d55d19d202f0f16bb478cce3cc9.

commit a19866526818f010046f86f2d5c6720ec19ffc4a
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 17:50:17 2023 +0500

    Revert "Resolve left over conflict"
    
    This reverts commit 4aabdacfb114070812c1e384dbc05930630cb0e9.

commit 16260b2159c117f2fe1132d4e89e7b51c360dd6c
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 17:45:19 2023 +0500

    Revert change made to stock oem changes from 5d00228cc4f1ade680ccc83eae44b607671c3c2c

commit 4aabdacfb114070812c1e384dbc05930630cb0e9
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 17:39:50 2023 +0500

    Resolve left over conflict

commit 2abedcc38686106962048a4844b3c1f26d0a6e27
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Nov 10 10:29:08 2020 +0100

    Linux 4.14.205
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201109125016.734107741@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f71727461062626e204d811f193481e46bbd974c
Author: Tomasz Maciej Nowak <tmn505@gmail.com>
Date:   Thu Feb 27 17:52:32 2020 +0100

    arm64: dts: marvell: espressobin: add ethernet alias
    
    commit 5253cb8c00a6f4356760efb38bca0e0393aa06de upstream.
    
    The maker of this board and its variants, stores MAC address in U-Boot
    environment. Add alias for bootloader to recognise, to which ethernet
    node inject the factory MAC address.
    
    Signed-off-by: Tomasz Maciej Nowak <tmn505@gmail.com>
    Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
    [pali: Backported to 4.14]
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 666e50738cd421107124fa029ad1478ce2d46424
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Oct 22 17:38:22 2020 +0200

    PM: runtime: Resume the device earlier in __device_release_driver()
    
    commit 9226c504e364158a17a68ff1fe9d67d266922f50 upstream.
    
    Since the device is resumed from runtime-suspend in
    __device_release_driver() anyway, it is better to do that before
    looking for busy managed device links from it to consumers, because
    if there are any, device_links_unbind_consumers() will be called
    and it will cause the consumer devices' drivers to unbind, so the
    consumer devices will be runtime-resumed.  In turn, resuming each
    consumer device will cause the supplier to be resumed and when the
    runtime PM references from the given consumer to it are dropped, it
    may be suspended.  Then, the runtime-resume of the next consumer
    will cause the supplier to resume again and so on.
    
    Update the code accordingly.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Fixes: 9ed9895370ae ("driver core: Functional dependencies tracking support")
    Cc: All applicable <stable@vger.kernel.org> # All applicable
    Tested-by: Xiang Chen <chenxiang66@hisilicon.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04b5887b95f0fe10cfe51f7c9ed6c11e090839a3
Author: Vineet Gupta <Vineet.Gupta1@synopsys.com>
Date:   Mon Oct 19 19:19:57 2020 -0700

    Revert "ARC: entry: fix potential EFA clobber when TIF_SYSCALL_TRACE"
    
    This reverts commit 00fdec98d9881bf5173af09aebd353ab3b9ac729.
    (but only from 5.2 and prior kernels)
    
    The original commit was a preventive fix based on code-review and was
    auto-picked for stable back-port (for better or worse).
    It was OK for v5.3+ kernels, but turned up needing an implicit change
    68e5c6f073bcf70 "(ARC: entry: EV_Trap expects r10 (vs. r9) to have
     exception cause)" merged in v5.3 which itself was not backported.
    So to summarize the stable backport of this patch for v5.2 and prior
    kernels is busted and it won't boot.
    
    The obvious solution is backport 68e5c6f073bcf70 but that is a pain as
    it doesn't revert cleanly and each of affected kernels (so far v4.19,
    v4.14, v4.9, v4.4) needs a slightly different massaged varaint.
    So the easier fix is to simply revert the backport from 5.2 and prior.
    The issue was not a big deal as it would cause strace to sporadically
    not work correctly.
    
    Waldemar Brodkorb first reported this when running ARC uClibc regressions
    on latest stable kernels (with offending backport). Once he bisected it,
    the analysis was trivial, so thx to him for this.
    
    Reported-by: Waldemar Brodkorb <wbx@uclibc-ng.org>
    Bisected-by: Waldemar Brodkorb <wbx@uclibc-ng.org>
    Cc: stable <stable@vger.kernel.org> # 5.2 and prior
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfb30751125a5d815bd08ace5a2dc00658b4dd24
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue Oct 27 15:01:17 2020 -0700

    ARC: stack unwinding: avoid indefinite looping
    
    commit 328d2168ca524d501fc4b133d6be076142bd305c upstream.
    
    Currently stack unwinder is a while(1) loop which relies on the dwarf
    unwinder to signal termination, which in turn relies on dwarf info to do
    so. This in theory could cause an infinite loop if the dwarf info was
    somehow messed up or the register contents were etc.
    
    This fix thus detects the excessive looping and breaks the loop.
    
    | Mem: 26184K used, 1009136K free, 0K shrd, 0K buff, 14416K cached
    | CPU:  0.0% usr 72.8% sys  0.0% nic 27.1% idle  0.0% io  0.0% irq  0.0% sirq
    | Load average: 4.33 2.60 1.11 2/74 139
    |   PID  PPID USER     STAT   VSZ %VSZ CPU %CPU COMMAND
    |   133     2 root     SWN      0  0.0   3 22.9 [rcu_torture_rea]
    |   132     2 root     SWN      0  0.0   0 22.0 [rcu_torture_rea]
    |   131     2 root     SWN      0  0.0   3 21.5 [rcu_torture_rea]
    |   126     2 root     RW       0  0.0   2  5.4 [rcu_torture_wri]
    |   129     2 root     SWN      0  0.0   0  0.2 [rcu_torture_fak]
    |   137     2 root     SW       0  0.0   0  0.2 [rcu_torture_cbf]
    |   127     2 root     SWN      0  0.0   0  0.1 [rcu_torture_fak]
    |   138   115 root     R     1464  0.1   2  0.1 top
    |   130     2 root     SWN      0  0.0   0  0.1 [rcu_torture_fak]
    |   128     2 root     SWN      0  0.0   0  0.1 [rcu_torture_fak]
    |   115     1 root     S     1472  0.1   1  0.0 -/bin/sh
    |   104     1 root     S     1464  0.1   0  0.0 inetd
    |     1     0 root     S     1456  0.1   2  0.0 init
    |    78     1 root     S     1456  0.1   0  0.0 syslogd -O /var/log/messages
    |   134     2 root     SW       0  0.0   2  0.0 [rcu_torture_sta]
    |    10     2 root     IW       0  0.0   1  0.0 [rcu_preempt]
    |    88     2 root     IW       0  0.0   1  0.0 [kworker/1:1-eve]
    |    66     2 root     IW       0  0.0   2  0.0 [kworker/2:2-eve]
    |    39     2 root     IW       0  0.0   2  0.0 [kworker/2:1-eve]
    | unwinder looping too long, aborting !
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2caee372d48875af8def7f0a071a217b23c7d459
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Fri Nov 6 13:54:29 2020 +0800

    usb: mtu3: fix panic in mtu3_gadget_stop()
    
    commit 20914919ad31849ee2b9cfe0428f4a20335c9e2a upstream.
    
    This patch fixes a possible issue when mtu3_gadget_stop()
    already assigned NULL to mtu->gadget_driver during mtu_gadget_disconnect().
    
    [<ffffff9008161974>] notifier_call_chain+0xa4/0x128
    [<ffffff9008161fd4>] __atomic_notifier_call_chain+0x84/0x138
    [<ffffff9008162ec0>] notify_die+0xb0/0x120
    [<ffffff900809e340>] die+0x1f8/0x5d0
    [<ffffff90080d03b4>] __do_kernel_fault+0x19c/0x280
    [<ffffff90080d04dc>] do_bad_area+0x44/0x140
    [<ffffff90080d0f9c>] do_translation_fault+0x4c/0x90
    [<ffffff9008080a78>] do_mem_abort+0xb8/0x258
    [<ffffff90080849d0>] el1_da+0x24/0x3c
    [<ffffff9009bde01c>] mtu3_gadget_disconnect+0xac/0x128
    [<ffffff9009bd576c>] mtu3_irq+0x34c/0xc18
    [<ffffff90082ac03c>] __handle_irq_event_percpu+0x2ac/0xcd0
    [<ffffff90082acae0>] handle_irq_event_percpu+0x80/0x138
    [<ffffff90082acc44>] handle_irq_event+0xac/0x148
    [<ffffff90082b71cc>] handle_fasteoi_irq+0x234/0x568
    [<ffffff90082a8708>] generic_handle_irq+0x48/0x68
    [<ffffff90082a96ac>] __handle_domain_irq+0x264/0x1740
    [<ffffff90080819f4>] gic_handle_irq+0x14c/0x250
    [<ffffff9008084cec>] el1_irq+0xec/0x194
    [<ffffff90085b985c>] dma_pool_alloc+0x6e4/0xae0
    [<ffffff9008d7f890>] cmdq_mbox_pool_alloc_impl+0xb0/0x238
    [<ffffff9008d80904>] cmdq_pkt_alloc_buf+0x2dc/0x7c0
    [<ffffff9008d80f60>] cmdq_pkt_add_cmd_buffer+0x178/0x270
    [<ffffff9008d82320>] cmdq_pkt_perf_begin+0x108/0x148
    [<ffffff9008d824d8>] cmdq_pkt_create+0x178/0x1f0
    [<ffffff9008f96230>] mtk_crtc_config_default_path+0x328/0x7a0
    [<ffffff90090246cc>] mtk_drm_idlemgr_kick+0xa6c/0x1460
    [<ffffff9008f9bbb4>] mtk_drm_crtc_atomic_begin+0x1a4/0x1a68
    [<ffffff9008e8df9c>] drm_atomic_helper_commit_planes+0x154/0x878
    [<ffffff9008f2fb70>] mtk_atomic_complete.isra.16+0xe80/0x19c8
    [<ffffff9008f30910>] mtk_atomic_commit+0x258/0x898
    [<ffffff9008ef142c>] drm_atomic_commit+0xcc/0x108
    [<ffffff9008ef7cf0>] drm_mode_atomic_ioctl+0x1c20/0x2580
    [<ffffff9008ebc768>] drm_ioctl_kernel+0x118/0x1b0
    [<ffffff9008ebcde8>] drm_ioctl+0x5c0/0x920
    [<ffffff900863b030>] do_vfs_ioctl+0x188/0x1820
    [<ffffff900863c754>] SyS_ioctl+0x8c/0xa0
    
    Fixes: df2069acb005 ("usb: Add MediaTek USB3 DRD driver")
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Acked-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/1604642069-20961-1-git-send-email-macpaul.lin@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55f8efece79f132528cda03ed7aa0fa850929adc
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Nov 2 09:58:21 2020 -0500

    USB: Add NO_LPM quirk for Kingston flash drive
    
    commit afaa2e745a246c5ab95103a65b1ed00101e1bc63 upstream.
    
    In Bugzilla #208257, Julien Humbert reports that a 32-GB Kingston
    flash drive spontaneously disconnects and reconnects, over and over.
    Testing revealed that disabling Link Power Management for the drive
    fixed the problem.
    
    This patch adds a quirk entry for that drive to turn off LPM permanently.
    
    CC: Hans de Goede <jwrdegoede@fedoraproject.org>
    CC: <stable@vger.kernel.org>
    Reported-and-tested-by: Julien Humbert <julroy67@gmail.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20201102145821.GA1478741@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad64d7a7d4b95223a533324b9442d9ab6401dd44
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Tue Nov 3 13:44:25 2020 +0100

    USB: serial: option: add Telit FN980 composition 0x1055
    
    commit db0362eeb22992502764e825c79b922d7467e0eb upstream.
    
    Add the following Telit FN980 composition:
    
    0x1055: tty, adb, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20201103124425.12940-1-dnlplm@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27bdec3d2195aa864ad6a6574c2316eacdfe6ce7
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Sat Oct 31 23:54:58 2020 +0100

    USB: serial: option: add LE910Cx compositions 0x1203, 0x1230, 0x1231
    
    commit 489979b4aab490b6b917c11dc02d81b4b742784a upstream.
    
    Add following Telit LE910Cx compositions:
    
    0x1203: rndis, tty, adb, tty, tty, tty, tty
    0x1230: tty, adb, rmnet, audio, tty, tty, tty, tty
    0x1231: rndis, tty, adb, audio, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Link: https://lore.kernel.org/r/20201031225458.10512-1-dnlplm@gmail.com
    [ johan: add comments after entries ]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e17dcf0b4c4c513e9d5f6e28ef72481a178bbaa
Author: Ziyi Cao <kernel@septs.pw>
Date:   Tue Oct 20 00:08:06 2020 +0800

    USB: serial: option: add Quectel EC200T module support
    
    commit a46b973bced1ba57420752bf38426acd9f6cbfa6 upstream.
    
    Add usb product id of the Quectel EC200T module.
    
    Signed-off-by: Ziyi Cao <kernel@septs.pw>
    Link: https://lore.kernel.org/r/17f8a2a3-ce0f-4be7-8544-8fdf286907d0@www.fastmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0ddc988d49f1c7e9806eaf73b61c1f74b73296a
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Oct 26 09:25:48 2020 +0100

    USB: serial: cyberjack: fix write-URB completion race
    
    commit 985616f0457d9f555fff417d0da56174f70cc14f upstream.
    
    The write-URB busy flag was being cleared before the completion handler
    was done with the URB, something which could lead to corrupt transfers
    due to a racing write request if the URB is resubmitted.
    
    Fixes: 507ca9bc0476 ("[PATCH] USB: add ability for usb-serial drivers to determine if their write urb is currently being used.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.13
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dedd552b5847a5f189f85e6b561690da791f3813
Author: Qinglang Miao <miaoqinglang@huawei.com>
Date:   Tue Nov 3 16:49:42 2020 +0800

    serial: txx9: add missing platform_driver_unregister() on error in serial_txx9_init
    
    commit 0c5fc92622ed5531ff324b20f014e9e3092f0187 upstream.
    
    Add the missing platform_driver_unregister() before return
    from serial_txx9_init in the error handling case when failed
    to register serial_txx9_pci_driver with macro ENABLE_SERIAL_TXX9_PCI
    defined.
    
    Fixes: ab4382d27412 ("tty: move drivers/serial/ to drivers/tty/serial/")
    Signed-off-by: Qinglang Miao <miaoqinglang@huawei.com>
    Link: https://lore.kernel.org/r/20201103084942.109076-1-miaoqinglang@huawei.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17ee4e466d43f300a2567483cc3eddda00855030
Author: Claire Chang <tientzu@chromium.org>
Date:   Mon Nov 2 20:07:49 2020 +0800

    serial: 8250_mtk: Fix uart_get_baud_rate warning
    
    commit 912ab37c798770f21b182d656937072b58553378 upstream.
    
    Mediatek 8250 port supports speed higher than uartclk / 16. If the baud
    rates in both the new and the old termios setting are higher than
    uartclk / 16, the WARN_ON in uart_get_baud_rate() will be triggered.
    Passing NULL as the old termios so uart_get_baud_rate() will use
    uartclk / 16 - 1 as the new baud rate which will be replaced by the
    original baud rate later by tty_termios_encode_baud_rate() in
    mtk8250_set_termios().
    
    Fixes: 551e553f0d4a ("serial: 8250_mtk: Fix high-speed baud rates clamping")
    Signed-off-by: Claire Chang <tientzu@chromium.org>
    Link: https://lore.kernel.org/r/20201102120749.374458-1-tientzu@chromium.org
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a3bde2c5173e3468892da56e6768f8077d6cfd
Author: Eddy Wu <itseddy0402@gmail.com>
Date:   Sat Nov 7 14:47:22 2020 +0800

    fork: fix copy_process(CLONE_PARENT) race with the exiting ->real_parent
    
    commit b4e00444cab4c3f3fec876dc0cccc8cbb0d1a948 upstream.
    
    current->group_leader->exit_signal may change during copy_process() if
    current->real_parent exits.
    
    Move the assignment inside tasklist_lock to avoid the race.
    
    Signed-off-by: Eddy Wu <eddy_wu@trendmicro.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06af490d9e794c4558c9c9f4bff24584236c28c7
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Nov 8 16:38:06 2020 +0100

    vt: Disable KD_FONT_OP_COPY
    
    commit 3c4e0dff2095c579b142d5a0693257f1c58b4804 upstream.
    
    It's buggy:
    
    On Fri, Nov 06, 2020 at 10:30:08PM +0800, Minh Yuan wrote:
    > We recently discovered a slab-out-of-bounds read in fbcon in the latest
    > kernel ( v5.10-rc2 for now ).  The root cause of this vulnerability is that
    > "fbcon_do_set_font" did not handle "vc->vc_font.data" and
    > "vc->vc_font.height" correctly, and the patch
    > <https://lkml.org/lkml/2020/9/27/223> for VT_RESIZEX can't handle this
    > issue.
    >
    > Specifically, we use KD_FONT_OP_SET to set a small font.data for tty6, and
    > use  KD_FONT_OP_SET again to set a large font.height for tty1. After that,
    > we use KD_FONT_OP_COPY to assign tty6's vc_font.data to tty1's vc_font.data
    > in "fbcon_do_set_font", while tty1 retains the original larger
    > height. Obviously, this will cause an out-of-bounds read, because we can
    > access a smaller vc_font.data with a larger vc_font.height.
    
    Further there was only one user ever.
    - Android's loadfont, busybox and console-tools only ever use OP_GET
      and OP_SET
    - fbset documentation only mentions the kernel cmdline font: option,
      not anything else.
    - systemd used OP_COPY before release 232 published in Nov 2016
    
    Now unfortunately the crucial report seems to have gone down with
    gmane, and the commit message doesn't say much. But the pull request
    hints at OP_COPY being broken
    
    https://github.com/systemd/systemd/pull/3651
    
    So in other words, this never worked, and the only project which
    foolishly every tried to use it, realized that rather quickly too.
    
    Instead of trying to fix security issues here on dead code by adding
    missing checks, fix the entire thing by removing the functionality.
    
    Note that systemd code using the OP_COPY function ignored the return
    value, so it doesn't matter what we're doing here really - just in
    case a lone server somewhere happens to be extremely unlucky and
    running an affected old version of systemd. The relevant code from
    font_copy_to_all_vcs() in systemd was:
    
            /* copy font from active VT, where the font was uploaded to */
            cfo.op = KD_FONT_OP_COPY;
            cfo.height = vcs.v_active-1; /* tty1 == index 0 */
            (void) ioctl(vcfd, KDFONTOP, &cfo);
    
    Note this just disables the ioctl, garbage collecting the now unused
    callbacks is left for -next.
    
    v2: Tetsuo found the old mail, which allowed me to find it on another
    archive. Add the link too.
    
    Acked-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    References: https://lists.freedesktop.org/archives/systemd-devel/2016-June/036935.html
    References: https://github.com/systemd/systemd/pull/3651
    Cc: Greg KH <greg@kroah.com>
    Cc: Peilin Ye <yepeilin.cs@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://lore.kernel.org/r/20201108153806.3140315-1-daniel.vetter@ffwll.ch
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6069d7049d8ad6b2b6d56998c90503a4674efbe6
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Tue Oct 27 21:49:01 2020 +0800

    ACPI: NFIT: Fix comparison to '-ENXIO'
    
    [ Upstream commit 85f971b65a692b68181438e099b946cc06ed499b ]
    
    Initial value of rc is '-ENXIO', and we should
    use the initial value to check it.
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Pankaj Gupta <pankaj.gupta.linux@gmail.com>
    Reviewed-by: Vishal Verma <vishal.l.verma@intel.com>
    [ rjw: Subject edit ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a595df5ec98961ef51cc860b0215b2e362b3fcea
Author: Hoegeun Kwon <hoegeun.kwon@samsung.com>
Date:   Tue Oct 27 13:14:42 2020 +0900

    drm/vc4: drv: Add error handding for bind
    
    [ Upstream commit 9ce0af3e9573fb84c4c807183d13ea2a68271e4b ]
    
    There is a problem that if vc4_drm bind fails, a memory leak occurs on
    the drm_property_create side. Add error handding for drm_mode_config.
    
    Signed-off-by: Hoegeun Kwon <hoegeun.kwon@samsung.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201027041442.30352-2-hoegeun.kwon@samsung.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e0a128496a1cb418699071c28d24f9cef7c2f47
Author: Jeff Vander Stoep <jeffv@google.com>
Date:   Fri Oct 23 16:37:57 2020 +0200

    vsock: use ns_capable_noaudit() on socket create
    
    [ Upstream commit af545bb5ee53f5261db631db2ac4cde54038bdaf ]
    
    During __vsock_create() CAP_NET_ADMIN is used to determine if the
    vsock_sock->trusted should be set to true. This value is used later
    for determing if a remote connection should be allowed to connect
    to a restricted VM. Unfortunately, if the caller doesn't have
    CAP_NET_ADMIN, an audit message such as an selinux denial is
    generated even if the caller does not want a trusted socket.
    
    Logging errors on success is confusing. To avoid this, switch the
    capable(CAP_NET_ADMIN) check to the noaudit version.
    
    Reported-by: Roman Kiryanov <rkir@google.com>
    https://android-review.googlesource.com/c/device/generic/goldfish/+/1468545/
    Signed-off-by: Jeff Vander Stoep <jeffv@google.com>
    Reviewed-by: James Morris <jamorris@linux.microsoft.com>
    Link: https://lore.kernel.org/r/20201023143757.377574-1-jeffv@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57d5c79a1931b6abfd508d976dee847b5fd4d5f1
Author: Ming Lei <ming.lei@redhat.com>
Date:   Sat Oct 10 11:25:39 2020 +0800

    scsi: core: Don't start concurrent async scan on same host
    
    [ Upstream commit 831e3405c2a344018a18fcc2665acc5a38c3a707 ]
    
    The current scanning mechanism is supposed to fall back to a synchronous
    host scan if an asynchronous scan is in progress. However, this rule isn't
    strictly respected, scsi_prep_async_scan() doesn't hold scan_mutex when
    checking shost->async_scan. When scsi_scan_host() is called concurrently,
    two async scans on same host can be started and a hang in do_scan_async()
    is observed.
    
    Fixes this issue by checking & setting shost->async_scan atomically with
    shost->scan_mutex.
    
    Link: https://lore.kernel.org/r/20201010032539.426615-1-ming.lei@redhat.com
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Ewan D. Milne <emilne@redhat.com>
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bd6d0b58514ee5563de456200068a3dd0908d84
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Thu Oct 22 16:58:42 2020 -0400

    blk-cgroup: Pre-allocate tree node on blkg_conf_prep
    
    [ Upstream commit f255c19b3ab46d3cad3b1b2e1036f4c926cb1d0c ]
    
    Similarly to commit 457e490f2b741 ("blkcg: allocate struct blkcg_gq
    outside request queue spinlock"), blkg_create can also trigger
    occasional -ENOMEM failures at the radix insertion because any
    allocation inside blkg_create has to be non-blocking, making it more
    likely to fail.  This causes trouble for userspace tools trying to
    configure io weights who need to deal with this condition.
    
    This patch reduces the occurrence of -ENOMEMs on this path by preloading
    the radix tree element on a GFP_KERNEL context, such that we guarantee
    the later non-blocking insertion won't fail.
    
    A similar solution exists in blkcg_init_queue for the same situation.
    
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 179bc8984743ee0af04e8b3421a6e1cde431fbc6
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Thu Oct 22 16:58:41 2020 -0400

    blk-cgroup: Fix memleak on error path
    
    [ Upstream commit 52abfcbd57eefdd54737fc8c2dc79d8f46d4a3e5 ]
    
    If new_blkg allocation raced with blk_policy change and
    blkg_lookup_check fails, new_blkg is leaked.
    
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fc6f70ddaede7488cb1783d3a9f84835feaefac
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Wed Oct 21 11:53:59 2020 +0200

    of: Fix reserved-memory overlap detection
    
    [ Upstream commit ca05f33316559a04867295dd49f85aeedbfd6bfd ]
    
    The reserved-memory overlap detection code fails to detect overlaps if
    either of the regions starts at address 0x0.  The code explicitly checks
    for and ignores such regions, apparently in order to ignore dynamically
    allocated regions which have an address of 0x0 at this point.  These
    dynamically allocated regions also have a size of 0x0 at this point, so
    fix this by removing the check and sorting the dynamically allocated
    regions ahead of any static regions at address 0x0.
    
    For example, there are two overlaps in this case but they are not
    currently reported:
    
            foo@0 {
                    reg = <0x0 0x2000>;
            };
    
            bar@0 {
                    reg = <0x0 0x1000>;
            };
    
            baz@1000 {
                    reg = <0x1000 0x1000>;
            };
    
            quux {
                    size = <0x1000>;
            };
    
    but they are after this patch:
    
     OF: reserved mem: OVERLAP DETECTED!
     bar@0 (0x00000000--0x00001000) overlaps with foo@0 (0x00000000--0x00002000)
     OF: reserved mem: OVERLAP DETECTED!
     foo@0 (0x00000000--0x00002000) overlaps with baz@1000 (0x00001000--0x00002000)
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Link: https://lore.kernel.org/r/ded6fd6b47b58741aabdcc6967f73eca6a3f311e.1603273666.git-series.vincent.whitchurch@axis.com
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 511e436abfd9e72c6ead91cf109cbb1485982d1a
Author: Kairui Song <kasong@redhat.com>
Date:   Wed Oct 14 17:24:28 2020 +0800

    x86/kexec: Use up-to-dated screen_info copy to fill boot params
    
    [ Upstream commit afc18069a2cb7ead5f86623a5f3d4ad6e21f940d ]
    
    kexec_file_load() currently reuses the old boot_params.screen_info,
    but if drivers have change the hardware state, boot_param.screen_info
    could contain invalid info.
    
    For example, the video type might be no longer VGA, or the frame buffer
    address might be changed. If the kexec kernel keeps using the old screen_info,
    kexec'ed kernel may attempt to write to an invalid framebuffer
    memory region.
    
    There are two screen_info instances globally available, boot_params.screen_info
    and screen_info. Later one is a copy, and is updated by drivers.
    
    So let kexec_file_load use the updated copy.
    
    [ mingo: Tidied up the changelog. ]
    
    Signed-off-by: Kairui Song <kasong@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20201014092429.1415040-2-kasong@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2b0f4d7c6a2866bdf7f5bf015315503d742f636
Author: Clément Péron <peron.clem@gmail.com>
Date:   Sat Oct 3 12:03:32 2020 +0200

    ARM: dts: sun4i-a10: fix cpu_alert temperature
    
    [ Upstream commit dea252fa41cd8ce332d148444e4799235a8a03ec ]
    
    When running dtbs_check thermal_zone warn about the
    temperature declared.
    
    thermal-zones: cpu-thermal:trips:cpu-alert0:temperature:0:0: 850000 is greater than the maximum of 200000
    
    It's indeed wrong the real value is 85°C and not 850°C.
    
    Signed-off-by: Clément Péron <peron.clem@gmail.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://lore.kernel.org/r/20201003100332.431178-1-peron.clem@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d5720010f2136cf5c1d81ebc47fa123aa728750
Author: Mike Galbraith <efault@gmx.de>
Date:   Wed Nov 4 16:12:44 2020 +0100

    futex: Handle transient "ownerless" rtmutex state correctly
    
    commit 9f5d1c336a10c0d24e83e40b4c1b9539f7dba627 upstream.
    
    Gratian managed to trigger the BUG_ON(!newowner) in fixup_pi_state_owner().
    This is one possible chain of events leading to this:
    
    Task Prio       Operation
    T1   120        lock(F)
    T2   120        lock(F)   -> blocks (top waiter)
    T3   50 (RT)    lock(F)   -> boosts T1 and blocks (new top waiter)
    XX              timeout/  -> wakes T2
                    signal
    T1   50         unlock(F) -> wakes T3 (rtmutex->owner == NULL, waiter bit is set)
    T2   120        cleanup   -> try_to_take_mutex() fails because T3 is the top waiter
                                 and the lower priority T2 cannot steal the lock.
                              -> fixup_pi_state_owner() sees newowner == NULL -> BUG_ON()
    
    The comment states that this is invalid and rt_mutex_real_owner() must
    return a non NULL owner when the trylock failed, but in case of a queued
    and woken up waiter rt_mutex_real_owner() == NULL is a valid transient
    state. The higher priority waiter has simply not yet managed to take over
    the rtmutex.
    
    The BUG_ON() is therefore wrong and this is just another retry condition in
    fixup_pi_state_owner().
    
    Drop the locks, so that T3 can make progress, and then try the fixup again.
    
    Gratian provided a great analysis, traces and a reproducer. The analysis is
    to the point, but it confused the hell out of that tglx dude who had to
    page in all the futex horrors again. Condensed version is above.
    
    [ tglx: Wrote comment and changelog ]
    
    Fixes: c1e2f0eaf015 ("futex: Avoid violating the 10th rule of futex")
    Reported-by: Gratian Crisan <gratian.crisan@ni.com>
    Signed-off-by: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87a6w6x7bb.fsf@ni.com
    Link: https://lore.kernel.org/r/87sg9pkvf7.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a12115025e86e09c30f535417b88df8528d9c34
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Fri Oct 30 00:19:05 2020 +0800

    tracing: Fix out of bounds write in get_trace_buf
    
    commit c1acb4ac1a892cf08d27efcb964ad281728b0545 upstream.
    
    The nesting count of trace_printk allows for 4 levels of nesting. The
    nesting counter starts at zero and is incremented before being used to
    retrieve the current context's buffer. But the index to the buffer uses the
    nesting counter after it was incremented, and not its original number,
    which in needs to do.
    
    Link: https://lkml.kernel.org/r/20201029161905.4269-1-hqjagain@gmail.com
    
    Cc: stable@vger.kernel.org
    Fixes: 3d9622c12c887 ("tracing: Add barrier to trace_printk() buffer nesting modification")
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd252e33414ea32685be5774d7523e196f8f5ad9
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Oct 29 19:35:08 2020 -0400

    ftrace: Handle tracing when switching between context
    
    commit 726b3d3f141fba6f841d715fc4d8a4a84f02c02a upstream.
    
    When an interrupt or NMI comes in and switches the context, there's a delay
    from when the preempt_count() shows the update. As the preempt_count() is
    used to detect recursion having each context have its own bit get set when
    tracing starts, and if that bit is already set, it is considered a recursion
    and the function exits. But if this happens in that section where context
    has changed but preempt_count() has not been updated, this will be
    incorrectly flagged as a recursion.
    
    To handle this case, create another bit call TRANSITION and test it if the
    current context bit is already set. Flag the call as a recursion if the
    TRANSITION bit is already set, and if not, set it and continue. The
    TRANSITION bit will be cleared normally on the return of the function that
    set it, or if the current context bit is clear, set it and clear the
    TRANSITION bit to allow for another transition between the current context
    and an even higher one.
    
    Cc: stable@vger.kernel.org
    Fixes: edc15cafcbfa3 ("tracing: Avoid unnecessary multiple recursion checks")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aacf702e710e5ce8820e502e988353bf12df81a4
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Thu Oct 29 17:31:45 2020 -0400

    ftrace: Fix recursion check for NMI test
    
    commit ee11b93f95eabdf8198edd4668bf9102e7248270 upstream.
    
    The code that checks recursion will work to only do the recursion check once
    if there's nested checks. The top one will do the check, the other nested
    checks will see recursion was already checked and return zero for its "bit".
    On the return side, nothing will be done if the "bit" is zero.
    
    The problem is that zero is returned for the "good" bit when in NMI context.
    This will set the bit for NMIs making it look like *all* NMI tracing is
    recursing, and prevent tracing of anything in NMI context!
    
    The simple fix is to return "bit + 1" and subtract that bit on the end to
    get the real bit.
    
    Cc: stable@vger.kernel.org
    Fixes: edc15cafcbfa3 ("tracing: Avoid unnecessary multiple recursion checks")
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10c2d38ac6741d872a63a8262727985835119bc6
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Oct 26 10:52:29 2020 -0400

    gfs2: Wake up when sd_glock_disposal becomes zero
    
    commit da7d554f7c62d0c17c1ac3cc2586473c2d99f0bd upstream.
    
    Commit fc0e38dae645 ("GFS2: Fix glock deallocation race") fixed a
    sd_glock_disposal accounting bug by adding a missing atomic_dec
    statement, but it failed to wake up sd_glock_wait when that decrement
    causes sd_glock_disposal to reach zero.  As a consequence,
    gfs2_gl_hash_clear can now run into a 10-minute timeout instead of
    being woken up.  Add the missing wakeup.
    
    Fixes: fc0e38dae645 ("GFS2: Fix glock deallocation race")
    Cc: stable@vger.kernel.org # v2.6.39+
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba9abd4f15e4a852516c5117110e7d60693ba372
Author: Jason Gunthorpe <jgg@nvidia.com>
Date:   Sun Nov 1 17:08:00 2020 -0800

    mm: always have io_remap_pfn_range() set pgprot_decrypted()
    
    commit f8f6ae5d077a9bdaf5cbf2ac960a5d1a04b47482 upstream.
    
    The purpose of io_remap_pfn_range() is to map IO memory, such as a
    memory mapped IO exposed through a PCI BAR.  IO devices do not
    understand encryption, so this memory must always be decrypted.
    Automatically call pgprot_decrypted() as part of the generic
    implementation.
    
    This fixes a bug where enabling AMD SME causes subsystems, such as RDMA,
    using io_remap_pfn_range() to expose BAR pages to user space to fail.
    The CPU will encrypt access to those BAR pages instead of passing
    unencrypted IO directly to the device.
    
    Places not mapping IO should use remap_pfn_range().
    
    Fixes: aca20d546214 ("x86/mm: Add support to make use of Secure Memory Encryption")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brijesh Singh <brijesh.singh@amd.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: "Dave Young" <dyoung@redhat.com>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Larry Woodman <lwoodman@redhat.com>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Toshimitsu Kani <toshi.kani@hpe.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/0-v1-025d64bdf6c4+e-amd_sme_fix_jgg@nvidia.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dcd79d65d0029bc064134ae7b6b1e75de2be4c2c
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Sun Nov 1 17:07:53 2020 -0800

    kthread_worker: prevent queuing delayed work from timer_fn when it is being canceled
    
    commit 6993d0fdbee0eb38bfac350aa016f65ad11ed3b1 upstream.
    
    There is a small race window when a delayed work is being canceled and
    the work still might be queued from the timer_fn:
    
            CPU0                                            CPU1
    kthread_cancel_delayed_work_sync()
       __kthread_cancel_work_sync()
         __kthread_cancel_work()
            work->canceling++;
                                                  kthread_delayed_work_timer_fn()
                                                       kthread_insert_work();
    
    BUG: kthread_insert_work() should not get called when work->canceling is
    set.
    
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20201014083030.16895-1-qiang.zhang@windriver.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3da6f12e88651ea15a100bcab2c572e5f5049fe7
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Sun Nov 1 17:07:47 2020 -0800

    lib/crc32test: remove extra local_irq_disable/enable
    
    commit aa4e460f0976351fddd2f5ac6e08b74320c277a1 upstream.
    
    Commit 4d004099a668 ("lockdep: Fix lockdep recursion") uncovered the
    following issue in lib/crc32test reported on s390:
    
      BUG: using __this_cpu_read() in preemptible [00000000] code: swapper/0/1
      caller is lockdep_hardirqs_on_prepare+0x48/0x270
      CPU: 6 PID: 1 Comm: swapper/0 Not tainted 5.9.0-next-20201015-15164-g03d992bd2de6 #19
      Hardware name: IBM 3906 M04 704 (LPAR)
      Call Trace:
        lockdep_hardirqs_on_prepare+0x48/0x270
        trace_hardirqs_on+0x9c/0x1b8
        crc32_test.isra.0+0x170/0x1c0
        crc32test_init+0x1c/0x40
        do_one_initcall+0x40/0x130
        do_initcalls+0x126/0x150
        kernel_init_freeable+0x1f6/0x230
        kernel_init+0x22/0x150
        ret_from_fork+0x24/0x2c
      no locks held by swapper/0/1.
    
    Remove extra local_irq_disable/local_irq_enable helpers calls.
    
    Fixes: 5fb7f87408f1 ("lib: add module support to crc32 tests")
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lkml.kernel.org/r/patch.git-4369da00c06e.your-ad-here.call-01602859837-ext-1679@work.hours
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6480c405f153c89a7740545237aa3c98ac8deb3b
Author: Geoffrey D. Bennett <g@b4.vu>
Date:   Wed Nov 4 22:27:17 2020 +1030

    ALSA: usb-audio: Add implicit feedback quirk for Qu-16
    
    commit 0938ecae432e7ac8b01080c35dd81d50a1e43033 upstream.
    
    This patch fixes audio distortion on playback for the Allen&Heath
    Qu-16.
    
    Signed-off-by: Geoffrey D. Bennett <g@b4.vu>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201104115717.GA19046@b4.vu
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8ba9c1f46c465599b29f30568c58adfbb62d402
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Nov 2 13:32:42 2020 -0500

    Fonts: Replace discarded const qualifier
    
    commit 9522750c66c689b739e151fcdf895420dc81efc0 upstream.
    
    Commit 6735b4632def ("Fonts: Support FONT_EXTRA_WORDS macros for built-in
    fonts") introduced the following error when building rpc_defconfig (only
    this build appears to be affected):
    
     `acorndata_8x8' referenced in section `.text' of arch/arm/boot/compressed/ll_char_wr.o:
        defined in discarded section `.data' of arch/arm/boot/compressed/font.o
     `acorndata_8x8' referenced in section `.data.rel.ro' of arch/arm/boot/compressed/font.o:
        defined in discarded section `.data' of arch/arm/boot/compressed/font.o
     make[3]: *** [/scratch/linux/arch/arm/boot/compressed/Makefile:191: arch/arm/boot/compressed/vmlinux] Error 1
     make[2]: *** [/scratch/linux/arch/arm/boot/Makefile:61: arch/arm/boot/compressed/vmlinux] Error 2
     make[1]: *** [/scratch/linux/arch/arm/Makefile:317: zImage] Error 2
    
    The .data section is discarded at link time.  Reinstating acorndata_8x8 as
    const ensures it is still available after linking.  Do the same for the
    other 12 built-in fonts as well, for consistency purposes.
    
    Cc: <stable@vger.kernel.org>
    Cc: Russell King <linux@armlinux.org.uk>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Fixes: 6735b4632def ("Fonts: Support FONT_EXTRA_WORDS macros for built-in fonts")
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Co-developed-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201102183242.2031659-1-yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3196c658b87ae08606139dcef96b4b222a66510
Author: Martyna Szapar <martyna.szapar@intel.com>
Date:   Thu Apr 18 13:31:53 2019 -0700

    i40e: Memory leak in i40e_config_iwarp_qvlist
    
    commit 0b63644602cfcbac849f7ea49272a39e90fa95eb upstream.
    
    Added freeing the old allocation of vf->qvlist_info in function
    i40e_config_iwarp_qvlist before overwriting it with
    the new allocation.
    
    Signed-off-by: Martyna Szapar <martyna.szapar@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e157a7a0ba3f1ba837e99c6c9a7e3cc16905f64
Author: Martyna Szapar <martyna.szapar@intel.com>
Date:   Mon Apr 15 14:43:07 2019 -0700

    i40e: Fix of memory leak and integer truncation in i40e_virtchnl.c
    
    commit 24474f2709af6729b9b1da1c5e160ab62e25e3a4 upstream.
    
    Fixed possible memory leak in i40e_vc_add_cloud_filter function:
    cfilter is being allocated and in some error conditions
    the function returns without freeing the memory.
    
    Fix of integer truncation from u16 (type of queue_id value) to u8
    when calling i40e_vc_isvalid_queue_id function.
    
    Signed-off-by: Martyna Szapar <martyna.szapar@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    [bwh: Backported to 4.14: i40e_vc_add_cloud_filter() does not exist
     but the integer truncation is still possible]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b9a383b4c079b0f5c485d453c3ece511b1a1e45
Author: Grzegorz Siwik <grzegorz.siwik@intel.com>
Date:   Fri Mar 29 15:08:37 2019 -0700

    i40e: Wrong truncation from u16 to u8
    
    commit c004804dceee9ca384d97d9857ea2e2795c2651d upstream.
    
    In this patch fixed wrong truncation method from u16 to u8 during
    validation.
    
    It was changed by changing u8 to u32 parameter in method declaration
    and arguments were changed to u32.
    
    Signed-off-by: Grzegorz Siwik <grzegorz.siwik@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af75793c471fb4822a61f7af2a12d7d5b158dfc4
Author: Sergey Nemov <sergey.nemov@intel.com>
Date:   Fri Mar 29 15:08:36 2019 -0700

    i40e: add num_vectors checker in iwarp handler
    
    commit 7015ca3df965378bcef072cca9cd63ed098665b5 upstream.
    
    Field num_vectors from struct virtchnl_iwarp_qvlist_info should not be
    larger than num_msix_vectors_vf in the hw struct.  The iwarp uses the
    same set of vectors as the LAN VF driver.
    
    Signed-off-by: Sergey Nemov <sergey.nemov@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 337506f83c0efb602cbd135499a1a2065b5376c9
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Aug 6 23:37:01 2017 +0200

    i40e: Fix a potential NULL pointer dereference
    
    commit 54902349ee95045b67e2f0c39b75f5418540064b upstream.
    
    If 'kzalloc()' fails, a NULL pointer will be dereferenced.
    Return an error code (-ENOMEM) instead.
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21fecc9b58caaa7025dd1ff081abd51b2ce413c0
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Fri Jun 19 20:47:28 2020 +0000

    blktrace: fix debugfs use after free
    
    commit bad8e64fb19d3a0de5e564d9a7271c31bd684369 upstream.
    
    On commit 6ac93117ab00 ("blktrace: use existing disk debugfs directory")
    merged on v4.12 Omar fixed the original blktrace code for request-based
    drivers (multiqueue). This however left in place a possible crash, if you
    happen to abuse blktrace while racing to remove / add a device.
    
    We used to use asynchronous removal of the request_queue, and with that
    the issue was easier to reproduce. Now that we have reverted to
    synchronous removal of the request_queue, the issue is still possible to
    reproduce, its however just a bit more difficult.
    
    We essentially run two instances of break-blktrace which add/remove
    a loop device, and setup a blktrace and just never tear the blktrace
    down. We do this twice in parallel. This is easily reproduced with the
    script run_0004.sh from break-blktrace [0].
    
    We can end up with two types of panics each reflecting where we
    race, one a failed blktrace setup:
    
    [  252.426751] debugfs: Directory 'loop0' with parent 'block' already present!
    [  252.432265] BUG: kernel NULL pointer dereference, address: 00000000000000a0
    [  252.436592] #PF: supervisor write access in kernel mode
    [  252.439822] #PF: error_code(0x0002) - not-present page
    [  252.442967] PGD 0 P4D 0
    [  252.444656] Oops: 0002 [#1] SMP NOPTI
    [  252.446972] CPU: 10 PID: 1153 Comm: break-blktrace Tainted: G            E     5.7.0-rc2-next-20200420+ #164
    [  252.452673] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1 04/01/2014
    [  252.456343] RIP: 0010:down_write+0x15/0x40
    [  252.458146] Code: eb ca e8 ae 22 8d ff cc cc cc cc cc cc cc cc cc cc cc cc
                   cc cc 0f 1f 44 00 00 55 48 89 fd e8 52 db ff ff 31 c0 ba 01 00
                   00 00 <f0> 48 0f b1 55 00 75 0f 48 8b 04 25 c0 8b 01 00 48 89
                   45 08 5d
    [  252.463638] RSP: 0018:ffffa626415abcc8 EFLAGS: 00010246
    [  252.464950] RAX: 0000000000000000 RBX: ffff958c25f0f5c0 RCX: ffffff8100000000
    [  252.466727] RDX: 0000000000000001 RSI: ffffff8100000000 RDI: 00000000000000a0
    [  252.468482] RBP: 00000000000000a0 R08: 0000000000000000 R09: 0000000000000001
    [  252.470014] R10: 0000000000000000 R11: ffff958d1f9227ff R12: 0000000000000000
    [  252.471473] R13: ffff958c25ea5380 R14: ffffffff8cce15f1 R15: 00000000000000a0
    [  252.473346] FS:  00007f2e69dee540(0000) GS:ffff958c2fc80000(0000) knlGS:0000000000000000
    [  252.475225] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  252.476267] CR2: 00000000000000a0 CR3: 0000000427d10004 CR4: 0000000000360ee0
    [  252.477526] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  252.478776] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  252.479866] Call Trace:
    [  252.480322]  simple_recursive_removal+0x4e/0x2e0
    [  252.481078]  ? debugfs_remove+0x60/0x60
    [  252.481725]  ? relay_destroy_buf+0x77/0xb0
    [  252.482662]  debugfs_remove+0x40/0x60
    [  252.483518]  blk_remove_buf_file_callback+0x5/0x10
    [  252.484328]  relay_close_buf+0x2e/0x60
    [  252.484930]  relay_open+0x1ce/0x2c0
    [  252.485520]  do_blk_trace_setup+0x14f/0x2b0
    [  252.486187]  __blk_trace_setup+0x54/0xb0
    [  252.486803]  blk_trace_ioctl+0x90/0x140
    [  252.487423]  ? do_sys_openat2+0x1ab/0x2d0
    [  252.488053]  blkdev_ioctl+0x4d/0x260
    [  252.488636]  block_ioctl+0x39/0x40
    [  252.489139]  ksys_ioctl+0x87/0xc0
    [  252.489675]  __x64_sys_ioctl+0x16/0x20
    [  252.490380]  do_syscall_64+0x52/0x180
    [  252.491032]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    And the other on the device removal:
    
    [  128.528940] debugfs: Directory 'loop0' with parent 'block' already present!
    [  128.615325] BUG: kernel NULL pointer dereference, address: 00000000000000a0
    [  128.619537] #PF: supervisor write access in kernel mode
    [  128.622700] #PF: error_code(0x0002) - not-present page
    [  128.625842] PGD 0 P4D 0
    [  128.627585] Oops: 0002 [#1] SMP NOPTI
    [  128.629871] CPU: 12 PID: 544 Comm: break-blktrace Tainted: G            E     5.7.0-rc2-next-20200420+ #164
    [  128.635595] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1 04/01/2014
    [  128.640471] RIP: 0010:down_write+0x15/0x40
    [  128.643041] Code: eb ca e8 ae 22 8d ff cc cc cc cc cc cc cc cc cc cc cc cc
                   cc cc 0f 1f 44 00 00 55 48 89 fd e8 52 db ff ff 31 c0 ba 01 00
                   00 00 <f0> 48 0f b1 55 00 75 0f 65 48 8b 04 25 c0 8b 01 00 48 89
                   45 08 5d
    [  128.650180] RSP: 0018:ffffa9c3c05ebd78 EFLAGS: 00010246
    [  128.651820] RAX: 0000000000000000 RBX: ffff8ae9a6370240 RCX: ffffff8100000000
    [  128.653942] RDX: 0000000000000001 RSI: ffffff8100000000 RDI: 00000000000000a0
    [  128.655720] RBP: 00000000000000a0 R08: 0000000000000002 R09: ffff8ae9afd2d3d0
    [  128.657400] R10: 0000000000000056 R11: 0000000000000000 R12: 0000000000000000
    [  128.659099] R13: 0000000000000000 R14: 0000000000000003 R15: 00000000000000a0
    [  128.660500] FS:  00007febfd995540(0000) GS:ffff8ae9afd00000(0000) knlGS:0000000000000000
    [  128.662204] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  128.663426] CR2: 00000000000000a0 CR3: 0000000420042003 CR4: 0000000000360ee0
    [  128.664776] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  128.666022] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  128.667282] Call Trace:
    [  128.667801]  simple_recursive_removal+0x4e/0x2e0
    [  128.668663]  ? debugfs_remove+0x60/0x60
    [  128.669368]  debugfs_remove+0x40/0x60
    [  128.669985]  blk_trace_free+0xd/0x50
    [  128.670593]  __blk_trace_remove+0x27/0x40
    [  128.671274]  blk_trace_shutdown+0x30/0x40
    [  128.671935]  blk_release_queue+0x95/0xf0
    [  128.672589]  kobject_put+0xa5/0x1b0
    [  128.673188]  disk_release+0xa2/0xc0
    [  128.673786]  device_release+0x28/0x80
    [  128.674376]  kobject_put+0xa5/0x1b0
    [  128.674915]  loop_remove+0x39/0x50 [loop]
    [  128.675511]  loop_control_ioctl+0x113/0x130 [loop]
    [  128.676199]  ksys_ioctl+0x87/0xc0
    [  128.676708]  __x64_sys_ioctl+0x16/0x20
    [  128.677274]  do_syscall_64+0x52/0x180
    [  128.677823]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The common theme here is:
    
    debugfs: Directory 'loop0' with parent 'block' already present
    
    This crash happens because of how blktrace uses the debugfs directory
    where it places its files. Upon init we always create the same directory
    which would be needed by blktrace but we only do this for make_request
    drivers (multiqueue) block drivers. When you race a removal of these
    devices with a blktrace setup you end up in a situation where the
    make_request recursive debugfs removal will sweep away the blktrace
    files and then later blktrace will also try to remove individual
    dentries which are already NULL. The inverse is also possible and hence
    the two types of use after frees.
    
    We don't create the block debugfs directory on init for these types of
    block devices:
    
      * request-based block driver block devices
      * every possible partition
      * scsi-generic
    
    And so, this race should in theory only be possible with make_request
    drivers.
    
    We can fix the UAF by simply re-using the debugfs directory for
    make_request drivers (multiqueue) and only creating the ephemeral
    directory for the other type of block devices. The new clarifications
    on relying on the q->blk_trace_mutex *and* also checking for q->blk_trace
    *prior* to processing a blktrace ensures the debugfs directories are
    only created if no possible directory name clashes are possible.
    
    This goes tested with:
    
      o nvme partitions
      o ISCSI with tgt, and blktracing against scsi-generic with:
        o block
        o tape
        o cdrom
        o media changer
      o blktests
    
    This patch is part of the work which disputes the severity of
    CVE-2019-19770 which shows this issue is not a core debugfs issue, but
    a misuse of debugfs within blktace.
    
    Fixes: 6ac93117ab00 ("blktrace: use existing disk debugfs directory")
    Reported-by: syzbot+603294af2d01acfdd6da@syzkaller.appspotmail.com
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Cc: Bart Van Assche <bvanassche@acm.org>
    Cc: Omar Sandoval <osandov@fb.com>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Nicolai Stange <nstange@suse.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: "Martin K. Petersen" <martin.petersen@oracle.com>
    Cc: "James E.J. Bottomley" <jejb@linux.ibm.com>
    Cc: yu kuai <yukuai3@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [bwh: Backported to 4.14: open-code queue_is_mq()]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c14bcc9c28e61e0e4c13abe372bcd8be12996053
Author: Liu Bo <bo.liu@linux.alibaba.com>
Date:   Fri Jun 29 09:56:08 2018 +0800

    Blktrace: bail out early if block debugfs is not configured
    
    commit e1a413245a564683697a3d02ec197b72cf009b89 upstream.
    
    Since @blk_debugfs_root couldn't be configured dynamically, we can
    save a few memory allocation if it's not there.
    
    Signed-off-by: Liu Bo <bo.liu@linux.alibaba.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [bwh: Cherry-picked for 4.14 to ease backporting a later fix]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48a98cf6cd5b34eee653333050a57450854fafcd
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Oct 31 11:10:53 2020 +0800

    sfp: Fix error handing in sfp_probe()
    
    [ Upstream commit 9621618130bf7e83635367c13b9a6ee53935bb37 ]
    
    gpiod_to_irq() never return 0, but returns negative in
    case of error, check it and set gpio_irq to 0.
    
    Fixes: 73970055450e ("sfp: add SFP module support")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20201031031053.25264-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be9d3ea0d3aaba45537e999d06d80c376811d902
Author: Petr Malat <oss@malat.biz>
Date:   Fri Oct 30 14:26:33 2020 +0100

    sctp: Fix COMM_LOST/CANT_STR_ASSOC err reporting on big-endian platforms
    
    [ Upstream commit b6df8c81412190fbd5eaa3cec7f642142d9c16cd ]
    
    Commit 978aa0474115 ("sctp: fix some type cast warnings introduced since
    very beginning")' broke err reading from sctp_arg, because it reads the
    value as 32-bit integer, although the value is stored as 16-bit integer.
    Later this value is passed to the userspace in 16-bit variable, thus the
    user always gets 0 on big-endian platforms. Fix it by reading the __u16
    field of sctp_arg union, as reading err field would produce a sparse
    warning.
    
    Fixes: 978aa0474115 ("sctp: fix some type cast warnings introduced since very beginning")
    Signed-off-by: Petr Malat <oss@malat.biz>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Link: https://lore.kernel.org/r/20201030132633.7045-1-oss@malat.biz
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4968ec949b16cf587d2f9ed6022e927578c0dc78
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Mon Nov 2 12:01:08 2020 +0100

    net: usb: qmi_wwan: add Telit LE910Cx 0x1230 composition
    
    [ Upstream commit 5fd8477ed8ca77e64b93d44a6dae4aa70c191396 ]
    
    Add support for Telit LE910Cx 0x1230 composition:
    
    0x1230: tty, adb, rmnet, audio, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Link: https://lore.kernel.org/r/20201102110108.17244-1-dnlplm@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe6f41ad5c512c7b408f7a37ea6111b2f468a5d6
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Tue Oct 20 20:36:05 2020 +0300

    gianfar: Account for Tx PTP timestamp in the skb headroom
    
    [ Upstream commit d6a076d68c6b5d6a5800f3990a513facb7016dea ]
    
    When PTP timestamping is enabled on Tx, the controller
    inserts the Tx timestamp at the beginning of the frame
    buffer, between SFD and the L2 frame header. This means
    that the skb provided by the stack is required to have
    enough headroom otherwise a new skb needs to be created
    by the driver to accommodate the timestamp inserted by h/w.
    Up until now the driver was relying on the second option,
    using skb_realloc_headroom() to create a new skb to accommodate
    PTP frames. Turns out that this method is not reliable, as
    reallocation of skbs for PTP frames along with the required
    overhead (skb_set_owner_w, consume_skb) is causing random
    crashes in subsequent skb_*() calls, when multiple concurrent
    TCP streams are run at the same time on the same device
    (as seen in James' report).
    Note that these crashes don't occur with a single TCP stream,
    nor with multiple concurrent UDP streams, but only when multiple
    TCP streams are run concurrently with the PTP packet flow
    (doing skb reallocation).
    This patch enforces the first method, by requesting enough
    headroom from the stack to accommodate PTP frames, and so avoiding
    skb_realloc_headroom() & co, and the crashes no longer occur.
    There's no reason not to set needed_headroom to a large enough
    value to accommodate PTP frames, so in this regard this patch
    is a fix.
    
    Reported-by: James Jurack <james.jurack@ametek.com>
    Fixes: bee9e58c9e98 ("gianfar:don't add FCB length to hard_header_len")
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Link: https://lore.kernel.org/r/20201020173605.1173-1-claudiu.manoil@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed2c1a3ff4a410a90f30fad00efc38237d62c968
Author: Claudiu Manoil <claudiu.manoil@nxp.com>
Date:   Thu Oct 29 10:10:56 2020 +0200

    gianfar: Replace skb_realloc_headroom with skb_cow_head for PTP
    
    [ Upstream commit d145c9031325fed963a887851d9fa42516efd52b ]
    
    When PTP timestamping is enabled on Tx, the controller
    inserts the Tx timestamp at the beginning of the frame
    buffer, between SFD and the L2 frame header.  This means
    that the skb provided by the stack is required to have
    enough headroom otherwise a new skb needs to be created
    by the driver to accommodate the timestamp inserted by h/w.
    Up until now the driver was relying on skb_realloc_headroom()
    to create new skbs to accommodate PTP frames.  Turns out that
    this method is not reliable in this context at least, as
    skb_realloc_headroom() for PTP frames can cause random crashes,
    mostly in subsequent skb_*() calls, when multiple concurrent
    TCP streams are run at the same time with the PTP flow
    on the same device (as seen in James' report).  I also noticed
    that when the system is loaded by sending multiple TCP streams,
    the driver receives cloned skbs in large numbers.
    skb_cow_head() instead proves to be stable in this scenario,
    and not only handles cloned skbs too but it's also more efficient
    and widely used in other drivers.
    The commit introducing skb_realloc_headroom in the driver
    goes back to 2009, commit 93c1285c5d92
    ("gianfar: reallocate skb when headroom is not enough for fcb").
    For practical purposes I'm referencing a newer commit (from 2012)
    that brings the code to its current structure (and fixes the PTP
    case).
    
    Fixes: 9c4886e5e63b ("gianfar: Fix invalid TX frames returned on error queue when time stamping")
    Reported-by: James Jurack <james.jurack@ametek.com>
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Claudiu Manoil <claudiu.manoil@nxp.com>
    Link: https://lore.kernel.org/r/20201029081057.8506-1-claudiu.manoil@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6cad63a5a86574ebd78786d76a948da6cfe5f21
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0bd429843a0c5baa29c4737c03494ae92447dbe0
Author: Juergen Gross <jgross@suse.com>
Date:   Wed Sep 30 11:16:14 2020 +0200

    xen/events: don't use chip_data for legacy IRQs
    
    commit 0891fb39ba67bd7ae023ea0d367297ffff010781 upstream.
    
    Since commit c330fb1ddc0a ("XEN uses irqdesc::irq_data_common::handler_data to store a per interrupt XEN data pointer which contains XEN specific information.")
    Xen is using the chip_data pointer for storing IRQ specific data. When
    running as a HVM domain this can result in problems for legacy IRQs, as
    those might use chip_data for their own purposes.
    
    Use a local array for this purpose in case of legacy IRQs, avoiding the
    double use.
    
    Cc: stable@vger.kernel.org
    Fixes: c330fb1ddc0a ("XEN uses irqdesc::irq_data_common::handler_data to store a per interrupt XEN data pointer which contains XEN specific information.")
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Stefan Bader <stefan.bader@canonical.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20200930091614.13660-1-jgross@suse.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    [bwh: Backported to 4.9: adjust context]
    Signed-off-by: Ben Hutchings <benh@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20f52b5f9bd9e48665a1d8ce795dc87185d49a60
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Sep 16 10:00:58 2020 +0100

    drm/i915: Break up error capture compression loops with cond_resched()
    
    commit 7d5553147613b50149238ac1385c60e5c7cacb34 upstream.
    
    As the error capture will compress user buffers as directed to by the
    user, it can take an arbitrary amount of time and space. Break up the
    compression loops with a call to cond_resched(), that will allow other
    processes to schedule (avoiding the soft lockups) and also serve as a
    warning should we try to make this loop atomic in the future.
    
    Testcase: igt/gem_exec_capture/many-*
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200916090059.3189-2-chris@chris-wilson.co.uk
    (cherry picked from commit 293f43c80c0027ff9299036c24218ac705ce584e)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e467aebb5f3f5b185e87df277787174c63b55faa
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 5 11:07:06 2020 +0100

    Linux 4.14.204
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201103203156.372184213@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56785f3947fbd055c38e650ed264fad7541f5b69
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Oct 16 16:56:30 2020 +0200

    staging: octeon: Drop on uncorrectable alignment or FCS error
    
    commit 49d28ebdf1e30d806410eefc7de0a7a1ca5d747c upstream.
    
    Currently in case of alignment or FCS error if the packet cannot be
    corrected it's still not dropped. Report the error properly and drop the
    packet while making the code around a little bit more readable.
    
    Fixes: 80ff0fd3ab64 ("Staging: Add octeon-ethernet driver files.")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201016145630.41852-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8ba1c1c8f8bdb43a469631883433383e8aad679
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Fri Oct 16 12:18:57 2020 +0200

    staging: octeon: repair "fixed-link" support
    
    commit 179f5dc36b0a1aa31538d7d8823deb65c39847b3 upstream.
    
    The PHYs must be registered once in device probe function, not in device
    open callback because it's only possible to register them once.
    
    Fixes: a25e278020bf ("staging: octeon: support fixed-link phys")
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201016101858.11374-1-alexander.sverdlin@nokia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1506038d82e3a859dfdc55e4f63b04866dc86646
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Wed Oct 21 13:21:42 2020 +0100

    staging: comedi: cb_pcidas: Allow 2-channel commands for AO subdevice
    
    commit 647a6002cb41d358d9ac5de101a8a6dc74748a59 upstream.
    
    The "cb_pcidas" driver supports asynchronous commands on the analog
    output (AO) subdevice for those boards that have an AO FIFO.  The code
    (in `cb_pcidas_ao_check_chanlist()` and `cb_pcidas_ao_cmd()`) to
    validate and set up the command supports output to a single channel or
    to two channels simultaneously (the boards have two AO channels).
    However, the code in `cb_pcidas_auto_attach()` that initializes the
    subdevices neglects to initialize the AO subdevice's `len_chanlist`
    member, leaving it set to 0, but the Comedi core will "correct" it to 1
    if the driver neglected to set it.  This limits commands to use a single
    channel (either channel 0 or 1), but the limit should be two channels.
    Set the AO subdevice's `len_chanlist` member to be the same value as the
    `n_chan` member, which will be 2.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20201021122142.81628-1-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d3b62107aed2e85750383ed6c0045eb7b5d0ff4
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Oct 29 17:24:09 2020 +0000

    KVM: arm64: Fix AArch32 handling of DBGD{CCINT,SCRext} and DBGVCR
    
    commit 4a1c2c7f63c52ccb11770b5ae25920a6b79d3548 upstream.
    
    The DBGD{CCINT,SCRext} and DBGVCR register entries in the cp14 array
    are missing their target register, resulting in all accesses being
    targetted at the guard sysreg (indexed by __INVALID_SYSREG__).
    
    Point the emulation code at the actual register entries.
    
    Fixes: bdfb4b389c8d ("arm64: KVM: add trap handlers for AArch32 debug registers")
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201029172409.2768336-1-maz@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14ad44de75cee26e10919ac6a8ced4a6a8ae5b23
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Oct 22 21:41:00 2020 +0300

    device property: Don't clear secondary pointer for shared primary firmware node
    
    commit 99aed9227073fb34ce2880cbc7063e04185a65e1 upstream.
    
    It appears that firmware nodes can be shared between devices. In such case
    when a (child) device is about to be deleted, its firmware node may be shared
    and ACPI_COMPANION_SET(..., NULL) call for it breaks the secondary link
    of the shared primary firmware node.
    
    In order to prevent that, check, if the device has a parent and parent's
    firmware node is shared with its child, and avoid crashing the link.
    
    Fixes: c15e1bdda436 ("device property: Fix the secondary firmware node handling in set_primary_fwnode()")
    Reported-by: Ferry Toth <fntoth@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Tested-by: Ferry Toth <fntoth@gmail.com>
    Cc: 5.9+ <stable@vger.kernel.org> # 5.9+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcd9a399bfc31df77c45fdc27cdfd06fb1fc4b67
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Oct 22 21:40:59 2020 +0300

    device property: Keep secondary firmware node secondary by type
    
    commit d5dcce0c414fcbfe4c2037b66ac69ea5f9b3f75c upstream.
    
    Behind primary and secondary we understand the type of the nodes
    which might define their ordering. However, if primary node gone,
    we can't maintain the ordering by definition of the linked list.
    Thus, by ordering secondary node becomes first in the list.
    But in this case the meaning of it is still secondary (or auxiliary).
    The type of the node is maintained by the secondary pointer in it:
    
            secondary pointer               Meaning
            NULL or valid                   primary node
            ERR_PTR(-ENODEV)                secondary node
    
    So, if by some reason we do the following sequence of calls
    
            set_primary_fwnode(dev, NULL);
            set_primary_fwnode(dev, primary);
    
    we should preserve secondary node.
    
    This concept is supported by the description of set_primary_fwnode()
    along with implementation of set_secondary_fwnode(). Hence, fix
    the commit c15e1bdda436 to follow this as well.
    
    Fixes: c15e1bdda436 ("device property: Fix the secondary firmware node handling in set_primary_fwnode()")
    Cc: Ferry Toth <fntoth@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Tested-by: Ferry Toth <fntoth@gmail.com>
    Cc: 5.9+ <stable@vger.kernel.org> # 5.9+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d618af95e76e7b8d666892db0a41570c4d3ad776
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Aug 4 21:26:49 2020 +0200

    ARM: s3c24xx: fix missing system reset
    
    commit f6d7cde84f6c5551586c8b9b68d70f8e6dc9a000 upstream.
    
    Commit f6361c6b3880 ("ARM: S3C24XX: remove separate restart code")
    removed usage of the watchdog reset platform code in favor of the
    Samsung SoC watchdog driver.  However the latter was not selected thus
    S3C24xx platforms lost reset abilities.
    
    Cc: <stable@vger.kernel.org>
    Fixes: f6361c6b3880 ("ARM: S3C24XX: remove separate restart code")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff9ddc3f3959dad5c3f10813e44b953d96119788
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Sep 10 17:41:49 2020 +0200

    ARM: samsung: fix PM debug build with DEBUG_LL but !MMU
    
    commit 7be0d19c751b02db778ca95e3274d5ea7f31891c upstream.
    
    Selecting CONFIG_SAMSUNG_PM_DEBUG (depending on CONFIG_DEBUG_LL) but
    without CONFIG_MMU leads to build errors:
    
      arch/arm/plat-samsung/pm-debug.c: In function ‘s3c_pm_uart_base’:
      arch/arm/plat-samsung/pm-debug.c:57:2: error:
        implicit declaration of function ‘debug_ll_addr’ [-Werror=implicit-function-declaration]
    
    Fixes: 99b2fc2b8b40 ("ARM: SAMSUNG: Use debug_ll_addr() to get UART base address")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200910154150.3318-1-krzk@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46f6f32bd76fe69e8f51933763e8fb394e591abf
Author: Frank Wunderlich <frank-w@public-files.de>
Date:   Mon Sep 7 09:05:17 2020 +0200

    arm: dts: mt7623: add missing pause for switchport
    
    commit 36f0a5fc5284838c544218666c63ee8cfa46a9c3 upstream.
    
    port6 of mt7530 switch (= cpu port 0) on bananapi-r2 misses pause option
    which causes rx drops on running iperf.
    
    Fixes: f4ff257cd160 ("arm: dts: mt7623: add support for Bananapi R2 (BPI-R2) board")
    Signed-off-by: Frank Wunderlich <frank-w@public-files.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200907070517.51715-1-linux@fw-web.de
    Signed-off-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c34a6c907d25e8e2ea681a1926d30ac4a735db8
Author: Helge Deller <deller@gmx.de>
Date:   Mon Oct 19 16:57:50 2020 +0200

    hil/parisc: Disable HIL driver when it gets stuck
    
    commit 879bc2d27904354b98ca295b6168718e045c4aa2 upstream.
    
    When starting a HP machine with HIL driver but without an HIL keyboard
    or HIL mouse attached, it may happen that data written to the HIL loop
    gets stuck (e.g. because the transaction queue is full).  Usually one
    will then have to reboot the machine because all you see is and endless
    output of:
     Transaction add failed: transaction already queued?
    
    In the higher layers hp_sdc_enqueue_transaction() is called to queued up
    a HIL packet. This function returns an error code, and this patch adds
    the necessary checks for this return code and disables the HIL driver if
    further packets can't be sent.
    
    Tested on a HP 730 and a HP 715/64 machine.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ede3765867cef713d409cb7275e19f7c84fb4d94
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Mon Oct 26 09:12:10 2020 +0000

    cachefiles: Handle readpage error correctly
    
    commit 9480b4e75b7108ee68ecf5bc6b4bd68e8031c521 upstream.
    
    If ->readpage returns an error, it has already unlocked the page.
    
    Fixes: 5e929b33c393 ("CacheFiles: Handle truncate unlocking the page we're reading")
    Cc: stable@vger.kernel.org
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3bb87812e8d14c4e884241d00b9de63e61ac461
Author: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
Date:   Fri Oct 9 15:08:31 2020 +0800

    arm64: berlin: Select DW_APB_TIMER_OF
    
    commit b0fc70ce1f028e14a37c186d9f7a55e51439b83a upstream.
    
    Berlin SoCs always contain some DW APB timers which can be used as an
    always-on broadcast timer.
    
    Link: https://lore.kernel.org/r/20201009150536.214181fb@xhacker.debian
    Cc: <stable@vger.kernel.org> # v3.14+
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f728c0924ea0c819a99876b3362a10a4af8032e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 26 13:15:23 2020 -0700

    tty: make FONTX ioctl use the tty pointer they were actually passed
    
    commit 90bfdeef83f1d6c696039b6a917190dcbbad3220 upstream.
    
    Some of the font tty ioctl's always used the current foreground VC for
    their operations.  Don't do that then.
    
    This fixes a data race on fg_console.
    
    Side note: both Michael Ellerman and Jiri Slaby point out that all these
    ioctls are deprecated, and should probably have been removed long ago,
    and everything seems to be using the KDFONTOP ioctl instead.
    
    In fact, Michael points out that it looks like busybox's loadfont
    program seems to have switched over to using KDFONTOP exactly _because_
    of this bug (ahem.. 12 years ago ;-).
    
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au>
    Acked-by: Jiri Slaby <jirislaby@kernel.org>
    Cc: Greg KH <greg@kroah.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca0aabd43d43142b233dc7b8050352be46e633a3
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Sep 14 17:45:48 2020 +0200

    rtc: rx8010: don't modify the global rtc ops
    
    commit d3b14296da69adb7825022f3224ac6137eb30abf upstream.
    
    The way the driver is implemented is buggy for the (admittedly unlikely)
    use case where there are two RTCs with one having an interrupt configured
    and the second not. This is caused by the fact that we use a global
    rtc_class_ops struct which we modify depending on whether the irq number
    is present or not.
    
    Fix it by using two const ops structs with and without alarm operations.
    While at it: not being able to request a configured interrupt is an error
    so don't ignore it and bail out of probe().
    
    Fixes: ed13d89b08e3 ("rtc: Add Epson RX8010SJ RTC driver")
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200914154601.32245-2-brgl@bgdev.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94083cebbd81168b7b1af1234656e112e9757035
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Oct 20 08:22:53 2020 +1000

    drm/ttm: fix eviction valuable range check.
    
    commit fea456d82c19d201c21313864105876deabe148b upstream.
    
    This was adding size to start, but pfn and start are in pages,
    so it should be using num_pages.
    
    Not sure this fixes anything in the real world, just noticed it
    during refactoring.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Cc: stable@vger.kernel.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20201019222257.1684769-2-airlied@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit efdb56fb4a627346d54a2fbb3019cf3c8a098ed3
Author: Luo Meng <luomeng12@huawei.com>
Date:   Tue Oct 20 09:36:31 2020 +0800

    ext4: fix invalid inode checksum
    
    commit 1322181170bb01bce3c228b82ae3d5c6b793164f upstream.
    
    During the stability test, there are some errors:
      ext4_lookup:1590: inode #6967: comm fsstress: iget: checksum invalid.
    
    If the inode->i_iblocks too big and doesn't set huge file flag, checksum
    will not be recalculated when update the inode information to it's buffer.
    If other inode marks the buffer dirty, then the inconsistent inode will
    be flushed to disk.
    
    Fix this problem by checking i_blocks in advance.
    
    Cc: stable@kernel.org
    Signed-off-by: Luo Meng <luomeng12@huawei.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Link: https://lore.kernel.org/r/20201020013631.3796673-1-luomeng12@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e5474c2c879ee65a23e84bcb6a877ec76d41411
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sat Aug 29 10:54:02 2020 +0800

    ext4: fix error handling code in add_new_gdb
    
    commit c9e87161cc621cbdcfc472fa0b2d81c63780c8f5 upstream.
    
    When ext4_journal_get_write_access() fails, we should
    terminate the execution flow and release n_group_desc,
    iloc.bh, dind and gdb_bh.
    
    Cc: stable@kernel.org
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Link: https://lore.kernel.org/r/20200829025403.3139-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65864db1cf8eb06b0237e5b086f59e8d23166cda
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Sep 22 09:24:56 2020 -0700

    ext4: fix leaking sysfs kobject after failed mount
    
    commit cb8d53d2c97369029cc638c9274ac7be0a316c75 upstream.
    
    ext4_unregister_sysfs() only deletes the kobject.  The reference to it
    needs to be put separately, like ext4_put_super() does.
    
    This addresses the syzbot report
    "memory leak in kobject_set_name_vargs (3)"
    (https://syzkaller.appspot.com/bug?extid=9f864abad79fae7c17e1).
    
    Reported-by: syzbot+9f864abad79fae7c17e1@syzkaller.appspotmail.com
    Fixes: 72ba74508b28 ("ext4: release sysfs kobject when failing to enable quotas on mount")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20200922162456.93657-1-ebiggers@kernel.org
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3244f41d8ed8fc54db87a8e55ddab20d231e6fde
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Thu Oct 8 22:42:56 2020 +0200

    vringh: fix __vringh_iov() when riov and wiov are different
    
    commit 5745bcfbbf89b158416075374254d3c013488f21 upstream.
    
    If riov and wiov are both defined and they point to different
    objects, only riov is initialized. If the wiov is not initialized
    by the caller, the function fails returning -EINVAL and printing
    "Readable desc 0x... after writable" error message.
    
    This issue happens when descriptors have both readable and writable
    buffers (eg. virtio-blk devices has virtio_blk_outhdr in the readable
    buffer and status as last byte of writable buffer) and we call
    __vringh_iov() to get both type of buffers in two different iovecs.
    
    Let's replace the 'else if' clause with 'if' to initialize both
    riov and wiov if they are not NULL.
    
    As checkpatch pointed out, we also avoid crashing the kernel
    when riov and wiov are both NULL, replacing BUG() with WARN_ON()
    and returning -EINVAL.
    
    Fixes: f87d0fbb5798 ("vringh: host-side implementation of virtio rings.")
    Cc: stable@vger.kernel.org
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Link: https://lore.kernel.org/r/20201008204256.162292-1-sgarzare@redhat.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a45fa763c533743ec9cd6278a4333a94d509523c
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Mon Oct 19 22:22:42 2020 +0800

    ring-buffer: Return 0 on success from ring_buffer_resize()
    
    commit 0a1754b2a97efa644aa6e84d1db5b17c42251483 upstream.
    
    We don't need to check the new buffer size, and the return value
    had confused resize_buffer_duplicate_size().
    ...
            ret = ring_buffer_resize(trace_buf->buffer,
                    per_cpu_ptr(size_buf->data,cpu_id)->entries, cpu_id);
            if (ret == 0)
                    per_cpu_ptr(trace_buf->data, cpu_id)->entries =
                            per_cpu_ptr(size_buf->data, cpu_id)->entries;
    ...
    
    Link: https://lkml.kernel.org/r/20201019142242.11560-1-hqjagain@gmail.com
    
    Cc: stable@vger.kernel.org
    Fixes: d60da506cbeb3 ("tracing: Add a resize function to make one buffer equivalent to another buffer")
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 834bfe17da85d86850139284ce4e348fbc4a6937
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Sun Oct 4 19:04:22 2020 +0100

    9P: Cast to loff_t before multiplying
    
    commit f5f7ab168b9a60e12a4b8f2bb6fcc91321dc23c1 upstream.
    
    On 32-bit systems, this multiplication will overflow for files larger
    than 4GB.
    
    Link: http://lkml.kernel.org/r/20201004180428.14494-2-willy@infradead.org
    Cc: stable@vger.kernel.org
    Fixes: fb89b45cdfdc ("9P: introduction of a new cache=mmap model.")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69b043d82a190a57b6a8d20005c647851863d60d
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Wed Oct 7 20:06:48 2020 +0200

    libceph: clear con->out_msg on Policy::stateful_server faults
    
    commit 28e1581c3b4ea5f98530064a103c6217bedeea73 upstream.
    
    con->out_msg must be cleared on Policy::stateful_server
    (!CEPH_MSG_CONNECT_LOSSY) faults.  Not doing so botches the
    reconnection attempt, because after writing the banner the
    messenger moves on to writing the data section of that message
    (either from where it got interrupted by the connection reset or
    from the beginning) instead of writing struct ceph_msg_connect.
    This results in a bizarre error message because the server
    sends CEPH_MSGR_TAG_BADPROTOVER but we think we wrote struct
    ceph_msg_connect:
    
      libceph: mds0 (1)172.21.15.45:6828 socket error on write
      ceph: mds0 reconnect start
      libceph: mds0 (1)172.21.15.45:6829 socket closed (con state OPEN)
      libceph: mds0 (1)172.21.15.45:6829 protocol version mismatch, my 32 != server's 32
      libceph: mds0 (1)172.21.15.45:6829 protocol version mismatch
    
    AFAICT this bug goes back to the dawn of the kernel client.
    The reason it survived for so long is that only MDS sessions
    are stateful and only two MDS messages have a data section:
    CEPH_MSG_CLIENT_RECONNECT (always, but reconnecting is rare)
    and CEPH_MSG_CLIENT_REQUEST (only when xattrs are involved).
    The connection has to get reset precisely when such message
    is being sent -- in this case it was the former.
    
    Cc: stable@vger.kernel.org
    Link: https://tracker.ceph.com/issues/47723
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5be0fff2dca64795586ce44aa86b2d3d7ec3b61
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Sun Oct 4 19:04:24 2020 +0100

    ceph: promote to unsigned long long before shifting
    
    commit c403c3a2fbe24d4ed33e10cabad048583ebd4edf upstream.
    
    On 32-bit systems, this shift will overflow for files larger than 4GB.
    
    Cc: stable@vger.kernel.org
    Fixes: 61f68816211e ("ceph: check caps in filemap_fault and page_mkwrite")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 073a6a14a79f037bb8aa56a4eee84463c238d5a8
Author: Madhav Chauhan <madhav.chauhan@amd.com>
Date:   Fri Oct 16 18:03:07 2020 +0530

    drm/amdgpu: don't map BO in reserved region
    
    commit c4aa8dff6091cc9536aeb255e544b0b4ba29faf4 upstream.
    
    2MB area is reserved at top inside VM.
    
    Suggested-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Madhav Chauhan <madhav.chauhan@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6a0a526cb14817d0e088bb35c57e0ce13713f6f
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Sat Oct 17 16:13:37 2020 -0700

    ia64: fix build error with !COREDUMP
    
    commit 7404840d87557c4092bf0272bce5e0354c774bf9 upstream.
    
    Fix linkage error when CONFIG_BINFMT_ELF is selected but CONFIG_COREDUMP
    is not:
    
        ia64-linux-ld: arch/ia64/kernel/elfcore.o: in function `elf_core_write_extra_phdrs':
        elfcore.c:(.text+0x172): undefined reference to `dump_emit'
        ia64-linux-ld: arch/ia64/kernel/elfcore.o: in function `elf_core_write_extra_data':
        elfcore.c:(.text+0x2b2): undefined reference to `dump_emit'
    
    Fixes: 1fcccbac89f5 ("elf coredump: replace ELF_CORE_EXTRA_* macros by functions")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200819064146.12529-1-krzk@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d089a56a565172bbe8a1e146ed1169303516938
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Jun 1 17:12:31 2020 +0800

    ubi: check kthread_should_stop() after the setting of task state
    
    commit d005f8c6588efcfbe88099b6edafc6f58c84a9c1 upstream.
    
    A detach hung is possible when a race occurs between the detach process
    and the ubi background thread. The following sequences outline the race:
    
      ubi thread: if (list_empty(&ubi->works)...
    
      ubi detach: set_bit(KTHREAD_SHOULD_STOP, &kthread->flags)
                  => by kthread_stop()
                  wake_up_process()
                  => ubi thread is still running, so 0 is returned
    
      ubi thread: set_current_state(TASK_INTERRUPTIBLE)
                  schedule()
                  => ubi thread will never be scheduled again
    
      ubi detach: wait_for_completion()
                  => hung task!
    
    To fix that, we need to check kthread_should_stop() after we set the
    task state, so the ubi thread will either see the stop bit and exit or
    the task state is reset to runnable such that it isn't scheduled out
    indefinitely.
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 801c135ce73d5df1ca ("UBI: Unsorted Block Images")
    Reported-by: syzbot+853639d0cb16c31c7a14@syzkaller.appspotmail.com
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a811d81a338123eee62c8b5f45b9b38c3b1de376
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Mon Sep 28 22:11:35 2020 +0200

    perf python scripting: Fix printable strings in python3 scripts
    
    commit 6fcd5ddc3b1467b3586972ef785d0d926ae4cdf4 upstream.
    
    Hagen reported broken strings in python3 tracepoint scripts:
    
      make PYTHON=python3
      perf record -e sched:sched_switch -a -- sleep 5
      perf script --gen-script py
      perf script -s ./perf-script.py
    
      [..]
      sched__sched_switch      7 563231.759525792        0 swapper   prev_comm=bytearray(b'swapper/7\x00\x00\x00\x00\x00\x00\x00'), prev_pid=0, prev_prio=120, prev_state=, next_comm=bytearray(b'mutex-thread-co\x00'),
    
    The problem is in the is_printable_array function that does not take the
    zero byte into account and claim such string as not printable, so the
    code will create byte array instead of string.
    
    Committer testing:
    
    After this fix:
    
    sched__sched_switch 3 484522.497072626  1158680 kworker/3:0-eve  prev_comm=kworker/3:0, prev_pid=1158680, prev_prio=120, prev_state=I, next_comm=swapper/3, next_pid=0, next_prio=120
    Sample: {addr=0, cpu=3, datasrc=84410401, datasrc_decode=N/A|SNP N/A|TLB N/A|LCK N/A, ip=18446744071841817196, period=1, phys_addr=0, pid=1158680, tid=1158680, time=484522497072626, transaction=0, values=[(0, 0)], weight=0}
    
    sched__sched_switch 4 484522.497085610  1225814 perf             prev_comm=perf, prev_pid=1225814, prev_prio=120, prev_state=, next_comm=migration/4, next_pid=30, next_prio=0
    Sample: {addr=0, cpu=4, datasrc=84410401, datasrc_decode=N/A|SNP N/A|TLB N/A|LCK N/A, ip=18446744071841817196, period=1, phys_addr=0, pid=1225814, tid=1225814, time=484522497085610, transaction=0, values=[(0, 0)], weight=0}
    
    Fixes: 249de6e07458 ("perf script python: Fix string vs byte array resolving")
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Tested-by: Hagen Paul Pfeifer <hagen@jauu.net>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Petlan <mpetlan@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200928201135.3633850-1-jolsa@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73e619870fbf1769a8a9ab4276240d3a81ab5a7d
Author: Zhihao Cheng <chengzhihao1@huawei.com>
Date:   Mon Jun 1 17:10:37 2020 +0800

    ubifs: dent: Fix some potential memory leaks while iterating entries
    
    commit 58f6e78a65f1fcbf732f60a7478ccc99873ff3ba upstream.
    
    Fix some potential memory leaks in error handling branches while
    iterating dent entries. For example, function dbg_check_dir()
    forgets to free pdent if it exists.
    
    Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 1e51764a3c2ac05a2 ("UBIFS: add new flash file system")
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27a1c8cf6d96b21a98f2df4eb07632ac1276a5af
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Thu Oct 1 18:58:56 2020 -0400

    NFSD: Add missing NFSv2 .pc_func methods
    
    commit 6b3dccd48de8a4c650b01499a0b09d1e2279649e upstream.
    
    There's no protection in nfsd_dispatch() against a NULL .pc_func
    helpers. A malicious NFS client can trigger a crash by invoking the
    unused/unsupported NFSv2 ROOT or WRITECACHE procedures.
    
    The current NFSD dispatcher does not support returning a void reply
    to a non-NULL procedure, so the reply to both of these is wrong, for
    the moment.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 340a3dc8f262febff6748ea2cb8fb66237b365c8
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Fri Oct 16 09:25:45 2020 -0400

    NFSv4.2: support EXCHGID4_FLAG_SUPP_FENCE_OPS 4.2 EXCHANGE_ID flag
    
    commit 8c39076c276be0b31982e44654e2c2357473258a upstream.
    
    RFC 7862 introduced a new flag that either client or server is
    allowed to set: EXCHGID4_FLAG_SUPP_FENCE_OPS.
    
    Client needs to update its bitmask to allow for this flag value.
    
    v2: changed minor version argument to unsigned int
    
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e7bcae515137daf364c62a0fee374da373b8cf0
Author: Mahesh Salgaonkar <mahesh@linux.ibm.com>
Date:   Tue Oct 6 13:02:18 2020 +0530

    powerpc/powernv/elog: Fix race while processing OPAL error log event.
    
    commit aea948bb80b478ddc2448f7359d574387521a52d upstream.
    
    Every error log reported by OPAL is exported to userspace through a
    sysfs interface and notified using kobject_uevent(). The userspace
    daemon (opal_errd) then reads the error log and acknowledges the error
    log is saved safely to disk. Once acknowledged the kernel removes the
    respective sysfs file entry causing respective resources to be
    released including kobject.
    
    However it's possible the userspace daemon may already be scanning
    elog entries when a new sysfs elog entry is created by the kernel.
    User daemon may read this new entry and ack it even before kernel can
    notify userspace about it through kobject_uevent() call. If that
    happens then we have a potential race between
    elog_ack_store->kobject_put() and kobject_uevent which can lead to
    use-after-free of a kernfs object resulting in a kernel crash. eg:
    
      BUG: Unable to handle kernel data access on read at 0x6b6b6b6b6b6b6bfb
      Faulting instruction address: 0xc0000000008ff2a0
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA PowerNV
      CPU: 27 PID: 805 Comm: irq/29-opal-elo Not tainted 5.9.0-rc2-gcc-8.2.0-00214-g6f56a67bcbb5-dirty #363
      ...
      NIP kobject_uevent_env+0xa0/0x910
      LR  elog_event+0x1f4/0x2d0
      Call Trace:
        0x5deadbeef0000122 (unreliable)
        elog_event+0x1f4/0x2d0
        irq_thread_fn+0x4c/0xc0
        irq_thread+0x1c0/0x2b0
        kthread+0x1c4/0x1d0
        ret_from_kernel_thread+0x5c/0x6c
    
    This patch fixes this race by protecting the sysfs file
    creation/notification by holding a reference count on kobject until we
    safely send kobject_uevent().
    
    The function create_elog_obj() returns the elog object which if used
    by caller function will end up in use-after-free problem again.
    However, the return value of create_elog_obj() function isn't being
    used today and there is no need as well. Hence change it to return
    void to make this fix complete.
    
    Fixes: 774fea1a38c6 ("powerpc/powernv: Read OPAL error log and export it through sysfs")
    Cc: stable@vger.kernel.org # v3.15+
    Reported-by: Oliver O'Halloran <oohall@gmail.com>
    Signed-off-by: Mahesh Salgaonkar <mahesh@linux.ibm.com>
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Reviewed-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
    [mpe: Rework the logic to use a single return, reword comments, add oops]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201006122051.190176-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ff70dc811b925f5d286264e4aa2f3d6c9d5254a
Author: Joel Stanley <joel@jms.id.au>
Date:   Wed Sep 2 09:30:11 2020 +0930

    powerpc: Warn about use of smt_snooze_delay
    
    commit a02f6d42357acf6e5de6ffc728e6e77faf3ad217 upstream.
    
    It's not done anything for a long time. Save the percpu variable, and
    emit a warning to remind users to not expect it to do anything.
    
    This uses pr_warn_once instead of pr_warn_ratelimit as testing
    'ppc64_cpu --smt=off' on a 24 core / 4 SMT system showed the warning
    to be noisy, as the online/offline loop is slow.
    
    Fixes: 3fa8cad82b94 ("powerpc/pseries/cpuidle: smt-snooze-delay cleanup.")
    Cc: stable@vger.kernel.org # v3.14
    Signed-off-by: Joel Stanley <joel@jms.id.au>
    Acked-by: Gautham R. Shenoy <ego@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200902000012.3440389-1-joel@jms.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 565d69b80321c55dc0ca46a3ad449009eb0de2f7
Author: Andrew Donnellan <ajd@linux.ibm.com>
Date:   Thu Aug 20 14:45:12 2020 +1000

    powerpc/rtas: Restrict RTAS requests from userspace
    
    commit bd59380c5ba4147dcbaad3e582b55ccfd120b764 upstream.
    
    A number of userspace utilities depend on making calls to RTAS to retrieve
    information and update various things.
    
    The existing API through which we expose RTAS to userspace exposes more
    RTAS functionality than we actually need, through the sys_rtas syscall,
    which allows root (or anyone with CAP_SYS_ADMIN) to make any RTAS call they
    want with arbitrary arguments.
    
    Many RTAS calls take the address of a buffer as an argument, and it's up to
    the caller to specify the physical address of the buffer as an argument. We
    allocate a buffer (the "RMO buffer") in the Real Memory Area that RTAS can
    access, and then expose the physical address and size of this buffer in
    /proc/powerpc/rtas/rmo_buffer. Userspace is expected to read this address,
    poke at the buffer using /dev/mem, and pass an address in the RMO buffer to
    the RTAS call.
    
    However, there's nothing stopping the caller from specifying whatever
    address they want in the RTAS call, and it's easy to construct a series of
    RTAS calls that can overwrite arbitrary bytes (even without /dev/mem
    access).
    
    Additionally, there are some RTAS calls that do potentially dangerous
    things and for which there are no legitimate userspace use cases.
    
    In the past, this would not have been a particularly big deal as it was
    assumed that root could modify all system state freely, but with Secure
    Boot and lockdown we need to care about this.
    
    We can't fundamentally change the ABI at this point, however we can address
    this by implementing a filter that checks RTAS calls against a list
    of permitted calls and forces the caller to use addresses within the RMO
    buffer.
    
    The list is based off the list of calls that are used by the librtas
    userspace library, and has been tested with a number of existing userspace
    RTAS utilities. For compatibility with any applications we are not aware of
    that require other calls, the filter can be turned off at build time.
    
    Cc: stable@vger.kernel.org
    Reported-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Andrew Donnellan <ajd@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200820044512.7543-1-ajd@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20de46a73d0367d17a2ea2c2c77b10a482e35c7b
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Tue Sep 15 08:53:50 2020 +0200

    s390/stp: add locking to sysfs functions
    
    commit b3bd02495cb339124f13135d51940cf48d83e5cb upstream.
    
    The sysfs function might race with stp_work_fn. To prevent that,
    add the required locking. Another issue is that the sysfs functions
    are checking the stp_online flag, but this flag just holds the user
    setting whether STP is enabled. Add a flag to clock_sync_flag whether
    stp_info holds valid data and use that instead.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Reviewed-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cf6e171c2c70364d167ee4a9a3cd3a1bb696bee
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:41 2020 +0100

    iio:gyro:itg3200: Fix timestamp alignment and prevent data leak.
    
    commit 10ab7cfd5522f0041028556dac864a003e158556 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 16 byte array of smaller elements on the stack.
    This is fixed by using an explicit c structure. As there are no
    holes in the structure, there is no possiblity of data leakage
    in this case.
    
    The explicit alignment of ts is not strictly necessary but potentially
    makes the code slightly less fragile.  It also removes the possibility
    of this being cut and paste into another driver where the alignment
    isn't already true.
    
    Fixes: 36e0371e7764 ("iio:itg3200: Use iio_push_to_buffers_with_timestamp()")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-6-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd9ba5d57bf6b86f801ca3d9c57979d97ecf2852
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:51:01 2020 +0100

    iio:adc:ti-adc12138 Fix alignment issue with timestamp
    
    commit 293e809b2e8e608b65a949101aaf7c0bd1224247 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    
    We move to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak apart from previous readings. Note that previously
    no leak at all could occur, but previous readings should never
    be a problem.
    
    In this case the timestamp location depends on what other channels
    are enabled. As such we can't use a structure without misleading
    by suggesting only one possible timestamp location.
    
    Fixes: 50a6edb1b6e0 ("iio: adc: add ADC12130/ADC12132/ADC12138 ADC driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-26-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c11be4c22a555c6f2907ddb8d25bb2790b322dfd
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:51:00 2020 +0100

    iio:adc:ti-adc0832 Fix alignment issue with timestamp
    
    commit 39e91f3be4cba51c1560bcda3a343ed1f64dc916 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    
    We fix this issues by moving to a suitable structure in the iio_priv()
    data with alignment explicitly requested.  This data is allocated
    with kzalloc so no data can leak apart from previous readings.
    Note that previously no data could leak 'including' previous readings
    but I don't think it is an issue to potentially leak them like
    this now does.
    
    In this case the postioning of the timestamp is depends on what
    other channels are enabled. As such we cannot use a structure to
    make the alignment explicit as it would be missleading by suggesting
    only one possible location for the timestamp.
    
    Fixes: 815bbc87462a ("iio: ti-adc0832: add triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-25-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6345a40396ba77c90f9cdd571bcb0254b4c443d9
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:44 2020 +0100

    iio:light:si1145: Fix timestamp alignment and prevent data leak.
    
    commit 0456ecf34d466261970e0ff92b2b9c78a4908637 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 24 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable array in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    Depending on the enabled channels, the  location of the timestamp
    can be at various aligned offsets through the buffer.  As such we
    any use of a structure to enforce this alignment would incorrectly
    suggest a single location for the timestamp.  Comments adjusted to
    express this clearly in the code.
    
    Fixes: ac45e57f1590 ("iio: light: Add driver for Silabs si1132, si1141/2/3 and si1145/6/7 ambient light, uv index and proximity sensors")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Peter Meerwald-Stadler <pmeerw@pmeerw.net>
    Cc: <Stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722155103.979802-9-jic23@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a728a733ef0c378caecba795132126e450e6b9e0
Author: Paul Cercueil <paul@crapouillou.net>
Date:   Sun Oct 4 16:03:07 2020 +0200

    dmaengine: dma-jz4780: Fix race in jz4780_dma_tx_status
    
    commit baf6fd97b16ea8f981b8a8b04039596f32fc2972 upstream.
    
    The jz4780_dma_tx_status() function would check if a channel's cookie
    state was set to 'completed', and if not, it would enter the critical
    section. However, in that time frame, the jz4780_dma_chan_irq() function
    was able to set the cookie to 'completed', and clear the jzchan->vchan
    pointer, which was deferenced in the critical section of the first
    function.
    
    Fix this race by checking the channel's cookie state after entering the
    critical function and not before.
    
    Fixes: d894fc6046fe ("dmaengine: jz4780: add driver for the Ingenic JZ4780 DMA controller")
    Cc: stable@vger.kernel.org # v4.0
    Signed-off-by: Paul Cercueil <paul@crapouillou.net>
    Reported-by: Artur Rojek <contact@artur-rojek.eu>
    Tested-by: Artur Rojek <contact@artur-rojek.eu>
    Link: https://lore.kernel.org/r/20201004140307.885556-1-paul@crapouillou.net
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5408e3349335fa390406613dcc66eb451a5a4d43
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Oct 19 10:55:17 2020 +0200

    vt: keyboard, extend func_buf_lock to readers
    
    commit 82e61c3909db51d91b9d3e2071557b6435018b80 upstream.
    
    Both read-side users of func_table/func_buf need locking. Without that,
    one can easily confuse the code by repeatedly setting altering strings
    like:
    while (1)
            for (a = 0; a < 2; a++) {
                    struct kbsentry kbs = {};
                    strcpy((char *)kbs.kb_string, a ? ".\n" : "88888\n");
                    ioctl(fd, KDSKBSENT, &kbs);
            }
    
    When that program runs, one can get unexpected output by holding F1
    (note the unxpected period on the last line):
    .
    88888
    .8888
    
    So protect all accesses to 'func_table' (and func_buf) by preexisting
    'func_buf_lock'.
    
    It is easy in 'k_fn' handler as 'puts_queue' is expected not to sleep.
    On the other hand, KDGKBSENT needs a local (atomic) copy of the string
    because copy_to_user can sleep. Use already allocated, but unused
    'kbs->kb_string' for that purpose.
    
    Note that the program above needs at least CAP_SYS_TTY_CONFIG.
    
    This depends on the previous patch and on the func_buf_lock lock added
    in commit 46ca3f735f34 (tty/vt: fix write/write race in ioctl(KDSKBSENT)
    handler) in 5.2.
    
    Likely fixes CVE-2020-25656.
    
    Cc: <stable@vger.kernel.org>
    Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20201019085517.10176-2-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e6055d657a4a1e379bcd6edd806dbe21b58d89a
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Mon Oct 19 10:55:16 2020 +0200

    vt: keyboard, simplify vt_kdgkbsent
    
    commit 6ca03f90527e499dd5e32d6522909e2ad390896b upstream.
    
    Use 'strlen' of the string, add one for NUL terminator and simply do
    'copy_to_user' instead of the explicit 'for' loop. This makes the
    KDGKBSENT case more compact.
    
    The only thing we need to take care about is NULL 'func_table[i]'. Use
    an empty string in that case.
    
    The original check for overflow could never trigger as the func_buf
    strings are always shorter or equal to 'struct kbsentry's.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Link: https://lore.kernel.org/r/20201019085517.10176-1-jslaby@suse.cz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 509d40f4596c84614ad03e1f8bf37ec2c6ff2541
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Oct 19 11:15:23 2020 +0100

    drm/i915: Force VT'd workarounds when running as a guest OS
    
    commit 8195400f7ea95399f721ad21f4d663a62c65036f upstream.
    
    If i915.ko is being used as a passthrough device, it does not know if
    the host is using intel_iommu. Mixing the iommu and gfx causes a few
    issues (such as scanout overfetch) which we need to workaround inside
    the driver, so if we detect we are running under a hypervisor, also
    assume the device access is being virtualised.
    
    Reported-by: Stefan Fritsch <sf@sfritsch.de>
    Suggested-by: Stefan Fritsch <sf@sfritsch.de>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Stefan Fritsch <sf@sfritsch.de>
    Cc: stable@vger.kernel.org
    Tested-by: Stefan Fritsch <sf@sfritsch.de>
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201019101523.4145-1-chris@chris-wilson.co.uk
    (cherry picked from commit f566fdcd6cc49a9d5b5d782f56e3e7cb243f01b8)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d57294deebae87f4f180d8b47038eb784133ace
Author: Ran Wang <ran.wang_1@nxp.com>
Date:   Sat Oct 10 14:03:08 2020 +0800

    usb: host: fsl-mph-dr-of: check return of dma_set_mask()
    
    commit 3cd54a618834430a26a648d880dd83d740f2ae30 upstream.
    
    fsl_usb2_device_register() should stop init if dma_set_mask() return
    error.
    
    Fixes: cae058610465 ("drivers/usb/host: fsl: Set DMA_MASK of usb platform device")
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Signed-off-by: Ran Wang <ran.wang_1@nxp.com>
    Link: https://lore.kernel.org/r/20201010060308.33693-1-ran.wang_1@nxp.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 108f2a40bce5881bfc87e05e2957af894bc1814c
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Mon Oct 19 19:07:02 2020 +0200

    usb: cdc-acm: fix cooldown mechanism
    
    commit 38203b8385bf6283537162bde7d499f830964711 upstream.
    
    Commit a4e7279cd1d1 ("cdc-acm: introduce a cool down") is causing
    regression if there is some USB error, such as -EPROTO.
    
    This has been reported on some samples of the Odroid-N2 using the Combee II
    Zibgee USB dongle.
    
    > struct acm *acm = container_of(work, struct acm, work)
    
    is incorrect in case of a delayed work and causes warnings, usually from
    the workqueue:
    
    > WARNING: CPU: 0 PID: 0 at kernel/workqueue.c:1474 __queue_work+0x480/0x528.
    
    When this happens, USB eventually stops working completely after a while.
    Also the ACM_ERROR_DELAY bit is never set, so the cooldown mechanism
    previously introduced cannot be triggered and acm_submit_read_urb() is
    never called.
    
    This changes makes the cdc-acm driver use a single delayed work, fixing the
    pointer arithmetic in acm_softint() and set the ACM_ERROR_DELAY when the
    cooldown mechanism appear to be needed.
    
    Fixes: a4e7279cd1d1 ("cdc-acm: introduce a cool down")
    Cc: Oliver Neukum <oneukum@suse.com>
    Reported-by: Pascal Vizeli <pascal.vizeli@nabucasa.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://lore.kernel.org/r/20201019170702.150534-1-jbrunet@baylibre.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58b79b15e96b7a212c6e26dc25644f445c4a4862
Author: Li Jun <jun.li@nxp.com>
Date:   Tue Jul 28 20:42:40 2020 +0800

    usb: dwc3: core: don't trigger runtime pm when remove driver
    
    commit 266d0493900ac5d6a21cdbe6b1624ed2da94d47a upstream.
    
    No need to trigger runtime pm in driver removal, otherwise if user
    disable auto suspend via sys file, runtime suspend may be entered,
    which will call dwc3_core_exit() again and there will be clock disable
    not balance warning:
    
    [ 2026.820154] xhci-hcd xhci-hcd.0.auto: remove, state 4
    [ 2026.825268] usb usb2: USB disconnect, device number 1
    [ 2026.831017] xhci-hcd xhci-hcd.0.auto: USB bus 2 deregistered
    [ 2026.836806] xhci-hcd xhci-hcd.0.auto: remove, state 4
    [ 2026.842029] usb usb1: USB disconnect, device number 1
    [ 2026.848029] xhci-hcd xhci-hcd.0.auto: USB bus 1 deregistered
    [ 2026.865889] ------------[ cut here ]------------
    [ 2026.870506] usb2_ctrl_root_clk already disabled
    [ 2026.875082] WARNING: CPU: 0 PID: 731 at drivers/clk/clk.c:958
    clk_core_disable+0xa0/0xa8
    [ 2026.883170] Modules linked in: dwc3(-) phy_fsl_imx8mq_usb [last
    unloaded: dwc3]
    [ 2026.890488] CPU: 0 PID: 731 Comm: rmmod Not tainted
    5.8.0-rc7-00280-g9d08cca-dirty #245
    [ 2026.898489] Hardware name: NXP i.MX8MQ EVK (DT)
    [ 2026.903020] pstate: 20000085 (nzCv daIf -PAN -UAO BTYPE=--)
    [ 2026.908594] pc : clk_core_disable+0xa0/0xa8
    [ 2026.912777] lr : clk_core_disable+0xa0/0xa8
    [ 2026.916958] sp : ffff8000121b39a0
    [ 2026.920271] x29: ffff8000121b39a0 x28: ffff0000b11f3700
    [ 2026.925583] x27: 0000000000000000 x26: ffff0000b539c700
    [ 2026.930895] x25: 000001d7e44e1232 x24: ffff0000b76fa800
    [ 2026.936208] x23: ffff0000b76fa6f8 x22: ffff800008d01040
    [ 2026.941520] x21: ffff0000b539ce00 x20: ffff0000b7105000
    [ 2026.946832] x19: ffff0000b7105000 x18: 0000000000000010
    [ 2026.952144] x17: 0000000000000001 x16: 0000000000000000
    [ 2026.957456] x15: ffff0000b11f3b70 x14: ffffffffffffffff
    [ 2026.962768] x13: ffff8000921b36f7 x12: ffff8000121b36ff
    [ 2026.968080] x11: ffff8000119e1000 x10: ffff800011bf26d0
    [ 2026.973392] x9 : 0000000000000000 x8 : ffff800011bf3000
    [ 2026.978704] x7 : ffff800010695d68 x6 : 0000000000000252
    [ 2026.984016] x5 : ffff0000bb9881f0 x4 : 0000000000000000
    [ 2026.989327] x3 : 0000000000000027 x2 : 0000000000000023
    [ 2026.994639] x1 : ac2fa471aa7cab00 x0 : 0000000000000000
    [ 2026.999951] Call trace:
    [ 2027.002401]  clk_core_disable+0xa0/0xa8
    [ 2027.006238]  clk_core_disable_lock+0x20/0x38
    [ 2027.010508]  clk_disable+0x1c/0x28
    [ 2027.013911]  clk_bulk_disable+0x34/0x50
    [ 2027.017758]  dwc3_core_exit+0xec/0x110 [dwc3]
    [ 2027.022122]  dwc3_suspend_common+0x84/0x188 [dwc3]
    [ 2027.026919]  dwc3_runtime_suspend+0x74/0x9c [dwc3]
    [ 2027.031712]  pm_generic_runtime_suspend+0x28/0x40
    [ 2027.036419]  genpd_runtime_suspend+0xa0/0x258
    [ 2027.040777]  __rpm_callback+0x88/0x140
    [ 2027.044526]  rpm_callback+0x20/0x80
    [ 2027.048015]  rpm_suspend+0xd0/0x418
    [ 2027.051503]  __pm_runtime_suspend+0x58/0xa0
    [ 2027.055693]  dwc3_runtime_idle+0x7c/0x90 [dwc3]
    [ 2027.060224]  __rpm_callback+0x88/0x140
    [ 2027.063973]  rpm_idle+0x78/0x150
    [ 2027.067201]  __pm_runtime_idle+0x58/0xa0
    [ 2027.071130]  dwc3_remove+0x64/0xc0 [dwc3]
    [ 2027.075140]  platform_drv_remove+0x28/0x48
    [ 2027.079239]  device_release_driver_internal+0xf4/0x1c0
    [ 2027.084377]  driver_detach+0x4c/0xd8
    [ 2027.087954]  bus_remove_driver+0x54/0xa8
    [ 2027.091877]  driver_unregister+0x2c/0x58
    [ 2027.095799]  platform_driver_unregister+0x10/0x18
    [ 2027.100509]  dwc3_driver_exit+0x14/0x1408 [dwc3]
    [ 2027.105129]  __arm64_sys_delete_module+0x178/0x218
    [ 2027.109922]  el0_svc_common.constprop.0+0x68/0x160
    [ 2027.114714]  do_el0_svc+0x20/0x80
    [ 2027.118031]  el0_sync_handler+0x88/0x190
    [ 2027.121953]  el0_sync+0x140/0x180
    [ 2027.125267] ---[ end trace 027f4f8189958f1f ]---
    [ 2027.129976] ------------[ cut here ]------------
    
    Fixes: fc8bb91bc83e ("usb: dwc3: implement runtime PM")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60bb364756758eb87f7516c709ab6467f68b4931
Author: Li Jun <jun.li@nxp.com>
Date:   Tue Jul 28 20:42:41 2020 +0800

    usb: dwc3: core: add phy cleanup for probe error handling
    
    commit 03c1fd622f72c7624c81b64fdba4a567ae5ee9cb upstream.
    
    Add the phy cleanup if dwc3 mode init fail, which is the missing part of
    de-init for dwc3 core init.
    
    Fixes: c499ff71ff2a ("usb: dwc3: core: re-factor init and exit paths")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0193b463c42430c3cef1fe8e233ea498255e79e0
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Thu Sep 24 01:21:43 2020 -0700

    usb: dwc3: ep0: Fix ZLP for OUT ep0 requests
    
    commit 66706077dc89c66a4777a4c6298273816afb848c upstream.
    
    The current ZLP handling for ep0 requests is only for control IN
    requests. For OUT direction, DWC3 needs to check and setup for MPS
    alignment.
    
    Usually, control OUT requests can indicate its transfer size via the
    wLength field of the control message. So usb_request->zero is usually
    not needed for OUT direction. To handle ZLP OUT for control endpoint,
    make sure the TRB is MPS size.
    
    Cc: stable@vger.kernel.org
    Fixes: c7fcdeb2627c ("usb: dwc3: ep0: simplify EP0 state machine")
    Fixes: d6e5a549cc4d ("usb: dwc3: simplify ZLP handling")
    Signed-off-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2042ff1f19e46f72970899d2164b345ca40f3e55
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Oct 12 11:55:23 2020 +0100

    btrfs: fix use-after-free on readahead extent after failure to create it
    
    commit 83bc1560e02e25c6439341352024ebe8488f4fbd upstream.
    
    If we fail to find suitable zones for a new readahead extent, we end up
    leaving a stale pointer in the global readahead extents radix tree
    (fs_info->reada_tree), which can trigger the following trace later on:
    
      [13367.696354] BUG: kernel NULL pointer dereference, address: 00000000000000b0
      [13367.696802] #PF: supervisor read access in kernel mode
      [13367.697249] #PF: error_code(0x0000) - not-present page
      [13367.697721] PGD 0 P4D 0
      [13367.698171] Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
      [13367.698632] CPU: 6 PID: 851214 Comm: btrfs Tainted: G        W         5.9.0-rc6-btrfs-next-69 #1
      [13367.699100] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
      [13367.700069] RIP: 0010:__lock_acquire+0x20a/0x3970
      [13367.700562] Code: ff 1f 0f b7 c0 48 0f (...)
      [13367.701609] RSP: 0018:ffffb14448f57790 EFLAGS: 00010046
      [13367.702140] RAX: 0000000000000000 RBX: 29b935140c15e8cf RCX: 0000000000000000
      [13367.702698] RDX: 0000000000000002 RSI: ffffffffb3d66bd0 RDI: 0000000000000046
      [13367.703240] RBP: ffff8a52ba8ac040 R08: 00000c2866ad9288 R09: 0000000000000001
      [13367.703783] R10: 0000000000000001 R11: 00000000b66d9b53 R12: ffff8a52ba8ac9b0
      [13367.704330] R13: 0000000000000000 R14: ffff8a532b6333e8 R15: 0000000000000000
      [13367.704880] FS:  00007fe1df6b5700(0000) GS:ffff8a5376600000(0000) knlGS:0000000000000000
      [13367.705438] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [13367.705995] CR2: 00000000000000b0 CR3: 000000022cca8004 CR4: 00000000003706e0
      [13367.706565] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      [13367.707127] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      [13367.707686] Call Trace:
      [13367.708246]  ? ___slab_alloc+0x395/0x740
      [13367.708820]  ? reada_add_block+0xae/0xee0 [btrfs]
      [13367.709383]  lock_acquire+0xb1/0x480
      [13367.709955]  ? reada_add_block+0xe0/0xee0 [btrfs]
      [13367.710537]  ? reada_add_block+0xae/0xee0 [btrfs]
      [13367.711097]  ? rcu_read_lock_sched_held+0x5d/0x90
      [13367.711659]  ? kmem_cache_alloc_trace+0x8d2/0x990
      [13367.712221]  ? lock_acquired+0x33b/0x470
      [13367.712784]  _raw_spin_lock+0x34/0x80
      [13367.713356]  ? reada_add_block+0xe0/0xee0 [btrfs]
      [13367.713966]  reada_add_block+0xe0/0xee0 [btrfs]
      [13367.714529]  ? btrfs_root_node+0x15/0x1f0 [btrfs]
      [13367.715077]  btrfs_reada_add+0x117/0x170 [btrfs]
      [13367.715620]  scrub_stripe+0x21e/0x10d0 [btrfs]
      [13367.716141]  ? kvm_sched_clock_read+0x5/0x10
      [13367.716657]  ? __lock_acquire+0x41e/0x3970
      [13367.717184]  ? scrub_chunk+0x60/0x140 [btrfs]
      [13367.717697]  ? find_held_lock+0x32/0x90
      [13367.718254]  ? scrub_chunk+0x60/0x140 [btrfs]
      [13367.718773]  ? lock_acquired+0x33b/0x470
      [13367.719278]  ? scrub_chunk+0xcd/0x140 [btrfs]
      [13367.719786]  scrub_chunk+0xcd/0x140 [btrfs]
      [13367.720291]  scrub_enumerate_chunks+0x270/0x5c0 [btrfs]
      [13367.720787]  ? finish_wait+0x90/0x90
      [13367.721281]  btrfs_scrub_dev+0x1ee/0x620 [btrfs]
      [13367.721762]  ? rcu_read_lock_any_held+0x8e/0xb0
      [13367.722235]  ? preempt_count_add+0x49/0xa0
      [13367.722710]  ? __sb_start_write+0x19b/0x290
      [13367.723192]  btrfs_ioctl+0x7f5/0x36f0 [btrfs]
      [13367.723660]  ? __fget_files+0x101/0x1d0
      [13367.724118]  ? find_held_lock+0x32/0x90
      [13367.724559]  ? __fget_files+0x101/0x1d0
      [13367.724982]  ? __x64_sys_ioctl+0x83/0xb0
      [13367.725399]  __x64_sys_ioctl+0x83/0xb0
      [13367.725802]  do_syscall_64+0x33/0x80
      [13367.726188]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [13367.726574] RIP: 0033:0x7fe1df7add87
      [13367.726948] Code: 00 00 00 48 8b 05 09 91 (...)
      [13367.727763] RSP: 002b:00007fe1df6b4d48 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [13367.728179] RAX: ffffffffffffffda RBX: 000055ce1fb596a0 RCX: 00007fe1df7add87
      [13367.728604] RDX: 000055ce1fb596a0 RSI: 00000000c400941b RDI: 0000000000000003
      [13367.729021] RBP: 0000000000000000 R08: 00007fe1df6b5700 R09: 0000000000000000
      [13367.729431] R10: 00007fe1df6b5700 R11: 0000000000000246 R12: 00007ffd922b07de
      [13367.729842] R13: 00007ffd922b07df R14: 00007fe1df6b4e40 R15: 0000000000802000
      [13367.730275] Modules linked in: btrfs blake2b_generic xor (...)
      [13367.732638] CR2: 00000000000000b0
      [13367.733166] ---[ end trace d298b6805556acd9 ]---
    
    What happens is the following:
    
    1) At reada_find_extent() we don't find any existing readahead extent for
       the metadata extent starting at logical address X;
    
    2) So we proceed to create a new one. We then call btrfs_map_block() to get
       information about which stripes contain extent X;
    
    3) After that we iterate over the stripes and create only one zone for the
       readahead extent - only one because reada_find_zone() returned NULL for
       all iterations except for one, either because a memory allocation failed
       or it couldn't find the block group of the extent (it may have just been
       deleted);
    
    4) We then add the new readahead extent to the readahead extents radix
       tree at fs_info->reada_tree;
    
    5) Then we iterate over each zone of the new readahead extent, and find
       that the device used for that zone no longer exists, because it was
       removed or it was the source device of a device replace operation.
       Since this left 'have_zone' set to 0, after finishing the loop we jump
       to the 'error' label, call kfree() on the new readahead extent and
       return without removing it from the radix tree at fs_info->reada_tree;
    
    6) Any future call to reada_find_extent() for the logical address X will
       find the stale pointer in the readahead extents radix tree, increment
       its reference counter, which can trigger the use-after-free right
       away or return it to the caller reada_add_block() that results in the
       use-after-free of the example trace above.
    
    So fix this by making sure we delete the readahead extent from the radix
    tree if we fail to setup zones for it (when 'have_zone = 0').
    
    Fixes: 319450211842ba ("btrfs: reada: bypass adding extent when all zone failed")
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b73f3652efddc7407807a0cd808851ba597f43a
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Sep 29 08:53:54 2020 -0400

    btrfs: cleanup cow block on error
    
    commit 572c83acdcdafeb04e70aa46be1fa539310be20c upstream.
    
    In fstest btrfs/064 a transaction abort in __btrfs_cow_block could lead
    to a system lockup. It gets stuck trying to write back inodes, and the
    write back thread was trying to lock an extent buffer:
    
      $ cat /proc/2143497/stack
      [<0>] __btrfs_tree_lock+0x108/0x250
      [<0>] lock_extent_buffer_for_io+0x35e/0x3a0
      [<0>] btree_write_cache_pages+0x15a/0x3b0
      [<0>] do_writepages+0x28/0xb0
      [<0>] __writeback_single_inode+0x54/0x5c0
      [<0>] writeback_sb_inodes+0x1e8/0x510
      [<0>] wb_writeback+0xcc/0x440
      [<0>] wb_workfn+0xd7/0x650
      [<0>] process_one_work+0x236/0x560
      [<0>] worker_thread+0x55/0x3c0
      [<0>] kthread+0x13a/0x150
      [<0>] ret_from_fork+0x1f/0x30
    
    This is because we got an error while COWing a block, specifically here
    
            if (test_bit(BTRFS_ROOT_SHAREABLE, &root->state)) {
                    ret = btrfs_reloc_cow_block(trans, root, buf, cow);
                    if (ret) {
                            btrfs_abort_transaction(trans, ret);
                            return ret;
                    }
            }
    
      [16402.241552] BTRFS: Transaction aborted (error -2)
      [16402.242362] WARNING: CPU: 1 PID: 2563188 at fs/btrfs/ctree.c:1074 __btrfs_cow_block+0x376/0x540
      [16402.249469] CPU: 1 PID: 2563188 Comm: fsstress Not tainted 5.9.0-rc6+ #8
      [16402.249936] Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      [16402.250525] RIP: 0010:__btrfs_cow_block+0x376/0x540
      [16402.252417] RSP: 0018:ffff9cca40e578b0 EFLAGS: 00010282
      [16402.252787] RAX: 0000000000000025 RBX: 0000000000000002 RCX: ffff9132bbd19388
      [16402.253278] RDX: 00000000ffffffd8 RSI: 0000000000000027 RDI: ffff9132bbd19380
      [16402.254063] RBP: ffff9132b41a49c0 R08: 0000000000000000 R09: 0000000000000000
      [16402.254887] R10: 0000000000000000 R11: ffff91324758b080 R12: ffff91326ef17ce0
      [16402.255694] R13: ffff91325fc0f000 R14: ffff91326ef176b0 R15: ffff9132815e2000
      [16402.256321] FS:  00007f542c6d7b80(0000) GS:ffff9132bbd00000(0000) knlGS:0000000000000000
      [16402.256973] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      [16402.257374] CR2: 00007f127b83f250 CR3: 0000000133480002 CR4: 0000000000370ee0
      [16402.257867] Call Trace:
      [16402.258072]  btrfs_cow_block+0x109/0x230
      [16402.258356]  btrfs_search_slot+0x530/0x9d0
      [16402.258655]  btrfs_lookup_file_extent+0x37/0x40
      [16402.259155]  __btrfs_drop_extents+0x13c/0xd60
      [16402.259628]  ? btrfs_block_rsv_migrate+0x4f/0xb0
      [16402.259949]  btrfs_replace_file_extents+0x190/0x820
      [16402.260873]  btrfs_clone+0x9ae/0xc00
      [16402.261139]  btrfs_extent_same_range+0x66/0x90
      [16402.261771]  btrfs_remap_file_range+0x353/0x3b1
      [16402.262333]  vfs_dedupe_file_range_one.part.0+0xd5/0x140
      [16402.262821]  vfs_dedupe_file_range+0x189/0x220
      [16402.263150]  do_vfs_ioctl+0x552/0x700
      [16402.263662]  __x64_sys_ioctl+0x62/0xb0
      [16402.264023]  do_syscall_64+0x33/0x40
      [16402.264364]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
      [16402.264862] RIP: 0033:0x7f542c7d15cb
      [16402.266901] RSP: 002b:00007ffd35944ea8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      [16402.267627] RAX: ffffffffffffffda RBX: 00000000009d1968 RCX: 00007f542c7d15cb
      [16402.268298] RDX: 00000000009d2490 RSI: 00000000c0189436 RDI: 0000000000000003
      [16402.268958] RBP: 00000000009d2520 R08: 0000000000000036 R09: 00000000009d2e64
      [16402.269726] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000002
      [16402.270659] R13: 000000000001f000 R14: 00000000009d1970 R15: 00000000009d2e80
      [16402.271498] irq event stamp: 0
      [16402.271846] hardirqs last  enabled at (0): [<0000000000000000>] 0x0
      [16402.272497] hardirqs last disabled at (0): [<ffffffff910dbf59>] copy_process+0x6b9/0x1ba0
      [16402.273343] softirqs last  enabled at (0): [<ffffffff910dbf59>] copy_process+0x6b9/0x1ba0
      [16402.273905] softirqs last disabled at (0): [<0000000000000000>] 0x0
      [16402.274338] ---[ end trace 737874a5a41a8236 ]---
      [16402.274669] BTRFS: error (device dm-9) in __btrfs_cow_block:1074: errno=-2 No such entry
      [16402.276179] BTRFS info (device dm-9): forced readonly
      [16402.277046] BTRFS: error (device dm-9) in btrfs_replace_file_extents:2723: errno=-2 No such entry
      [16402.278744] BTRFS: error (device dm-9) in __btrfs_cow_block:1074: errno=-2 No such entry
      [16402.279968] BTRFS: error (device dm-9) in __btrfs_cow_block:1074: errno=-2 No such entry
      [16402.280582] BTRFS info (device dm-9): balance: ended with status: -30
    
    The problem here is that as soon as we allocate the new block it is
    locked and marked dirty in the btree inode.  This means that we could
    attempt to writeback this block and need to lock the extent buffer.
    However we're not unlocking it here and thus we deadlock.
    
    Fix this by unlocking the cow block if we have any errors inside of
    __btrfs_cow_block, and also free it so we do not leak it.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be075702562ef59e6617a62ffce06a9b79144392
Author: Denis Efremov <efremov@linux.com>
Date:   Mon Sep 21 20:03:35 2020 +0300

    btrfs: use kvzalloc() to allocate clone_roots in btrfs_ioctl_send()
    
    commit 8eb2fd00153a3a96a19c62ac9c6d48c2efebe5e8 upstream.
    
    btrfs_ioctl_send() used open-coded kvzalloc implementation earlier.
    The code was accidentally replaced with kzalloc() call [1]. Restore
    the original code by using kvzalloc() to allocate sctx->clone_roots.
    
    [1] https://patchwork.kernel.org/patch/9757891/#20529627
    
    Fixes: 818e010bf9d0 ("btrfs: replace opencoded kvzalloc with the helper")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71593f4544587cffd0f4ceb5e2ce9f6cfa2959fb
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 21 14:13:30 2020 +0100

    btrfs: send, recompute reference path after orphanization of a directory
    
    commit 9c2b4e0347067396ceb3ae929d6888c81d610259 upstream.
    
    During an incremental send, when an inode has multiple new references we
    might end up emitting rename operations for orphanizations that have a
    source path that is no longer valid due to a previous orphanization of
    some directory inode. This causes the receiver to fail since it tries
    to rename a path that does not exists.
    
    Example reproducer:
    
      $ cat reproducer.sh
      #!/bin/bash
    
      mkfs.btrfs -f /dev/sdi >/dev/null
      mount /dev/sdi /mnt/sdi
    
      touch /mnt/sdi/f1
      touch /mnt/sdi/f2
      mkdir /mnt/sdi/d1
      mkdir /mnt/sdi/d1/d2
    
      # Filesystem looks like:
      #
      # .                           (ino 256)
      # |----- f1                   (ino 257)
      # |----- f2                   (ino 258)
      # |----- d1/                  (ino 259)
      #        |----- d2/           (ino 260)
    
      btrfs subvolume snapshot -r /mnt/sdi /mnt/sdi/snap1
      btrfs send -f /tmp/snap1.send /mnt/sdi/snap1
    
      # Now do a series of changes such that:
      #
      # *) inode 258 has one new hardlink and the previous name changed
      #
      # *) both names conflict with the old names of two other inodes:
      #
      #    1) the new name "d1" conflicts with the old name of inode 259,
      #       under directory inode 256 (root)
      #
      #    2) the new name "d2" conflicts with the old name of inode 260
      #       under directory inode 259
      #
      # *) inodes 259 and 260 now have the old names of inode 258
      #
      # *) inode 257 is now located under inode 260 - an inode with a number
      #    smaller than the inode (258) for which we created a second hard
      #    link and swapped its names with inodes 259 and 260
      #
      ln /mnt/sdi/f2 /mnt/sdi/d1/f2_link
      mv /mnt/sdi/f1 /mnt/sdi/d1/d2/f1
    
      # Swap d1 and f2.
      mv /mnt/sdi/d1 /mnt/sdi/tmp
      mv /mnt/sdi/f2 /mnt/sdi/d1
      mv /mnt/sdi/tmp /mnt/sdi/f2
    
      # Swap d2 and f2_link
      mv /mnt/sdi/f2/d2 /mnt/sdi/tmp
      mv /mnt/sdi/f2/f2_link /mnt/sdi/f2/d2
      mv /mnt/sdi/tmp /mnt/sdi/f2/f2_link
    
      # Filesystem now looks like:
      #
      # .                                (ino 256)
      # |----- d1                        (ino 258)
      # |----- f2/                       (ino 259)
      #        |----- f2_link/           (ino 260)
      #        |       |----- f1         (ino 257)
      #        |
      #        |----- d2                 (ino 258)
    
      btrfs subvolume snapshot -r /mnt/sdi /mnt/sdi/snap2
      btrfs send -f /tmp/snap2.send -p /mnt/sdi/snap1 /mnt/sdi/snap2
    
      mkfs.btrfs -f /dev/sdj >/dev/null
      mount /dev/sdj /mnt/sdj
    
      btrfs receive -f /tmp/snap1.send /mnt/sdj
      btrfs receive -f /tmp/snap2.send /mnt/sdj
    
      umount /mnt/sdi
      umount /mnt/sdj
    
    When executed the receive of the incremental stream fails:
    
      $ ./reproducer.sh
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap1'
      At subvol /mnt/sdi/snap1
      Create a readonly snapshot of '/mnt/sdi' in '/mnt/sdi/snap2'
      At subvol /mnt/sdi/snap2
      At subvol snap1
      At snapshot snap2
      ERROR: rename d1/d2 -> o260-6-0 failed: No such file or directory
    
    This happens because:
    
    1) When processing inode 257 we end up computing the name for inode 259
       because it is an ancestor in the send snapshot, and at that point it
       still has its old name, "d1", from the parent snapshot because inode
       259 was not yet processed. We then cache that name, which is valid
       until we start processing inode 259 (or set the progress to 260 after
       processing its references);
    
    2) Later we start processing inode 258 and collecting all its new
       references into the list sctx->new_refs. The first reference in the
       list happens to be the reference for name "d1" while the reference for
       name "d2" is next (the last element of the list).
       We compute the full path "d1/d2" for this second reference and store
       it in the reference (its ->full_path member). The path used for the
       new parent directory was "d1" and not "f2" because inode 259, the
       new parent, was not yet processed;
    
    3) When we start processing the new references at process_recorded_refs()
       we start with the first reference in the list, for the new name "d1".
       Because there is a conflicting inode that was not yet processed, which
       is directory inode 259, we orphanize it, renaming it from "d1" to
       "o259-6-0";
    
    4) Then we start processing the new reference for name "d2", and we
       realize it conflicts with the reference of inode 260 in the parent
       snapshot. So we issue an orphanization operation for inode 260 by
       emitting a rename operation with a destination path of "o260-6-0"
       and a source path of "d1/d2" - this source path is the value we
       stored in the reference earlier at step 2), corresponding to the
       ->full_path member of the reference, however that path is no longer
       valid due to the orphanization of the directory inode 259 in step 3).
       This makes the receiver fail since the path does not exists, it should
       have been "o259-6-0/d2".
    
    Fix this by recomputing the full path of a reference before emitting an
    orphanization if we previously orphanized any directory, since that
    directory could be a parent in the new path. This is a rare scenario so
    keeping it simple and not checking if that previously orphanized directory
    is in fact an ancestor of the inode we are trying to orphanize.
    
    A test case for fstests follows soon.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f50b62c09183c253aea698acdd041085a6944f3
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 14 15:27:50 2020 +0100

    btrfs: reschedule if necessary when logging directory items
    
    commit bb56f02f26fe23798edb1b2175707419b28c752a upstream.
    
    Logging directories with many entries can take a significant amount of
    time, and in some cases monopolize a cpu/core for a long time if the
    logging task doesn't happen to block often enough.
    
    Johannes and Lu Fengqi reported test case generic/041 triggering a soft
    lockup when the kernel has CONFIG_SOFTLOCKUP_DETECTOR=y. For this test
    case we log an inode with 3002 hard links, and because the test removed
    one hard link before fsyncing the file, the inode logging causes the
    parent directory do be logged as well, which has 6004 directory items to
    log (3002 BTRFS_DIR_ITEM_KEY items plus 3002 BTRFS_DIR_INDEX_KEY items),
    so it can take a significant amount of time and trigger the soft lockup.
    
    So just make tree-log.c:log_dir_items() reschedule when necessary,
    releasing the current search path before doing so and then resume from
    where it was before the reschedule.
    
    The stack trace produced when the soft lockup happens is the following:
    
    [10480.277653] watchdog: BUG: soft lockup - CPU#2 stuck for 22s! [xfs_io:28172]
    [10480.279418] Modules linked in: dm_thin_pool dm_persistent_data (...)
    [10480.284915] irq event stamp: 29646366
    [10480.285987] hardirqs last  enabled at (29646365): [<ffffffff85249b66>] __slab_alloc.constprop.0+0x56/0x60
    [10480.288482] hardirqs last disabled at (29646366): [<ffffffff8579b00d>] irqentry_enter+0x1d/0x50
    [10480.290856] softirqs last  enabled at (4612): [<ffffffff85a00323>] __do_softirq+0x323/0x56c
    [10480.293615] softirqs last disabled at (4483): [<ffffffff85800dbf>] asm_call_on_stack+0xf/0x20
    [10480.296428] CPU: 2 PID: 28172 Comm: xfs_io Not tainted 5.9.0-rc4-default+ #1248
    [10480.298948] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba527-rebuilt.opensuse.org 04/01/2014
    [10480.302455] RIP: 0010:__slab_alloc.constprop.0+0x19/0x60
    [10480.304151] Code: 86 e8 31 75 21 00 66 66 2e 0f 1f 84 00 00 00 (...)
    [10480.309558] RSP: 0018:ffffadbe09397a58 EFLAGS: 00000282
    [10480.311179] RAX: ffff8a495ab92840 RBX: 0000000000000282 RCX: 0000000000000006
    [10480.313242] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff85249b66
    [10480.315260] RBP: ffff8a497d04b740 R08: 0000000000000001 R09: 0000000000000001
    [10480.317229] R10: ffff8a497d044800 R11: ffff8a495ab93c40 R12: 0000000000000000
    [10480.319169] R13: 0000000000000000 R14: 0000000000000c40 R15: ffffffffc01daf70
    [10480.321104] FS:  00007fa1dc5c0e40(0000) GS:ffff8a497da00000(0000) knlGS:0000000000000000
    [10480.323559] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [10480.325235] CR2: 00007fa1dc5befb8 CR3: 0000000004f8a006 CR4: 0000000000170ea0
    [10480.327259] Call Trace:
    [10480.328286]  ? overwrite_item+0x1f0/0x5a0 [btrfs]
    [10480.329784]  __kmalloc+0x831/0xa20
    [10480.331009]  ? btrfs_get_32+0xb0/0x1d0 [btrfs]
    [10480.332464]  overwrite_item+0x1f0/0x5a0 [btrfs]
    [10480.333948]  log_dir_items+0x2ee/0x570 [btrfs]
    [10480.335413]  log_directory_changes+0x82/0xd0 [btrfs]
    [10480.336926]  btrfs_log_inode+0xc9b/0xda0 [btrfs]
    [10480.338374]  ? init_once+0x20/0x20 [btrfs]
    [10480.339711]  btrfs_log_inode_parent+0x8d3/0xd10 [btrfs]
    [10480.341257]  ? dget_parent+0x97/0x2e0
    [10480.342480]  btrfs_log_dentry_safe+0x3a/0x50 [btrfs]
    [10480.343977]  btrfs_sync_file+0x24b/0x5e0 [btrfs]
    [10480.345381]  do_fsync+0x38/0x70
    [10480.346483]  __x64_sys_fsync+0x10/0x20
    [10480.347703]  do_syscall_64+0x2d/0x70
    [10480.348891]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [10480.350444] RIP: 0033:0x7fa1dc80970b
    [10480.351642] Code: 0f 05 48 3d 00 f0 ff ff 77 45 c3 0f 1f 40 00 48 (...)
    [10480.356952] RSP: 002b:00007fffb3d081d0 EFLAGS: 00000293 ORIG_RAX: 000000000000004a
    [10480.359458] RAX: ffffffffffffffda RBX: 0000562d93d45e40 RCX: 00007fa1dc80970b
    [10480.361426] RDX: 0000562d93d44ab0 RSI: 0000562d93d45e60 RDI: 0000000000000003
    [10480.363367] RBP: 0000000000000001 R08: 0000000000000000 R09: 00007fa1dc7b2a40
    [10480.365317] R10: 0000562d93d0e366 R11: 0000000000000293 R12: 0000000000000001
    [10480.367299] R13: 0000562d93d45290 R14: 0000562d93d45e40 R15: 0000562d93d45e60
    
    Link: https://lore.kernel.org/linux-btrfs/20180713090216.GC575@fnst.localdomain/
    Reported-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    CC: stable@vger.kernel.org # 4.4+
    Tested-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7461fe59c928b678d3356f01c6db330342006f17
Author: Helge Deller <deller@gmx.de>
Date:   Thu Oct 22 11:00:05 2020 +0200

    scsi: mptfusion: Fix null pointer dereferences in mptscsih_remove()
    
    commit 2f4843b172c2c0360ee7792ad98025fae7baefde upstream.
    
    The mptscsih_remove() function triggers a kernel oops if the Scsi_Host
    pointer (ioc->sh) is NULL, as can be seen in this syslog:
    
     ioc0: LSI53C1030 B2: Capabilities={Initiator,Target}
     Begin: Waiting for root file system ...
     scsi host2: error handler thread failed to spawn, error = -4
     mptspi: ioc0: WARNING - Unable to register controller with SCSI subsystem
     Backtrace:
      [<000000001045b7cc>] mptspi_probe+0x248/0x3d0 [mptspi]
      [<0000000040946470>] pci_device_probe+0x1ac/0x2d8
      [<0000000040add668>] really_probe+0x1bc/0x988
      [<0000000040ade704>] driver_probe_device+0x160/0x218
      [<0000000040adee24>] device_driver_attach+0x160/0x188
      [<0000000040adef90>] __driver_attach+0x144/0x320
      [<0000000040ad7c78>] bus_for_each_dev+0xd4/0x158
      [<0000000040adc138>] driver_attach+0x4c/0x80
      [<0000000040adb3ec>] bus_add_driver+0x3e0/0x498
      [<0000000040ae0130>] driver_register+0xf4/0x298
      [<00000000409450c4>] __pci_register_driver+0x78/0xa8
      [<000000000007d248>] mptspi_init+0x18c/0x1c4 [mptspi]
    
    This patch adds the necessary NULL-pointer checks.  Successfully tested on
    a HP C8000 parisc workstation with buggy SCSI drives.
    
    Link: https://lore.kernel.org/r/20201022090005.GA9000@ls3530.fritz.box
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e6988de5bb1f00791534becb8f50ca3f76998de
Author: Martin Fuzzey <martin.fuzzey@flowbird.group>
Date:   Wed Sep 30 10:36:46 2020 +0200

    w1: mxc_w1: Fix timeout resolution problem leading to bus error
    
    commit c9723750a699c3bd465493ac2be8992b72ccb105 upstream.
    
    On my platform (i.MX53) bus access sometimes fails with
            w1_search: max_slave_count 64 reached, will continue next search.
    
    The reason is the use of jiffies to implement a 200us timeout in
    mxc_w1_ds2_touch_bit().
    On some platforms the jiffies timer resolution is insufficient for this.
    
    Fix by replacing jiffies by ktime_get().
    
    For consistency apply the same change to the other use of jiffies in
    mxc_w1_ds2_reset_bus().
    
    Fixes: f80b2581a706 ("w1: mxc_w1: Optimize mxc_w1_ds2_touch_bit()")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Martin Fuzzey <martin.fuzzey@flowbird.group>
    Link: https://lore.kernel.org/r/1601455030-6607-1-git-send-email-martin.fuzzey@flowbird.group
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5c16c125114862f700562ec72e52b7b0538392a
Author: Wei Huang <wei.huang2@amd.com>
Date:   Sun Oct 18 22:57:41 2020 -0500

    acpi-cpufreq: Honor _PSD table setting on new AMD CPUs
    
    commit 5368512abe08a28525d9b24abbfc2a72493e8dba upstream.
    
    acpi-cpufreq has a old quirk that overrides the _PSD table supplied by
    BIOS on AMD CPUs. However the _PSD table of new AMD CPUs (Family 19h+)
    now accurately reports the P-state dependency of CPU cores. Hence this
    quirk needs to be fixed in order to support new CPUs' frequency control.
    
    Fixes: acd316248205 ("acpi-cpufreq: Add quirk to disable _PSD usage on all AMD CPUs")
    Signed-off-by: Wei Huang <wei.huang2@amd.com>
    [ rjw: Subject edit ]
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa6b1c0a3ecac5947c5aed0e1e34a03a1682c476
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Mon Oct 12 14:04:46 2020 +0100

    ACPI: debug: don't allow debugging when ACPI is disabled
    
    commit 0fada277147ffc6d694aa32162f51198d4f10d94 upstream.
    
    If ACPI is disabled then loading the acpi_dbg module will result in the
    following splat when lock debugging is enabled.
    
      DEBUG_LOCKS_WARN_ON(lock->magic != lock)
      WARNING: CPU: 0 PID: 1 at kernel/locking/mutex.c:938 __mutex_lock+0xa10/0x1290
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.9.0-rc8+ #103
      Hardware name: linux,dummy-virt (DT)
      Call trace:
       dump_backtrace+0x0/0x4d8
       show_stack+0x34/0x48
       dump_stack+0x174/0x1f8
       panic+0x360/0x7a0
       __warn+0x244/0x2ec
       report_bug+0x240/0x398
       bug_handler+0x50/0xc0
       call_break_hook+0x160/0x1d8
       brk_handler+0x30/0xc0
       do_debug_exception+0x184/0x340
       el1_dbg+0x48/0xb0
       el1_sync_handler+0x170/0x1c8
       el1_sync+0x80/0x100
       __mutex_lock+0xa10/0x1290
       mutex_lock_nested+0x6c/0xc0
       acpi_register_debugger+0x40/0x88
       acpi_aml_init+0xc4/0x114
       do_one_initcall+0x24c/0xb10
       kernel_init_freeable+0x690/0x728
       kernel_init+0x20/0x1e8
       ret_from_fork+0x10/0x18
    
    This is because acpi_debugger.lock has not been initialized as
    acpi_debugger_init() is not called when ACPI is disabled.  Fail module
    loading to avoid this and any subsequent problems that might arise by
    trying to debug AML when ACPI is disabled.
    
    Fixes: 8cfb0cdf07e2 ("ACPI / debugger: Add IO interface to access debugger functionalities")
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Cc: 4.10+ <stable@vger.kernel.org> # 4.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bc32e248a5c55c8faadf8265452c53f0f2435866
Author: Alex Hung <alex.hung@canonical.com>
Date:   Sun Sep 13 16:34:03 2020 -0600

    ACPI: video: use ACPI backlight for HP 635 Notebook
    
    commit b226faab4e7890bbbccdf794e8b94276414f9058 upstream.
    
    The default backlight interface is AMD's radeon_bl0 which does not
    work on this system, so use the ACPI backlight interface on it
    instead.
    
    BugLink: https://bugs.launchpad.net/bugs/1894667
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Alex Hung <alex.hung@canonical.com>
    [ rjw: Changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a28b013517a0b91fabc9fb2e844d9d5d929f55
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Sep 27 22:50:42 2020 +0100

    ACPI / extlog: Check for RDMSR failure
    
    commit 7cecb47f55e00282f972a1e0b09136c8cd938221 upstream.
    
    extlog_init() uses rdmsrl() to read an MSR, which on older CPUs
    provokes a error message at boot:
    
        unchecked MSR access error: RDMSR from 0x179 at rIP: 0xcd047307 (native_read_msr+0x7/0x40)
    
    Use rdmsrl_safe() instead, and return -ENODEV if it fails.
    
    Reported-by: jim@photojim.ca
    References: https://bugs.debian.org/971058
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b19c4b417a7b3051814503deac47aa1aafcc6dc5
Author: Ashish Sangwan <ashishsangwan2@gmail.com>
Date:   Mon Oct 5 02:22:43 2020 -0700

    NFS: fix nfs_path in case of a rename retry
    
    commit 247db73560bc3e5aef6db50c443c3c0db115bc93 upstream.
    
    We are generating incorrect path in case of rename retry because
    we are restarting from wrong dentry. We should restart from the
    dentry which was received in the call to nfs_path.
    
    CC: stable@vger.kernel.org
    Signed-off-by: Ashish Sangwan <ashishsangwan2@gmail.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41cabd0d8efe412379bc3de6c7bf614e2ecd9b4b
Author: Jan Kara <jack@suse.cz>
Date:   Fri Sep 4 10:58:51 2020 +0200

    fs: Don't invalidate page buffers in block_write_full_page()
    
    commit 6dbf7bb555981fb5faf7b691e8f6169fc2b2e63b upstream.
    
    If block_write_full_page() is called for a page that is beyond current
    inode size, it will truncate page buffers for the page and return 0.
    This logic has been added in 2.5.62 in commit 81eb69062588 ("fix ext3
    BUG due to race with truncate") in history.git tree to fix a problem
    with ext3 in data=ordered mode. This particular problem doesn't exist
    anymore because ext3 is long gone and ext4 handles ordered data
    differently. Also normally buffers are invalidated by truncate code and
    there's no need to specially handle this in ->writepage() code.
    
    This invalidation of page buffers in block_write_full_page() is causing
    issues to filesystems (e.g. ext4 or ocfs2) when block device is shrunk
    under filesystem's hands and metadata buffers get discarded while being
    tracked by the journalling layer. Although it is obviously "not
    supported" it can cause kernel crashes like:
    
    [ 7986.689400] BUG: unable to handle kernel NULL pointer dereference at
    +0000000000000008
    [ 7986.697197] PGD 0 P4D 0
    [ 7986.699724] Oops: 0002 [#1] SMP PTI
    [ 7986.703200] CPU: 4 PID: 203778 Comm: jbd2/dm-3-8 Kdump: loaded Tainted: G
    +O     --------- -  - 4.18.0-147.5.0.5.h126.eulerosv2r9.x86_64 #1
    [ 7986.716438] Hardware name: Huawei RH2288H V3/BC11HGSA0, BIOS 1.57 08/11/2015
    [ 7986.723462] RIP: 0010:jbd2_journal_grab_journal_head+0x1b/0x40 [jbd2]
    ...
    [ 7986.810150] Call Trace:
    [ 7986.812595]  __jbd2_journal_insert_checkpoint+0x23/0x70 [jbd2]
    [ 7986.818408]  jbd2_journal_commit_transaction+0x155f/0x1b60 [jbd2]
    [ 7986.836467]  kjournald2+0xbd/0x270 [jbd2]
    
    which is not great. The crash happens because bh->b_private is suddently
    NULL although BH_JBD flag is still set (this is because
    block_invalidatepage() cleared BH_Mapped flag and subsequent bh lookup
    found buffer without BH_Mapped set, called init_page_buffers() which has
    rewritten bh->b_private). So just remove the invalidation in
    block_write_full_page().
    
    Note that the buffer cache invalidation when block device changes size
    is already careful to avoid similar problems by using
    invalidate_mapping_pages() which skips busy buffers so it was only this
    odd block_write_full_page() behavior that could tear down bdev buffers
    under filesystem's hands.
    
    Reported-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    CC: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b50ab677ae92bf373fdcebc26251e99d432f05f9
Author: Marek Behún <marek.behun@nic.cz>
Date:   Fri Sep 18 00:32:58 2020 +0200

    leds: bcm6328, bcm6358: use devres LED registering function
    
    commit ff5c89d44453e7ad99502b04bf798a3fc32c758b upstream.
    
    These two drivers do not provide remove method and use devres for
    allocation of other resources, yet they use led_classdev_register
    instead of the devres variant, devm_led_classdev_register.
    
    Fix this.
    
    Signed-off-by: Marek Behún <marek.behun@nic.cz>
    Cc: Álvaro Fernández Rojas <noltari@gmail.com>
    Cc: Kevin Cernekee <cernekee@gmail.com>
    Cc: Jaedon Shin <jaedon.shin@gmail.com>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Cc: stable@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4f959a43712abd420aa3ffc3db67e7f44f3f9d3
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Sep 8 16:47:38 2020 -0500

    perf/x86/amd/ibs: Fix raw sample data accumulation
    
    commit 36e1be8ada994d509538b3b1d0af8b63c351e729 upstream.
    
    Neither IbsBrTarget nor OPDATA4 are populated in IBS Fetch mode.
    Don't accumulate them into raw sample user data in that case.
    
    Also, in Fetch mode, add saving the IBS Fetch Control Extended MSR.
    
    Technically, there is an ABI change here with respect to the IBS raw
    sample data format, but I don't see any perf driver version information
    being included in perf.data file headers, but, existing users can detect
    whether the size of the sample record has reduced by 8 bytes to
    determine whether the IBS driver has this fix.
    
    Fixes: 904cb3677f3a ("perf/x86/amd/ibs: Update IBS MSRs and feature definitions")
    Reported-by: Stephane Eranian <stephane.eranian@google.com>
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200908214740.18097-6-kim.phillips@amd.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06e3572a524c645f5cb7b072df9a15ccca21d77b
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Sep 8 16:47:37 2020 -0500

    perf/x86/amd/ibs: Don't include randomized bits in get_ibs_op_count()
    
    commit 680d69635005ba0e58fe3f4c52fc162b8fc743b0 upstream.
    
    get_ibs_op_count() adds hardware's current count (IbsOpCurCnt) bits
    to its count regardless of hardware's valid status.
    
    According to the PPR for AMD Family 17h Model 31h B0 55803 Rev 0.54,
    if the counter rolls over, valid status is set, and the lower 7 bits
    of IbsOpCurCnt are randomized by hardware.
    
    Don't include those bits in the driver's event count.
    
    Fixes: 8b1e13638d46 ("perf/x86-ibs: Fix usage of IBS op current count")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206537
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44b477b70cb88575513e5e5f812a654f9884f7c5
Author: Song Liu <songliubraving@fb.com>
Date:   Mon Oct 5 09:35:21 2020 -0700

    md/raid5: fix oops during stripe resizing
    
    commit b44c018cdf748b96b676ba09fdbc5b34fc443ada upstream.
    
    KoWei reported crash during raid5 reshape:
    
    [ 1032.252932] Oops: 0002 [#1] SMP PTI
    [...]
    [ 1032.252943] RIP: 0010:memcpy_erms+0x6/0x10
    [...]
    [ 1032.252947] RSP: 0018:ffffba1ac0c03b78 EFLAGS: 00010286
    [ 1032.252949] RAX: 0000784ac0000000 RBX: ffff91bec3d09740 RCX: 0000000000001000
    [ 1032.252951] RDX: 0000000000001000 RSI: ffff91be6781c000 RDI: 0000784ac0000000
    [ 1032.252953] RBP: ffffba1ac0c03bd8 R08: 0000000000001000 R09: ffffba1ac0c03bf8
    [ 1032.252954] R10: 0000000000000000 R11: 0000000000000000 R12: ffffba1ac0c03bf8
    [ 1032.252955] R13: 0000000000001000 R14: 0000000000000000 R15: 0000000000000000
    [ 1032.252958] FS:  0000000000000000(0000) GS:ffff91becf500000(0000) knlGS:0000000000000000
    [ 1032.252959] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1032.252961] CR2: 0000784ac0000000 CR3: 000000031780a002 CR4: 00000000001606e0
    [ 1032.252962] Call Trace:
    [ 1032.252969]  ? async_memcpy+0x179/0x1000 [async_memcpy]
    [ 1032.252977]  ? raid5_release_stripe+0x8e/0x110 [raid456]
    [ 1032.252982]  handle_stripe_expansion+0x15a/0x1f0 [raid456]
    [ 1032.252988]  handle_stripe+0x592/0x1270 [raid456]
    [ 1032.252993]  handle_active_stripes.isra.0+0x3cb/0x5a0 [raid456]
    [ 1032.252999]  raid5d+0x35c/0x550 [raid456]
    [ 1032.253002]  ? schedule+0x42/0xb0
    [ 1032.253006]  ? schedule_timeout+0x10e/0x160
    [ 1032.253011]  md_thread+0x97/0x160
    [ 1032.253015]  ? wait_woken+0x80/0x80
    [ 1032.253019]  kthread+0x104/0x140
    [ 1032.253022]  ? md_start_sync+0x60/0x60
    [ 1032.253024]  ? kthread_park+0x90/0x90
    [ 1032.253027]  ret_from_fork+0x35/0x40
    
    This is because cache_size_mutex was unlocked too early in resize_stripes,
    which races with grow_one_stripe() that grow_one_stripe() allocates a
    stripe with wrong pool_size.
    
    Fix this issue by unlocking cache_size_mutex after updating pool_size.
    
    Cc: <stable@vger.kernel.org> # v4.4+
    Reported-by: KoWei Sung <winders@amazon.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a40653f2bbf47e0ec998512744d7d4c90002c7a9
Author: Chao Leng <lengchao@huawei.com>
Date:   Mon Oct 12 16:10:40 2020 +0800

    nvme-rdma: fix crash when connect rejected
    
    [ Upstream commit 43efdb8e870ee0f58633fd579aa5b5185bf5d39e ]
    
    A crash can happened when a connect is rejected.   The host establishes
    the connection after received ConnectReply, and then continues to send
    the fabrics Connect command.  If the controller does not receive the
    ReadyToUse capsule, host may receive a ConnectReject reply.
    
    Call nvme_rdma_destroy_queue_ib after the host received the
    RDMA_CM_EVENT_REJECTED event.  Then when the fabrics Connect command
    times out, nvme_rdma_timeout calls nvme_rdma_complete_rq to fail the
    request.  A crash happenes due to use after free in
    nvme_rdma_complete_rq.
    
    nvme_rdma_destroy_queue_ib is redundant when handling the
    RDMA_CM_EVENT_REJECTED event as nvme_rdma_destroy_queue_ib is already
    called in connection failure handler.
    
    Signed-off-by: Chao Leng <lengchao@huawei.com>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da53b96eddb6a1f7dc562a60f39a520c3fac44e1
Author: Douglas Gilbert <dgilbert@interlog.com>
Date:   Thu Oct 15 14:57:35 2020 -0400

    sgl_alloc_order: fix memory leak
    
    [ Upstream commit b2a182a40278bc5849730e66bca01a762188ed86 ]
    
    sgl_alloc_order() can fail when 'length' is large on a memory
    constrained system. When order > 0 it will potentially be
    making several multi-page allocations with the later ones more
    likely to fail than the earlier one. So it is important that
    sgl_alloc_order() frees up any pages it has obtained before
    returning NULL. In the case when order > 0 it calls the wrong
    free page function and leaks. In testing the leak was
    sufficient to bring down my 8 GiB laptop with OOM.
    
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c87db07a5def8c6b0dff6ef9d7e853ab0b890a0a
Author: Xiubo Li <xiubli@redhat.com>
Date:   Tue Oct 13 22:45:14 2020 -0400

    nbd: make the config put is called before the notifying the waiter
    
    [ Upstream commit 87aac3a80af5cbad93e63250e8a1e19095ba0d30 ]
    
    There has one race case for ceph's rbd-nbd tool. When do mapping
    it may fail with EBUSY from ioctl(nbd, NBD_DO_IT), but actually
    the nbd device has already unmaped.
    
    It dues to if just after the wake_up(), the recv_work() is scheduled
    out and defers calling the nbd_config_put(), though the map process
    has exited the "nbd->recv_task" is not cleared.
    
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a83b9c917eb979bc8cb7840dc918e55bbf83d733
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:24 2020 +0200

    ARM: dts: s5pv210: remove dedicated 'audio-subsystem' node
    
    [ Upstream commit 6c17a2974abf68a58517f75741b15c4aba42b4b8 ]
    
    The 'audio-subsystem' node is an artificial creation, not representing
    real hardware.  The hardware is described by its nodes - AUDSS clock
    controller and I2S0.
    
    Remove the 'audio-subsystem' node along with its undocumented compatible
    to fix dtbs_check warnings like:
    
      audio-subsystem: $nodename:0: 'audio-subsystem' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-9-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4287d832db66de42be2b4b76188e5a86d6ad260b
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:23 2020 +0200

    ARM: dts: s5pv210: move PMU node out of clock controller
    
    [ Upstream commit bb98fff84ad1ea321823759edaba573a16fa02bd ]
    
    The Power Management Unit (PMU) is a separate device which has little
    common with clock controller.  Moving it to one level up (from clock
    controller child to SoC) allows to remove fake simple-bus compatible and
    dtbs_check warnings like:
    
      clock-controller@e0100000: $nodename:0:
        'clock-controller@e0100000' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-8-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b39a3d530f2e6faf1177675025634b3285f8c3d2
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Sep 7 18:11:21 2020 +0200

    ARM: dts: s5pv210: remove DMA controller bus node name to fix dtschema warnings
    
    [ Upstream commit ea4e792f3c8931fffec4d700cf6197d84e9f35a6 ]
    
    There is no need to keep DMA controller nodes under AMBA bus node.
    Remove the "amba" node to fix dtschema warnings like:
    
      amba: $nodename:0: 'amba' does not match '^([a-z][a-z0-9\\-]+-bus|bus|soc|axi|ahb|apb)(@[0-9a-f]+)?$'
    
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/20200907161141.31034-6-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b142283446006789587a988adbc8ea2c5e98772b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 26 14:37:59 2020 +0300

    memory: emif: Remove bogus debugfs error handling
    
    [ Upstream commit fd22781648080cc400772b3c68aa6b059d2d5420 ]
    
    Callers are generally not supposed to check the return values from
    debugfs functions.  Debugfs functions never return NULL so this error
    handling will never trigger.  (Historically debugfs functions used to
    return a mix of NULL and error pointers but it was eventually deemed too
    complicated for something which wasn't intended to be used in normal
    situations).
    
    Delete all the error handling.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Santosh Shilimkar <ssantosh@kernel.org>
    Link: https://lore.kernel.org/r/20200826113759.GF393664@mwanda
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e39d77ee7b42a2f8a3e0ce370a6e6dbe93f117bf
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Fri Jul 17 21:33:21 2020 +0900

    arm64: dts: renesas: ulcb: add full-pwr-cycle-in-suspend into eMMC nodes
    
    [ Upstream commit 992d7a8b88c83c05664b649fc54501ce58e19132 ]
    
    Add full-pwr-cycle-in-suspend property to do a graceful shutdown of
    the eMMC device in system suspend.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Link: https://lore.kernel.org/r/1594989201-24228-1-git-send-email-yoshihiro.shimoda.uh@renesas.com
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61cd4d151e74a6e2b71f6150efc6234a5b5dcd83
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Oct 14 22:01:09 2020 +0530

    gfs2: add validation checks for size of superblock
    
    [ Upstream commit 0ddc5154b24c96f20e94d653b0a814438de6032b ]
    
    In gfs2_check_sb(), no validation checks are performed with regards to
    the size of the superblock.
    syzkaller detected a slab-out-of-bounds bug that was primarily caused
    because the block size for a superblock was set to zero.
    A valid size for a superblock is a power of 2 between 512 and PAGE_SIZE.
    Performing validation checks and ensuring that the size of the superblock
    is valid fixes this bug.
    
    Reported-by: syzbot+af90d47a37376844e731@syzkaller.appspotmail.com
    Tested-by: syzbot+af90d47a37376844e731@syzkaller.appspotmail.com
    Suggested-by: Andrew Price <anprice@redhat.com>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    [Minor code reordering.]
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit beaded98bc56ab1f58b6401d292481e966d97e13
Author: Jan Kara <jack@suse.cz>
Date:   Thu Oct 15 13:03:30 2020 +0200

    ext4: Detect already used quota file early
    
    [ Upstream commit e0770e91424f694b461141cbc99adf6b23006b60 ]
    
    When we try to use file already used as a quota file again (for the same
    or different quota type), strange things can happen. At the very least
    lockdep annotations may be wrong but also inode flags may be wrongly set
    / reset. When the file is used for two quota types at once we can even
    corrupt the file and likely crash the kernel. Catch all these cases by
    checking whether passed file is already used as quota file and bail
    early in that case.
    
    This fixes occasional generic/219 failure due to lockdep complaint.
    
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Reported-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20201015110330.28716-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d3b36cdfabefa8304e97b37baff19bc32037723
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Fri Aug 7 16:59:02 2020 +0530

    drivers: watchdog: rdc321x_wdt: Fix race condition bugs
    
    [ Upstream commit 4b2e7f99cdd314263c9d172bc17193b8b6bba463 ]
    
    In rdc321x_wdt_probe(), rdc321x_wdt_device.queue is initialized
    after misc_register(), hence if ioctl is called before its
    initialization which can call rdc321x_wdt_start() function,
    it will see an uninitialized value of rdc321x_wdt_device.queue,
    hence initialize it before misc_register().
    Also, rdc321x_wdt_device.default_ticks is accessed in reset()
    function called from write callback, thus initialize it before
    misc_register().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Link: https://lore.kernel.org/r/20200807112902.28764-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acdc118587ec627a0b00a97aea7ce9b89629e9ae
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Oct 12 09:54:04 2020 +0530

    net: 9p: initialize sun_server.sun_path to have addr's value only when addr is valid
    
    [ Upstream commit 7ca1db21ef8e0e6725b4d25deed1ca196f7efb28 ]
    
    In p9_fd_create_unix, checking is performed to see if the addr (passed
    as an argument) is NULL or not.
    However, no check is performed to see if addr is a valid address, i.e.,
    it doesn't entirely consist of only 0's.
    The initialization of sun_server.sun_path to be equal to this faulty
    addr value leads to an uninitialized variable, as detected by KMSAN.
    Checking for this (faulty addr) and returning a negative error number
    appropriately, resolves this issue.
    
    Link: http://lkml.kernel.org/r/20201012042404.2508-1-anant.thazhemadam@gmail.com
    Reported-by: syzbot+75d51fe5bf4ebe988518@syzkaller.appspotmail.com
    Tested-by: syzbot+75d51fe5bf4ebe988518@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a38e2bc06e58fdb146de6717ba098cf96404a722
Author: Tero Kristo <t-kristo@ti.com>
Date:   Mon Sep 7 11:25:59 2020 +0300

    clk: ti: clockdomain: fix static checker warning
    
    [ Upstream commit b7a7943fe291b983b104bcbd2f16e8e896f56590 ]
    
    Fix a memory leak induced by not calling clk_put after doing of_clk_get.
    
    Reported-by: Dan Murphy <dmurphy@ti.com>
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Link: https://lore.kernel.org/r/20200907082600.454-3-t-kristo@ti.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d5d5de5363a6d861a677f4eb27cbb89526fc242
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Mon Oct 12 05:10:51 2020 -0400

    bnxt_en: Log unknown link speed appropriately.
    
    [ Upstream commit 8eddb3e7ce124dd6375d3664f1aae13873318b0f ]
    
    If the VF virtual link is set to always enabled, the speed may be
    unknown when the physical link is down.  The driver currently logs
    the link speed as 4294967295 Mbps which is SPEED_UNKNOWN.  Modify
    the link up log message as "speed unknown" which makes more sense.
    
    Reviewed-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Link: https://lore.kernel.org/r/1602493854-29283-7-git-send-email-michael.chan@broadcom.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24012b4a571ab5a9c08639ee135b2b65ff9e63e3
Author: Zhao Heming <heming.zhao@suse.com>
Date:   Tue Oct 6 00:00:24 2020 +0800

    md/bitmap: md_bitmap_get_counter returns wrong blocks
    
    [ Upstream commit d837f7277f56e70d82b3a4a037d744854e62f387 ]
    
    md_bitmap_get_counter() has code:
    
    ```
        if (bitmap->bp[page].hijacked ||
            bitmap->bp[page].map == NULL)
            csize = ((sector_t)1) << (bitmap->chunkshift +
                          PAGE_COUNTER_SHIFT - 1);
    ```
    
    The minus 1 is wrong, this branch should report 2048 bits of space.
    With "-1" action, this only report 1024 bit of space.
    
    This bug code returns wrong blocks, but it doesn't inflence bitmap logic:
    1. Most callers focus this function return value (the counter of offset),
       not the parameter blocks.
    2. The bug is only triggered when hijacked is true or map is NULL.
       the hijacked true condition is very rare.
       the "map == null" only true when array is creating or resizing.
    3. Even the caller gets wrong blocks, current code makes caller just to
       call md_bitmap_get_counter() one more time.
    
    Signed-off-by: Zhao Heming <heming.zhao@suse.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e54f6ccc1c225016c0c98472f41750ba57878518
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Sep 4 14:09:58 2020 +0800

    power: supply: test_power: add missing newlines when printing parameters by sysfs
    
    [ Upstream commit c07fa6c1631333f02750cf59f22b615d768b4d8f ]
    
    When I cat some module parameters by sysfs, it displays as follows.
    It's better to add a newline for easy reading.
    
    root@syzkaller:~# cd /sys/module/test_power/parameters/
    root@syzkaller:/sys/module/test_power/parameters# cat ac_online
    onroot@syzkaller:/sys/module/test_power/parameters# cat battery_present
    trueroot@syzkaller:/sys/module/test_power/parameters# cat battery_health
    goodroot@syzkaller:/sys/module/test_power/parameters# cat battery_status
    dischargingroot@syzkaller:/sys/module/test_power/parameters# cat battery_technology
    LIONroot@syzkaller:/sys/module/test_power/parameters# cat usb_online
    onroot@syzkaller:/sys/module/test_power/parameters#
    
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90d19d04a031f7bfd07bb0b9b3192235f4eb9df3
Author: Diana Craciun <diana.craciun@oss.nxp.com>
Date:   Tue Sep 29 11:54:38 2020 +0300

    bus/fsl_mc: Do not rely on caller to provide non NULL mc_io
    
    [ Upstream commit 5026cf605143e764e1785bbf9158559d17f8d260 ]
    
    Before destroying the mc_io, check first that it was
    allocated.
    
    Reviewed-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
    Acked-by: Laurentiu Tudor <laurentiu.tudor@nxp.com>
    Signed-off-by: Diana Craciun <diana.craciun@oss.nxp.com>
    Link: https://lore.kernel.org/r/20200929085441.17448-11-diana.craciun@oss.nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63ab0451ec938405833bb99d92bab914181fd975
Author: Xie He <xie.he.0141@gmail.com>
Date:   Mon Sep 28 05:56:43 2020 -0700

    drivers/net/wan/hdlc_fr: Correctly handle special skb->protocol values
    
    [ Upstream commit 8306266c1d51aac9aa7aa907fe99032a58c6382c ]
    
    The fr_hard_header function is used to prepend the header to skbs before
    transmission. It is used in 3 situations:
    1) When a control packet is generated internally in this driver;
    2) When a user sends an skb on an Ethernet-emulating PVC device;
    3) When a user sends an skb on a normal PVC device.
    
    These 3 situations need to be handled differently by fr_hard_header.
    Different headers should be prepended to the skb in different situations.
    
    Currently fr_hard_header distinguishes these 3 situations using
    skb->protocol. For situation 1 and 2, a special skb->protocol value
    will be assigned before calling fr_hard_header, so that it can recognize
    these 2 situations. All skb->protocol values other than these special ones
    are treated by fr_hard_header as situation 3.
    
    However, it is possible that in situation 3, the user sends an skb with
    one of the special skb->protocol values. In this case, fr_hard_header
    would incorrectly treat it as situation 1 or 2.
    
    This patch tries to solve this issue by using skb->dev instead of
    skb->protocol to distinguish between these 3 situations. For situation
    1, skb->dev would be NULL; for situation 2, skb->dev->type would be
    ARPHRD_ETHER; and for situation 3, skb->dev->type would be ARPHRD_DLCI.
    
    This way fr_hard_header would be able to distinguish these 3 situations
    correctly regardless what skb->protocol value the user tries to use in
    situation 3.
    
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93706036b5f407eb63ad64c843491207904faffc
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Tue Aug 18 22:24:25 2020 +0800

    ACPI: Add out of bounds and numa_off protections to pxm_to_node()
    
    [ Upstream commit 8a3decac087aa897df5af04358c2089e52e70ac4 ]
    
    The function should check the validity of the pxm value before using
    it to index the pxm_to_node_map[] array.
    
    Whilst hardening this code may be good in general, the main intent
    here is to enable following patches that use this function to replace
    acpi_map_pxm_to_node() for non SRAT usecases which should return
    NO_NUMA_NODE for PXM entries not matching with those in SRAT.
    
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Barry Song <song.bao.hua@hisilicon.com>
    Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 07fac74ac8862ab131b0dd24f9e35a14908cfafd
Author: Zhengyuan Liu <liuzhengyuan@tj.kylinos.cn>
Date:   Mon Sep 21 10:39:36 2020 +0800

    arm64/mm: return cpu_all_mask when node is NUMA_NO_NODE
    
    [ Upstream commit a194c5f2d2b3a05428805146afcabe5140b5d378 ]
    
    The @node passed to cpumask_of_node() can be NUMA_NO_NODE, in that
    case it will trigger the following WARN_ON(node >= nr_node_ids) due to
    mismatched data types of @node and @nr_node_ids. Actually we should
    return cpu_all_mask just like most other architectures do if passed
    NUMA_NO_NODE.
    
    Also add a similar check to the inline cpumask_of_node() in numa.h.
    
    Signed-off-by: Zhengyuan Liu <liuzhengyuan@tj.kylinos.cn>
    Reviewed-by: Gavin Shan <gshan@redhat.com>
    Link: https://lore.kernel.org/r/20200921023936.21846-1-liuzhengyuan@tj.kylinos.cn
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f2d488193f0de4298f130add5f8cd3cd53f393b
Author: Lang Dai <lang.dai@intel.com>
Date:   Mon Sep 14 11:26:41 2020 +0800

    uio: free uio id after uio file node is freed
    
    [ Upstream commit 8fd0e2a6df262539eaa28b0a2364cca10d1dc662 ]
    
    uio_register_device() do two things.
    1) get an uio id from a global pool, e.g. the id is <A>
    2) create file nodes like /sys/class/uio/uio<A>
    
    uio_unregister_device() do two things.
    1) free the uio id <A> and return it to the global pool
    2) free the file node /sys/class/uio/uio<A>
    
    There is a situation is that one worker is calling uio_unregister_device(),
    and another worker is calling uio_register_device().
    If the two workers are X and Y, they go as below sequence,
    1) X free the uio id <AAA>
    2) Y get an uio id <AAA>
    3) Y create file node /sys/class/uio/uio<AAA>
    4) X free the file note /sys/class/uio/uio<AAA>
    Then it will failed at the 3rd step and cause the phenomenon we saw as it
    is creating a duplicated file node.
    
    Failure reports as follows:
    sysfs: cannot create duplicate filename '/class/uio/uio10'
    Call Trace:
       sysfs_do_create_link_sd.isra.2+0x9e/0xb0
       sysfs_create_link+0x25/0x40
       device_add+0x2c4/0x640
       __uio_register_device+0x1c5/0x576 [uio]
       adf_uio_init_bundle_dev+0x231/0x280 [intel_qat]
       adf_uio_register+0x1c0/0x340 [intel_qat]
       adf_dev_start+0x202/0x370 [intel_qat]
       adf_dev_start_async+0x40/0xa0 [intel_qat]
       process_one_work+0x14d/0x410
       worker_thread+0x4b/0x460
       kthread+0x105/0x140
     ? process_one_work+0x410/0x410
     ? kthread_bind+0x40/0x40
     ret_from_fork+0x1f/0x40
     Code: 85 c0 48 89 c3 74 12 b9 00 10 00 00 48 89 c2 31 f6 4c 89 ef
     e8 ec c4 ff ff 4c 89 e2 48 89 de 48 c7 c7 e8 b4 ee b4 e8 6a d4 d7
     ff <0f> 0b 48 89 df e8 20 fa f3 ff 5b 41 5c 41 5d 5d c3 66 0f 1f 84
    ---[ end trace a7531c1ed5269e84 ]---
     c6xxvf b002:00:00.0: Failed to register UIO devices
     c6xxvf b002:00:00.0: Failed to register UIO devices
    
    Signed-off-by: Lang Dai <lang.dai@intel.com>
    
    Link: https://lore.kernel.org/r/1600054002-17722-1-git-send-email-lang.dai@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e99563a3704f51c2fd90daa5fd5f5f3587d189e
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Sep 17 13:26:00 2020 +0200

    USB: adutux: fix debugging
    
    [ Upstream commit c56150c1bc8da5524831b1dac2eec3c67b89f587 ]
    
    Handling for removal of the controller was missing at one place.
    Add it.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20200917112600.26508-1-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a7c9d12937cf56b34cb17ba305d06a3ab62975e
Author: Alain Volmat <avolmat@me.com>
Date:   Mon Aug 31 08:10:11 2020 +0200

    cpufreq: sti-cpufreq: add stih418 support
    
    [ Upstream commit 01a163c52039e9426c7d3d3ab16ca261ad622597 ]
    
    The STiH418 can be controlled the same way as STiH407 &
    STiH410 regarding cpufreq.
    
    Signed-off-by: Alain Volmat <avolmat@me.com>
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd64c64ad41fa1373b3eee40678b35a1a6b8da1f
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Jun 30 15:14:38 2020 -0700

    kgdb: Make "kgdbcon" work properly with "kgdb_earlycon"
    
    [ Upstream commit b18b099e04f450cdc77bec72acefcde7042bd1f3 ]
    
    On my system the kernel processes the "kgdb_earlycon" parameter before
    the "kgdbcon" parameter.  When we setup "kgdb_earlycon" we'll end up
    in kgdb_register_callbacks() and "kgdb_use_con" won't have been set
    yet so we'll never get around to starting "kgdbcon".  Let's remedy
    this by detecting that the IO module was already registered when
    setting "kgdb_use_con" and registering the console then.
    
    As part of this, to avoid pre-declaring things, move the handling of
    the "kgdbcon" further down in the file.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200630151422.1.I4aa062751ff5e281f5116655c976dff545c09a46@changeid
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca08fa5b0d0c1900b5ebc9f5ca936ec38b889d81
Author: John Ogness <john.ogness@linutronix.de>
Date:   Wed Aug 12 09:37:22 2020 +0206

    printk: reduce LOG_BUF_SHIFT range for H8300
    
    [ Upstream commit 550c10d28d21bd82a8bb48debbb27e6ed53262f6 ]
    
    The .bss section for the h8300 is relatively small. A value of
    CONFIG_LOG_BUF_SHIFT that is larger than 19 will create a static
    printk ringbuffer that is too large. Limit the range appropriately
    for the H8300.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: John Ogness <john.ogness@linutronix.de>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Acked-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Link: https://lore.kernel.org/r/20200812073122.25412-1-john.ogness@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3746794d6363eace9b0010706025e5bca5dd91cc
Author: Antonio Borneo <antonio.borneo@st.com>
Date:   Wed Jul 1 21:42:34 2020 +0200

    drm/bridge/synopsys: dsi: add support for non-continuous HS clock
    
    [ Upstream commit c6d94e37bdbb6dfe7e581e937a915ab58399b8a5 ]
    
    Current code enables the HS clock when video mode is started or to
    send out a HS command, and disables the HS clock to send out a LP
    command. This is not what DSI spec specify.
    
    Enable HS clock either in command and in video mode.
    Set automatic HS clock management for panels and devices that
    support non-continuous HS clock.
    
    Signed-off-by: Antonio Borneo <antonio.borneo@st.com>
    Tested-by: Philippe Cornu <philippe.cornu@st.com>
    Reviewed-by: Philippe Cornu <philippe.cornu@st.com>
    Acked-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200701194234.18123-1-yannick.fertre@st.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f9ced0d2719f290c7807685ca524a92715b9be1
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Sat Aug 22 11:45:28 2020 +0530

    mmc: via-sdmmc: Fix data race bug
    
    [ Upstream commit 87d7ad089b318b4f319bf57f1daa64eb6d1d10ad ]
    
    via_save_pcictrlreg() should be called with host->lock held
    as it writes to pm_pcictrl_reg, otherwise there can be a race
    condition between via_sd_suspend() and via_sdc_card_detect().
    The same pattern is used in the function via_reset_pcictrl()
    as well, where via_save_pcictrlreg() is called with host->lock
    held.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Link: https://lore.kernel.org/r/20200822061528.7035-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33201add5b499ef527216bce970ed10070e1d6c8
Author: Tom Rix <trix@redhat.com>
Date:   Mon Aug 10 21:25:18 2020 +0200

    media: tw5864: check status of tw5864_frameinterval_get
    
    [ Upstream commit 780d815dcc9b34d93ae69385a8465c38d423ff0f ]
    
    clang static analysis reports this problem
    
    tw5864-video.c:773:32: warning: The left expression of the compound
      assignment is an uninitialized value.
      The computed value will also be garbage
            fintv->stepwise.max.numerator *= std_max_fps;
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
    
    stepwise.max is set with frameinterval, which comes from
    
            ret = tw5864_frameinterval_get(input, &frameinterval);
            fintv->stepwise.step = frameinterval;
            fintv->stepwise.min = frameinterval;
            fintv->stepwise.max = frameinterval;
            fintv->stepwise.max.numerator *= std_max_fps;
    
    When tw5864_frameinterval_get() fails, frameinterval is not
    set. So check the status and fix another similar problem.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e85156e64ab5bf33f08cfb75c279d3a1365166d7
Author: Badhri Jagan Sridharan <badhri@google.com>
Date:   Mon Aug 17 11:38:27 2020 -0700

    usb: typec: tcpm: During PR_SWAP, source caps should be sent only after tSwapSourceStart
    
    [ Upstream commit 6bbe2a90a0bb4af8dd99c3565e907fe9b5e7fd88 ]
    
    The patch addresses the compliance test failures while running
    TD.PD.CP.E3, TD.PD.CP.E4, TD.PD.CP.E5 of the "Deterministic PD
    Compliance MOI" test plan published in https://www.usb.org/usbc.
    For a product to be Type-C compliant, it's expected that these tests
    are run on usb.org certified Type-C compliance tester as mentioned in
    https://www.usb.org/usbc.
    
    The purpose of the tests TD.PD.CP.E3, TD.PD.CP.E4, TD.PD.CP.E5 is to
    verify the PR_SWAP response of the device. While doing so, the test
    asserts that Source Capabilities message is NOT received from the test
    device within tSwapSourceStart min (20 ms) from the time the last bit
    of GoodCRC corresponding to the RS_RDY message sent by the UUT was
    sent. If it does then the test fails.
    
    This is in line with the requirements from the USB Power Delivery
    Specification Revision 3.0, Version 1.2:
    "6.6.8.1 SwapSourceStartTimer
    The SwapSourceStartTimer Shall be used by the new Source, after a
    Power Role Swap or Fast Role Swap, to ensure that it does not send
    Source_Capabilities Message before the new Sink is ready to receive
    the
    Source_Capabilities Message. The new Source Shall Not send the
    Source_Capabilities Message earlier than tSwapSourceStart after the
    last bit of the EOP of GoodCRC Message sent in response to the PS_RDY
    Message sent by the new Source indicating that its power supply is
    ready."
    
    The patch makes sure that TCPM does not send the Source_Capabilities
    Message within tSwapSourceStart(20ms) by transitioning into
    SRC_STARTUP only after  tSwapSourceStart(20ms).
    
    Signed-off-by: Badhri Jagan Sridharan <badhri@google.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20200817183828.1895015-1-badhri@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5de2010a41bce477e43a22d28f98b600cb451960
Author: Xia Jiang <xia.jiang@mediatek.com>
Date:   Fri Aug 14 09:11:35 2020 +0200

    media: platform: Improve queue set up flow for bug fixing
    
    [ Upstream commit 5095a6413a0cf896ab468009b6142cb0fe617e66 ]
    
    Add checking created buffer size follow in mtk_jpeg_queue_setup().
    
    Reviewed-by: Tomasz Figa <tfiga@chromium.org>
    Signed-off-by: Xia Jiang <xia.jiang@mediatek.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28288a8e6f8088cee0d9feecb777fcf733bf8401
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Thu Aug 20 12:47:16 2020 +0200

    media: videodev2.h: RGB BT2020 and HSV are always full range
    
    [ Upstream commit b305dfe2e93434b12d438434461b709641f62af4 ]
    
    The default RGB quantization range for BT.2020 is full range (just as for
    all the other RGB pixel encodings), not limited range.
    
    Update the V4L2_MAP_QUANTIZATION_DEFAULT macro and documentation
    accordingly.
    
    Also mention that HSV is always full range and cannot be limited range.
    
    When RGB BT2020 was introduced in V4L2 it was not clear whether it should
    be limited or full range, but full range is the right (and consistent)
    choice.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6771fd4bb2424670e7faf81a70f562974b4ad8ea
Author: Nadezda Lutovinova <lutovinova@ispras.ru>
Date:   Wed Aug 19 17:37:56 2020 +0300

    drm/brige/megachips: Add checking if ge_b850v3_lvds_init() is working correctly
    
    [ Upstream commit f688a345f0d7a6df4dd2aeca8e4f3c05e123a0ee ]
    
    If ge_b850v3_lvds_init() does not allocate memory for ge_b850v3_lvds_ptr,
    then a null pointer dereference is accessed.
    
    The patch adds checking of the return value of ge_b850v3_lvds_init().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Nadezda Lutovinova <lutovinova@ispras.ru>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200819143756.30626-1-lutovinova@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0db5526b7de4c75ab7f5e71e62dee5414e4a53b
Author: Sathishkumar Muruganandam <murugana@codeaurora.org>
Date:   Fri Aug 14 13:46:11 2020 +0530

    ath10k: fix VHT NSS calculation when STBC is enabled
    
    [ Upstream commit 99f41b8e43b8b4b31262adb8ac3e69088fff1289 ]
    
    When STBC is enabled, NSTS_SU value need to be accounted for VHT NSS
    calculation for SU case.
    
    Without this fix, 1SS + STBC enabled case was reported wrongly as 2SS
    in radiotap header on monitor mode capture.
    
    Tested-on: QCA9984 10.4-3.10-00047
    
    Signed-off-by: Sathishkumar Muruganandam <murugana@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1597392971-3897-1-git-send-email-murugana@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec091fb20cfb198ec17d1338dcdeeaa19f4a91d3
Author: Wen Gong <wgong@codeaurora.org>
Date:   Fri Aug 14 18:17:08 2020 +0300

    ath10k: start recovery process when payload length exceeds max htc length for sdio
    
    [ Upstream commit 2fd3c8f34d08af0a6236085f9961866ad92ef9ec ]
    
    When simulate random transfer fail for sdio write and read, it happened
    "payload length exceeds max htc length" and recovery later sometimes.
    
    Test steps:
    1. Add config and update kernel:
    CONFIG_FAIL_MMC_REQUEST=y
    CONFIG_FAULT_INJECTION=y
    CONFIG_FAULT_INJECTION_DEBUG_FS=y
    
    2. Run simulate fail:
    cd /sys/kernel/debug/mmc1/fail_mmc_request
    echo 10 > probability
    echo 10 > times # repeat until hitting issues
    
    3. It happened payload length exceeds max htc length.
    [  199.935506] ath10k_sdio mmc1:0001:1: payload length 57005 exceeds max htc length: 4088
    ....
    [  264.990191] ath10k_sdio mmc1:0001:1: payload length 57005 exceeds max htc length: 4088
    
    4. after some time, such as 60 seconds, it start recovery which triggered
    by wmi command timeout for periodic scan.
    [  269.229232] ieee80211 phy0: Hardware restart was requested
    [  269.734693] ath10k_sdio mmc1:0001:1: device successfully recovered
    
    The simulate fail of sdio is not a real sdio transter fail, it only
    set an error status in mmc_should_fail_request after the transfer end,
    actually the transfer is success, then sdio_io_rw_ext_helper will
    return error status and stop transfer the left data. For example,
    the really RX len is 286 bytes, then it will split to 2 blocks in
    sdio_io_rw_ext_helper, one is 256 bytes, left is 30 bytes, if the
    first 256 bytes get an error status by mmc_should_fail_request,then
    the left 30 bytes will not read in this RX operation. Then when the
    next RX arrive, the left 30 bytes will be considered as the header
    of the read, the top 4 bytes of the 30 bytes will be considered as
    lookaheads, but actually the 4 bytes is not the lookaheads, so the len
    from this lookaheads is not correct, it exceeds max htc length 4088
    sometimes. When happened exceeds, the buffer chain is not matched between
    firmware and ath10k, then it need to start recovery ASAP. Recently then
    recovery will be started by wmi command timeout, but it will be long time
    later, for example, it is 60+ seconds later from the periodic scan, if
    it does not have periodic scan, it will be longer.
    
    Start recovery when it happened "payload length exceeds max htc length"
    will be reasonable.
    
    This patch only effect sdio chips.
    
    Tested with QCA6174 SDIO with firmware WLAN.RMH.4.4.1-00029.
    
    Signed-off-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200108031957.22308-3-wgong@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8600e4c82ad29b3deabf5f4d2aa5861a19a9c32d
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jul 20 12:18:45 2020 -0700

    video: fbdev: pvr2fb: initialize variables
    
    [ Upstream commit 8e1ba47c60bcd325fdd097cd76054639155e5d2e ]
    
    clang static analysis reports this repesentative error
    
    pvr2fb.c:1049:2: warning: 1st function call argument
      is an uninitialized value [core.CallAndMessage]
            if (*cable_arg)
            ^~~~~~~~~~~~~~~
    
    Problem is that cable_arg depends on the input loop to
    set the cable_arg[0].  If it does not, then some random
    value from the stack is used.
    
    A similar problem exists for output_arg.
    
    So initialize cable_arg and output_arg.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Acked-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200720191845.20115-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b780a2f61e81d93f5c5582940f98af1c807f19b
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Wed Oct 7 13:55:16 2020 -0700

    xfs: fix realtime bitmap/summary file truncation when growing rt volume
    
    [ Upstream commit f4c32e87de7d66074d5612567c5eac7325024428 ]
    
    The realtime bitmap and summary files are regular files that are hidden
    away from the directory tree.  Since they're regular files, inode
    inactivation will try to purge what it thinks are speculative
    preallocations beyond the incore size of the file.  Unfortunately,
    xfs_growfs_rt forgets to update the incore size when it resizes the
    inodes, with the result that inactivating the rt inodes at unmount time
    will cause their contents to be truncated.
    
    Fix this by updating the incore size when we change the ondisk size as
    part of updating the superblock.  Note that we don't do this when we're
    allocating blocks to the rt inodes because we actually want those blocks
    to get purged if the growfs fails.
    
    This fixes corruption complaints from the online rtsummary checker when
    running xfs/233.  Since that test requires rmap, one can also trigger
    this by growing an rt volume, cycling the mount, and creating rt files.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e603ae91c6472c99a69ff46a7aa7d9471d05899e
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 6 23:24:35 2020 +0100

    ARM: 8997/2: hw_breakpoint: Handle inexact watchpoint addresses
    
    [ Upstream commit 22c9e58299e5f18274788ce54c03d4fb761e3c5d ]
    
    This is commit fdfeff0f9e3d ("arm64: hw_breakpoint: Handle inexact
    watchpoint addresses") but ported to arm32, which has the same
    problem.
    
    This problem was found by Android CTS tests, notably the
    "watchpoint_imprecise" test [1].  I tested locally against a copycat
    (simplified) version of the test though.
    
    [1] https://android.googlesource.com/platform/bionic/+/master/tests/sys_ptrace_test.cpp
    
    Link: https://lkml.kernel.org/r/20191019111216.1.I82eae759ca6dc28a245b043f485ca490e3015321@changeid
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Matthias Kaehlcke <mka@chromium.org>
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41f7a6a5c41f3a5eb2760a78cb8aa32b982ebb03
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Jun 4 13:23:17 2020 +0200

    um: change sigio_spinlock to a mutex
    
    [ Upstream commit f2d05059e15af3f70502074f4e3a504530af504a ]
    
    Lockdep complains at boot:
    
    =============================
    [ BUG: Invalid wait context ]
    5.7.0-05093-g46d91ecd597b #98 Not tainted
    -----------------------------
    swapper/1 is trying to lock:
    0000000060931b98 (&desc[i].request_mutex){+.+.}-{3:3}, at: __setup_irq+0x11d/0x623
    other info that might help us debug this:
    context-{4:4}
    1 lock held by swapper/1:
     #0: 000000006074fed8 (sigio_spinlock){+.+.}-{2:2}, at: sigio_lock+0x1a/0x1c
    stack backtrace:
    CPU: 0 PID: 1 Comm: swapper Not tainted 5.7.0-05093-g46d91ecd597b #98
    Stack:
     7fa4fab0 6028dfd1 0000002a 6008bea5
     7fa50700 7fa50040 7fa4fac0 6028e016
     7fa4fb50 6007f6da 60959c18 00000000
    Call Trace:
     [<60023a0e>] show_stack+0x13b/0x155
     [<6028e016>] dump_stack+0x2a/0x2c
     [<6007f6da>] __lock_acquire+0x515/0x15f2
     [<6007eb50>] lock_acquire+0x245/0x273
     [<6050d9f1>] __mutex_lock+0xbd/0x325
     [<6050dc76>] mutex_lock_nested+0x1d/0x1f
     [<6008e27e>] __setup_irq+0x11d/0x623
     [<6008e8ed>] request_threaded_irq+0x169/0x1a6
     [<60021eb0>] um_request_irq+0x1ee/0x24b
     [<600234ee>] write_sigio_irq+0x3b/0x76
     [<600383ca>] sigio_broken+0x146/0x2e4
     [<60020bd8>] do_one_initcall+0xde/0x281
    
    Because we hold sigio_spinlock and then get into requesting
    an interrupt with a mutex.
    
    Change the spinlock to a mutex to avoid that.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f940673aeda0619a61aa563cc9cbac1af482640
Author: Chao Yu <yuchao0@huawei.com>
Date:   Tue Sep 29 09:23:12 2020 +0800

    f2fs: fix to check segment boundary during SIT page readahead
    
    [ Upstream commit 6a257471fa42c8c9c04a875cd3a2a22db148e0f0 ]
    
    As syzbot reported:
    
    kernel BUG at fs/f2fs/segment.h:657!
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 1 PID: 16220 Comm: syz-executor.0 Not tainted 5.9.0-rc5-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:f2fs_ra_meta_pages+0xa51/0xdc0 fs/f2fs/segment.h:657
    Call Trace:
     build_sit_entries fs/f2fs/segment.c:4195 [inline]
     f2fs_build_segment_manager+0x4b8a/0xa3c0 fs/f2fs/segment.c:4779
     f2fs_fill_super+0x377d/0x6b80 fs/f2fs/super.c:3633
     mount_bdev+0x32e/0x3f0 fs/super.c:1417
     legacy_get_tree+0x105/0x220 fs/fs_context.c:592
     vfs_get_tree+0x89/0x2f0 fs/super.c:1547
     do_new_mount fs/namespace.c:2875 [inline]
     path_mount+0x1387/0x2070 fs/namespace.c:3192
     do_mount fs/namespace.c:3205 [inline]
     __do_sys_mount fs/namespace.c:3413 [inline]
     __se_sys_mount fs/namespace.c:3390 [inline]
     __x64_sys_mount+0x27f/0x300 fs/namespace.c:3390
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    @blkno in f2fs_ra_meta_pages could exceed max segment count, causing panic
    in following sanity check in current_sit_addr(), add check condition to
    avoid this issue.
    
    Reported-by: syzbot+3698081bcf0bb2d12174@syzkaller.appspotmail.com
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1167e439fa055c681cdafc054659cf6a6cb320f
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Mon Sep 21 20:45:44 2020 +0800

    f2fs: add trace exit in exception path
    
    [ Upstream commit 9b66482282888d02832b7d90239e1cdb18e4b431 ]
    
    Missing the trace exit in f2fs_sync_dirty_inodes
    
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d05559d0876cb4bd2d0819ac8ee25937576d2ec9
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon Sep 14 14:52:18 2020 +1000

    sparc64: remove mm_cpumask clearing to fix kthread_use_mm race
    
    [ Upstream commit bafb056ce27940c9994ea905336aa8f27b4f7275 ]
    
    The de facto (and apparently uncommented) standard for using an mm had,
    thanks to this code in sparc if nothing else, been that you must have a
    reference on mm_users *and that reference must have been obtained with
    mmget()*, i.e., from a thread with a reference to mm_users that had used
    the mm.
    
    The introduction of mmget_not_zero() in commit d2005e3f41d4
    ("userfaultfd: don't pin the user memory in userfaultfd_file_create()")
    allowed mm_count holders to aoperate on user mappings asynchronously
    from the actual threads using the mm, but they were not to load those
    mappings into their TLB (i.e., walking vmas and page tables is okay,
    kthread_use_mm() is not).
    
    io_uring 2b188cc1bb857 ("Add io_uring IO interface") added code which
    does a kthread_use_mm() from a mmget_not_zero() refcount.
    
    The problem with this is code which previously assumed mm == current->mm
    and mm->mm_users == 1 implies the mm will remain single-threaded at
    least until this thread creates another mm_users reference, has now
    broken.
    
    arch/sparc/kernel/smp_64.c:
    
        if (atomic_read(&mm->mm_users) == 1) {
            cpumask_copy(mm_cpumask(mm), cpumask_of(cpu));
            goto local_flush_and_out;
        }
    
    vs fs/io_uring.c
    
        if (unlikely(!(ctx->flags & IORING_SETUP_SQPOLL) ||
                     !mmget_not_zero(ctx->sqo_mm)))
            return -EFAULT;
        kthread_use_mm(ctx->sqo_mm);
    
    mmget_not_zero() could come in right after the mm_users == 1 test, then
    kthread_use_mm() which sets its CPU in the mm_cpumask. That update could
    be lost if cpumask_copy() occurs afterward.
    
    I propose we fix this by allowing mmget_not_zero() to be a first-class
    reference, and not have this obscure undocumented and unchecked
    restriction.
    
    The basic fix for sparc64 is to remove its mm_cpumask clearing code. The
    optimisation could be effectively restored by sending IPIs to mm_cpumask
    members and having them remove themselves from mm_cpumask. This is more
    tricky so I leave it as an exercise for someone with a sparc64 SMP.
    powerpc has a (currently similarly broken) example.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200914045219.3736466-4-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa1b79ba5c0e12ecf9d6195ddb6e2318bc3cd226
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Mon Sep 14 14:52:17 2020 +1000

    powerpc: select ARCH_WANT_IRQS_OFF_ACTIVATE_MM
    
    [ Upstream commit 66acd46080bd9e5ad2be4b0eb1d498d5145d058e ]
    
    powerpc uses IPIs in some situations to switch a kernel thread away
    from a lazy tlb mm, which is subject to the TLB flushing race
    described in the changelog introducing ARCH_WANT_IRQS_OFF_ACTIVATE_MM.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200914045219.3736466-3-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33b0f9562513a991687a230e64428a26019a5da9
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Tue Aug 4 10:54:05 2020 +1000

    powerpc/powernv/smp: Fix spurious DBG() warning
    
    [ Upstream commit f6bac19cf65c5be21d14a0c9684c8f560f2096dd ]
    
    When building with W=1 we get the following warning:
    
     arch/powerpc/platforms/powernv/smp.c: In function ‘pnv_smp_cpu_kill_self’:
     arch/powerpc/platforms/powernv/smp.c:276:16: error: suggest braces around
            empty body in an ‘if’ statement [-Werror=empty-body]
       276 |      cpu, srr1);
           |                ^
     cc1: all warnings being treated as errors
    
    The full context is this block:
    
     if (srr1 && !generic_check_cpu_restart(cpu))
            DBG("CPU%d Unexpected exit while offline srr1=%lx!\n",
                            cpu, srr1);
    
    When building with DEBUG undefined DBG() expands to nothing and GCC emits
    the warning due to the lack of braces around an empty statement.
    
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Joel Stanley <joel@jms.id.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200804005410.146094-2-oohall@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d0e21af6d9f2ce7c2d4179b8aa8a85ff07ebe35
Author: Mateusz Nosek <mateusznosek0@gmail.com>
Date:   Sun Sep 27 02:08:58 2020 +0200

    futex: Fix incorrect should_fail_futex() handling
    
    [ Upstream commit 921c7ebd1337d1a46783d7e15a850e12aed2eaa0 ]
    
    If should_futex_fail() returns true in futex_wake_pi(), then the 'ret'
    variable is set to -EFAULT and then immediately overwritten. So the failure
    injection is non-functional.
    
    Fix it by actually leaving the function and returning -EFAULT.
    
    The Fixes tag is kinda blury because the initial commit which introduced
    failure injection was already sloppy, but the below mentioned commit broke
    it completely.
    
    [ tglx: Massaged changelog ]
    
    Fixes: 6b4f4bc9cb22 ("locking/futex: Allow low-level atomic operations to return -EAGAIN")
    Signed-off-by: Mateusz Nosek <mateusznosek0@gmail.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lore.kernel.org/r/20200927000858.24219-1-mateusznosek0@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0243fc48a16405584742a72f0425d30c88fa3cf4
Author: Amit Cohen <amcohen@nvidia.com>
Date:   Sat Oct 24 16:37:33 2020 +0300

    mlxsw: core: Fix use-after-free in mlxsw_emad_trans_finish()
    
    [ Upstream commit 0daf2bf5a2dcf33d446b76360908f109816e2e21 ]
    
    Each EMAD transaction stores the skb used to issue the EMAD request
    ('trans->tx_skb') so that the request could be retried in case of a
    timeout. The skb can be freed when a corresponding response is received
    or as part of the retry logic (e.g., failed retransmit, exceeded maximum
    number of retries).
    
    The two tasks (i.e., response processing and retransmits) are
    synchronized by the atomic 'trans->active' field which ensures that
    responses to inactive transactions are ignored.
    
    In case of a failed retransmit the transaction is finished and all of
    its resources are freed. However, the current code does not mark it as
    inactive. Syzkaller was able to hit a race condition in which a
    concurrent response is processed while the transaction's resources are
    being freed, resulting in a use-after-free [1].
    
    Fix the issue by making sure to mark the transaction as inactive after a
    failed retransmit and free its resources only if a concurrent task did
    not already do that.
    
    [1]
    BUG: KASAN: use-after-free in consume_skb+0x30/0x370
    net/core/skbuff.c:833
    Read of size 4 at addr ffff88804f570494 by task syz-executor.0/1004
    
    CPU: 0 PID: 1004 Comm: syz-executor.0 Not tainted 5.8.0-rc7+ #68
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xf6/0x16e lib/dump_stack.c:118
     print_address_description.constprop.0+0x1c/0x250
    mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     check_memory_region_inline mm/kasan/generic.c:186 [inline]
     check_memory_region+0x14e/0x1b0 mm/kasan/generic.c:192
     instrument_atomic_read include/linux/instrumented.h:56 [inline]
     atomic_read include/asm-generic/atomic-instrumented.h:27 [inline]
     refcount_read include/linux/refcount.h:147 [inline]
     skb_unref include/linux/skbuff.h:1044 [inline]
     consume_skb+0x30/0x370 net/core/skbuff.c:833
     mlxsw_emad_trans_finish+0x64/0x1c0 drivers/net/ethernet/mellanox/mlxsw/core.c:592
     mlxsw_emad_process_response drivers/net/ethernet/mellanox/mlxsw/core.c:651 [inline]
     mlxsw_emad_rx_listener_func+0x5c9/0xac0 drivers/net/ethernet/mellanox/mlxsw/core.c:672
     mlxsw_core_skb_receive+0x4df/0x770 drivers/net/ethernet/mellanox/mlxsw/core.c:2063
     mlxsw_pci_cqe_rdq_handle drivers/net/ethernet/mellanox/mlxsw/pci.c:595 [inline]
     mlxsw_pci_cq_tasklet+0x12a6/0x2520 drivers/net/ethernet/mellanox/mlxsw/pci.c:651
     tasklet_action_common.isra.0+0x13f/0x3e0 kernel/softirq.c:550
     __do_softirq+0x223/0x964 kernel/softirq.c:292
     asm_call_on_stack+0x12/0x20 arch/x86/entry/entry_64.S:711
    
    Allocated by task 1006:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc mm/kasan/common.c:494 [inline]
     __kasan_kmalloc.constprop.0+0xc2/0xd0 mm/kasan/common.c:467
     slab_post_alloc_hook mm/slab.h:586 [inline]
     slab_alloc_node mm/slub.c:2824 [inline]
     slab_alloc mm/slub.c:2832 [inline]
     kmem_cache_alloc+0xcd/0x2e0 mm/slub.c:2837
     __build_skb+0x21/0x60 net/core/skbuff.c:311
     __netdev_alloc_skb+0x1e2/0x360 net/core/skbuff.c:464
     netdev_alloc_skb include/linux/skbuff.h:2810 [inline]
     mlxsw_emad_alloc drivers/net/ethernet/mellanox/mlxsw/core.c:756 [inline]
     mlxsw_emad_reg_access drivers/net/ethernet/mellanox/mlxsw/core.c:787 [inline]
     mlxsw_core_reg_access_emad+0x1ab/0x1420 drivers/net/ethernet/mellanox/mlxsw/core.c:1817
     mlxsw_reg_trans_query+0x39/0x50 drivers/net/ethernet/mellanox/mlxsw/core.c:1831
     mlxsw_sp_sb_pm_occ_clear drivers/net/ethernet/mellanox/mlxsw/spectrum_buffers.c:260 [inline]
     mlxsw_sp_sb_occ_max_clear+0xbff/0x10a0 drivers/net/ethernet/mellanox/mlxsw/spectrum_buffers.c:1365
     mlxsw_devlink_sb_occ_max_clear+0x76/0xb0 drivers/net/ethernet/mellanox/mlxsw/core.c:1037
     devlink_nl_cmd_sb_occ_max_clear_doit+0x1ec/0x280 net/core/devlink.c:1765
     genl_family_rcv_msg_doit net/netlink/genetlink.c:669 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:714 [inline]
     genl_rcv_msg+0x617/0x980 net/netlink/genetlink.c:731
     netlink_rcv_skb+0x152/0x440 net/netlink/af_netlink.c:2470
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:742
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x53a/0x750 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x850/0xd90 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0x150/0x190 net/socket.c:671
     ____sys_sendmsg+0x6d8/0x840 net/socket.c:2359
     ___sys_sendmsg+0xff/0x170 net/socket.c:2413
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2446
     do_syscall_64+0x56/0xa0 arch/x86/entry/common.c:384
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 73:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x12c/0x170 mm/kasan/common.c:455
     slab_free_hook mm/slub.c:1474 [inline]
     slab_free_freelist_hook mm/slub.c:1507 [inline]
     slab_free mm/slub.c:3072 [inline]
     kmem_cache_free+0xbe/0x380 mm/slub.c:3088
     kfree_skbmem net/core/skbuff.c:622 [inline]
     kfree_skbmem+0xef/0x1b0 net/core/skbuff.c:616
     __kfree_skb net/core/skbuff.c:679 [inline]
     consume_skb net/core/skbuff.c:837 [inline]
     consume_skb+0xe1/0x370 net/core/skbuff.c:831
     mlxsw_emad_trans_finish+0x64/0x1c0 drivers/net/ethernet/mellanox/mlxsw/core.c:592
     mlxsw_emad_transmit_retry.isra.0+0x9d/0xc0 drivers/net/ethernet/mellanox/mlxsw/core.c:613
     mlxsw_emad_trans_timeout_work+0x43/0x50 drivers/net/ethernet/mellanox/mlxsw/core.c:625
     process_one_work+0xa3e/0x17a0 kernel/workqueue.c:2269
     worker_thread+0x9e/0x1050 kernel/workqueue.c:2415
     kthread+0x355/0x470 kernel/kthread.c:291
     ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:293
    
    The buggy address belongs to the object at ffff88804f5703c0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 212 bytes inside of
     224-byte region [ffff88804f5703c0, ffff88804f5704a0)
    The buggy address belongs to the page:
    page:ffffea00013d5c00 refcount:1 mapcount:0 mapping:0000000000000000
    index:0x0
    flags: 0x100000000000200(slab)
    raw: 0100000000000200 dead000000000100 dead000000000122 ffff88806c625400
    raw: 0000000000000000 00000000000c000c 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88804f570380: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff88804f570400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88804f570480: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff88804f570500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff88804f570580: 00 00 00 00 00 00 00 00 00 00 00 00 fc fc fc fc
    
    Fixes: caf7297e7ab5f ("mlxsw: core: Introduce support for asynchronous EMAD register access")
    Signed-off-by: Amit Cohen <amcohen@nvidia.com>
    Reviewed-by: Jiri Pirko <jiri@nvidia.com>
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7612d1272af18686239b5b326c38ce26e142db7
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Wed Oct 14 07:30:51 2020 +0200

    x86/unwind/orc: Fix inactive tasks with stack pointer in %sp on GCC 10 compiled kernels
    
    [ Upstream commit f2ac57a4c49d40409c21c82d23b5706df9b438af ]
    
    GCC 10 optimizes the scheduler code differently than its predecessors.
    
    When CONFIG_DEBUG_SECTION_MISMATCH=y, the Makefile forces GCC not
    to inline some functions (-fno-inline-functions-called-once). Before GCC
    10, "no-inlined" __schedule() starts with the usual prologue:
    
      push %bp
      mov %sp, %bp
    
    So the ORC unwinder simply picks stack pointer from %bp and
    unwinds from __schedule() just perfectly:
    
      $ cat /proc/1/stack
      [<0>] ep_poll+0x3e9/0x450
      [<0>] do_epoll_wait+0xaa/0xc0
      [<0>] __x64_sys_epoll_wait+0x1a/0x20
      [<0>] do_syscall_64+0x33/0x40
      [<0>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    But now, with GCC 10, there is no %bp prologue in __schedule():
    
      $ cat /proc/1/stack
      <nothing>
    
    The ORC entry of the point in __schedule() is:
    
      sp:sp+88 bp:last_sp-48 type:call end:0
    
    In this case, nobody subtracts sizeof "struct inactive_task_frame" in
    __unwind_start(). The struct is put on the stack by __switch_to_asm() and
    only then __switch_to_asm() stores %sp to task->thread.sp. But we start
    unwinding from a point in __schedule() (stored in frame->ret_addr by
    'call') and not in __switch_to_asm().
    
    So for these example values in __unwind_start():
    
      sp=ffff94b50001fdc8 bp=ffff8e1f41d29340 ip=__schedule+0x1f0
    
    The stack is:
    
      ffff94b50001fdc8: ffff8e1f41578000 # struct inactive_task_frame
      ffff94b50001fdd0: 0000000000000000
      ffff94b50001fdd8: ffff8e1f41d29340
      ffff94b50001fde0: ffff8e1f41611d40 # ...
      ffff94b50001fde8: ffffffff93c41920 # bx
      ffff94b50001fdf0: ffff8e1f41d29340 # bp
      ffff94b50001fdf8: ffffffff9376cad0 # ret_addr (and end of the struct)
    
    0xffffffff9376cad0 is __schedule+0x1f0 (after the call to
    __switch_to_asm).  Now follow those 88 bytes from the ORC entry (sp+88).
    The entry is correct, __schedule() really pushes 48 bytes (8*7) + 32 bytes
    via subq to store some local values (like 4U below). So to unwind, look
    at the offset 88-sizeof(long) = 0x50 from here:
    
      ffff94b50001fe00: ffff8e1f41578618
      ffff94b50001fe08: 00000cc000000255
      ffff94b50001fe10: 0000000500000004
      ffff94b50001fe18: 7793fab6956b2d00 # NOTE (see below)
      ffff94b50001fe20: ffff8e1f41578000
      ffff94b50001fe28: ffff8e1f41578000
      ffff94b50001fe30: ffff8e1f41578000
      ffff94b50001fe38: ffff8e1f41578000
      ffff94b50001fe40: ffff94b50001fed8
      ffff94b50001fe48: ffff8e1f41577ff0
      ffff94b50001fe50: ffffffff9376cf12
    
    Here                ^^^^^^^^^^^^^^^^ is the correct ret addr from
    __schedule(). It translates to schedule+0x42 (insn after a call to
    __schedule()).
    
    BUT, unwind_next_frame() tries to take the address starting from
    0xffff94b50001fdc8. That is exactly from thread.sp+88-sizeof(long) =
    0xffff94b50001fdc8+88-8 = 0xffff94b50001fe18, which is garbage marked as
    NOTE above. So this quits the unwinding as 7793fab6956b2d00 is obviously
    not a kernel address.
    
    There was a fix to skip 'struct inactive_task_frame' in
    unwind_get_return_address_ptr in the following commit:
    
      187b96db5ca7 ("x86/unwind/orc: Fix unwind_get_return_address_ptr() for inactive tasks")
    
    But we need to skip the struct already in the unwinder proper. So
    subtract the size (increase the stack pointer) of the structure in
    __unwind_start() directly. This allows for removal of the code added by
    commit 187b96db5ca7 completely, as the address is now at
    '(unsigned long *)state->sp - 1', the same as in the generic case.
    
    [ mingo: Cleaned up the changelog a bit, for better readability. ]
    
    Fixes: ee9f8fce9964 ("x86/unwind: Add the ORC unwinder")
    Bug: https://bugzilla.suse.com/show_bug.cgi?id=1176907
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20201014053051.24199-1-jslaby@suse.cz
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aca85554599d9d55d19d202f0f16bb478cce3cc9
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Jan 22 16:20:21 2019 -0800

    fscrypt: return -EXDEV for incompatible rename or link into encrypted dir
    
    commit f5e55e777cc93eae1416f0fa4908e8846b6d7825 upstream.
    
    Currently, trying to rename or link a regular file, directory, or
    symlink into an encrypted directory fails with EPERM when the source
    file is unencrypted or is encrypted with a different encryption policy,
    and is on the same mountpoint.  It is correct for the operation to fail,
    but the choice of EPERM breaks tools like 'mv' that know to copy rather
    than rename if they see EXDEV, but don't know what to do with EPERM.
    
    Our original motivation for EPERM was to encourage users to securely
    handle their data.  Encrypting files by "moving" them into an encrypted
    directory can be insecure because the unencrypted data may remain in
    free space on disk, where it can later be recovered by an attacker.
    It's much better to encrypt the data from the start, or at least try to
    securely delete the source data e.g. using the 'shred' program.
    
    However, the current behavior hasn't been effective at achieving its
    goal because users tend to be confused, hack around it, and complain;
    see e.g. https://github.com/google/fscrypt/issues/76.  And in some cases
    it's actually inconsistent or unnecessary.  For example, 'mv'-ing files
    between differently encrypted directories doesn't work even in cases
    where it can be secure, such as when in userspace the same passphrase
    protects both directories.  Yet, you *can* already 'mv' unencrypted
    files into an encrypted directory if the source files are on a different
    mountpoint, even though doing so is often insecure.
    
    There are probably better ways to teach users to securely handle their
    files.  For example, the 'fscrypt' userspace tool could provide a
    command that migrates unencrypted files into an encrypted directory,
    acting like 'shred' on the source files and providing appropriate
    warnings depending on the type of the source filesystem and disk.
    
    Receiving errors on unimportant files might also force some users to
    disable encryption, thus making the behavior counterproductive.  It's
    desirable to make encryption as unobtrusive as possible.
    
    Therefore, change the error code from EPERM to EXDEV so that tools
    looking for EXDEV will fall back to a copy.
    
    This, of course, doesn't prevent users from still doing the right things
    to securely manage their files.  Note that this also matches the
    behavior when a file is renamed between two project quota hierarchies;
    so there's precedent for using EXDEV for things other than mountpoints.
    
    xfstests generic/398 will require an update with this change.
    
    [Rewritten from an earlier patch series by Michael Halcrow.]
    
    Cc: Michael Halcrow <mhalcrow@google.com>
    Cc: Joe Richey <joerichey@google.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 189c1fb97363504aa8f7cff4da0539dba69099ec
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Sep 17 15:09:20 2020 +0200

    ata: sata_rcar: Fix DMA boundary mask
    
    commit df9c590986fdb6db9d5636d6cd93bc919c01b451 upstream.
    
    Before commit 9495b7e92f716ab2 ("driver core: platform: Initialize
    dma_parms for platform devices"), the R-Car SATA device didn't have DMA
    parameters.  Hence the DMA boundary mask supplied by its driver was
    silently ignored, as __scsi_init_queue() doesn't check the return value
    of dma_set_seg_boundary(), and the default value of 0xffffffff was used.
    
    Now the device has gained DMA parameters, the driver-supplied value is
    used, and the following warning is printed on Salvator-XS:
    
        DMA-API: sata_rcar ee300000.sata: mapping sg segment across boundary [start=0x00000000ffffe000] [end=0x00000000ffffefff] [boundary=0x000000001ffffffe]
        WARNING: CPU: 5 PID: 38 at kernel/dma/debug.c:1233 debug_dma_map_sg+0x298/0x300
    
    (the range of start/end values depend on whether IOMMU support is
     enabled or not)
    
    The issue here is that SATA_RCAR_DMA_BOUNDARY doesn't have bit 0 set, so
    any typical end value, which is odd, will trigger the check.
    
    Fix this by increasing the DMA boundary value by 1.
    
    This also fixes the following WRITE DMA EXT timeout issue:
    
        # dd if=/dev/urandom of=/mnt/de1/file1-1024M bs=1M count=1024
        ata1.00: exception Emask 0x0 SAct 0x0 SErr 0x0 action 0x6 frozen
        ata1.00: failed command: WRITE DMA EXT
        ata1.00: cmd 35/00:00:00:e6:0c/00:0a:00:00:00/e0 tag 0 dma 1310720 out
        res 40/00:01:00:00:00/00:00:00:00:00/00 Emask 0x4 (timeout)
        ata1.00: status: { DRDY }
    
    as seen by Shimoda-san since commit 429120f3df2dba2b ("block: fix
    splitting segments on boundary masks").
    
    Fixes: 8bfbeed58665dbbf ("sata_rcar: correct 'sata_rcar_sht'")
    Fixes: 9495b7e92f716ab2 ("driver core: platform: Initialize dma_parms for platform devices")
    Fixes: 429120f3df2dba2b ("block: fix splitting segments on boundary masks")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Tested-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
    Tested-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Reviewed-by: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c82b6dee273de55890eabad34488ce42f784995f
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Mon Apr 27 14:50:37 2020 -0500

    mtd: lpddr: Fix bad logic in print_drs_error
    
    commit 1c9c02bb22684f6949d2e7ddc0a3ff364fd5a6fc upstream.
    
    Update logic for broken test. Use a more common logging style.
    
    It appears the logic in this function is broken for the
    consecutive tests of
    
            if (prog_status & 0x3)
                    ...
            else if (prog_status & 0x2)
                    ...
            else (prog_status & 0x1)
                    ...
    
    Likely the first test should be
    
            if ((prog_status & 0x3) == 0x3)
    
    Found by inspection of include files using printk.
    
    Fixes: eb3db27507f7 ("[MTD] LPDDR PFOW definition")
    Cc: stable@vger.kernel.org
    Reported-by: Joe Perches <joe@perches.com>
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/3fb0e29f5b601db8be2938a01d974b00c8788501.1588016644.git.gustavo@embeddedor.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ae1561c06784f05ac003d14cfabec540792305c
Author: Jia-Ju Bai <baijiaju@tsinghua.edu.cn>
Date:   Sun Aug 2 21:29:49 2020 +0800

    p54: avoid accessing the data mapped to streaming DMA
    
    commit 478762855b5ae9f68fa6ead1edf7abada70fcd5f upstream.
    
    In p54p_tx(), skb->data is mapped to streaming DMA on line 337:
      mapping = pci_map_single(..., skb->data, ...);
    
    Then skb->data is accessed on line 349:
      desc->device_addr = ((struct p54_hdr *)skb->data)->req_id;
    
    This access may cause data inconsistency between CPU cache and hardware.
    
    To fix this problem, ((struct p54_hdr *)skb->data)->req_id is stored in
    a local variable before DMA mapping, and then the driver accesses this
    local variable instead of skb->data.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Jia-Ju Bai <baijiaju@tsinghua.edu.cn>
    Acked-by: Christian Lamparter <chunkeey@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200802132949.26788-1-baijiaju@tsinghua.edu.cn
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc7f5699899951f08ed4a31d4668fd7f8b9be8a4
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Sep 18 10:36:50 2020 +0200

    fuse: fix page dereference after free
    
    commit d78092e4937de9ce55edcb4ee4c5e3c707be0190 upstream.
    
    After unlock_request() pages from the ap->pages[] array may be put (e.g. by
    aborting the connection) and the pages can be freed.
    
    Prevent use after free by grabbing a reference to the page before calling
    unlock_request().
    
    The original patch was created by Pradeep P V K.
    
    Reported-by: Pradeep P V K <ppvk@codeaurora.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b50b047d6acf4c94541cf5240cbce19f0a4e0b01
Author: Juergen Gross <jgross@suse.com>
Date:   Fri Sep 25 16:07:51 2020 +0200

    x86/xen: disable Firmware First mode for correctable memory errors
    
    commit d759af38572f97321112a0852353613d18126038 upstream.
    
    When running as Xen dom0 the kernel isn't responsible for selecting the
    error handling mode, this should be handled by the hypervisor.
    
    So disable setting FF mode when running as Xen pv guest. Not doing so
    might result in boot splats like:
    
    [    7.509696] HEST: Enabling Firmware First mode for corrected errors.
    [    7.510382] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 2.
    [    7.510383] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 3.
    [    7.510384] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 4.
    [    7.510384] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 5.
    [    7.510385] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 6.
    [    7.510386] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 7.
    [    7.510386] mce: [Firmware Bug]: Ignoring request to disable invalid MCA bank 8.
    
    Reason is that the HEST ACPI table contains the real number of MCA
    banks, while the hypervisor is emulating only 2 banks for guests.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Link: https://lore.kernel.org/r/20200925140751.31381-1-jgross@suse.com
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 898549e13c2ba9ce8d066584f9072b0e099cf911
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Sep 8 16:47:36 2020 -0500

    arch/x86/amd/ibs: Fix re-arming IBS Fetch
    
    commit 221bfce5ebbdf72ff08b3bf2510ae81058ee568b upstream.
    
    Stephane Eranian found a bug in that IBS' current Fetch counter was not
    being reset when the driver would write the new value to clear it along
    with the enable bit set, and found that adding an MSR write that would
    first disable IBS Fetch would make IBS Fetch reset its current count.
    
    Indeed, the PPR for AMD Family 17h Model 31h B0 55803 Rev 0.54 - Sep 12,
    2019 states "The periodic fetch counter is set to IbsFetchCnt [...] when
    IbsFetchEn is changed from 0 to 1."
    
    Explicitly set IbsFetchEn to 0 and then to 1 when re-enabling IBS Fetch,
    so the driver properly resets the internal counter to 0 and IBS
    Fetch starts counting again.
    
    A family 15h machine tested does not have this problem, and the extra
    wrmsr is also not needed on Family 19h, so only do the extra wrmsr on
    families 16h through 18h.
    
    Reported-by: Stephane Eranian <stephane.eranian@google.com>
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    [peterz: optimized]
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=206537
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e0f2ddfe9ed5614904d5d559149b91a6e301565
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 248b182fc80b7cebe78538c4d538d35c049c6dbc
Author: Andrew Gabbasov <andrew_gabbasov@mentor.com>
Date:   Mon Oct 26 05:21:30 2020 -0500

    ravb: Fix bit fields checking in ravb_hwtstamp_get()
    
    [ Upstream commit 68b9f0865b1ef545da180c57d54b82c94cb464a4 ]
    
    In the function ravb_hwtstamp_get() in ravb_main.c with the existing
    values for RAVB_RXTSTAMP_TYPE_V2_L2_EVENT (0x2) and RAVB_RXTSTAMP_TYPE_ALL
    (0x6)
    
    if (priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE_V2_L2_EVENT)
            config.rx_filter = HWTSTAMP_FILTER_PTP_V2_L2_EVENT;
    else if (priv->tstamp_rx_ctrl & RAVB_RXTSTAMP_TYPE_ALL)
            config.rx_filter = HWTSTAMP_FILTER_ALL;
    
    if the test on RAVB_RXTSTAMP_TYPE_ALL should be true,
    it will never be reached.
    
    This issue can be verified with 'hwtstamp_config' testing program
    (tools/testing/selftests/net/hwtstamp_config.c). Setting filter type
    to ALL and subsequent retrieving it gives incorrect value:
    
    $ hwtstamp_config eth0 OFF ALL
    flags = 0
    tx_type = OFF
    rx_filter = ALL
    $ hwtstamp_config eth0
    flags = 0
    tx_type = OFF
    rx_filter = PTP_V2_L2_EVENT
    
    Correct this by converting if-else's to switch.
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Reported-by: Julia Lawall <julia.lawall@inria.fr>
    Signed-off-by: Andrew Gabbasov <andrew_gabbasov@mentor.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Link: https://lore.kernel.org/r/20201026102130.29368-1-andrew_gabbasov@mentor.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d7a1b07ed2553e1eee61a827d97539fde849f58
Author: Masahiro Fujiwara <fujiwara.masahiro@gmail.com>
Date:   Tue Oct 27 20:48:46 2020 +0900

    gtp: fix an use-before-init in gtp_newlink()
    
    [ Upstream commit 51467431200b91682b89d31317e35dcbca1469ce ]
    
    *_pdp_find() from gtp_encap_recv() would trigger a crash when a peer
    sends GTP packets while creating new GTP device.
    
    RIP: 0010:gtp1_pdp_find.isra.0+0x68/0x90 [gtp]
    <SNIP>
    Call Trace:
     <IRQ>
     gtp_encap_recv+0xc2/0x2e0 [gtp]
     ? gtp1_pdp_find.isra.0+0x90/0x90 [gtp]
     udp_queue_rcv_one_skb+0x1fe/0x530
     udp_queue_rcv_skb+0x40/0x1b0
     udp_unicast_rcv_skb.isra.0+0x78/0x90
     __udp4_lib_rcv+0x5af/0xc70
     udp_rcv+0x1a/0x20
     ip_protocol_deliver_rcu+0xc5/0x1b0
     ip_local_deliver_finish+0x48/0x50
     ip_local_deliver+0xe5/0xf0
     ? ip_protocol_deliver_rcu+0x1b0/0x1b0
    
    gtp_encap_enable() should be called after gtp_hastable_new() otherwise
    *_pdp_find() will access the uninitialized hash table.
    
    Fixes: 1e3a3abd8b28 ("gtp: make GTP sockets in gtp_newlink optional")
    Signed-off-by: Masahiro Fujiwara <fujiwara.masahiro@gmail.com>
    Link: https://lore.kernel.org/r/20201027114846.3924-1-fujiwara.masahiro@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a315f68791c8faad5f8b02792f78dce494ebc77
Author: Michael Schaller <misch@google.com>
Date:   Fri Sep 25 09:45:02 2020 +0200

    efivarfs: Replace invalid slashes with exclamation marks in dentries.
    
    commit 336af6a4686d885a067ecea8c3c3dd129ba4fc75 upstream.
    
    Without this patch efivarfs_alloc_dentry creates dentries with slashes in
    their name if the respective EFI variable has slashes in its name. This in
    turn causes EIO on getdents64, which prevents a complete directory listing
    of /sys/firmware/efi/efivars/.
    
    This patch replaces the invalid shlashes with exclamation marks like
    kobject_set_name_vargs does for /sys/firmware/efi/vars/ to have consistently
    named dentries under /sys/firmware/efi/vars/ and /sys/firmware/efi/efivars/.
    
    Signed-off-by: Michael Schaller <misch@google.com>
    Link: https://lore.kernel.org/r/20200925074502.150448-1-misch@google.com
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: dann frazier <dann.frazier@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4b039910a5776ea88053d2729b72ef61369ee41
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Oct 16 10:53:39 2020 -0700

    arm64: link with -z norelro regardless of CONFIG_RELOCATABLE
    
    commit 3b92fa7485eba16b05166fddf38ab42f2ff6ab95 upstream.
    
    With CONFIG_EXPERT=y, CONFIG_KASAN=y, CONFIG_RANDOMIZE_BASE=n,
    CONFIG_RELOCATABLE=n, we observe the following failure when trying to
    link the kernel image with LD=ld.lld:
    
    error: section: .exit.data is not contiguous with other relro sections
    
    ld.lld defaults to -z relro while ld.bfd defaults to -z norelro. This
    was previously fixed, but only for CONFIG_RELOCATABLE=y.
    
    Fixes: 3bbd3db86470 ("arm64: relocatable: fix inconsistencies in linker script and options")
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20201016175339.2429280-1-ndesaulniers@google.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3049032e88d83a32527a6aa8d5225ee8f0a27f59
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Thu Sep 17 08:56:11 2020 +0200

    scripts/setlocalversion: make git describe output more reliable
    
    commit 548b8b5168c90c42e88f70fcf041b4ce0b8e7aa8 upstream.
    
    When building for an embedded target using Yocto, we're sometimes
    observing that the version string that gets built into vmlinux (and
    thus what uname -a reports) differs from the path under /lib/modules/
    where modules get installed in the rootfs, but only in the length of
    the -gabc123def suffix. Hence modprobe always fails.
    
    The problem is that Yocto has the concept of "sstate" (shared state),
    which allows different developers/buildbots/etc. to share build
    artifacts, based on a hash of all the metadata that went into building
    that artifact - and that metadata includes all dependencies (e.g. the
    compiler used etc.). That normally works quite well; usually a clean
    build (without using any sstate cache) done by one developer ends up
    being binary identical to a build done on another host. However, one
    thing that can cause two developers to end up with different builds
    [and thus make one's vmlinux package incompatible with the other's
    kernel-dev package], which is not captured by the metadata hashing, is
    this `git describe`: The output of that can be affected by
    
    (1) git version: before 2.11 git defaulted to a minimum of 7, since
    2.11 (git.git commit e6c587) the default is dynamic based on the
    number of objects in the repo
    (2) hence even if both run the same git version, the output can differ
    based on how many remotes are being tracked (or just lots of local
    development branches or plain old garbage)
    (3) and of course somebody could have a core.abbrev config setting in
    ~/.gitconfig
    
    So in order to avoid `uname -a` output relying on such random details
    of the build environment which are rather hard to ensure are
    consistent between developers and buildbots, make sure the abbreviated
    sha1 always consists of exactly 12 hex characters. That is consistent
    with the current rule for -stable patches, and is almost always enough
    to identify the head commit unambigously - in the few cases where it
    does not, the v5.4.3-00021- prefix would certainly nail it down.
    
    [Adapt to `` vs $() differences between 5.4 and upstream.]
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70a5a7bf23fadf6faa24f3a12c5f10d6b7abc973
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 29 09:07:21 2020 +0100

    Linux 4.14.203
    
    Tested-by: Jeffrin Jose T <jeffrin@rajagiritech.edu.in>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20201027134909.701581493@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 184b3c89cfc026c16888ec37c2f9f947541d0600
Author: Mukesh Ojha <mukesh02@linux.vnet.ibm.com>
Date:   Mon Feb 20 18:52:11 2017 +0530

    powerpc/powernv/opal-dump : Use IRQ_HANDLED instead of numbers in interrupt handler
    
    [ Upstream commit b29336c0e1785a28bc40a9fd47c2321671e9792e ]
    
    Fixes: 8034f715f ("powernv/opal-dump: Convert to irq domain")
    
    Converts all the return explicit number to a more proper IRQ_HANDLED,
    which looks proper incase of interrupt handler returning case.
    
    Here, It also removes error message like "nobody cared" which was
    getting unveiled while returning -1 or 0 from handler.
    
    Signed-off-by: Mukesh Ojha <mukesh02@linux.vnet.ibm.com>
    Reviewed-by: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 962455675dc040be8bc8c14bcb8ba9c392af54ff
Author: Lorenzo Colitti <lorenzo@google.com>
Date:   Tue Aug 25 14:55:05 2020 +0900

    usb: gadget: f_ncm: allow using NCM in SuperSpeed Plus gadgets.
    
    [ Upstream commit 7974ecd7d3c0f42a98566f281e44ea8573a2ad88 ]
    
    Currently, enabling f_ncm at SuperSpeed Plus speeds results in an
    oops in config_ep_by_speed because ncm_set_alt passes in NULL
    ssp_descriptors. Fix this by re-using the SuperSpeed descriptors.
    This is safe because usb_assign_descriptors calls
    usb_copy_descriptors.
    
    Tested: enabled f_ncm on a dwc3 gadget and 10Gbps link, ran iperf
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 384fe332edabc175e20defcbffcdc44ac3dbb5e0
Author: Christian Eggers <ceggers@arri.de>
Date:   Tue Jul 28 11:29:59 2020 +0200

    eeprom: at25: set minimum read/write access stride to 1
    
    commit 284f52ac1c6cfa1b2e5c11b84653dd90e4e91de7 upstream.
    
    SPI eeproms are addressed by byte.
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200728092959.24600-1-ceggers@arri.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6846d3f526914c03a76876305a9717e724ca706c
Author: Oliver Neukum <oneukum@suse.com>
Date:   Mon Sep 28 23:17:55 2020 +0900

    USB: cdc-wdm: Make wdm_flush() interruptible and add wdm_fsync().
    
    commit 37d2a36394d954413a495da61da1b2a51ecd28ab upstream.
    
    syzbot is reporting hung task at wdm_flush() [1], for there is a circular
    dependency that wdm_flush() from flip_close() for /dev/cdc-wdm0 forever
    waits for /dev/raw-gadget to be closed while close() for /dev/raw-gadget
    cannot be called unless close() for /dev/cdc-wdm0 completes.
    
    Tetsuo Handa considered that such circular dependency is an usage error [2]
    which corresponds to an unresponding broken hardware [3]. But Alan Stern
    responded that we should be prepared for such hardware [4]. Therefore,
    this patch changes wdm_flush() to use wait_event_interruptible_timeout()
    which gives up after 30 seconds, for hardware that remains silent must be
    ignored. The 30 seconds are coming out of thin air.
    
    Changing wait_event() to wait_event_interruptible_timeout() makes error
    reporting from close() syscall less reliable. To compensate it, this patch
    also implements wdm_fsync() which does not use timeout. Those who want to
    be very sure that data has gone out to the device are now advised to call
    fsync(), with a caveat that fsync() can return -EINVAL when running on
    older kernels which do not implement wdm_fsync().
    
    This patch also fixes three more problems (listed below) found during
    exhaustive discussion and testing.
    
      Since multiple threads can concurrently call wdm_write()/wdm_flush(),
      we need to use wake_up_all() whenever clearing WDM_IN_USE in order to
      make sure that all waiters are woken up. Also, error reporting needs
      to use fetch-and-clear approach in order not to report same error for
      multiple times.
    
      Since wdm_flush() checks WDM_DISCONNECTING, wdm_write() should as well
      check WDM_DISCONNECTING.
    
      In wdm_flush(), since locks are not held, it is not safe to dereference
      desc->intf after checking that WDM_DISCONNECTING is not set [5]. Thus,
      remove dev_err() from wdm_flush().
    
    [1] https://syzkaller.appspot.com/bug?id=e7b761593b23eb50855b9ea31e3be5472b711186
    [2] https://lkml.kernel.org/r/27b7545e-8f41-10b8-7c02-e35a08eb1611@i-love.sakura.ne.jp
    [3] https://lkml.kernel.org/r/79ba410f-e0ef-2465-b94f-6b9a4a82adf5@i-love.sakura.ne.jp
    [4] https://lkml.kernel.org/r/20200530011040.GB12419@rowland.harvard.edu
    [5] https://lkml.kernel.org/r/c85331fc-874c-6e46-a77f-0ef1dc075308@i-love.sakura.ne.jp
    
    Reported-by: syzbot <syzbot+854768b99f19e89d7f81@syzkaller.appspotmail.com>
    Cc: stable <stable@vger.kernel.org>
    Co-developed-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200928141755.3476-1-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6849054150941ece1322f997995ff0156f2d20a9
Author: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
Date:   Sat Oct 3 00:41:51 2020 +0900

    usb: cdc-acm: add quirk to blacklist ETAS ES58X devices
    
    commit a4f88430af896bf34ec25a7a5f0e053fb3d928e0 upstream.
    
    The ES58X devices has a CDC ACM interface (used for debug
    purpose). During probing, the device is thus recognized as USB Modem
    (CDC ACM), preventing the etas-es58x module to load:
      usbcore: registered new interface driver etas_es58x
      usb 1-1.1: new full-speed USB device number 14 using xhci_hcd
      usb 1-1.1: New USB device found, idVendor=108c, idProduct=0159, bcdDevice= 1.00
      usb 1-1.1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
      usb 1-1.1: Product: ES581.4
      usb 1-1.1: Manufacturer: ETAS GmbH
      usb 1-1.1: SerialNumber: 2204355
      cdc_acm 1-1.1:1.0: No union descriptor, testing for castrated device
      cdc_acm 1-1.1:1.0: ttyACM0: USB ACM device
    
    Thus, these have been added to the ignore list in
    drivers/usb/class/cdc-acm.c
    
    N.B. Future firmware release of the ES58X will remove the CDC-ACM
    interface.
    
    `lsusb -v` of the three devices variant (ES581.4, ES582.1 and
    ES584.1):
    
      Bus 001 Device 011: ID 108c:0159 Robert Bosch GmbH ES581.4
      Device Descriptor:
        bLength                18
        bDescriptorType         1
        bcdUSB               1.10
        bDeviceClass            2 Communications
        bDeviceSubClass         0
        bDeviceProtocol         0
        bMaxPacketSize0        64
        idVendor           0x108c Robert Bosch GmbH
        idProduct          0x0159
        bcdDevice            1.00
        iManufacturer           1 ETAS GmbH
        iProduct                2 ES581.4
        iSerial                 3 2204355
        bNumConfigurations      1
        Configuration Descriptor:
          bLength                 9
          bDescriptorType         2
          wTotalLength       0x0035
          bNumInterfaces          1
          bConfigurationValue     1
          iConfiguration          5 Bus Powered Configuration
          bmAttributes         0x80
            (Bus Powered)
          MaxPower              100mA
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        0
            bAlternateSetting       0
            bNumEndpoints           3
            bInterfaceClass         2 Communications
            bInterfaceSubClass      2 Abstract (modem)
            bInterfaceProtocol      0
            iInterface              4 ACM Control Interface
            CDC Header:
              bcdCDC               1.10
            CDC Call Management:
              bmCapabilities       0x01
                call management
              bDataInterface          0
            CDC ACM:
              bmCapabilities       0x06
                sends break
                line coding and serial state
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x81  EP 1 IN
              bmAttributes            3
                Transfer Type            Interrupt
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0010  1x 16 bytes
              bInterval              10
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x82  EP 2 IN
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0040  1x 64 bytes
              bInterval               0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x03  EP 3 OUT
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0040  1x 64 bytes
              bInterval               0
      Device Status:     0x0000
        (Bus Powered)
    
      Bus 001 Device 012: ID 108c:0168 Robert Bosch GmbH ES582
      Device Descriptor:
        bLength                18
        bDescriptorType         1
        bcdUSB               2.00
        bDeviceClass            2 Communications
        bDeviceSubClass         0
        bDeviceProtocol         0
        bMaxPacketSize0        64
        idVendor           0x108c Robert Bosch GmbH
        idProduct          0x0168
        bcdDevice            1.00
        iManufacturer           1 ETAS GmbH
        iProduct                2 ES582
        iSerial                 3 0108933
        bNumConfigurations      1
        Configuration Descriptor:
          bLength                 9
          bDescriptorType         2
          wTotalLength       0x0043
          bNumInterfaces          2
          bConfigurationValue     1
          iConfiguration          0
          bmAttributes         0x80
            (Bus Powered)
          MaxPower              500mA
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        0
            bAlternateSetting       0
            bNumEndpoints           1
            bInterfaceClass         2 Communications
            bInterfaceSubClass      2 Abstract (modem)
            bInterfaceProtocol      1 AT-commands (v.25ter)
            iInterface              0
            CDC Header:
              bcdCDC               1.10
            CDC ACM:
              bmCapabilities       0x02
                line coding and serial state
            CDC Union:
              bMasterInterface        0
              bSlaveInterface         1
            CDC Call Management:
              bmCapabilities       0x03
                call management
                use DataInterface
              bDataInterface          1
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x83  EP 3 IN
              bmAttributes            3
                Transfer Type            Interrupt
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0040  1x 64 bytes
              bInterval              16
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        1
            bAlternateSetting       0
            bNumEndpoints           2
            bInterfaceClass        10 CDC Data
            bInterfaceSubClass      0
            bInterfaceProtocol      0
            iInterface              0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x81  EP 1 IN
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0200  1x 512 bytes
              bInterval               0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x02  EP 2 OUT
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0200  1x 512 bytes
              bInterval               0
      Device Qualifier (for other device speed):
        bLength                10
        bDescriptorType         6
        bcdUSB               2.00
        bDeviceClass            2 Communications
        bDeviceSubClass         0
        bDeviceProtocol         0
        bMaxPacketSize0        64
        bNumConfigurations      1
      Device Status:     0x0000
        (Bus Powered)
    
      Bus 001 Device 013: ID 108c:0169 Robert Bosch GmbH ES584.1
      Device Descriptor:
        bLength                18
        bDescriptorType         1
        bcdUSB               2.00
        bDeviceClass            2 Communications
        bDeviceSubClass         0
        bDeviceProtocol         0
        bMaxPacketSize0        64
        idVendor           0x108c Robert Bosch GmbH
        idProduct          0x0169
        bcdDevice            1.00
        iManufacturer           1 ETAS GmbH
        iProduct                2 ES584.1
        iSerial                 3 0100320
        bNumConfigurations      1
        Configuration Descriptor:
          bLength                 9
          bDescriptorType         2
          wTotalLength       0x0043
          bNumInterfaces          2
          bConfigurationValue     1
          iConfiguration          0
          bmAttributes         0x80
            (Bus Powered)
          MaxPower              500mA
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        0
            bAlternateSetting       0
            bNumEndpoints           1
            bInterfaceClass         2 Communications
            bInterfaceSubClass      2 Abstract (modem)
            bInterfaceProtocol      1 AT-commands (v.25ter)
            iInterface              0
            CDC Header:
              bcdCDC               1.10
            CDC ACM:
              bmCapabilities       0x02
                line coding and serial state
            CDC Union:
              bMasterInterface        0
              bSlaveInterface         1
            CDC Call Management:
              bmCapabilities       0x03
                call management
                use DataInterface
              bDataInterface          1
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x83  EP 3 IN
              bmAttributes            3
                Transfer Type            Interrupt
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0040  1x 64 bytes
              bInterval              16
          Interface Descriptor:
            bLength                 9
            bDescriptorType         4
            bInterfaceNumber        1
            bAlternateSetting       0
            bNumEndpoints           2
            bInterfaceClass        10 CDC Data
            bInterfaceSubClass      0
            bInterfaceProtocol      0
            iInterface              0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x81  EP 1 IN
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0200  1x 512 bytes
              bInterval               0
            Endpoint Descriptor:
              bLength                 7
              bDescriptorType         5
              bEndpointAddress     0x02  EP 2 OUT
              bmAttributes            2
                Transfer Type            Bulk
                Synch Type               None
                Usage Type               Data
              wMaxPacketSize     0x0200  1x 512 bytes
              bInterval               0
      Device Qualifier (for other device speed):
        bLength                10
        bDescriptorType         6
        bcdUSB               2.00
        bDeviceClass            2 Communications
        bDeviceSubClass         0
        bDeviceProtocol         0
        bMaxPacketSize0        64
        bNumConfigurations      1
      Device Status:     0x0000
        (Bus Powered)
    
    Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201002154219.4887-8-mailhol.vincent@wanadoo.fr
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3f12abd55cdadfb3699b99753a9357ad1c4c6c6
Author: Peng Fan <peng.fan@nxp.com>
Date:   Tue Sep 29 17:55:09 2020 +0800

    tty: serial: fsl_lpuart: fix lpuart32_poll_get_char
    
    commit 29788ab1d2bf26c130de8f44f9553ee78a27e8d5 upstream.
    
    The watermark is set to 1, so we need to input two chars to trigger RDRF
    using the original logic. With the new logic, we could always get the
    char when there is data in FIFO.
    
    Suggested-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20200929095509.21680-1-peng.fan@nxp.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35e3d52b2bc894da72c4c0863bfb7d4789ba6658
Author: Valentin Vidic <vvidic@valentin-vidic.from.hr>
Date:   Sun Oct 18 20:42:55 2020 +0200

    net: korina: cast KSEG0 address to pointer in kfree
    
    [ Upstream commit 3bd57b90554b4bb82dce638e0668ef9dc95d3e96 ]
    
    Fixes gcc warning:
    
    passing argument 1 of 'kfree' makes pointer from integer without a cast
    
    Fixes: 3af5f0f5c74e ("net: korina: fix kfree of rx/tx descriptor array")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Valentin Vidic <vvidic@valentin-vidic.from.hr>
    Link: https://lore.kernel.org/r/20201018184255.28989-1-vvidic@valentin-vidic.from.hr
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 796595022b7c0e6380911b02df84ffa600ea2d7a
Author: Zekun Shen <bruceshenzk@gmail.com>
Date:   Tue Jun 23 18:11:05 2020 -0400

    ath10k: check idx validity in __ath10k_htt_rx_ring_fill_n()
    
    [ Upstream commit bad60b8d1a7194df38fd7fe4b22f3f4dcf775099 ]
    
    The idx in __ath10k_htt_rx_ring_fill_n function lives in
    consistent dma region writable by the device. Malfunctional
    or malicious device could manipulate such idx to have a OOB
    write. Either by
        htt->rx_ring.netbufs_ring[idx] = skb;
    or by
        ath10k_htt_set_paddrs_ring(htt, paddr, idx);
    
    The idx can also be negative as it's signed, giving a large
    memory space to write to.
    
    It's possibly exploitable by corruptting a legit pointer with
    a skb pointer. And then fill skb with payload as rougue object.
    
    Part of the log here. Sometimes it appears as UAF when writing
    to a freed memory by chance.
    
     [   15.594376] BUG: unable to handle page fault for address: ffff887f5c1804f0
     [   15.595483] #PF: supervisor write access in kernel mode
     [   15.596250] #PF: error_code(0x0002) - not-present page
     [   15.597013] PGD 0 P4D 0
     [   15.597395] Oops: 0002 [#1] SMP KASAN PTI
     [   15.597967] CPU: 0 PID: 82 Comm: kworker/u2:2 Not tainted 5.6.0 #69
     [   15.598843] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),
     BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
     [   15.600438] Workqueue: ath10k_wq ath10k_core_register_work [ath10k_core]
     [   15.601389] RIP: 0010:__ath10k_htt_rx_ring_fill_n
     (linux/drivers/net/wireless/ath/ath10k/htt_rx.c:173) ath10k_core
    
    Signed-off-by: Zekun Shen <bruceshenzk@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200623221105.3486-1-bruceshenzk@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5a7b4a704e9ab00041f265cb6e958c141064bb2
Author: Can Guo <cang@codeaurora.org>
Date:   Sun Aug 9 05:15:48 2020 -0700

    scsi: ufs: ufs-qcom: Fix race conditions caused by ufs_qcom_testbus_config()
    
    [ Upstream commit 89dd87acd40a44de8ff3358138aedf8f73f4efc6 ]
    
    If ufs_qcom_dump_dbg_regs() calls ufs_qcom_testbus_config() from
    ufshcd_suspend/resume and/or clk gate/ungate context, pm_runtime_get_sync()
    and ufshcd_hold() will cause a race condition. Fix this by removing the
    unnecessary calls of pm_runtime_get_sync() and ufshcd_hold().
    
    Link: https://lore.kernel.org/r/1596975355-39813-3-git-send-email-cang@codeaurora.org
    Reviewed-by: Hongwu Su <hongwus@codeaurora.org>
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Asutosh Das <asutoshd@codeaurora.org>
    Signed-off-by: Can Guo <cang@codeaurora.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ba9ca19f853d2b16ec1d9f65c379a31a3ceb789
Author: Eli Billauer <eli.billauer@gmail.com>
Date:   Fri Jul 31 08:46:50 2020 +0300

    usb: core: Solve race condition in anchor cleanup functions
    
    [ Upstream commit fbc299437c06648afcc7891e6e2e6638dd48d4df ]
    
    usb_kill_anchored_urbs() is commonly used to cancel all URBs on an
    anchor just before releasing resources which the URBs rely on. By doing
    so, users of this function rely on that no completer callbacks will take
    place from any URB on the anchor after it returns.
    
    However if this function is called in parallel with __usb_hcd_giveback_urb
    processing a URB on the anchor, the latter may call the completer
    callback after usb_kill_anchored_urbs() returns. This can lead to a
    kernel panic due to use after release of memory in interrupt context.
    
    The race condition is that __usb_hcd_giveback_urb() first unanchors the URB
    and then makes the completer callback. Such URB is hence invisible to
    usb_kill_anchored_urbs(), allowing it to return before the completer has
    been called, since the anchor's urb_list is empty.
    
    Even worse, if the racing completer callback resubmits the URB, it may
    remain in the system long after usb_kill_anchored_urbs() returns.
    
    Hence list_empty(&anchor->urb_list), which is used in the existing
    while-loop, doesn't reliably ensure that all URBs of the anchor are gone.
    
    A similar problem exists with usb_poison_anchored_urbs() and
    usb_scuttle_anchored_urbs().
    
    This patch adds an external do-while loop, which ensures that all URBs
    are indeed handled before these three functions return. This change has
    no effect at all unless the race condition occurs, in which case the
    loop will busy-wait until the racing completer callback has finished.
    This is a rare condition, so the CPU waste of this spinning is
    negligible.
    
    The additional do-while loop relies on usb_anchor_check_wakeup(), which
    returns true iff the anchor list is empty, and there is no
    __usb_hcd_giveback_urb() in the system that is in the middle of the
    unanchor-before-complete phase. The @suspend_wakeups member of
    struct usb_anchor is used for this purpose, which was introduced to solve
    another problem which the same race condition causes, in commit
    6ec4147e7bdb ("usb-anchor: Delay usb_wait_anchor_empty_timeout wake up
    till completion is done").
    
    The surely_empty variable is necessary, because usb_anchor_check_wakeup()
    must be called with the lock held to prevent races. However the spinlock
    must be released and reacquired if the outer loop spins with an empty
    URB list while waiting for the unanchor-before-complete passage to finish:
    The completer callback may very well attempt to take the very same lock.
    
    To summarize, using usb_anchor_check_wakeup() means that the patched
    functions can return only when the anchor's list is empty, and there is
    no invisible URB being processed. Since the inner while loop finishes on
    the empty list condition, the new do-while loop will terminate as well,
    except for when the said race condition occurs.
    
    Signed-off-by: Eli Billauer <eli.billauer@gmail.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200731054650.30644-1-eli.billauer@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4479b4048b0212e5fbdac21e1b39b000177adcd
Author: Wang Yufen <wangyufen@huawei.com>
Date:   Mon Jul 20 17:36:05 2020 +0800

    brcm80211: fix possible memleak in brcmf_proto_msgbuf_attach
    
    [ Upstream commit 6c151410d5b57e6bb0d91a735ac511459539a7bf ]
    
    When brcmf_proto_msgbuf_attach fail and msgbuf->txflow_wq != NULL,
    we should destroy the workqueue.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Yufen <wangyufen@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1595237765-66238-1-git-send-email-wangyufen@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43e909e8309795956f0605ee676e2336b58fbcd2
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Aug 21 17:27:19 2020 +0900

    mwifiex: don't call del_timer_sync() on uninitialized timer
    
    [ Upstream commit 621a3a8b1c0ecf16e1e5667ea5756a76a082b738 ]
    
    syzbot is reporting that del_timer_sync() is called from
    mwifiex_usb_cleanup_tx_aggr() from mwifiex_unregister_dev() without
    checking timer_setup() from mwifiex_usb_tx_init() was called [1].
    
    Ganapathi Bhat proposed a possibly cleaner fix, but it seems that
    that fix was forgotten [2].
    
    "grep -FrB1 'del_timer' drivers/ | grep -FA1 '.function)'" says that
    currently there are 28 locations which call del_timer[_sync]() only if
    that timer's function field was initialized (because timer_setup() sets
    that timer's function field). Therefore, let's use same approach here.
    
    [1] https://syzkaller.appspot.com/bug?id=26525f643f454dd7be0078423e3cdb0d57744959
    [2] https://lkml.kernel.org/r/CA+ASDXMHt2gq9Hy+iP_BYkWXsSreWdp3_bAfMkNcuqJ3K+-jbQ@mail.gmail.com
    
    Reported-by: syzbot <syzbot+dc4127f950da51639216@syzkaller.appspotmail.com>
    Cc: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Cc: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Acked-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200821082720.7716-1-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65cb0e55417a8db172bd825a28f136f24f8767fa
Author: Jan Kara <jack@suse.cz>
Date:   Wed Mar 4 14:01:44 2020 +0100

    reiserfs: Fix memory leak in reiserfs_parse_options()
    
    [ Upstream commit e9d4709fcc26353df12070566970f080e651f0c9 ]
    
    When a usrjquota or grpjquota mount option is used multiple times, we
    will leak memory allocated for the file name. Make sure the last setting
    is used and all the previous ones are properly freed.
    
    Reported-by: syzbot+c9e294bbe0333a6b7640@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3439fceabac015732da72630e0933b6623f9e3fa
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Tue Aug 11 03:46:40 2020 -0400

    ipvs: Fix uninit-value in do_ip_vs_set_ctl()
    
    [ Upstream commit c5a8a8498eed1c164afc94f50a939c1a10abf8ad ]
    
    do_ip_vs_set_ctl() is referencing uninitialized stack value when `len` is
    zero. Fix it.
    
    Reported-by: syzbot+23b5f9e7caf61d9a3898@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=46ebfb92a8a812621a001ef04d90dfa459520fe2
    Suggested-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Reviewed-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 347a51ef6b113313d203c5ba87a05f2609d1fd02
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Fri Aug 21 12:19:40 2020 -0400

    tty: ipwireless: fix error handling
    
    [ Upstream commit db332356222d9429731ab9395c89cca403828460 ]
    
    ipwireless_send_packet() can only return 0 on success and -ENOMEM on
    error, the caller should check non zero for error condition
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Acked-by: David Sterba <dsterba@suse.com>
    Link: https://lore.kernel.org/r/20200821161942.36589-1-ztong0001@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0819292b3a7c9b2ef7242aae1aef49899b7ea8aa
Author: Nilesh Javali <njavali@marvell.com>
Date:   Tue Sep 8 02:56:52 2020 -0700

    scsi: qedi: Fix list_del corruption while removing active I/O
    
    [ Upstream commit 28b35d17f9f8573d4646dd8df08917a4076a6b63 ]
    
    While aborting the I/O, the firmware cleanup task timed out and driver
    deleted the I/O from active command list. Some time later the firmware
    sent the cleanup task response and driver again deleted the I/O from
    active command list causing firmware to send completion for non-existent
    I/O and list_del corruption of active command list.
    
    Add fix to check if I/O is present before deleting it from the active
    command list to ensure firmware sends valid I/O completion and protect
    against list_del corruption.
    
    Link: https://lore.kernel.org/r/20200908095657.26821-4-mrangankar@marvell.com
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b402604bab6e8a270b162d50f338c1167b362e7
Author: Nilesh Javali <njavali@marvell.com>
Date:   Tue Sep 8 02:56:53 2020 -0700

    scsi: qedi: Protect active command list to avoid list corruption
    
    [ Upstream commit c0650e28448d606c84f76c34333dba30f61de993 ]
    
    Protect active command list for non-I/O commands like login response,
    logout response, text response, and recovery cleanup of active list to
    avoid list corruption.
    
    Link: https://lore.kernel.org/r/20200908095657.26821-5-mrangankar@marvell.com
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5137f243a40c8ac0ba3cbf16575149fdfe81627d
Author: Doug Horn <doughorn@google.com>
Date:   Wed Sep 2 14:08:25 2020 -0700

    Fix use after free in get_capset_info callback.
    
    [ Upstream commit e219688fc5c3d0d9136f8d29d7e0498388f01440 ]
    
    If a response to virtio_gpu_cmd_get_capset_info takes longer than
    five seconds to return, the callback will access freed kernel memory
    in vg->capsets.
    
    Signed-off-by: Doug Horn <doughorn@google.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200902210847.2689-2-gurchetansingh@chromium.org
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e08063bc77c95cc0a427bacfd59be3fe34b2251b
Author: Chris Chiu <chiu@endlessm.com>
Date:   Sun Sep 6 12:04:24 2020 +0800

    rtl8xxxu: prevent potential memory leak
    
    [ Upstream commit 86279456a4d47782398d3cb8193f78f672e36cac ]
    
    Free the skb if usb_submit_urb fails on rx_urb. And free the urb
    no matter usb_submit_urb succeeds or not in rtl8xxxu_submit_int_urb.
    
    Signed-off-by: Chris Chiu <chiu@endlessm.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200906040424.22022-1-chiu@endlessm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f36a4a5f9c4ab7a7279fac6787062ebb13a3cd1
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Tue Sep 8 12:17:41 2020 +0000

    brcmsmac: fix memory leak in wlc_phy_attach_lcnphy
    
    [ Upstream commit f4443293d741d1776b86ed1dd8c4e4285d0775fc ]
    
    When wlc_phy_txpwr_srom_read_lcnphy fails in wlc_phy_attach_lcnphy,
    the allocated pi->u.pi_lcnphy is leaked, since struct brcms_phy will be
    freed in the caller function.
    
    Fix this by calling wlc_phy_detach_lcnphy in the error handler of
    wlc_phy_txpwr_srom_read_lcnphy before returning.
    
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200908121743.23108-1-keitasuzuki.park@sslab.ics.keio.ac.jp
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d49d4e198f2a442e4888fa764ac706dcc4ce39a6
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Mon Sep 7 16:39:49 2020 +0800

    scsi: ibmvfc: Fix error return in ibmvfc_probe()
    
    [ Upstream commit 5e48a084f4e824e1b624d3fd7ddcf53d2ba69e53 ]
    
    Fix to return error code PTR_ERR() from the error handling case instead of
    0.
    
    Link: https://lore.kernel.org/r/20200907083949.154251-1-jingxiangfeng@huawei.com
    Acked-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 79ff0c80b4464eba8d1d46604ea1645a93ed3d0a
Author: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
Date:   Fri Sep 11 15:33:18 2020 -0700

    Bluetooth: Only mark socket zapped after unlocking
    
    [ Upstream commit 20ae4089d0afeb24e9ceb026b996bfa55c983cc2 ]
    
    Since l2cap_sock_teardown_cb doesn't acquire the channel lock before
    setting the socket as zapped, it could potentially race with
    l2cap_sock_release which frees the socket. Thus, wait until the cleanup
    is complete before marking the socket as zapped.
    
    This race was reproduced on a JBL GO speaker after the remote device
    rejected L2CAP connection due to resource unavailability.
    
    Here is a dmesg log with debug logs from a repro of this bug:
    [ 3465.424086] Bluetooth: hci_core.c:hci_acldata_packet() hci0 len 16 handle 0x0003 flags 0x0002
    [ 3465.424090] Bluetooth: hci_conn.c:hci_conn_enter_active_mode() hcon 00000000cfedd07d mode 0
    [ 3465.424094] Bluetooth: l2cap_core.c:l2cap_recv_acldata() conn 000000007eae8952 len 16 flags 0x2
    [ 3465.424098] Bluetooth: l2cap_core.c:l2cap_recv_frame() len 12, cid 0x0001
    [ 3465.424102] Bluetooth: l2cap_core.c:l2cap_raw_recv() conn 000000007eae8952
    [ 3465.424175] Bluetooth: l2cap_core.c:l2cap_sig_channel() code 0x03 len 8 id 0x0c
    [ 3465.424180] Bluetooth: l2cap_core.c:l2cap_connect_create_rsp() dcid 0x0045 scid 0x0000 result 0x02 status 0x00
    [ 3465.424189] Bluetooth: l2cap_core.c:l2cap_chan_put() chan 000000006acf9bff orig refcnt 4
    [ 3465.424196] Bluetooth: l2cap_core.c:l2cap_chan_del() chan 000000006acf9bff, conn 000000007eae8952, err 111, state BT_CONNECT
    [ 3465.424203] Bluetooth: l2cap_sock.c:l2cap_sock_teardown_cb() chan 000000006acf9bff state BT_CONNECT
    [ 3465.424221] Bluetooth: l2cap_core.c:l2cap_chan_put() chan 000000006acf9bff orig refcnt 3
    [ 3465.424226] Bluetooth: hci_core.h:hci_conn_drop() hcon 00000000cfedd07d orig refcnt 6
    [ 3465.424234] BUG: spinlock bad magic on CPU#2, kworker/u17:0/159
    [ 3465.425626] Bluetooth: hci_sock.c:hci_sock_sendmsg() sock 000000002bb0cb64 sk 00000000a7964053
    [ 3465.430330]  lock: 0xffffff804410aac0, .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
    [ 3465.430332] Causing a watchdog bite!
    
    Signed-off-by: Abhishek Pandit-Subedi <abhishekpandit@chromium.org>
    Reported-by: Balakrishna Godavarthi <bgodavar@codeaurora.org>
    Reviewed-by: Manish Mandlik <mmandlik@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbb612bcb67c17cef33785723fc51f177164e4bc
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Fri Sep 11 09:25:11 2020 +1200

    usb: ohci: Default to per-port over-current protection
    
    [ Upstream commit b77d2a0a223bc139ee8904991b2922d215d02636 ]
    
    Some integrated OHCI controller hubs do not expose all ports of the hub
    to pins on the SoC. In some cases the unconnected ports generate
    spurious over-current events. For example the Broadcom 56060/Ranger 2 SoC
    contains a nominally 3 port hub but only the first port is wired.
    
    Default behaviour for ohci-platform driver is to use global over-current
    protection mode (AKA "ganged"). This leads to the spurious over-current
    events affecting all ports in the hub.
    
    We now alter the default to use per-port over-current protection.
    
    This patch results in the following configuration changes depending
    on quirks:
    - For quirk OHCI_QUIRK_SUPERIO no changes. These systems remain set up
      for ganged power switching and no over-current protection.
    - For quirk OHCI_QUIRK_AMD756 or OHCI_QUIRK_HUB_POWER power switching
      remains at none, while over-current protection is now guaranteed to be
      set to per-port rather than the previous behaviour where it was either
      none or global over-current protection depending on the value at
      function entry.
    
    Suggested-by: Alan Stern <stern@rowland.harvard.edu>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Link: https://lore.kernel.org/r/20200910212512.16670-1-hamish.martin@alliedtelesis.co.nz
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e3260a59e10b538e164184804645b8984a68864
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Wed Sep 9 14:21:06 2020 -0700

    xfs: make sure the rt allocator doesn't run off the end
    
    [ Upstream commit 2a6ca4baed620303d414934aa1b7b0a8e7bab05f ]
    
    There's an overflow bug in the realtime allocator.  If the rt volume is
    large enough to handle a single allocation request that is larger than
    the maximum bmap extent length and the rt bitmap ends exactly on a
    bitmap block boundary, it's possible that the near allocator will try to
    check the freeness of a range that extends past the end of the bitmap.
    This fails with a corruption error and shuts down the fs.
    
    Therefore, constrain maxlen so that the range scan cannot run off the
    end of the rt bitmap.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69cb3435a24753035c59e0fac6609b5b82c0778d
Author: Eric Biggers <ebiggers@google.com>
Date:   Sun Jun 28 00:00:57 2020 -0700

    reiserfs: only call unlock_new_inode() if I_NEW
    
    [ Upstream commit 8859bf2b1278d064a139e3031451524a49a56bd0 ]
    
    unlock_new_inode() is only meant to be called after a new inode has
    already been inserted into the hash table.  But reiserfs_new_inode() can
    call it even before it has inserted the inode, triggering the WARNING in
    unlock_new_inode().  Fix this by only calling unlock_new_inode() if the
    inode has the I_NEW flag set, indicating that it's in the table.
    
    This addresses the syzbot report "WARNING in unlock_new_inode"
    (https://syzkaller.appspot.com/bug?extid=187510916eb6a14598f7).
    
    Link: https://lore.kernel.org/r/20200628070057.820213-1-ebiggers@kernel.org
    Reported-by: syzbot+187510916eb6a14598f7@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d929b7b9d1dbbaa0fd67502ed23165a70b66d16
Author: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
Date:   Wed Sep 9 07:18:51 2020 +0000

    misc: rtsx: Fix memory leak in rtsx_pci_probe
    
    [ Upstream commit bc28369c6189009b66d9619dd9f09bd8c684bb98 ]
    
    When mfd_add_devices() fail, pcr->slots should also be freed. However,
    the current implementation does not free the member, leading to a memory
    leak.
    
    Fix this by adding a new goto label that frees pcr->slots.
    
    Signed-off-by: Keita Suzuki <keitasuzuki.park@sslab.ics.keio.ac.jp>
    Link: https://lore.kernel.org/r/20200909071853.4053-1-keitasuzuki.park@sslab.ics.keio.ac.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d44112be64784c93797fc15dd096e60c2e956acf
Author: Brooke Basile <brookebasile@gmail.com>
Date:   Fri Sep 11 03:14:27 2020 -0400

    ath9k: hif_usb: fix race condition between usb_get_urb() and usb_kill_anchored_urbs()
    
    [ Upstream commit 03fb92a432ea5abe5909bca1455b7e44a9380480 ]
    
    Calls to usb_kill_anchored_urbs() after usb_kill_urb() on multiprocessor
    systems create a race condition in which usb_kill_anchored_urbs() deallocates
    the URB before the completer callback is called in usb_kill_urb(), resulting
    in a use-after-free.
    To fix this, add proper lock protection to usb_kill_urb() calls that can
    possibly run concurrently with usb_kill_anchored_urbs().
    
    Reported-by: syzbot+89bd486af9427a9fc605@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=cabffad18eb74197f84871802fd2c5117b61febf
    Signed-off-by: Brooke Basile <brookebasile@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200911071427.32354-1-brookebasile@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce989efbe81b73bbb2db3703920131e4dc1317a8
Author: Joakim Zhang <qiangqing.zhang@nxp.com>
Date:   Tue Sep 22 16:44:19 2020 +0200

    can: flexcan: flexcan_chip_stop(): add error handling and propagate error value
    
    [ Upstream commit 9ad02c7f4f279504bdd38ab706fdc97d5f2b2a9c ]
    
    This patch implements error handling and propagates the error value of
    flexcan_chip_stop(). This function will be called from flexcan_suspend()
    in an upcoming patch in some SoCs which support LPSR mode.
    
    Add a new function flexcan_chip_stop_disable_on_error() that tries to
    disable the chip even in case of errors.
    
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    [mkl: introduce flexcan_chip_stop_disable_on_error() and use it in flexcan_close()]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Link: https://lore.kernel.org/r/20200922144429.2613631-11-mkl@pengutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef063db7186199ff2ded3837ae8ba523a6957a45
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Sep 21 15:59:49 2020 +0200

    USB: cdc-acm: handle broken union descriptors
    
    [ Upstream commit 960c7339de27c6d6fec13b54880501c3576bb08d ]
    
    Handle broken union functional descriptors where the master-interface
    doesn't exist or where its class is of neither Communication or Data
    type (as required by the specification) by falling back to
    "combined-interface" probing.
    
    Note that this still allows for handling union descriptors with switched
    interfaces.
    
    This specifically makes the Whistler radio scanners TRX series devices
    work with the driver without adding further quirks to the device-id
    table.
    
    Reported-by: Daniel Caujolle-Bert <f1rmb.daniel@gmail.com>
    Tested-by: Daniel Caujolle-Bert <f1rmb.daniel@gmail.com>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Link: https://lore.kernel.org/r/20200921135951.24045-3-johan@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52265382ab1e46ac029df99c8ede5bf9e04e12f7
Author: Jan Kara <jack@suse.cz>
Date:   Fri Sep 25 12:14:03 2020 +0200

    udf: Avoid accessing uninitialized data on failed inode read
    
    [ Upstream commit 044e2e26f214e5ab26af85faffd8d1e4ec066931 ]
    
    When we fail to read inode, some data accessed in udf_evict_inode() may
    be uninitialized. Move the accesses to !is_bad_inode() branch.
    
    Reported-by: syzbot+91f02b28f9bb5f5f1341@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 940ec72a591f65c7f11aca64b967358a1668b4f6
Author: Jan Kara <jack@suse.cz>
Date:   Fri Sep 25 14:53:08 2020 +0200

    udf: Limit sparing table size
    
    [ Upstream commit 44ac6b829c4e173fdf6df18e6dd86aecf9a3dc99 ]
    
    Although UDF standard allows it, we don't support sparing table larger
    than a single block. Check it during mount so that we don't try to
    access memory beyond end of buffer.
    
    Reported-by: syzbot+9991561e714f597095da@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9db9cffd27e74f6d9bcd1f0db0a12c2c7de102b8
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Fri Jun 5 11:05:33 2020 +0800

    usb: gadget: function: printer: fix use-after-free in __lock_acquire
    
    [ Upstream commit e8d5f92b8d30bb4ade76494490c3c065e12411b1 ]
    
    Fix this by increase object reference count.
    
    BUG: KASAN: use-after-free in __lock_acquire+0x3fd4/0x4180
    kernel/locking/lockdep.c:3831
    Read of size 8 at addr ffff8880683b0018 by task syz-executor.0/3377
    
    CPU: 1 PID: 3377 Comm: syz-executor.0 Not tainted 5.6.11 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xce/0x128 lib/dump_stack.c:118
     print_address_description.constprop.4+0x21/0x3c0 mm/kasan/report.c:374
     __kasan_report+0x131/0x1b0 mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:641
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:135
     __lock_acquire+0x3fd4/0x4180 kernel/locking/lockdep.c:3831
     lock_acquire+0x127/0x350 kernel/locking/lockdep.c:4488
     __raw_spin_lock_irqsave include/linux/spinlock_api_smp.h:110 [inline]
     _raw_spin_lock_irqsave+0x35/0x50 kernel/locking/spinlock.c:159
     printer_ioctl+0x4a/0x110 drivers/usb/gadget/function/f_printer.c:723
     vfs_ioctl fs/ioctl.c:47 [inline]
     ksys_ioctl+0xfb/0x130 fs/ioctl.c:763
     __do_sys_ioctl fs/ioctl.c:772 [inline]
     __se_sys_ioctl fs/ioctl.c:770 [inline]
     __x64_sys_ioctl+0x73/0xb0 fs/ioctl.c:770
     do_syscall_64+0x9e/0x510 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4531a9
    Code: ed 60 fc ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48
    89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d
    01 f0 ff ff 0f 83 bb 60 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fd14ad72c78 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 000000000073bfa8 RCX: 00000000004531a9
    RDX: fffffffffffffff9 RSI: 000000000000009e RDI: 0000000000000003
    RBP: 0000000000000003 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000004bbd61
    R13: 00000000004d0a98 R14: 00007fd14ad736d4 R15: 00000000ffffffff
    
    Allocated by task 2393:
     save_stack+0x21/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     __kasan_kmalloc.constprop.3+0xa7/0xd0 mm/kasan/common.c:515
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:529
     kmem_cache_alloc_trace+0xfa/0x2d0 mm/slub.c:2813
     kmalloc include/linux/slab.h:555 [inline]
     kzalloc include/linux/slab.h:669 [inline]
     gprinter_alloc+0xa1/0x870 drivers/usb/gadget/function/f_printer.c:1416
     usb_get_function+0x58/0xc0 drivers/usb/gadget/functions.c:61
     config_usb_cfg_link+0x1ed/0x3e0 drivers/usb/gadget/configfs.c:444
     configfs_symlink+0x527/0x11d0 fs/configfs/symlink.c:202
     vfs_symlink+0x33d/0x5b0 fs/namei.c:4201
     do_symlinkat+0x11b/0x1d0 fs/namei.c:4228
     __do_sys_symlinkat fs/namei.c:4242 [inline]
     __se_sys_symlinkat fs/namei.c:4239 [inline]
     __x64_sys_symlinkat+0x73/0xb0 fs/namei.c:4239
     do_syscall_64+0x9e/0x510 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Freed by task 3368:
     save_stack+0x21/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     kasan_set_free_info mm/kasan/common.c:337 [inline]
     __kasan_slab_free+0x135/0x190 mm/kasan/common.c:476
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:485
     slab_free_hook mm/slub.c:1444 [inline]
     slab_free_freelist_hook mm/slub.c:1477 [inline]
     slab_free mm/slub.c:3034 [inline]
     kfree+0xf7/0x410 mm/slub.c:3995
     gprinter_free+0x49/0xd0 drivers/usb/gadget/function/f_printer.c:1353
     usb_put_function+0x38/0x50 drivers/usb/gadget/functions.c:87
     config_usb_cfg_unlink+0x2db/0x3b0 drivers/usb/gadget/configfs.c:485
     configfs_unlink+0x3b9/0x7f0 fs/configfs/symlink.c:250
     vfs_unlink+0x287/0x570 fs/namei.c:4073
     do_unlinkat+0x4f9/0x620 fs/namei.c:4137
     __do_sys_unlink fs/namei.c:4184 [inline]
     __se_sys_unlink fs/namei.c:4182 [inline]
     __x64_sys_unlink+0x42/0x50 fs/namei.c:4182
     do_syscall_64+0x9e/0x510 arch/x86/entry/common.c:294
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    The buggy address belongs to the object at ffff8880683b0000
     which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 24 bytes inside of
     1024-byte region [ffff8880683b0000, ffff8880683b0400)
    The buggy address belongs to the page:
    page:ffffea0001a0ec00 refcount:1 mapcount:0 mapping:ffff88806c00e300
    index:0xffff8880683b1800 compound_mapcount: 0
    flags: 0x100000000010200(slab|head)
    raw: 0100000000010200 0000000000000000 0000000600000001 ffff88806c00e300
    raw: ffff8880683b1800 000000008010000a 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Reported-by: Kyungtae Kim <kt0755@gmail.com>
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 165b1008438e1bdf46892ec5d2abc69d577666be
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Tue Sep 29 17:11:05 2020 +0800

    misc: vop: add round_up(x,4) for vring_size to avoid kernel panic
    
    [ Upstream commit cc1a2679865a94b83804822996eed010a50a7c1d ]
    
    Since struct _mic_vring_info and vring are allocated together and follow
    vring, if the vring_size() is not four bytes aligned, which will cause
    the start address of struct _mic_vring_info is not four byte aligned.
    For example, when vring entries is 128, the vring_size() will be 5126
    bytes. The _mic_vring_info struct layout in ddr looks like:
    0x90002400:  00000000 00390000 EE010000 0000C0FF
    Here 0x39 is the avail_idx member, and 0xC0FFEE01 is the magic member.
    
    When EP use ioread32(magic) to reads the magic in RC's share memory, it
    will cause kernel panic on ARM64 platform due to the cross-byte io read.
    Here read magic in user space use le32toh(vr0->info->magic) will meet
    the same issue.
    So add round_up(x,4) for vring_size, then the struct _mic_vring_info
    will store in this way:
    0x90002400:  00000000 00000000 00000039 C0FFEE01
    Which will avoid kernel panic when read magic in struct _mic_vring_info.
    
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Link: https://lore.kernel.org/r/20200929091106.24624-4-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a771fb38a0bd1176705a8a4f6d82b9e64fb6c891
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Tue Sep 29 17:11:06 2020 +0800

    mic: vop: copy data to kernel space then write to io memory
    
    [ Upstream commit 675f0ad4046946e80412896436164d172cd92238 ]
    
    Read and write io memory should address align on ARCH ARM. Change to use
    memcpy_toio to avoid kernel panic caused by the address un-align issue.
    
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Signed-off-by: Joakim Zhang <qiangqing.zhang@nxp.com>
    Link: https://lore.kernel.org/r/20200929091106.24624-5-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e4d5e63b8812fd140468a03840e34e890c60b0b
Author: Roman Bolshakov <r.bolshakov@yadro.com>
Date:   Tue Sep 29 15:59:57 2020 +0300

    scsi: target: core: Add CONTROL field for trace events
    
    [ Upstream commit 7010645ba7256992818b518163f46bd4cdf8002a ]
    
    trace-cmd report doesn't show events from target subsystem because
    scsi_command_size() leaks through event format string:
    
      [target:target_sequencer_start] function scsi_command_size not defined
      [target:target_cmd_complete] function scsi_command_size not defined
    
    Addition of scsi_command_size() to plugin_scsi.c in trace-cmd doesn't
    help because an expression is used inside TP_printk(). trace-cmd event
    parser doesn't understand minus sign inside [ ]:
    
      Error: expected ']' but read '-'
    
    Rather than duplicating kernel code in plugin_scsi.c, provide a dedicated
    field for CONTROL byte.
    
    Link: https://lore.kernel.org/r/20200929125957.83069-1-r.bolshakov@yadro.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Roman Bolshakov <r.bolshakov@yadro.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 412695362bcf95c18773c1f91e2ae43228cb0d7a
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Thu Sep 10 20:38:48 2020 +0800

    scsi: mvumi: Fix error return in mvumi_io_attach()
    
    [ Upstream commit 055f15ab2cb4a5cbc4c0a775ef3d0066e0fa9b34 ]
    
    Return PTR_ERR() from the error handling case instead of 0.
    
    Link: https://lore.kernel.org/r/20200910123848.93649-1-jingxiangfeng@huawei.com
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 326754eac7f06ce9ccdf8c39e7ceeeac04bf66cf
Author: Christoph Hellwig <hch@lst.de>
Date:   Fri Sep 25 18:14:47 2020 +0200

    PM: hibernate: remove the bogus call to get_gendisk() in software_resume()
    
    [ Upstream commit 428805c0c5e76ef643b1fbc893edfb636b3d8aef ]
    
    get_gendisk grabs a reference on the disk and file operation, so this
    code will leak both of them while having absolutely no use for the
    gendisk itself.
    
    This effectively reverts commit 2df83fa4bce421f ("PM / Hibernate: Use
    get_gendisk to verify partition if resume_file is integer format")
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51287de727d80aa5edd0d6de9980e908d99d8037
Author: Thomas Pedersen <thomas@adapt-ip.com>
Date:   Mon Oct 5 09:45:21 2020 -0700

    mac80211: handle lack of sband->bitrates in rates
    
    [ Upstream commit 8b783d104e7f40684333d2ec155fac39219beb2f ]
    
    Even though a driver or mac80211 shouldn't produce a
    legacy bitrate if sband->bitrates doesn't exist, don't
    crash if that is the case either.
    
    This fixes a kernel panic if station dump is run before
    last_rate can be updated with a data frame when
    sband->bitrates is missing (eg. in S1G bands).
    
    Signed-off-by: Thomas Pedersen <thomas@adapt-ip.com>
    Link: https://lore.kernel.org/r/20201005164522.18069-1-thomas@adapt-ip.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e2683edc847ad27514994cccb9ce74878dd150d
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Tue Oct 13 16:48:17 2020 -0700

    ntfs: add check for mft record size in superblock
    
    [ Upstream commit 4f8c94022f0bc3babd0a124c0a7dcdd7547bd94e ]
    
    Number of bytes allocated for mft record should be equal to the mft record
    size stored in ntfs superblock as reported by syzbot, userspace might
    trigger out-of-bounds read by dereferencing ctx->attr in ntfs_attr_find()
    
    Reported-by: syzbot+aed06913f36eff9b544e@syzkaller.appspotmail.com
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: syzbot+aed06913f36eff9b544e@syzkaller.appspotmail.com
    Acked-by: Anton Altaparmakov <anton@tuxera.com>
    Link: https://syzkaller.appspot.com/bug?extid=aed06913f36eff9b544e
    Link: https://lkml.kernel.org/r/20200824022804.226242-1-rkovhaev@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a574a59e7db03d461dc58ca3c5a62804ff25791
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Jun 28 07:55:23 2020 +0200

    media: venus: core: Fix runtime PM imbalance in venus_probe
    
    [ Upstream commit bbe516e976fce538db96bd2b7287df942faa14a3 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced. For other error
    paths after this call, things are the same.
    
    Fix this by adding pm_runtime_put_noidle() after 'err_runtime_disable'
    label. But in this case, the error path after pm_runtime_put_sync()
    will decrease PM usage counter twice. Thus add an extra
    pm_runtime_get_noresume() in this path to balance PM counter.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2496baa0f363ec3b4a0fc47103fc44102818d0f
Author: Alexander Aring <aahringo@redhat.com>
Date:   Thu Aug 27 15:02:51 2020 -0400

    fs: dlm: fix configfs memory leak
    
    [ Upstream commit 3d2825c8c6105b0f36f3ff72760799fa2e71420e ]
    
    This patch fixes the following memory detected by kmemleak and umount
    gfs2 filesystem which removed the last lockspace:
    
    unreferenced object 0xffff9264f482f600 (size 192):
      comm "dlm_controld", pid 325, jiffies 4294690276 (age 48.136s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 6e 6f 64 65 73 00 00 00  ........nodes...
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<00000000060481d7>] make_space+0x41/0x130
        [<000000008d905d46>] configfs_mkdir+0x1a2/0x5f0
        [<00000000729502cf>] vfs_mkdir+0x155/0x210
        [<000000000369bcf1>] do_mkdirat+0x6d/0x110
        [<00000000cc478a33>] do_syscall_64+0x33/0x40
        [<00000000ce9ccf01>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The patch just remembers the "nodes" entry pointer in space as I think
    it's created as subdirectory when parent "spaces" is created. In
    function drop_space() we will lost the pointer reference to nds because
    configfs_remove_default_groups(). However as this subdirectory is always
    available when "spaces" exists it will just be freed when "spaces" will be
    freed.
    
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df9981372e538dc81d8fb92dbd85ff2e4779e7f7
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Wed Sep 2 08:37:12 2020 +0200

    media: saa7134: avoid a shift overflow
    
    [ Upstream commit 15a36aae1ec1c1f17149b6113b92631791830740 ]
    
    As reported by smatch:
            drivers/media/pci/saa7134//saa7134-tvaudio.c:686 saa_dsp_writel() warn: should 'reg << 2' be a 64 bit type?
    
    On a 64-bits Kernel, the shift might be bigger than 32 bits.
    
    In real, this should never happen, but let's shut up the warning.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d5f8db16fb991ddf124c5b42328311c6e3c8fce0
Author: Pali Rohár <pali@kernel.org>
Date:   Mon Jul 27 15:38:34 2020 +0200

    mmc: sdio: Check for CISTPL_VERS_1 buffer size
    
    [ Upstream commit 8ebe2607965d3e2dc02029e8c7dd35fbe508ffd0 ]
    
    Before parsing CISTPL_VERS_1 structure check that its size is at least two
    bytes to prevent buffer overflow.
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Link: https://lore.kernel.org/r/20200727133837.19086-2-pali@kernel.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35f29b70725288ace0f746b09edd255da21a595f
Author: Adam Goode <agoode@google.com>
Date:   Sun Aug 23 03:21:33 2020 +0200

    media: uvcvideo: Ensure all probed info is returned to v4l2
    
    [ Upstream commit 8a652a17e3c005dcdae31b6c8fdf14382a29cbbe ]
    
    bFrameIndex and bFormatIndex can be negotiated by the camera during
    probing, resulting in the camera choosing a different format than
    expected. v4l2 can already accommodate such changes, but the code was
    not updating the proper fields.
    
    Without such a change, v4l2 would potentially interpret the payload
    incorrectly, causing corrupted output. This was happening on the
    Elgato HD60 S+, which currently always renegotiates to format 1.
    
    As an aside, the Elgato firmware is buggy and should not be renegotating,
    but it is still a valid thing for the camera to do. Both macOS and Windows
    will properly probe and read uncorrupted images from this camera.
    
    With this change, both qv4l2 and chromium can now read uncorrupted video
    from the Elgato HD60 S+.
    
    [Add blank lines, remove periods at the of messages]
    
    Signed-off-by: Adam Goode <agoode@google.com>
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddd94c938bae7d38bbdf05f7945779545899bba2
Author: Xiaolong Huang <butterflyhuangxx@gmail.com>
Date:   Fri Apr 17 11:52:30 2020 +0200

    media: media/pci: prevent memory leak in bttv_probe
    
    [ Upstream commit 7b817585b730665126b45df5508dd69526448bc8 ]
    
    In bttv_probe if some functions such as pci_enable_device,
    pci_set_dma_mask and request_mem_region fails the allocated
     memory for btv should be released.
    
    Signed-off-by: Xiaolong Huang <butterflyhuangxx@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fa3e7250f5d58ddd3141bcfa6c162f6f5fa1cdc
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:00:21 2020 +0200

    media: bdisp: Fix runtime PM imbalance on error
    
    [ Upstream commit dbd2f2dc025f9be8ae063e4f270099677238f620 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabien Dessenne <fabien.dessenne@st.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4be4dde752658542ad9c18e9dfab8e1a20ce8ac9
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 12:05:02 2020 +0200

    media: platform: sti: hva: Fix runtime PM imbalance on error
    
    [ Upstream commit d912a1d9e9afe69c6066c1ceb6bfc09063074075 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 816b9000b57f393f3221eb180cc58f0f5feccd01
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu May 21 15:29:33 2020 +0200

    media: platform: s3c-camif: Fix runtime PM imbalance on error
    
    [ Upstream commit dafa3605fe60d5a61239d670919b2a36e712481e ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Also, call pm_runtime_disable() when pm_runtime_get_sync() returns
    an error code.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Sylwester Nawrocki <snawrocki@kernel.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64d153958ba82c85090c0287b35a9ab2a3792298
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Jun 8 07:29:19 2020 +0200

    media: vsp1: Fix runtime PM imbalance on error
    
    [ Upstream commit 98fae901c8883640202802174a4bd70a1b9118bd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Kieran Bingham <kieran.bingham+renesas@ideasonboard.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit deae3f1a8eabcab144c9bba9eda2adf0df9fddfe
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:01:11 2020 +0200

    media: exynos4-is: Fix a reference count leak
    
    [ Upstream commit 64157b2cb1940449e7df2670e85781c690266588 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89b46c1acef1587494f3332215dfe4b4f6c4b3d9
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:10:58 2020 +0200

    media: exynos4-is: Fix a reference count leak due to pm_runtime_get_sync
    
    [ Upstream commit c47f7c779ef0458a58583f00c9ed71b7f5a4d0a2 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 132db743701a5657abc9c17ee954a05b917ca54d
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:18:29 2020 +0200

    media: exynos4-is: Fix several reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 7ef64ceea0008c17e94a8a2c60c5d6d46f481996 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91c5019244181adae41ab2188578715d8e9fdc83
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 05:31:06 2020 +0200

    media: sti: Fix reference count leaks
    
    [ Upstream commit 6f4432bae9f2d12fc1815b5e26cc07e69bcad0df ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f1862f348a640eadde24f23d4299e5b4100ea8b
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Jun 14 05:58:41 2020 +0200

    media: st-delta: Fix reference count leak in delta_run_work
    
    [ Upstream commit 57cc666d36adc7b45e37ba4cd7bc4e44ec4c43d7 ]
    
    delta_run_work() calls delta_get_sync() that increments
    the reference counter. In case of failure, decrement the reference
    count by calling delta_put_autosuspend().
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4b0c96b1606c8d2f13bf8fb6eecf6e04597ae78
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Sep 16 15:50:51 2020 +0200

    media: ati_remote: sanity check for both endpoints
    
    [ Upstream commit a8be80053ea74bd9c3f9a3810e93b802236d6498 ]
    
    If you do sanity checks, you should do them for both endpoints.
    Hence introduce checking for endpoint type for the output
    endpoint, too.
    
    Reported-by: syzbot+998261c2ae5932458f6c@syzkaller.appspotmail.com
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2fbb4b5477d869fbd6a7685522d8b2db8f26d5dc
Author: Pavel Machek <pavel@ucw.cz>
Date:   Sun Sep 20 11:01:37 2020 +0200

    media: firewire: fix memory leak
    
    [ Upstream commit b28e32798c78a346788d412f1958f36bb760ec03 ]
    
    Fix memory leak in node_probe.
    
    Signed-off-by: Pavel Machek (CIP) <pavel@denx.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51173eb0492c137fb2c3b20668c0914a1d496720
Author: Pavel Machek <pavel@denx.de>
Date:   Mon Sep 21 13:34:35 2020 +0200

    crypto: ccp - fix error handling
    
    [ Upstream commit e356c49c6cf0db3f00e1558749170bd56e47652d ]
    
    Fix resource leak in error handling.
    
    Signed-off-by: Pavel Machek (CIP) <pavel@denx.de>
    Acked-by: John Allen <john.allen@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b32f6c5affa52da2ed6b7ebd0653e265b4cf9d6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Oct 14 16:41:58 2020 +0200

    i2c: core: Restore acpi_walk_dep_device_list() getting called after registering the ACPI i2c devs
    
    [ Upstream commit 8058d69905058ec8f467a120b5ec5bb831ea67f3 ]
    
    Commit 21653a4181ff ("i2c: core: Call i2c_acpi_install_space_handler()
    before i2c_acpi_register_devices()")'s intention was to only move the
    acpi_install_address_space_handler() call to the point before where
    the ACPI declared i2c-children of the adapter where instantiated by
    i2c_acpi_register_devices().
    
    But i2c_acpi_install_space_handler() had a call to
    acpi_walk_dep_device_list() hidden (that is I missed it) at the end
    of it, so as an unwanted side-effect now acpi_walk_dep_device_list()
    was also being called before i2c_acpi_register_devices().
    
    Move the acpi_walk_dep_device_list() call to the end of
    i2c_acpi_register_devices(), so that it is once again called *after*
    the i2c_client-s hanging of the adapter have been created.
    
    This fixes the Microsoft Surface Go 2 hanging at boot.
    
    Fixes: 21653a4181ff ("i2c: core: Call i2c_acpi_install_space_handler() before i2c_acpi_register_devices()")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=209627
    Reported-by: Rainer Finke <rainer@finke.cc>
    Reported-by: Kieran Bingham <kieran.bingham@ideasonboard.com>
    Suggested-by: Maximilian Luz <luzmaximilian@gmail.com>
    Tested-by: Kieran Bingham <kieran.bingham@ideasonboard.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8844fd17777a8a06b3617c01f4af15e00d2bb4e9
Author: Al Grant <al.grant@foss.arm.com>
Date:   Mon Sep 21 21:46:37 2020 +0100

    perf: correct SNOOPX field offset
    
    [ Upstream commit f3d301c1f2f5676465cdf3259737ea19cc82731f ]
    
    perf_event.h has macros that define the field offsets in the
    data_src bitmask in perf records. The SNOOPX and REMOTE offsets
    were both 37. These are distinct fields, and the bitfield layout
    in perf_mem_data_src confirms that SNOOPX should be at offset 38.
    
    Fixes: 52839e653b5629bd ("perf tools: Add support for printing new mem_info encodings")
    Signed-off-by: Al Grant <al.grant@foss.arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Link: https://lkml.kernel.org/r/4ac9f5cc-4388-b34a-9999-418a4099415d@foss.arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8c31ddcf14f4b908ac7cecb0613f729e657df92
Author: Kaige Li <likaige@loongson.cn>
Date:   Tue Aug 11 09:59:57 2020 +0800

    NTB: hw: amd: fix an issue about leak system resources
    
    [ Upstream commit 44a0a3c17919db1498cebb02ecf3cf4abc1ade7b ]
    
    The related system resources were not released when pci_set_dma_mask(),
    pci_set_consistent_dma_mask(), or pci_iomap() return error in the
    amd_ntb_init_pci() function. Add pci_release_regions() to fix it.
    
    Fixes: a1b3695820aa ("NTB: Add support for AMD PCI-Express Non-Transparent Bridge")
    Signed-off-by: Kaige Li <likaige@loongson.cn>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f0d1bc0b039bb7333d92aef87838a7b0f7bf078
Author: zhenwei pi <pizhenwei@bytedance.com>
Date:   Thu Oct 15 09:51:40 2020 +0800

    nvmet: fix uninitialized work for zero kato
    
    [ Upstream commit 85bd23f3dc09a2ae9e56885420e52c54bf983713 ]
    
    When connecting a controller with a zero kato value using the following
    command line
    
       nvme connect -t tcp -n NQN -a ADDR -s PORT --keep-alive-tmo=0
    
    the warning below can be reproduced:
    
    WARNING: CPU: 1 PID: 241 at kernel/workqueue.c:1627 __queue_delayed_work+0x6d/0x90
    with trace:
      mod_delayed_work_on+0x59/0x90
      nvmet_update_cc+0xee/0x100 [nvmet]
      nvmet_execute_prop_set+0x72/0x80 [nvmet]
      nvmet_tcp_try_recv_pdu+0x2f7/0x770 [nvmet_tcp]
      nvmet_tcp_io_work+0x63f/0xb2d [nvmet_tcp]
      ...
    
    This is caused by queuing up an uninitialized work.  Althrough the
    keep-alive timer is disabled during allocating the controller (fixed in
    0d3b6a8d213a), ka_work still has a chance to run (called by
    nvmet_start_ctrl).
    
    Fixes: 0d3b6a8d213a ("nvmet: Disable keep-alive timer when kato is cleared to 0h")
    Signed-off-by: zhenwei pi <pizhenwei@bytedance.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e92038460f917cc777de05ec8ede4b9b91675530
Author: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
Date:   Sat Oct 17 22:12:10 2020 +0530

    powerpc/powernv/dump: Fix race while processing OPAL dump
    
    [ Upstream commit 0a43ae3e2beb77e3481d812834d33abe270768ab ]
    
    Every dump reported by OPAL is exported to userspace through a sysfs
    interface and notified using kobject_uevent(). The userspace daemon
    (opal_errd) then reads the dump and acknowledges that the dump is
    saved safely to disk. Once acknowledged the kernel removes the
    respective sysfs file entry causing respective resources to be
    released including kobject.
    
    However it's possible the userspace daemon may already be scanning
    dump entries when a new sysfs dump entry is created by the kernel.
    User daemon may read this new entry and ack it even before kernel can
    notify userspace about it through kobject_uevent() call. If that
    happens then we have a potential race between
    dump_ack_store->kobject_put() and kobject_uevent which can lead to
    use-after-free of a kernfs object resulting in a kernel crash.
    
    This patch fixes this race by protecting the sysfs file
    creation/notification by holding a reference count on kobject until we
    safely send kobject_uevent().
    
    The function create_dump_obj() returns the dump object which if used
    by caller function will end up in use-after-free problem again.
    However, the return value of create_dump_obj() function isn't being
    used today and there is no need as well. Hence change it to return
    void to make this fix complete.
    
    Fixes: c7e64b9ce04a ("powerpc/powernv Platform dump interface")
    Signed-off-by: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201017164210.264619-1-hegdevasant@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c1799e7b0de69281460543ebf55a58c1f67a28f
Author: Michal Simek <michal.simek@xilinx.com>
Date:   Mon Aug 24 10:59:14 2020 +0200

    arm64: dts: zynqmp: Remove additional compatible string for i2c IPs
    
    [ Upstream commit 35292518cb0a626fcdcabf739aed75060a018ab5 ]
    
    DT binding permits only one compatible string which was decribed in past by
    commit 63cab195bf49 ("i2c: removed work arounds in i2c driver for Zynq
    Ultrascale+ MPSoC").
    The commit aea37006e183 ("dt-bindings: i2c: cadence: Migrate i2c-cadence
    documentation to YAML") has converted binding to yaml and the following
    issues is reported:
    ...: i2c@ff030000: compatible: Additional items are not allowed
    ('cdns,i2c-r1p10' was unexpected)
            From schema:
    .../Documentation/devicetree/bindings/i2c/cdns,i2c-r1p10.yaml fds
    ...: i2c@ff030000: compatible: ['cdns,i2c-r1p14', 'cdns,i2c-r1p10'] is too
    long
    
    The commit c415f9e8304a ("ARM64: zynqmp: Fix i2c node's compatible string")
    has added the second compatible string but without removing origin one.
    The patch is only keeping one compatible string "cdns,i2c-r1p14".
    
    Fixes: c415f9e8304a ("ARM64: zynqmp: Fix i2c node's compatible string")
    Signed-off-by: Michal Simek <michal.simek@xilinx.com>
    Link: https://lore.kernel.org/r/cc294ae1a79ef845af6809ddb4049f0c0f5bb87a.1598259551.git.michal.simek@xilinx.com
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fdd92868897a405d28f99bf8c0869a9fb1dc828
Author: Cristian Ciocaltea <cristian.ciocaltea@gmail.com>
Date:   Fri Aug 28 16:53:17 2020 +0300

    ARM: dts: owl-s500: Fix incorrect PPI interrupt specifiers
    
    [ Upstream commit 55f6c9931f7c32f19cf221211f099dfd8dab3af9 ]
    
    The PPI interrupts for cortex-a9 were incorrectly specified, fix them.
    
    Fixes: fdfe7f4f9d85 ("ARM: dts: Add Actions Semi S500 and LeMaker Guitar")
    Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@gmail.com>
    Reviewed-by: Peter Korsgaard <peter@korsgaard.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45f77d2fb264a0e1891cd3ed4ee61e28bf735a03
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Tue Sep 15 09:12:11 2020 +0200

    arm64: dts: qcom: msm8916: Fix MDP/DSI interrupts
    
    [ Upstream commit 027cca9eb5b450c3f6bb916ba999144c2ec23cb7 ]
    
    The mdss node sets #interrupt-cells = <1>, so its interrupts
    should be referenced using a single cell (in this case: only the
    interrupt number).
    
    However, right now the mdp/dsi node both have two interrupt cells
    set, e.g. interrupts = <4 0>. The 0 is probably meant to say
    IRQ_TYPE_NONE (= 0), but with #interrupt-cells = <1> this is
    actually interpreted as a second interrupt line.
    
    Remove the IRQ flags from both interrupts to fix this.
    
    Fixes: 305410ffd1b2 ("arm64: dts: msm8916: Add display support")
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200915071221.72895-5-stephan@gerhold.net
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe3b965edab75cbd215fb69c4a4550e9fd141d66
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Aug 27 09:33:15 2020 +0200

    memory: fsl-corenet-cf: Fix handling of platform_get_irq() error
    
    [ Upstream commit dd85345abca60a8916617e8d75c0f9ce334336dd ]
    
    platform_get_irq() returns -ERRNO on error.  In such case comparison
    to 0 would pass the check.
    
    Fixes: 54afbec0d57f ("memory: Freescale CoreNet Coherency Fabric error reporting driver")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200827073315.29351-1-krzk@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 132273fb91b97d562069df0cf5a144326a77b388
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Aug 25 13:47:07 2020 +0300

    memory: omap-gpmc: Fix a couple off by ones
    
    [ Upstream commit 4c54228ac8fd55044195825873c50a524131fa53 ]
    
    These comparisons should be >= instead of > to prevent reading one
    element beyond the end of the gpmc_cs[] array.
    
    Fixes: cdd6928c589a ("ARM: OMAP2+: Add device-tree support for NOR flash")
    Fixes: f37e4580c409 ("ARM: OMAP2: Dynamic allocator for GPMC memory space")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Roger Quadros <rogerq@ti.com>
    Link: https://lore.kernel.org/r/20200825104707.GB278587@mwanda
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee02924cf5969bb80f23ef7f1966d5dd2376d3c2
Author: Robert Hoo <robert.hu@linux.intel.com>
Date:   Fri Aug 28 10:23:42 2020 +0800

    KVM: x86: emulating RDPID failure shall return #UD rather than #GP
    
    [ Upstream commit a9e2e0ae686094571378c72d8146b5a1a92d0652 ]
    
    Per Intel's SDM, RDPID takes a #UD if it is unsupported, which is more or
    less what KVM is emulating when MSR_TSC_AUX is not available.  In fact,
    there are no scenarios in which RDPID is supposed to #GP.
    
    Fixes: fb6d4d340e ("KVM: x86: emulate RDPID")
    Signed-off-by: Robert Hoo <robert.hu@linux.intel.com>
    Message-Id: <1598581422-76264-1-git-send-email-robert.hu@linux.intel.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bcf478c2a66702a364d12a491f85de2b97e65e6
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Sep 15 17:56:40 2020 -0700

    Input: sun4i-ps2 - fix handling of platform_get_irq() error
    
    [ Upstream commit cafb3abea6136e59ea534004e5773361e196bb94 ]
    
    platform_get_irq() returns -ERRNO on error.  In such case comparison
    to 0 would pass the check.
    
    Fixes: e443631d20f5 ("Input: serio - add support for Alwinner A10/A20 PS/2 controller")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Chen-Yu Tsai <wens@csie.org>
    Link: https://lore.kernel.org/r/20200828145744.3636-4-krzk@kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 69b7ffc091cc26744b1a28d0d5c60fdca144d650
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Sep 15 17:56:19 2020 -0700

    Input: twl4030_keypad - fix handling of platform_get_irq() error
    
    [ Upstream commit c277e1f0dc3c7d7b5b028e20dd414df241642036 ]
    
    platform_get_irq() returns -ERRNO on error.  In such case casting to
    unsigned and comparing to 0 would pass the check.
    
    Fixes: 7abf38d6d13c ("Input: twl4030-keypad - add device tree support")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200828145744.3636-3-krzk@kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 39de0f460599617bcd88803d84ea20330f95bc49
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Sep 15 17:52:15 2020 -0700

    Input: omap4-keypad - fix handling of platform_get_irq() error
    
    [ Upstream commit 4738dd1992fa13acfbbd71800c71c612f466fa44 ]
    
    platform_get_irq() returns -ERRNO on error.  In such case comparison
    to 0 would pass the check.
    
    Fixes: f3a1ba60dbdb ("Input: omap4-keypad - use platform device helpers")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200828145744.3636-2-krzk@kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4f11bb2365c5ad190306aad8f45ad9a92b4b5e74
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Tue Sep 15 17:51:05 2020 -0700

    Input: ep93xx_keypad - fix handling of platform_get_irq() error
    
    [ Upstream commit 7d50f6656dacf085a00beeedbc48b19a37d17881 ]
    
    platform_get_irq() returns -ERRNO on error.  In such case comparison
    to 0 would pass the check.
    
    Fixes: 60214f058f44 ("Input: ep93xx_keypad - update driver to new core support")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200828145744.3636-1-krzk@kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d2d11e8c961b715aabe95640f884004eaa9e447
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Sep 16 10:26:09 2020 -0700

    Input: stmfts - fix a & vs && typo
    
    [ Upstream commit d04afe14b23651e7a8bc89727a759e982a8458e4 ]
    
    In stmfts_sysfs_hover_enable_write(), we should check value and
    sdata->hover_enabled is all true.
    
    Fixes: 78bcac7b2ae1 ("Input: add support for the STMicroelectronics FingerTip touchscreen")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20200916141941.16684-1-yuehaibing@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94a82f00732f095d75e42b9786a2b955cc9d0942
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Sep 14 10:17:01 2020 -0700

    Input: imx6ul_tsc - clean up some errors in imx6ul_tsc_resume()
    
    [ Upstream commit 30df23c5ecdfb8da5b0bc17ceef67eff9e1b0957 ]
    
    If imx6ul_tsc_init() fails then we need to clean up the clocks.
    
    I reversed the "if (input_dev->users) {" condition to make the code a
    bit simpler.
    
    Fixes: 6cc527b05847 ("Input: imx6ul_tsc - propagate the errors")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20200905124942.GC183976@mwanda
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ec902dcd9656ae485de1f1d4650ce29661510b1
Author: Xiaoyang Xu <xuxiaoyang2@huawei.com>
Date:   Fri Oct 16 17:35:58 2020 +0800

    vfio iommu type1: Fix memory leak in vfio_iommu_type1_pin_pages
    
    [ Upstream commit 2e6cfd496f5b57034cf2aec738799571b5a52124 ]
    
    pfn is not added to pfn_list when vfio_add_to_pfn_list fails.
    vfio_unpin_page_external will exit directly without calling
    vfio_iova_put_vfio_pfn.  This will lead to a memory leak.
    
    Fixes: a54eb55045ae ("vfio iommu type1: Add support for mediated devices")
    Signed-off-by: Xiaoyang Xu <xuxiaoyang2@huawei.com>
    [aw: simplified logic, add Fixes]
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed3a8071d9b87510cf01c49b89b28384b4cc248a
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Mon Oct 19 07:13:55 2020 -0600

    vfio/pci: Clear token on bypass registration failure
    
    [ Upstream commit 852b1beecb6ff9326f7ca4bc0fe69ae860ebdb9e ]
    
    The eventfd context is used as our irqbypass token, therefore if an
    eventfd is re-used, our token is the same.  The irqbypass code will
    return an -EBUSY in this case, but we'll still attempt to unregister
    the producer, where if that duplicate token still exists, results in
    removing the wrong object.  Clear the token of failed producers so
    that they harmlessly fall out when unregistered.
    
    Fixes: 6d7425f109d2 ("vfio: Register/unregister irq_bypass_producer")
    Reported-by: guomin chen <guomin_chen@sina.com>
    Tested-by: guomin chen <guomin_chen@sina.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0723cd7450443eec935b11f453cf918d0c022753
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Thu Oct 1 15:21:48 2020 -0700

    ext4: limit entries returned when counting fsmap records
    
    [ Upstream commit af8c53c8bc087459b1aadd4c94805d8272358d79 ]
    
    If userspace asked fsmap to try to count the number of entries, we cannot
    return more than UINT_MAX entries because fmh_entries is u32.
    Therefore, stop counting if we hit this limit or else we will waste time
    to return truncated results.
    
    Fixes: 0c9ec4beecac ("ext4: support GETFSMAP ioctls")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Link: https://lore.kernel.org/r/20201001222148.GA49520@magnolia
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aa3a50e6c3cd92ca175034f29eb8e8affdc0d13e
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Aug 9 18:11:58 2020 -0500

    clk: bcm2835: add missing release if devm_clk_hw_register fails
    
    [ Upstream commit f6c992ca7dd4f49042eec61f3fb426c94d901675 ]
    
    In the implementation of bcm2835_register_pll(), the allocated pll is
    leaked if devm_clk_hw_register() fails to register hw. Release pll if
    devm_clk_hw_register() fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Link: https://lore.kernel.org/r/20200809231202.15811-1-navid.emamdoost@gmail.com
    Fixes: 41691b8862e2 ("clk: bcm2835: Add support for programming the audio domain clocks")
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dc0a72b58a8427cc72a2f836afa3f0f7b59f941
Author: Claudiu Beznea <claudiu.beznea@microchip.com>
Date:   Tue Aug 25 09:59:10 2020 +0300

    clk: at91: clk-main: update key before writing AT91_CKGR_MOR
    
    [ Upstream commit 85d071e7f19a6a9abf30476b90b3819642568756 ]
    
    SAMA5D2 datasheet specifies on chapter 33.22.8 (PMC Clock Generator
    Main Oscillator Register) that writing any value other than
    0x37 on KEY field aborts the write operation. Use the key when
    selecting main clock parent.
    
    Fixes: 27cb1c2083373 ("clk: at91: rework main clk implementation")
    Signed-off-by: Claudiu Beznea <claudiu.beznea@microchip.com>
    Reviewed-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/1598338751-20607-3-git-send-email-claudiu.beznea@microchip.com
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 235d998f2f5209dedc3c7d1ea898a801ab0c3a3c
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Aug 3 15:52:40 2020 +1200

    PCI: iproc: Set affinity mask on MSI interrupts
    
    [ Upstream commit eb7eacaa5b9e4f665bd08d416c8f88e63d2f123c ]
    
    The core interrupt code expects the irq_set_affinity call to update the
    effective affinity for the interrupt. This was not being done, so update
    iproc_msi_irq_set_affinity() to do so.
    
    Link: https://lore.kernel.org/r/20200803035241.7737-1-mark.tomlinson@alliedtelesis.co.nz
    Fixes: 3bc2b2348835 ("PCI: iproc: Add iProc PCIe MSI support")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: Lorenzo Pieralisi <lorenzo.pieralisi@arm.com>
    Reviewed-by: Ray Jui <ray.jui@broadcom.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4208da13de8787141bed8cf05e01d6d4c546da65
Author: Dirk Behme <dirk.behme@de.bosch.com>
Date:   Thu Aug 27 11:23:30 2020 +0200

    i2c: rcar: Auto select RESET_CONTROLLER
    
    [ Upstream commit 5b9bacf28a973a6b16510493416baeefa2c06289 ]
    
    The i2c-rcar driver utilizes the Generic Reset Controller kernel
    feature, so select the RESET_CONTROLLER option when the I2C_RCAR
    option is selected with a Gen3 SoC.
    
    Fixes: 2b16fd63059ab9 ("i2c: rcar: handle RXDMA HW behaviour on Gen3")
    Signed-off-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Andy Lowe <andy_lowe@mentor.com>
    [erosca: Add "if ARCH_RCAR_GEN3" per Wolfram's request]
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e646362965fc5b655330d07624da6803b32786b3
Author: Jassi Brar <jaswinder.singh@linaro.org>
Date:   Fri Oct 16 12:20:56 2020 -0500

    mailbox: avoid timer start from callback
    
    [ Upstream commit c7dacf5b0f32957b24ef29df1207dc2cd8307743 ]
    
    If the txdone is done by polling, it is possible for msg_submit() to start
    the timer while txdone_hrtimer() callback is running. If the timer needs
    recheduling, it could already be enqueued by the time hrtimer_forward_now()
    is called, leading hrtimer to loudly complain.
    
    WARNING: CPU: 3 PID: 74 at kernel/time/hrtimer.c:932 hrtimer_forward+0xc4/0x110
    CPU: 3 PID: 74 Comm: kworker/u8:1 Not tainted 5.9.0-rc2-00236-gd3520067d01c-dirty #5
    Hardware name: Libre Computer AML-S805X-AC (DT)
    Workqueue: events_freezable_power_ thermal_zone_device_check
    pstate: 20000085 (nzCv daIf -PAN -UAO BTYPE=--)
    pc : hrtimer_forward+0xc4/0x110
    lr : txdone_hrtimer+0xf8/0x118
    [...]
    
    This can be fixed by not starting the timer from the callback path. Which
    requires the timer reloading as long as any message is queued on the
    channel, and not just when current tx is not done yet.
    
    Fixes: 0cc67945ea59 ("mailbox: switch to hrtimer for tx_complete polling")
    Reported-by: Da Xue <da@libre.computer>
    Reviewed-by: Sudeep Holla <sudeep.holla@arm.com>
    Tested-by: Sudeep Holla <sudeep.holla@arm.com>
    Acked-by: Jerome Brunet <jbrunet@baylibre.com>
    Tested-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9dca3ec6ea49d59341c488aa13ca635fae32255
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Thu Oct 15 20:13:18 2020 -0700

    rapidio: fix the missed put_device() for rio_mport_add_riodev
    
    [ Upstream commit 85094c05eeb47d195a74a25366a2db066f1c9d47 ]
    
    rio_mport_add_riodev() misses to call put_device() when the device already
    exists.  Add the missed function call to fix it.
    
    Fixes: e8de370188d0 ("rapidio: add mport char device driver")
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Gustavo A. R. Silva <gustavoars@kernel.org>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Link: https://lkml.kernel.org/r/20200922072525.42330-1-jingxiangfeng@huawei.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3486c6626a9fb5923f92defc419d9302b54eb385
Author: Souptick Joarder <jrdr.linux@gmail.com>
Date:   Thu Oct 15 20:13:15 2020 -0700

    rapidio: fix error handling path
    
    [ Upstream commit fa63f083b3492b5ed5332b8d7c90b03b5ef24a1d ]
    
    rio_dma_transfer() attempts to clamp the return value of
    pin_user_pages_fast() to be >= 0.  However, the attempt fails because
    nr_pages is overridden a few lines later, and restored to the undesirable
    -ERRNO value.
    
    The return value is ultimately stored in nr_pages, which in turn is passed
    to unpin_user_pages(), which expects nr_pages >= 0, else, disaster.
    
    Fix this by fixing the nesting of the assignment to nr_pages: nr_pages
    should be clamped to zero if pin_user_pages_fast() returns -ERRNO, or set
    to the return value of pin_user_pages_fast(), otherwise.
    
    [jhubbard@nvidia.com: new changelog]
    
    Fixes: e8de370188d09 ("rapidio: add mport char device driver")
    Signed-off-by: Souptick Joarder <jrdr.linux@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Reviewed-by: John Hubbard <jhubbard@nvidia.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Gustavo A. R. Silva <gustavoars@kernel.org>
    Cc: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lkml.kernel.org/r/1600227737-20785-1-git-send-email-jrdr.linux@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97116e043f947fbb717fd8053e1d013a8cdeb0f3
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Thu Oct 15 20:13:04 2020 -0700

    ramfs: fix nommu mmap with gaps in the page cache
    
    [ Upstream commit 50b7d85680086126d7bd91dae81d57d4cb1ab6b7 ]
    
    ramfs needs to check that pages are both physically contiguous and
    contiguous in the file.  If the page cache happens to have, eg, page A for
    index 0 of the file, no page for index 1, and page A+1 for index 2, then
    an mmap of the first two pages of the file will succeed when it should
    fail.
    
    Fixes: 642fb4d1f1dd ("[PATCH] NOMMU: Provide shared-writable mmap support on ramfs")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: David Howells <dhowells@redhat.com>
    Link: https://lkml.kernel.org/r/20200914122239.GO6583@casper.infradead.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35a3ad1b10203bc728e6de9211cd0c950e1a3393
Author: Tobias Jordan <kernel@cdqe.de>
Date:   Thu Oct 15 20:11:38 2020 -0700

    lib/crc32.c: fix trivial typo in preprocessor condition
    
    [ Upstream commit 904542dc56524f921a6bab0639ff6249c01e775f ]
    
    Whether crc32_be needs a lookup table is chosen based on CRC_LE_BITS.
    Obviously, the _be function should be governed by the _BE_ define.
    
    This probably never pops up as it's hard to come up with a configuration
    where CRC_BE_BITS isn't the same as CRC_LE_BITS and as nobody is using
    bitwise CRC anyway.
    
    Fixes: 46c5801eaf86 ("crc32: bolt on crc32c")
    Signed-off-by: Tobias Jordan <kernel@cdqe.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Link: https://lkml.kernel.org/r/20200923182122.GA3338@agrajag.zerfleddert.de
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 871332d8157855e76b58dc9bb1596dec3e50c4f0
Author: Jamie Iles <jamie@nuviainc.com>
Date:   Mon Oct 12 14:09:48 2020 +0100

    f2fs: wait for sysfs kobject removal before freeing f2fs_sb_info
    
    [ Upstream commit ae284d87abade58c8db7760c808f311ef1ce693c ]
    
    syzkaller found that with CONFIG_DEBUG_KOBJECT_RELEASE=y, unmounting an
    f2fs filesystem could result in the following splat:
    
      kobject: 'loop5' ((____ptrval____)): kobject_release, parent 0000000000000000 (delayed 250)
      kobject: 'f2fs_xattr_entry-7:5' ((____ptrval____)): kobject_release, parent 0000000000000000 (delayed 750)
      ------------[ cut here ]------------
      ODEBUG: free active (active state 0) object type: timer_list hint: delayed_work_timer_fn+0x0/0x98
      WARNING: CPU: 0 PID: 699 at lib/debugobjects.c:485 debug_print_object+0x180/0x240
      Kernel panic - not syncing: panic_on_warn set ...
      CPU: 0 PID: 699 Comm: syz-executor.5 Tainted: G S                5.9.0-rc8+ #101
      Hardware name: linux,dummy-virt (DT)
      Call trace:
       dump_backtrace+0x0/0x4d8
       show_stack+0x34/0x48
       dump_stack+0x174/0x1f8
       panic+0x360/0x7a0
       __warn+0x244/0x2ec
       report_bug+0x240/0x398
       bug_handler+0x50/0xc0
       call_break_hook+0x160/0x1d8
       brk_handler+0x30/0xc0
       do_debug_exception+0x184/0x340
       el1_dbg+0x48/0xb0
       el1_sync_handler+0x170/0x1c8
       el1_sync+0x80/0x100
       debug_print_object+0x180/0x240
       debug_check_no_obj_freed+0x200/0x430
       slab_free_freelist_hook+0x190/0x210
       kfree+0x13c/0x460
       f2fs_put_super+0x624/0xa58
       generic_shutdown_super+0x120/0x300
       kill_block_super+0x94/0xf8
       kill_f2fs_super+0x244/0x308
       deactivate_locked_super+0x104/0x150
       deactivate_super+0x118/0x148
       cleanup_mnt+0x27c/0x3c0
       __cleanup_mnt+0x28/0x38
       task_work_run+0x10c/0x248
       do_notify_resume+0x9d4/0x1188
       work_pending+0x8/0x34c
    
    Like the error handling for f2fs_register_sysfs(), we need to wait for
    the kobject to be destroyed before returning to prevent a potential
    use-after-free.
    
    Fixes: bf9e697ecd42 ("f2fs: expose features to sysfs entry")
    Cc: Jaegeuk Kim <jaegeuk@kernel.org>
    Cc: Chao Yu <chao@kernel.org>
    Signed-off-by: Jamie Iles <jamie@nuviainc.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5f9d09a40827e453498090eb5d5d61e16c2cfda1
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Oct 8 10:52:04 2020 +0100

    IB/rdmavt: Fix sizeof mismatch
    
    [ Upstream commit 8e71f694e0c819db39af2336f16eb9689f1ae53f ]
    
    An incorrect sizeof is being used, struct rvt_ibport ** is not correct, it
    should be struct rvt_ibport *. Note that since ** is the same size as
    * this is not causing any issues.  Improve this fix by using
    sizeof(*rdi->ports) as this allows us to not even reference the type
    of the pointer.  Also remove line breaks as the entire statement can
    fit on one line.
    
    Link: https://lore.kernel.org/r/20201008095204.82683-1-colin.king@canonical.com
    Addresses-Coverity: ("Sizeof not portable (SIZEOF_MISMATCH)")
    Fixes: ff6acd69518e ("IB/rdmavt: Add device structure allocation")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Reviewed-by: Ira Weiny <ira.weiny@intel.com>
    Acked-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d85d3d3bc100b7ad10159a585dc2b82ee6aa25f
Author: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
Date:   Tue Sep 22 13:32:54 2020 +0530

    cpufreq: powernv: Fix frame-size-overflow in powernv_cpufreq_reboot_notifier
    
    [ Upstream commit a2d0230b91f7e23ceb5d8fb6a9799f30517ec33a ]
    
    The patch avoids allocating cpufreq_policy on stack hence fixing frame
    size overflow in 'powernv_cpufreq_reboot_notifier':
    
      drivers/cpufreq/powernv-cpufreq.c: In function powernv_cpufreq_reboot_notifier:
      drivers/cpufreq/powernv-cpufreq.c:906:1: error: the frame size of 2064 bytes is larger than 2048 bytes
    
    Fixes: cf30af76 ("cpufreq: powernv: Set the cpus to nominal frequency during reboot/kexec")
    Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200922080254.41497-1-srikar@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97fa40adbc36e0c974c29daf88a79b106ed85f79
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Sat Oct 3 13:19:39 2020 +0530

    powerpc/perf/hv-gpci: Fix starting index value
    
    [ Upstream commit 0f9866f7e85765bbda86666df56c92f377c3bc10 ]
    
    Commit 9e9f60108423f ("powerpc/perf/{hv-gpci, hv-common}: generate
    requests with counters annotated") adds a framework for defining
    gpci counters.
    In this patch, they adds starting_index value as '0xffffffffffffffff'.
    which is wrong as starting_index is of size 32 bits.
    
    Because of this, incase we try to run hv-gpci event we get error.
    
    In power9 machine:
    
    command#: perf stat -e hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
              -C 0 -I 1000
    event syntax error: '..bie_count_and_time_tlbie_instructions_issued/'
                                      \___ value too big for format, maximum is 4294967295
    
    This patch fix this issue and changes starting_index value to '0xffffffff'
    
    After this patch:
    
    command#: perf stat -e hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/ -C 0 -I 1000
         1.000085786              1,024      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         2.000287818              1,024      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
         2.439113909             17,408      hv_gpci/system_tlbie_count_and_time_tlbie_instructions_issued/
    
    Fixes: 9e9f60108423 ("powerpc/perf/{hv-gpci, hv-common}: generate requests with counters annotated")
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20201003074943.338618-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2581355898ec8d5d4b31cba18473c9e66c9b976
Author: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Date:   Mon Sep 21 03:10:04 2020 -0400

    powerpc/perf: Exclude pmc5/6 from the irrelevant PMU group constraints
    
    [ Upstream commit 3b6c3adbb2fa42749c3d38cfc4d4d0b7e096bb7b ]
    
    PMU counter support functions enforces event constraints for group of
    events to check if all events in a group can be monitored. Incase of
    event codes using PMC5 and PMC6 ( 500fa and 600f4 respectively ), not
    all constraints are applicable, say the threshold or sample bits. But
    current code includes pmc5 and pmc6 in some group constraints (like
    IC_DC Qualifier bits) which is actually not applicable and hence
    results in those events not getting counted when scheduled along with
    group of other events. Patch fixes this by excluding PMC5/6 from
    constraints which are not relevant for it.
    
    Fixes: 7ffd948 ("powerpc/perf: factor out power8 pmu functions")
    Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Reviewed-by: Madhavan Srinivasan <maddy@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1600672204-1610-1-git-send-email-atrajeev@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6276f3556f7175ef5b28091261e494d731d2245a
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Sun Sep 13 13:29:28 2020 +0300

    overflow: Include header file with SIZE_MAX declaration
    
    [ Upstream commit a4947e84f23474803b62a2759b5808147e4e15f9 ]
    
    The various array_size functions use SIZE_MAX define, but missed limits.h
    causes to failure to compile code that needs overflow.h.
    
     In file included from drivers/infiniband/core/uverbs_std_types_device.c:6:
     ./include/linux/overflow.h: In function 'array_size':
     ./include/linux/overflow.h:258:10: error: 'SIZE_MAX' undeclared (first use in this function)
       258 |   return SIZE_MAX;
           |          ^~~~~~~~
    
    Fixes: 610b15c50e86 ("overflow.h: Add allocation size calculation helpers")
    Link: https://lore.kernel.org/r/20200913102928.134985-1-leon@kernel.org
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73e0574dcb18587caa3acb4b24ef6d02aa70e189
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Wed Sep 9 15:17:08 2020 +0100

    kdb: Fix pager search for multi-line strings
    
    [ Upstream commit d081a6e353168f15e63eb9e9334757f20343319f ]
    
    Currently using forward search doesn't handle multi-line strings correctly.
    The search routine replaces line breaks with \0 during the search and, for
    regular searches ("help | grep Common\n"), there is code after the line
    has been discarded or printed to replace the break character.
    
    However during a pager search ("help\n" followed by "/Common\n") when the
    string is matched we will immediately return to normal output and the code
    that should restore the \n becomes unreachable. Fix this by restoring the
    replaced character when we disable the search mode and update the comment
    accordingly.
    
    Fixes: fb6daa7520f9d ("kdb: Provide forward search at more prompt")
    Link: https://lore.kernel.org/r/20200909141708.338273-1-daniel.thompson@linaro.org
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ca24b72ec68611d37d89393b22f763d46a46a57
Author: Lijun Ou <oulijun@huawei.com>
Date:   Thu Sep 17 21:50:15 2020 +0800

    RDMA/hns: Set the unsupported wr opcode
    
    [ Upstream commit 22d3e1ed2cc837af87f76c3c8a4ccf4455e225c5 ]
    
    hip06 does not support IB_WR_LOCAL_INV, so the ps_opcode should be set to
    an invalid value instead of being left uninitialized.
    
    Fixes: 9a4435375cd1 ("IB/hns: Add driver files for hns RoCE driver")
    Fixes: a2f3d4479fe9 ("RDMA/hns: Avoid unncessary initialization")
    Link: https://lore.kernel.org/r/1600350615-115217-1-git-send-email-oulijun@huawei.com
    Signed-off-by: Lijun Ou <oulijun@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1221782c79613a76f3924927bc76cdbb4506283c
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Sep 9 11:49:23 2020 +0300

    perf intel-pt: Fix "context_switch event has no tid" error
    
    [ Upstream commit 7d537a8d2e76bc4fc71e34545ceaa463ac2cd928 ]
    
    A context_switch event can have no tid because pids can be detached from
    a task while the task is still running (in do_exit()). Note this won't
    happen with per-task contexts because then tracing stops at
    perf_event_exit_task()
    
    If a task with no tid gets preempted, or a dying task gets preempted and
    its parent releases it, when it subsequently gets switched back in,
    Intel PT will not be able to determine what task is running and prints
    an error "context_switch event has no tid". However, it is not really an
    error because the task is in kernel space and the decoder can continue
    to decode successfully. Fix by changing the error to be only a logged
    message, and make allowance for tid == -1.
    
    Example:
    
      Using 5.9-rc4 with Preemptible Kernel (Low-Latency Desktop) e.g.
      $ uname -r
      5.9.0-rc4
      $ grep PREEMPT .config
      # CONFIG_PREEMPT_NONE is not set
      # CONFIG_PREEMPT_VOLUNTARY is not set
      CONFIG_PREEMPT=y
      CONFIG_PREEMPT_COUNT=y
      CONFIG_PREEMPTION=y
      CONFIG_PREEMPT_RCU=y
      CONFIG_PREEMPT_NOTIFIERS=y
      CONFIG_DRM_I915_PREEMPT_TIMEOUT=640
      CONFIG_DEBUG_PREEMPT=y
      # CONFIG_PREEMPT_TRACER is not set
      # CONFIG_PREEMPTIRQ_DELAY_TEST is not set
    
    Before:
    
      $ cat forkit.c
    
      #include <sys/types.h>
      #include <unistd.h>
      #include <sys/wait.h>
    
      int main()
      {
              pid_t child;
              int status = 0;
    
              child = fork();
              if (child == 0)
                      return 123;
              wait(&status);
              return 0;
      }
    
      $ gcc -o forkit forkit.c
      $ sudo ~/bin/perf record --kcore -a -m,64M -e intel_pt/cyc/k &
      [1] 11016
      $ taskset 2 ./forkit
      $ sudo pkill perf
      $ [ perf record: Woken up 1 times to write data ]
      [ perf record: Captured and wrote 17.262 MB perf.data ]
    
      [1]+  Terminated              sudo ~/bin/perf record --kcore -a -m,64M -e intel_pt/cyc/k
      $ sudo ~/bin/perf script --show-task-events --show-switch-events --itrace=iqqe-o -C 1 --ns | grep -C 2 forkit
      context_switch event has no tid
               taskset 11019 [001] 66663.270045029:          1 instructions:k:  ffffffffb1d9f844 strnlen_user+0xb4 ([kernel.kallsyms])
               taskset 11019 [001] 66663.270201816:          1 instructions:k:  ffffffffb1a83121 unmap_page_range+0x561 ([kernel.kallsyms])
                forkit 11019 [001] 66663.270327553: PERF_RECORD_COMM exec: forkit:11019/11019
                forkit 11019 [001] 66663.270420028:          1 instructions:k:  ffffffffb1db9537 __clear_user+0x27 ([kernel.kallsyms])
                forkit 11019 [001] 66663.270648704:          1 instructions:k:  ffffffffb18829e6 do_user_addr_fault+0xf6 ([kernel.kallsyms])
                forkit 11019 [001] 66663.270833163:          1 instructions:k:  ffffffffb230a825 irqentry_exit_to_user_mode+0x15 ([kernel.kallsyms])
                forkit 11019 [001] 66663.271092359:          1 instructions:k:  ffffffffb1aea3d9 lock_page_memcg+0x9 ([kernel.kallsyms])
                forkit 11019 [001] 66663.271207092: PERF_RECORD_FORK(11020:11020):(11019:11019)
                forkit 11019 [001] 66663.271234775: PERF_RECORD_SWITCH_CPU_WIDE OUT          next pid/tid: 11020/11020
                forkit 11020 [001] 66663.271238407: PERF_RECORD_SWITCH_CPU_WIDE IN           prev pid/tid: 11019/11019
                forkit 11020 [001] 66663.271312066:          1 instructions:k:  ffffffffb1a88140 handle_mm_fault+0x10 ([kernel.kallsyms])
                forkit 11020 [001] 66663.271476225: PERF_RECORD_EXIT(11020:11020):(11019:11019)
                forkit 11020 [001] 66663.271497488: PERF_RECORD_SWITCH_CPU_WIDE OUT preempt  next pid/tid: 11019/11019
                forkit 11019 [001] 66663.271500523: PERF_RECORD_SWITCH_CPU_WIDE IN           prev pid/tid: 11020/11020
                forkit 11019 [001] 66663.271517241:          1 instructions:k:  ffffffffb24012cd error_entry+0x6d ([kernel.kallsyms])
                forkit 11019 [001] 66663.271664080: PERF_RECORD_EXIT(11019:11019):(1386:1386)
    
    After:
    
      $ sudo ~/bin/perf script --show-task-events --show-switch-events --itrace=iqqe-o -C 1 --ns | grep -C 2 forkit
               taskset 11019 [001] 66663.270045029:          1 instructions:k:  ffffffffb1d9f844 strnlen_user+0xb4 ([kernel.kallsyms])
               taskset 11019 [001] 66663.270201816:          1 instructions:k:  ffffffffb1a83121 unmap_page_range+0x561 ([kernel.kallsyms])
                forkit 11019 [001] 66663.270327553: PERF_RECORD_COMM exec: forkit:11019/11019
                forkit 11019 [001] 66663.270420028:          1 instructions:k:  ffffffffb1db9537 __clear_user+0x27 ([kernel.kallsyms])
                forkit 11019 [001] 66663.270648704:          1 instructions:k:  ffffffffb18829e6 do_user_addr_fault+0xf6 ([kernel.kallsyms])
                forkit 11019 [001] 66663.270833163:          1 instructions:k:  ffffffffb230a825 irqentry_exit_to_user_mode+0x15 ([kernel.kallsyms])
                forkit 11019 [001] 66663.271092359:          1 instructions:k:  ffffffffb1aea3d9 lock_page_memcg+0x9 ([kernel.kallsyms])
                forkit 11019 [001] 66663.271207092: PERF_RECORD_FORK(11020:11020):(11019:11019)
                forkit 11019 [001] 66663.271234775: PERF_RECORD_SWITCH_CPU_WIDE OUT          next pid/tid: 11020/11020
                forkit 11020 [001] 66663.271238407: PERF_RECORD_SWITCH_CPU_WIDE IN           prev pid/tid: 11019/11019
                forkit 11020 [001] 66663.271312066:          1 instructions:k:  ffffffffb1a88140 handle_mm_fault+0x10 ([kernel.kallsyms])
                forkit 11020 [001] 66663.271476225: PERF_RECORD_EXIT(11020:11020):(11019:11019)
                forkit 11020 [001] 66663.271497488: PERF_RECORD_SWITCH_CPU_WIDE OUT preempt  next pid/tid: 11019/11019
                forkit 11019 [001] 66663.271500523: PERF_RECORD_SWITCH_CPU_WIDE IN           prev pid/tid: 11020/11020
                forkit 11019 [001] 66663.271517241:          1 instructions:k:  ffffffffb24012cd error_entry+0x6d ([kernel.kallsyms])
                forkit 11019 [001] 66663.271664080: PERF_RECORD_EXIT(11019:11019):(1386:1386)
                forkit 11019 [001] 66663.271688752: PERF_RECORD_SWITCH_CPU_WIDE OUT          next pid/tid:    -1/-1
                   :-1    -1 [001] 66663.271692086: PERF_RECORD_SWITCH_CPU_WIDE IN           prev pid/tid: 11019/11019
                    :-1    -1 [001] 66663.271707466:          1 instructions:k:  ffffffffb18eb096 update_load_avg+0x306 ([kernel.kallsyms])
    
    Fixes: 86c2786994bd7c ("perf intel-pt: Add support for PERF_RECORD_SWITCH")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Yu-cheng Yu <yu-cheng.yu@intel.com>
    Link: http://lore.kernel.org/lkml/20200909084923.9096-3-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba4ab522896a37583cea50ce704230c76668b032
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Sep 5 09:02:20 2020 +1000

    powerpc/tau: Disable TAU between measurements
    
    [ Upstream commit e63d6fb5637e92725cf143559672a34b706bca4f ]
    
    Enabling CONFIG_TAU_INT causes random crashes:
    
    Unrecoverable exception 1700 at c0009414 (msr=1000)
    Oops: Unrecoverable exception, sig: 6 [#1]
    BE PAGE_SIZE=4K MMU=Hash SMP NR_CPUS=2 PowerMac
    Modules linked in:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.7.0-pmac-00043-gd5f545e1a8593 #5
    NIP:  c0009414 LR: c0009414 CTR: c00116fc
    REGS: c0799eb8 TRAP: 1700   Not tainted  (5.7.0-pmac-00043-gd5f545e1a8593)
    MSR:  00001000 <ME>  CR: 22000228  XER: 00000100
    
    GPR00: 00000000 c0799f70 c076e300 00800000 0291c0ac 00e00000 c076e300 00049032
    GPR08: 00000001 c00116fc 00000000 dfbd3200 ffffffff 007f80a8 00000000 00000000
    GPR16: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 c075ce04
    GPR24: c075ce04 dfff8880 c07b0000 c075ce04 00080000 00000001 c079ef98 c079ef5c
    NIP [c0009414] arch_cpu_idle+0x24/0x6c
    LR [c0009414] arch_cpu_idle+0x24/0x6c
    Call Trace:
    [c0799f70] [00000001] 0x1 (unreliable)
    [c0799f80] [c0060990] do_idle+0xd8/0x17c
    [c0799fa0] [c0060ba4] cpu_startup_entry+0x20/0x28
    [c0799fb0] [c072d220] start_kernel+0x434/0x44c
    [c0799ff0] [00003860] 0x3860
    Instruction dump:
    XXXXXXXX XXXXXXXX XXXXXXXX 3d20c07b XXXXXXXX XXXXXXXX XXXXXXXX 7c0802a6
    XXXXXXXX XXXXXXXX XXXXXXXX 4e800421 XXXXXXXX XXXXXXXX XXXXXXXX 7d2000a6
    ---[ end trace 3a0c9b5cb216db6b ]---
    
    Resolve this problem by disabling each THRMn comparator when handling
    the associated THRMn interrupt and by disabling the TAU entirely when
    updating THRMn thresholds.
    
    Fixes: 1da177e4c3f41 ("Linux-2.6.12-rc2")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/5a0ba3dc5612c7aac596727331284a3676c08472.1599260540.git.fthain@telegraphics.com.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52869ff82c48a334366486e522ba96306d19145f
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Sep 5 09:02:20 2020 +1000

    powerpc/tau: Remove duplicated set_thresholds() call
    
    [ Upstream commit 420ab2bc7544d978a5d0762ee736412fe9c796ab ]
    
    The commentary at the call site seems to disagree with the code. The
    conditional prevents calling set_thresholds() via the exception handler,
    which appears to crash. Perhaps that's because it immediately triggers
    another TAU exception. Anyway, calling set_thresholds() from TAUupdate()
    is redundant because tau_timeout() does so.
    
    Fixes: 1da177e4c3f41 ("Linux-2.6.12-rc2")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/d7c7ee33232cf72a6a6bbb6ef05838b2e2b113c0.1599260540.git.fthain@telegraphics.com.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68b8a3c551fde1ae91462f4098dfea16c7685bdb
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Sep 5 09:02:20 2020 +1000

    powerpc/tau: Use appropriate temperature sample interval
    
    [ Upstream commit 66943005cc41f48e4d05614e8f76c0ca1812f0fd ]
    
    According to the MPC750 Users Manual, the SITV value in Thermal
    Management Register 3 is 13 bits long. The present code calculates the
    SITV value as 60 * 500 cycles. This would overflow to give 10 us on
    a 500 MHz CPU rather than the intended 60 us. (But according to the
    Microprocessor Datasheet, there is also a factor of 266 that has to be
    applied to this value on certain parts i.e. speed sort above 266 MHz.)
    Always use the maximum cycle count, as recommended by the Datasheet.
    
    Fixes: 1da177e4c3f41 ("Linux-2.6.12-rc2")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/896f542e5f0f1d6cf8218524c2b67d79f3d69b3c.1599260540.git.fthain@telegraphics.com.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c131cebec9564c8e52c750471014b4334a6a7816
Author: Michal Kalderon <michal.kalderon@marvell.com>
Date:   Wed Sep 2 19:57:36 2020 +0300

    RDMA/qedr: Fix use of uninitialized field
    
    [ Upstream commit a379ad54e55a12618cae7f6333fd1b3071de9606 ]
    
    dev->attr.page_size_caps was used uninitialized when setting device
    attributes
    
    Fixes: ec72fce401c6 ("qedr: Add support for RoCE HW init")
    Link: https://lore.kernel.org/r/20200902165741.8355-4-michal.kalderon@marvell.com
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 627ba3f36ef699b296bf6d6c24547624cd4d7885
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Thu Oct 1 10:56:07 2020 -0700

    xfs: limit entries returned when counting fsmap records
    
    [ Upstream commit acd1ac3aa22fd58803a12d26b1ab7f70232f8d8d ]
    
    If userspace asked fsmap to count the number of entries, we cannot
    return more than UINT_MAX entries because fmh_entries is u32.
    Therefore, stop counting if we hit this limit or else we will waste time
    to return truncated results.
    
    Fixes: e89c041338ed ("xfs: implement the GETFSMAP ioctl")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba3cd5c8db64ab2a282ad513632cfef4fc5c15f1
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Mon Sep 14 14:46:52 2020 +0300

    arc: plat-hsdk: fix kconfig dependency warning when !RESET_CONTROLLER
    
    [ Upstream commit 63bcf87cb1c57956e1179f1a78dde625c7e3cba7 ]
    
    When ARC_SOC_HSDK is enabled and RESET_CONTROLLER is disabled, it results
    in the following Kbuild warning:
    
    WARNING: unmet direct dependencies detected for RESET_HSDK
      Depends on [n]: RESET_CONTROLLER [=n] && HAS_IOMEM [=y] && (ARC_SOC_HSDK [=y] || COMPILE_TEST [=n])
      Selected by [y]:
      - ARC_SOC_HSDK [=y] && ISA_ARCV2 [=y]
    
    The reason is that ARC_SOC_HSDK selects RESET_HSDK without depending on or
    selecting RESET_CONTROLLER while RESET_HSDK is subordinate to
    RESET_CONTROLLER.
    
    Honor the kconfig menu hierarchy to remove kconfig dependency warnings.
    
    Fixes: a528629dfd3b ("ARC: [plat-hsdk] select CONFIG_RESET_HSDK from Kconfig")
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1a2f45eae010964507372e8a4d0c8e79f7923da
Author: Guillaume Tucker <guillaume.tucker@collabora.com>
Date:   Tue Sep 1 16:58:06 2020 +0100

    ARM: 9007/1: l2c: fix prefetch bits init in L2X0_AUX_CTRL using DT values
    
    [ Upstream commit 8e007b367a59bcdf484c81f6df9bd5a4cc179ca6 ]
    
    The L310_PREFETCH_CTRL register bits 28 and 29 to enable data and
    instruction prefetch respectively can also be accessed via the
    L2X0_AUX_CTRL register.  They appear to be actually wired together in
    hardware between the registers.  Changing them in the prefetch
    register only will get undone when restoring the aux control register
    later on.  For this reason, set these bits in both registers during
    initialisation according to the devicetree property values.
    
    Link: https://lore.kernel.org/lkml/76f2f3ad5e77e356e0a5b99ceee1e774a2842c25.1597061474.git.guillaume.tucker@collabora.com/
    
    Fixes: ec3bd0e68a67 ("ARM: 8391/1: l2c: add options to overwrite prefetching behavior")
    Signed-off-by: Guillaume Tucker <guillaume.tucker@collabora.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97f2406b583ae1280046a2bfa9cdaf12aa87eb30
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Thu Sep 3 15:42:17 2020 +1200

    mtd: mtdoops: Don't write panic data twice
    
    [ Upstream commit c1cf1d57d1492235309111ea6a900940213a9166 ]
    
    If calling mtdoops_write, don't also schedule work to be done later.
    
    Although this appears to not be causing an issue, possibly because the
    scheduled work will never get done, it is confusing.
    
    Fixes: 016c1291ce70 ("mtd: mtdoops: do not use mtd->panic_write directly")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200903034217.23079-1-mark.tomlinson@alliedtelesis.co.nz
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c5d552ff9fe46296f9c19dbba20a40e034e2abd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 5 16:01:16 2020 +0200

    mtd: lpddr: fix excessive stack usage with clang
    
    [ Upstream commit 3e1b6469f8324bee5927b063e2aca30d3e56b907 ]
    
    Building lpddr2_nvm with clang can result in a giant stack usage
    in one function:
    
    drivers/mtd/lpddr/lpddr2_nvm.c:399:12: error: stack frame size of 1144 bytes in function 'lpddr2_nvm_probe' [-Werror,-Wframe-larger-than=]
    
    The problem is that clang decides to build a copy of the mtd_info
    structure on the stack and then do a memcpy() into the actual version. It
    shouldn't really do it that way, but it's not strictly a bug either.
    
    As a workaround, use a static const version of the structure to assign
    most of the members upfront and then only set the few members that
    require runtime knowledge at probe time.
    
    Fixes: 96ba9dd65788 ("mtd: lpddr: add driver for LPDDR2-NVM PCM memories")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200505140136.263461-1-arnd@arndb.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40cb968d7d427edf521f47e796b728a3c998c3e8
Author: Nicholas Mc Guire <hofrat@osadl.org>
Date:   Wed Jul 4 10:03:27 2018 +0200

    powerpc/icp-hv: Fix missing of_node_put() in success path
    
    [ Upstream commit d3e669f31ec35856f5e85df9224ede5bdbf1bc7b ]
    
    Both of_find_compatible_node() and of_find_node_by_type() will return
    a refcounted node on success - thus for the success path the node must
    be explicitly released with a of_node_put().
    
    Fixes: 0b05ac6e2480 ("powerpc/xics: Rewrite XICS driver")
    Signed-off-by: Nicholas Mc Guire <hofrat@osadl.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1530691407-3991-1-git-send-email-hofrat@osadl.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44306f5e035b130e9b85981c6e94482668056750
Author: Nicholas Mc Guire <hofrat@osadl.org>
Date:   Mon Jul 2 11:08:16 2018 +0200

    powerpc/pseries: Fix missing of_node_put() in rng_init()
    
    [ Upstream commit 67c3e59443f5fc77be39e2ce0db75fbfa78c7965 ]
    
    The call to of_find_compatible_node() returns a node pointer with
    refcount incremented thus it must be explicitly decremented here
    before returning.
    
    Fixes: a489043f4626 ("powerpc/pseries: Implement arch_get_random_long() based on H_RANDOM")
    Signed-off-by: Nicholas Mc Guire <hofrat@osadl.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1530522496-14816-1-git-send-email-hofrat@osadl.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4ddd146fe1d7d384a1addceef520c5209a4e488
Author: Håkon Bugge <haakon.bugge@oracle.com>
Date:   Mon Aug 3 08:19:41 2020 +0200

    IB/mlx4: Adjust delayed work when a dup is observed
    
    [ Upstream commit 785167a114855c5aa75efca97000e405c2cc85bf ]
    
    When scheduling delayed work to clean up the cache, if the entry already
    has been scheduled for deletion, we adjust the delay.
    
    Fixes: 3cf69cc8dbeb ("IB/mlx4: Add CM paravirtualization")
    Link: https://lore.kernel.org/r/20200803061941.1139994-7-haakon.bugge@oracle.com
    Signed-off-by: Håkon Bugge <haakon.bugge@oracle.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dd154db477c2ffd79f2457f3f7ba7eabcd99b6b1
Author: Håkon Bugge <haakon.bugge@oracle.com>
Date:   Mon Aug 3 08:19:39 2020 +0200

    IB/mlx4: Fix starvation in paravirt mux/demux
    
    [ Upstream commit 7fd1507df7cee9c533f38152fcd1dd769fcac6ce ]
    
    The mlx4 driver will proxy MAD packets through the PF driver. A VM or an
    instantiated VF will send its MAD packets to the PF driver using
    loop-back. The PF driver will be informed by an interrupt, but defer the
    handling and polling of CQEs to a worker thread running on an ordered
    work-queue.
    
    Consider the following scenario: the VMs will in short proximity in time,
    for example due to a network event, send many MAD packets to the PF
    driver. Lets say there are K VMs, each sending N packets.
    
    The interrupt from the first VM will start the worker thread, which will
    poll N CQEs. A common case here is where the PF driver will multiplex the
    packets received from the VMs out on the wire QP.
    
    But before the wire QP has returned a send CQE and associated interrupt,
    the other K - 1 VMs have sent their N packets as well.
    
    The PF driver has to multiplex K * N packets out on the wire QP. But the
    send-queue on the wire QP has a finite capacity.
    
    So, in this scenario, if K * N is larger than the send-queue capacity of
    the wire QP, we will get MAD packets dropped on the floor with this
    dynamic debug message:
    
    mlx4_ib_multiplex_mad: failed sending GSI to wire on behalf of slave 2 (-11)
    
    and this despite the fact that the wire send-queue could have capacity,
    but the PF driver isn't aware, because the wire send CQEs have not yet
    been polled.
    
    We can also have a similar scenario inbound, with a wire recv-queue larger
    than the tunnel QP's send-queue. If many remote peers send MAD packets to
    the very same VM, the tunnel send-queue destined to the VM could allegedly
    be construed to be full by the PF driver.
    
    This starvation is fixed by introducing separate work queues for the wire
    QPs vs. the tunnel QPs.
    
    With this fix, using a dual ported HCA, 8 VFs instantiated, we could run
    cmtime on each of the 18 interfaces towards a similar configured peer,
    each cmtime instance with 800 QPs (all in all 14400 QPs) without a single
    CM packet getting lost.
    
    Fixes: 3cf69cc8dbeb ("IB/mlx4: Add CM paravirtualization")
    Link: https://lore.kernel.org/r/20200803061941.1139994-5-haakon.bugge@oracle.com
    Signed-off-by: Håkon Bugge <haakon.bugge@oracle.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d08a6c69f81a365c0b39839b6fd72447e0d9e7c0
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Tue Oct 13 16:58:35 2020 -0700

    mm, oom_adj: don't loop through tasks in __set_oom_adj when not necessary
    
    [ Upstream commit 67197a4f28d28d0b073ab0427b03cb2ee5382578 ]
    
    Currently __set_oom_adj loops through all processes in the system to keep
    oom_score_adj and oom_score_adj_min in sync between processes sharing
    their mm.  This is done for any task with more that one mm_users, which
    includes processes with multiple threads (sharing mm and signals).
    However for such processes the loop is unnecessary because their signal
    structure is shared as well.
    
    Android updates oom_score_adj whenever a tasks changes its role
    (background/foreground/...) or binds to/unbinds from a service, making it
    more/less important.  Such operation can happen frequently.  We noticed
    that updates to oom_score_adj became more expensive and after further
    investigation found out that the patch mentioned in "Fixes" introduced a
    regression.  Using Pixel 4 with a typical Android workload, write time to
    oom_score_adj increased from ~3.57us to ~362us.  Moreover this regression
    linearly depends on the number of multi-threaded processes running on the
    system.
    
    Mark the mm with a new MMF_MULTIPROCESS flag bit when task is created with
    (CLONE_VM && !CLONE_THREAD && !CLONE_VFORK).  Change __set_oom_adj to use
    MMF_MULTIPROCESS instead of mm_users to decide whether oom_score_adj
    update should be synchronized between multiple processes.  To prevent
    races between clone() and __set_oom_adj(), when oom_score_adj of the
    process being cloned might be modified from userspace, we use
    oom_adj_mutex.  Its scope is changed to global.
    
    The combination of (CLONE_VM && !CLONE_THREAD) is rarely used except for
    the case of vfork().  To prevent performance regressions of vfork(), we
    skip taking oom_adj_mutex and setting MMF_MULTIPROCESS when CLONE_VFORK is
    specified.  Clearing the MMF_MULTIPROCESS flag (when the last process
    sharing the mm exits) is left out of this patch to keep it simple and
    because it is believed that this threading model is rare.  Should there
    ever be a need for optimizing that case as well, it can be done by hooking
    into the exit path, likely following the mm_update_next_owner pattern.
    
    With the combination of (CLONE_VM && !CLONE_THREAD && !CLONE_VFORK) being
    quite rare, the regression is gone after the change is applied.
    
    [surenb@google.com: v3]
      Link: https://lkml.kernel.org/r/20200902012558.2335613-1-surenb@google.com
    
    Fixes: 44a70adec910 ("mm, oom_adj: make sure processes sharing mm have same view of oom_score_adj")
    Reported-by: Tim Murray <timmurray@google.com>
    Suggested-by: Michal Hocko <mhocko@kernel.org>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Eugene Syromiatnikov <esyr@redhat.com>
    Cc: Christian Kellner <christian@kellner.me>
    Cc: Adrian Reber <areber@redhat.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Alexey Gladkov <gladkov.alexey@gmail.com>
    Cc: Michel Lespinasse <walken@google.com>
    Cc: Daniel Jordan <daniel.m.jordan@oracle.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Bernd Edlinger <bernd.edlinger@hotmail.de>
    Cc: John Johansen <john.johansen@canonical.com>
    Cc: Yafang Shao <laoar.shao@gmail.com>
    Link: https://lkml.kernel.org/r/20200824153036.3201505-1-surenb@google.com
    Debugged-by: Minchan Kim <minchan@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80adae67dcbf9ec7ad3c2e26f199713952ff73da
Author: Ralph Campbell <rcampbell@nvidia.com>
Date:   Tue Oct 13 16:53:13 2020 -0700

    mm/memcg: fix device private memcg accounting
    
    [ Upstream commit 9a137153fc8798a89d8fce895cd0a06ea5b8e37c ]
    
    The code in mc_handle_swap_pte() checks for non_swap_entry() and returns
    NULL before checking is_device_private_entry() so device private pages are
    never handled.  Fix this by checking for non_swap_entry() after handling
    device private swap PTEs.
    
    I assume the memory cgroup accounting would be off somehow when moving
    a process to another memory cgroup.  Currently, the device private page
    is charged like a normal anonymous page when allocated and is uncharged
    when the page is freed so I think that path is OK.
    
    Signed-off-by: Ralph Campbell <rcampbell@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Balbir Singh <bsingharora@gmail.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Link: https://lkml.kernel.org/r/20201009215952.2726-1-rcampbell@nvidia.com
    xFixes: c733a82874a7 ("mm/memcontrol: support MEMORY_DEVICE_PRIVATE")
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 279c561e27afd5161639c6e2f1574bbc21c71a04
Author: Valentin Vidic <vvidic@valentin-vidic.from.hr>
Date:   Mon Oct 12 00:03:29 2020 +0200

    net: korina: fix kfree of rx/tx descriptor array
    
    [ Upstream commit 3af5f0f5c74ecbaf757ef06c3f80d56751277637 ]
    
    kmalloc returns KSEG0 addresses so convert back from KSEG1
    in kfree. Also make sure array is freed when the driver is
    unloaded from the kernel.
    
    Fixes: ef11291bcd5f ("Add support the Korina (IDT RC32434) Ethernet MAC")
    Signed-off-by: Valentin Vidic <vvidic@valentin-vidic.from.hr>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46ac0251fc1718032828a920c3569f6422fe6b2c
Author: Tom Rix <trix@redhat.com>
Date:   Sun Oct 4 06:19:31 2020 -0700

    mwifiex: fix double free
    
    [ Upstream commit 53708f4fd9cfe389beab5c8daa763bcd0e0b4aef ]
    
    clang static analysis reports this problem:
    
    sdio.c:2403:3: warning: Attempt to free released memory
            kfree(card->mpa_rx.buf);
            ^~~~~~~~~~~~~~~~~~~~~~~
    
    When mwifiex_init_sdio() fails in its first call to
    mwifiex_alloc_sdio_mpa_buffer, it falls back to calling it
    again.  If the second alloc of mpa_tx.buf fails, the error
    handler will try to free the old, previously freed mpa_rx.buf.
    Reviewing the code, it looks like a second double free would
    happen with mwifiex_cleanup_sdio().
    
    So set both pointers to NULL when they are freed.
    
    Fixes: 5e6e3a92b9a4 ("wireless: mwifiex: initial commit for Marvell mwifiex driver")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20201004131931.29782-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit befca3930c1f96e66c8b6927ec5dfc909f95a4e2
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Sep 28 12:13:00 2020 +0300

    scsi: be2iscsi: Fix a theoretical leak in beiscsi_create_eqs()
    
    [ Upstream commit 38b2db564d9ab7797192ef15d7aade30633ceeae ]
    
    The be_fill_queue() function can only fail when "eq_vaddress" is NULL and
    since it's non-NULL here that means the function call can't fail.  But
    imagine if it could, then in that situation we would want to store the
    "paddr" so that dma memory can be released.
    
    Link: https://lore.kernel.org/r/20200928091300.GD377727@mwanda
    Fixes: bfead3b2cb46 ("[SCSI] be2iscsi: Adding msix and mcc_rings V3")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9806df347a7b8a29a93431a3399ae8e9e7686c8
Author: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
Date:   Thu Sep 24 18:08:39 2020 +0400

    usb: dwc2: Fix INTR OUT transfers in DDMA mode.
    
    [ Upstream commit b2c586eb07efab982419f32b7c3bd96829bc8bcd ]
    
    In DDMA mode if INTR OUT transfers mps not multiple of 4 then single packet
    corresponds to single descriptor.
    
    Descriptor limit set to mps and desc chain limit set to mps *
    MAX_DMA_DESC_NUM_GENERIC. On that descriptors complete, to calculate
    transfer size should be considered correction value for each descriptor.
    
    In start request function, if "continue" is true then dma buffer address
    should be incremmented by offset for all type of transfers, not only for
    Control DATA_OUT transfers.
    
    Fixes: cf77b5fb9b394 ("usb: dwc2: gadget: Transfer length limit checking for DDMA")
    Fixes: e02f9aa6119e0 ("usb: dwc2: gadget: EP 0 specific DDMA programming")
    Fixes: aa3e8bc81311e ("usb: dwc2: gadget: DDMA transfer start and complete")
    
    Signed-off-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba7028833624d79c315a1aaf451bcc25d0571f70
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Sep 28 13:07:18 2020 +0200

    nl80211: fix non-split wiphy information
    
    [ Upstream commit ab10c22bc3b2024f0c9eafa463899a071eac8d97 ]
    
    When dumping wiphy information, we try to split the data into
    many submessages, but for old userspace we still support the
    old mode where this doesn't happen.
    
    However, in this case we were not resetting our state correctly
    and dumping multiple messages for each wiphy, which would have
    broken such older userspace.
    
    This was broken pretty much immediately afterwards because it
    only worked in the original commit where non-split dumps didn't
    have any more data than split dumps...
    
    Fixes: fe1abafd942f ("nl80211: re-add channel width and extended capa advertising")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Link: https://lore.kernel.org/r/20200928130717.3e6d9c6bada2.Ie0f151a8d0d00a8e1e18f6a8c9244dd02496af67@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43441f0c9fd6a4b014816768dbe89d3b7f3626f1
Author: Lorenzo Colitti <lorenzo@google.com>
Date:   Wed Aug 19 01:19:49 2020 +0900

    usb: gadget: u_ether: enable qmult on SuperSpeed Plus as well
    
    [ Upstream commit 4eea21dc67b0c6ba15ae41b1defa113a680a858e ]
    
    The u_ether driver has a qmult setting that multiplies the
    transmit queue length (which by default is 2).
    
    The intent is that it should be enabled at high/super speed, but
    because the code does not explicitly check for USB_SUPER_PLUS,
    it is disabled at that speed.
    
    Fix this by ensuring that the queue multiplier is enabled for any
    wired link at high speed or above. Using >= for USB_SPEED_*
    constants seems correct because it is what the gadget_is_xxxspeed
    functions do.
    
    The queue multiplier substantially helps performance at higher
    speeds. On a direct SuperSpeed Plus link to a Linux laptop,
    iperf3 single TCP stream:
    
    Before (qmult=1): 1.3 Gbps
    After  (qmult=5): 3.2 Gbps
    
    Fixes: 04617db7aa68 ("usb: gadget: add SS descriptors to Ethernet gadget")
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit acdf2d1609d18fe3be2bcc6341d115516327e84a
Author: Lorenzo Colitti <lorenzo@google.com>
Date:   Tue Aug 25 14:55:03 2020 +0900

    usb: gadget: f_ncm: fix ncm_bitrate for SuperSpeed and above.
    
    [ Upstream commit 986499b1569af980a819817f17238015b27793f6 ]
    
    Currently, SuperSpeed NCM gadgets report a speed of 851 Mbps
    in USB_CDC_NOTIFY_SPEED_CHANGE. But the calculation appears to
    assume 16 packets per microframe, and USB 3 and above no longer
    use microframes.
    
    Maximum speed is actually much higher. On a direct connection,
    theoretical throughput is at most 3.86 Gbps for gen1x1 and
    9.36 Gbps for gen2x1, and I have seen gadget->host iperf
    throughput of >2 Gbps for gen1x1 and >4 Gbps for gen2x1.
    
    Unfortunately the ConnectionSpeedChange defined in the CDC spec
    only uses 32-bit values, so we can't report accurate numbers for
    10Gbps and above. So, report 3.75Gbps for SuperSpeed (which is
    roughly maximum theoretical performance) and 4.25Gbps for
    SuperSpeed Plus (which is close to the maximum that we can report
    in a 32-bit unsigned integer).
    
    This results in:
    
    [50879.191272] cdc_ncm 2-2:1.0 enx228b127e050c: renamed from usb0
    [50879.234778] cdc_ncm 2-2:1.0 enx228b127e050c: 3750 mbit/s downlink 3750 mbit/s uplink
    
    on SuperSpeed and:
    
    [50798.434527] cdc_ncm 8-2:1.0 enx228b127e050c: renamed from usb0
    [50798.524278] cdc_ncm 8-2:1.0 enx228b127e050c: 4250 mbit/s downlink 4250 mbit/s uplink
    
    on SuperSpeed Plus.
    
    Fixes: 1650113888fe ("usb: gadget: f_ncm: add SuperSpeed descriptors for CDC NCM")
    Reviewed-by: Maciej Żenczykowski <maze@google.com>
    Signed-off-by: Lorenzo Colitti <lorenzo@google.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d309c809849a3e3296678620c1898df137c699f
Author: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
Date:   Wed Sep 30 10:31:20 2020 +0300

    iwlwifi: mvm: split a print to avoid a WARNING in ROC
    
    [ Upstream commit 903b3f9badf1d54f77b468b96706dab679b45b14 ]
    
    A print in the remain on channel code was too long and caused
    a WARNING, split it.
    
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>
    Fixes: dc28e12f2125 ("iwlwifi: mvm: ROC: Extend the ROC max delay duration & limit ROC duration")
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Link: https://lore.kernel.org/r/iwlwifi.20200930102759.58d57c0bdc68.Ib06008665e7bf1199c360aa92691d9c74fb84990@changeid
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 746f3cb2e6685a2e4e15012b614d3c6319023804
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Sep 11 14:33:26 2020 +0300

    mfd: sm501: Fix leaks in probe()
    
    [ Upstream commit 8ce24f8967df2836b4557a23e74dc4bb098249f1 ]
    
    This code should clean up if sm501_init_dev() fails.
    
    Fixes: b6d6454fdb66 ("[PATCH] mfd: SM501 core driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae11a3f78bf29b7059dbe93ffca0211ce02ac9db
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Sep 29 22:25:10 2020 +0200

    net: enic: Cure the enic api locking trainwreck
    
    [ Upstream commit a53b59ece86c86d16d12ccdaa1ad0c78250a9d96 ]
    
    enic_dev_wait() has a BUG_ON(in_interrupt()).
    
    Chasing the callers of enic_dev_wait() revealed the gems of enic_reset()
    and enic_tx_hang_reset() which are both invoked through work queues in
    order to be able to call rtnl_lock(). So far so good.
    
    After locking rtnl both functions acquire enic::enic_api_lock which
    serializes against the (ab)use from infiniband. This is where the
    trainwreck starts.
    
    enic::enic_api_lock is a spin_lock() which implicitly disables preemption,
    but both functions invoke a ton of functions under that lock which can
    sleep. The BUG_ON(in_interrupt()) does not trigger in that case because it
    can't detect the preempt disabled condition.
    
    This clearly has never been tested with any of the mandatory debug options
    for 7+ years, which would have caught that for sure.
    
    Cure it by adding a enic_api_busy member to struct enic, which is modified
    and evaluated with enic::enic_api_lock held.
    
    If enic_api_devcmd_proxy_by_index() observes enic::enic_api_busy as true,
    it drops enic::enic_api_lock and busy waits for enic::enic_api_busy to
    become false.
    
    It would be smarter to wait for a completion of that busy period, but
    enic_api_devcmd_proxy_by_index() is called with other spin locks held which
    obviously can't sleep.
    
    Remove the BUG_ON(in_interrupt()) check as well because it's incomplete and
    with proper debugging enabled the problem would have been caught from the
    debug checks in schedule_timeout().
    
    Fixes: 0b038566c0ea ("drivers/net: enic: Add an interface for USNIC to interact with firmware")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b746d74c1f1ee20c7674f03daed9cfa21cb8f9f
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Sep 25 14:22:24 2020 +0100

    qtnfmac: fix resource leaks on unsupported iftype error return path
    
    [ Upstream commit 63f6982075d890d7563e2469643f05a37d193f01 ]
    
    Currently if an unsupported iftype is detected the error return path
    does not free the cmd_skb leading to a resource leak. Fix this by
    free'ing cmd_skb.
    
    Addresses-Coverity: ("Resource leak")
    Fixes: 805b28c05c8e ("qtnfmac: prepare for AP_VLAN interface type support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200925132224.21638-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73731175366579e8e5c2f31100af477b85d48889
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Fri Sep 25 16:35:52 2020 -0700

    HID: hid-input: fix stylus battery reporting
    
    [ Upstream commit 505f394fa239cecb76d916aa858f87ed7ea7fde4 ]
    
    With commit 4f3882177240 hid-input started clearing of "ignored" usages
    to avoid using garbage that might have been left in them. However
    "battery strength" usages should not be ignored, as we do want to
    use them.
    
    Fixes: 4f3882177240 ("HID: hid-input: clear unmapped usages")
    Reported-by: Kenneth Albanowski <kenalba@google.com>
    Tested-by: Kenneth Albanowski <kenalba@google.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ac816909691cee63e36f465a16166c6b33b3d61
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Sep 24 11:36:19 2020 -0700

    quota: clear padding in v2r1_mem2diskdqb()
    
    [ Upstream commit 3d3dc274ce736227e3197868ff749cff2f175f63 ]
    
    Freshly allocated memory contains garbage, better make sure
    to init all struct v2r1_disk_dqblk fields to avoid KMSAN report:
    
    BUG: KMSAN: uninit-value in qtree_entry_unused+0x137/0x1b0 fs/quota/quota_tree.c:218
    CPU: 0 PID: 23373 Comm: syz-executor.1 Not tainted 5.9.0-rc4-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:118
     kmsan_report+0xf7/0x1e0 mm/kmsan/kmsan_report.c:122
     __msan_warning+0x58/0xa0 mm/kmsan/kmsan_instr.c:219
     qtree_entry_unused+0x137/0x1b0 fs/quota/quota_tree.c:218
     v2r1_mem2diskdqb+0x43d/0x710 fs/quota/quota_v2.c:285
     qtree_write_dquot+0x226/0x870 fs/quota/quota_tree.c:394
     v2_write_dquot+0x1ad/0x280 fs/quota/quota_v2.c:333
     dquot_commit+0x4af/0x600 fs/quota/dquot.c:482
     ext4_write_dquot fs/ext4/super.c:5934 [inline]
     ext4_mark_dquot_dirty+0x4d8/0x6a0 fs/ext4/super.c:5985
     mark_dquot_dirty fs/quota/dquot.c:347 [inline]
     mark_all_dquot_dirty fs/quota/dquot.c:385 [inline]
     dquot_alloc_inode+0xc05/0x12b0 fs/quota/dquot.c:1755
     __ext4_new_inode+0x8204/0x9d70 fs/ext4/ialloc.c:1155
     ext4_tmpfile+0x41a/0x850 fs/ext4/namei.c:2686
     vfs_tmpfile+0x2a2/0x570 fs/namei.c:3283
     do_tmpfile fs/namei.c:3316 [inline]
     path_openat+0x4035/0x6a90 fs/namei.c:3359
     do_filp_open+0x2b8/0x710 fs/namei.c:3395
     do_sys_openat2+0xa88/0x1140 fs/open.c:1168
     do_sys_open fs/open.c:1184 [inline]
     __do_compat_sys_openat fs/open.c:1242 [inline]
     __se_compat_sys_openat+0x2a4/0x310 fs/open.c:1240
     __ia32_compat_sys_openat+0x56/0x70 fs/open.c:1240
     do_syscall_32_irqs_on arch/x86/entry/common.c:80 [inline]
     __do_fast_syscall_32+0x129/0x180 arch/x86/entry/common.c:139
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:162
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:205
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    RIP: 0023:0xf7ff4549
    Code: b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74 d8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90
    RSP: 002b:00000000f55cd0cc EFLAGS: 00000296 ORIG_RAX: 0000000000000127
    RAX: ffffffffffffffda RBX: 00000000ffffff9c RCX: 0000000020000000
    RDX: 0000000000410481 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:143 [inline]
     kmsan_internal_poison_shadow+0x66/0xd0 mm/kmsan/kmsan.c:126
     kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:80
     slab_alloc_node mm/slub.c:2907 [inline]
     slab_alloc mm/slub.c:2916 [inline]
     __kmalloc+0x2bb/0x4b0 mm/slub.c:3982
     kmalloc include/linux/slab.h:559 [inline]
     getdqbuf+0x56/0x150 fs/quota/quota_tree.c:52
     qtree_write_dquot+0xf2/0x870 fs/quota/quota_tree.c:378
     v2_write_dquot+0x1ad/0x280 fs/quota/quota_v2.c:333
     dquot_commit+0x4af/0x600 fs/quota/dquot.c:482
     ext4_write_dquot fs/ext4/super.c:5934 [inline]
     ext4_mark_dquot_dirty+0x4d8/0x6a0 fs/ext4/super.c:5985
     mark_dquot_dirty fs/quota/dquot.c:347 [inline]
     mark_all_dquot_dirty fs/quota/dquot.c:385 [inline]
     dquot_alloc_inode+0xc05/0x12b0 fs/quota/dquot.c:1755
     __ext4_new_inode+0x8204/0x9d70 fs/ext4/ialloc.c:1155
     ext4_tmpfile+0x41a/0x850 fs/ext4/namei.c:2686
     vfs_tmpfile+0x2a2/0x570 fs/namei.c:3283
     do_tmpfile fs/namei.c:3316 [inline]
     path_openat+0x4035/0x6a90 fs/namei.c:3359
     do_filp_open+0x2b8/0x710 fs/namei.c:3395
     do_sys_openat2+0xa88/0x1140 fs/open.c:1168
     do_sys_open fs/open.c:1184 [inline]
     __do_compat_sys_openat fs/open.c:1242 [inline]
     __se_compat_sys_openat+0x2a4/0x310 fs/open.c:1240
     __ia32_compat_sys_openat+0x56/0x70 fs/open.c:1240
     do_syscall_32_irqs_on arch/x86/entry/common.c:80 [inline]
     __do_fast_syscall_32+0x129/0x180 arch/x86/entry/common.c:139
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:162
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:205
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    
    Fixes: 498c60153ebb ("quota: Implement quota format with 64-bit space and inode limits")
    Link: https://lore.kernel.org/r/20200924183619.4176790-1-edumazet@google.com
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jan Kara <jack@suse.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1818227f592bd1f9ad692640919e7462b76f83a1
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Jul 24 23:03:54 2020 -0700

    usb: dwc2: Fix parameter type in function pointer prototype
    
    [ Upstream commit 362b9398c962c9ec563653444e15ef9032ef3a90 ]
    
    When booting up on a Raspberry Pi 4 with Control Flow Integrity checking
    enabled, the following warning/panic happens:
    
    [    1.626435] CFI failure (target: dwc2_set_bcm_params+0x0/0x4):
    [    1.632408] WARNING: CPU: 0 PID: 32 at kernel/cfi.c:30 __cfi_check_fail+0x54/0x5c
    [    1.640021] Modules linked in:
    [    1.643137] CPU: 0 PID: 32 Comm: kworker/0:1 Not tainted 5.8.0-rc6-next-20200724-00051-g89ba619726de #1
    [    1.652693] Hardware name: Raspberry Pi 4 Model B Rev 1.2 (DT)
    [    1.658637] Workqueue: events deferred_probe_work_func
    [    1.663870] pstate: 60000005 (nZCv daif -PAN -UAO BTYPE=--)
    [    1.669542] pc : __cfi_check_fail+0x54/0x5c
    [    1.673798] lr : __cfi_check_fail+0x54/0x5c
    [    1.678050] sp : ffff8000102bbaa0
    [    1.681419] x29: ffff8000102bbaa0 x28: ffffab09e21c7000
    [    1.686829] x27: 0000000000000402 x26: ffff0000f6e7c228
    [    1.692238] x25: 00000000fb7cdb0d x24: 0000000000000005
    [    1.697647] x23: ffffab09e2515000 x22: ffffab09e069a000
    [    1.703055] x21: 4c550309df1cf4c1 x20: ffffab09e2433c60
    [    1.708462] x19: ffffab09e160dc50 x18: ffff0000f6e8cc78
    [    1.713870] x17: 0000000000000041 x16: ffffab09e0bce6f8
    [    1.719278] x15: ffffab09e1c819b7 x14: 0000000000000003
    [    1.724686] x13: 00000000ffffefff x12: 0000000000000000
    [    1.730094] x11: 0000000000000000 x10: 00000000ffffffff
    [    1.735501] x9 : c932f7abfc4bc600 x8 : c932f7abfc4bc600
    [    1.740910] x7 : 077207610770075f x6 : ffff0000f6c38f00
    [    1.746317] x5 : 0000000000000000 x4 : 0000000000000000
    [    1.751723] x3 : 0000000000000000 x2 : 0000000000000000
    [    1.757129] x1 : ffff8000102bb7d8 x0 : 0000000000000032
    [    1.762539] Call trace:
    [    1.765030]  __cfi_check_fail+0x54/0x5c
    [    1.768938]  __cfi_check+0x5fa6c/0x66afc
    [    1.772932]  dwc2_init_params+0xd74/0xd78
    [    1.777012]  dwc2_driver_probe+0x484/0x6ec
    [    1.781180]  platform_drv_probe+0xb4/0x100
    [    1.785350]  really_probe+0x228/0x63c
    [    1.789076]  driver_probe_device+0x80/0xc0
    [    1.793247]  __device_attach_driver+0x114/0x160
    [    1.797857]  bus_for_each_drv+0xa8/0x128
    [    1.801851]  __device_attach.llvm.14901095709067289134+0xc0/0x170
    [    1.808050]  bus_probe_device+0x44/0x100
    [    1.812044]  deferred_probe_work_func+0x78/0xb8
    [    1.816656]  process_one_work+0x204/0x3c4
    [    1.820736]  worker_thread+0x2f0/0x4c4
    [    1.824552]  kthread+0x174/0x184
    [    1.827837]  ret_from_fork+0x10/0x18
    
    CFI validates that all indirect calls go to a function with the same
    exact function pointer prototype. In this case, dwc2_set_bcm_params
    is the target, which has a parameter of type 'struct dwc2_hsotg *',
    but it is being implicitly cast to have a parameter of type 'void *'
    because that is the set_params function pointer prototype. Make the
    function pointer protoype match the definitions so that there is no
    more violation.
    
    Fixes: 7de1debcd2de ("usb: dwc2: Remove platform static params")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1107
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84a18bd8b889ce80ffa9434587ad8741d9d6f86f
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Sep 22 10:38:56 2020 +0200

    ALSA: seq: oss: Avoid mutex lock for a long-time ioctl
    
    [ Upstream commit 2759caad2600d503c3b0ed800e7e03d2cd7a4c05 ]
    
    Recently we applied a fix to cover the whole OSS sequencer ioctls with
    the mutex for dealing with the possible races.  This works fine in
    general, but in theory, this may lead to unexpectedly long stall if an
    ioctl like SNDCTL_SEQ_SYNC is issued and an event with the far future
    timestamp was queued.
    
    For fixing such a potential stall, this patch changes the mutex lock
    applied conditionally excluding such an ioctl command.  Also, change
    the mutex_lock() with the interruptible version for user to allow
    escaping from the big-hammer mutex.
    
    Fixes: 80982c7e834e ("ALSA: seq: oss: Serialize ioctls")
    Suggested-by: Pavel Machek <pavel@ucw.cz>
    Link: https://lore.kernel.org/r/20200922083856.28572-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3179381303a6bfebc2c20f03842b126e5e073cba
Author: Souptick Joarder <jrdr.linux@gmail.com>
Date:   Sun Sep 20 08:21:35 2020 +0530

    misc: mic: scif: Fix error handling path
    
    [ Upstream commit a81072a9c0ae734b7889929b0bc070fe3f353f0e ]
    
    Inside __scif_pin_pages(), when map_flags != SCIF_MAP_KERNEL it
    will call pin_user_pages_fast() to map nr_pages. However,
    pin_user_pages_fast() might fail with a return value -ERRNO.
    
    The return value is stored in pinned_pages->nr_pages. which in
    turn is passed to unpin_user_pages(), which expects
    pinned_pages->nr_pages >=0, else disaster.
    
    Fix this by assigning pinned_pages->nr_pages to 0 if
    pin_user_pages_fast() returns -ERRNO.
    
    Fixes: ba612aa8b487 ("misc: mic: SCIF memory registration and unregistration")
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: John Hubbard <jhubbard@nvidia.com>
    Signed-off-by: Souptick Joarder <jrdr.linux@gmail.com>
    Link: https://lore.kernel.org/r/1600570295-29546-1-git-send-email-jrdr.linux@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de3dfc44e17a05d6ca4b1244b702dcdc8c498afe
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Sep 18 17:27:32 2020 +0300

    ath6kl: wmi: prevent a shift wrapping bug in ath6kl_wmi_delete_pstream_cmd()
    
    [ Upstream commit 6a950755cec1a90ddaaff3e4acb5333617441c32 ]
    
    The "tsid" is a user controlled u8 which comes from debugfs.  Values
    more than 15 are invalid because "active_tsids" is a 16 bit variable.
    If the value of "tsid" is more than 31 then that leads to a shift
    wrapping bug.
    
    Fixes: 8fffd9e5ec9e ("ath6kl: Implement support for QOS-enable and QOS-disable from userspace")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200918142732.GA909725@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ba0d651c617c44387d59d2cd73e04b7c5de7b2c5
Author: Thomas Preston <thomas.preston@codethink.co.uk>
Date:   Fri Aug 28 22:32:26 2020 +0100

    pinctrl: mcp23s08: Fix mcp23x17 precious range
    
    [ Upstream commit b9b7fb29433b906635231d0a111224efa009198c ]
    
    On page 23 of the datasheet [0] it says "The register remains unchanged
    until the interrupt is cleared via a read of INTCAP or GPIO." Include
    INTCAPA and INTCAPB registers in precious range, so that they aren't
    accidentally cleared when we read via debugfs.
    
    [0] https://ww1.microchip.com/downloads/en/DeviceDoc/20001952C.pdf
    
    Fixes: 8f38910ba4f6 ("pinctrl: mcp23s08: switch to regmap caching")
    Signed-off-by: Thomas Preston <thomas.preston@codethink.co.uk>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20200828213226.1734264-3-thomas.preston@codethink.co.uk
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23e3e653e1b4d10387bc73e4dde5e0d56140eb7a
Author: Thomas Preston <thomas.preston@codethink.co.uk>
Date:   Fri Aug 28 22:32:25 2020 +0100

    pinctrl: mcp23s08: Fix mcp23x17_regmap initialiser
    
    [ Upstream commit b445f6237744df5e8d4f56f8733b2108c611220a ]
    
    The mcp23x17_regmap is initialised with structs named "mcp23x16".
    However, the mcp23s08 driver doesn't support the MCP23016 device yet, so
    this appears to be a typo.
    
    Fixes: 8f38910ba4f6 ("pinctrl: mcp23s08: switch to regmap caching")
    Signed-off-by: Thomas Preston <thomas.preston@codethink.co.uk>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Link: https://lore.kernel.org/r/20200828213226.1734264-2-thomas.preston@codethink.co.uk
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d9c5a2c971b78993eb27c7da3d16884124d2dfa
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Aug 24 11:57:35 2020 +0300

    HID: roccat: add bounds checking in kone_sysfs_write_settings()
    
    [ Upstream commit d4f98dbfe717490e771b6e701904bfcf4b4557f0 ]
    
    This code doesn't check if "settings->startup_profile" is within bounds
    and that could result in an out of bounds array access.  What the code
    does do is it checks if the settings can be written to the firmware, so
    it's possible that the firmware has a bounds check?  It's safer and
    easier to verify when the bounds checking is done in the kernel.
    
    Fixes: 14bf62cde794 ("HID: add driver for Roccat Kone gaming mouse")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11b96a03284bcca972bb9fbc3247de6785a63199
Author: Tom Rix <trix@redhat.com>
Date:   Wed Aug 5 07:52:08 2020 -0700

    video: fbdev: sis: fix null ptr dereference
    
    [ Upstream commit ad6f93e9cd56f0b10e9b22e3e137d17a1a035242 ]
    
    Clang static analysis reports this representative error
    
    init.c:2501:18: warning: Array access (from variable 'queuedata') results
      in a null pointer dereference
          templ |= ((queuedata[i] & 0xc0) << 3);
    
    This is the problem block of code
    
       if(ModeNo > 0x13) {
          ...
          if(SiS_Pr->ChipType == SIS_730) {
             queuedata = &FQBQData730[0];
          } else {
             queuedata = &FQBQData[0];
          }
       } else {
    
       }
    
    queuedata is not set in the else block
    
    Reviewing the old code, the arrays FQBQData730 and FQBQData were
    used directly.
    
    So hoist the setting of queuedata out of the if-else block.
    
    Fixes: 544393fe584d ("[PATCH] sisfb update")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Cc: Thomas Winischhofer <thomas@winischhofer.net>
    Cc: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200805145208.17727-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f05fc53e053aaa98696aae01913214c912f7471
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jul 23 18:02:27 2020 +0100

    video: fbdev: vga16fb: fix setting of pixclock because a pass-by-value error
    
    [ Upstream commit c72fab81ceaa54408b827a2f0486d9a0f4be34cf ]
    
    The pixclock is being set locally because it is being passed as a
    pass-by-value argument rather than pass-by-reference, so the computed
    pixclock is never being set in var->pixclock. Fix this by passing
    by reference.
    
    [This dates back to 2002, I found the offending commit from the git
    history git://git.kernel.org/pub/scm/linux/kernel/git/tglx/history.git ]
    
    Addresses-Coverity: ("Unused value")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jani Nikula <jani.nikula@intel.com>
    [b.zolnierkie: minor patch summary fixup]
    [b.zolnierkie: removed "Fixes:" tag (not in upstream tree)]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200723170227.996229-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 758ab22167d1138af6ecc611b65ee46baad58ee2
Author: Souptick Joarder <jrdr.linux@gmail.com>
Date:   Wed Sep 2 02:51:11 2020 +0530

    drivers/virt/fsl_hypervisor: Fix error handling path
    
    [ Upstream commit 7f360bec37857bfd5a48cef21d86f58a09a3df63 ]
    
    First, when memory allocation for sg_list_unaligned failed, there
    is a bug of calling put_pages() as we haven't pinned any pages.
    
    Second, if get_user_pages_fast() failed we should unpin num_pinned
    pages.
    
    This will address both.
    
    As part of these changes, minor update in documentation.
    
    Fixes: 6db7199407ca ("drivers/virt: introduce Freescale hypervisor management driver")
    Signed-off-by: Souptick Joarder <jrdr.linux@gmail.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: John Hubbard <jhubbard@nvidia.com>
    Link: https://lore.kernel.org/r/1598995271-6755-1-git-send-email-jrdr.linux@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fb4a4be480c30705cda5b430d9d630458e7084b2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Sep 3 13:23:24 2020 +0200

    pwm: lpss: Add range limit check for the base_unit register value
    
    [ Upstream commit ef9f60daab309558c8bb3e086a9a11ee40bd6061 ]
    
    When the user requests a high enough period ns value, then the
    calculations in pwm_lpss_prepare() might result in a base_unit value of 0.
    
    But according to the data-sheet the way the PWM controller works is that
    each input clock-cycle the base_unit gets added to a N bit counter and
    that counter overflowing determines the PWM output frequency. Adding 0
    to the counter is a no-op. The data-sheet even explicitly states that
    writing 0 to the base_unit bits will result in the PWM outputting a
    continuous 0 signal.
    
    When the user requestes a low enough period ns value, then the
    calculations in pwm_lpss_prepare() might result in a base_unit value
    which is bigger then base_unit_range - 1. Currently the codes for this
    deals with this by applying a mask:
    
            base_unit &= (base_unit_range - 1);
    
    But this means that we let the value overflow the range, we throw away the
    higher bits and store whatever value is left in the lower bits into the
    register leading to a random output frequency, rather then clamping the
    output frequency to the highest frequency which the hardware can do.
    
    This commit fixes both issues by clamping the base_unit value to be
    between 1 and (base_unit_range - 1).
    
    Fixes: 684309e5043e ("pwm: lpss: Avoid potential overflow of base_unit")
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200903112337.4113-5-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c62faa6e13ad262c39ab86976c73ee968231d374
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Sep 3 13:23:23 2020 +0200

    pwm: lpss: Fix off by one error in base_unit math in pwm_lpss_prepare()
    
    [ Upstream commit 181f4d2f44463fe09fe4df02e03095cb87151c29 ]
    
    According to the data-sheet the way the PWM controller works is that
    each input clock-cycle the base_unit gets added to a N bit counter and
    that counter overflowing determines the PWM output frequency.
    
    So assuming e.g. a 16 bit counter this means that if base_unit is set to 1,
    after 65535 input clock-cycles the counter has been increased from 0 to
    65535 and it will overflow on the next cycle, so it will overflow after
    every 65536 clock cycles and thus the calculations done in
    pwm_lpss_prepare() should use 65536 and not 65535.
    
    This commit fixes this. Note this also aligns the calculations in
    pwm_lpss_prepare() with those in pwm_lpss_get_state().
    
    Note this effectively reverts commit 684309e5043e ("pwm: lpss: Avoid
    potential overflow of base_unit"). The next patch in this series really
    fixes the potential overflow of the base_unit value.
    
    Fixes: 684309e5043e ("pwm: lpss: Avoid potential overflow of base_unit")
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Acked-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200903112337.4113-4-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41cb3a08bbafe0d78853ba2234e99387c9428ed6
Author: Artem Savkov <asavkov@redhat.com>
Date:   Wed Sep 2 14:00:45 2020 +0200

    pty: do tty_flip_buffer_push without port->lock in pty_write
    
    [ Upstream commit 71a174b39f10b4b93223d374722aa894b5d8a82e ]
    
    b6da31b2c07c "tty: Fix data race in tty_insert_flip_string_fixed_flag"
    puts tty_flip_buffer_push under port->lock introducing the following
    possible circular locking dependency:
    
    [30129.876566] ======================================================
    [30129.876566] WARNING: possible circular locking dependency detected
    [30129.876567] 5.9.0-rc2+ #3 Tainted: G S      W
    [30129.876568] ------------------------------------------------------
    [30129.876568] sysrq.sh/1222 is trying to acquire lock:
    [30129.876569] ffffffff92c39480 (console_owner){....}-{0:0}, at: console_unlock+0x3fe/0xa90
    
    [30129.876572] but task is already holding lock:
    [30129.876572] ffff888107cb9018 (&pool->lock/1){-.-.}-{2:2}, at: show_workqueue_state.cold.55+0x15b/0x6ca
    
    [30129.876576] which lock already depends on the new lock.
    
    [30129.876577] the existing dependency chain (in reverse order) is:
    
    [30129.876578] -> #3 (&pool->lock/1){-.-.}-{2:2}:
    [30129.876581]        _raw_spin_lock+0x30/0x70
    [30129.876581]        __queue_work+0x1a3/0x10f0
    [30129.876582]        queue_work_on+0x78/0x80
    [30129.876582]        pty_write+0x165/0x1e0
    [30129.876583]        n_tty_write+0x47f/0xf00
    [30129.876583]        tty_write+0x3d6/0x8d0
    [30129.876584]        vfs_write+0x1a8/0x650
    
    [30129.876588] -> #2 (&port->lock#2){-.-.}-{2:2}:
    [30129.876590]        _raw_spin_lock_irqsave+0x3b/0x80
    [30129.876591]        tty_port_tty_get+0x1d/0xb0
    [30129.876592]        tty_port_default_wakeup+0xb/0x30
    [30129.876592]        serial8250_tx_chars+0x3d6/0x970
    [30129.876593]        serial8250_handle_irq.part.12+0x216/0x380
    [30129.876593]        serial8250_default_handle_irq+0x82/0xe0
    [30129.876594]        serial8250_interrupt+0xdd/0x1b0
    [30129.876595]        __handle_irq_event_percpu+0xfc/0x850
    
    [30129.876602] -> #1 (&port->lock){-.-.}-{2:2}:
    [30129.876605]        _raw_spin_lock_irqsave+0x3b/0x80
    [30129.876605]        serial8250_console_write+0x12d/0x900
    [30129.876606]        console_unlock+0x679/0xa90
    [30129.876606]        register_console+0x371/0x6e0
    [30129.876607]        univ8250_console_init+0x24/0x27
    [30129.876607]        console_init+0x2f9/0x45e
    
    [30129.876609] -> #0 (console_owner){....}-{0:0}:
    [30129.876611]        __lock_acquire+0x2f70/0x4e90
    [30129.876612]        lock_acquire+0x1ac/0xad0
    [30129.876612]        console_unlock+0x460/0xa90
    [30129.876613]        vprintk_emit+0x130/0x420
    [30129.876613]        printk+0x9f/0xc5
    [30129.876614]        show_pwq+0x154/0x618
    [30129.876615]        show_workqueue_state.cold.55+0x193/0x6ca
    [30129.876615]        __handle_sysrq+0x244/0x460
    [30129.876616]        write_sysrq_trigger+0x48/0x4a
    [30129.876616]        proc_reg_write+0x1a6/0x240
    [30129.876617]        vfs_write+0x1a8/0x650
    
    [30129.876619] other info that might help us debug this:
    
    [30129.876620] Chain exists of:
    [30129.876621]   console_owner --> &port->lock#2 --> &pool->lock/1
    
    [30129.876625]  Possible unsafe locking scenario:
    
    [30129.876626]        CPU0                    CPU1
    [30129.876626]        ----                    ----
    [30129.876627]   lock(&pool->lock/1);
    [30129.876628]                                lock(&port->lock#2);
    [30129.876630]                                lock(&pool->lock/1);
    [30129.876631]   lock(console_owner);
    
    [30129.876633]  *** DEADLOCK ***
    
    [30129.876634] 5 locks held by sysrq.sh/1222:
    [30129.876634]  #0: ffff8881d3ce0470 (sb_writers#3){.+.+}-{0:0}, at: vfs_write+0x359/0x650
    [30129.876637]  #1: ffffffff92c612c0 (rcu_read_lock){....}-{1:2}, at: __handle_sysrq+0x4d/0x460
    [30129.876640]  #2: ffffffff92c612c0 (rcu_read_lock){....}-{1:2}, at: show_workqueue_state+0x5/0xf0
    [30129.876642]  #3: ffff888107cb9018 (&pool->lock/1){-.-.}-{2:2}, at: show_workqueue_state.cold.55+0x15b/0x6ca
    [30129.876645]  #4: ffffffff92c39980 (console_lock){+.+.}-{0:0}, at: vprintk_emit+0x123/0x420
    
    [30129.876648] stack backtrace:
    [30129.876649] CPU: 3 PID: 1222 Comm: sysrq.sh Tainted: G S      W         5.9.0-rc2+ #3
    [30129.876649] Hardware name: Intel Corporation 2012 Client Platform/Emerald Lake 2, BIOS ACRVMBY1.86C.0078.P00.1201161002 01/16/2012
    [30129.876650] Call Trace:
    [30129.876650]  dump_stack+0x9d/0xe0
    [30129.876651]  check_noncircular+0x34f/0x410
    [30129.876653]  __lock_acquire+0x2f70/0x4e90
    [30129.876656]  lock_acquire+0x1ac/0xad0
    [30129.876658]  console_unlock+0x460/0xa90
    [30129.876660]  vprintk_emit+0x130/0x420
    [30129.876660]  printk+0x9f/0xc5
    [30129.876661]  show_pwq+0x154/0x618
    [30129.876662]  show_workqueue_state.cold.55+0x193/0x6ca
    [30129.876664]  __handle_sysrq+0x244/0x460
    [30129.876665]  write_sysrq_trigger+0x48/0x4a
    [30129.876665]  proc_reg_write+0x1a6/0x240
    [30129.876666]  vfs_write+0x1a8/0x650
    
    It looks like the commit was aimed to protect tty_insert_flip_string and
    there is no need for tty_flip_buffer_push to be under this lock.
    
    Fixes: b6da31b2c07c ("tty: Fix data race in tty_insert_flip_string_fixed_flag")
    Signed-off-by: Artem Savkov <asavkov@redhat.com>
    Acked-by: Jiri Slaby <jirislaby@kernel.org>
    Link: https://lore.kernel.org/r/20200902120045.3693075-1-asavkov@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1be1756688a4b8e9c940846a1aa89fbd398d564c
Author: Tyrel Datwyler <tyreld@linux.ibm.com>
Date:   Thu Aug 20 18:46:38 2020 -0500

    tty: hvcs: Don't NULL tty->driver_data until hvcs_cleanup()
    
    [ Upstream commit 63ffcbdad738e3d1c857027789a2273df3337624 ]
    
    The code currently NULLs tty->driver_data in hvcs_close() with the
    intent of informing the next call to hvcs_open() that device needs to be
    reconfigured. However, when hvcs_cleanup() is called we copy hvcsd from
    tty->driver_data which was previoulsy NULLed by hvcs_close() and our
    call to tty_port_put(&hvcsd->port) doesn't actually do anything since
    &hvcsd->port ends up translating to NULL by chance. This has the side
    effect that when hvcs_remove() is called we have one too many port
    references preventing hvcs_destuct_port() from ever being called. This
    also prevents us from reusing the /dev/hvcsX node in a future
    hvcs_probe() and we can eventually run out of /dev/hvcsX devices.
    
    Fix this by waiting to NULL tty->driver_data in hvcs_cleanup().
    
    Fixes: 27bf7c43a19c ("TTY: hvcs, add tty install")
    Signed-off-by: Tyrel Datwyler <tyreld@linux.ibm.com>
    Link: https://lore.kernel.org/r/20200820234643.70412-1-tyreld@linux.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b5b76fdf879372560c4ae84027917a7e66ef53d6
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Fri Aug 28 08:39:50 2020 -0400

    tty: serial: earlycon dependency
    
    [ Upstream commit 0fb9342d06b0f667b915ba58bfefc030e534a218 ]
    
    parse_options() in drivers/tty/serial/earlycon.c calls uart_parse_earlycon
    in drivers/tty/serial/serial_core.c therefore selecting SERIAL_EARLYCON
    should automatically select SERIAL_CORE, otherwise will result in symbol
    not found error during linking if SERIAL_CORE is not configured as builtin
    
    Fixes: 9aac5887595b ("tty/serial: add generic serial earlycon")
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Link: https://lore.kernel.org/r/20200828123949.2642-1-ztong0001@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f64ead057ffcf7adf8ebc619637dcccc927d73f0
Author: Alex Dewar <alex.dewar90@gmail.com>
Date:   Tue Aug 25 17:45:18 2020 +0100

    VMCI: check return value of get_user_pages_fast() for errors
    
    [ Upstream commit 90ca6333fd65f318c47bff425e1ea36c0a5539f6 ]
    
    In a couple of places in qp_host_get_user_memory(),
    get_user_pages_fast() is called without properly checking for errors. If
    e.g. -EFAULT is returned, this negative value will then be passed on to
    qp_release_pages(), which expects a u64 as input.
    
    Fix this by only calling qp_release_pages() when we have a positive
    number returned.
    
    Fixes: 06164d2b72aa ("VMCI: queue pairs implementation.")
    Signed-off-by: Alex Dewar <alex.dewar90@gmail.com>
    Link: https://lore.kernel.org/r/20200825164522.412392-1-alex.dewar90@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb5a67a3b680c1b546aba43c3edaa01fd8853a73
Author: dinghao.liu@zju.edu.cn <dinghao.liu@zju.edu.cn>
Date:   Thu Aug 20 14:38:17 2020 +0800

    backlight: sky81452-backlight: Fix refcount imbalance on error
    
    [ Upstream commit b7a4f80bc316a56d6ec8750e93e66f42431ed960 ]
    
    When of_property_read_u32_array() returns an error code, a
    pairing refcount decrement is needed to keep np's refcount
    balanced.
    
    Fixes: f705806c9f355 ("backlight: Add support Skyworks SKY81452 backlight driver")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a41fbb550e7cf5e620737a198bcf3ec228b03de
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:31 2020 +0800

    scsi: csiostor: Fix wrong return value in csio_hw_prep_fw()
    
    [ Upstream commit 44f4daf8678ae5f08c93bbe70792f90cd88e4649 ]
    
    On an error exit path, a negative error code should be returned instead of
    a positive return value.
    
    Link: https://lore.kernel.org/r/20200802111531.5065-1-tianjia.zhang@linux.alibaba.com
    Fixes: f40e74ffa3de ("csiostor:firmware upgrade fix")
    Cc: Praveen Madhavan <praveenm@chelsio.com>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03e3d9477a4b18222124a0606107ca1137e301a1
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Aug 2 12:15:27 2020 +0200

    scsi: qla4xxx: Fix an error handling path in 'qla4xxx_get_host_stats()'
    
    [ Upstream commit 574918e69720fe62ab3eb42ec3750230c8d16b06 ]
    
    Update the size used in 'dma_free_coherent()' in order to match the one
    used in the corresponding 'dma_alloc_coherent()'.
    
    Link: https://lore.kernel.org/r/20200802101527.676054-1-christophe.jaillet@wanadoo.fr
    Fixes: 4161cee52df8 ("[SCSI] qla4xxx: Add host statistics support")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd517fb1292db703e242c51591101f81501daab6
Author: Tom Rix <trix@redhat.com>
Date:   Wed Aug 5 13:59:11 2020 -0700

    drm/gma500: fix error check
    
    [ Upstream commit cdd296cdae1af2d27dae3fcfbdf12c5252ab78cf ]
    
    Reviewing this block of code in cdv_intel_dp_init()
    
    ret = cdv_intel_dp_aux_native_read(gma_encoder, DP_DPCD_REV, ...
    
    cdv_intel_edp_panel_vdd_off(gma_encoder);
    if (ret == 0) {
            /* if this fails, presume the device is a ghost */
            DRM_INFO("failed to retrieve link info, disabling eDP\n");
            drm_encoder_cleanup(encoder);
            cdv_intel_dp_destroy(connector);
            goto err_priv;
    } else {
    
    The (ret == 0) is not strict enough.
    cdv_intel_dp_aux_native_read() returns > 0 on success
    otherwise it is failure.
    
    So change to <=
    
    Fixes: d112a8163f83 ("gma500/cdv: Add eDP support")
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200805205911.20927-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4236c638c91de5af006fe67493b5d5ceccbd2dd
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Aug 9 11:29:06 2020 +0200

    mwifiex: Do not use GFP_KERNEL in atomic context
    
    [ Upstream commit d2ab7f00f4321370a8ee14e5630d4349fdacc42e ]
    
    A possible call chain is as follow:
      mwifiex_sdio_interrupt                            (sdio.c)
        --> mwifiex_main_process                        (main.c)
          --> mwifiex_process_cmdresp                   (cmdevt.c)
            --> mwifiex_process_sta_cmdresp             (sta_cmdresp.c)
              --> mwifiex_ret_802_11_scan               (scan.c)
                --> mwifiex_parse_single_response_buf   (scan.c)
    
    'mwifiex_sdio_interrupt()' is an interrupt function.
    
    Also note that 'mwifiex_ret_802_11_scan()' already uses GFP_ATOMIC.
    
    So use GFP_ATOMIC instead of GFP_KERNEL when memory is allocated in
    'mwifiex_parse_single_response_buf()'.
    
    Fixes: 7c6fa2a843c5 ("mwifiex: use cfg80211 dynamic scan table and cfg80211_get_bss API")
    or
    Fixes: 601216e12c65e ("mwifiex: process RX packets in SDIO IRQ thread directly")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200809092906.744621-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20ec2ab16851df7e666d5121dbb38addfd80d507
Author: Tom Rix <trix@redhat.com>
Date:   Sun Aug 2 09:18:04 2020 -0700

    brcmfmac: check ndev pointer
    
    [ Upstream commit 9c9f015bc9f8839831c7ba0a6d731a3853c464e2 ]
    
    Clang static analysis reports this error
    
    brcmfmac/core.c:490:4: warning: Dereference of null pointer
            (*ifp)->ndev->stats.rx_errors++;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    In this block of code
    
            if (ret || !(*ifp) || !(*ifp)->ndev) {
                    if (ret != -ENODATA && *ifp)
                            (*ifp)->ndev->stats.rx_errors++;
                    brcmu_pkt_buf_free_skb(skb);
                    return -ENODATA;
            }
    
    (*ifp)->ndev being NULL is caught as an error
    But then it is used to report the error.
    
    So add a check before using it.
    
    Fixes: 91b632803ee4 ("brcmfmac: Use net_device_stats from struct net_device")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200802161804.6126-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d34be00ec4217970f84075648adf0b5f6dc49a1
Author: Rohit kumar <rohitkr@codeaurora.org>
Date:   Fri Aug 14 16:23:02 2020 +0530

    ASoC: qcom: lpass-cpu: fix concurrency issue
    
    [ Upstream commit 753a6e17942f6f425ca622e1610625998312ad89 ]
    
    i2sctl register value is set to 0 during hw_free(). This
    impacts any ongoing concurrent session on the same i2s
    port. As trigger() stop already resets enable bit to 0,
    there is no need of explicit hw_free. Removing it to
    fix the issue.
    
    Fixes: 80beab8e1d86 ("ASoC: qcom: Add LPASS CPU DAI driver")
    Signed-off-by: Rohit kumar <rohitkr@codeaurora.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/1597402388-14112-7-git-send-email-rohitkr@codeaurora.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5b8396c95d75162e27580f0113c208269ea5bee
Author: Rohit kumar <rohitkr@codeaurora.org>
Date:   Fri Aug 14 16:23:00 2020 +0530

    ASoC: qcom: lpass-platform: fix memory leak
    
    [ Upstream commit 5fd188215d4eb52703600d8986b22311099a5940 ]
    
    lpass_pcm_data is never freed. Free it in close
    ops to avoid memory leak.
    
    Fixes: 022d00ee0b55 ("ASoC: lpass-platform: Fix broken pcm data usage")
    Signed-off-by: Rohit kumar <rohitkr@codeaurora.org>
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/1597402388-14112-5-git-send-email-rohitkr@codeaurora.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b0e475726489eed940edbf4130a4c80ce33a7ad
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Sun Aug 2 01:48:24 2020 +0100

    wcn36xx: Fix reported 802.11n rx_highest rate wcn3660/wcn3680
    
    [ Upstream commit 3b9fb6791e7113679b1eb472e6ce1659e80f5797 ]
    
    Qualcomm's document "80-WL007-1 Rev. J" states that the highest rx rate for
    the WCN3660 and WCN3680 on MCS 7 is 150 Mbps not the 72 Mbps stated here.
    
    This patch fixes the data-rate declared in the 5GHz table.
    
    Fixes: 8e84c2582169 ("wcn36xx: mac80211 driver for Qualcomm WCN3660/WCN3680
    hardware")
    
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200802004824.1307124-1-bryan.odonoghue@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46f3226ae0764d31dd50675e86c6a2435d14284b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 13 17:12:53 2020 +0300

    ath9k: Fix potential out of bounds in ath9k_htc_txcompletion_cb()
    
    [ Upstream commit 2705cd7558e718a7240c64eb0afb2edad5f8c190 ]
    
    The value of "htc_hdr->endpoint_id" comes from skb->data so Smatch marks
    it as untrusted so we have to check it before using it as an array
    offset.
    
    This is similar to a bug that syzkaller found in commit e4ff08a4d727
    ("ath9k: Fix use-after-free Write in ath9k_htc_rx_msg") so it is
    probably a real issue.
    
    Fixes: fb9987d0f748 ("ath9k_htc: Support for AR9271 chipset.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200813141253.GA457408@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2281e6e5c3761e25243978284199c595f054d410
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Aug 13 17:13:15 2020 +0300

    ath6kl: prevent potential array overflow in ath6kl_add_new_sta()
    
    [ Upstream commit 54f9ab7b870934b70e5a21786d951fbcf663970f ]
    
    The value for "aid" comes from skb->data so Smatch marks it as
    untrusted.  If it's invalid then it can result in an out of bounds array
    access in ath6kl_add_new_sta().
    
    Fixes: 572e27c00c9d ("ath6kl: Fix AP mode connect event parsing and TIM updates")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200813141315.GB457408@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 80f7c849c98e552a7d814aa1104dc36d9555a845
Author: Samuel Holland <samuel@sholland.org>
Date:   Sat Aug 1 11:29:56 2020 -0500

    Bluetooth: hci_uart: Cancel init work before unregistering
    
    [ Upstream commit 3b799254cf6f481460719023d7a18f46651e5e7f ]
    
    If hci_uart_tty_close() or hci_uart_unregister_device() is called while
    hu->init_ready is scheduled, hci_register_dev() could be called after
    the hci_uart is torn down. Avoid this by ensuring the work is complete
    or canceled before checking the HCI_UART_REGISTERED flag.
    
    Fixes: 9f2aee848fe6 ("Bluetooth: Add delayed init sequence support for UART controllers")
    Signed-off-by: Samuel Holland <samuel@sholland.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a1313851e7f8aee14830d360d1789cfe9fdf1e1
Author: Venkateswara Naralasetty <vnaralas@codeaurora.org>
Date:   Mon Jun 15 20:29:03 2020 +0300

    ath10k: provide survey info as accumulated data
    
    [ Upstream commit 720e5c03e5cb26d33d97f55192b791bb48478aa5 ]
    
    It is expected that the returned counters by .get_survey are monotonic
    increasing. But the data from ath10k gets reset to zero regularly. Channel
    active/busy time are then showing incorrect values (less than previous or
    sometimes zero) for the currently active channel during successive survey
    dump commands.
    
    example:
    
      $ iw dev wlan0 survey dump
      Survey data from wlan0
            frequency:                      5180 MHz [in use]
            channel active time:            54995 ms
            channel busy time:              432 ms
            channel receive time:           0 ms
            channel transmit time:          59 ms
      ...
    
      $ iw dev wlan0 survey dump
      Survey data from wlan0
            frequency:                      5180 MHz [in use]
            channel active time:            32592 ms
            channel busy time:              254 ms
            channel receive time:           0 ms
            channel transmit time:          0 ms
      ...
    
    The correct way to handle this is to use the non-clearing
    WMI_BSS_SURVEY_REQ_TYPE_READ wmi_bss_survey_req_type. The firmware will
    then accumulate the survey data and handle wrap arounds.
    
    Tested-on: QCA9984 hw1.0 10.4-3.5.3-00057
    Tested-on: QCA988X hw2.0 10.2.4-1.0-00047
    Tested-on: QCA9888 hw2.0 10.4-3.9.0.2-00024
    Tested-on: QCA4019 hw1.0 10.4-3.6-00140
    
    Fixes: fa7937e3d5c2 ("ath10k: update bss channel survey information")
    Signed-off-by: Venkateswara Naralasetty <vnaralas@codeaurora.org>
    Tested-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Tested-by: John Deere <24601deerej@gmail.com>
    [sven@narfation.org: adjust commit message]
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1592232686-28712-1-git-send-email-kvalo@codeaurora.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e80af01019a887a0168271ed34174d9db16d34c
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Sat Sep 26 23:32:41 2020 +0200

    regulator: resolve supply after creating regulator
    
    [ Upstream commit aea6cb99703e17019e025aa71643b4d3e0a24413 ]
    
    When creating a new regulator its supply cannot create the sysfs link
    because the device is not yet published. Remove early supply resolving
    since it will be done later anyway. This makes the following error
    disappear and the symlinks get created instead.
    
      DCDC_REG1: supplied by VSYS
      VSYS: could not add device link regulator.3 err -2
    
    Note: It doesn't fix the problem for bypassed regulators, though.
    
    Fixes: 45389c47526d ("regulator: core: Add early supply resolution for regulators")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/ba09e0a8617ffeeb25cb4affffe6f3149319cef8.1601155770.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afb35fb2b478c2c8d2a6c6458417509f7588ccfe
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:56:05 2020 +0200

    media: ti-vpe: Fix a missing check and reference count leak
    
    [ Upstream commit 7dae2aaaf432767ca7aa11fa84643a7c2600dbdd ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    And also, when the call of function vpe_runtime_get() failed,
    we won't call vpe_runtime_put().
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails
    inside vpe_runtime_get().
    
    Fixes: 4571912743ac ("[media] v4l: ti-vpe: Add VPE mem to mem driver")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45583bb9b89a140022c703f7625d5acd1f38e27a
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 04:31:22 2020 +0200

    media: s5p-mfc: Fix a reference count leak
    
    [ Upstream commit 78741ce98c2e36188e2343434406b0e0bc50b0e7 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: c5086f130a77 ("[media] s5p-mfc: Use clock gating only on MFC v5 hardware")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50fe41dc448f9b487d9a0d597bfd347c132f78f5
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sun Jun 14 01:19:44 2020 +0200

    media: platform: fcp: Fix a reference count leak.
    
    [ Upstream commit 63e36a381d92a9cded97e90d481ee22566557dd1 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code, causing incorrect ref count if
    pm_runtime_put_noidle() is not called in error handling paths.
    Thus call pm_runtime_put_noidle() if pm_runtime_get_sync() fails.
    
    Fixes: 6eaafbdb668b ("[media] v4l: rcar-fcp: Keep the coding style consistent")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac7ca2e1f322912a33e5ac60f8a9589b6087c9a8
Author: Tom Rix <trix@redhat.com>
Date:   Sun Aug 30 18:30:43 2020 +0200

    media: tc358743: initialize variable
    
    [ Upstream commit 274cf92d5dff5c2fec1a518078542ffe70d07646 ]
    
    clang static analysis flags this error
    
    tc358743.c:1468:9: warning: Branch condition evaluates
      to a garbage value
            return handled ? IRQ_HANDLED : IRQ_NONE;
                   ^~~~~~~
    handled should be initialized to false.
    
    Fixes: d747b806abf4 ("[media] tc358743: add direct interrupt handling")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88116bedf2e92c521a62a35775c79595ccab4d2a
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Aug 26 11:26:04 2020 +0200

    media: mx2_emmaprp: Fix memleak in emmaprp_probe
    
    [ Upstream commit 21d387b8d372f859d9e87fdcc7c3b4a432737f4d ]
    
    When platform_get_irq() fails, we should release
    vfd and unregister pcdev->v4l2_dev just like the
    subsequent error paths.
    
    Fixes: d4e192cc44914 ("media: mx2_emmaprp: Check for platform_get_irq() error")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a08e97c5a7058088f62a3ca9b54f4ad50bd67d3
Author: Xiaoliang Pang <dawning.pang@gmail.com>
Date:   Mon Sep 14 11:00:51 2020 +0800

    cypto: mediatek - fix leaks in mtk_desc_ring_alloc
    
    [ Upstream commit 228d284aac61283cde508a925d666f854b57af63 ]
    
    In the init loop, if an error occurs in function 'dma_alloc_coherent',
    then goto the err_cleanup section, after run i--,
    in the array ring, the struct mtk_ring with index i will not be released,
    causing memory leaks
    
    Fixes: 785e5c616c849 ("crypto: mediatek - Add crypto driver support for some MediaTek chips")
    Cc: Ryder Lee <ryder.lee@mediatek.com>
    Signed-off-by: Xiaoliang Pang <dawning.pang@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bc003fdadcc339192ff281320031b70325d56d7
Author: Tero Kristo <t-kristo@ti.com>
Date:   Mon Sep 7 10:56:24 2020 +0300

    crypto: omap-sham - fix digcnt register handling with export/import
    
    [ Upstream commit 3faf757bad75f3fc1b2736f0431e295a073a7423 ]
    
    Running export/import for hashes in peculiar order (mostly done by
    openssl) can mess up the internal book keeping of the OMAP SHA core.
    Fix by forcibly writing the correct DIGCNT back to hardware. This issue
    was noticed while transitioning to openssl 1.1 support.
    
    Fixes: 0d373d603202 ("crypto: omap-sham - Add OMAP4/AM33XX SHAM Support")
    Signed-off-by: Tero Kristo <t-kristo@ti.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e06563ab3b7ebf4bed4c63bd9072b9d88e411a6b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Aug 24 08:53:52 2020 +0200

    media: omap3isp: Fix memleak in isp_probe
    
    [ Upstream commit d8fc21c17099635e8ebd986d042be65a6c6b5bd0 ]
    
    When devm_ioremap_resource() fails, isp should be
    freed just like other error paths in isp_probe.
    
    Fixes: 8644cdf972dd6 ("[media] omap3isp: Replace many MMIO regions by two")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1af148d4da58502b83dd0991022ade72cc81de07
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sun Jun 7 04:05:49 2020 +0200

    media: uvcvideo: Set media controller entity functions
    
    [ Upstream commit d6834b4b58d110814aaf3469e7fd87d34ae5ae81 ]
    
    The media controller core prints a warning when an entity is registered
    without a function being set. This affects the uvcvideo driver, as the
    warning was added without first addressing the issue in existing
    drivers. The problem is harmless, but unnecessarily worries users. Fix
    it by mapping UVC entity types to MC entity functions as accurately as
    possible using the existing functions.
    
    Fixes: b50bde4e476d ("[media] v4l2-subdev: use MEDIA_ENT_T_UNKNOWN for new subdevs")
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Kieran Bingham <kieran.bingham@ideasonboard.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9294f6b8bee3eee33fe1e578a840c2d63c6c175d
Author: Tom Rix <trix@redhat.com>
Date:   Sun Jul 19 17:34:47 2020 +0200

    media: m5mols: Check function pointer in m5mols_sensor_power
    
    [ Upstream commit 52438c4463ac904d14bf3496765e67750766f3a6 ]
    
    clang static analysis reports this error
    
    m5mols_core.c:767:4: warning: Called function pointer
      is null (null dereference) [core.CallAndMessage]
        info->set_power(&client->dev, 0);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    In other places, the set_power ptr is checked.
    So add a check.
    
    Fixes: bc125106f8af ("[media] Add support for M-5MOLS 8 Mega Pixel camera ISP")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1899c5645e6d9bbc01e9bf7d38d4bea9b514fce0
Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date:   Mon Aug 10 17:32:39 2020 +0200

    media: Revert "media: exynos4-is: Add missed check for pinctrl_lookup_state()"
    
    [ Upstream commit 00d21f325d58567d81d9172096692d0a9ea7f725 ]
    
    The "idle" pinctrl state is optional as documented in the DT binding.
    The change introduced by the commit being reverted makes that pinctrl state
    mandatory and breaks initialization of the whole media driver, since the
    "idle" state is not specified in any mainline dts.
    
    This reverts commit 18ffec750578 ("media: exynos4-is: Add missed check for pinctrl_lookup_state()")
    to fix the regression.
    
    Fixes: 18ffec750578 ("media: exynos4-is: Add missed check for pinctrl_lookup_state()")
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7be6a406c84aed8528e803acc9a99464de469c4
Author: Tom Rix <trix@redhat.com>
Date:   Sat Aug 22 23:15:47 2020 +0200

    media: tuner-simple: fix regression in simple_set_radio_freq
    
    [ Upstream commit 505bfc2a142f12ce7bc7a878b44abc3496f2e747 ]
    
    clang static analysis reports this problem
    
    tuner-simple.c:714:13: warning: Assigned value is
      garbage or undefined
            buffer[1] = buffer[3];
                      ^ ~~~~~~~~~
    In simple_set_radio_freq buffer[3] used to be done
    in-function with a switch of tuner type, now done
    by a call to simple_radio_bandswitch which has this case
    
            case TUNER_TENA_9533_DI:
            case TUNER_YMEC_TVF_5533MF:
                    tuner_dbg("This tuner doesn't ...
                    return 0;
    
    which does not set buffer[3].  In the old logic, this case
    would have returned 0 from simple_set_radio_freq.
    
    Recover this old behavior by returning an error for this
    codition. Since the old simple_set_radio_freq behavior
    returned a 0, do the same.
    
    Fixes: c7a9f3aa1e1b ("V4L/DVB (7129): tuner-simple: move device-specific code into three separate functions")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eae3d3fbca1bea709f483b7f09f38a00b5a7d007
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Aug 2 16:56:48 2020 +0200

    crypto: ixp4xx - Fix the size used in a 'dma_free_coherent()' call
    
    [ Upstream commit f7ade9aaf66bd5599690acf0597df2c0f6cd825a ]
    
    Update the size used in 'dma_free_coherent()' in order to match the one
    used in the corresponding 'dma_alloc_coherent()', in 'setup_crypt_desc()'.
    
    Fixes: 81bef0150074 ("crypto: ixp4xx - Hardware crypto support for IXP4xx CPUs")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8b15608ba489c931c72973dc791c1f5dec49b9b
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:32 2020 +0800

    crypto: mediatek - Fix wrong return value in mtk_desc_ring_alloc()
    
    [ Upstream commit 8cbde6c6a6d2b1599ff90f932304aab7e32fce89 ]
    
    In case of memory allocation failure, a negative error code should
    be returned.
    
    Fixes: 785e5c616c849 ("crypto: mediatek - Add crypto driver support for some MediaTek chips")
    Cc: Ryder Lee <ryder.lee@mediatek.com>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ecc1889df9d494c71435aba87a91d758a46ff35f
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Jul 31 17:03:27 2020 +1000

    crypto: algif_skcipher - EBUSY on aio should be an error
    
    [ Upstream commit 2a05b029c1ee045b886ebf9efef9985ca23450de ]
    
    I removed the MAY_BACKLOG flag on the aio path a while ago but
    the error check still incorrectly interpreted EBUSY as success.
    This may cause the submitter to wait for a request that will never
    complete.
    
    Fixes: dad419970637 ("crypto: algif_skcipher - Do not set...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4b43a1d0f6a440ab6c4d705b30a923c31172ece
Author: Mark Salter <msalter@redhat.com>
Date:   Tue Sep 15 16:41:09 2020 -0400

    drivers/perf: xgene_pmu: Fix uninitialized resource struct
    
    [ Upstream commit a76b8236edcf5b785d044b930f9e14ad02b4a484 ]
    
    This splat was reported on newer Fedora kernels booting on certain
    X-gene based machines:
    
     xgene-pmu APMC0D83:00: X-Gene PMU version 3
     Unable to handle kernel read from unreadable memory at virtual \
     address 0000000000004006
     ...
     Call trace:
      string+0x50/0x100
      vsnprintf+0x160/0x750
      devm_kvasprintf+0x5c/0xb4
      devm_kasprintf+0x54/0x60
      __devm_ioremap_resource+0xdc/0x1a0
      devm_ioremap_resource+0x14/0x20
      acpi_get_pmu_hw_inf.isra.0+0x84/0x15c
      acpi_pmu_dev_add+0xbc/0x21c
      acpi_ns_walk_namespace+0x16c/0x1e4
      acpi_walk_namespace+0xb4/0xfc
      xgene_pmu_probe_pmu_dev+0x7c/0xe0
      xgene_pmu_probe.part.0+0x2c0/0x310
      xgene_pmu_probe+0x54/0x64
      platform_drv_probe+0x60/0xb4
      really_probe+0xe8/0x4a0
      driver_probe_device+0xe4/0x100
      device_driver_attach+0xcc/0xd4
      __driver_attach+0xb0/0x17c
      bus_for_each_dev+0x6c/0xb0
      driver_attach+0x30/0x40
      bus_add_driver+0x154/0x250
      driver_register+0x84/0x140
      __platform_driver_register+0x54/0x60
      xgene_pmu_driver_init+0x28/0x34
      do_one_initcall+0x40/0x204
      do_initcalls+0x104/0x144
      kernel_init_freeable+0x198/0x210
      kernel_init+0x20/0x12c
      ret_from_fork+0x10/0x18
     Code: 91000400 110004e1 eb08009f 540000c0 (38646846)
     ---[ end trace f08c10566496a703 ]---
    
    This is due to use of an uninitialized local resource struct in the xgene
    pmu driver. The thunderx2_pmu driver avoids this by using the resource list
    constructed by acpi_dev_get_resources() rather than using a callback from
    that function. The callback in the xgene driver didn't fully initialize
    the resource. So get rid of the callback and search the resource list as
    done by thunderx2.
    
    Fixes: 832c927d119b ("perf: xgene: Add APM X-Gene SoC Performance Monitoring Unit driver")
    Signed-off-by: Mark Salter <msalter@redhat.com>
    Link: https://lore.kernel.org/r/20200915204110.326138-1-msalter@redhat.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e78de9f18ad987f8934b87f25299f9f5d022cbb8
Author: Arvind Sankar <nivedita@alum.mit.edu>
Date:   Mon Sep 7 17:39:19 2020 -0400

    x86/fpu: Allow multiple bits in clearcpuid= parameter
    
    [ Upstream commit 0a4bb5e5507a585532cc413125b921c8546fc39f ]
    
    Commit
    
      0c2a3913d6f5 ("x86/fpu: Parse clearcpuid= as early XSAVE argument")
    
    changed clearcpuid parsing from __setup() to cmdline_find_option().
    While the __setup() function would have been called for each clearcpuid=
    parameter on the command line, cmdline_find_option() will only return
    the last one, so the change effectively made it impossible to disable
    more than one bit.
    
    Allow a comma-separated list of bit numbers as the argument for
    clearcpuid to allow multiple bits to be disabled again. Log the bits
    being disabled for informational purposes.
    
    Also fix the check on the return value of cmdline_find_option(). It
    returns -1 when the option is not found, so testing as a boolean is
    incorrect.
    
    Fixes: 0c2a3913d6f5 ("x86/fpu: Parse clearcpuid= as early XSAVE argument")
    Signed-off-by: Arvind Sankar <nivedita@alum.mit.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200907213919.2423441-1-nivedita@alum.mit.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f7af49986d5cab08416d92dbc89a6fbf80f1dc20
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Aug 26 20:14:37 2020 +0800

    EDAC/i5100: Fix error handling order in i5100_init_one()
    
    [ Upstream commit 857a3139bd8be4f702c030c8ca06f3fd69c1741a ]
    
    When pci_get_device_func() fails, the driver doesn't need to execute
    pci_dev_put(). mci should still be freed, though, to prevent a memory
    leak. When pci_enable_device() fails, the error injection PCI device
    "einj" doesn't need to be disabled either.
    
     [ bp: Massage commit message, rename label to "bail_mc_free". ]
    
    Fixes: 52608ba205461 ("i5100_edac: probe for device 19 function 0")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200826121437.31606-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c12a5811a24ddad25631ecee932ed540d25c5e25
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Jul 31 17:03:50 2020 +1000

    crypto: algif_aead - Do not set MAY_BACKLOG on the async path
    
    commit cbdad1f246dd98e6c9c32a6e5212337f542aa7e0 upstream.
    
    The async path cannot use MAY_BACKLOG because it is not meant to
    block, which is what MAY_BACKLOG does.  On the other hand, both
    the sync and async paths can make use of MAY_SLEEP.
    
    Fixes: 83094e5e9e49 ("crypto: af_alg - add async support to...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d4650a37390dfebe26048e8a1a6818c2345615b
Author: Roberto Sassu <roberto.sassu@huawei.com>
Date:   Fri Sep 4 11:23:28 2020 +0200

    ima: Don't ignore errors from crypto_shash_update()
    
    commit 60386b854008adc951c470067f90a2d85b5d520f upstream.
    
    Errors returned by crypto_shash_update() are not checked in
    ima_calc_boot_aggregate_tfm() and thus can be overwritten at the next
    iteration of the loop. This patch adds a check after calling
    crypto_shash_update() and returns immediately if the result is not zero.
    
    Cc: stable@vger.kernel.org
    Fixes: 3323eec921efd ("integrity: IMA as an integrity service provider")
    Signed-off-by: Roberto Sassu <roberto.sassu@huawei.com>
    Signed-off-by: Mimi Zohar <zohar@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31e142c2103504eed2309abdb4c146404ed93195
Author: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
Date:   Sat Oct 3 23:27:07 2020 +0000

    KVM: SVM: Initialize prev_ga_tag before use
    
    commit f6426ab9c957e97418ac5b0466538792767b1738 upstream.
    
    The function amd_ir_set_vcpu_affinity makes use of the parameter struct
    amd_iommu_pi_data.prev_ga_tag to determine if it should delete struct
    amd_iommu_pi_data from a list when not running in AVIC mode.
    
    However, prev_ga_tag is initialized only when AVIC is enabled. The non-zero
    uninitialized value can cause unintended code path, which ends up making
    use of the struct vcpu_svm.ir_list and ir_list_lock without being
    initialized (since they are intended only for the AVIC case).
    
    This triggers NULL pointer dereference bug in the function vm_ir_list_del
    with the following call trace:
    
        svm_update_pi_irte+0x3c2/0x550 [kvm_amd]
        ? proc_create_single_data+0x41/0x50
        kvm_arch_irq_bypass_add_producer+0x40/0x60 [kvm]
        __connect+0x5f/0xb0 [irqbypass]
        irq_bypass_register_producer+0xf8/0x120 [irqbypass]
        vfio_msi_set_vector_signal+0x1de/0x2d0 [vfio_pci]
        vfio_msi_set_block+0x77/0xe0 [vfio_pci]
        vfio_pci_set_msi_trigger+0x25c/0x2f0 [vfio_pci]
        vfio_pci_set_irqs_ioctl+0x88/0xb0 [vfio_pci]
        vfio_pci_ioctl+0x2ea/0xed0 [vfio_pci]
        ? alloc_file_pseudo+0xa5/0x100
        vfio_device_fops_unl_ioctl+0x26/0x30 [vfio]
        ? vfio_device_fops_unl_ioctl+0x26/0x30 [vfio]
        __x64_sys_ioctl+0x96/0xd0
        do_syscall_64+0x37/0x80
        entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Therefore, initialize prev_ga_tag to zero before use. This should be safe
    because ga_tag value 0 is invalid (see function avic_vm_init).
    
    Fixes: dfa20099e26e ("KVM: SVM: Refactor AVIC vcpu initialization into avic_init_vcpu()")
    Signed-off-by: Suravee Suthikulpanit <suravee.suthikulpanit@amd.com>
    Message-Id: <20201003232707.4662-1-suravee.suthikulpanit@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4be4e76b6e480255a6f0688cfdc49e1dfabd5352
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Wed Sep 23 11:37:28 2020 -0700

    KVM: x86/mmu: Commit zap of remaining invalid pages when recovering lpages
    
    commit e89505698c9f70125651060547da4ff5046124fc upstream.
    
    Call kvm_mmu_commit_zap_page() after exiting the "prepare zap" loop in
    kvm_recover_nx_lpages() to finish zapping pages in the unlikely event
    that the loop exited due to lpage_disallowed_mmu_pages being empty.
    Because the recovery thread drops mmu_lock() when rescheduling, it's
    possible that lpage_disallowed_mmu_pages could be emptied by a different
    thread without to_zap reaching zero despite to_zap being derived from
    the number of disallowed lpages.
    
    Fixes: 1aa9b9572b105 ("kvm: x86: mmu: Recovery of shattered NX large pages")
    Cc: Junaid Shahid <junaids@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200923183735.584-2-sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93fcbc15c031d2aa0583f389749dc24ebc79cc32
Author: Shyam Prasad N <sprasad@microsoft.com>
Date:   Thu Oct 15 10:41:31 2020 -0700

    cifs: Return the error from crypt_message when enc/dec key not found.
    
    commit 0bd294b55a5de442370c29fa53bab17aef3ff318 upstream.
    
    In crypt_message, when smb2_get_enc_key returns error, we need to
    return the error back to the caller. If not, we end up processing
    the message further, causing a kernel oops due to unwarranted access
    of memory.
    
    Call Trace:
    smb3_receive_transform+0x120/0x870 [cifs]
    cifs_demultiplex_thread+0xb53/0xc20 [cifs]
    ? cifs_handle_standard+0x190/0x190 [cifs]
    kthread+0x116/0x130
    ? kthread_park+0x80/0x80
    ret_from_fork+0x1f/0x30
    
    Signed-off-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f17411ba41cb152ce36318c3074c18b888ae1cee
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 16 23:18:21 2020 +0300

    cifs: remove bogus debug code
    
    commit d367cb960ce88914898cbfa43645c2e43ede9465 upstream.
    
    The "end" pointer is either NULL or it points to the next byte to parse.
    If there isn't a next byte then dereferencing "end" is an off-by-one out
    of bounds error.  And, of course, if it's NULL that leads to an Oops.
    Printing "*end" doesn't seem very useful so let's delete this code.
    
    Also for the last debug statement, I noticed that it should be printing
    "sequence_end" instead of "end" so fix that as well.
    
    Reported-by: Dominik Maier <dmaier@sect.tu-berlin.de>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d23423dac226730e09458ac26bed18b78c2d2e5
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 15 11:42:00 2020 -0700

    icmp: randomize the global rate limiter
    
    [ Upstream commit b38e7819cae946e2edf869e604af1e65a5d241c5 ]
    
    Keyu Man reported that the ICMP rate limiter could be used
    by attackers to get useful signal. Details will be provided
    in an upcoming academic publication.
    
    Our solution is to add some noise, so that the attackers
    no longer can get help from the predictable token bucket limiter.
    
    Fixes: 4cdf507d5452 ("icmp: add a global rate limitation")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Keyu Man <kman001@ucr.edu>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea175c05712df3dd007b78225255a9e311dbf127
Author: Neal Cardwell <ncardwell@google.com>
Date:   Thu Oct 22 10:33:31 2020 -0400

    tcp: fix to update snd_wl1 in bulk receiver fast path
    
    [ Upstream commit 18ded910b589839e38a51623a179837ab4cc3789 ]
    
    In the header prediction fast path for a bulk data receiver, if no
    data is newly acknowledged then we do not call tcp_ack() and do not
    call tcp_ack_update_window(). This means that a bulk receiver that
    receives large amounts of data can have the incoming sequence numbers
    wrap, so that the check in tcp_may_update_window fails:
       after(ack_seq, tp->snd_wl1)
    
    If the incoming receive windows are zero in this state, and then the
    connection that was a bulk data receiver later wants to send data,
    that connection can find itself persistently rejecting the window
    updates in incoming ACKs. This means the connection can persistently
    fail to discover that the receive window has opened, which in turn
    means that the connection is unable to send anything, and the
    connection's sending process can get permanently "stuck".
    
    The fix is to update snd_wl1 in the header prediction fast path for a
    bulk data receiver, so that it keeps up and does not see wrapping
    problems.
    
    This fix is based on a very nice and thorough analysis and diagnosis
    by Apollon Oikonomopoulos (see link below).
    
    This is a stable candidate but there is no Fixes tag here since the
    bug predates current git history. Just for fun: looks like the bug
    dates back to when header prediction was added in Linux v2.1.8 in Nov
    1996. In that version tcp_rcv_established() was added, and the code
    only updates snd_wl1 in tcp_ack(), and in the new "Bulk data transfer:
    receiver" code path it does not call tcp_ack(). This fix seems to
    apply cleanly at least as far back as v3.2.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Reported-by: Apollon Oikonomopoulos <apoikos@dmesg.gr>
    Tested-by: Apollon Oikonomopoulos <apoikos@dmesg.gr>
    Link: https://www.spinics.net/lists/netdev/msg692430.html
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Acked-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20201022143331.1887495-1-ncardwell.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7439ef8e0f6839dd524b06aeef98cbafc20c3104
Author: Defang Bo <bodefang@126.com>
Date:   Mon Oct 19 19:38:58 2020 +0800

    nfc: Ensure presence of NFC_ATTR_FIRMWARE_NAME attribute in nfc_genl_fw_download()
    
    [ Upstream commit 280e3ebdafb863b3cb50d5842f056267e15bf40c ]
    
    Check that the NFC_ATTR_FIRMWARE_NAME attributes are provided by
    the netlink client prior to accessing them.This prevents potential
    unhandled NULL pointer dereference exceptions which can be triggered
    by malicious user-mode programs, if they omit one or both of these
    attributes.
    
    Similar to commit a0323b979f81 ("nfc: Ensure presence of required attributes in the activate_target handler").
    
    Fixes: 9674da8759df ("NFC: Add firmware upload netlink command")
    Signed-off-by: Defang Bo <bodefang@126.com>
    Link: https://lore.kernel.org/r/1603107538-4744-1-git-send-email-bodefang@126.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f90cae7f1fe36076c5f99c7f91cdf7303efdbdbd
Author: Xie He <xie.he.0141@gmail.com>
Date:   Mon Oct 19 23:34:20 2020 -0700

    net: hdlc_raw_eth: Clear the IFF_TX_SKB_SHARING flag after calling ether_setup
    
    [ Upstream commit 5fce1e43e2d5bf2f7e3224d7b99b1c65ab2c26e2 ]
    
    This driver calls ether_setup to set up the network device.
    The ether_setup function would add the IFF_TX_SKB_SHARING flag to the
    device. This flag indicates that it is safe to transmit shared skbs to
    the device.
    
    However, this is not true. This driver may pad the frame (in eth_tx)
    before transmission, so the skb may be modified.
    
    Fixes: 550fd08c2ceb ("net: Audit drivers to identify those needing IFF_TX_SKB_SHARING cleared")
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Link: https://lore.kernel.org/r/20201020063420.187497-1-xie.he.0141@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bac272f3e33bf919eefafb0eec8d90c7788cc627
Author: Xie He <xie.he.0141@gmail.com>
Date:   Mon Oct 19 18:31:52 2020 -0700

    net: hdlc: In hdlc_rcv, check to make sure dev is an HDLC device
    
    [ Upstream commit 01c4ceae0a38a0bdbfea6896f41efcd985a9c064 ]
    
    The hdlc_rcv function is used as hdlc_packet_type.func to process any
    skb received in the kernel with skb->protocol == htons(ETH_P_HDLC).
    The purpose of this function is to provide second-stage processing for
    skbs not assigned a "real" L3 skb->protocol value in the first stage.
    
    This function assumes the device from which the skb is received is an
    HDLC device (a device created by this module). It assumes that
    netdev_priv(dev) returns a pointer to "struct hdlc_device".
    
    However, it is possible that some driver in the kernel (not necessarily
    in our control) submits a received skb with skb->protocol ==
    htons(ETH_P_HDLC), from a non-HDLC device. In this case, the skb would
    still be received by hdlc_rcv. This will cause problems.
    
    hdlc_rcv should be able to recognize and drop invalid skbs. It should
    first make sure "dev" is actually an HDLC device, before starting its
    processing. This patch adds this check to hdlc_rcv.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Link: https://lore.kernel.org/r/20201020013152.89259-1-xie.he.0141@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 814a67fb64329b0c39dc8bfcd401129d1f22f68f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Oct 7 10:49:28 2020 +0300

    ALSA: bebob: potential info leak in hwdep_read()
    
    commit b41c15f4e1c1f1657da15c482fa837c1b7384452 upstream.
    
    The "count" variable needs to be capped on every path so that we don't
    copy too much information to the user.
    
    Fixes: 618eabeae711 ("ALSA: bebob: Add hwdep interface")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201007074928.GA2529578@mwanda
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79d29c866f42a1b5c7245f527fc39afd2a9f1e62
Author: Todd Kjos <tkjos@google.com>
Date:   Fri Oct 9 16:24:55 2020 -0700

    binder: fix UAF when releasing todo list
    
    commit f3277cbfba763cd2826396521b9296de67cf1bbc upstream.
    
    When releasing a thread todo list when tearing down
    a binder_proc, the following race was possible which
    could result in a use-after-free:
    
    1.  Thread 1: enter binder_release_work from binder_thread_release
    2.  Thread 2: binder_update_ref_for_handle() -> binder_dec_node_ilocked()
    3.  Thread 2: dec nodeA --> 0 (will free node)
    4.  Thread 1: ACQ inner_proc_lock
    5.  Thread 2: block on inner_proc_lock
    6.  Thread 1: dequeue work (BINDER_WORK_NODE, part of nodeA)
    7.  Thread 1: REL inner_proc_lock
    8.  Thread 2: ACQ inner_proc_lock
    9.  Thread 2: todo list cleanup, but work was already dequeued
    10. Thread 2: free node
    11. Thread 2: REL inner_proc_lock
    12. Thread 1: deref w->type (UAF)
    
    The problem was that for a BINDER_WORK_NODE, the binder_work element
    must not be accessed after releasing the inner_proc_lock while
    processing the todo list elements since another thread might be
    handling a deref on the node containing the binder_work element
    leading to the node being freed.
    
    Signed-off-by: Todd Kjos <tkjos@google.com>
    Link: https://lore.kernel.org/r/20201009232455.4054810-1-tkjos@google.com
    Cc: <stable@vger.kernel.org> # 4.14, 4.19, 5.4, 5.8
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e1ea891a242b7652cd9970564b069a73edceb5d
Author: Heiner Kallweit <hkallweit1@gmail.com>
Date:   Thu Oct 1 09:23:02 2020 +0200

    r8169: fix data corruption issue on RTL8402
    
    [ Upstream commit ef9da46ddef071e1bbb943afbbe9b38771855554 ]
    
    Petr reported that after resume from suspend RTL8402 partially
    truncates incoming packets, and re-initializing register RxConfig
    before the actual chip re-initialization sequence is needed to avoid
    the issue.
    
    Reported-by: Petr Tesarik <ptesarik@suse.cz>
    Proposed-by: Petr Tesarik <ptesarik@suse.cz>
    Tested-by: Petr Tesarik <ptesarik@suse.cz>
    Signed-off-by: Heiner Kallweit <hkallweit1@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a4e1eb06ae67edd10e618920dd42373f4f566d3
Author: Maciej Żenczykowski <maze@google.com>
Date:   Wed Sep 23 13:18:15 2020 -0700

    net/ipv4: always honour route mtu during forwarding
    
    [ Upstream commit 02a1b175b0e92d9e0fa5df3957ade8d733ceb6a0 ]
    
    Documentation/networking/ip-sysctl.txt:46 says:
      ip_forward_use_pmtu - BOOLEAN
        By default we don't trust protocol path MTUs while forwarding
        because they could be easily forged and can lead to unwanted
        fragmentation by the router.
        You only need to enable this if you have user-space software
        which tries to discover path mtus by itself and depends on the
        kernel honoring this information. This is normally not the case.
        Default: 0 (disabled)
        Possible values:
        0 - disabled
        1 - enabled
    
    Which makes it pretty clear that setting it to 1 is a potential
    security/safety/DoS issue, and yet it is entirely reasonable to want
    forwarded traffic to honour explicitly administrator configured
    route mtus (instead of defaulting to device mtu).
    
    Indeed, I can't think of a single reason why you wouldn't want to.
    Since you configured a route mtu you probably know better...
    
    It is pretty common to have a higher device mtu to allow receiving
    large (jumbo) frames, while having some routes via that interface
    (potentially including the default route to the internet) specify
    a lower mtu.
    
    Note that ipv6 forwarding uses device mtu unless the route is locked
    (in which case it will use the route mtu).
    
    This approach is not usable for IPv4 where an 'mtu lock' on a route
    also has the side effect of disabling TCP path mtu discovery via
    disabling the IPv4 DF (don't frag) bit on all outgoing frames.
    
    I'm not aware of a way to lock a route from an IPv6 RA, so that also
    potentially seems wrong.
    
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: Sunmeet Gill (Sunny) <sgill@quicinc.com>
    Cc: Vinay Paradkar <vparadka@qti.qualcomm.com>
    Cc: Tyler Wear <twear@quicinc.com>
    Cc: David Ahern <dsahern@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1836bf1267c40199d060ef44c6bacb885cbeab89
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d29ae4d1fa4c1b828a767ec8712ad64b7166dbbb
Author: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
Date:   Thu Oct 8 09:21:38 2020 +0200

    net: usb: qmi_wwan: add Cellient MPL200 card
    
    [ Upstream commit 28802e7c0c9954218d1830f7507edc9d49b03a00 ]
    
    Add usb ids of the Cellient MPL200 card.
    
    Signed-off-by: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6241e093f2654cb5ca37aaae1a8fb4e41f9b934f
Author: Jonathan Lemon <bsd@fb.com>
Date:   Thu Oct 8 11:45:26 2020 -0700

    mlx4: handle non-napi callers to napi_poll
    
    [ Upstream commit b2b8a92733b288128feb57ffa694758cf475106c ]
    
    netcons calls napi_poll with a budget of 0 to transmit packets.
    Handle this by:
     - skipping RX processing
     - do not try to recycle TX packets to the RX cache
    
    Signed-off-by: Jonathan Lemon <jonathan.lemon@gmail.com>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc83f7f0d428d53840e077ddd28b01196973b762
Author: David Ahern <dsahern@kernel.org>
Date:   Fri Oct 9 11:01:01 2020 -0700

    ipv4: Restore flowi4_oif update before call to xfrm_lookup_route
    
    [ Upstream commit 874fb9e2ca949b443cc419a4f2227cafd4381d39 ]
    
    Tobias reported regressions in IPsec tests following the patch
    referenced by the Fixes tag below. The root cause is dropping the
    reset of the flowi4_oif after the fib_lookup. Apparently it is
    needed for xfrm cases, so restore the oif update to ip_route_output_flow
    right before the call to xfrm_lookup_route.
    
    Fixes: 2fbc6e89b2f1 ("ipv4: Update exception handling for multipath routes via same device")
    Reported-by: Tobias Brunner <tobias@strongswan.org>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c7cd7b3a1695c6e220d841ec1c00f1d53fdd031
Author: David Wilder <dwilder@us.ibm.com>
Date:   Tue Oct 13 16:20:14 2020 -0700

    ibmveth: Identify ingress large send packets.
    
    [ Upstream commit 413f142cc05cb03f2d1ea83388e40c1ddc0d74e9 ]
    
    Ingress large send packets are identified by either:
    The IBMVETH_RXQ_LRG_PKT flag in the receive buffer
    or with a -1 placed in the ip header checksum.
    The method used depends on firmware version. Frame
    geometry and sufficient header validation is performed by the
    hypervisor eliminating the need for further header checks here.
    
    Fixes: 7b5967389f5a ("ibmveth: set correct gso_size and gso_type")
    Signed-off-by: David Wilder <dwilder@us.ibm.com>
    Reviewed-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Reviewed-by: Cristobal Forno <cris.forno@ibm.com>
    Reviewed-by: Pradeep Satyanarayana <pradeeps@linux.vnet.ibm.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2064873ac7386a5045f53d807ba78292341416a
Author: David Wilder <dwilder@us.ibm.com>
Date:   Tue Oct 13 16:20:13 2020 -0700

    ibmveth: Switch order of ibmveth_helper calls.
    
    [ Upstream commit 5ce9ad815a296374ca21f43f3b1ab5083d202ee1 ]
    
    ibmveth_rx_csum_helper() must be called after ibmveth_rx_mss_helper()
    as ibmveth_rx_csum_helper() may alter ip and tcp checksum values.
    
    Fixes: 66aa0678efc2 ("ibmveth: Support to enable LSO/CSO for Trunk VEA.")
    Signed-off-by: David Wilder <dwilder@us.ibm.com>
    Reviewed-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Reviewed-by: Cristobal Forno <cris.forno@ibm.com>
    Reviewed-by: Pradeep Satyanarayana <pradeeps@linux.vnet.ibm.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e1eed09719c3b865e9aec026d2abde06fd48f31
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Oct 17 10:29:55 2020 +0200

    Linux 4.14.202
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20201016090437.265805669@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a241d820da719499d1b7489173c0d67000eaabcb
Author: Dominik Przychodni <dominik.przychodni@intel.com>
Date:   Mon Aug 31 11:59:59 2020 +0100

    crypto: qat - check cipher length for aead AES-CBC-HMAC-SHA
    
    commit 45cb6653b0c355fc1445a8069ba78a4ce8720511 upstream.
    
    Return -EINVAL for authenc(hmac(sha1),cbc(aes)),
    authenc(hmac(sha256),cbc(aes)) and authenc(hmac(sha512),cbc(aes))
    if the cipher length is not multiple of the AES block.
    This is to prevent an undefined device behaviour.
    
    Fixes: d370cec32194 ("crypto: qat - Intel(R) QAT crypto interface")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dominik Przychodni <dominik.przychodni@intel.com>
    [giovanni.cabiddu@intel.com: reworded commit message]
    Signed-off-by: Giovanni Cabiddu <giovanni.cabiddu@intel.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 748afdc054a87c6422f467fbc407dceda2915407
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Oct 2 17:55:22 2020 +1000

    crypto: bcm - Verify GCM/CCM key length in setkey
    
    commit 10a2f0b311094ffd45463a529a410a51ca025f27 upstream.
    
    The setkey function for GCM/CCM algorithms didn't verify the key
    length before copying the key and subtracting the salt length.
    
    This patch delays the copying of the key til after the verification
    has been done.  It also adds checks on the key length to ensure
    that it's at least as long as the salt.
    
    Fixes: 9d12ba86f818 ("crypto: brcm - Add Broadcom SPU driver")
    Cc: <stable@vger.kernel.org>
    Reported-by: kiyin(尹亮) <kiyin@tencent.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f069733a34453252dda10c97180c017e410608bb
Author: Arnaud Patard <arnaud.patard@rtp-net.org>
Date:   Fri Aug 2 10:32:40 2019 +0200

    drivers/net/ethernet/marvell/mvmdio.c: Fix non OF case
    
    commit d934423ac26ed373dfe089734d505dca5ff679b6 upstream.
    
    Orion5.x systems are still using machine files and not device-tree.
    Commit 96cb4342382290c9 ("net: mvmdio: allow up to three clocks to be
    specified for orion-mdio") has replaced devm_clk_get() with of_clk_get(),
    leading to a oops at boot and not working network, as reported in
    https://lists.debian.org/debian-arm/2019/07/msg00088.html and possibly in
    https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=908712.
    
    Link: https://lists.debian.org/debian-arm/2019/07/msg00088.html
    Fixes: 96cb4342382290c9 ("net: mvmdio: allow up to three clocks to be specified for orion-mdio")
    Signed-off-by: Arnaud Patard <arnaud.patard@rtp-net.org>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f3f0648a7a0c9d7a1bbffd99e92a658e827bbf35
Author: Jan Kara <jack@suse.cz>
Date:   Wed Sep 30 17:08:20 2020 +0200

    reiserfs: Fix oops during mount
    
    commit c2bb80b8bdd04dfe32364b78b61b6a47f717af52 upstream.
    
    With suitably crafted reiserfs image and mount command reiserfs will
    crash when trying to verify that XATTR_ROOT directory can be looked up
    in / as that recurses back to xattr code like:
    
     xattr_lookup+0x24/0x280 fs/reiserfs/xattr.c:395
     reiserfs_xattr_get+0x89/0x540 fs/reiserfs/xattr.c:677
     reiserfs_get_acl+0x63/0x690 fs/reiserfs/xattr_acl.c:209
     get_acl+0x152/0x2e0 fs/posix_acl.c:141
     check_acl fs/namei.c:277 [inline]
     acl_permission_check fs/namei.c:309 [inline]
     generic_permission+0x2ba/0x550 fs/namei.c:353
     do_inode_permission fs/namei.c:398 [inline]
     inode_permission+0x234/0x4a0 fs/namei.c:463
     lookup_one_len+0xa6/0x200 fs/namei.c:2557
     reiserfs_lookup_privroot+0x85/0x1e0 fs/reiserfs/xattr.c:972
     reiserfs_fill_super+0x2b51/0x3240 fs/reiserfs/super.c:2176
     mount_bdev+0x24f/0x360 fs/super.c:1417
    
    Fix the problem by bailing from reiserfs_xattr_get() when xattrs are not
    yet initialized.
    
    CC: stable@vger.kernel.org
    Reported-by: syzbot+9b33c9b118d77ff59b6f@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cfb72c0c6fc3c33ee1e6ead93bccfebe7780a22
Author: Jan Kara <jack@suse.cz>
Date:   Mon Sep 21 15:08:50 2020 +0200

    reiserfs: Initialize inode keys properly
    
    commit 4443390e08d34d5771ab444f601cf71b3c9634a4 upstream.
    
    reiserfs_read_locked_inode() didn't initialize key length properly. Use
    _make_cpu_key() macro for key initialization so that all key member are
    properly initialized.
    
    CC: stable@vger.kernel.org
    Reported-by: syzbot+d94d02749498bb7bab4b@syzkaller.appspotmail.com
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 725dadb517017e328e474e9a9a37b98964844d34
Author: Mychaela N. Falconia <falcon@freecalypso.org>
Date:   Wed Sep 16 01:56:29 2020 +0000

    USB: serial: ftdi_sio: add support for FreeCalypso JTAG+UART adapters
    
    commit 6cf87e5edd9944e1d3b6efd966ea401effc304ee upstream.
    
    There exist many FT2232-based JTAG+UART adapter designs in which
    FT2232 Channel A is used for JTAG and Channel B is used for UART.
    The best way to handle them in Linux is to have the ftdi_sio driver
    create a ttyUSB device only for Channel B and not for Channel A:
    a ttyUSB device for Channel A would be bogus and will disappear as
    soon as the user runs OpenOCD or other applications that access
    Channel A for JTAG from userspace, causing undesirable noise for
    users.  The ftdi_sio driver already has a dedicated quirk for such
    JTAG+UART FT2232 adapters, and it requires assigning custom USB IDs
    to such adapters and adding these IDs to the driver with the
    ftdi_jtag_quirk applied.
    
    Boutique hardware manufacturer Falconia Partners LLC has created a
    couple of JTAG+UART adapter designs (one buffered, one unbuffered)
    as part of FreeCalypso project, and this hardware is specifically made
    to be used with Linux hosts, with the intent that Channel A will be
    accessed only from userspace via appropriate applications, and that
    Channel B will be supported by the ftdi_sio kernel driver, presenting
    a standard ttyUSB device to userspace.  Toward this end the hardware
    manufacturer will be programming FT2232 EEPROMs with custom USB IDs,
    specifically with the intent that these IDs will be recognized by
    the ftdi_sio driver with the ftdi_jtag_quirk applied.
    
    Signed-off-by: Mychaela N. Falconia <falcon@freecalypso.org>
    [johan: insert in PID order and drop unused define]
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1dd38cb54069c3b127e7627331332b58a6fd365
Author: Scott Chen <scott@labau.com.tw>
Date:   Thu Sep 24 14:27:45 2020 +0800

    USB: serial: pl2303: add device-id for HP GC device
    
    commit 031f9664f8f9356cee662335bc56c93d16e75665 upstream.
    
    This is adds a device id for HP LD381 which is a pl2303GC-base device.
    
    Signed-off-by: Scott Chen <scott@labau.com.tw>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a611bba6c70571c9ce367f8a336ae9660fc42487
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Sat Oct 10 13:59:32 2020 +0530

    staging: comedi: check validity of wMaxPacketSize of usb endpoints found
    
    commit e1f13c879a7c21bd207dc6242455e8e3a1e88b40 upstream.
    
    While finding usb endpoints in vmk80xx_find_usb_endpoints(), check if
    wMaxPacketSize = 0 for the endpoints found.
    
    Some devices have isochronous endpoints that have wMaxPacketSize = 0
    (as required by the USB-2 spec).
    However, since this doesn't apply here, wMaxPacketSize = 0 can be
    considered to be invalid.
    
    Reported-by: syzbot+009f546aa1370056b1c2@syzkaller.appspotmail.com
    Tested-by: syzbot+009f546aa1370056b1c2@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20201010082933.5417-1-anant.thazhemadam@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf60e97f5971245f59215de0320423daa4afde43
Author: Leonid Bloch <lb.workbox@gmail.com>
Date:   Sun Oct 4 18:58:13 2020 +0300

    USB: serial: option: Add Telit FT980-KS composition
    
    commit 924a9213358fb92fa3c3225d6d042aa058167405 upstream.
    
    This commit adds the following Telit FT980-KS composition:
    
    0x1054: rndis, diag, adb, nmea, modem, modem, aux
    
    AT commands can be sent to /dev/ttyUSB2.
    
    Signed-off-by: Leonid Bloch <lb.workbox@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/ce86bc05-f4e2-b199-0cdc-792715e3f275@asocscloud.com
    Link: https://lore.kernel.org/r/20201004155813.2342-1-lb.workbox@gmail.com
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7da637a9a8678708e1eaa90e0f6fc1301c5672fd
Author: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
Date:   Sat Oct 3 11:40:29 2020 +0200

    USB: serial: option: add Cellient MPL200 card
    
    commit 3e765cab8abe7f84cb80d4a7a973fc97d5742647 upstream.
    
    Add usb ids of the Cellient MPL200 card.
    
    Signed-off-by: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/3db5418fe9e516f4b290736c5a199c9796025e3c.1601715478.git.wilken.gottwalt@mailbox.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f4aa3dd46b93c115d1fc389c42bbb0ff26348401
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Sep 24 11:14:10 2020 +0200

    media: usbtv: Fix refcounting mixup
    
    commit bf65f8aabdb37bc1a785884374e919477fe13e10 upstream.
    
    The premature free in the error path is blocked by V4L
    refcounting, not USB refcounting. Thanks to
    Ben Hutchings for review.
    
    [v2] corrected attributions
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Fixes: 50e704453553 ("media: usbtv: prevent double free in error case")
    CC: stable@vger.kernel.org
    Reported-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14431bdfa3febcf81ec98c8628320ad5ee88d7c4
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Wed May 20 14:20:14 2020 -0700

    Bluetooth: Disconnect if E0 is used for Level 4
    
    commit 8746f135bb01872ff412d408ea1aa9ebd328c1f5 upstream.
    
    E0 is not allowed with Level 4:
    
    BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part C page 1319:
    
      '128-bit equivalent strength for link and encryption keys
       required using FIPS approved algorithms (E0 not allowed,
       SAFER+ not allowed, and P-192 not allowed; encryption key
       not shortened'
    
    SC enabled:
    
    > HCI Event: Read Remote Extended Features (0x23) plen 13
            Status: Success (0x00)
            Handle: 256
            Page: 1/2
            Features: 0x0b 0x00 0x00 0x00 0x00 0x00 0x00 0x00
              Secure Simple Pairing (Host Support)
              LE Supported (Host)
              Secure Connections (Host Support)
    > HCI Event: Encryption Change (0x08) plen 4
            Status: Success (0x00)
            Handle: 256
            Encryption: Enabled with AES-CCM (0x02)
    
    SC disabled:
    
    > HCI Event: Read Remote Extended Features (0x23) plen 13
            Status: Success (0x00)
            Handle: 256
            Page: 1/2
            Features: 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00
              Secure Simple Pairing (Host Support)
              LE Supported (Host)
    > HCI Event: Encryption Change (0x08) plen 4
            Status: Success (0x00)
            Handle: 256
            Encryption: Enabled with E0 (0x01)
    [May 8 20:23] Bluetooth: hci0: Invalid security: expect AES but E0 was used
    < HCI Command: Disconnect (0x01|0x0006) plen 3
            Handle: 256
            Reason: Authentication Failure (0x05)
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Hans-Christian Noren Egtvedt <hegtvedt@cisco.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e1f3e71cb94b1fcf78ad4089d9882f116060bba
Author: Patrick Steinhardt <ps@pks.im>
Date:   Wed Jul 15 19:43:33 2020 +0200

    Bluetooth: Fix update of connection state in `hci_encrypt_cfm`
    
    commit 339ddaa626995bc6218972ca241471f3717cc5f4 upstream.
    
    Starting with the upgrade to v5.8-rc3, I've noticed I wasn't able to
    connect to my Bluetooth headset properly anymore. While connecting to
    the device would eventually succeed, bluetoothd seemed to be confused
    about the current connection state where the state was flapping hence
    and forth. Bisecting this issue led to commit 3ca44c16b0dc (Bluetooth:
    Consolidate encryption handling in hci_encrypt_cfm, 2020-05-19), which
    refactored `hci_encrypt_cfm` to also handle updating the connection
    state.
    
    The commit in question changed the code to call `hci_connect_cfm` inside
    `hci_encrypt_cfm` and to change the connection state. But with the
    conversion, we now only update the connection state if a status was set
    already. In fact, the reverse should be true: the status should be
    updated if no status is yet set. So let's fix the isuse by reversing the
    condition.
    
    Fixes: 3ca44c16b0dc ("Bluetooth: Consolidate encryption handling in hci_encrypt_cfm")
    Signed-off-by: Patrick Steinhardt <ps@pks.im>
    Acked-by:  Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc3cd5e3687ce3fa293fa48c3ab1ddd0580da9e1
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Tue May 19 13:25:19 2020 -0700

    Bluetooth: Consolidate encryption handling in hci_encrypt_cfm
    
    commit 3ca44c16b0dcc764b641ee4ac226909f5c421aa3 upstream.
    
    This makes hci_encrypt_cfm calls hci_connect_cfm in case the connection
    state is BT_CONFIG so callers don't have to check the state.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Cc: Hans-Christian Noren Egtvedt <hegtvedt@cisco.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e74c40038bd7e4f0e0a8f26cd8c5e556098fe734
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Aug 6 11:17:14 2020 -0700

    Bluetooth: MGMT: Fix not checking if BT_HS is enabled
    
    commit b560a208cda0297fef6ff85bbfd58a8f0a52a543 upstream.
    
    This checks if BT_HS is enabled relecting it on MGMT_SETTING_HS instead
    of always reporting it as supported.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e37ae2c158500bbe80610b155f9380dc257225a6
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Aug 6 11:17:12 2020 -0700

    Bluetooth: L2CAP: Fix calling sk_filter on non-socket based channel
    
    commit f19425641cb2572a33cb074d5e30283720bd4d22 upstream.
    
    Only sockets will have the chan->data set to an actual sk, channels
    like A2MP would have its own data which would likely cause a crash when
    calling sk_filter, in order to fix this a new callback has been
    introduced so channels can implement their own filtering if necessary.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95bb3ede4fccf14578789e8723a8692c4e191432
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Thu Aug 6 11:17:11 2020 -0700

    Bluetooth: A2MP: Fix not initializing all members
    
    commit eddb7732119d53400f48a02536a84c509692faa8 upstream.
    
    This fixes various places where a stack variable is used uninitialized.
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5ac2e358238f40db1304bbc35e94599ea98685a
Author: Alain Michaud <alainm@chromium.org>
Date:   Mon Jul 27 20:48:55 2020 +0000

    Bluetooth: fix kernel oops in store_pending_adv_report
    
    commit a2ec905d1e160a33b2e210e45ad30445ef26ce0e upstream.
    
    Fix kernel oops observed when an ext adv data is larger than 31 bytes.
    
    This can be reproduced by setting up an advertiser with advertisement
    larger than 31 bytes.  The issue is not sensitive to the advertisement
    content.  In particular, this was reproduced with an advertisement of
    229 bytes filled with 'A'.  See stack trace below.
    
    This is fixed by not catching ext_adv as legacy adv are only cached to
    be able to concatenate a scanable adv with its scan response before
    sending it up through mgmt.
    
    With ext_adv, this is no longer necessary.
    
      general protection fault: 0000 [#1] SMP PTI
      CPU: 6 PID: 205 Comm: kworker/u17:0 Not tainted 5.4.0-37-generic #41-Ubuntu
      Hardware name: Dell Inc. XPS 15 7590/0CF6RR, BIOS 1.7.0 05/11/2020
      Workqueue: hci0 hci_rx_work [bluetooth]
      RIP: 0010:hci_bdaddr_list_lookup+0x1e/0x40 [bluetooth]
      Code: ff ff e9 26 ff ff ff 0f 1f 44 00 00 0f 1f 44 00 00 55 48 8b 07 48 89 e5 48 39 c7 75 0a eb 24 48 8b 00 48 39 f8 74 1c 44 8b 06 <44> 39 40 10 75 ef 44 0f b7 4e 04 66 44 39 48 14 75 e3 38 50 16 75
      RSP: 0018:ffffbc6a40493c70 EFLAGS: 00010286
      RAX: 4141414141414141 RBX: 000000000000001b RCX: 0000000000000000
      RDX: 0000000000000000 RSI: ffff9903e76c100f RDI: ffff9904289d4b28
      RBP: ffffbc6a40493c70 R08: 0000000093570362 R09: 0000000000000000
      R10: 0000000000000000 R11: ffff9904344eae38 R12: ffff9904289d4000
      R13: 0000000000000000 R14: 00000000ffffffa3 R15: ffff9903e76c100f
      FS: 0000000000000000(0000) GS:ffff990434580000(0000) knlGS:0000000000000000
      CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00007feed125a000 CR3: 00000001b860a003 CR4: 00000000003606e0
      Call Trace:
        process_adv_report+0x12e/0x560 [bluetooth]
        hci_le_meta_evt+0x7b2/0xba0 [bluetooth]
        hci_event_packet+0x1c29/0x2a90 [bluetooth]
        hci_rx_work+0x19b/0x360 [bluetooth]
        process_one_work+0x1eb/0x3b0
        worker_thread+0x4d/0x400
        kthread+0x104/0x140
    
    Fixes: c215e9397b00 ("Bluetooth: Process extended ADV report event")
    Reported-by: Andy Nguyen <theflow@google.com>
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reported-by: Balakrishna Godavarthi <bgodavar@codeaurora.org>
    Signed-off-by: Alain Michaud <alainm@chromium.org>
    Tested-by: Sonny Sasaka <sonnysasaka@chromium.org>
    Acked-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 334394cae68f053795ec2be2640ab11e2a2b63e8
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Oct 14 09:51:14 2020 +0200

    Linux 4.14.201
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20201012132630.201442517@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2482024bda7422fda884cd713c2876797b2e6b77
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Oct 5 18:59:58 2020 +0530

    net: usb: rtl8150: set random MAC address when set_ethernet_addr() fails
    
    commit f45a4248ea4cc13ed50618ff066849f9587226b2 upstream.
    
    When get_registers() fails in set_ethernet_addr(),the uninitialized
    value of node_id gets copied over as the address.
    So, check the return value of get_registers().
    
    If get_registers() executed successfully (i.e., it returns
    sizeof(node_id)), copy over the MAC address using ether_addr_copy()
    (instead of using memcpy()).
    
    Else, if get_registers() failed instead, a randomly generated MAC
    address is set as the MAC address instead.
    
    Reported-by: syzbot+abbc768b560c84d92fd3@syzkaller.appspotmail.com
    Tested-by: syzbot+abbc768b560c84d92fd3@syzkaller.appspotmail.com
    Acked-by: Petko Manolov <petkan@nucleusys.com>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d12ecc8e87663131358625893f207a98ef53277e
Author: Vijay Balakrishna <vijayb@linux.microsoft.com>
Date:   Sat Oct 10 23:16:40 2020 -0700

    mm: khugepaged: recalculate min_free_kbytes after memory hotplug as expected by khugepaged
    
    commit 4aab2be0983031a05cb4a19696c9da5749523426 upstream.
    
    When memory is hotplug added or removed the min_free_kbytes should be
    recalculated based on what is expected by khugepaged.  Currently after
    hotplug, min_free_kbytes will be set to a lower default and higher
    default set when THP enabled is lost.
    
    This change restores min_free_kbytes as expected for THP consumers.
    
    [vijayb@linux.microsoft.com: v5]
      Link: https://lkml.kernel.org/r/1601398153-5517-1-git-send-email-vijayb@linux.microsoft.com
    
    Fixes: f000565adb77 ("thp: set recommended min free kbytes")
    Signed-off-by: Vijay Balakrishna <vijayb@linux.microsoft.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Pavel Tatashin <pasha.tatashin@soleen.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Allen Pais <apais@microsoft.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/1600305709-2319-2-git-send-email-vijayb@linux.microsoft.com
    Link: https://lkml.kernel.org/r/1600204258-13683-1-git-send-email-vijayb@linux.microsoft.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73d4dbd9b49f58665bb22c1f6d5e562690fa7044
Author: Coly Li <colyli@suse.de>
Date:   Fri Oct 2 09:38:52 2020 +0800

    mmc: core: don't set limits.discard_granularity as 0
    
    [ Upstream commit 4243219141b67d7c2fdb2d8073c17c539b9263eb ]
    
    In mmc_queue_setup_discard() the mmc driver queue's discard_granularity
    might be set as 0 (when card->pref_erase > max_discard) while the mmc
    device still declares to support discard operation. This is buggy and
    triggered the following kernel warning message,
    
    WARNING: CPU: 0 PID: 135 at __blkdev_issue_discard+0x200/0x294
    CPU: 0 PID: 135 Comm: f2fs_discard-17 Not tainted 5.9.0-rc6 #1
    Hardware name: Google Kevin (DT)
    pstate: 00000005 (nzcv daif -PAN -UAO BTYPE=--)
    pc : __blkdev_issue_discard+0x200/0x294
    lr : __blkdev_issue_discard+0x54/0x294
    sp : ffff800011dd3b10
    x29: ffff800011dd3b10 x28: 0000000000000000 x27: ffff800011dd3cc4 x26: ffff800011dd3e18 x25: 000000000004e69b x24: 0000000000000c40 x23: ffff0000f1deaaf0 x22: ffff0000f2849200 x21: 00000000002734d8 x20: 0000000000000008 x19: 0000000000000000 x18: 0000000000000000 x17: 0000000000000000 x16: 0000000000000000 x15: 0000000000000000 x14: 0000000000000394 x13: 0000000000000000 x12: 0000000000000000 x11: 0000000000000000 x10: 00000000000008b0 x9 : ffff800011dd3cb0 x8 : 000000000004e69b x7 : 0000000000000000 x6 : ffff0000f1926400 x5 : ffff0000f1940800 x4 : 0000000000000000 x3 : 0000000000000c40 x2 : 0000000000000008 x1 : 00000000002734d8 x0 : 0000000000000000 Call trace:
    __blkdev_issue_discard+0x200/0x294
    __submit_discard_cmd+0x128/0x374
    __issue_discard_cmd_orderly+0x188/0x244
    __issue_discard_cmd+0x2e8/0x33c
    issue_discard_thread+0xe8/0x2f0
    kthread+0x11c/0x120
    ret_from_fork+0x10/0x1c
    ---[ end trace e4c8023d33dfe77a ]---
    
    This patch fixes the issue by setting discard_granularity as SECTOR_SIZE
    instead of 0 when (card->pref_erase > max_discard) is true. Now no more
    complain from __blkdev_issue_discard() for the improper value of discard
    granularity.
    
    This issue is exposed after commit b35fd7422c2f ("block: check queue's
    limits.discard_granularity in __blkdev_issue_discard()"), a "Fixes:" tag
    is also added for the commit to make sure people won't miss this patch
    after applying the change of __blkdev_issue_discard().
    
    Fixes: e056a1b5b67b ("mmc: queue: let host controllers specify maximum discard timeout")
    Fixes: b35fd7422c2f ("block: check queue's limits.discard_granularity in __blkdev_issue_discard()").
    Reported-and-tested-by: Vicente Bergas <vicencb@gmail.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Link: https://lore.kernel.org/r/20201002013852.51968-1-colyli@suse.de
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93d8f55a2eb5c1e880aa96a438616d969907ba2c
Author: Kajol Jain <kjain@linux.ibm.com>
Date:   Thu Aug 27 12:17:32 2020 +0530

    perf: Fix task_function_call() error handling
    
    [ Upstream commit 6d6b8b9f4fceab7266ca03d194f60ec72bd4b654 ]
    
    The error handling introduced by commit:
    
      2ed6edd33a21 ("perf: Add cond_resched() to task_function_call()")
    
    looses any return value from smp_call_function_single() that is not
    {0, -EINVAL}. This is a problem because it will return -EXNIO when the
    target CPU is offline. Worse, in that case it'll turn into an infinite
    loop.
    
    Fixes: 2ed6edd33a21 ("perf: Add cond_resched() to task_function_call()")
    Reported-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Kajol Jain <kjain@linux.ibm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Barret Rhoden <brho@google.com>
    Tested-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Link: https://lkml.kernel.org/r/20200827064732.20860-1-kjain@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccda0263729fcc6bf958da5b7a6448714187d733
Author: David Howells <dhowells@redhat.com>
Date:   Fri Oct 2 14:04:51 2020 +0100

    rxrpc: Fix server keyring leak
    
    [ Upstream commit 38b1dc47a35ba14c3f4472138ea56d014c2d609b ]
    
    If someone calls setsockopt() twice to set a server key keyring, the first
    keyring is leaked.
    
    Fix it to return an error instead if the server key keyring is already set.
    
    Fixes: 17926a79320a ("[AF_RXRPC]: Provide secure RxRPC sockets for use by userspace and kernel both")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 577ae8286a70384247bbc282ba74b5ced782a171
Author: David Howells <dhowells@redhat.com>
Date:   Thu Oct 1 11:57:40 2020 +0100

    rxrpc: Fix some missing _bh annotations on locking conn->state_lock
    
    [ Upstream commit fa1d113a0f96f9ab7e4fe4f8825753ba1e34a9d3 ]
    
    conn->state_lock may be taken in softirq mode, but a previous patch
    replaced an outer lock in the response-packet event handling code, and lost
    the _bh from that when doing so.
    
    Fix this by applying the _bh annotation to the state_lock locking.
    
    Fixes: a1399f8bb033 ("rxrpc: Call channels should have separate call number spaces")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c20d1ea96dc4cc16b81526128b5578d32ec004c
Author: David Howells <dhowells@redhat.com>
Date:   Tue Sep 8 22:09:04 2020 +0100

    rxrpc: Downgrade the BUG() for unsupported token type in rxrpc_read()
    
    [ Upstream commit 9a059cd5ca7d9c5c4ca5a6e755cf72f230176b6a ]
    
    If rxrpc_read() (which allows KEYCTL_READ to read a key), sees a token of a
    type it doesn't recognise, it can BUG in a couple of places, which is
    unnecessary as it can easily get back to userspace.
    
    Fix this to print an error message instead.
    
    Fixes: 99455153d067 ("RxRPC: Parse security index 5 keys (Kerberos 5)")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42494746a3ef797d644276402258740c3a457a44
Author: Marc Dionne <marc.dionne@auristor.com>
Date:   Fri Sep 4 14:01:24 2020 -0300

    rxrpc: Fix rxkad token xdr encoding
    
    [ Upstream commit 56305118e05b2db8d0395bba640ac9a3aee92624 ]
    
    The session key should be encoded with just the 8 data bytes and
    no length; ENCODE_DATA precedes it with a 4 byte length, which
    confuses some existing tools that try to parse this format.
    
    Add an ENCODE_BYTES macro that does not include a length, and use
    it for the key.  Also adjust the expected length.
    
    Note that commit 774521f353e1d ("rxrpc: Fix an assertion in
    rxrpc_read()") had fixed a BUG by changing the length rather than
    fixing the encoding.  The original length was correct.
    
    Fixes: 99455153d067 ("RxRPC: Parse security index 5 keys (Kerberos 5)")
    Signed-off-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8264d3e0aad1fdb4e2fc81d5480fb79849def11
Author: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
Date:   Mon Sep 28 11:01:04 2020 +0200

    net: usb: ax88179_178a: fix missing stop entry in driver_info
    
    [ Upstream commit 9666ea66a74adfe295cb3a8760c76e1ef70f9caf ]
    
    Adds the missing .stop entry in the Belkin driver_info structure.
    
    Fixes: e20bd60bf62a ("net: usb: asix88179_178a: Add support for the Belkin B2B128")
    Signed-off-by: Wilken Gottwalt <wilken.gottwalt@mailbox.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 724e1622f1db7c3353d86179f87e16724aee6dab
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Sep 26 21:33:43 2020 -0700

    mdio: fix mdio-thunder.c dependency & build error
    
    [ Upstream commit 7dbbcf496f2a4b6d82cfc7810a0746e160b79762 ]
    
    Fix build error by selecting MDIO_DEVRES for MDIO_THUNDER.
    Fixes this build error:
    
    ld: drivers/net/phy/mdio-thunder.o: in function `thunder_mdiobus_pci_probe':
    drivers/net/phy/mdio-thunder.c:78: undefined reference to `devm_mdiobus_alloc_size'
    
    Fixes: 379d7ac7ca31 ("phy: mdio-thunder: Add driver for Cavium Thunder SoC MDIO buses.")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Cc: Andrew Lunn <andrew@lunn.ch>
    Cc: Heiner Kallweit <hkallweit1@gmail.com>
    Cc: netdev@vger.kernel.org
    Cc: David Daney <david.daney@cavium.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e2841b8aac68b6079a8656d5511ab7f0097a57f
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 25 06:38:07 2020 -0700

    bonding: set dev->needed_headroom in bond_setup_by_slave()
    
    [ Upstream commit f32f19339596b214c208c0dba716f4b6cc4f6958 ]
    
    syzbot managed to crash a host by creating a bond
    with a GRE device.
    
    For non Ethernet device, bonding calls bond_setup_by_slave()
    instead of ether_setup(), and unfortunately dev->needed_headroom
    was not copied from the new added member.
    
    [  171.243095] skbuff: skb_under_panic: text:ffffffffa184b9ea len:116 put:20 head:ffff883f84012dc0 data:ffff883f84012dbc tail:0x70 end:0xd00 dev:bond0
    [  171.243111] ------------[ cut here ]------------
    [  171.243112] kernel BUG at net/core/skbuff.c:112!
    [  171.243117] invalid opcode: 0000 [#1] SMP KASAN PTI
    [  171.243469] gsmi: Log Shutdown Reason 0x03
    [  171.243505] Call Trace:
    [  171.243506]  <IRQ>
    [  171.243512]  [<ffffffffa171be59>] skb_push+0x49/0x50
    [  171.243516]  [<ffffffffa184b9ea>] ipgre_header+0x2a/0xf0
    [  171.243520]  [<ffffffffa17452d7>] neigh_connected_output+0xb7/0x100
    [  171.243524]  [<ffffffffa186f1d3>] ip6_finish_output2+0x383/0x490
    [  171.243528]  [<ffffffffa186ede2>] __ip6_finish_output+0xa2/0x110
    [  171.243531]  [<ffffffffa186acbc>] ip6_finish_output+0x2c/0xa0
    [  171.243534]  [<ffffffffa186abe9>] ip6_output+0x69/0x110
    [  171.243537]  [<ffffffffa186ac90>] ? ip6_output+0x110/0x110
    [  171.243541]  [<ffffffffa189d952>] mld_sendpack+0x1b2/0x2d0
    [  171.243544]  [<ffffffffa189d290>] ? mld_send_report+0xf0/0xf0
    [  171.243548]  [<ffffffffa189c797>] mld_ifc_timer_expire+0x2d7/0x3b0
    [  171.243551]  [<ffffffffa189c4c0>] ? mld_gq_timer_expire+0x50/0x50
    [  171.243556]  [<ffffffffa0fea270>] call_timer_fn+0x30/0x130
    [  171.243559]  [<ffffffffa0fea17c>] expire_timers+0x4c/0x110
    [  171.243563]  [<ffffffffa0fea0e3>] __run_timers+0x213/0x260
    [  171.243566]  [<ffffffffa0fecb7d>] ? ktime_get+0x3d/0xa0
    [  171.243570]  [<ffffffffa0ff9c4e>] ? clockevents_program_event+0x7e/0xe0
    [  171.243574]  [<ffffffffa0f7e5d5>] ? sched_clock_cpu+0x15/0x190
    [  171.243577]  [<ffffffffa0fe973d>] run_timer_softirq+0x1d/0x40
    [  171.243581]  [<ffffffffa1c00152>] __do_softirq+0x152/0x2f0
    [  171.243585]  [<ffffffffa0f44e1f>] irq_exit+0x9f/0xb0
    [  171.243588]  [<ffffffffa1a02e1d>] smp_apic_timer_interrupt+0xfd/0x1a0
    [  171.243591]  [<ffffffffa1a01ea6>] apic_timer_interrupt+0x86/0x90
    
    Fixes: f5184d267c1a ("net: Allow netdevices to specify needed head/tailroom")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2dd21d68131d5ec2c12f88f664f602963121ff2
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Sep 25 14:42:56 2020 +1000

    xfrm: Use correct address family in xfrm_state_find
    
    [ Upstream commit e94ee171349db84c7cfdc5fefbebe414054d0924 ]
    
    The struct flowi must never be interpreted by itself as its size
    depends on the address family.  Therefore it must always be grouped
    with its original family value.
    
    In this particular instance, the original family value is lost in
    the function xfrm_state_find.  Therefore we get a bogus read when
    it's coupled with the wrong family which would occur with inter-
    family xfrm states.
    
    This patch fixes it by keeping the original family value.
    
    Note that the same bug could potentially occur in LSM through
    the xfrm_state_pol_flow_match hook.  I checked the current code
    there and it seems to be safe for now as only secid is used which
    is part of struct flowi_common.  But that API should be changed
    so that so that we don't get new bugs in the future.  We could
    do that by replacing fl with just secid or adding a family field.
    
    Reported-by: syzbot+577fbac3145a6eb2e7a5@syzkaller.appspotmail.com
    Fixes: 48b8d78315bf ("[XFRM]: State selection update to use inner...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92ff398fc260a868810b257325416f626069af13
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Thu Sep 17 19:16:53 2020 +0300

    platform/x86: fix kconfig dependency warning for FUJITSU_LAPTOP
    
    [ Upstream commit afdd1ebb72051e8b6b83c4d7dc542a9be0e1352d ]
    
    When FUJITSU_LAPTOP is enabled and NEW_LEDS is disabled, it results in the
    following Kbuild warning:
    
    WARNING: unmet direct dependencies detected for LEDS_CLASS
      Depends on [n]: NEW_LEDS [=n]
      Selected by [y]:
      - FUJITSU_LAPTOP [=y] && X86 [=y] && X86_PLATFORM_DEVICES [=y] && ACPI [=y] && INPUT [=y] && BACKLIGHT_CLASS_DEVICE [=y] && (ACPI_VIDEO [=n] || ACPI_VIDEO [=n]=n)
    
    The reason is that FUJITSU_LAPTOP selects LEDS_CLASS without depending on
    or selecting NEW_LEDS while LEDS_CLASS is subordinate to NEW_LEDS.
    
    Honor the kconfig menu hierarchy to remove kconfig dependency warnings.
    
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: d89bcc83e709 ("platform/x86: fujitsu-laptop: select LEDS_CLASS")
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffae972d46b980fc79caf6d424f1ad9203b4eb73
Author: Voon Weifeng <weifeng.voon@intel.com>
Date:   Wed Sep 23 16:56:14 2020 +0800

    net: stmmac: removed enabling eee in EEE set callback
    
    [ Upstream commit 7241c5a697479c7d0c5a96595822cdab750d41ae ]
    
    EEE should be only be enabled during stmmac_mac_link_up() when the
    link are up and being set up properly. set_eee should only do settings
    configuration and disabling the eee.
    
    Without this fix, turning on EEE using ethtool will return
    "Operation not supported". This is due to the driver is in a dead loop
    waiting for eee to be advertised in the for eee to be activated but the
    driver will only configure the EEE advertisement after the eee is
    activated.
    
    Ethtool should only return "Operation not supported" if there is no EEE
    capbility in the MAC controller.
    
    Fixes: 8a7493e58ad6 ("net: stmmac: Fix a race in EEE enable callback")
    Signed-off-by: Voon Weifeng <weifeng.voon@intel.com>
    Acked-by: Mark Gross <mgross@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8f12d38d813eade9893ff05ec51567c2f3e45b6c
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:50:29 2020 +0200

    xfrm: clone whole liftime_cur structure in xfrm_do_migrate
    
    [ Upstream commit 8366685b2883e523f91e9816d7be371eb1144749 ]
    
    When we clone state only add_time was cloned. It missed values like
    bytes, packets.  Now clone the all members of the structure.
    
    v1->v3:
     - use memcpy to copy the entire structure
    
    Fixes: 80c9abaabf42 ("[XFRM]: Extension for dynamic update of endpoint address(es)")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62115d4b66349fd1fdeaaaa205718cb01b5127a5
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:50:11 2020 +0200

    xfrm: clone XFRMA_SEC_CTX in xfrm_do_migrate
    
    [ Upstream commit 7aa05d304785204703a67a6aa7f1db402889a172 ]
    
    XFRMA_SEC_CTX was not cloned from the old to the new.
    Migrate this attribute during XFRMA_MSG_MIGRATE
    
    v1->v2:
     - return -ENOMEM on error
    v2->v3:
     - fix return type to int
    
    Fixes: 80c9abaabf42 ("[XFRM]: Extension for dynamic update of endpoint address(es)")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1ce36f9975061682311a7481e3d20f2ad605069
Author: Antony Antony <antony.antony@secunet.com>
Date:   Fri Sep 4 08:49:55 2020 +0200

    xfrm: clone XFRMA_REPLAY_ESN_VAL in xfrm_do_migrate
    
    [ Upstream commit 91a46c6d1b4fcbfa4773df9421b8ad3e58088101 ]
    
    XFRMA_REPLAY_ESN_VAL was not cloned completely from the old to the new.
    Migrate this attribute during XFRMA_MSG_MIGRATE
    
    v1->v2:
     - move curleft cloning to a separate patch
    
    Fixes: af2f464e326e ("xfrm: Assign esn pointers when cloning a state")
    Signed-off-by: Antony Antony <antony.antony@secunet.com>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bdd4563703cbc3db57ced7f02e4fbdfd965a6ee0
Author: Philip Yang <Philip.Yang@amd.com>
Date:   Tue Sep 15 17:07:35 2020 -0400

    drm/amdgpu: prevent double kfree ttm->sg
    
    [ Upstream commit 1d0e16ac1a9e800598dcfa5b6bc53b704a103390 ]
    
    Set ttm->sg to NULL after kfree, to avoid memory corruption backtrace:
    
    [  420.932812] kernel BUG at
    /build/linux-do9eLF/linux-4.15.0/mm/slub.c:295!
    [  420.934182] invalid opcode: 0000 [#1] SMP NOPTI
    [  420.935445] Modules linked in: xt_conntrack ipt_MASQUERADE
    [  420.951332] Hardware name: Dell Inc. PowerEdge R7525/0PYVT1, BIOS
    1.5.4 07/09/2020
    [  420.952887] RIP: 0010:__slab_free+0x180/0x2d0
    [  420.954419] RSP: 0018:ffffbe426291fa60 EFLAGS: 00010246
    [  420.955963] RAX: ffff9e29263e9c30 RBX: ffff9e29263e9c30 RCX:
    000000018100004b
    [  420.957512] RDX: ffff9e29263e9c30 RSI: fffff3d33e98fa40 RDI:
    ffff9e297e407a80
    [  420.959055] RBP: ffffbe426291fb00 R08: 0000000000000001 R09:
    ffffffffc0d39ade
    [  420.960587] R10: ffffbe426291fb20 R11: ffff9e49ffdd4000 R12:
    ffff9e297e407a80
    [  420.962105] R13: fffff3d33e98fa40 R14: ffff9e29263e9c30 R15:
    ffff9e2954464fd8
    [  420.963611] FS:  00007fa2ea097780(0000) GS:ffff9e297e840000(0000)
    knlGS:0000000000000000
    [  420.965144] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  420.966663] CR2: 00007f16bfffefb8 CR3: 0000001ff0c62000 CR4:
    0000000000340ee0
    [  420.968193] Call Trace:
    [  420.969703]  ? __page_cache_release+0x3c/0x220
    [  420.971294]  ? amdgpu_ttm_tt_unpopulate+0x5e/0x80 [amdgpu]
    [  420.972789]  kfree+0x168/0x180
    [  420.974353]  ? amdgpu_ttm_tt_set_user_pages+0x64/0xc0 [amdgpu]
    [  420.975850]  ? kfree+0x168/0x180
    [  420.977403]  amdgpu_ttm_tt_unpopulate+0x5e/0x80 [amdgpu]
    [  420.978888]  ttm_tt_unpopulate.part.10+0x53/0x60 [amdttm]
    [  420.980357]  ttm_tt_destroy.part.11+0x4f/0x60 [amdttm]
    [  420.981814]  ttm_tt_destroy+0x13/0x20 [amdttm]
    [  420.983273]  ttm_bo_cleanup_memtype_use+0x36/0x80 [amdttm]
    [  420.984725]  ttm_bo_release+0x1c9/0x360 [amdttm]
    [  420.986167]  amdttm_bo_put+0x24/0x30 [amdttm]
    [  420.987663]  amdgpu_bo_unref+0x1e/0x30 [amdgpu]
    [  420.989165]  amdgpu_amdkfd_gpuvm_alloc_memory_of_gpu+0x9ca/0xb10
    [amdgpu]
    [  420.990666]  kfd_ioctl_alloc_memory_of_gpu+0xef/0x2c0 [amdgpu]
    
    Signed-off-by: Philip Yang <Philip.Yang@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d0c6282ce8ee93365f1df136a0724bb6f3bda7d
Author: Dumitru Ceara <dceara@redhat.com>
Date:   Wed Oct 7 17:48:03 2020 +0200

    openvswitch: handle DNAT tuple collision
    
    commit 8aa7b526dc0b5dbf40c1b834d76a667ad672a410 upstream.
    
    With multiple DNAT rules it's possible that after destination
    translation the resulting tuples collide.
    
    For example, two openvswitch flows:
    nw_dst=10.0.0.10,tp_dst=10, actions=ct(commit,table=2,nat(dst=20.0.0.1:20))
    nw_dst=10.0.0.20,tp_dst=10, actions=ct(commit,table=2,nat(dst=20.0.0.1:20))
    
    Assuming two TCP clients initiating the following connections:
    10.0.0.10:5000->10.0.0.10:10
    10.0.0.10:5000->10.0.0.20:10
    
    Both tuples would translate to 10.0.0.10:5000->20.0.0.1:20 causing
    nf_conntrack_confirm() to fail because of tuple collision.
    
    Netfilter handles this case by allocating a null binding for SNAT at
    egress by default.  Perform the same operation in openvswitch for DNAT
    if no explicit SNAT is requested by the user and allocate a null binding
    for SNAT for packets in the "original" direction.
    
    Reported-at: https://bugzilla.redhat.com/1877128
    Suggested-by: Florian Westphal <fw@strlen.de>
    Fixes: 05752523e565 ("openvswitch: Interface with NAT.")
    Signed-off-by: Dumitru Ceara <dceara@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04e12748f0fc9982cb47759a5d71975878509673
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Mon Oct 5 02:25:36 2020 +0530

    net: team: fix memory leak in __team_options_register
    
    commit 9a9e77495958c7382b2438bc19746dd3aaaabb8e upstream.
    
    The variable "i" isn't initialized back correctly after the first loop
    under the label inst_rollback gets executed.
    
    The value of "i" is assigned to be option_count - 1, and the ensuing
    loop (under alloc_rollback) begins by initializing i--.
    Thus, the value of i when the loop begins execution will now become
    i = option_count - 2.
    
    Thus, when kfree(dst_opts[i]) is called in the second loop in this
    order, (i.e., inst_rollback followed by alloc_rollback),
    dst_optsp[option_count - 2] is the first element freed, and
    dst_opts[option_count - 1] does not get freed, and thus, a memory
    leak is caused.
    
    This memory leak can be fixed, by assigning i = option_count (instead of
    option_count - 1).
    
    Fixes: 80f7c6683fe0 ("team: add support for per-port options")
    Reported-by: syzbot+69b804437cfec30deac3@syzkaller.appspotmail.com
    Tested-by: syzbot+69b804437cfec30deac3@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5053005c31425ae6d76c5ea9ee511276dbf3f3b
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Sep 25 06:38:08 2020 -0700

    team: set dev->needed_headroom in team_setup_by_port()
    
    commit 89d01748b2354e210b5d4ea47bc25a42a1b42c82 upstream.
    
    Some devices set needed_headroom. If we ignore it, we might
    end up crashing in various skb_push() for example in ipgre_header()
    since some layers assume enough headroom has been reserved.
    
    Fixes: 1d76efe1577b ("team: add support for non-ethernet devices")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ad5199ab4424d49a8e2e222aac268a7ca00f6fb
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Oct 8 01:38:31 2020 -0700

    sctp: fix sctp_auth_init_hmacs() error path
    
    commit d42ee76ecb6c49d499fc5eb32ca34468d95dbc3e upstream.
    
    After freeing ep->auth_hmacs we have to clear the pointer
    or risk use-after-free as reported by syzbot:
    
    BUG: KASAN: use-after-free in sctp_auth_destroy_hmacs net/sctp/auth.c:509 [inline]
    BUG: KASAN: use-after-free in sctp_auth_destroy_hmacs net/sctp/auth.c:501 [inline]
    BUG: KASAN: use-after-free in sctp_auth_free+0x17e/0x1d0 net/sctp/auth.c:1070
    Read of size 8 at addr ffff8880a8ff52c0 by task syz-executor941/6874
    
    CPU: 0 PID: 6874 Comm: syz-executor941 Not tainted 5.9.0-rc8-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x198/0x1fd lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xae/0x497 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     sctp_auth_destroy_hmacs net/sctp/auth.c:509 [inline]
     sctp_auth_destroy_hmacs net/sctp/auth.c:501 [inline]
     sctp_auth_free+0x17e/0x1d0 net/sctp/auth.c:1070
     sctp_endpoint_destroy+0x95/0x240 net/sctp/endpointola.c:203
     sctp_endpoint_put net/sctp/endpointola.c:236 [inline]
     sctp_endpoint_free+0xd6/0x110 net/sctp/endpointola.c:183
     sctp_destroy_sock+0x9c/0x3c0 net/sctp/socket.c:4981
     sctp_v6_destroy_sock+0x11/0x20 net/sctp/socket.c:9415
     sk_common_release+0x64/0x390 net/core/sock.c:3254
     sctp_close+0x4ce/0x8b0 net/sctp/socket.c:1533
     inet_release+0x12e/0x280 net/ipv4/af_inet.c:431
     inet6_release+0x4c/0x70 net/ipv6/af_inet6.c:475
     __sock_release+0xcd/0x280 net/socket.c:596
     sock_close+0x18/0x20 net/socket.c:1277
     __fput+0x285/0x920 fs/file_table.c:281
     task_work_run+0xdd/0x190 kernel/task_work.c:141
     exit_task_work include/linux/task_work.h:25 [inline]
     do_exit+0xb7d/0x29f0 kernel/exit.c:806
     do_group_exit+0x125/0x310 kernel/exit.c:903
     __do_sys_exit_group kernel/exit.c:914 [inline]
     __se_sys_exit_group kernel/exit.c:912 [inline]
     __x64_sys_exit_group+0x3a/0x50 kernel/exit.c:912
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x43f278
    Code: Bad RIP value.
    RSP: 002b:00007fffe0995c38 EFLAGS: 00000246 ORIG_RAX: 00000000000000e7
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 000000000043f278
    RDX: 0000000000000000 RSI: 000000000000003c RDI: 0000000000000000
    RBP: 00000000004bf068 R08: 00000000000000e7 R09: ffffffffffffffd0
    R10: 0000000020000000 R11: 0000000000000246 R12: 0000000000000001
    R13: 00000000006d1180 R14: 0000000000000000 R15: 0000000000000000
    
    Allocated by task 6874:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:461
     kmem_cache_alloc_trace+0x174/0x300 mm/slab.c:3554
     kmalloc include/linux/slab.h:554 [inline]
     kmalloc_array include/linux/slab.h:593 [inline]
     kcalloc include/linux/slab.h:605 [inline]
     sctp_auth_init_hmacs+0xdb/0x3b0 net/sctp/auth.c:464
     sctp_auth_init+0x8a/0x4a0 net/sctp/auth.c:1049
     sctp_setsockopt_auth_supported net/sctp/socket.c:4354 [inline]
     sctp_setsockopt+0x477e/0x97f0 net/sctp/socket.c:4631
     __sys_setsockopt+0x2db/0x610 net/socket.c:2132
     __do_sys_setsockopt net/socket.c:2143 [inline]
     __se_sys_setsockopt net/socket.c:2140 [inline]
     __x64_sys_setsockopt+0xba/0x150 net/socket.c:2140
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 6874:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track+0x1c/0x30 mm/kasan/common.c:56
     kasan_set_free_info+0x1b/0x30 mm/kasan/generic.c:355
     __kasan_slab_free+0xd8/0x120 mm/kasan/common.c:422
     __cache_free mm/slab.c:3422 [inline]
     kfree+0x10e/0x2b0 mm/slab.c:3760
     sctp_auth_destroy_hmacs net/sctp/auth.c:511 [inline]
     sctp_auth_destroy_hmacs net/sctp/auth.c:501 [inline]
     sctp_auth_init_hmacs net/sctp/auth.c:496 [inline]
     sctp_auth_init_hmacs+0x2b7/0x3b0 net/sctp/auth.c:454
     sctp_auth_init+0x8a/0x4a0 net/sctp/auth.c:1049
     sctp_setsockopt_auth_supported net/sctp/socket.c:4354 [inline]
     sctp_setsockopt+0x477e/0x97f0 net/sctp/socket.c:4631
     __sys_setsockopt+0x2db/0x610 net/socket.c:2132
     __do_sys_setsockopt net/socket.c:2143 [inline]
     __se_sys_setsockopt net/socket.c:2140 [inline]
     __x64_sys_setsockopt+0xba/0x150 net/socket.c:2140
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 1f485649f529 ("[SCTP]: Implement SCTP-AUTH internals")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Vlad Yasevich <vyasevich@gmail.com>
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Cc: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0f4b523383a74898efd8de2bc1291980c3aa073
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Oct 7 10:07:49 2020 +0200

    i2c: meson: fix clock setting overwrite
    
    commit 28683e847e2f20eed22cdd24f185d7783db396d3 upstream.
    
    When the slave address is written in do_start(), SLAVE_ADDR is written
    completely. This may overwrite some setting related to the clock rate
    or signal filtering.
    
    Fix this by writing only the bits related to slave address. To avoid
    causing unexpected changed, explicitly disable filtering or high/low
    clock mode which may have been left over by the bootloader.
    
    Fixes: 30021e3707a7 ("i2c: add support for Amlogic Meson I2C controller")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c77efc8990404cc4b5a612ec9f653684bef48df0
Author: Vladimir Zapolskiy <vladimir@tuxera.com>
Date:   Sat Oct 10 21:25:54 2020 +0300

    cifs: Fix incomplete memory allocation on setxattr path
    
    commit 64b7f674c292207624b3d788eda2dde3dc1415df upstream.
    
    On setxattr() syscall path due to an apprent typo the size of a dynamically
    allocated memory chunk for storing struct smb2_file_full_ea_info object is
    computed incorrectly, to be more precise the first addend is the size of
    a pointer instead of the wanted object size. Coincidentally it makes no
    difference on 64-bit platforms, however on 32-bit targets the following
    memcpy() writes 4 bytes of data outside of the dynamically allocated memory.
    
      =============================================================================
      BUG kmalloc-16 (Not tainted): Redzone overwritten
      -----------------------------------------------------------------------------
    
      Disabling lock debugging due to kernel taint
      INFO: 0x79e69a6f-0x9e5cdecf @offset=368. First byte 0x73 instead of 0xcc
      INFO: Slab 0xd36d2454 objects=85 used=51 fp=0xf7d0fc7a flags=0x35000201
      INFO: Object 0x6f171df3 @offset=352 fp=0x00000000
    
      Redzone 5d4ff02d: cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc  ................
      Object 6f171df3: 00 00 00 00 00 05 06 00 73 6e 72 75 62 00 66 69  ........snrub.fi
      Redzone 79e69a6f: 73 68 32 0a                                      sh2.
      Padding 56254d82: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      CPU: 0 PID: 8196 Comm: attr Tainted: G    B             5.9.0-rc8+ #3
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1 04/01/2014
      Call Trace:
       dump_stack+0x54/0x6e
       print_trailer+0x12c/0x134
       check_bytes_and_report.cold+0x3e/0x69
       check_object+0x18c/0x250
       free_debug_processing+0xfe/0x230
       __slab_free+0x1c0/0x300
       kfree+0x1d3/0x220
       smb2_set_ea+0x27d/0x540
       cifs_xattr_set+0x57f/0x620
       __vfs_setxattr+0x4e/0x60
       __vfs_setxattr_noperm+0x4e/0x100
       __vfs_setxattr_locked+0xae/0xd0
       vfs_setxattr+0x4e/0xe0
       setxattr+0x12c/0x1a0
       path_setxattr+0xa4/0xc0
       __ia32_sys_lsetxattr+0x1d/0x20
       __do_fast_syscall_32+0x40/0x70
       do_fast_syscall_32+0x29/0x60
       do_SYSENTER_32+0x15/0x20
       entry_SYSENTER_32+0x9f/0xf2
    
    Fixes: 5517554e4313 ("cifs: Add support for writing attributes on SMB2+")
    Signed-off-by: Vladimir Zapolskiy <vladimir@tuxera.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8827ce20da37694778a77e5d6c677095a927ea32
Author: Hugh Dickins <hughd@google.com>
Date:   Fri Oct 9 20:07:59 2020 -0700

    mm/khugepaged: fix filemap page_to_pgoff(page) != offset
    
    commit 033b5d77551167f8c24ca862ce83d3e0745f9245 upstream.
    
    There have been elusive reports of filemap_fault() hitting its
    VM_BUG_ON_PAGE(page_to_pgoff(page) != offset, page) on kernels built
    with CONFIG_READ_ONLY_THP_FOR_FS=y.
    
    Suren has hit it on a kernel with CONFIG_READ_ONLY_THP_FOR_FS=y and
    CONFIG_NUMA is not set: and he has analyzed it down to how khugepaged
    without NUMA reuses the same huge page after collapse_file() failed
    (whereas NUMA targets its allocation to the respective node each time).
    And most of us were usually testing with CONFIG_NUMA=y kernels.
    
    collapse_file(old start)
      new_page = khugepaged_alloc_page(hpage)
      __SetPageLocked(new_page)
      new_page->index = start // hpage->index=old offset
      new_page->mapping = mapping
      xas_store(&xas, new_page)
    
                              filemap_fault
                                page = find_get_page(mapping, offset)
                                // if offset falls inside hpage then
                                // compound_head(page) == hpage
                                lock_page_maybe_drop_mmap()
                                  __lock_page(page)
    
      // collapse fails
      xas_store(&xas, old page)
      new_page->mapping = NULL
      unlock_page(new_page)
    
    collapse_file(new start)
      new_page = khugepaged_alloc_page(hpage)
      __SetPageLocked(new_page)
      new_page->index = start // hpage->index=new offset
      new_page->mapping = mapping // mapping becomes valid again
    
                                // since compound_head(page) == hpage
                                // page_to_pgoff(page) got changed
                                VM_BUG_ON_PAGE(page_to_pgoff(page) != offset)
    
    An initial patch replaced __SetPageLocked() by lock_page(), which did
    fix the race which Suren illustrates above.  But testing showed that it's
    not good enough: if the racing task's __lock_page() gets delayed long
    after its find_get_page(), then it may follow collapse_file(new start)'s
    successful final unlock_page(), and crash on the same VM_BUG_ON_PAGE.
    
    It could be fixed by relaxing filemap_fault()'s VM_BUG_ON_PAGE to a
    check and retry (as is done for mapping), with similar relaxations in
    find_lock_entry() and pagecache_get_page(): but it's not obvious what
    else might get caught out; and khugepaged non-NUMA appears to be unique
    in exposing a page to page cache, then revoking, without going through
    a full cycle of freeing before reuse.
    
    Instead, non-NUMA khugepaged_prealloc_page() release the old page
    if anyone else has a reference to it (1% of cases when I tested).
    
    Although never reported on huge tmpfs, I believe its find_lock_entry()
    has been at similar risk; but huge tmpfs does not rely on khugepaged
    for its normal working nearly so much as READ_ONLY_THP_FOR_FS does.
    
    Reported-by: Denis Lisov <dennis.lissov@gmail.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=206569
    Link: https://lore.kernel.org/linux-mm/?q=20200219144635.3b7417145de19b65f258c943%40linux-foundation.org
    Reported-by: Qian Cai <cai@lca.pw>
    Link: https://lore.kernel.org/linux-xfs/?q=20200616013309.GB815%40lca.pw
    Reported-and-analyzed-by: Suren Baghdasaryan <surenb@google.com>
    Fixes: 87c460a0bded ("mm/khugepaged: collapse_shmem() without freezing new_page")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Cc: stable@vger.kernel.org # v4.9+
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b17b6908b263cf3ba88310089dd8c8c43f2995b1
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Oct 7 01:42:46 2020 -0700

    macsec: avoid use-after-free in macsec_handle_frame()
    
    commit c7cc9200e9b4a2ac172e990ef1975cd42975dad6 upstream.
    
    De-referencing skb after call to gro_cells_receive() is not allowed.
    We need to fetch skb->len earlier.
    
    Fixes: 5491e7c6b1a9 ("macsec: enable GRO and RPS on macsec devices")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09090a8311b0c81b108045feca099f884dff7159
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Sep 29 12:40:31 2020 -0400

    ftrace: Move RCU is watching check after recursion check
    
    commit b40341fad6cc2daa195f8090fd3348f18fff640a upstream.
    
    The first thing that the ftrace function callback helper functions should do
    is to check for recursion. Peter Zijlstra found that when
    "rcu_is_watching()" had its notrace removed, it caused perf function tracing
    to crash. This is because the call of rcu_is_watching() is tested before
    function recursion is checked and and if it is traced, it will cause an
    infinite recursion loop.
    
    rcu_is_watching() should still stay notrace, but to prevent this should
    never had crashed in the first place. The recursion prevention must be the
    first thing done in callback functions.
    
    Link: https://lore.kernel.org/r/20200929112541.GM2628@hirez.programming.kicks-ass.net
    
    Cc: stable@vger.kernel.org
    Cc: Paul McKenney <paulmck@kernel.org>
    Fixes: c68c0fa293417 ("ftrace: Have ftrace_ops_get_func() handle RCU and PER_CPU flags too")
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reported-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd2187a6ef36959decb87f24a1fb37432b0680e7
Author: Robbie Ko <robbieko@synology.com>
Date:   Mon Aug 6 10:30:30 2018 +0800

    Btrfs: fix unexpected failure of nocow buffered writes after snapshotting when low on space
    
    commit 8ecebf4d767e2307a946c8905278d6358eda35c3 upstream.
    
    Commit e9894fd3e3b3 ("Btrfs: fix snapshot vs nocow writting") forced
    nocow writes to fallback to COW, during writeback, when a snapshot is
    created. This resulted in writes made before creating the snapshot to
    unexpectedly fail with ENOSPC during writeback when success (0) was
    returned to user space through the write system call.
    
    The steps leading to this problem are:
    
    1. When it's not possible to allocate data space for a write, the
       buffered write path checks if a NOCOW write is possible.  If it is,
       it will not reserve space and success (0) is returned to user space.
    
    2. Then when a snapshot is created, the root's will_be_snapshotted
       atomic is incremented and writeback is triggered for all inode's that
       belong to the root being snapshotted. Incrementing that atomic forces
       all previous writes to fallback to COW during writeback (running
       delalloc).
    
    3. This results in the writeback for the inodes to fail and therefore
       setting the ENOSPC error in their mappings, so that a subsequent
       fsync on them will report the error to user space. So it's not a
       completely silent data loss (since fsync will report ENOSPC) but it's
       a very unexpected and undesirable behaviour, because if a clean
       shutdown/unmount of the filesystem happens without previous calls to
       fsync, it is expected to have the data present in the files after
       mounting the filesystem again.
    
    So fix this by adding a new atomic named snapshot_force_cow to the
    root structure which prevents this behaviour and works the following way:
    
    1. It is incremented when we start to create a snapshot after triggering
       writeback and before waiting for writeback to finish.
    
    2. This new atomic is now what is used by writeback (running delalloc)
       to decide whether we need to fallback to COW or not. Because we
       incremented this new atomic after triggering writeback in the
       snapshot creation ioctl, we ensure that all buffered writes that
       happened before snapshot creation will succeed and not fallback to
       COW (which would make them fail with ENOSPC).
    
    3. The existing atomic, will_be_snapshotted, is kept because it is used
       to force new buffered writes, that start after we started
       snapshotting, to reserve data space even when NOCOW is possible.
       This makes these writes fail early with ENOSPC when there's no
       available space to allocate, preventing the unexpected behaviour of
       writeback later failing with ENOSPC due to a fallback to COW mode.
    
    Fixes: e9894fd3e3b3 ("Btrfs: fix snapshot vs nocow writting")
    Signed-off-by: Robbie Ko <robbieko@synology.com>
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b234c8351c6c048a8133c74d5ea1db7c4d84af0b
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:26 2020 +0200

    mtd: rawnand: sunxi: Fix the probe error path
    
    commit 3d84515ffd8fb657e10fa5b1215e9f095fa7efca upstream.
    
    nand_release() is supposed be called after MTD device registration.
    Here, only nand_scan() happened, so use nand_cleanup() instead.
    
    Fixes: 1fef62c1423b ("mtd: nand: add sunxi NAND flash controller support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-54-miquel.raynal@bootlin.com
    [iwamatsu: adjust filename]
    Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 704d8108eb246166de21bef0f147feba8ce7d20a
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Thu Mar 5 10:37:12 2020 +0200

    perf top: Fix stdio interface input handling with glibc 2.28+
    
    commit 29b4f5f188571c112713c35cc87eefb46efee612 upstream.
    
    Since glibc 2.28 when running 'perf top --stdio', input handling no
    longer works, but hitting any key always just prints the "Mapped keys"
    help text.
    
    To fix it, call clearerr() in the display_thread() loop to clear any EOF
    sticky errors, as instructed in the glibc NEWS file
    (https://sourceware.org/git/?p=glibc.git;a=blob;f=NEWS):
    
     * All stdio functions now treat end-of-file as a sticky condition.  If you
       read from a file until EOF, and then the file is enlarged by another
       process, you must call clearerr or another function with the same effect
       (e.g. fseek, rewind) before you can read the additional data.  This
       corrects a longstanding C99 conformance bug.  It is most likely to affect
       programs that use stdio to read interactive input from a terminal.
       (Bug #1190.)
    
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200305083714.9381-2-tommi.t.rantala@nokia.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ca58b5b41537bd97e681dfe2b961ba613c5caf5
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Mon Jul 13 11:12:54 2020 +0900

    driver core: Fix probe_count imbalance in really_probe()
    
    commit b292b50b0efcc7095d8bf15505fba6909bb35dce upstream.
    
    syzbot is reporting hung task in wait_for_device_probe() [1]. At least,
    we always need to decrement probe_count if we incremented probe_count in
    really_probe().
    
    However, since I can't find "Resources present before probing" message in
    the console log, both "this message simply flowed off" and "syzbot is not
    hitting this path" will be possible. Therefore, while we are at it, let's
    also prepare for concurrent wait_for_device_probe() calls by replacing
    wake_up() with wake_up_all().
    
    [1] https://syzkaller.appspot.com/bug?id=25c833f1983c9c1d512f4ff860dd0d7f5a2e2c0f
    
    Reported-by: syzbot <syzbot+805f5f6ae37411f15b64@syzkaller.appspotmail.com>
    Fixes: 7c35e699c88bd607 ("driver core: Print device when resources present in really_probe()")
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20200713021254.3444-1-penguin-kernel@I-love.SAKURA.ne.jp
    [iwamatsu: Drop patch for deferred_probe_timeout_work_func()]
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebe506825fe9f0403bc144e592870cf17259f7a4
Author: Aaron Ma <aaron.ma@canonical.com>
Date:   Sat Oct 3 01:09:16 2020 +0800

    platform/x86: thinkpad_acpi: re-initialize ACPI buffer size when reuse
    
    commit 720ef73d1a239e33c3ad8fac356b9b1348e68aaf upstream.
    
    Evaluating ACPI _BCL could fail, then ACPI buffer size will be set to 0.
    When reuse this ACPI buffer, AE_BUFFER_OVERFLOW will be triggered.
    
    Re-initialize buffer size will make ACPI evaluate successfully.
    
    Fixes: 46445b6b896fd ("thinkpad-acpi: fix handle locate for video and query of _BCL")
    Signed-off-by: Aaron Ma <aaron.ma@canonical.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab0a16aec9da074c40a5e2b28b978336cb2dc82f
Author: Tom Rix <trix@redhat.com>
Date:   Sun Sep 13 12:02:03 2020 -0700

    platform/x86: thinkpad_acpi: initialize tp_nvram_state variable
    
    commit 5f38b06db8af3ed6c2fc1b427504ca56fae2eacc upstream.
    
    clang static analysis flags this represenative problem
    thinkpad_acpi.c:2523:7: warning: Branch condition evaluates
      to a garbage value
                    if (!oldn->mute ||
                        ^~~~~~~~~~~
    
    In hotkey_kthread() mute is conditionally set by hotkey_read_nvram()
    but unconditionally checked by hotkey_compare_and_issue_event().
    So the tp_nvram_state variable s[2] needs to be initialized.
    
    Fixes: 01e88f25985d ("ACPI: thinkpad-acpi: add CMOS NVRAM polling for hot keys (v9)")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Acked-by: mark gross <mgross@linux.intel.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e4e08f66c6867371fc59ae57c0bedac30f88f39
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 5 10:56:22 2020 -0700

    usermodehelper: reset umask to default before executing user process
    
    commit 4013c1496c49615d90d36b9d513eee8e369778e9 upstream.
    
    Kernel threads intentionally do CLONE_FS in order to follow any changes
    that 'init' does to set up the root directory (or cwd).
    
    It is admittedly a bit odd, but it avoids the situation where 'init'
    does some extensive setup to initialize the system environment, and then
    we execute a usermode helper program, and it uses the original FS setup
    from boot time that may be very limited and incomplete.
    
    [ Both Al Viro and Eric Biederman point out that 'pivot_root()' will
      follow the root regardless, since it fixes up other users of root (see
      chroot_fs_refs() for details), but overmounting root and doing a
      chroot() would not. ]
    
    However, Vegard Nossum noticed that the CLONE_FS not only means that we
    follow the root and current working directories, it also means we share
    umask with whatever init changed it to. That wasn't intentional.
    
    Just reset umask to the original default (0022) before actually starting
    the usermode helper program.
    
    Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Acked-by: Eric W. Biederman <ebiederm@xmission.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e339b9fc1a3b00c22c994c49fe3a30559556906a
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Wed Oct 7 09:24:01 2020 +0530

    net: wireless: nl80211: fix out-of-bounds access in nl80211_del_key()
    
    commit 3dc289f8f139997f4e9d3cfccf8738f20d23e47b upstream.
    
    In nl80211_parse_key(), key.idx is first initialized as -1.
    If this value of key.idx remains unmodified and gets returned, and
    nl80211_key_allowed() also returns 0, then rdev_del_key() gets called
    with key.idx = -1.
    This causes an out-of-bounds array access.
    
    Handle this issue by checking if the value of key.idx after
    nl80211_parse_key() is called and return -EINVAL if key.idx < 0.
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+b1bb342d1d097516cbda@syzkaller.appspotmail.com
    Tested-by: syzbot+b1bb342d1d097516cbda@syzkaller.appspotmail.com
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20201007035401.9522-1-anant.thazhemadam@gmail.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8361f76ecd2c880e556a480749ba22c4ec007f65
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Sep 24 09:43:48 2020 -0400

    fbcon: Fix global-out-of-bounds read in fbcon_get_font()
    
    commit 5af08640795b2b9a940c9266c0260455377ae262 upstream.
    
    fbcon_get_font() is reading out-of-bounds. A malicious user may resize
    `vc->vc_font.height` to a large value, causing fbcon_get_font() to
    read out of `fontdata`.
    
    fbcon_get_font() handles both built-in and user-provided fonts.
    Fortunately, recently we have added FONT_EXTRA_WORDS support for built-in
    fonts, so fix it by adding range checks using FNTSIZE().
    
    This patch depends on patch "fbdev, newport_con: Move FONT_EXTRA_WORDS
    macros into linux/font.h", and patch "Fonts: Support FONT_EXTRA_WORDS
    macros for built-in fonts".
    
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: syzbot+29d4ed7f3bdedf2aa2fd@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=08b8be45afea11888776f897895aef9ad1c3ecfd
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/b34544687a1a09d6de630659eb7a773f4953238b.1600953813.git.yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21689f237c491f4c6298189d5c2b3d2660edd5b0
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Tue Sep 22 09:29:31 2020 +0200

    Revert "ravb: Fixed to be able to unload modules"
    
    commit 77972b55fb9d35d4a6b0abca99abffaa4ec6a85b upstream.
    
    This reverts commit 1838d6c62f57836639bd3d83e7855e0ee4f6defc.
    
    This commit moved the ravb_mdio_init() call (and thus the
    of_mdiobus_register() call) from the ravb_probe() to the ravb_open()
    call.  This causes a regression during system resume (s2idle/s2ram), as
    new PHY devices cannot be bound while suspended.
    
    During boot, the Micrel PHY is detected like this:
    
        Micrel KSZ9031 Gigabit PHY e6800000.ethernet-ffffffff:00: attached PHY driver [Micrel KSZ9031 Gigabit PHY] (mii_bus:phy_addr=e6800000.ethernet-ffffffff:00, irq=228)
        ravb e6800000.ethernet eth0: Link is Up - 1Gbps/Full - flow control off
    
    During system suspend, (A) defer_all_probes is set to true, and (B)
    usermodehelper_disabled is set to UMH_DISABLED, to avoid drivers being
    probed while suspended.
    
      A. If CONFIG_MODULES=n, phy_device_register() calling device_add()
         merely adds the device, but does not probe it yet, as
         really_probe() returns early due to defer_all_probes being set:
    
           dpm_resume+0x128/0x4f8
             device_resume+0xcc/0x1b0
               dpm_run_callback+0x74/0x340
                 ravb_resume+0x190/0x1b8
                   ravb_open+0x84/0x770
                     of_mdiobus_register+0x1e0/0x468
                       of_mdiobus_register_phy+0x1b8/0x250
                         of_mdiobus_phy_device_register+0x178/0x1e8
                           phy_device_register+0x114/0x1b8
                             device_add+0x3d4/0x798
                               bus_probe_device+0x98/0xa0
                                 device_initial_probe+0x10/0x18
                                   __device_attach+0xe4/0x140
                                     bus_for_each_drv+0x64/0xc8
                                       __device_attach_driver+0xb8/0xe0
                                         driver_probe_device.part.11+0xc4/0xd8
                                           really_probe+0x32c/0x3b8
    
         Later, phy_attach_direct() notices no PHY driver has been bound,
         and falls back to the Generic PHY, leading to degraded operation:
    
           Generic PHY e6800000.ethernet-ffffffff:00: attached PHY driver [Generic PHY] (mii_bus:phy_addr=e6800000.ethernet-ffffffff:00, irq=POLL)
           ravb e6800000.ethernet eth0: Link is Up - 1Gbps/Full - flow control off
    
      B. If CONFIG_MODULES=y, request_module() returns early with -EBUSY due
         to UMH_DISABLED, and MDIO initialization fails completely:
    
           mdio_bus e6800000.ethernet-ffffffff:00: error -16 loading PHY driver module for ID 0x00221622
           ravb e6800000.ethernet eth0: failed to initialize MDIO
           PM: dpm_run_callback(): ravb_resume+0x0/0x1b8 returns -16
           PM: Device e6800000.ethernet failed to resume: error -16
    
         Ignoring -EBUSY in phy_request_driver_module(), like was done for
         -ENOENT in commit 21e194425abd65b5 ("net: phy: fix issue with loading
         PHY driver w/o initramfs"), would makes it fall back to the Generic
         PHY, like in the CONFIG_MODULES=n case.
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1255bcfef7c14c613f53ff741abeb927e0e16ab9
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Sep 24 09:42:22 2020 -0400

    Fonts: Support FONT_EXTRA_WORDS macros for built-in fonts
    
    commit 6735b4632def0640dbdf4eb9f99816aca18c4f16 upstream.
    
    syzbot has reported an issue in the framebuffer layer, where a malicious
    user may overflow our built-in font data buffers.
    
    In order to perform a reliable range check, subsystems need to know
    `FONTDATAMAX` for each built-in font. Unfortunately, our font descriptor,
    `struct console_font` does not contain `FONTDATAMAX`, and is part of the
    UAPI, making it infeasible to modify it.
    
    For user-provided fonts, the framebuffer layer resolves this issue by
    reserving four extra words at the beginning of data buffers. Later,
    whenever a function needs to access them, it simply uses the following
    macros:
    
    Recently we have gathered all the above macros to <linux/font.h>. Let us
    do the same thing for built-in fonts, prepend four extra words (including
    `FONTDATAMAX`) to their data buffers, so that subsystems can use these
    macros for all fonts, no matter built-in or user-provided.
    
    This patch depends on patch "fbdev, newport_con: Move FONT_EXTRA_WORDS
    macros into linux/font.h".
    
    Cc: stable@vger.kernel.org
    Link: https://syzkaller.appspot.com/bug?id=08b8be45afea11888776f897895aef9ad1c3ecfd
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/ef18af00c35fb3cc826048a5f70924ed6ddce95b.1600953813.git.yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf7836d48fcc073059834c7177fcd9c5cd2efdfd
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Sep 24 09:40:53 2020 -0400

    fbdev, newport_con: Move FONT_EXTRA_WORDS macros into linux/font.h
    
    commit bb0890b4cd7f8203e3aa99c6d0f062d6acdaad27 upstream.
    
    drivers/video/console/newport_con.c is borrowing FONT_EXTRA_WORDS macros
    from drivers/video/fbdev/core/fbcon.h. To keep things simple, move all
    definitions into <linux/font.h>.
    
    Since newport_con now uses four extra words, initialize the fourth word in
    newport_set_font() properly.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/7fb8bc9b0abc676ada6b7ac0e0bd443499357267.1600953813.git.yepeilin.cs@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c8715c960b3c237ff8c4d752a0c64330664daeb
Author: Giuliano Procida <gprocida@google.com>
Date:   Wed Oct 14 09:51:09 2020 +0200

    drm/syncobj: Fix drm_syncobj_handle_to_fd refcount leak
    
    Commit 5fb252cad61f20ae5d5a8b199f6cc4faf6f418e1, a cherry-pick of
    upstream commit e7cdf5c82f1773c3386b93bbcf13b9bfff29fa31, introduced a
    refcount imbalance and thus a struct drm_syncobj object leak which can
    be triggered with DRM_IOCTL_SYNCOBJ_HANDLE_TO_FD.
    
    The function drm_syncobj_handle_to_fd first calls drm_syncobj_find
    which increments the refcount of the object on success. In all of the
    drm_syncobj_handle_to_fd error paths, the refcount is decremented, but
    in the success path the refcount should remain at +1 as the struct
    drm_syncobj now belongs to the newly opened file. Instead, the
    refcount was incremented again to +2.
    
    Fixes: 5fb252cad61f ("drm/syncobj: Stop reusing the same struct file for all syncobj -> fd")
    Signed-off-by: Giuliano Procida <gprocida@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82636cda7db4dd2651e25f7b8717ec83c7d51583
Author: Will McVicker <willmcvicker@google.com>
Date:   Mon Aug 24 19:38:32 2020 +0000

    netfilter: ctnetlink: add a range check for l3/l4 protonum
    
    commit 1cc5ef91d2ff94d2bf2de3b3585423e8a1051cb6 upstream.
    
    The indexes to the nf_nat_l[34]protos arrays come from userspace. So
    check the tuple's family, e.g. l3num, when creating the conntrack in
    order to prevent an OOB memory access during setup.  Here is an example
    kernel panic on 4.14.180 when userspace passes in an index greater than
    NFPROTO_NUMPROTO.
    
    Internal error: Oops - BUG: 0 [#1] PREEMPT SMP
    Modules linked in:...
    Process poc (pid: 5614, stack limit = 0x00000000a3933121)
    CPU: 4 PID: 5614 Comm: poc Tainted: G S      W  O    4.14.180-g051355490483
    Hardware name: Qualcomm Technologies, Inc. SM8150 V2 PM8150 Google Inc. MSM
    task: 000000002a3dfffe task.stack: 00000000a3933121
    pc : __cfi_check_fail+0x1c/0x24
    lr : __cfi_check_fail+0x1c/0x24
    ...
    Call trace:
    __cfi_check_fail+0x1c/0x24
    name_to_dev_t+0x0/0x468
    nfnetlink_parse_nat_setup+0x234/0x258
    ctnetlink_parse_nat_setup+0x4c/0x228
    ctnetlink_new_conntrack+0x590/0xc40
    nfnetlink_rcv_msg+0x31c/0x4d4
    netlink_rcv_skb+0x100/0x184
    nfnetlink_rcv+0xf4/0x180
    netlink_unicast+0x360/0x770
    netlink_sendmsg+0x5a0/0x6a4
    ___sys_sendmsg+0x314/0x46c
    SyS_sendmsg+0xb4/0x108
    el0_svc_naked+0x34/0x38
    
    This crash is not happening since 5.4+, however, ctnetlink still
    allows for creating entries with unsupported layer 3 protocol number.
    
    Fixes: c1d10adb4a521 ("[NETFILTER]: Add ctnetlink port for nf_conntrack")
    Signed-off-by: Will McVicker <willmcvicker@google.com>
    [pablo@netfilter.org: rebased original patch on top of nf.git]
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d00228cc4f1ade680ccc83eae44b607671c3c2c
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 24 19:41:58 2020 -0400

    ep_create_wakeup_source(): dentry name can change under you...
    
    commit 3701cb59d892b88d569427586f01491552f377b1 upstream.
    
    or get freed, for that matter, if it's a long (separately stored)
    name.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5db65f9faf5ccef96866f08c4cacbfd2b5efda34
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 10 08:33:27 2020 -0400

    epoll: EPOLL_CTL_ADD: close the race in decision to take fast path
    
    commit fe0a916c1eae8e17e86c3753d13919177d63ed7e upstream.
    
    Checking for the lack of epitems refering to the epoll we want to insert into
    is not enough; we might have an insertion of that epoll into another one that
    has already collected the set of files to recheck for excessive reverse paths,
    but hasn't gotten to creating/inserting the epitem for it.
    
    However, any such insertion in progress can be detected - it will update the
    generation count in our epoll when it's done looking through it for files
    to check.  That gets done under ->mtx of our epoll and that allows us to
    detect that safely.
    
    We are *not* holding epmutex here, so the generation count is not stable.
    However, since both the update of ep->gen by loop check and (later)
    insertion into ->f_ep_link are done with ep->mtx held, we are fine -
    the sequence is
            grab epmutex
            bump loop_check_gen
            ...
            grab tep->mtx           // 1
            tep->gen = loop_check_gen
            ...
            drop tep->mtx           // 2
            ...
            grab tep->mtx           // 3
            ...
            insert into ->f_ep_link
            ...
            drop tep->mtx           // 4
            bump loop_check_gen
            drop epmutex
    and if the fastpath check in another thread happens for that
    eventpoll, it can come
            * before (1) - in that case fastpath is just fine
            * after (4) - we'll see non-empty ->f_ep_link, slow path
    taken
            * between (2) and (3) - loop_check_gen is stable,
    with ->mtx providing barriers and we end up taking slow path.
    
    Note that ->f_ep_link emptiness check is slightly racy - we are protected
    against insertions into that list, but removals can happen right under us.
    Not a problem - in the worst case we'll end up taking a slow path for
    no good reason.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf98a51145a48b42d71e297daeeb2fb4115a0c79
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Sep 10 08:30:05 2020 -0400

    epoll: replace ->visited/visited_list with generation count
    
    commit 18306c404abe18a0972587a6266830583c60c928 upstream.
    
    removes the need to clear it, along with the races.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8946c1e9c2700499c327833c6fd44447405eebb8
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Sep 9 22:25:06 2020 -0400

    epoll: do not insert into poll queues until all sanity checks are done
    
    commit f8d4f44df056c5b504b0d49683fb7279218fd207 upstream.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 209170971b1a474d24fea6f7c7e87ce3bc611091
Author: Or Cohen <orcohen@paloaltonetworks.com>
Date:   Thu Sep 3 21:05:28 2020 -0700

    net/packet: fix overflow in tpacket_rcv
    
    commit acf69c946233259ab4d64f8869d4037a198c7f06 upstream.
    
    Using tp_reserve to calculate netoff can overflow as
    tp_reserve is unsigned int and netoff is unsigned short.
    
    This may lead to macoff receving a smaller value then
    sizeof(struct virtio_net_hdr), and if po->has_vnet_hdr
    is set, an out-of-bounds write will occur when
    calling virtio_net_hdr_from_skb.
    
    The bug is fixed by converting netoff to unsigned int
    and checking if it exceeds USHRT_MAX.
    
    This addresses CVE-2020-14386
    
    Fixes: 8913336a7e8d ("packet: add PACKET_RESERVE sockopt")
    Signed-off-by: Or Cohen <orcohen@paloaltonetworks.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [ snu: backported to pre-5.3, changed tp_drops counting/locking ]
    Signed-off-by: Stefan Nuernberger <snu@amazon.com>
    CC: David Woodhouse <dwmw@amazon.co.uk>
    CC: Amit Shah <aams@amazon.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5394f659a486430507841bee271b383d9e8daf7c
Author: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
Date:   Fri Oct 2 17:16:11 2020 +0200

    random32: Restore __latent_entropy attribute on net_rand_state
    
    [ Upstream commit 09a6b0bc3be793ca8cba580b7992d73e9f68f15d ]
    
    Commit f227e3ec3b5c ("random32: update the net random state on interrupt
    and activity") broke compilation and was temporarily fixed by Linus in
    83bdc7275e62 ("random32: remove net_rand_state from the latent entropy
    gcc plugin") by entirely moving net_rand_state out of the things handled
    by the latent_entropy GCC plugin.
    
    From what I understand when reading the plugin code, using the
    __latent_entropy attribute on a declaration was the wrong part and
    simply keeping the __latent_entropy attribute on the variable definition
    was the correct fix.
    
    Fixes: 83bdc7275e62 ("random32: remove net_rand_state from the latent entropy gcc plugin")
    Acked-by: Willy Tarreau <w@1wt.eu>
    Cc: Emese Revfy <re.emese@gmail.com>
    Signed-off-by: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd7ea07b1084c0403041ff442dbe70b3a35318ed
Author: Vincent Huang <vincent.huang@tw.synaptics.com>
Date:   Mon Sep 28 16:19:05 2020 -0700

    Input: trackpoint - enable Synaptics trackpoints
    
    [ Upstream commit 996d585b079ad494a30cac10e08585bcd5345125 ]
    
    Add Synaptics IDs in trackpoint_start_protocol() to mark them as valid.
    
    Signed-off-by: Vincent Huang <vincent.huang@tw.synaptics.com>
    Fixes: 6c77545af100 ("Input: trackpoint - add new trackpoint variant IDs")
    Reviewed-by: Harry Cutts <hcutts@chromium.org>
    Tested-by: Harry Cutts <hcutts@chromium.org>
    Link: https://lore.kernel.org/r/20200924053013.1056953-1-vincent.huang@tw.synaptics.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7605fb3f0b1bbd4a03f556d74b7e0737d9fa972
Author: Nicolas VINCENT <nicolas.vincent@vossloh.com>
Date:   Wed Sep 23 16:08:40 2020 +0200

    i2c: cpm: Fix i2c_ram structure
    
    [ Upstream commit a2bd970aa62f2f7f80fd0d212b1d4ccea5df4aed ]
    
    the i2c_ram structure is missing the sdmatmp field mentionned in
    datasheet for MPC8272 at paragraph 36.5. With this field missing, the
    hardware would write past the allocated memory done through
    cpm_muram_alloc for the i2c_ram structure and land in memory allocated
    for the buffers descriptors corrupting the cbd_bufaddr field. Since this
    field is only set during setup(), the first i2c transaction would work
    and the following would send data read from an arbitrary memory
    location.
    
    Fixes: 61045dbe9d8d ("i2c: Add support for I2C bus on Freescale CPM1/CPM2 controllers")
    Signed-off-by: Nicolas VINCENT <nicolas.vincent@vossloh.com>
    Acked-by: Jochen Friedrich <jochen@scram.de>
    Acked-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe3b0d8a13e91a4b30bef4dd0fd685dd1fe07f59
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Fri Sep 18 09:13:35 2020 +0800

    iommu/exynos: add missing put_device() call in exynos_iommu_of_xlate()
    
    [ Upstream commit 1a26044954a6d1f4d375d5e62392446af663be7a ]
    
    if of_find_device_by_node() succeed, exynos_iommu_of_xlate() doesn't have
    a corresponding put_device(). Thus add put_device() to fix the exception
    handling for this function implementation.
    
    Fixes: aa759fd376fb ("iommu/exynos: Add callback for initializing devices from device tree")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Acked-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20200918011335.909141-1-yukuai3@huawei.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8694315d78435f9445fdb9c719cdd3c2e480d21
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Sep 22 14:40:46 2020 +0200

    clk: samsung: exynos4: mark 'chipid' clock as CLK_IGNORE_UNUSED
    
    [ Upstream commit f3bb0f796f5ffe32f0fbdce5b1b12eb85511158f ]
    
    The ChipID IO region has it's own clock, which is being disabled while
    scanning for unused clocks. It turned out that some CPU hotplug, CPU idle
    or even SOC firmware code depends on the reads from that area. Fix the
    mysterious hang caused by entering deep CPU idle state by ignoring the
    'chipid' clock during unused clocks scan, as there are no direct clients
    for it which will keep it enabled.
    
    Fixes: e062b571777f ("clk: exynos4: register clocks using common clock framework")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20200922124046.10496-1-m.szyprowski@samsung.com
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Acked-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df86bb26e3d0edf106c67f17936244e258f21cf8
Author: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
Date:   Tue Sep 15 16:42:52 2020 -0500

    nfs: Fix security label length not being reset
    
    [ Upstream commit d33030e2ee3508d65db5644551435310df86010e ]
    
    nfs_readdir_page_filler() iterates over entries in a directory, reusing
    the same security label buffer, but does not reset the buffer's length.
    This causes decode_attr_security_label() to return -ERANGE if an entry's
    security label is longer than the previous one's. This error, in
    nfs4_decode_dirent(), only gets passed up as -EAGAIN, which causes another
    failed attempt to copy into the buffer. The second error is ignored and
    the remaining entries do not show up in ls, specifically the getdents64()
    syscall.
    
    Reproduce by creating multiple files in NFS and giving one of the later
    files a longer security label. ls will not see that file nor any that are
    added afterwards, though they will exist on the backend.
    
    In nfs_readdir_page_filler(), reset security label buffer length before
    every reuse
    
    Signed-off-by: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
    Fixes: b4487b935452 ("nfs: Fix getxattr kernel panic and memory overflow")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd33af5817a1651bfb33058fe18ae09ca2e97619
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Tue Sep 8 09:17:10 2020 +1200

    pinctrl: mvebu: Fix i2c sda definition for 98DX3236
    
    [ Upstream commit 63c3212e7a37d68c89a13bdaebce869f4e064e67 ]
    
    Per the datasheet the i2c functions use MPP_Sel=0x1. They are documented
    as using MPP_Sel=0x4 as well but mixing 0x1 and 0x4 is clearly wrong. On
    the board tested 0x4 resulted in a non-functioning i2c bus so stick with
    0x1 which works.
    
    Fixes: d7ae8f8dee7f ("pinctrl: mvebu: pinctrl driver for 98DX3236 SoC")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20200907211712.9697-2-chris.packham@alliedtelesis.co.nz
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 306ade33fbf66249934b2fb3a39420aaf7c41893
Author: James Smart <james.smart@broadcom.com>
Date:   Thu Sep 17 13:33:22 2020 -0700

    nvme-fc: fail new connections to a deleted host or remote port
    
    [ Upstream commit 9e0e8dac985d4bd07d9e62922b9d189d3ca2fccf ]
    
    The lldd may have made calls to delete a remote port or local port and
    the delete is in progress when the cli then attempts to create a new
    controller. Currently, this proceeds without error although it can't be
    very successful.
    
    Fix this by validating that both the host port and remote port are
    present when a new controller is to be created.
    
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8c7f76d7e0e81b8e98c399353cf68ad3441a9ee
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Fri Sep 4 12:28:12 2020 +1200

    spi: fsl-espi: Only process interrupts for expected events
    
    [ Upstream commit b867eef4cf548cd9541225aadcdcee644669b9e1 ]
    
    The SPIE register contains counts for the TX FIFO so any time the irq
    handler was invoked we would attempt to process the RX/TX fifos. Use the
    SPIM value to mask the events so that we only process interrupts that
    were expected.
    
    This was a latent issue exposed by commit 3282a3da25bd ("powerpc/64:
    Implement soft interrupt replay in C").
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Link: https://lore.kernel.org/r/20200904002812.7300-1-chris.packham@alliedtelesis.co.nz
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a684394a2dfc453be406240ee19840e1fa9e6416
Author: Felix Fietkau <nbd@nbd.name>
Date:   Thu Sep 17 14:50:31 2020 +0200

    mac80211: do not allow bigger VHT MPDUs than the hardware supports
    
    [ Upstream commit 3bd5c7a28a7c3aba07a2d300d43f8e988809e147 ]
    
    Limit maximum VHT MPDU size by local capability.
    
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20200917125031.45009-1-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 818d7c61098c0f3abe2d8ed7f6afb5e853d61040
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Sep 16 14:25:07 2020 -0700

    drivers/net/wan/hdlc: Set skb->protocol before transmitting
    
    [ Upstream commit 9fb030a70431a2a2a1b292dbf0b2f399cc072c16 ]
    
    This patch sets skb->protocol before transmitting frames on the HDLC
    device, so that a user listening on the HDLC device with an AF_PACKET
    socket will see outgoing frames' sll_protocol field correctly set and
    consistent with that of incoming frames.
    
    1. Control frames in hdlc_cisco and hdlc_ppp
    
    When these drivers send control frames, skb->protocol is not set.
    
    This value should be set to htons(ETH_P_HDLC), because when receiving
    control frames, their skb->protocol is set to htons(ETH_P_HDLC).
    
    When receiving, hdlc_type_trans in hdlc.h is called, which then calls
    cisco_type_trans or ppp_type_trans. The skb->protocol of control frames
    is set to htons(ETH_P_HDLC) so that the control frames can be received
    by hdlc_rcv in hdlc.c, which calls cisco_rx or ppp_rx to process the
    control frames.
    
    2. hdlc_fr
    
    When this driver sends control frames, skb->protocol is set to internal
    values used in this driver.
    
    When this driver sends data frames (from upper stacked PVC devices),
    skb->protocol is the same as that of the user data packet being sent on
    the upper PVC device (for normal PVC devices), or is htons(ETH_P_802_3)
    (for Ethernet-emulating PVC devices).
    
    However, skb->protocol for both control frames and data frames should be
    set to htons(ETH_P_HDLC), because when receiving, all frames received on
    the HDLC device will have their skb->protocol set to htons(ETH_P_HDLC).
    
    When receiving, hdlc_type_trans in hdlc.h is called, and because this
    driver doesn't provide a type_trans function in struct hdlc_proto,
    all frames will have their skb->protocol set to htons(ETH_P_HDLC).
    The frames are then received by hdlc_rcv in hdlc.c, which calls fr_rx
    to process the frames (control frames are consumed and data frames
    are re-received on upper PVC devices).
    
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65a4916f42002ffb7557e379772ca05d755d9346
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Sep 16 09:49:18 2020 -0700

    drivers/net/wan/lapbether: Make skb->protocol consistent with the header
    
    [ Upstream commit 83f9a9c8c1edc222846dc1bde6e3479703e8e5a3 ]
    
    This driver is a virtual driver stacked on top of Ethernet interfaces.
    
    When this driver transmits data on the Ethernet device, the skb->protocol
    setting is inconsistent with the Ethernet header prepended to the skb.
    
    This causes a user listening on the Ethernet interface with an AF_PACKET
    socket, to see different sll_protocol values for incoming and outgoing
    frames, because incoming frames would have this value set by parsing the
    Ethernet header.
    
    This patch changes the skb->protocol value for outgoing Ethernet frames,
    making it consistent with the Ethernet header prepended. This makes a
    user listening on the Ethernet device with an AF_PACKET socket, to see
    the same sll_protocol value for incoming and outgoing frames.
    
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a91e3734520ce505f955f74b4426734f28c852e
Author: Olympia Giannou <ogiannou@gmail.com>
Date:   Fri Sep 11 14:17:24 2020 +0000

    rndis_host: increase sleep time in the query-response loop
    
    [ Upstream commit 4202c9fdf03d79dedaa94b2c4cf574f25793d669 ]
    
    Some WinCE devices face connectivity issues via the NDIS interface. They
    fail to register, resulting in -110 timeout errors and failures during the
    probe procedure.
    
    In this kind of WinCE devices, the Windows-side ndis driver needs quite
    more time to be loaded and configured, so that the linux rndis host queries
    to them fail to be responded correctly on time.
    
    More specifically, when INIT is called on the WinCE side - no other
    requests can be served by the Client and this results in a failed QUERY
    afterwards.
    
    The increase of the waiting time on the side of the linux rndis host in
    the command-response loop leaves the INIT process to complete and respond
    to a QUERY, which comes afterwards. The WinCE devices with this special
    "feature" in their ndis driver are satisfied by this fix.
    
    Signed-off-by: Olympia Giannou <olympia.giannou@leica-geosystems.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5da1ef954e76f2bfd6a5498d83a6c64cd5084936
Author: Lucy Yan <lucyyan@google.com>
Date:   Thu Sep 10 12:05:09 2020 -0700

    net: dec: de2104x: Increase receive ring size for Tulip
    
    [ Upstream commit ee460417d254d941dfea5fb7cff841f589643992 ]
    
    Increase Rx ring size to address issue where hardware is reaching
    the receive work limit.
    
    Before:
    
    [  102.223342] de2104x 0000:17:00.0 eth0: rx work limit reached
    [  102.245695] de2104x 0000:17:00.0 eth0: rx work limit reached
    [  102.251387] de2104x 0000:17:00.0 eth0: rx work limit reached
    [  102.267444] de2104x 0000:17:00.0 eth0: rx work limit reached
    
    Signed-off-by: Lucy Yan <lucyyan@google.com>
    Reviewed-by: Moritz Fischer <mdf@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2f84e38ebe1938a52676797920aaf6692a78c68
Author: Martin Cerveny <m.cerveny@computer.org>
Date:   Sun Sep 6 18:21:40 2020 +0200

    drm/sun4i: mixer: Extend regmap max_register
    
    [ Upstream commit 74ea06164cda81dc80e97790164ca533fd7e3087 ]
    
    Better guess. Secondary CSC registers are from 0xF0000.
    
    Signed-off-by: Martin Cerveny <m.cerveny@computer.org>
    Reviewed-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200906162140.5584-3-m.cerveny@computer.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66ddf1eb81053192ae24c6c1440b8af0964979e1
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Sep 2 17:06:58 2020 -0700

    drivers/net/wan/hdlc_fr: Add needed_headroom for PVC devices
    
    [ Upstream commit 44a049c42681de71c783d75cd6e56b4e339488b0 ]
    
    PVC devices are virtual devices in this driver stacked on top of the
    actual HDLC device. They are the devices normal users would use.
    PVC devices have two types: normal PVC devices and Ethernet-emulating
    PVC devices.
    
    When transmitting data with PVC devices, the ndo_start_xmit function
    will prepend a header of 4 or 10 bytes. Currently this driver requests
    this headroom to be reserved for normal PVC devices by setting their
    hard_header_len to 10. However, this does not work when these devices
    are used with AF_PACKET/RAW sockets. Also, this driver does not request
    this headroom for Ethernet-emulating PVC devices (but deals with this
    problem by reallocating the skb when needed, which is not optimal).
    
    This patch replaces hard_header_len with needed_headroom, and set
    needed_headroom for Ethernet-emulating PVC devices, too. This makes
    the driver to request headroom for all PVC devices in all cases.
    
    Cc: Krzysztof Halasa <khc@pm.waw.pl>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e43a72d143edfe628d9c1614adc4e304f099c7d5
Author: Jean Delvare <jdelvare@suse.de>
Date:   Mon Sep 28 11:10:37 2020 +0200

    drm/amdgpu: restore proper ref count in amdgpu_display_crtc_set_config
    
    commit a39d0d7bdf8c21ac7645c02e9676b5cb2b804c31 upstream.
    
    A recent attempt to fix a ref count leak in
    amdgpu_display_crtc_set_config() turned out to be doing too much and
    "fixed" an intended decrease as if it were a leak. Undo that part to
    restore the proper balance. This is the very nature of this function
    to increase or decrease the power reference count depending on the
    situation.
    
    Consequences of this bug is that the power reference would
    eventually get down to 0 while the display was still in use,
    resulting in that display switching off unexpectedly.
    
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Fixes: e008fa6fb415 ("drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config")
    Cc: stable@vger.kernel.org
    Cc: Navid Emamdoost <navid.emamdoost@gmail.com>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ce70af06f08a73b0c4b193e781437b09a8409c7
Author: Jiri Kosina <jkosina@suse.cz>
Date:   Mon Sep 28 16:21:17 2020 -0700

    Input: i8042 - add nopnp quirk for Acer Aspire 5 A515
    
    commit 5fc27b098dafb8e30794a9db0705074c7d766179 upstream.
    
    Touchpad on this laptop is not detected properly during boot, as PNP
    enumerates (wrongly) AUX port as disabled on this machine.
    
    Fix that by adding this board (with admittedly quite funny DMI
    identifiers) to nopnp quirk list.
    
    Reported-by: Andrés Barrantes Silman <andresbs2000@protonmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Link: https://lore.kernel.org/r/nycvar.YFH.7.76.2009252337340.3336@cbobk.fhfr.pm
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbcd4486870e5b11fda4550a78b51359e604540b
Author: dillon min <dillon.minfei@gmail.com>
Date:   Thu Sep 3 15:30:21 2020 +0800

    gpio: tc35894: fix up tc35894 interrupt configuration
    
    commit 214b0e1ad01abf4c1f6d8d28fa096bf167e47cef upstream.
    
    The offset of regmap is incorrect, j * 8 is move to the
    wrong register.
    
    for example:
    
    asume i = 0, j = 1. we want to set KPY5 as interrupt
    falling edge mode, regmap[0][1] should be TC3589x_GPIOIBE1 0xcd
    but, regmap[i] + j * 8 = TC3589x_GPIOIBE0 + 8 ,point to 0xd4,
    this is TC3589x_GPIOIE2 not TC3589x_GPIOIBE1.
    
    Fixes: d88b25be3584 ("gpio: Add TC35892 GPIO driver")
    Cc: Cc: stable@vger.kernel.org
    Signed-off-by: dillon min <dillon.minfei@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31d9d108e0fa0ca50feb249158fda4e9b98db739
Author: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date:   Sun Sep 20 18:01:58 2020 +0100

    USB: gadget: f_ncm: Fix NDP16 datagram validation
    
    commit 2b405533c2560d7878199c57d95a39151351df72 upstream.
    
    commit 2b74b0a04d3e ("USB: gadget: f_ncm: add bounds checks to ncm_unwrap_ntb()")
    adds important bounds checking however it unfortunately also introduces  a
    bug with respect to section 3.3.1 of the NCM specification.
    
    wDatagramIndex[1] : "Byte index, in little endian, of the second datagram
    described by this NDP16. If zero, then this marks the end of the sequence
    of datagrams in this NDP16."
    
    wDatagramLength[1]: "Byte length, in little endian, of the second datagram
    described by this NDP16. If zero, then this marks the end of the sequence
    of datagrams in this NDP16."
    
    wDatagramIndex[1] and wDatagramLength[1] respectively then may be zero but
    that does not mean we should throw away the data referenced by
    wDatagramIndex[0] and wDatagramLength[0] as is currently the case.
    
    Breaking the loop on (index2 == 0 || dg_len2 == 0) should come at the end
    as was previously the case and checks for index2 and dg_len2 should be
    removed since zero is valid.
    
    I'm not sure how much testing the above patch received but for me right now
    after enumeration ping doesn't work. Reverting the commit restores ping,
    scp, etc.
    
    The extra validation associated with wDatagramIndex[0] and
    wDatagramLength[0] appears to be valid so, this change removes the incorrect
    restriction on wDatagramIndex[1] and wDatagramLength[1] restoring data
    processing between host and device.
    
    Fixes: 2b74b0a04d3e ("USB: gadget: f_ncm: add bounds checks to ncm_unwrap_ntb()")
    Cc: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Cc: Brooke Basile <brookebasile@gmail.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
    Link: https://lore.kernel.org/r/20200920170158.1217068-1-bryan.odonoghue@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0892147cc1a7dfdf297e3a4fe3c0df5666e17b48
Author: Sebastien Boeuf <sebastien.boeuf@intel.com>
Date:   Fri Feb 14 12:48:01 2020 +0100

    net: virtio_vsock: Enhance connection semantics
    
    [ Upstream commit df12eb6d6cd920ab2f0e0a43cd6e1c23a05cea91 ]
    
    Whenever the vsock backend on the host sends a packet through the RX
    queue, it expects an answer on the TX queue. Unfortunately, there is one
    case where the host side will hang waiting for the answer and might
    effectively never recover if no timeout mechanism was implemented.
    
    This issue happens when the guest side starts binding to the socket,
    which insert a new bound socket into the list of already bound sockets.
    At this time, we expect the guest to also start listening, which will
    trigger the sk_state to move from TCP_CLOSE to TCP_LISTEN. The problem
    occurs if the host side queued a RX packet and triggered an interrupt
    right between the end of the binding process and the beginning of the
    listening process. In this specific case, the function processing the
    packet virtio_transport_recv_pkt() will find a bound socket, which means
    it will hit the switch statement checking for the sk_state, but the
    state won't be changed into TCP_LISTEN yet, which leads the code to pick
    the default statement. This default statement will only free the buffer,
    while it should also respond to the host side, by sending a packet on
    its TX queue.
    
    In order to simply fix this unfortunate chain of events, it is important
    that in case the default statement is entered, and because at this stage
    we know the host side is waiting for an answer, we must send back a
    packet containing the operation VIRTIO_VSOCK_OP_RST.
    
    One could say that a proper timeout mechanism on the host side will be
    enough to avoid the backend to hang. But the point of this patch is to
    ensure the normal use case will be provided with proper responsiveness
    when it comes to establishing the connection.
    
    Signed-off-by: Sebastien Boeuf <sebastien.boeuf@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72315f574eaca5f8aeb24d554de99739f5bba3d6
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Thu Nov 14 10:57:40 2019 +0100

    vsock/virtio: add transport parameter to the virtio_transport_reset_no_sock()
    
    [ Upstream commit 4c7246dc45e2706770d5233f7ce1597a07e069ba ]
    
    We are going to add 'struct vsock_sock *' parameter to
    virtio_transport_get_ops().
    
    In some cases, like in the virtio_transport_reset_no_sock(),
    we don't have any socket assigned to the packet received,
    so we can't use the virtio_transport_get_ops().
    
    In order to allow virtio_transport_reset_no_sock() to use the
    '.send_pkt' callback from the 'vhost_transport' or 'virtio_transport',
    we add the 'struct virtio_transport *' to it and to its caller:
    virtio_transport_recv_pkt().
    
    We moved the 'vhost_transport' and 'virtio_transport' definition,
    to pass their address to the virtio_transport_recv_pkt().
    
    Reviewed-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68326a8dc3f6b48e44865488078e9ebd42a61cf5
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jul 5 13:04:53 2019 +0200

    vsock/virtio: stop workers during the .remove()
    
    [ Upstream commit 17dd1367389cfe7f150790c83247b68e0c19d106 ]
    
    Before to call vdev->config->reset(vdev) we need to be sure that
    no one is accessing the device, for this reason, we add new variables
    in the struct virtio_vsock to stop the workers during the .remove().
    
    This patch also add few comments before vdev->config->reset(vdev)
    and vdev->config->del_vqs(vdev).
    
    Suggested-by: Stefan Hajnoczi <stefanha@redhat.com>
    Suggested-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51d044cd4270d2805f7dd2640dc3e7cd86ce4c38
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Fri Jul 5 13:04:52 2019 +0200

    vsock/virtio: use RCU to avoid use-after-free on the_virtio_vsock
    
    [ Upstream commit 9c7a5582f5d720dc35cfcc42ccaded69f0642e4a ]
    
    Some callbacks used by the upper layers can run while we are in the
    .remove(). A potential use-after-free can happen, because we free
    the_virtio_vsock without knowing if the callbacks are over or not.
    
    To solve this issue we move the assignment of the_virtio_vsock at the
    end of .probe(), when we finished all the initialization, and at the
    beginning of .remove(), before to release resources.
    For the same reason, we do the same also for the vdev->priv.
    
    We use RCU to be sure that all callbacks that use the_virtio_vsock
    ended before freeing it. This is not required for callbacks that
    use vdev->priv, because after the vdev->config->del_vqs() we are sure
    that they are ended and will no longer be invoked.
    
    We also take the mutex during the .remove() to avoid that .probe() can
    run while we are resetting the device.
    
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be603f5e546044d0efe86ddfc6be23e4a32d74af
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 17:27:01 2023 +0500

    Revert a small change from 46961211b097409c50651e0e2d0fc6dbe0c7be73 causing undeclared error

commit 933d2c6157cf164544bb26954f858cc95f339ec3
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Oct 1 13:12:53 2020 +0200

    Linux 4.14.200
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/r/20200929105935.184737111@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b504747ad0c6f888105948bf9d039240ff315fb3
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Oct 31 10:59:46 2019 +0100

    ata: sata_mv, avoid trigerrable BUG_ON
    
    commit e9f691d899188679746eeb96e6cb520459eda9b4 upstream.
    
    There are several reports that the BUG_ON on unsupported command in
    mv_qc_prep can be triggered under some circumstances:
    https://bugzilla.suse.com/show_bug.cgi?id=1110252
    https://serverfault.com/questions/888897/raid-problems-after-power-outage
    https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1652185
    https://bugs.centos.org/view.php?id=14998
    
    Let sata_mv handle the failure gracefully: warn about that incl. the
    failed command number and return an AC_ERR_INVALID error. We can do that
    now thanks to the previous patch.
    
    Remove also the long-standing FIXME.
    
    [v2] use %.2x as commands are defined as hexa.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: linux-ide@vger.kernel.org
    Cc: Sergei Shtylyov <sergei.shtylyov@cogentembedded.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05592629f3de92cf0fc444b0441ddc86376515cb
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Oct 31 10:59:45 2019 +0100

    ata: make qc_prep return ata_completion_errors
    
    commit 95364f36701e62dd50eee91e1303187fd1a9f567 upstream.
    
    In case a driver wants to return an error from qc_prep, return enum
    ata_completion_errors. sata_mv is one of those drivers -- see the next
    patch. Other drivers return the newly defined AC_ERR_OK.
    
    [v2] use enum ata_completion_errors and AC_ERR_OK.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: linux-ide@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45379e6b627f6917dfebe6205f88557e16273af2
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Thu Oct 31 10:59:44 2019 +0100

    ata: define AC_ERR_OK
    
    commit 25937580a5065d6fbd92d9c8ebd47145ad80052e upstream.
    
    Since we will return enum ata_completion_errors from qc_prep in the next
    patch, let's define AC_ERR_OK to mark the OK status.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: linux-ide@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 527eb7bdf53461d52a65759a0844bd3363528cde
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Fri Sep 25 21:19:18 2020 -0700

    lib/string.c: implement stpcpy
    
    commit 1e1b6d63d6340764e00356873e5794225a2a03ea upstream.
    
    LLVM implemented a recent "libcall optimization" that lowers calls to
    `sprintf(dest, "%s", str)` where the return value is used to
    `stpcpy(dest, str) - dest`.
    
    This generally avoids the machinery involved in parsing format strings.
    `stpcpy` is just like `strcpy` except it returns the pointer to the new
    tail of `dest`.  This optimization was introduced into clang-12.
    
    Implement this so that we don't observe linkage failures due to missing
    symbol definitions for `stpcpy`.
    
    Similar to last year's fire drill with: commit 5f074f3e192f
    ("lib/string.c: implement a basic bcmp")
    
    The kernel is somewhere between a "freestanding" environment (no full
    libc) and "hosted" environment (many symbols from libc exist with the
    same type, function signature, and semantics).
    
    As Peter Anvin notes, there's not really a great way to inform the
    compiler that you're targeting a freestanding environment but would like
    to opt-in to some libcall optimizations (see pr/47280 below), rather
    than opt-out.
    
    Arvind notes, -fno-builtin-* behaves slightly differently between GCC
    and Clang, and Clang is missing many __builtin_* definitions, which I
    consider a bug in Clang and am working on fixing.
    
    Masahiro summarizes the subtle distinction between compilers justly:
      To prevent transformation from foo() into bar(), there are two ways in
      Clang to do that; -fno-builtin-foo, and -fno-builtin-bar.  There is
      only one in GCC; -fno-buitin-foo.
    
    (Any difference in that behavior in Clang is likely a bug from a missing
    __builtin_* definition.)
    
    Masahiro also notes:
      We want to disable optimization from foo() to bar(),
      but we may still benefit from the optimization from
      foo() into something else. If GCC implements the same transform, we
      would run into a problem because it is not -fno-builtin-bar, but
      -fno-builtin-foo that disables that optimization.
    
      In this regard, -fno-builtin-foo would be more future-proof than
      -fno-built-bar, but -fno-builtin-foo is still potentially overkill. We
      may want to prevent calls from foo() being optimized into calls to
      bar(), but we still may want other optimization on calls to foo().
    
    It seems that compilers today don't quite provide the fine grain control
    over which libcall optimizations pseudo-freestanding environments would
    prefer.
    
    Finally, Kees notes that this interface is unsafe, so we should not
    encourage its use.  As such, I've removed the declaration from any
    header, but it still needs to be exported to avoid linkage errors in
    modules.
    
    Reported-by: Sami Tolvanen <samitolvanen@google.com>
    Suggested-by: Andy Lavr <andy.lavr@gmail.com>
    Suggested-by: Arvind Sankar <nivedita@alum.mit.edu>
    Suggested-by: Joe Perches <joe@perches.com>
    Suggested-by: Kees Cook <keescook@chromium.org>
    Suggested-by: Masahiro Yamada <masahiroy@kernel.org>
    Suggested-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200914161643.938408-1-ndesaulniers@google.com
    Link: https://bugs.llvm.org/show_bug.cgi?id=47162
    Link: https://bugs.llvm.org/show_bug.cgi?id=47280
    Link: https://github.com/ClangBuiltLinux/linux/issues/1126
    Link: https://man7.org/linux/man-pages/man3/stpcpy.3.html
    Link: https://pubs.opengroup.org/onlinepubs/9699919799/functions/stpcpy.html
    Link: https://reviews.llvm.org/D85963
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c33ee4a55d4a161214381a5d9dd5b10261ccbd24
Author: Gao Xiang <hsiangkao@redhat.com>
Date:   Fri Sep 25 21:19:01 2020 -0700

    mm, THP, swap: fix allocating cluster for swapfile by mistake
    
    commit 41663430588c737dd735bad5a0d1ba325dcabd59 upstream.
    
    SWP_FS is used to make swap_{read,write}page() go through the
    filesystem, and it's only used for swap files over NFS.  So, !SWP_FS
    means non NFS for now, it could be either file backed or device backed.
    Something similar goes with legacy SWP_FILE.
    
    So in order to achieve the goal of the original patch, SWP_BLKDEV should
    be used instead.
    
    FS corruption can be observed with SSD device + XFS + fragmented
    swapfile due to CONFIG_THP_SWAP=y.
    
    I reproduced the issue with the following details:
    
    Environment:
    
      QEMU + upstream kernel + buildroot + NVMe (2 GB)
    
    Kernel config:
    
      CONFIG_BLK_DEV_NVME=y
      CONFIG_THP_SWAP=y
    
    Some reproducible steps:
    
      mkfs.xfs -f /dev/nvme0n1
      mkdir /tmp/mnt
      mount /dev/nvme0n1 /tmp/mnt
      bs="32k"
      sz="1024m"    # doesn't matter too much, I also tried 16m
      xfs_io -f -c "pwrite -R -b $bs 0 $sz" -c "fdatasync" /tmp/mnt/sw
      xfs_io -f -c "pwrite -R -b $bs 0 $sz" -c "fdatasync" /tmp/mnt/sw
      xfs_io -f -c "pwrite -R -b $bs 0 $sz" -c "fdatasync" /tmp/mnt/sw
      xfs_io -f -c "pwrite -F -S 0 -b $bs 0 $sz" -c "fdatasync" /tmp/mnt/sw
      xfs_io -f -c "pwrite -R -b $bs 0 $sz" -c "fsync" /tmp/mnt/sw
    
      mkswap /tmp/mnt/sw
      swapon /tmp/mnt/sw
    
      stress --vm 2 --vm-bytes 600M   # doesn't matter too much as well
    
    Symptoms:
     - FS corruption (e.g. checksum failure)
     - memory corruption at: 0xd2808010
     - segfault
    
    Fixes: f0eea189e8e9 ("mm, THP, swap: Don't allocate huge cluster for file backed swap device")
    Fixes: 38d8b4e6bdc8 ("mm, THP, swap: delay splitting THP during swap out")
    Signed-off-by: Gao Xiang <hsiangkao@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: "Huang, Ying" <ying.huang@intel.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Acked-by: Rafael Aquini <aquini@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Carlos Maiolino <cmaiolino@redhat.com>
    Cc: Eric Sandeen <esandeen@redhat.com>
    Cc: Dave Chinner <david@fromorbit.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200820045323.7809-1-hsiangkao@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14b79829926d7b1e7921abe6a7c462d752ad4c4d
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Tue Sep 1 00:12:07 2020 +0900

    kprobes: Fix to check probe enabled before disarm_kprobe_ftrace()
    
    commit 3031313eb3d549b7ad6f9fbcc52ba04412e3eb9e upstream.
    
    Commit 0cb2f1372baa ("kprobes: Fix NULL pointer dereference at
    kprobe_ftrace_handler") fixed one bug but not completely fixed yet.
    If we run a kprobe_module.tc of ftracetest, kernel showed a warning
    as below.
    
    # ./ftracetest test.d/kprobe/kprobe_module.tc
    === Ftrace unit tests ===
    [1] Kprobe dynamic event - probing module
    ...
    [   22.400215] ------------[ cut here ]------------
    [   22.400962] Failed to disarm kprobe-ftrace at trace_printk_irq_work+0x0/0x7e [trace_printk] (-2)
    [   22.402139] WARNING: CPU: 7 PID: 200 at kernel/kprobes.c:1091 __disarm_kprobe_ftrace.isra.0+0x7e/0xa0
    [   22.403358] Modules linked in: trace_printk(-)
    [   22.404028] CPU: 7 PID: 200 Comm: rmmod Not tainted 5.9.0-rc2+ #66
    [   22.404870] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-1ubuntu1 04/01/2014
    [   22.406139] RIP: 0010:__disarm_kprobe_ftrace.isra.0+0x7e/0xa0
    [   22.406947] Code: 30 8b 03 eb c9 80 3d e5 09 1f 01 00 75 dc 49 8b 34 24 89 c2 48 c7 c7 a0 c2 05 82 89 45 e4 c6 05 cc 09 1f 01 01 e8 a9 c7 f0 ff <0f> 0b 8b 45 e4 eb b9 89 c6 48 c7 c7 70 c2 05 82 89 45 e4 e8 91 c7
    [   22.409544] RSP: 0018:ffffc90000237df0 EFLAGS: 00010286
    [   22.410385] RAX: 0000000000000000 RBX: ffffffff83066024 RCX: 0000000000000000
    [   22.411434] RDX: 0000000000000001 RSI: ffffffff810de8d3 RDI: ffffffff810de8d3
    [   22.412687] RBP: ffffc90000237e10 R08: 0000000000000001 R09: 0000000000000001
    [   22.413762] R10: 0000000000000000 R11: 0000000000000001 R12: ffff88807c478640
    [   22.414852] R13: ffffffff8235ebc0 R14: ffffffffa00060c0 R15: 0000000000000000
    [   22.415941] FS:  00000000019d48c0(0000) GS:ffff88807d7c0000(0000) knlGS:0000000000000000
    [   22.417264] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   22.418176] CR2: 00000000005bb7e3 CR3: 0000000078f7a000 CR4: 00000000000006a0
    [   22.419309] Call Trace:
    [   22.419990]  kill_kprobe+0x94/0x160
    [   22.420652]  kprobes_module_callback+0x64/0x230
    [   22.421470]  notifier_call_chain+0x4f/0x70
    [   22.422184]  blocking_notifier_call_chain+0x49/0x70
    [   22.422979]  __x64_sys_delete_module+0x1ac/0x240
    [   22.423733]  do_syscall_64+0x38/0x50
    [   22.424366]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   22.425176] RIP: 0033:0x4bb81d
    [   22.425741] Code: 00 c3 66 2e 0f 1f 84 00 00 00 00 00 90 f3 0f 1e fa 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 e0 ff ff ff f7 d8 64 89 01 48
    [   22.428726] RSP: 002b:00007ffc70fef008 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    [   22.430169] RAX: ffffffffffffffda RBX: 00000000019d48a0 RCX: 00000000004bb81d
    [   22.431375] RDX: 0000000000000000 RSI: 0000000000000880 RDI: 00007ffc70fef028
    [   22.432543] RBP: 0000000000000880 R08: 00000000ffffffff R09: 00007ffc70fef320
    [   22.433692] R10: 0000000000656300 R11: 0000000000000246 R12: 00007ffc70fef028
    [   22.434635] R13: 0000000000000000 R14: 0000000000000002 R15: 0000000000000000
    [   22.435682] irq event stamp: 1169
    [   22.436240] hardirqs last  enabled at (1179): [<ffffffff810df542>] console_unlock+0x422/0x580
    [   22.437466] hardirqs last disabled at (1188): [<ffffffff810df19b>] console_unlock+0x7b/0x580
    [   22.438608] softirqs last  enabled at (866): [<ffffffff81c0038e>] __do_softirq+0x38e/0x490
    [   22.439637] softirqs last disabled at (859): [<ffffffff81a00f42>] asm_call_on_stack+0x12/0x20
    [   22.440690] ---[ end trace 1e7ce7e1e4567276 ]---
    [   22.472832] trace_kprobe: This probe might be able to register after target module is loaded. Continue.
    
    This is because the kill_kprobe() calls disarm_kprobe_ftrace() even
    if the given probe is not enabled. In that case, ftrace_set_filter_ip()
    fails because the given probe point is not registered to ftrace.
    
    Fix to check the given (going) probe is enabled before invoking
    disarm_kprobe_ftrace().
    
    Link: https://lkml.kernel.org/r/159888672694.1411785.5987998076694782591.stgit@devnote2
    
    Fixes: 0cb2f1372baa ("kprobes: Fix NULL pointer dereference at kprobe_ftrace_handler")
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: "Naveen N . Rao" <naveen.n.rao@linux.ibm.com>
    Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    Cc: David Miller <davem@davemloft.net>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Cc: Chengming Zhou <zhouchengming@bytedance.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2700514d5b40f28df34e46e8b6e1e9cdc2a56b6
Author: Jan Höppner <hoeppner@linux.ibm.com>
Date:   Mon Sep 14 13:56:47 2020 +0200

    s390/dasd: Fix zero write for FBA devices
    
    commit 709192d531e5b0a91f20aa14abfe2fc27ddd47af upstream.
    
    A discard request that writes zeros using the global kernel internal
    ZERO_PAGE will fail for machines with more than 2GB of memory due to the
    location of the ZERO_PAGE.
    
    Fix this by using a driver owned global zero page allocated with GFP_DMA
    flag set.
    
    Fixes: 28b841b3a7cb ("s390/dasd: Add discard support for FBA devices")
    Signed-off-by: Jan Höppner <hoeppner@linux.ibm.com>
    Reviewed-by: Stefan Haberland <sth@linux.ibm.com>
    Cc: <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23dbf067618e31620a34c1712874ee4a384e21a0
Author: Wei Li <liwei391@huawei.com>
Date:   Wed Sep 23 14:53:12 2020 +0800

    MIPS: Add the missing 'CPU_1074K' into __get_cpu_type()
    
    [ Upstream commit e393fbe6fa27af23f78df6e16a8fd2963578a8c4 ]
    
    Commit 442e14a2c55e ("MIPS: Add 1074K CPU support explicitly.") split
    1074K from the 74K as an unique CPU type, while it missed to add the
    'CPU_1074K' in __get_cpu_type(). So let's add it back.
    
    Fixes: 442e14a2c55e ("MIPS: Add 1074K CPU support explicitly.")
    Signed-off-by: Wei Li <liwei391@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66311a9cab1d62a03e79eae1151ed9cfbc909cfe
Author: Tom Rix <trix@redhat.com>
Date:   Sun Sep 13 09:52:30 2020 -0700

    ALSA: asihpi: fix iounmap in error handler
    
    [ Upstream commit 472eb39103e885f302fd8fd6eff104fcf5503f1b ]
    
    clang static analysis flags this problem
    hpioctl.c:513:7: warning: Branch condition evaluates to
      a garbage value
                    if (pci.ap_mem_base[idx]) {
                        ^~~~~~~~~~~~~~~~~~~~
    
    If there is a failure in the middle of the memory space loop,
    only some of the memory spaces need to be cleaned up.
    
    At the error handler, idx holds the number of successful
    memory spaces mapped.  So rework the handler loop to use the
    old idx.
    
    There is a second problem, the memory space loop conditionally
    iomaps()/sets the mem_base so it is necessay to initize pci.
    
    Fixes: 719f82d3987a ("ALSA: Add support of AudioScience ASI boards")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Link: https://lore.kernel.org/r/20200913165230.17166-1-trix@redhat.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87791f98a4608959c161586a112439f6355b9bc6
Author: Linus Lüssing <linus.luessing@c0d3.blue>
Date:   Tue Sep 15 09:54:09 2020 +0200

    batman-adv: mcast: fix duplicate mcast packets in BLA backbone from mesh
    
    [ Upstream commit 74c09b7275126da1b642b90c9cdc3ae8b729ad4b ]
    
    Scenario:
    * Multicast frame send from mesh to a BLA backbone (multiple nodes
      with their bat0 bridged together, with BLA enabled)
    
    Issue:
    * BLA backbone nodes receive the frame multiple times on bat0,
      once from mesh->bat0 and once from each backbone_gw from LAN
    
    For unicast, a node will send only to the best backbone gateway
    according to the TQ. However for multicast we currently cannot determine
    if multiple destination nodes share the same backbone if they don't share
    the same backbone with us. So we need to keep sending the unicasts to
    all backbone gateways and let the backbone gateways decide which one
    will forward the frame. We can use the CLAIM mechanism to make this
    decision.
    
    One catch: The batman-adv gateway feature for DHCP packets potentially
    sends multicast packets in the same batman-adv unicast header as the
    multicast optimizations code. And we are not allowed to drop those even
    if we did not claim the source address of the sender, as for such
    packets there is only this one multicast-in-unicast packet.
    
    How can we distinguish the two cases?
    
    The gateway feature uses a batman-adv unicast 4 address header. While
    the multicast-to-unicasts feature uses a simple, 3 address batman-adv
    unicast header. So let's use this to distinguish.
    
    Fixes: fe2da6ff27c7 ("batman-adv: check incoming packet type for bla")
    Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05063fb6ea174422beffc87535a37671bcd63487
Author: Sven Eckelmann <sven@narfation.org>
Date:   Mon Sep 14 13:58:16 2020 +0200

    batman-adv: Add missing include for in_interrupt()
    
    [ Upstream commit 4bba9dab86b6ac15ca560ef1f2b5aa4529cbf784 ]
    
    The fix for receiving (internally generated) bla packets outside the
    interrupt context introduced the usage of in_interrupt(). But this
    functionality is only defined in linux/preempt.h which was not included
    with the same patch.
    
    Fixes: 279e89b2281a ("batman-adv: bla: use netif_rx_ni when not in interrupt context")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24d6fa7b192bc42c6f1164088e8635177579f957
Author: Dmitry Bogdanov <dbogdanov@marvell.com>
Date:   Wed Sep 9 20:43:10 2020 +0300

    net: qed: RDMA personality shouldn't fail VF load
    
    [ Upstream commit ce1cf9e5025f4e2d2198728391f1847b3e168bc6 ]
    
    Fix the assert during VF driver installation when the personality is iWARP
    
    Fixes: 1fe614d10f45 ("qed: Relax VF firmware requirements")
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: Dmitry Bogdanov <dbogdanov@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 286ef0a5f01f3e03ea732eb98bdc40a008294e13
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Wed Jul 1 09:39:49 2020 +0200

    drm/vc4/vc4_hdmi: fill ASoC card owner
    
    [ Upstream commit ec653df2a0cbc306a4bfcb0e3484d318fa779002 ]
    
    card->owner is a required property and since commit 81033c6b584b ("ALSA:
    core: Warn on empty module") a warning is issued if it is empty. Fix lack
    of it. This fixes following warning observed on RaspberryPi 3B board
    with ARM 32bit kernel and multi_v7_defconfig:
    
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 210 at sound/core/init.c:207 snd_card_new+0x378/0x398 [snd]
    Modules linked in: vc4(+) snd_soc_core ac97_bus snd_pcm_dmaengine bluetooth snd_pcm snd_timer crc32_arm_ce raspberrypi_hwmon snd soundcore ecdh_generic ecc bcm2835_thermal phy_generic
    CPU: 1 PID: 210 Comm: systemd-udevd Not tainted 5.8.0-rc1-00027-g81033c6b584b #1087
    Hardware name: BCM2835
    [<c03113c0>] (unwind_backtrace) from [<c030bcb4>] (show_stack+0x10/0x14)
    [<c030bcb4>] (show_stack) from [<c071cef8>] (dump_stack+0xd4/0xe8)
    [<c071cef8>] (dump_stack) from [<c0345bfc>] (__warn+0xdc/0xf4)
    [<c0345bfc>] (__warn) from [<c0345cc4>] (warn_slowpath_fmt+0xb0/0xb8)
    [<c0345cc4>] (warn_slowpath_fmt) from [<bf02ff74>] (snd_card_new+0x378/0x398 [snd])
    [<bf02ff74>] (snd_card_new [snd]) from [<bf11f0b4>] (snd_soc_bind_card+0x280/0x99c [snd_soc_core])
    [<bf11f0b4>] (snd_soc_bind_card [snd_soc_core]) from [<bf12f000>] (devm_snd_soc_register_card+0x34/0x6c [snd_soc_core])
    [<bf12f000>] (devm_snd_soc_register_card [snd_soc_core]) from [<bf165654>] (vc4_hdmi_bind+0x43c/0x5f4 [vc4])
    [<bf165654>] (vc4_hdmi_bind [vc4]) from [<c09d660c>] (component_bind_all+0xec/0x24c)
    [<c09d660c>] (component_bind_all) from [<bf15c44c>] (vc4_drm_bind+0xd4/0x174 [vc4])
    [<bf15c44c>] (vc4_drm_bind [vc4]) from [<c09d6ac0>] (try_to_bring_up_master+0x160/0x1b0)
    [<c09d6ac0>] (try_to_bring_up_master) from [<c09d6f38>] (component_master_add_with_match+0xd0/0x104)
    [<c09d6f38>] (component_master_add_with_match) from [<bf15c588>] (vc4_platform_drm_probe+0x9c/0xbc [vc4])
    [<bf15c588>] (vc4_platform_drm_probe [vc4]) from [<c09df740>] (platform_drv_probe+0x6c/0xa4)
    [<c09df740>] (platform_drv_probe) from [<c09dd6f0>] (really_probe+0x210/0x350)
    [<c09dd6f0>] (really_probe) from [<c09dd940>] (driver_probe_device+0x5c/0xb4)
    [<c09dd940>] (driver_probe_device) from [<c09ddb38>] (device_driver_attach+0x58/0x60)
    [<c09ddb38>] (device_driver_attach) from [<c09ddbc0>] (__driver_attach+0x80/0xbc)
    [<c09ddbc0>] (__driver_attach) from [<c09db820>] (bus_for_each_dev+0x68/0xb4)
    [<c09db820>] (bus_for_each_dev) from [<c09dc9f8>] (bus_add_driver+0x130/0x1e8)
    [<c09dc9f8>] (bus_add_driver) from [<c09de648>] (driver_register+0x78/0x110)
    [<c09de648>] (driver_register) from [<c0302038>] (do_one_initcall+0x50/0x220)
    [<c0302038>] (do_one_initcall) from [<c03db544>] (do_init_module+0x60/0x210)
    [<c03db544>] (do_init_module) from [<c03da4f8>] (load_module+0x1e34/0x2338)
    [<c03da4f8>] (load_module) from [<c03dac00>] (sys_finit_module+0xac/0xbc)
    [<c03dac00>] (sys_finit_module) from [<c03000c0>] (ret_fast_syscall+0x0/0x54)
    Exception stack(0xeded9fa8 to 0xeded9ff0)
    ...
    ---[ end trace 6414689569c2bc08 ]---
    
    Fixes: bb7d78568814 ("drm/vc4: Add HDMI audio support")
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Stefan Wahren <stefan.wahren@i2se.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200701073949.28941-1-m.szyprowski@samsung.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e29bd82594bca5c09607e254bf288399e6ac02ac
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Sep 8 03:40:25 2020 -0700

    mac802154: tx: fix use-after-free
    
    [ Upstream commit 0ff4628f4c6c1ab87eef9f16b25355cadc426d64 ]
    
    syzbot reported a bug in ieee802154_tx() [1]
    
    A similar issue in ieee802154_xmit_worker() is also fixed in this patch.
    
    [1]
    BUG: KASAN: use-after-free in ieee802154_tx+0x3d2/0x480 net/mac802154/tx.c:88
    Read of size 4 at addr ffff8880251a8c70 by task syz-executor.3/928
    
    CPU: 0 PID: 928 Comm: syz-executor.3 Not tainted 5.9.0-rc3-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x198/0x1fd lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xae/0x497 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     ieee802154_tx+0x3d2/0x480 net/mac802154/tx.c:88
     ieee802154_subif_start_xmit+0xbe/0xe4 net/mac802154/tx.c:130
     __netdev_start_xmit include/linux/netdevice.h:4634 [inline]
     netdev_start_xmit include/linux/netdevice.h:4648 [inline]
     dev_direct_xmit+0x4e9/0x6e0 net/core/dev.c:4203
     packet_snd net/packet/af_packet.c:2989 [inline]
     packet_sendmsg+0x2413/0x5290 net/packet/af_packet.c:3014
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:671
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2353
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2407
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2440
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45d5b9
    Code: 5d b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 2b b4 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fc98e749c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 000000000002ccc0 RCX: 000000000045d5b9
    RDX: 0000000000000000 RSI: 0000000020007780 RDI: 000000000000000b
    RBP: 000000000118d020 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 000000000118cfec
    R13: 00007fff690c720f R14: 00007fc98e74a9c0 R15: 000000000118cfec
    
    Allocated by task 928:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:461
     slab_post_alloc_hook mm/slab.h:518 [inline]
     slab_alloc_node mm/slab.c:3254 [inline]
     kmem_cache_alloc_node+0x136/0x3e0 mm/slab.c:3574
     __alloc_skb+0x71/0x550 net/core/skbuff.c:198
     alloc_skb include/linux/skbuff.h:1094 [inline]
     alloc_skb_with_frags+0x92/0x570 net/core/skbuff.c:5771
     sock_alloc_send_pskb+0x72a/0x880 net/core/sock.c:2348
     packet_alloc_skb net/packet/af_packet.c:2837 [inline]
     packet_snd net/packet/af_packet.c:2932 [inline]
     packet_sendmsg+0x19fb/0x5290 net/packet/af_packet.c:3014
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:671
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2353
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2407
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2440
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 928:
     kasan_save_stack+0x1b/0x40 mm/kasan/common.c:48
     kasan_set_track+0x1c/0x30 mm/kasan/common.c:56
     kasan_set_free_info+0x1b/0x30 mm/kasan/generic.c:355
     __kasan_slab_free+0xd8/0x120 mm/kasan/common.c:422
     __cache_free mm/slab.c:3418 [inline]
     kmem_cache_free.part.0+0x74/0x1e0 mm/slab.c:3693
     kfree_skbmem+0xef/0x1b0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:679 [inline]
     consume_skb net/core/skbuff.c:838 [inline]
     consume_skb+0xcf/0x160 net/core/skbuff.c:832
     __dev_kfree_skb_any+0x9c/0xc0 net/core/dev.c:3107
     fakelb_hw_xmit+0x20e/0x2a0 drivers/net/ieee802154/fakelb.c:81
     drv_xmit_async net/mac802154/driver-ops.h:16 [inline]
     ieee802154_tx+0x282/0x480 net/mac802154/tx.c:81
     ieee802154_subif_start_xmit+0xbe/0xe4 net/mac802154/tx.c:130
     __netdev_start_xmit include/linux/netdevice.h:4634 [inline]
     netdev_start_xmit include/linux/netdevice.h:4648 [inline]
     dev_direct_xmit+0x4e9/0x6e0 net/core/dev.c:4203
     packet_snd net/packet/af_packet.c:2989 [inline]
     packet_sendmsg+0x2413/0x5290 net/packet/af_packet.c:3014
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:671
     ____sys_sendmsg+0x6e8/0x810 net/socket.c:2353
     ___sys_sendmsg+0xf3/0x170 net/socket.c:2407
     __sys_sendmsg+0xe5/0x1b0 net/socket.c:2440
     do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff8880251a8c00
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 112 bytes inside of
     224-byte region [ffff8880251a8c00, ffff8880251a8ce0)
    The buggy address belongs to the page:
    page:0000000062b6a4f1 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x251a8
    flags: 0xfffe0000000200(slab)
    raw: 00fffe0000000200 ffffea0000435c88 ffffea00028b6c08 ffff8880a9055d00
    raw: 0000000000000000 ffff8880251a80c0 000000010000000c 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8880251a8b00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880251a8b80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff8880251a8c00: fa fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                 ^
     ffff8880251a8c80: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
     ffff8880251a8d00: fc fc fc fc fc fc fc fc fa fb fb fb fb fb fb fb
    
    Fixes: 409c3b0c5f03 ("mac802154: tx: move stats tx increment")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Alexander Aring <alex.aring@gmail.com>
    Cc: Stefan Schmidt <stefan@datenfreihafen.org>
    Cc: linux-wpan@vger.kernel.org
    Link: https://lore.kernel.org/r/20200908104025.4009085-1-edumazet@google.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6b88b85e6adcd74a5395f017ebcd2d879a9070e
Author: Linus Lüssing <linus.luessing@c0d3.blue>
Date:   Fri Sep 4 20:28:00 2020 +0200

    batman-adv: mcast/TT: fix wrongly dropped or rerouted packets
    
    [ Upstream commit 7dda5b3384121181c4e79f6eaeac2b94c0622c8d ]
    
    The unicast packet rerouting code makes several assumptions. For
    instance it assumes that there is always exactly one destination in the
    TT. This breaks for multicast frames in a unicast packets in several ways:
    
    For one thing if there is actually no TT entry and the destination node
    was selected due to the multicast tvlv flags it announced. Then an
    intermediate node will wrongly drop the packet.
    
    For another thing if there is a TT entry but the TTVN of this entry is
    newer than the originally addressed destination node: Then the
    intermediate node will wrongly redirect the packet, leading to
    duplicated multicast packets at a multicast listener and missing
    packets at other multicast listeners or multicast routers.
    
    Fixing this by not applying the unicast packet rerouting to batman-adv
    unicast packets with a multicast payload. We are not able to detect a
    roaming multicast listener at the moment and will just continue to send
    the multicast frame to both the new and old destination for a while in
    case of such a roaming multicast listener.
    
    Fixes: a73105b8d4c7 ("batman-adv: improved client announcement mechanism")
    Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cd07f97527705747e3626e164f5cd65723c9458
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Fri Sep 4 10:51:03 2020 +0800

    atm: eni: fix the missed pci_disable_device() for eni_init_one()
    
    [ Upstream commit c2b947879ca320ac5505c6c29a731ff17da5e805 ]
    
    eni_init_one() misses to call pci_disable_device() in an error path.
    Jump to err_disable to fix it.
    
    Fixes: ede58ef28e10 ("atm: remove deprecated use of pci api")
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1588ad9200dc173b88c9a9289368984b4362d272
Author: Linus Lüssing <ll@simonwunderlich.de>
Date:   Thu Aug 27 17:34:48 2020 +0200

    batman-adv: bla: fix type misuse for backbone_gw hash indexing
    
    [ Upstream commit 097930e85f90f252c44dc0d084598265dd44ca48 ]
    
    It seems that due to a copy & paste error the void pointer
    in batadv_choose_backbone_gw() is cast to the wrong type.
    
    Fixing this by using "struct batadv_bla_backbone_gw" instead of "struct
    batadv_bla_claim" which better matches the caller's side.
    
    For now it seems that we were lucky because the two structs both have
    their orig/vid and addr/vid in the beginning. However I stumbled over
    this issue when I was trying to add some debug variables in front of
    "orig" in batadv_backbone_gw, which caused hash lookups to fail.
    
    Fixes: 07568d0369f9 ("batman-adv: don't rely on positions in struct for hashing")
    Signed-off-by: Linus Lüssing <ll@simonwunderlich.de>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68bf3c40bf2b98f445558ce0d2e8c2fa913794a5
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Tue Aug 25 17:38:29 2020 +0200

    mwifiex: Increase AES key storage size to 256 bits
    
    [ Upstream commit 4afc850e2e9e781976fb2c7852ce7bac374af938 ]
    
    Following commit e18696786548 ("mwifiex: Prevent memory corruption
    handling keys") the mwifiex driver fails to authenticate with certain
    networks, specifically networks with 256 bit keys, and repeatedly asks
    for the password. The kernel log repeats the following lines (id and
    bssid redacted):
    
        mwifiex_pcie 0000:01:00.0: info: trying to associate to '<id>' bssid <bssid>
        mwifiex_pcie 0000:01:00.0: info: associated to bssid <bssid> successfully
        mwifiex_pcie 0000:01:00.0: crypto keys added
        mwifiex_pcie 0000:01:00.0: info: successfully disconnected from <bssid>: reason code 3
    
    Tracking down this problem lead to the overflow check introduced by the
    aforementioned commit into mwifiex_ret_802_11_key_material_v2(). This
    check fails on networks with 256 bit keys due to the current storage
    size for AES keys in struct mwifiex_aes_param being only 128 bit.
    
    To fix this issue, increase the storage size for AES keys to 256 bit.
    
    Fixes: e18696786548 ("mwifiex: Prevent memory corruption handling keys")
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Reported-by: Kaloyan Nikolov <konik98@gmail.com>
    Tested-by: Kaloyan Nikolov <konik98@gmail.com>
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Tested-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200825153829.38043-1-luzmaximilian@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3537358e14e39e2cebac4d0ec015710d273d6caa
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:41 2020 +0800

    clocksource/drivers/h8300_timer8: Fix wrong return value in h8300_8timer_init()
    
    [ Upstream commit 400d033f5a599120089b5f0c54d14d198499af5a ]
    
    In the init function, if the call to of_iomap() fails, the return
    value is ENXIO instead of -ENXIO.
    
    Change to the right negative errno.
    
    Fixes: 691f8f878290f ("clocksource/drivers/h8300_timer8: Convert init function to return error")
    Cc: Daniel Lezcano <daniel.lezcano@linaro.org>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200802111541.5429-1-tianjia.zhang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b6b202b10408bac06e3f4464672402b520ce248
Author: Tom Rix <trix@redhat.com>
Date:   Sun Aug 2 07:23:39 2020 -0700

    ieee802154/adf7242: check status of adf7242_read_reg
    
    [ Upstream commit e3914ed6cf44bfe1f169e26241f8314556fd1ac1 ]
    
    Clang static analysis reports this error
    
    adf7242.c:887:6: warning: Assigned value is garbage or undefined
            len = len_u8;
                ^ ~~~~~~
    
    len_u8 is set in
           adf7242_read_reg(lp, 0, &len_u8);
    
    When this call fails, len_u8 is not set.
    
    So check the return code.
    
    Fixes: 7302b9d90117 ("ieee802154/adf7242: Driver for ADF7242 MAC IEEE802154")
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Acked-by: Michael Hennerich <michael.hennerich@analog.com>
    Link: https://lore.kernel.org/r/20200802142339.21091-1-trix@redhat.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3d2d683e6a7570add1ed4588b107051886e053c
Author: Liu Jian <liujian56@huawei.com>
Date:   Mon Jul 20 22:33:15 2020 +0800

    ieee802154: fix one possible memleak in ca8210_dev_com_init
    
    [ Upstream commit 88f46b3fe2ac41c381770ebad9f2ee49346b57a2 ]
    
    We should call destroy_workqueue to destroy mlme_workqueue in error branch.
    
    Fixes: ded845a781a5 ("ieee802154: Add CA8210 IEEE 802.15.4 device driver")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Link: https://lore.kernel.org/r/20200720143315.40523-1-liujian56@huawei.com
    Signed-off-by: Stefan Schmidt <stefan@datenfreihafen.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75b480dcae2c8867dc1c39f610436fc784fb7bfb
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Thu Sep 10 10:24:57 2020 -0500

    objtool: Fix noreturn detection for ignored functions
    
    [ Upstream commit db6c6a0df840e3f52c84cc302cc1a08ba11a4416 ]
    
    When a function is annotated with STACK_FRAME_NON_STANDARD, objtool
    doesn't validate its code paths.  It also skips sibling call detection
    within the function.
    
    But sibling call detection is actually needed for the case where the
    ignored function doesn't have any return instructions.  Otherwise
    objtool naively marks the function as implicit static noreturn, which
    affects the reachability of its callers, resulting in "unreachable
    instruction" warnings.
    
    Fix it by just enabling sibling call detection for ignored functions.
    The 'insn->ignore' check in add_jump_destinations() is no longer needed
    after
    
      e6da9567959e ("objtool: Don't use ignore flag for fake jumps").
    
    Fixes the following warning:
    
      arch/x86/kvm/vmx/vmx.o: warning: objtool: vmx_handle_exit_irqoff()+0x142: unreachable instruction
    
    which triggers on an allmodconfig with CONFIG_GCOV_KERNEL unset.
    
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Link: https://lkml.kernel.org/r/5b1e2536cdbaa5246b60d7791b76130a74082c62.1599751464.git.jpoimboe@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d93281ebb3dae054e89026ec7d413d56567c4ec4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Sep 9 12:32:33 2020 +0200

    i2c: core: Call i2c_acpi_install_space_handler() before i2c_acpi_register_devices()
    
    [ Upstream commit 21653a4181ff292480599dad996a2b759ccf050f ]
    
    Some ACPI i2c-devices _STA method (which is used to detect if the device
    is present) use autodetection code which probes which device is present
    over i2c. This requires the I2C ACPI OpRegion handler to be registered
    before we enumerate i2c-clients under the i2c-adapter.
    
    This fixes the i2c touchpad on the Lenovo ThinkBook 14-IIL and
    ThinkBook 15 IIL not getting an i2c-client instantiated and thus not
    working.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1842039
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10de2a22fe1998a531873124fc61c83b4fc474ab
Author: Ilya Leoshkevich <iii@linux.ibm.com>
Date:   Wed Sep 9 14:27:25 2020 +0200

    s390/init: add missing __init annotations
    
    [ Upstream commit fcb2b70cdb194157678fb1a75f9ff499aeba3d2a ]
    
    Add __init to reserve_memory_end, reserve_oldmem and remove_oldmem.
    Sometimes these functions are not inlined, and then the build
    complains about section mismatch.
    
    Signed-off-by: Ilya Leoshkevich <iii@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2be523ed786c46b8327e87888cebce4c10e6ba30
Author: Qu Wenruo <wqu@suse.com>
Date:   Fri Jul 17 15:12:05 2020 +0800

    btrfs: qgroup: fix data leak caused by race between writeback and truncate
    
    [ Upstream commit fa91e4aa1716004ea8096d5185ec0451e206aea0 ]
    
    [BUG]
    When running tests like generic/013 on test device with btrfs quota
    enabled, it can normally lead to data leak, detected at unmount time:
    
      BTRFS warning (device dm-3): qgroup 0/5 has unreleased space, type 0 rsv 4096
      ------------[ cut here ]------------
      WARNING: CPU: 11 PID: 16386 at fs/btrfs/disk-io.c:4142 close_ctree+0x1dc/0x323 [btrfs]
      RIP: 0010:close_ctree+0x1dc/0x323 [btrfs]
      Call Trace:
       btrfs_put_super+0x15/0x17 [btrfs]
       generic_shutdown_super+0x72/0x110
       kill_anon_super+0x18/0x30
       btrfs_kill_super+0x17/0x30 [btrfs]
       deactivate_locked_super+0x3b/0xa0
       deactivate_super+0x40/0x50
       cleanup_mnt+0x135/0x190
       __cleanup_mnt+0x12/0x20
       task_work_run+0x64/0xb0
       __prepare_exit_to_usermode+0x1bc/0x1c0
       __syscall_return_slowpath+0x47/0x230
       do_syscall_64+0x64/0xb0
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      ---[ end trace caf08beafeca2392 ]---
      BTRFS error (device dm-3): qgroup reserved space leaked
    
    [CAUSE]
    In the offending case, the offending operations are:
    2/6: writev f2X[269 1 0 0 0 0] [1006997,67,288] 0
    2/7: truncate f2X[269 1 0 0 48 1026293] 18388 0
    
    The following sequence of events could happen after the writev():
            CPU1 (writeback)                |               CPU2 (truncate)
    -----------------------------------------------------------------
    btrfs_writepages()                      |
    |- extent_write_cache_pages()           |
       |- Got page for 1003520              |
       |  1003520 is Dirty, no writeback    |
       |  So (!clear_page_dirty_for_io())   |
       |  gets called for it                |
       |- Now page 1003520 is Clean.        |
       |                                    | btrfs_setattr()
       |                                    | |- btrfs_setsize()
       |                                    |    |- truncate_setsize()
       |                                    |       New i_size is 18388
       |- __extent_writepage()              |
       |  |- page_offset() > i_size         |
          |- btrfs_invalidatepage()         |
             |- Page is clean, so no qgroup |
                callback executed
    
    This means, the qgroup reserved data space is not properly released in
    btrfs_invalidatepage() as the page is Clean.
    
    [FIX]
    Instead of checking the dirty bit of a page, call
    btrfs_qgroup_free_data() unconditionally in btrfs_invalidatepage().
    
    As qgroup rsv are completely bound to the QGROUP_RESERVED bit of
    io_tree, not bound to page status, thus we won't cause double freeing
    anyway.
    
    Fixes: 0b34c261e235 ("btrfs: qgroup: Prevent qgroup->reserved from going subzero")
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 54117cebc96c3541f5e1fec8493e82b8e6987b32
Author: Zeng Tao <prime.zeng@hisilicon.com>
Date:   Wed Jul 15 15:34:41 2020 +0800

    vfio/pci: fix racy on error and request eventfd ctx
    
    [ Upstream commit b872d0640840018669032b20b6375a478ed1f923 ]
    
    The vfio_pci_release call will free and clear the error and request
    eventfd ctx while these ctx could be in use at the same time in the
    function like vfio_pci_request, and it's expected to protect them under
    the vdev->igate mutex, which is missing in vfio_pci_release.
    
    This issue is introduced since commit 1518ac272e78 ("vfio/pci: fix memory
    leaks of eventfd ctx"),and since commit 5c5866c593bb ("vfio/pci: Clear
    error and request eventfd ctx after releasing"), it's very easily to
    trigger the kernel panic like this:
    
    [ 9513.904346] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000008
    [ 9513.913091] Mem abort info:
    [ 9513.915871]   ESR = 0x96000006
    [ 9513.918912]   EC = 0x25: DABT (current EL), IL = 32 bits
    [ 9513.924198]   SET = 0, FnV = 0
    [ 9513.927238]   EA = 0, S1PTW = 0
    [ 9513.930364] Data abort info:
    [ 9513.933231]   ISV = 0, ISS = 0x00000006
    [ 9513.937048]   CM = 0, WnR = 0
    [ 9513.940003] user pgtable: 4k pages, 48-bit VAs, pgdp=0000007ec7d12000
    [ 9513.946414] [0000000000000008] pgd=0000007ec7d13003, p4d=0000007ec7d13003, pud=0000007ec728c003, pmd=0000000000000000
    [ 9513.956975] Internal error: Oops: 96000006 [#1] PREEMPT SMP
    [ 9513.962521] Modules linked in: vfio_pci vfio_virqfd vfio_iommu_type1 vfio hclge hns3 hnae3 [last unloaded: vfio_pci]
    [ 9513.972998] CPU: 4 PID: 1327 Comm: bash Tainted: G        W         5.8.0-rc4+ #3
    [ 9513.980443] Hardware name: Huawei TaiShan 2280 V2/BC82AMDC, BIOS 2280-V2 CS V3.B270.01 05/08/2020
    [ 9513.989274] pstate: 80400089 (Nzcv daIf +PAN -UAO BTYPE=--)
    [ 9513.994827] pc : _raw_spin_lock_irqsave+0x48/0x88
    [ 9513.999515] lr : eventfd_signal+0x6c/0x1b0
    [ 9514.003591] sp : ffff800038a0b960
    [ 9514.006889] x29: ffff800038a0b960 x28: ffff007ef7f4da10
    [ 9514.012175] x27: ffff207eefbbfc80 x26: ffffbb7903457000
    [ 9514.017462] x25: ffffbb7912191000 x24: ffff007ef7f4d400
    [ 9514.022747] x23: ffff20be6e0e4c00 x22: 0000000000000008
    [ 9514.028033] x21: 0000000000000000 x20: 0000000000000000
    [ 9514.033321] x19: 0000000000000008 x18: 0000000000000000
    [ 9514.038606] x17: 0000000000000000 x16: ffffbb7910029328
    [ 9514.043893] x15: 0000000000000000 x14: 0000000000000001
    [ 9514.049179] x13: 0000000000000000 x12: 0000000000000002
    [ 9514.054466] x11: 0000000000000000 x10: 0000000000000a00
    [ 9514.059752] x9 : ffff800038a0b840 x8 : ffff007ef7f4de60
    [ 9514.065038] x7 : ffff007fffc96690 x6 : fffffe01faffb748
    [ 9514.070324] x5 : 0000000000000000 x4 : 0000000000000000
    [ 9514.075609] x3 : 0000000000000000 x2 : 0000000000000001
    [ 9514.080895] x1 : ffff007ef7f4d400 x0 : 0000000000000000
    [ 9514.086181] Call trace:
    [ 9514.088618]  _raw_spin_lock_irqsave+0x48/0x88
    [ 9514.092954]  eventfd_signal+0x6c/0x1b0
    [ 9514.096691]  vfio_pci_request+0x84/0xd0 [vfio_pci]
    [ 9514.101464]  vfio_del_group_dev+0x150/0x290 [vfio]
    [ 9514.106234]  vfio_pci_remove+0x30/0x128 [vfio_pci]
    [ 9514.111007]  pci_device_remove+0x48/0x108
    [ 9514.115001]  device_release_driver_internal+0x100/0x1b8
    [ 9514.120200]  device_release_driver+0x28/0x38
    [ 9514.124452]  pci_stop_bus_device+0x68/0xa8
    [ 9514.128528]  pci_stop_and_remove_bus_device+0x20/0x38
    [ 9514.133557]  pci_iov_remove_virtfn+0xb4/0x128
    [ 9514.137893]  sriov_disable+0x3c/0x108
    [ 9514.141538]  pci_disable_sriov+0x28/0x38
    [ 9514.145445]  hns3_pci_sriov_configure+0x48/0xb8 [hns3]
    [ 9514.150558]  sriov_numvfs_store+0x110/0x198
    [ 9514.154724]  dev_attr_store+0x44/0x60
    [ 9514.158373]  sysfs_kf_write+0x5c/0x78
    [ 9514.162018]  kernfs_fop_write+0x104/0x210
    [ 9514.166010]  __vfs_write+0x48/0x90
    [ 9514.169395]  vfs_write+0xbc/0x1c0
    [ 9514.172694]  ksys_write+0x74/0x100
    [ 9514.176079]  __arm64_sys_write+0x24/0x30
    [ 9514.179987]  el0_svc_common.constprop.4+0x110/0x200
    [ 9514.184842]  do_el0_svc+0x34/0x98
    [ 9514.188144]  el0_svc+0x14/0x40
    [ 9514.191185]  el0_sync_handler+0xb0/0x2d0
    [ 9514.195088]  el0_sync+0x140/0x180
    [ 9514.198389] Code: b9001020 d2800000 52800022 f9800271 (885ffe61)
    [ 9514.204455] ---[ end trace 648de00c8406465f ]---
    [ 9514.212308] note: bash[1327] exited with preempt_count 1
    
    Cc: Qian Cai <cai@lca.pw>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Fixes: 1518ac272e78 ("vfio/pci: fix memory leaks of eventfd ctx")
    Signed-off-by: Zeng Tao <prime.zeng@hisilicon.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d1d500145ce1c2d322c6bd7f693647984fcf1ef
Author: Andy Lutomirski <luto@kernel.org>
Date:   Fri Jun 26 10:21:15 2020 -0700

    selftests/x86/syscall_nt: Clear weird flags after each test
    
    [ Upstream commit a61fa2799ef9bf6c4f54cf7295036577cececc72 ]
    
    Clear the weird flags before logging to improve strace output --
    logging results while, say, TF is set does no one any favors.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/907bfa5a42d4475b8245e18b67a04b13ca51ffdb.1593191971.git.luto@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44e1788304e4ff16953ccdffff4720e573eb7d33
Author: Javed Hasan <jhasan@marvell.com>
Date:   Fri Jun 26 02:49:59 2020 -0700

    scsi: libfc: Skip additional kref updating work event
    
    [ Upstream commit 823a65409c8990f64c5693af98ce0e7819975cba ]
    
    When an rport event (RPORT_EV_READY) is updated without work being queued,
    avoid taking an additional reference.
    
    This issue was leading to memory leak. Trace from KMEMLEAK tool:
    
      unreferenced object 0xffff8888259e8780 (size 512):
      comm "kworker/2:1", jiffies 4433237386 (age 113021.971s)
        hex dump (first 32 bytes):
            58 0a ec cf 83 88 ff ff 00 00 00 00 00 00 00 00
            01 00 00 00 08 00 00 00 13 7d f0 1e 0e 00 00 10
      backtrace:
      [<000000006b25760f>] fc_rport_recv_req+0x3c6/0x18f0 [libfc]
      [<00000000f208d994>] fc_lport_recv_els_req+0x120/0x8a0 [libfc]
      [<00000000a9c437b8>] fc_lport_recv+0xb9/0x130 [libfc]
      [<00000000a9c437b8>] fc_lport_recv+0xb9/0x130 [libfc]
      [<00000000ad5be37b>] qedf_ll2_process_skb+0x73d/0xad0 [qedf]
      [<00000000e0eb6893>] process_one_work+0x382/0x6c0
      [<000000002dfd9e21>] worker_thread+0x57/0x5c0
      [<00000000b648204f>] kthread+0x1a0/0x1c0
      [<0000000072f5ab20>] ret_from_fork+0x35/0x40
      [<000000001d5c05d8>] 0xffffffffffffffff
    
    Below is the log sequence which leads to memory leak.  Here we get the
    RPORT_EV_READY and RPORT_EV_STOP back to back, which lead to overwrite the
    event RPORT_EV_READY by event RPORT_EV_STOP.  Because of this, kref_count
    gets incremented by 1.
    
      kernel: host0: rport fffce5: Received PLOGI request
      kernel: host0: rport fffce5: Received PLOGI in INIT state
      kernel: host0: rport fffce5: Port is Ready
      kernel: host0: rport fffce5: Received PRLI request while in state Ready
      kernel: host0: rport fffce5: PRLI rspp type 8 active 1 passive 0
      kernel: host0: rport fffce5: Received LOGO request while in state Ready
      kernel: host0: rport fffce5: Delete port
      kernel: host0: rport fffce5: Received PLOGI request
      kernel: host0: rport fffce5: Received PLOGI in state Delete - send busy
      kernel: host0: rport fffce5: work event 3
      kernel: host0: rport fffce5: lld callback ev 3
      kernel: host0: rport fffce5: work delete
    
    Link: https://lore.kernel.org/r/20200626094959.32151-1-jhasan@marvell.com
    Reviewed-by: Girish Basrur <gbasrur@marvell.com>
    Reviewed-by: Saurav Kashyap <skashyap@marvell.com>
    Reviewed-by: Shyam Sundar <ssundar@marvell.com>
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cfbfc70bb4c7f74d8cf7c025d1511029f8e88ca
Author: Javed Hasan <jhasan@marvell.com>
Date:   Mon Jun 22 03:12:11 2020 -0700

    scsi: libfc: Handling of extra kref
    
    [ Upstream commit 71f2bf85e90d938d4a9ef9dd9bfa8d9b0b6a03f7 ]
    
    Handling of extra kref which is done by lookup table in case rdata is
    already present in list.
    
    This issue was leading to memory leak. Trace from KMEMLEAK tool:
    
      unreferenced object 0xffff8888259e8780 (size 512):
        comm "kworker/2:1", pid 182614, jiffies 4433237386 (age 113021.971s)
        hex dump (first 32 bytes):
        58 0a ec cf 83 88 ff ff 00 00 00 00 00 00 00 00
        01 00 00 00 08 00 00 00 13 7d f0 1e 0e 00 00 10
      backtrace:
            [<000000006b25760f>] fc_rport_recv_req+0x3c6/0x18f0 [libfc]
            [<00000000f208d994>] fc_lport_recv_els_req+0x120/0x8a0 [libfc]
            [<00000000a9c437b8>] fc_lport_recv+0xb9/0x130 [libfc]
            [<00000000ad5be37b>] qedf_ll2_process_skb+0x73d/0xad0 [qedf]
            [<00000000e0eb6893>] process_one_work+0x382/0x6c0
            [<000000002dfd9e21>] worker_thread+0x57/0x5c0
            [<00000000b648204f>] kthread+0x1a0/0x1c0
            [<0000000072f5ab20>] ret_from_fork+0x35/0x40
            [<000000001d5c05d8>] 0xffffffffffffffff
    
    Below is the log sequence which leads to memory leak. Here we get the
    nested "Received PLOGI request" for same port and this request leads to
    call the fc_rport_create() twice for the same rport.
    
            kernel: host1: rport fffce5: Received PLOGI request
            kernel: host1: rport fffce5: Received PLOGI in INIT state
            kernel: host1: rport fffce5: Port is Ready
            kernel: host1: rport fffce5: Received PRLI request while in state Ready
            kernel: host1: rport fffce5: PRLI rspp type 8 active 1 passive 0
            kernel: host1: rport fffce5: Received LOGO request while in state Ready
            kernel: host1: rport fffce5: Delete port
            kernel: host1: rport fffce5: Received PLOGI request
            kernel: host1: rport fffce5: Received PLOGI in state Delete - send busy
    
    Link: https://lore.kernel.org/r/20200622101212.3922-2-jhasan@marvell.com
    Reviewed-by: Girish Basrur <gbasrur@marvell.com>
    Reviewed-by: Saurav Kashyap <skashyap@marvell.com>
    Reviewed-by: Shyam Sundar <ssundar@marvell.com>
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 332f03033aefdc34cea63e5bbf59b9b11406e987
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Mon Jun 22 05:30:19 2020 -0400

    cifs: Fix double add page to memcg when cifs_readpages
    
    [ Upstream commit 95a3d8f3af9b0d63b43f221b630beaab9739d13a ]
    
    When xfstests generic/451, there is an BUG at mm/memcontrol.c:
      page:ffffea000560f2c0 refcount:2 mapcount:0 mapping:000000008544e0ea
           index:0xf
      mapping->aops:cifs_addr_ops dentry name:"tst-aio-dio-cycle-write.451"
      flags: 0x2fffff80000001(locked)
      raw: 002fffff80000001 ffffc90002023c50 ffffea0005280088 ffff88815cda0210
      raw: 000000000000000f 0000000000000000 00000002ffffffff ffff88817287d000
      page dumped because: VM_BUG_ON_PAGE(page->mem_cgroup)
      page->mem_cgroup:ffff88817287d000
      ------------[ cut here ]------------
      kernel BUG at mm/memcontrol.c:2659!
      invalid opcode: 0000 [#1] SMP
      CPU: 2 PID: 2038 Comm: xfs_io Not tainted 5.8.0-rc1 #44
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS ?-20190727_
        073836-buildvm-ppc64le-16.ppc.4
      RIP: 0010:commit_charge+0x35/0x50
      Code: 0d 48 83 05 54 b2 02 05 01 48 89 77 38 c3 48 c7
            c6 78 4a ea ba 48 83 05 38 b2 02 05 01 e8 63 0d9
      RSP: 0018:ffffc90002023a50 EFLAGS: 00010202
      RAX: 0000000000000000 RBX: ffff88817287d000 RCX: 0000000000000000
      RDX: 0000000000000000 RSI: ffff88817ac97ea0 RDI: ffff88817ac97ea0
      RBP: ffffea000560f2c0 R08: 0000000000000203 R09: 0000000000000005
      R10: 0000000000000030 R11: ffffc900020237a8 R12: 0000000000000000
      R13: 0000000000000001 R14: 0000000000000001 R15: ffff88815a1272c0
      FS:  00007f5071ab0800(0000) GS:ffff88817ac80000(0000) knlGS:0000000000000000
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 000055efcd5ca000 CR3: 000000015d312000 CR4: 00000000000006e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       mem_cgroup_charge+0x166/0x4f0
       __add_to_page_cache_locked+0x4a9/0x710
       add_to_page_cache_locked+0x15/0x20
       cifs_readpages+0x217/0x1270
       read_pages+0x29a/0x670
       page_cache_readahead_unbounded+0x24f/0x390
       __do_page_cache_readahead+0x3f/0x60
       ondemand_readahead+0x1f1/0x470
       page_cache_async_readahead+0x14c/0x170
       generic_file_buffered_read+0x5df/0x1100
       generic_file_read_iter+0x10c/0x1d0
       cifs_strict_readv+0x139/0x170
       new_sync_read+0x164/0x250
       __vfs_read+0x39/0x60
       vfs_read+0xb5/0x1e0
       ksys_pread64+0x85/0xf0
       __x64_sys_pread64+0x22/0x30
       do_syscall_64+0x69/0x150
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      RIP: 0033:0x7f5071fcb1af
      Code: Bad RIP value.
      RSP: 002b:00007ffde2cdb8e0 EFLAGS: 00000293 ORIG_RAX: 0000000000000011
      RAX: ffffffffffffffda RBX: 00007ffde2cdb990 RCX: 00007f5071fcb1af
      RDX: 0000000000001000 RSI: 000055efcd5ca000 RDI: 0000000000000003
      RBP: 0000000000000003 R08: 0000000000000000 R09: 0000000000000000
      R10: 0000000000001000 R11: 0000000000000293 R12: 0000000000000001
      R13: 000000000009f000 R14: 0000000000000000 R15: 0000000000001000
      Modules linked in:
      ---[ end trace 725fa14a3e1af65c ]---
    
    Since commit 3fea5a499d57 ("mm: memcontrol: convert page cache to a new
    mem_cgroup_charge() API") not cancel the page charge, the pages maybe
    double add to pagecache:
    thread1                       | thread2
    cifs_readpages
    readpages_get_pages
     add_to_page_cache_locked(head,index=n)=0
                                  | readpages_get_pages
                                  | add_to_page_cache_locked(head,index=n+1)=0
     add_to_page_cache_locked(head, index=n+1)=-EEXIST
     then, will next loop with list head page's
     index=n+1 and the page->mapping not NULL
    readpages_get_pages
    add_to_page_cache_locked(head, index=n+1)
     commit_charge
      VM_BUG_ON_PAGE
    
    So, we should not do the next loop when any page add to page cache
    failed.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cf189df1f82e4e9660225d99c3d88c1ad4813e7
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Tue Jun 16 15:26:36 2020 -0600

    vfio/pci: Clear error and request eventfd ctx after releasing
    
    [ Upstream commit 5c5866c593bbd444d0339ede6a8fb5f14ff66d72 ]
    
    The next use of the device will generate an underflow from the
    stale reference.
    
    Cc: Qian Cai <cai@lca.pw>
    Fixes: 1518ac272e78 ("vfio/pci: fix memory leaks of eventfd ctx")
    Reported-by: Daniel Wagner <dwagner@suse.de>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Tested-by: Daniel Wagner <dwagner@suse.de>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2c05436d141a2e0153cf08151809fe4df38f645
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Mar 4 12:49:18 2020 +0100

    x86/speculation/mds: Mark mds_user_clear_cpu_buffers() __always_inline
    
    [ Upstream commit a7ef9ba986b5fae9d80f8a7b31db0423687efe4e ]
    
    Prevent the compiler from uninlining and creating traceable/probable
    functions as this is invoked _after_ context tracking switched to
    CONTEXT_USER and rcu idle.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>
    Acked-by: Peter Zijlstra <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20200505134340.902709267@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7052348bbe91e3ec28196e4b4eddaa4058799e2c
Author: Boris Brezillon <boris.brezillon@collabora.com>
Date:   Wed Apr 29 09:53:47 2020 -0700

    mtd: parser: cmdline: Support MTD names containing one or more colons
    
    [ Upstream commit eb13fa0227417e84aecc3bd9c029d376e33474d3 ]
    
    Looks like some drivers define MTD names with a colon in it, thus
    making mtdpart= parsing impossible. Let's fix the parser to gracefully
    handle that case: the last ':' in a partition definition sequence is
    considered instead of the first one.
    
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Signed-off-by: Ron Minnich <rminnich@google.com>
    Tested-by: Ron Minnich <rminnich@google.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccb86fb09dca7837ad42e932a00066255f13304f
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Thu Jun 4 16:51:21 2020 -0700

    rapidio: avoid data race between file operation callbacks and mport_cdev_add().
    
    [ Upstream commit e1c3cdb26ab881b77486dc50370356a349077c74 ]
    
    Fields of md(mport_dev) are set after cdev_device_add().  However, the
    file operation callbacks can be called after cdev_device_add() and
    therefore accesses to fields of md in the callbacks can race with the rest
    of the mport_cdev_add() function.
    
    One such example is INIT_LIST_HEAD(&md->portwrites) in mport_cdev_add(),
    the list is initialised after cdev_device_add().  This can race with
    list_add_tail(&pw_filter->md_node,&md->portwrites) in
    rio_mport_add_pw_filter() which is called by unlocked_ioctl.
    
    To avoid such data races use cdev_device_add() after initializing md.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Alexandre Bounine <alex.bou9@gmail.com>
    Cc: Matt Porter <mporter@kernel.crashing.org>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: Mike Marshall <hubcap@omnibond.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ira Weiny <ira.weiny@intel.com>
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Pavel Andrianov <andrianov@ispras.ru>
    Link: http://lkml.kernel.org/r/20200426112950.1803-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ab386c41915e9dcffecd40b1b32fd4fcc7dc66e
Author: Qian Cai <cai@lca.pw>
Date:   Mon Jun 1 21:48:40 2020 -0700

    mm/swap_state: fix a data race in swapin_nr_pages
    
    [ Upstream commit d6c1f098f2a7ba62627c9bc17cda28f534ef9e4a ]
    
    "prev_offset" is a static variable in swapin_nr_pages() that can be
    accessed concurrently with only mmap_sem held in read mode as noticed by
    KCSAN,
    
     BUG: KCSAN: data-race in swap_cluster_readahead / swap_cluster_readahead
    
     write to 0xffffffff92763830 of 8 bytes by task 14795 on cpu 17:
      swap_cluster_readahead+0x2a6/0x5e0
      swapin_readahead+0x92/0x8dc
      do_swap_page+0x49b/0xf20
      __handle_mm_fault+0xcfb/0xd70
      handle_mm_fault+0xfc/0x2f0
      do_page_fault+0x263/0x715
      page_fault+0x34/0x40
    
     1 lock held by (dnf)/14795:
      #0: ffff897bd2e98858 (&mm->mmap_sem#2){++++}-{3:3}, at: do_page_fault+0x143/0x715
      do_user_addr_fault at arch/x86/mm/fault.c:1405
      (inlined by) do_page_fault at arch/x86/mm/fault.c:1535
     irq event stamp: 83493
     count_memcg_event_mm+0x1a6/0x270
     count_memcg_event_mm+0x119/0x270
     __do_softirq+0x365/0x589
     irq_exit+0xa2/0xc0
    
     read to 0xffffffff92763830 of 8 bytes by task 1 on cpu 22:
      swap_cluster_readahead+0xfd/0x5e0
      swapin_readahead+0x92/0x8dc
      do_swap_page+0x49b/0xf20
      __handle_mm_fault+0xcfb/0xd70
      handle_mm_fault+0xfc/0x2f0
      do_page_fault+0x263/0x715
      page_fault+0x34/0x40
    
     1 lock held by systemd/1:
      #0: ffff897c38f14858 (&mm->mmap_sem#2){++++}-{3:3}, at: do_page_fault+0x143/0x715
     irq event stamp: 43530289
     count_memcg_event_mm+0x1a6/0x270
     count_memcg_event_mm+0x119/0x270
     __do_softirq+0x365/0x589
     irq_exit+0xa2/0xc0
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Marco Elver <elver@google.com>
    Cc: Hugh Dickins <hughd@google.com>
    Link: http://lkml.kernel.org/r/20200402213748.2237-1-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fa7a614d701e845eaba4c034a4f3c5e83b6f9a1
Author: Jeff Layton <jlayton@kernel.org>
Date:   Fri Mar 20 16:45:45 2020 -0400

    ceph: fix potential race in ceph_check_caps
    
    [ Upstream commit dc3da0461cc4b76f2d0c5b12247fcb3b520edbbf ]
    
    Nothing ensures that session will still be valid by the time we
    dereference the pointer. Take and put a reference.
    
    In principle, we should always be able to get a reference here, but
    throw a warning if that's ever not the case.
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a4a80ad9ccfcb2e9217f1381b4a16db785457cd
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Fri May 22 18:40:06 2020 +0800

    mtd: rawnand: omap_elm: Fix runtime PM imbalance on error
    
    [ Upstream commit 37f7212148cf1d796135cdf8d0c7fee13067674b ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522104008.28340-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a6c829f659c6fd6012fde75493cfb20e0bb96d8
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue May 12 15:19:16 2020 +0300

    perf kcore_copy: Fix module map when there are no modules loaded
    
    [ Upstream commit 61f82e3fb697a8e85f22fdec786528af73dc36d1 ]
    
    In the absence of any modules, no "modules" map is created, but there
    are other executable pages to map, due to eBPF JIT, kprobe or ftrace.
    Map them by recognizing that the first "module" symbol is not
    necessarily from a module, and adjust the map accordingly.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Leo Yan <leo.yan@linaro.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Cc: x86@kernel.org
    Link: http://lore.kernel.org/lkml/20200512121922.8997-10-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0572fde7a43c7efa389633d0a79abcd5e2e2ff66
Author: Xie XiuQi <xiexiuqi@huawei.com>
Date:   Thu May 21 21:32:17 2020 +0800

    perf util: Fix memory leak of prefix_if_not_in
    
    [ Upstream commit 07e9a6f538cbeecaf5c55b6f2991416f873cdcbd ]
    
    Need to free "str" before return when asprintf() failed to avoid memory
    leak.
    
    Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Hongbo Yao <yaohongbo@huawei.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Li Bin <huawei.libin@huawei.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: http://lore.kernel.org/lkml/20200521133218.30150-4-liwei391@huawei.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d91ff38756c67f237e0454dcb3548fdc71b1eb22
Author: Qian Cai <cai@lca.pw>
Date:   Mon May 11 00:34:50 2020 -0400

    vfio/pci: fix memory leaks of eventfd ctx
    
    [ Upstream commit 1518ac272e789cae8c555d69951b032a275b7602 ]
    
    Finished a qemu-kvm (-device vfio-pci,host=0001:01:00.0) triggers a few
    memory leaks after a while because vfio_pci_set_ctx_trigger_single()
    calls eventfd_ctx_fdget() without the matching eventfd_ctx_put() later.
    Fix it by calling eventfd_ctx_put() for those memory in
    vfio_pci_release() before vfio_device_release().
    
    unreferenced object 0xebff008981cc2b00 (size 128):
      comm "qemu-kvm", pid 4043, jiffies 4294994816 (age 9796.310s)
      hex dump (first 32 bytes):
        01 00 00 00 6b 6b 6b 6b 00 00 00 00 ad 4e ad de  ....kkkk.....N..
        ff ff ff ff 6b 6b 6b 6b ff ff ff ff ff ff ff ff  ....kkkk........
      backtrace:
        [<00000000917e8f8d>] slab_post_alloc_hook+0x74/0x9c
        [<00000000df0f2aa2>] kmem_cache_alloc_trace+0x2b4/0x3d4
        [<000000005fcec025>] do_eventfd+0x54/0x1ac
        [<0000000082791a69>] __arm64_sys_eventfd2+0x34/0x44
        [<00000000b819758c>] do_el0_svc+0x128/0x1dc
        [<00000000b244e810>] el0_sync_handler+0xd0/0x268
        [<00000000d495ef94>] el0_sync+0x164/0x180
    unreferenced object 0x29ff008981cc4180 (size 128):
      comm "qemu-kvm", pid 4043, jiffies 4294994818 (age 9796.290s)
      hex dump (first 32 bytes):
        01 00 00 00 6b 6b 6b 6b 00 00 00 00 ad 4e ad de  ....kkkk.....N..
        ff ff ff ff 6b 6b 6b 6b ff ff ff ff ff ff ff ff  ....kkkk........
      backtrace:
        [<00000000917e8f8d>] slab_post_alloc_hook+0x74/0x9c
        [<00000000df0f2aa2>] kmem_cache_alloc_trace+0x2b4/0x3d4
        [<000000005fcec025>] do_eventfd+0x54/0x1ac
        [<0000000082791a69>] __arm64_sys_eventfd2+0x34/0x44
        [<00000000b819758c>] do_el0_svc+0x128/0x1dc
        [<00000000b244e810>] el0_sync_handler+0xd0/0x268
        [<00000000d495ef94>] el0_sync+0x164/0x180
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 985775fb6c85c980d93cb1d060181a3e4aea3a20
Author: David Sterba <dsterba@suse.com>
Date:   Tue Feb 25 15:05:53 2020 +0100

    btrfs: don't force read-only after error in drop snapshot
    
    [ Upstream commit 7c09c03091ac562ddca2b393e5d65c1d37da79f1 ]
    
    Deleting a subvolume on a full filesystem leads to ENOSPC followed by a
    forced read-only. This is not a transaction abort and the filesystem is
    otherwise ok, so the error should be just propagated to the callers.
    
    This is caused by unnecessary call to btrfs_handle_fs_error for all
    errors, except EAGAIN. This does not make sense as the standard
    transaction abort mechanism is in btrfs_drop_snapshot so all relevant
    failures are handled.
    
    Originally in commit cb1b69f4508a ("Btrfs: forced readonly when
    btrfs_drop_snapshot() fails") there was no return value at all, so the
    btrfs_std_error made some sense but once the error handling and
    propagation has been implemented we don't need it anymore.
    
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76cc1784162fdea7037322bf9dd46f92a39089cd
Author: Yu Chen <chenyu56@huawei.com>
Date:   Thu May 21 16:46:43 2020 +0800

    usb: dwc3: Increase timeout for CmdAct cleared by device controller
    
    [ Upstream commit 1c0e69ae1b9f9004fd72978612ae3463791edc56 ]
    
    If the SS PHY is in P3, there is no pipe_clk, HW may use suspend_clk
    for function, as suspend_clk is slow so EP command need more time to
    complete, e.g, imx8M suspend_clk is 32K, set ep configuration will
    take about 380us per below trace time stamp(44.286278 - 44.285897
    = 0.000381):
    
    configfs_acm.sh-822   [000] d..1    44.285896: dwc3_writel: addr
    000000006d59aae1 value 00000401
    configfs_acm.sh-822   [000] d..1    44.285897: dwc3_readl: addr
    000000006d59aae1 value 00000401
    ... ...
    configfs_acm.sh-822   [000] d..1    44.286278: dwc3_readl: addr
    000000006d59aae1 value 00000001
    configfs_acm.sh-822   [000] d..1    44.286279: dwc3_gadget_ep_cmd:
    ep0out: cmd 'Set Endpoint Configuration' [401] params 00001000
    00000500 00000000 --> status: Successful
    
    This was originally found on Hisilicon Kirin Soc that need more time
    for the device controller to clear the CmdAct of DEPCMD.
    
    Signed-off-by: Yu Chen <chenyu56@huawei.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Li Jun <jun.li@nxp.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e71d16065b440e87b911811e6daf047606191dc
Author: Shreyas Joshi <shreyas.joshi@biamp.com>
Date:   Fri May 22 16:53:06 2020 +1000

    printk: handle blank console arguments passed in.
    
    [ Upstream commit 48021f98130880dd74286459a1ef48b5e9bc374f ]
    
    If uboot passes a blank string to console_setup then it results in
    a trashed memory. Ultimately, the kernel crashes during freeing up
    the memory.
    
    This fix checks if there is a blank parameter being
    passed to console_setup from uboot. In case it detects that
    the console parameter is blank then it doesn't setup the serial
    device and it gracefully exits.
    
    Link: https://lore.kernel.org/r/20200522065306.83-1-shreyas.joshi@biamp.com
    Signed-off-by: Shreyas Joshi <shreyas.joshi@biamp.com>
    Acked-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    [pmladek@suse.com: Better format the commit message and code, remove unnecessary brackets.]
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e467a6f76c6797689f44843f5ff1ea5da7176556
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed May 20 18:14:53 2020 +0800

    drm/nouveau/debugfs: fix runtime pm imbalance on error
    
    [ Upstream commit 00583fbe8031f69bba8b0a9a861efb75fb7131af ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    the call returns an error code. Thus a pairing decrement is needed
    on the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17b742c92b0e99d661f22c538707d98be118af40
Author: Alexander Duyck <alexander.h.duyck@linux.intel.com>
Date:   Fri Apr 17 09:35:31 2020 -0700

    e1000: Do not perform reset in reset_task if we are already down
    
    [ Upstream commit 49ee3c2ab5234757bfb56a0b3a3cb422f427e3a3 ]
    
    We are seeing a deadlock in e1000 down when NAPI is being disabled. Looking
    over the kernel function trace of the system it appears that the interface
    is being closed and then a reset is hitting which deadlocks the interface
    as the NAPI interface is already disabled.
    
    To prevent this from happening I am disabling the reset task when
    __E1000_DOWN is already set. In addition code has been added so that we set
    the __E1000_DOWN while holding the __E1000_RESET flag in e1000_close in
    order to guarantee that the reset task will not run after we have started
    the close call.
    
    Signed-off-by: Alexander Duyck <alexander.h.duyck@linux.intel.com>
    Tested-by: Maxim Zhukov <mussitantesmortem@gmail.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5a84be85751718ace97dfd5d1536882d3f20466
Author: Anshuman Khandual <anshuman.khandual@arm.com>
Date:   Tue May 19 15:10:39 2020 +0530

    arm64/cpufeature: Drop TraceFilt feature exposure from ID_DFR0 register
    
    [ Upstream commit 1ed1b90a0594c8c9d31e8bb8be25a2b37717dc9e ]
    
    ID_DFR0 based TraceFilt feature should not be exposed to guests. Hence lets
    drop it.
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    
    Suggested-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/1589881254-10082-3-git-send-email-anshuman.khandual@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21c2064b0235a8009563e03226be3f2287251597
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri May 15 17:54:53 2020 +0100

    USB: EHCI: ehci-mv: fix less than zero comparison of an unsigned int
    
    [ Upstream commit a7f40c233a6b0540d28743267560df9cfb571ca9 ]
    
    The comparison of hcd->irq to less than zero for an error check will
    never be true because hcd->irq is an unsigned int.  Fix this by
    assigning the int retval to the return of platform_get_irq and checking
    this for the -ve error condition and assigning hcd->irq to retval.
    
    Addresses-Coverity: ("Unsigned compared against 0")
    Fixes: c856b4b0fdb5 ("USB: EHCI: ehci-mv: fix error handling in mv_ehci_probe()")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20200515165453.104028-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f55e9e144dd57b6dce1392c2c029170b925b2e75
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Tue May 19 14:50:37 2020 +0200

    fuse: don't check refcount after stealing page
    
    [ Upstream commit 32f98877c57bee6bc27f443a96f49678a2cd6a50 ]
    
    page_count() is unstable.  Unless there has been an RCU grace period
    between when the page was removed from the page cache and now, a
    speculative reference may exist from the page cache.
    
    Reported-by: Matthew Wilcox <willy@infradead.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 303bd829d6fcc6627f42d4d3d0f447a2fb2d62f8
Author: Nicholas Piggin <npiggin@gmail.com>
Date:   Fri May 8 14:34:07 2020 +1000

    powerpc/traps: Make unrecoverable NMIs die instead of panic
    
    [ Upstream commit 265d6e588d87194c2fe2d6c240247f0264e0c19b ]
    
    System Reset and Machine Check interrupts that are not recoverable due
    to being nested or interrupting when RI=0 currently panic. This is not
    necessary, and can often just kill the current context and recover.
    
    Signed-off-by: Nicholas Piggin <npiggin@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Reviewed-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Link: https://lore.kernel.org/r/20200508043408.886394-16-npiggin@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 981c439b311a933a46f140afe0e09a086accf445
Author: Takashi Iwai <tiwai@suse.de>
Date:   Sat May 16 08:25:56 2020 +0200

    ALSA: hda: Fix potential race in unsol event handler
    
    [ Upstream commit c637fa151259c0f74665fde7cba5b7eac1417ae5 ]
    
    The unsol event handling code has a loop retrieving the read/write
    indices and the arrays without locking while the append to the array
    may happen concurrently.  This may lead to some inconsistency.
    Although there hasn't been any proof of this bad results, it's still
    safer to protect the racy accesses.
    
    This patch adds the spinlock protection around the unsol handling loop
    for addressing it.  Here we take bus->reg_lock as the writer side
    snd_hdac_bus_queue_event() is also protected by that lock.
    
    Link: https://lore.kernel.org/r/20200516062556.30951-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fbab56190e0a10996204b3ee6d42b778dafe941e
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Fri May 8 18:34:33 2020 -0700

    tty: serial: samsung: Correct clock selection logic
    
    [ Upstream commit 7d31676a8d91dd18e08853efd1cb26961a38c6a6 ]
    
    Some variants of the samsung tty driver can pick which clock
    to use for their baud rate generation.  In the DT conversion,
    a default clock was selected to be used if a specific one wasn't
    assigned and then a comparison of which clock rate worked better
    was done.  Unfortunately, the comparison was implemented in such
    a way that only the default clock was ever actually compared.
    Fix this by iterating through all possible clocks, except when a
    specific clock has already been picked via clk_sel (which is
    only possible via board files).
    
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/BN6PR04MB06604E63833EA41837EBF77BA3A30@BN6PR04MB0660.namprd04.prod.outlook.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b2937725ab4023d8e72db52a1367fd9a9b48214
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Fri May 8 19:43:05 2020 +0800

    USB: EHCI: ehci-mv: fix error handling in mv_ehci_probe()
    
    [ Upstream commit c856b4b0fdb5044bca4c0acf9a66f3b5cc01a37a ]
    
    If the function platform_get_irq() failed, the negative value
    returned will not be detected here. So fix error handling in
    mv_ehci_probe(). And when get irq failed, the function
    platform_get_irq() logs an error message, so remove redundant
    message here.
    
    Signed-off-by: Zhang Shengju <zhangshengju@cmss.chinamobile.com>
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Link: https://lore.kernel.org/r/20200508114305.15740-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 881a4512dd2374bddc428f6e9a1fb635d8440737
Author: Sonny Sasaka <sonnysasaka@chromium.org>
Date:   Wed May 6 12:55:03 2020 -0700

    Bluetooth: Handle Inquiry Cancel error after Inquiry Complete
    
    [ Upstream commit adf1d6926444029396861413aba8a0f2a805742a ]
    
    After sending Inquiry Cancel command to the controller, it is possible
    that Inquiry Complete event comes before Inquiry Cancel command complete
    event. In this case the Inquiry Cancel command will have status of
    Command Disallowed since there is no Inquiry session to be cancelled.
    This case should not be treated as error, otherwise we can reach an
    inconsistent state.
    
    Example of a btmon trace when this happened:
    
    < HCI Command: Inquiry Cancel (0x01|0x0002) plen 0
    > HCI Event: Inquiry Complete (0x01) plen 1
            Status: Success (0x00)
    > HCI Event: Command Complete (0x0e) plen 4
          Inquiry Cancel (0x01|0x0002) ncmd 1
            Status: Command Disallowed (0x0c)
    
    Signed-off-by: Sonny Sasaka <sonnysasaka@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ba839399e5d4d89e992a66ba15fe541e0167c4d
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Sat Apr 25 10:36:33 2020 -0700

    phy: samsung: s5pv210-usb2: Add delay after reset
    
    [ Upstream commit 05942b8c36c7eb5d3fc5e375d4b0d0c49562e85d ]
    
    The USB phy takes some time to reset, so make sure we give it to it. The
    delay length was taken from the 4x12 phy driver.
    
    This manifested in issues with the DWC2 driver since commit fe369e1826b3
    ("usb: dwc2: Make dwc2_readl/writel functions endianness-agnostic.")
    where the endianness check would read the DWC ID as 0 due to the phy still
    resetting, resulting in the wrong endian mode being chosen.
    
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Link: https://lore.kernel.org/r/BN6PR04MB06605D52502816E500683553A3D10@BN6PR04MB0660.namprd04.prod.outlook.com
    Signed-off-by: Kishon Vijay Abraham I <kishon@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9da2a9d9c44aaa4845d860d3567a1352bb09871
Author: Jonathan Bakker <xc-racer2@live.ca>
Date:   Mon May 4 15:12:58 2020 -0700

    power: supply: max17040: Correct voltage reading
    
    [ Upstream commit 0383024f811aa469df258039807810fc3793a105 ]
    
    According to the datasheet available at (1), the bottom four
    bits are always zero and the actual voltage is 1.25x this value
    in mV.  Since the kernel API specifies that voltages should be in
    uV, it should report 1250x the shifted value.
    
    1) https://datasheets.maximintegrated.com/en/ds/MAX17040-MAX17041.pdf
    
    Signed-off-by: Jonathan Bakker <xc-racer2@live.ca>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15928af4114b51ae31c0adbbf1877053f28c6441
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri May 1 11:11:09 2020 -0700

    atm: fix a memory leak of vcc->user_back
    
    [ Upstream commit 8d9f73c0ad2f20e9fed5380de0a3097825859d03 ]
    
    In lec_arp_clear_vccs() only entry->vcc is freed, but vcc
    could be installed on entry->recv_vcc too in lec_vcc_added().
    
    This fixes the following memory leak:
    
    unreferenced object 0xffff8880d9266b90 (size 16):
      comm "atm2", pid 425, jiffies 4294907980 (age 23.488s)
      hex dump (first 16 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 6b 6b 6b a5  ............kkk.
      backtrace:
        [<(____ptrval____)>] kmem_cache_alloc_trace+0x10e/0x151
        [<(____ptrval____)>] lane_ioctl+0x4b3/0x569
        [<(____ptrval____)>] do_vcc_ioctl+0x1ea/0x236
        [<(____ptrval____)>] svc_ioctl+0x17d/0x198
        [<(____ptrval____)>] sock_do_ioctl+0x47/0x12f
        [<(____ptrval____)>] sock_ioctl+0x2f9/0x322
        [<(____ptrval____)>] vfs_ioctl+0x1e/0x2b
        [<(____ptrval____)>] ksys_ioctl+0x61/0x80
        [<(____ptrval____)>] __x64_sys_ioctl+0x16/0x19
        [<(____ptrval____)>] do_syscall_64+0x57/0x65
        [<(____ptrval____)>] entry_SYSCALL_64_after_hwframe+0x49/0xb3
    
    Cc: Gengming Liu <l.dmxcsnsbh@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 419bf6935bdaa809d30226f6f99c45ea4f575c49
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri May 1 15:35:34 2020 +0200

    dt-bindings: sound: wm8994: Correct required supplies based on actual implementaion
    
    [ Upstream commit 8c149b7d75e53be47648742f40fc90d9fc6fa63a ]
    
    The required supplies in bindings were actually not matching
    implementation making the bindings incorrect and misleading.  The Linux
    kernel driver requires all supplies to be present.  Also for wlf,wm8994
    uses just DBVDD-supply instead of DBVDDn-supply (n: <1,3>).
    
    Reported-by: Jonathan Bakker <xc-racer2@live.ca>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200501133534.6706-1-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 768cc3e0d94afe316a5c92a14ff9b2e6539c5721
Author: Will Deacon <will@kernel.org>
Date:   Tue Apr 21 15:29:21 2020 +0100

    arm64: cpufeature: Relax checks for AArch32 support at EL[0-2]
    
    [ Upstream commit 98448cdfe7060dd5491bfbd3f7214ffe1395d58e ]
    
    We don't need to be quite as strict about mismatched AArch32 support,
    which is good because the friendly hardware folks have been busy
    mismatching this to their hearts' content.
    
      * We don't care about EL2 or EL3 (there are silly comments concerning
        the latter, so remove those)
    
      * EL1 support is gated by the ARM64_HAS_32BIT_EL1 capability and handled
        gracefully when a mismatch occurs
    
      * EL0 support is gated by the ARM64_HAS_32BIT_EL0 capability and handled
        gracefully when a mismatch occurs
    
    Relax the AArch32 checks to FTR_NONSTRICT.
    
    Tested-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
    Reviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20200421142922.18950-8-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 012cba3f086b063ea8b9e6136fbfcc1184cd43cd
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Apr 27 12:24:15 2020 +0000

    sparc64: vcc: Fix error return code in vcc_probe()
    
    [ Upstream commit ff62255a2a5c1228a28f2bb063646f948115a309 ]
    
    Fix to return negative error code -ENOMEM from the error handling
    case instead of 0, as done elsewhere in this function.
    
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Link: https://lore.kernel.org/r/20200427122415.47416-1-weiyongjun1@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d50a0e55725a10bd43f5e7b4c0b831877b6c93d
Author: Ivan Safonov <insafonov@gmail.com>
Date:   Thu Apr 23 22:14:04 2020 +0300

    staging:r8188eu: avoid skb_clone for amsdu to msdu conversion
    
    [ Upstream commit 628cbd971a927abe6388d44320e351c337b331e4 ]
    
    skb clones use same data buffer,
    so tail of one skb is corrupted by beginning of next skb.
    
    Signed-off-by: Ivan Safonov <insafonov@gmail.com>
    Link: https://lore.kernel.org/r/20200423191404.12028-1-insafonov@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5749a4739c325282731d182b5a5abae68993de1e
Author: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
Date:   Fri Apr 17 21:04:51 2020 +0530

    drivers: char: tlclk.c: Avoid data race between init and interrupt handler
    
    [ Upstream commit 44b8fb6eaa7c3fb770bf1e37619cdb3902cca1fc ]
    
    After registering character device the file operation callbacks can be
    called. The open callback registers interrupt handler.
    Therefore interrupt handler can execute in parallel with rest of the init
    function. To avoid such data race initialize telclk_interrupt variable
    and struct alarm_events before registering character device.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Madhuparna Bhowmik <madhuparnabhowmik10@gmail.com>
    Link: https://lore.kernel.org/r/20200417153451.1551-1-madhuparnabhowmik10@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b645f4100aa77ce5c232da8f437546141c28016a
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Mar 24 14:48:27 2020 -0700

    bdev: Reduce time holding bd_mutex in sync in blkdev_close()
    
    [ Upstream commit b849dd84b6ccfe32622988b79b7b073861fcf9f7 ]
    
    While trying to "dd" to the block device for a USB stick, I
    encountered a hung task warning (blocked for > 120 seconds).  I
    managed to come up with an easy way to reproduce this on my system
    (where /dev/sdb is the block device for my USB stick) with:
    
      while true; do dd if=/dev/zero of=/dev/sdb bs=4M; done
    
    With my reproduction here are the relevant bits from the hung task
    detector:
    
     INFO: task udevd:294 blocked for more than 122 seconds.
     ...
     udevd           D    0   294      1 0x00400008
     Call trace:
      ...
      mutex_lock_nested+0x40/0x50
      __blkdev_get+0x7c/0x3d4
      blkdev_get+0x118/0x138
      blkdev_open+0x94/0xa8
      do_dentry_open+0x268/0x3a0
      vfs_open+0x34/0x40
      path_openat+0x39c/0xdf4
      do_filp_open+0x90/0x10c
      do_sys_open+0x150/0x3c8
      ...
    
     ...
     Showing all locks held in the system:
     ...
     1 lock held by dd/2798:
      #0: ffffff814ac1a3b8 (&bdev->bd_mutex){+.+.}, at: __blkdev_put+0x50/0x204
     ...
     dd              D    0  2798   2764 0x00400208
     Call trace:
      ...
      schedule+0x8c/0xbc
      io_schedule+0x1c/0x40
      wait_on_page_bit_common+0x238/0x338
      __lock_page+0x5c/0x68
      write_cache_pages+0x194/0x500
      generic_writepages+0x64/0xa4
      blkdev_writepages+0x24/0x30
      do_writepages+0x48/0xa8
      __filemap_fdatawrite_range+0xac/0xd8
      filemap_write_and_wait+0x30/0x84
      __blkdev_put+0x88/0x204
      blkdev_put+0xc4/0xe4
      blkdev_close+0x28/0x38
      __fput+0xe0/0x238
      ____fput+0x1c/0x28
      task_work_run+0xb0/0xe4
      do_notify_resume+0xfc0/0x14bc
      work_pending+0x8/0x14
    
    The problem appears related to the fact that my USB disk is terribly
    slow and that I have a lot of RAM in my system to cache things.
    Specifically my writes seem to be happening at ~15 MB/s and I've got
    ~4 GB of RAM in my system that can be used for buffering.  To write 4
    GB of buffer to disk thus takes ~4000 MB / ~15 MB/s = ~267 seconds.
    
    The 267 second number is a problem because in __blkdev_put() we call
    sync_blockdev() while holding the bd_mutex.  Any other callers who
    want the bd_mutex will be blocked for the whole time.
    
    The problem is made worse because I believe blkdev_put() specifically
    tells other tasks (namely udev) to go try to access the device at right
    around the same time we're going to hold the mutex for a long time.
    
    Putting some traces around this (after disabling the hung task detector),
    I could confirm:
     dd:    437.608600: __blkdev_put() right before sync_blockdev() for sdb
     udevd: 437.623901: blkdev_open() right before blkdev_get() for sdb
     dd:    661.468451: __blkdev_put() right after sync_blockdev() for sdb
     udevd: 663.820426: blkdev_open() right after blkdev_get() for sdb
    
    A simple fix for this is to realize that sync_blockdev() works fine if
    you're not holding the mutex.  Also, it's not the end of the world if
    you sync a little early (though it can have performance impacts).
    Thus we can make a guess that we're going to need to do the sync and
    then do it without holding the mutex.  We still do one last sync with
    the mutex but it should be much, much faster.
    
    With this, my hung task warnings for my test case are gone.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57b1b1e4397ec1a0377f86ce4a754db169d30866
Author: Steve Rutherford <srutherford@google.com>
Date:   Thu Apr 16 12:11:52 2020 -0700

    KVM: Remove CREATE_IRQCHIP/SET_PIT2 race
    
    [ Upstream commit 7289fdb5dcdbc5155b5531529c44105868a762f2 ]
    
    Fixes a NULL pointer dereference, caused by the PIT firing an interrupt
    before the interrupt table has been initialized.
    
    SET_PIT2 can race with the creation of the IRQchip. In particular,
    if SET_PIT2 is called with a low PIT timer period (after the creation of
    the IOAPIC, but before the instantiation of the irq routes), the PIT can
    fire an interrupt at an uninitialized table.
    
    Signed-off-by: Steve Rutherford <srutherford@google.com>
    Signed-off-by: Jon Cargille <jcargill@google.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20200416191152.259434-1-jcargill@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8de1d319e83ebbcc5d81ff3edabdac31ecb2765
Author: Raviteja Narayanam <raviteja.narayanam@xilinx.com>
Date:   Thu Apr 9 11:56:02 2020 +0530

    serial: uartps: Wait for tx_empty in console setup
    
    [ Upstream commit 42e11948ddf68b9f799cad8c0ddeab0a39da33e8 ]
    
    On some platforms, the log is corrupted while console is being
    registered. It is observed that when set_termios is called, there
    are still some bytes in the FIFO to be transmitted.
    
    So, wait for tx_empty inside cdns_uart_console_setup before calling
    set_termios.
    
    Signed-off-by: Raviteja Narayanam <raviteja.narayanam@xilinx.com>
    Reviewed-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>
    Link: https://lore.kernel.org/r/1586413563-29125-2-git-send-email-raviteja.narayanam@xilinx.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cfd5d9186bec40aafdd7e73a8bef4ccef0d1ae7
Author: Nilesh Javali <njavali@marvell.com>
Date:   Tue Apr 7 23:43:32 2020 -0700

    scsi: qedi: Fix termination timeouts in session logout
    
    [ Upstream commit b9b97e6903032ec56e6dcbe137a9819b74a17fea ]
    
    The destroy connection ramrod timed out during session logout.  Fix the
    wait delay for graceful vs abortive termination as per the FW requirements.
    
    Link: https://lore.kernel.org/r/20200408064332.19377-7-mrangankar@marvell.com
    Reviewed-by: Lee Duncan <lduncan@suse.com>
    Signed-off-by: Nilesh Javali <njavali@marvell.com>
    Signed-off-by: Manish Rangankar <mrangankar@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 35da59c2cf076111461d3ceb5c321bde7a1108d0
Author: Jaewon Kim <jaewon31.kim@samsung.com>
Date:   Fri Apr 10 14:32:48 2020 -0700

    mm/mmap.c: initialize align_offset explicitly for vm_unmapped_area
    
    [ Upstream commit 09ef5283fd96ac424ef0e569626f359bf9ab86c9 ]
    
    On passing requirement to vm_unmapped_area, arch_get_unmapped_area and
    arch_get_unmapped_area_topdown did not set align_offset.  Internally on
    both unmapped_area and unmapped_area_topdown, if info->align_mask is 0,
    then info->align_offset was meaningless.
    
    But commit df529cabb7a2 ("mm: mmap: add trace point of
    vm_unmapped_area") always prints info->align_offset even though it is
    uninitialized.
    
    Fix this uninitialized value issue by setting it to 0 explicitly.
    
    Before:
      vm_unmapped_area: addr=0x755b155000 err=0 total_vm=0x15aaf0 flags=0x1 len=0x109000 lo=0x8000 hi=0x75eed48000 mask=0x0 ofs=0x4022
    
    After:
      vm_unmapped_area: addr=0x74a4ca1000 err=0 total_vm=0x168ab1 flags=0x1 len=0x9000 lo=0x8000 hi=0x753d94b000 mask=0x0 ofs=0x0
    
    Signed-off-by: Jaewon Kim <jaewon31.kim@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Michel Lespinasse <walken@google.com>
    Cc: Borislav Petkov <bp@suse.de>
    Link: http://lkml.kernel.org/r/20200409094035.19457-1-jaewon31.kim@samsung.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 621df90b0d1bb6134497ab9f40642bbc2fd450cf
Author: Qian Cai <cai@lca.pw>
Date:   Wed Apr 1 21:10:12 2020 -0700

    mm/vmscan.c: fix data races using kswapd_classzone_idx
    
    [ Upstream commit 5644e1fbbfe15ad06785502bbfe5751223e5841d ]
    
    pgdat->kswapd_classzone_idx could be accessed concurrently in
    wakeup_kswapd().  Plain writes and reads without any lock protection
    result in data races.  Fix them by adding a pair of READ|WRITE_ONCE() as
    well as saving a branch (compilers might well optimize the original code
    in an unintentional way anyway).  While at it, also take care of
    pgdat->kswapd_order and non-kswapd threads in allow_direct_reclaim().  The
    data races were reported by KCSAN,
    
     BUG: KCSAN: data-race in wakeup_kswapd / wakeup_kswapd
    
     write to 0xffff9f427ffff2dc of 4 bytes by task 7454 on cpu 13:
      wakeup_kswapd+0xf1/0x400
      wakeup_kswapd at mm/vmscan.c:3967
      wake_all_kswapds+0x59/0xc0
      wake_all_kswapds at mm/page_alloc.c:4241
      __alloc_pages_slowpath+0xdcc/0x1290
      __alloc_pages_slowpath at mm/page_alloc.c:4512
      __alloc_pages_nodemask+0x3bb/0x450
      alloc_pages_vma+0x8a/0x2c0
      do_anonymous_page+0x16e/0x6f0
      __handle_mm_fault+0xcd5/0xd40
      handle_mm_fault+0xfc/0x2f0
      do_page_fault+0x263/0x6f9
      page_fault+0x34/0x40
    
     1 lock held by mtest01/7454:
      #0: ffff9f425afe8808 (&mm->mmap_sem#2){++++}, at:
     do_page_fault+0x143/0x6f9
     do_user_addr_fault at arch/x86/mm/fault.c:1405
     (inlined by) do_page_fault at arch/x86/mm/fault.c:1539
     irq event stamp: 6944085
     count_memcg_event_mm+0x1a6/0x270
     count_memcg_event_mm+0x119/0x270
     __do_softirq+0x34c/0x57c
     irq_exit+0xa2/0xc0
    
     read to 0xffff9f427ffff2dc of 4 bytes by task 7472 on cpu 38:
      wakeup_kswapd+0xc8/0x400
      wake_all_kswapds+0x59/0xc0
      __alloc_pages_slowpath+0xdcc/0x1290
      __alloc_pages_nodemask+0x3bb/0x450
      alloc_pages_vma+0x8a/0x2c0
      do_anonymous_page+0x16e/0x6f0
      __handle_mm_fault+0xcd5/0xd40
      handle_mm_fault+0xfc/0x2f0
      do_page_fault+0x263/0x6f9
      page_fault+0x34/0x40
    
     1 lock held by mtest01/7472:
      #0: ffff9f425a9ac148 (&mm->mmap_sem#2){++++}, at:
     do_page_fault+0x143/0x6f9
     irq event stamp: 6793561
     count_memcg_event_mm+0x1a6/0x270
     count_memcg_event_mm+0x119/0x270
     __do_softirq+0x34c/0x57c
     irq_exit+0xa2/0xc0
    
     BUG: KCSAN: data-race in kswapd / wakeup_kswapd
    
     write to 0xffff90973ffff2dc of 4 bytes by task 820 on cpu 6:
      kswapd+0x27c/0x8d0
      kthread+0x1e0/0x200
      ret_from_fork+0x27/0x50
    
     read to 0xffff90973ffff2dc of 4 bytes by task 6299 on cpu 0:
      wakeup_kswapd+0xf3/0x450
      wake_all_kswapds+0x59/0xc0
      __alloc_pages_slowpath+0xdcc/0x1290
      __alloc_pages_nodemask+0x3bb/0x450
      alloc_pages_vma+0x8a/0x2c0
      do_anonymous_page+0x170/0x700
      __handle_mm_fault+0xc9f/0xd00
      handle_mm_fault+0xfc/0x2f0
      do_page_fault+0x263/0x6f9
      page_fault+0x34/0x40
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Marco Elver <elver@google.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Link: http://lkml.kernel.org/r/1582749472-5171-1-git-send-email-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 853762c39aebc00772edbc7e22753b385cdff6c6
Author: Xianting Tian <xianting_tian@126.com>
Date:   Wed Apr 1 21:04:47 2020 -0700

    mm/filemap.c: clear page error before actual read
    
    [ Upstream commit faffdfa04fa11ccf048cebdde73db41ede0679e0 ]
    
    Mount failure issue happens under the scenario: Application forked dozens
    of threads to mount the same number of cramfs images separately in docker,
    but several mounts failed with high probability.  Mount failed due to the
    checking result of the page(read from the superblock of loop dev) is not
    uptodate after wait_on_page_locked(page) returned in function cramfs_read:
    
       wait_on_page_locked(page);
       if (!PageUptodate(page)) {
          ...
       }
    
    The reason of the checking result of the page not uptodate: systemd-udevd
    read the loopX dev before mount, because the status of loopX is Lo_unbound
    at this time, so loop_make_request directly trigger the calling of io_end
    handler end_buffer_async_read, which called SetPageError(page).  So It
    caused the page can't be set to uptodate in function
    end_buffer_async_read:
    
       if(page_uptodate && !PageError(page)) {
          SetPageUptodate(page);
       }
    
    Then mount operation is performed, it used the same page which is just
    accessed by systemd-udevd above, Because this page is not uptodate, it
    will launch a actual read via submit_bh, then wait on this page by calling
    wait_on_page_locked(page).  When the I/O of the page done, io_end handler
    end_buffer_async_read is called, because no one cleared the page
    error(during the whole read path of mount), which is caused by
    systemd-udevd reading, so this page is still in "PageError" status, which
    can't be set to uptodate in function end_buffer_async_read, then caused
    mount failure.
    
    But sometimes mount succeed even through systemd-udeved read loopX dev
    just before, The reason is systemd-udevd launched other loopX read just
    between step 3.1 and 3.2, the steps as below:
    
    1, loopX dev default status is Lo_unbound;
    2, systemd-udved read loopX dev (page is set to PageError);
    3, mount operation
       1) set loopX status to Lo_bound;
       ==>systemd-udevd read loopX dev<==
       2) read loopX dev(page has no error)
       3) mount succeed
    
    As the loopX dev status is set to Lo_bound after step 3.1, so the other
    loopX dev read by systemd-udevd will go through the whole I/O stack, part
    of the call trace as below:
    
       SYS_read
          vfs_read
              do_sync_read
                  blkdev_aio_read
                     generic_file_aio_read
                         do_generic_file_read:
                            ClearPageError(page);
                            mapping->a_ops->readpage(filp, page);
    
    here, mapping->a_ops->readpage() is blkdev_readpage.  In latest kernel,
    some function name changed, the call trace as below:
    
       blkdev_read_iter
          generic_file_read_iter
             generic_file_buffered_read:
                /*
                 * A previous I/O error may have been due to temporary
                 * failures, eg. mutipath errors.
                 * Pg_error will be set again if readpage fails.
                 */
                ClearPageError(page);
                /* Start the actual read. The read will unlock the page*/
                error=mapping->a_ops->readpage(flip, page);
    
    We can see ClearPageError(page) is called before the actual read,
    then the read in step 3.2 succeed.
    
    This patch is to add the calling of ClearPageError just before the actual
    read of read path of cramfs mount.  Without the patch, the call trace as
    below when performing cramfs mount:
    
       do_mount
          cramfs_read
             cramfs_blkdev_read
                read_cache_page
                   do_read_cache_page:
                      filler(data, page);
                      or
                      mapping->a_ops->readpage(data, page);
    
    With the patch, the call trace as below when performing mount:
    
       do_mount
          cramfs_read
             cramfs_blkdev_read
                read_cache_page:
                   do_read_cache_page:
                      ClearPageError(page); <== new add
                      filler(data, page);
                      or
                      mapping->a_ops->readpage(data, page);
    
    With the patch, mount operation trigger the calling of
    ClearPageError(page) before the actual read, the page has no error if no
    additional page error happen when I/O done.
    
    Signed-off-by: Xianting Tian <xianting_tian@126.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Jan Kara <jack@suse.cz>
    Cc: <yubin@h3c.com>
    Link: http://lkml.kernel.org/r/1583318844-22971-1-git-send-email-xianting_tian@126.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 211a6516940d6388a8f003965dae57dd5332e954
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed Apr 1 21:04:34 2020 -0700

    mm/kmemleak.c: use address-of operator on section symbols
    
    [ Upstream commit b0d14fc43d39203ae025f20ef4d5d25d9ccf4be1 ]
    
    Clang warns:
    
      mm/kmemleak.c:1955:28: warning: array comparison always evaluates to a constant [-Wtautological-compare]
            if (__start_ro_after_init < _sdata || __end_ro_after_init > _edata)
                                      ^
      mm/kmemleak.c:1955:60: warning: array comparison always evaluates to a constant [-Wtautological-compare]
            if (__start_ro_after_init < _sdata || __end_ro_after_init > _edata)
    
    These are not true arrays, they are linker defined symbols, which are just
    addresses.  Using the address of operator silences the warning and does
    not change the resulting assembly with either clang/ld.lld or gcc/ld
    (tested with diff + objdump -Dr).
    
    Suggested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/895
    Link: http://lkml.kernel.org/r/20200220051551.44000-1-natechancellor@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4778c34898ca4cbb024a6c492bdc1584f057fc72
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Wed Apr 1 13:04:49 2020 -0400

    NFS: Fix races nfs_page_group_destroy() vs nfs_destroy_unlinked_subrequests()
    
    [ Upstream commit 08ca8b21f760c0ed5034a5c122092eec22ccf8f4 ]
    
    When a subrequest is being detached from the subgroup, we want to
    ensure that it is not holding the group lock, or in the process
    of waiting for the group lock.
    
    Fixes: 5b2b5187fa85 ("NFS: Fix nfs_page_group_destroy() and nfs_lock_and_join_requests() race cases")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05c46e7f8c7d501c4f3cf131eec2aae5e64f49ba
Author: Andreas Steinmetz <ast@domdv.de>
Date:   Tue Mar 31 14:25:54 2020 +0200

    ALSA: usb-audio: Fix case when USB MIDI interface has more than one extra endpoint descriptor
    
    [ Upstream commit 5c6cd7021a05a02fcf37f360592d7c18d4d807fb ]
    
    The Miditech MIDIFACE 16x16 (USB ID 1290:1749) has more than one extra
    endpoint descriptor.
    
    The first extra descriptor is: 0x06 0x30 0x00 0x00 0x00 0x00
    
    As the code in snd_usbmidi_get_ms_info() looks only at the
    first extra descriptor to find USB_DT_CS_ENDPOINT the device
    as such is recognized but there is neither input nor output
    configured.
    
    The patch iterates through the extra descriptors to find the
    proper one. With this patch the device is correctly configured.
    
    Signed-off-by: Andreas Steinmetz <ast@domdv.de>
    Link: https://lore.kernel.org/r/1c3b431a86f69e1d60745b6110cdb93c299f120b.camel@domdv.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d77f3f9b20871f9a8873475edadec30f3d1fac8
Author: Liu Song <liu.song11@zte.com.cn>
Date:   Thu Jan 16 23:36:07 2020 +0800

    ubifs: Fix out-of-bounds memory access caused by abnormal value of node_len
    
    [ Upstream commit acc5af3efa303d5f36cc8c0f61716161f6ca1384 ]
    
    In “ubifs_check_node”, when the value of "node_len" is abnormal,
    the code will goto label of "out_len" for execution. Then, in the
    following "ubifs_dump_node", if inode type is "UBIFS_DATA_NODE",
    in "print_hex_dump", an out-of-bounds access may occur due to the
    wrong "ch->len".
    
    Therefore, when the value of "node_len" is abnormal, data length
    should to be adjusted to a reasonable safe range. At this time,
    structured data is not credible, so dump the corrupted data directly
    for analysis.
    
    Signed-off-by: Liu Song <liu.song11@zte.com.cn>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1482d335f610c14751709c178feaffa65434cc2c
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Tue Mar 24 16:53:59 2020 -0400

    svcrdma: Fix leak of transport addresses
    
    [ Upstream commit 1a33d8a284b1e85e03b8c7b1ea8fb985fccd1d71 ]
    
    Kernel memory leak detected:
    
    unreferenced object 0xffff888849cdf480 (size 8):
      comm "kworker/u8:3", pid 2086, jiffies 4297898756 (age 4269.856s)
      hex dump (first 8 bytes):
        30 00 cd 49 88 88 ff ff                          0..I....
      backtrace:
        [<00000000acfc370b>] __kmalloc_track_caller+0x137/0x183
        [<00000000a2724354>] kstrdup+0x2b/0x43
        [<0000000082964f84>] xprt_rdma_format_addresses+0x114/0x17d [rpcrdma]
        [<00000000dfa6ed00>] xprt_setup_rdma_bc+0xc0/0x10c [rpcrdma]
        [<0000000073051a83>] xprt_create_transport+0x3f/0x1a0 [sunrpc]
        [<0000000053531a8e>] rpc_create+0x118/0x1cd [sunrpc]
        [<000000003a51b5f8>] setup_callback_client+0x1a5/0x27d [nfsd]
        [<000000001bd410af>] nfsd4_process_cb_update.isra.7+0x16c/0x1ac [nfsd]
        [<000000007f4bbd56>] nfsd4_run_cb_work+0x4c/0xbd [nfsd]
        [<0000000055c5586b>] process_one_work+0x1b2/0x2fe
        [<00000000b1e3e8ef>] worker_thread+0x1a6/0x25a
        [<000000005205fb78>] kthread+0xf6/0xfb
        [<000000006d2dc057>] ret_from_fork+0x3a/0x50
    
    Introduce a call to xprt_rdma_free_addresses() similar to the way
    that the TCP backchannel releases a transport's peer address
    strings.
    
    Fixes: 5d252f90a800 ("svcrdma: Add class for RDMA backwards direction transport")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85230dc60f150a955fc1e452f4d6156e3a9a677d
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Mar 27 17:15:39 2020 +0100

    SUNRPC: Fix a potential buffer overflow in 'svc_print_xprts()'
    
    [ Upstream commit b25b60d7bfb02a74bc3c2d998e09aab159df8059 ]
    
    'maxlen' is the total size of the destination buffer. There is only one
    caller and this value is 256.
    
    When we compute the size already used and what we would like to add in
    the buffer, the trailling NULL character is not taken into account.
    However, this trailling character will be added by the 'strcat' once we
    have checked that we have enough place.
    
    So, there is a off-by-one issue and 1 byte of the stack could be
    erroneously overwridden.
    
    Take into account the trailling NULL, when checking if there is enough
    place in the destination buffer.
    
    While at it, also replace a 'sprintf' by a safer 'snprintf', check for
    output truncation and avoid a superfluous 'strlen'.
    
    Fixes: dc9a16e49dbba ("svc: Add /proc/sys/sunrpc/transport files")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    [ cel: very minor fix to documenting comment
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6cdbae1887d4eb6b9b127b02d68064159556487
Author: Zhu Yanjun <yanjunz@mellanox.com>
Date:   Mon Mar 23 13:28:00 2020 +0200

    RDMA/rxe: Set sys_image_guid to be aligned with HW IB devices
    
    [ Upstream commit d0ca2c35dd15a3d989955caec02beea02f735ee6 ]
    
    The RXE driver doesn't set sys_image_guid and user space applications see
    zeros. This causes to pyverbs tests to fail with the following traceback,
    because the IBTA spec requires to have valid sys_image_guid.
    
     Traceback (most recent call last):
       File "./tests/test_device.py", line 51, in test_query_device
         self.verify_device_attr(attr)
       File "./tests/test_device.py", line 74, in verify_device_attr
         assert attr.sys_image_guid != 0
    
    In order to fix it, set sys_image_guid to be equal to node_guid.
    
    Before:
     5: rxe0: ... node_guid 5054:00ff:feaa:5363 sys_image_guid
     0000:0000:0000:0000
    
    After:
     5: rxe0: ... node_guid 5054:00ff:feaa:5363 sys_image_guid
     5054:00ff:feaa:5363
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20200323112800.1444784-1-leon@kernel.org
    Signed-off-by: Zhu Yanjun <yanjunz@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbc75f17039ecfb72d044b790195c0d06d06b523
Author: Gabriel Ravier <gabravier@gmail.com>
Date:   Thu Mar 12 15:50:21 2020 +0100

    tools: gpio-hammer: Avoid potential overflow in main
    
    [ Upstream commit d1ee7e1f5c9191afb69ce46cc7752e4257340a31 ]
    
    If '-o' was used more than 64 times in a single invocation of gpio-hammer,
    this could lead to an overflow of the 'lines' array. This commit fixes
    this by avoiding the overflow and giving a proper diagnostic back to the
    user
    
    Signed-off-by: Gabriel Ravier <gabravier@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3bea78f80acf7124d8e6ca6d1c5b7fda55da0304
Author: Pratik Rajesh Sampat <psampat@linux.ibm.com>
Date:   Mon Mar 16 19:27:43 2020 +0530

    cpufreq: powernv: Fix frame-size-overflow in powernv_cpufreq_work_fn
    
    [ Upstream commit d95fe371ecd28901f11256c610b988ed44e36ee2 ]
    
    The patch avoids allocating cpufreq_policy on stack hence fixing frame
    size overflow in 'powernv_cpufreq_work_fn'
    
    Fixes: 227942809b52 ("cpufreq: powernv: Restore cpu frequency to policy->cur on unthrottling")
    Signed-off-by: Pratik Rajesh Sampat <psampat@linux.ibm.com>
    Reviewed-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200316135743.57735-1-psampat@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 190e1b7e451fbd125de8e2e8800f7234e9113509
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Mar 24 08:03:19 2020 +0100

    perf cpumap: Fix snprintf overflow check
    
    [ Upstream commit d74b181a028bb5a468f0c609553eff6a8fdf4887 ]
    
    'snprintf' returns the number of characters which would be generated for
    the given input.
    
    If the returned value is *greater than* or equal to the buffer size, it
    means that the output has been truncated.
    
    Fix the overflow test accordingly.
    
    Fixes: 7780c25bae59f ("perf tools: Allow ability to map cpus to nodes easily")
    Fixes: 92a7e1278005b ("perf cpumap: Add cpu__max_present_cpu()")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Don Zickus <dzickus@redhat.com>
    Cc: He Zhe <zhe.he@windriver.com>
    Cc: Jan Stancek <jstancek@redhat.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: kernel-janitors@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200324070319.10901-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a390f15a294b964e2025e09f61235efb4abb4c9
Author: Vignesh Raghavendra <vigneshr@ti.com>
Date:   Thu Mar 19 16:33:39 2020 +0530

    serial: 8250: 8250_omap: Terminate DMA before pushing data on RX timeout
    
    [ Upstream commit 7cf4df30a98175033e9849f7f16c46e96ba47f41 ]
    
    Terminate and flush DMA internal buffers, before pushing RX data to
    higher layer. Otherwise, this will lead to data corruption, as driver
    would end up pushing stale buffer data to higher layer while actual data
    is still stuck inside DMA hardware and has yet not arrived at the
    memory.
    While at that, replace deprecated dmaengine_terminate_all() with
    dmaengine_terminate_async().
    
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20200319110344.21348-2-vigneshr@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2549e4a136403c3b5f70a491bd83b9323039b54a
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Fri Mar 20 14:52:00 2020 +0200

    serial: 8250_omap: Fix sleeping function called from invalid context during probe
    
    [ Upstream commit 4ce35a3617c0ac758c61122b2218b6c8c9ac9398 ]
    
    When booting j721e the following bug is printed:
    
    [    1.154821] BUG: sleeping function called from invalid context at kernel/sched/completion.c:99
    [    1.154827] in_atomic(): 0, irqs_disabled(): 128, non_block: 0, pid: 12, name: kworker/0:1
    [    1.154832] 3 locks held by kworker/0:1/12:
    [    1.154836]  #0: ffff000840030728 ((wq_completion)events){+.+.}, at: process_one_work+0x1d4/0x6e8
    [    1.154852]  #1: ffff80001214fdd8 (deferred_probe_work){+.+.}, at: process_one_work+0x1d4/0x6e8
    [    1.154860]  #2: ffff00084060b170 (&dev->mutex){....}, at: __device_attach+0x38/0x138
    [    1.154872] irq event stamp: 63096
    [    1.154881] hardirqs last  enabled at (63095): [<ffff800010b74318>] _raw_spin_unlock_irqrestore+0x70/0x78
    [    1.154887] hardirqs last disabled at (63096): [<ffff800010b740d8>] _raw_spin_lock_irqsave+0x28/0x80
    [    1.154893] softirqs last  enabled at (62254): [<ffff800010080c88>] _stext+0x488/0x564
    [    1.154899] softirqs last disabled at (62247): [<ffff8000100fdb3c>] irq_exit+0x114/0x140
    [    1.154906] CPU: 0 PID: 12 Comm: kworker/0:1 Not tainted 5.6.0-rc6-next-20200318-00094-g45e4089b0bd3 #221
    [    1.154911] Hardware name: Texas Instruments K3 J721E SoC (DT)
    [    1.154917] Workqueue: events deferred_probe_work_func
    [    1.154923] Call trace:
    [    1.154928]  dump_backtrace+0x0/0x190
    [    1.154933]  show_stack+0x14/0x20
    [    1.154940]  dump_stack+0xe0/0x148
    [    1.154946]  ___might_sleep+0x150/0x1f0
    [    1.154952]  __might_sleep+0x4c/0x80
    [    1.154957]  wait_for_completion_timeout+0x40/0x140
    [    1.154964]  ti_sci_set_device_state+0xa0/0x158
    [    1.154969]  ti_sci_cmd_get_device_exclusive+0x14/0x20
    [    1.154977]  ti_sci_dev_start+0x34/0x50
    [    1.154984]  genpd_runtime_resume+0x78/0x1f8
    [    1.154991]  __rpm_callback+0x3c/0x140
    [    1.154996]  rpm_callback+0x20/0x80
    [    1.155001]  rpm_resume+0x568/0x758
    [    1.155007]  __pm_runtime_resume+0x44/0xb0
    [    1.155013]  omap8250_probe+0x2b4/0x508
    [    1.155019]  platform_drv_probe+0x50/0xa0
    [    1.155023]  really_probe+0xd4/0x318
    [    1.155028]  driver_probe_device+0x54/0xe8
    [    1.155033]  __device_attach_driver+0x80/0xb8
    [    1.155039]  bus_for_each_drv+0x74/0xc0
    [    1.155044]  __device_attach+0xdc/0x138
    [    1.155049]  device_initial_probe+0x10/0x18
    [    1.155053]  bus_probe_device+0x98/0xa0
    [    1.155058]  deferred_probe_work_func+0x74/0xb0
    [    1.155063]  process_one_work+0x280/0x6e8
    [    1.155068]  worker_thread+0x48/0x430
    [    1.155073]  kthread+0x108/0x138
    [    1.155079]  ret_from_fork+0x10/0x18
    
    To fix the bug we need to first call pm_runtime_enable() prior to any
    pm_runtime calls.
    
    Reported-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Link: https://lore.kernel.org/r/20200320125200.6772-1-peter.ujfalusi@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0030a2b8ddd2999aca75e89896c936163b583255
Author: Vignesh Raghavendra <vigneshr@ti.com>
Date:   Thu Mar 19 16:02:29 2020 +0530

    serial: 8250_port: Don't service RX FIFO if throttled
    
    [ Upstream commit f19c3f6c8109b8bab000afd35580929958e087a9 ]
    
    When port's throttle callback is called, it should stop pushing any more
    data into TTY buffer to avoid buffer overflow. This means driver has to
    stop HW from receiving more data and assert the HW flow control. For
    UARTs with auto HW flow control (such as 8250_omap) manual assertion of
    flow control line is not possible and only way is to allow RX FIFO to
    fill up, thus trigger auto HW flow control logic.
    
    Therefore make sure that 8250 generic IRQ handler does not drain data
    when port is stopped (i.e UART_LSR_DR is unset in read_status_mask). Not
    servicing, RX FIFO would trigger auto HW flow control when FIFO
    occupancy reaches preset threshold, thus halting RX.
    Since, error conditions in UART_LSR register are cleared just by reading
    the register, data has to be drained in case there are FIFO errors, else
    error information will lost.
    
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Link: https://lore.kernel.org/r/20200319103230.16867-2-vigneshr@ti.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7d52a03cdb5b680220eb72b55700775fd7280173
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Wed Feb 19 22:10:12 2020 -0700

    tracing: Use address-of operator on section symbols
    
    [ Upstream commit bf2cbe044da275021b2de5917240411a19e5c50d ]
    
    Clang warns:
    
    ../kernel/trace/trace.c:9335:33: warning: array comparison always
    evaluates to true [-Wtautological-compare]
            if (__stop___trace_bprintk_fmt != __start___trace_bprintk_fmt)
                                           ^
    1 warning generated.
    
    These are not true arrays, they are linker defined symbols, which are
    just addresses. Using the address of operator silences the warning and
    does not change the runtime result of the check (tested with some print
    statements compiled in with clang + ld.lld and gcc + ld.bfd in QEMU).
    
    Link: http://lkml.kernel.org/r/20200220051011.26113-1-natechancellor@gmail.com
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/893
    Suggested-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5de78016e67e72a484416015965dd4a329a5d600
Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
Date:   Fri Mar 6 08:34:01 2020 +0100

    rtc: ds1374: fix possible race condition
    
    [ Upstream commit c11af8131a4e7ba1960faed731ee7e84c2c13c94 ]
    
    The RTC IRQ is requested before the struct rtc_device is allocated,
    this may lead to a NULL pointer dereference in the IRQ handler.
    
    To fix this issue, allocating the rtc_device struct before requesting
    the RTC IRQ using devm_rtc_allocate_device, and use rtc_register_device
    to register the RTC device.
    
    Link: https://lore.kernel.org/r/20200306073404.56921-1-alexandre.belloni@bootlin.com
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2498482cf4e27375ca731429c0d35b492760390f
Author: Stefan Berger <stefanb@linux.ibm.com>
Date:   Thu Mar 12 11:53:31 2020 -0400

    tpm: ibmvtpm: Wait for buffer to be set before proceeding
    
    [ Upstream commit d8d74ea3c00214aee1e1826ca18e77944812b9b4 ]
    
    Synchronize with the results from the CRQs before continuing with
    the initialization. This avoids trying to send TPM commands while
    the rtce buffer has not been allocated, yet.
    
    This patch fixes an existing race condition that may occurr if the
    hypervisor does not quickly respond to the VTPM_GET_RTCE_BUFFER_SIZE
    request sent during initialization and therefore the ibmvtpm->rtce_buf
    has not been allocated at the time the first TPM command is sent.
    
    Fixes: 132f76294744 ("drivers/char/tpm: Add new device driver to support IBM vTPM")
    Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
    Acked-by: Nayna Jain <nayna@linux.ibm.com>
    Tested-by: Nayna Jain <nayna@linux.ibm.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef4602f8df791481526aa5ad03632415783cf114
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Wed Mar 11 10:37:55 2020 -0700

    xfs: don't ever return a stale pointer from __xfs_dir3_free_read
    
    [ Upstream commit 1cb5deb5bc095c070c09a4540c45f9c9ba24be43 ]
    
    If we decide that a directory free block is corrupt, we must take care
    not to leak a buffer pointer to the caller.  After xfs_trans_brelse
    returns, the buffer can be freed or reused, which means that we have to
    set *bpp back to NULL.
    
    Callers are supposed to notice the nonzero return value and not use the
    buffer pointer, but we should code more defensively, even if all current
    callers handle this situation correctly.
    
    Fixes: de14c5f541e7 ("xfs: verify free block header fields")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9734be80baa124f251e27fb97d7586ae483e2cd9
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Feb 10 15:26:46 2020 +0100

    media: tda10071: fix unsigned sign extension overflow
    
    [ Upstream commit a7463e2dc698075132de9905b89f495df888bb79 ]
    
    The shifting of buf[3] by 24 bits to the left will be promoted to
    a 32 bit signed int and then sign-extended to an unsigned long. In
    the unlikely event that the the top bit of buf[3] is set then all
    then all the upper bits end up as also being set because of
    the sign-extension and this affect the ev->post_bit_error sum.
    Fix this by using the temporary u32 variable bit_error to avoid
    the sign-extension promotion. This also removes the need to do the
    computation twice.
    
    Addresses-Coverity: ("Unintended sign extension")
    
    Fixes: 267897a4708f ("[media] tda10071: implement DVBv5 statistics")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6c50b846b9ac53e6cfaf6356c9c851c2dff81e7
Author: Howard Chung <howardchung@google.com>
Date:   Thu Mar 12 12:35:27 2020 +0800

    Bluetooth: L2CAP: handle l2cap config request during open state
    
    [ Upstream commit 96298f640104e4cd9a913a6e50b0b981829b94ff ]
    
    According to Core Spec Version 5.2 | Vol 3, Part A 6.1.5,
    the incoming L2CAP_ConfigReq should be handled during
    OPEN state.
    
    The section below shows the btmon trace when running
    L2CAP/COS/CFD/BV-12-C before and after this change.
    
    === Before ===
    ...
    > ACL Data RX: Handle 256 flags 0x02 dlen 12                #22
          L2CAP: Connection Request (0x02) ident 2 len 4
            PSM: 1 (0x0001)
            Source CID: 65
    < ACL Data TX: Handle 256 flags 0x00 dlen 16                #23
          L2CAP: Connection Response (0x03) ident 2 len 8
            Destination CID: 64
            Source CID: 65
            Result: Connection successful (0x0000)
            Status: No further information available (0x0000)
    < ACL Data TX: Handle 256 flags 0x00 dlen 12                #24
          L2CAP: Configure Request (0x04) ident 2 len 4
            Destination CID: 65
            Flags: 0x0000
    > HCI Event: Number of Completed Packets (0x13) plen 5      #25
            Num handles: 1
            Handle: 256
            Count: 1
    > HCI Event: Number of Completed Packets (0x13) plen 5      #26
            Num handles: 1
            Handle: 256
            Count: 1
    > ACL Data RX: Handle 256 flags 0x02 dlen 16                #27
          L2CAP: Configure Request (0x04) ident 3 len 8
            Destination CID: 64
            Flags: 0x0000
            Option: Unknown (0x10) [hint]
            01 00                                            ..
    < ACL Data TX: Handle 256 flags 0x00 dlen 18                #28
          L2CAP: Configure Response (0x05) ident 3 len 10
            Source CID: 65
            Flags: 0x0000
            Result: Success (0x0000)
            Option: Maximum Transmission Unit (0x01) [mandatory]
              MTU: 672
    > HCI Event: Number of Completed Packets (0x13) plen 5      #29
            Num handles: 1
            Handle: 256
            Count: 1
    > ACL Data RX: Handle 256 flags 0x02 dlen 14                #30
          L2CAP: Configure Response (0x05) ident 2 len 6
            Source CID: 64
            Flags: 0x0000
            Result: Success (0x0000)
    > ACL Data RX: Handle 256 flags 0x02 dlen 20                #31
          L2CAP: Configure Request (0x04) ident 3 len 12
            Destination CID: 64
            Flags: 0x0000
            Option: Unknown (0x10) [hint]
            01 00 91 02 11 11                                ......
    < ACL Data TX: Handle 256 flags 0x00 dlen 14                #32
          L2CAP: Command Reject (0x01) ident 3 len 6
            Reason: Invalid CID in request (0x0002)
            Destination CID: 64
            Source CID: 65
    > HCI Event: Number of Completed Packets (0x13) plen 5      #33
            Num handles: 1
            Handle: 256
            Count: 1
    ...
    === After ===
    ...
    > ACL Data RX: Handle 256 flags 0x02 dlen 12               #22
          L2CAP: Connection Request (0x02) ident 2 len 4
            PSM: 1 (0x0001)
            Source CID: 65
    < ACL Data TX: Handle 256 flags 0x00 dlen 16               #23
          L2CAP: Connection Response (0x03) ident 2 len 8
            Destination CID: 64
            Source CID: 65
            Result: Connection successful (0x0000)
            Status: No further information available (0x0000)
    < ACL Data TX: Handle 256 flags 0x00 dlen 12               #24
          L2CAP: Configure Request (0x04) ident 2 len 4
            Destination CID: 65
            Flags: 0x0000
    > HCI Event: Number of Completed Packets (0x13) plen 5     #25
            Num handles: 1
            Handle: 256
            Count: 1
    > HCI Event: Number of Completed Packets (0x13) plen 5     #26
            Num handles: 1
            Handle: 256
            Count: 1
    > ACL Data RX: Handle 256 flags 0x02 dlen 16               #27
          L2CAP: Configure Request (0x04) ident 3 len 8
            Destination CID: 64
            Flags: 0x0000
            Option: Unknown (0x10) [hint]
            01 00                                            ..
    < ACL Data TX: Handle 256 flags 0x00 dlen 18               #28
          L2CAP: Configure Response (0x05) ident 3 len 10
            Source CID: 65
            Flags: 0x0000
            Result: Success (0x0000)
            Option: Maximum Transmission Unit (0x01) [mandatory]
              MTU: 672
    > HCI Event: Number of Completed Packets (0x13) plen 5     #29
            Num handles: 1
            Handle: 256
            Count: 1
    > ACL Data RX: Handle 256 flags 0x02 dlen 14               #30
          L2CAP: Configure Response (0x05) ident 2 len 6
            Source CID: 64
            Flags: 0x0000
            Result: Success (0x0000)
    > ACL Data RX: Handle 256 flags 0x02 dlen 20               #31
          L2CAP: Configure Request (0x04) ident 3 len 12
            Destination CID: 64
            Flags: 0x0000
            Option: Unknown (0x10) [hint]
            01 00 91 02 11 11                                .....
    < ACL Data TX: Handle 256 flags 0x00 dlen 18               #32
          L2CAP: Configure Response (0x05) ident 3 len 10
            Source CID: 65
            Flags: 0x0000
            Result: Success (0x0000)
            Option: Maximum Transmission Unit (0x01) [mandatory]
              MTU: 672
    < ACL Data TX: Handle 256 flags 0x00 dlen 12               #33
          L2CAP: Configure Request (0x04) ident 3 len 4
            Destination CID: 65
            Flags: 0x0000
    > HCI Event: Number of Completed Packets (0x13) plen 5     #34
            Num handles: 1
            Handle: 256
            Count: 1
    > HCI Event: Number of Completed Packets (0x13) plen 5     #35
            Num handles: 1
            Handle: 256
            Count: 1
    ...
    
    Signed-off-by: Howard Chung <howardchung@google.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52f76574b82d1d14a171bc6dd93feefde445aac7
Author: Sagar Biradar <Sagar.Biradar@microchip.com>
Date:   Wed Feb 12 16:29:31 2020 -0800

    scsi: aacraid: Disabling TM path and only processing IOP reset
    
    [ Upstream commit bef18d308a2215eff8c3411a23d7f34604ce56c3 ]
    
    Fixes the occasional adapter panic when sg_reset is issued with -d, -t, -b
    and -H flags.  Removal of command type HBA_IU_TYPE_SCSI_TM_REQ in
    aac_hba_send since iu_type, request_id and fib_flags are not populated.
    Device and target reset handlers are made to send TMF commands only when
    reset_state is 0.
    
    Link: https://lore.kernel.org/r/1581553771-25796-1-git-send-email-Sagar.Biradar@microchip.com
    Reviewed-by: Sagar Biradar <Sagar.Biradar@microchip.com>
    Signed-off-by: Sagar Biradar <Sagar.Biradar@microchip.com>
    Signed-off-by: Balsundar P <balsundar.p@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 903e94362dad9d4e0e19f3cb86e98a7f6f25c152
Author: Wen Gong <wgong@codeaurora.org>
Date:   Fri Feb 14 11:42:18 2020 +0800

    ath10k: use kzalloc to read for ath10k_sdio_hif_diag_read
    
    [ Upstream commit 402f2992b4d62760cce7c689ff216ea3bf4d6e8a ]
    
    When use command to read values, it crashed.
    
    command:
    dd if=/sys/kernel/debug/ieee80211/phy0/ath10k/mem_value count=1 bs=4 skip=$((0x100233))
    
    It will call to ath10k_sdio_hif_diag_read with address = 0x4008cc and buf_len = 4.
    
    Then system crash:
    [ 1786.013258] Unable to handle kernel paging request at virtual address ffffffc00bd45000
    [ 1786.013273] Mem abort info:
    [ 1786.013281]   ESR = 0x96000045
    [ 1786.013291]   Exception class = DABT (current EL), IL = 32 bits
    [ 1786.013299]   SET = 0, FnV = 0
    [ 1786.013307]   EA = 0, S1PTW = 0
    [ 1786.013314] Data abort info:
    [ 1786.013322]   ISV = 0, ISS = 0x00000045
    [ 1786.013330]   CM = 0, WnR = 1
    [ 1786.013342] swapper pgtable: 4k pages, 39-bit VAs, pgdp = 000000008542a60e
    [ 1786.013350] [ffffffc00bd45000] pgd=0000000000000000, pud=0000000000000000
    [ 1786.013368] Internal error: Oops: 96000045 [#1] PREEMPT SMP
    [ 1786.013609] Process swapper/0 (pid: 0, stack limit = 0x0000000084b153c6)
    [ 1786.013623] CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.19.86 #137
    [ 1786.013631] Hardware name: MediaTek krane sku176 board (DT)
    [ 1786.013643] pstate: 80000085 (Nzcv daIf -PAN -UAO)
    [ 1786.013662] pc : __memcpy+0x94/0x180
    [ 1786.013678] lr : swiotlb_tbl_unmap_single+0x84/0x150
    [ 1786.013686] sp : ffffff8008003c60
    [ 1786.013694] x29: ffffff8008003c90 x28: ffffffae96411f80
    [ 1786.013708] x27: ffffffae960d2018 x26: ffffff8019a4b9a8
    [ 1786.013721] x25: 0000000000000000 x24: 0000000000000001
    [ 1786.013734] x23: ffffffae96567000 x22: 00000000000051d4
    [ 1786.013747] x21: 0000000000000000 x20: 00000000fe6e9000
    [ 1786.013760] x19: 0000000000000004 x18: 0000000000000020
    [ 1786.013773] x17: 0000000000000001 x16: 0000000000000000
    [ 1786.013787] x15: 00000000ffffffff x14: 00000000000044c0
    [ 1786.013800] x13: 0000000000365ba4 x12: 0000000000000000
    [ 1786.013813] x11: 0000000000000001 x10: 00000037be6e9000
    [ 1786.013826] x9 : ffffffc940000000 x8 : 000000000bd45000
    [ 1786.013839] x7 : 0000000000000000 x6 : ffffffc00bd45000
    [ 1786.013852] x5 : 0000000000000000 x4 : 0000000000000000
    [ 1786.013865] x3 : 0000000000000c00 x2 : 0000000000000004
    [ 1786.013878] x1 : fffffff7be6e9004 x0 : ffffffc00bd45000
    [ 1786.013891] Call trace:
    [ 1786.013903]  __memcpy+0x94/0x180
    [ 1786.013914]  unmap_single+0x6c/0x84
    [ 1786.013925]  swiotlb_unmap_sg_attrs+0x54/0x80
    [ 1786.013938]  __swiotlb_unmap_sg_attrs+0x8c/0xa4
    [ 1786.013952]  msdc_unprepare_data+0x6c/0x84
    [ 1786.013963]  msdc_request_done+0x58/0x84
    [ 1786.013974]  msdc_data_xfer_done+0x1a0/0x1c8
    [ 1786.013985]  msdc_irq+0x12c/0x17c
    [ 1786.013996]  __handle_irq_event_percpu+0xe4/0x250
    [ 1786.014006]  handle_irq_event_percpu+0x28/0x68
    [ 1786.014015]  handle_irq_event+0x48/0x78
    [ 1786.014026]  handle_fasteoi_irq+0xd0/0x1a0
    [ 1786.014039]  __handle_domain_irq+0x84/0xc4
    [ 1786.014050]  gic_handle_irq+0x124/0x1a4
    [ 1786.014059]  el1_irq+0xb0/0x128
    [ 1786.014072]  cpuidle_enter_state+0x298/0x328
    [ 1786.014082]  cpuidle_enter+0x30/0x40
    [ 1786.014094]  do_idle+0x190/0x268
    [ 1786.014104]  cpu_startup_entry+0x24/0x28
    [ 1786.014116]  rest_init+0xd4/0xe0
    [ 1786.014126]  start_kernel+0x30c/0x38c
    [ 1786.014139] Code: f8408423 f80084c3 36100062 b8404423 (b80044c3)
    [ 1786.014150] ---[ end trace 3b02ddb698ea69ee ]---
    [ 1786.015415] Kernel panic - not syncing: Fatal exception in interrupt
    [ 1786.015433] SMP: stopping secondary CPUs
    [ 1786.015447] Kernel Offset: 0x2e8d200000 from 0xffffff8008000000
    [ 1786.015458] CPU features: 0x0,2188200c
    [ 1786.015466] Memory Limit: none
    
    For sdio chip, it need the memory which is kmalloc, if it is
    vmalloc from ath10k_mem_value_read, then it have a memory error.
    kzalloc of ath10k_sdio_hif_diag_read32 is the correct type, so
    add kzalloc in ath10k_sdio_hif_diag_read to replace the buffer
    which is vmalloc from ath10k_mem_value_read.
    
    This patch only effect sdio chip.
    
    Tested with QCA6174 SDIO with firmware WLAN.RMH.4.4.1-00029.
    
    Signed-off-by: Wen Gong <wgong@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 040b55e76764376207a01085588175ba0d0772cd
Author: John Clements <john.clements@amd.com>
Date:   Thu Mar 5 17:48:56 2020 +0800

    drm/amdgpu: increase atombios cmd timeout
    
    [ Upstream commit 1b3460a8b19688ad3033b75237d40fa580a5a953 ]
    
    mitigates race condition on BACO reset between GPU bootcode and driver reload
    
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: John Clements <john.clements@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6cec88b2ffd5f96c5a888b1ec6064afea1ec778
Author: Kirill A. Shutemov <kirill@shutemov.name>
Date:   Thu Mar 5 22:28:32 2020 -0800

    mm: avoid data corruption on CoW fault into PFN-mapped VMA
    
    [ Upstream commit c3e5ea6ee574ae5e845a40ac8198de1fb63bb3ab ]
    
    Jeff Moyer has reported that one of xfstests triggers a warning when run
    on DAX-enabled filesystem:
    
            WARNING: CPU: 76 PID: 51024 at mm/memory.c:2317 wp_page_copy+0xc40/0xd50
            ...
            wp_page_copy+0x98c/0xd50 (unreliable)
            do_wp_page+0xd8/0xad0
            __handle_mm_fault+0x748/0x1b90
            handle_mm_fault+0x120/0x1f0
            __do_page_fault+0x240/0xd70
            do_page_fault+0x38/0xd0
            handle_page_fault+0x10/0x30
    
    The warning happens on failed __copy_from_user_inatomic() which tries to
    copy data into a CoW page.
    
    This happens because of race between MADV_DONTNEED and CoW page fault:
    
            CPU0                                    CPU1
     handle_mm_fault()
       do_wp_page()
         wp_page_copy()
           do_wp_page()
                                            madvise(MADV_DONTNEED)
                                              zap_page_range()
                                                zap_pte_range()
                                                  ptep_get_and_clear_full()
                                                  <TLB flush>
             __copy_from_user_inatomic()
             sees empty PTE and fails
             WARN_ON_ONCE(1)
             clear_page()
    
    The solution is to re-try __copy_from_user_inatomic() under PTL after
    checking that PTE is matches the orig_pte.
    
    The second copy attempt can still fail, like due to non-readable PTE, but
    there's nothing reasonable we can do about, except clearing the CoW page.
    
    Reported-by: Jeff Moyer <jmoyer@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Tested-by: Jeff Moyer <jmoyer@redhat.com>
    Cc: <stable@vger.kernel.org>
    Cc: Justin He <Justin.He@arm.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Link: http://lkml.kernel.org/r/20200218154151.13349-1-kirill.shutemov@linux.intel.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f119b5343dff7f52fc95b40d66570b9787ffe9a
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Mon Feb 24 23:02:46 2020 +0800

    ext4: fix a data race at inode->i_disksize
    
    [ Upstream commit dce8e237100f60c28cc66effb526ba65a01d8cb3 ]
    
    KCSAN find inode->i_disksize could be accessed concurrently.
    
    BUG: KCSAN: data-race in ext4_mark_iloc_dirty / ext4_write_end
    
    write (marked) to 0xffff8b8932f40090 of 8 bytes by task 66792 on cpu 0:
     ext4_write_end+0x53f/0x5b0
     ext4_da_write_end+0x237/0x510
     generic_perform_write+0x1c4/0x2a0
     ext4_buffered_write_iter+0x13a/0x210
     ext4_file_write_iter+0xe2/0x9b0
     new_sync_write+0x29c/0x3a0
     __vfs_write+0x92/0xa0
     vfs_write+0xfc/0x2a0
     ksys_write+0xe8/0x140
     __x64_sys_write+0x4c/0x60
     do_syscall_64+0x8a/0x2a0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    read to 0xffff8b8932f40090 of 8 bytes by task 14414 on cpu 1:
     ext4_mark_iloc_dirty+0x716/0x1190
     ext4_mark_inode_dirty+0xc9/0x360
     ext4_convert_unwritten_extents+0x1bc/0x2a0
     ext4_convert_unwritten_io_end_vec+0xc5/0x150
     ext4_put_io_end+0x82/0x130
     ext4_writepages+0xae7/0x16f0
     do_writepages+0x64/0x120
     __writeback_single_inode+0x7d/0x650
     writeback_sb_inodes+0x3a4/0x860
     __writeback_inodes_wb+0xc4/0x150
     wb_writeback+0x43f/0x510
     wb_workfn+0x3b2/0x8a0
     process_one_work+0x39b/0x7e0
     worker_thread+0x88/0x650
     kthread+0x1d4/0x1f0
     ret_from_fork+0x35/0x40
    
    The plain read is outside of inode->i_data_sem critical section
    which results in a data race. Fix it by adding READ_ONCE().
    
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Link: https://lore.kernel.org/r/1582556566-3909-1-git-send-email-hqjagain@gmail.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bee53ad71cde26621ab1a020a3754ab8efb0d59
Author: Wen Yang <wenyang@linux.alibaba.com>
Date:   Mon Jan 20 18:05:23 2020 +0800

    timekeeping: Prevent 32bit truncation in scale64_check_overflow()
    
    [ Upstream commit 4cbbc3a0eeed675449b1a4d080008927121f3da3 ]
    
    While unlikely the divisor in scale64_check_overflow() could be >= 32bit in
    scale64_check_overflow(). do_div() truncates the divisor to 32bit at least
    on 32bit platforms.
    
    Use div64_u64() instead to avoid the truncation to 32-bit.
    
    [ tglx: Massaged changelog ]
    
    Signed-off-by: Wen Yang <wenyang@linux.alibaba.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20200120100523.45656-1-wenyang@linux.alibaba.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f35ee4df258f3caba0bbe012fa8a14cba9372d08
Author: Alain Michaud <alainm@chromium.org>
Date:   Tue Mar 3 15:55:34 2020 +0000

    Bluetooth: guard against controllers sending zero'd events
    
    [ Upstream commit 08bb4da90150e2a225f35e0f642cdc463958d696 ]
    
    Some controllers have been observed to send zero'd events under some
    conditions.  This change guards against this condition as well as adding
    a trace to facilitate diagnosability of this condition.
    
    Signed-off-by: Alain Michaud <alainm@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2ed30fcb2a8312fea3c02134030cfae5a46f652
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Feb 6 16:45:27 2020 +0100

    media: go7007: Fix URB type for interrupt handling
    
    [ Upstream commit a3ea410cac41b19a5490aad7fe6d9a9a772e646e ]
    
    Josef reported that his old-and-good Plextor ConvertX M402U video
    converter spews lots of WARNINGs on the recent kernels, and it turned
    out that the device uses a bulk endpoint for interrupt handling just
    like 2250 board.
    
    For fixing it, generalize the check with the proper verification of
    the endpoint instead of hard-coded board type check.
    
    Fixes: 7e5219d18e93 ("[media] go7007: Fix 2250 urb type")
    Reported-and-tested-by: Josef Möllers <josef.moellers@suse.com>
    BugLink: https://bugzilla.suse.com/show_bug.cgi?id=1162583
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=206427
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88aa85abec5e482b876f376ed3bff05de9a39545
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Sun Feb 9 19:33:41 2020 +0300

    dmaengine: tegra-apb: Prevent race conditions on channel's freeing
    
    [ Upstream commit 8e84172e372bdca20c305d92d51d33640d2da431 ]
    
    It's incorrect to check the channel's "busy" state without taking a lock.
    That shouldn't cause any real troubles, nevertheless it's always better
    not to have any race conditions in the code.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200209163356.6439-5-digetx@gmail.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7288b6561e8b97b9ce71feccf2c33f04ebe05d13
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon Feb 24 15:01:39 2020 +0100

    bpf: Remove recursion prevention from rcu free callback
    
    [ Upstream commit 8a37963c7ac9ecb7f86f8ebda020e3f8d6d7b8a0 ]
    
    If an element is freed via RCU then recursion into BPF instrumentation
    functions is not a concern. The element is already detached from the map
    and the RCU callback does not hold any locks on which a kprobe, perf event
    or tracepoint attached BPF program could deadlock.
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/20200224145643.259118710@linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cc4d6923064b999144d274aa4a161a991c3cfb8
Author: Dave Hansen <dave.hansen@linux.intel.com>
Date:   Wed Jan 22 08:53:46 2020 -0800

    x86/pkeys: Add check for pkey "overflow"
    
    [ Upstream commit 16171bffc829272d5e6014bad48f680cb50943d9 ]
    
    Alex Shi reported the pkey macros above arch_set_user_pkey_access()
    to be unused.  They are unused, and even refer to a nonexistent
    CONFIG option.
    
    But, they might have served a good use, which was to ensure that
    the code does not try to set values that would not fit in the
    PKRU register.  As it stands, a too-large 'pkey' value would
    be likely to silently overflow the u32 new_pkru_bits.
    
    Add a check to look for overflows.  Also add a comment to remind
    any future developer to closely examine the types used to store
    pkey values if arch_max_pkey() ever changes.
    
    This boots and passes the x86 pkey selftests.
    
    Reported-by: Alex Shi <alex.shi@linux.alibaba.com>
    Signed-off-by: Dave Hansen <dave.hansen@intel.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200122165346.AD4DA150@viggo.jf.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17263de3fcda776c27534477d852dee45815fa56
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 11 08:35:46 2020 +0100

    media: staging/imx: Missing assignment in imx_media_capture_device_register()
    
    [ Upstream commit ef0ed05dcef8a74178a8b480cce23a377b1de2b8 ]
    
    There was supposed to be a "ret = " assignment here, otherwise the
    error handling on the next line won't work.
    
    Fixes: 64b5a49df486 ("[media] media: imx: Add Capture Device Interface")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Steve Longerbeam <slongerbeam@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b0810ab6fd500f9b5e062cd7b51b68bc76f868c
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Thu Feb 13 18:24:48 2020 +0100

    KVM: x86: fix incorrect comparison in trace event
    
    [ Upstream commit 147f1a1fe5d7e6b01b8df4d0cbd6f9eaf6b6c73b ]
    
    The "u" field in the event has three states, -1/0/1.  Using u8 however means that
    comparison with -1 will always fail, so change to signed char.
    
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50f29714c9915cb0c386ef5eab49da31f4ac2ed7
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Mon Feb 17 12:57:14 2020 -0800

    RDMA/rxe: Fix configuration of atomic queue pair attributes
    
    [ Upstream commit fb3063d31995cc4cf1d47a406bb61d6fb1b1d58d ]
    
    From the comment above the definition of the roundup_pow_of_two() macro:
    
         The result is undefined when n == 0.
    
    Hence only pass positive values to roundup_pow_of_two(). This patch fixes
    the following UBSAN complaint:
    
      UBSAN: Undefined behaviour in ./include/linux/log2.h:57:13
      shift exponent 64 is too large for 64-bit type 'long unsigned int'
      Call Trace:
       dump_stack+0xa5/0xe6
       ubsan_epilogue+0x9/0x26
       __ubsan_handle_shift_out_of_bounds.cold+0x4c/0xf9
       rxe_qp_from_attr.cold+0x37/0x5d [rdma_rxe]
       rxe_modify_qp+0x59/0x70 [rdma_rxe]
       _ib_modify_qp+0x5aa/0x7c0 [ib_core]
       ib_modify_qp+0x3b/0x50 [ib_core]
       cma_modify_qp_rtr+0x234/0x260 [rdma_cm]
       __rdma_accept+0x1a7/0x650 [rdma_cm]
       nvmet_rdma_cm_handler+0x1286/0x14cd [nvmet_rdma]
       cma_cm_event_handler+0x6b/0x330 [rdma_cm]
       cma_ib_req_handler+0xe60/0x22d0 [rdma_cm]
       cm_process_work+0x30/0x140 [ib_cm]
       cm_req_handler+0x11f4/0x1cd0 [ib_cm]
       cm_work_handler+0xb8/0x344e [ib_cm]
       process_one_work+0x569/0xb60
       worker_thread+0x7a/0x5d0
       kthread+0x1e6/0x210
       ret_from_fork+0x24/0x30
    
    Link: https://lore.kernel.org/r/20200217205714.26937-1-bvanassche@acm.org
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Signed-off-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1eae35c7de9cd1c3ac0f903603ea3dba2a14ca9
Author: Thomas Richter <tmricht@linux.ibm.com>
Date:   Mon Feb 17 11:21:11 2020 +0100

    perf test: Fix test trace+probe_vfs_getname.sh on s390
    
    [ Upstream commit 2bbc83537614517730e9f2811195004b712de207 ]
    
    This test places a kprobe to function getname_flags() in the kernel
    which has the following prototype:
    
      struct filename *getname_flags(const char __user *filename, int flags, int *empty)
    
    The 'filename' argument points to a filename located in user space memory.
    
    Looking at commit 88903c464321c ("tracing/probe: Add ustring type for
    user-space string") the kprobe should indicate that user space memory is
    accessed.
    
    Output before:
    
       [root@m35lp76 perf]# ./perf test 66 67
       66: Use vfs_getname probe to get syscall args filenames   : FAILED!
       67: Check open filename arg using perf trace + vfs_getname: FAILED!
       [root@m35lp76 perf]#
    
    Output after:
    
       [root@m35lp76 perf]# ./perf test 66 67
       66: Use vfs_getname probe to get syscall args filenames   : Ok
       67: Check open filename arg using perf trace + vfs_getname: Ok
       [root@m35lp76 perf]#
    
    Comments from Masami Hiramatsu:
    
    This bug doesn't happen on x86 or other archs on which user address
    space and kernel address space is the same. On some arches (ppc64 in
    this case?) user address space is partially or completely the same as
    kernel address space.
    
    (Yes, they switch the world when running into the kernel) In this case,
    we need to use different data access functions for each space.
    
    That is why I introduced the "ustring" type for kprobe events.
    
    As far as I can see, Thomas's patch is sane. Thomas, could you show us
    your result on your test environment?
    
    Comments from Thomas Richter:
    
    Test results for s/390 included above.
    
    Signed-off-by: Thomas Richter <tmricht@linux.ibm.com>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: Sumanth Korikkar <sumanthk@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Link: http://lore.kernel.org/lkml/20200217102111.61137-1-tmricht@linux.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b8b3b5f900b124441acc4c7b5faa0656233c7d9
Author: Wen Yang <wen.yang99@zte.com.cn>
Date:   Mon Apr 8 10:58:32 2019 +0800

    drm/omap: fix possible object reference leak
    
    [ Upstream commit 47340e46f34a3b1d80e40b43ae3d7a8da34a3541 ]
    
    The call to of_find_matching_node returns a node pointer with refcount
    incremented thus it must be explicitly decremented after the last
    usage.
    
    Detected by coccinelle with the following warnings:
    drivers/gpu/drm/omapdrm/dss/omapdss-boot-init.c:212:2-8: ERROR: missing of_node_put; acquired a node pointer with refcount incremented on line 209, but without a corresponding object release within this function.
    drivers/gpu/drm/omapdrm/dss/omapdss-boot-init.c:237:1-7: ERROR: missing of_node_put; acquired a node pointer with refcount incremented on line 209, but without a corresponding object release within this function.
    
    Signed-off-by: Wen Yang <wen.yang99@zte.com.cn>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Mukesh Ojha <mojha@codeaurora.org>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: David Airlie <airlied@linux.ie>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.com>
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: dri-devel@lists.freedesktop.org
    Cc: linux-kernel@vger.kernel.org
    Cc: Markus Elfring <Markus.Elfring@web.de>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1554692313-28882-2-git-send-email-wen.yang99@zte.com.cn
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9f4320acdd43dfc7c0f90da6d188c43f32fd829
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Jan 27 16:23:07 2020 -0800

    scsi: lpfc: Fix coverity errors in fmdi attribute handling
    
    [ Upstream commit 4cb9e1ddaa145be9ed67b6a7de98ca705a43f998 ]
    
    Coverity reported a memory corruption error for the fdmi attributes
    routines:
    
      CID 15768 [Memory Corruption] Out-of-bounds access on FDMI
    
    Sloppy coding of the fmdi structures. In both the lpfc_fdmi_attr_def and
    lpfc_fdmi_reg_port_list structures, a field was placed at the start of
    payload that may have variable content. The field was given an arbitrary
    type (uint32_t). The code then uses the field name to derive an address,
    which it used in things such as memset and memcpy. The memset sizes or
    memcpy lengths were larger than the arbitrary type, thus coverity reported
    an error.
    
    Fix by replacing the arbitrary fields with the real field structures
    describing the payload.
    
    Link: https://lore.kernel.org/r/20200128002312.16346-8-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 093f63ecd3dd5dc05939971d32d55d7a02c733d5
Author: James Smart <jsmart2021@gmail.com>
Date:   Mon Jan 27 16:23:01 2020 -0800

    scsi: lpfc: Fix RQ buffer leakage when no IOCBs available
    
    [ Upstream commit 39c4f1a965a9244c3ba60695e8ff8da065ec6ac4 ]
    
    The driver is occasionally seeing the following SLI Port error, requiring
    reset and reinit:
    
     Port Status Event: ... error 1=0x52004a01, error 2=0x218
    
    The failure means an RQ timeout. That is, the adapter had received
    asynchronous receive frames, ran out of buffer slots to place the frames,
    and the driver did not replenish the buffer slots before a timeout
    occurred. The driver should not be so slow in replenishing buffers that a
    timeout can occur.
    
    When the driver received all the frames of a sequence, it allocates an IOCB
    to put the frames in. In a situation where there was no IOCB available for
    the frame of a sequence, the RQ buffer corresponding to the first frame of
    the sequence was not returned to the FW. Eventually, with enough traffic
    encountering the situation, the timeout occurred.
    
    Fix by releasing the buffer back to firmware whenever there is no IOCB for
    the first frame.
    
    [mkp: typo]
    
    Link: https://lore.kernel.org/r/20200128002312.16346-2-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7e4f47dbea0158b99c9578b15b7c514b7431d3a
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Sat Feb 1 10:47:47 2020 +0300

    selinux: sel_avc_get_stat_idx should increase position index
    
    [ Upstream commit 8d269a8e2a8f0bca89022f4ec98de460acb90365 ]
    
    If seq_file .next function does not change position index,
    read after some lseek can generate unexpected output.
    
    $ dd if=/sys/fs/selinux/avc/cache_stats # usual output
    lookups hits misses allocations reclaims frees
    817223 810034 7189 7189 6992 7037
    1934894 1926896 7998 7998 7632 7683
    1322812 1317176 5636 5636 5456 5507
    1560571 1551548 9023 9023 9056 9115
    0+1 records in
    0+1 records out
    189 bytes copied, 5,1564e-05 s, 3,7 MB/s
    
    $# read after lseek to midle of last line
    $ dd if=/sys/fs/selinux/avc/cache_stats bs=180 skip=1
    dd: /sys/fs/selinux/avc/cache_stats: cannot skip to specified offset
    056 9115   <<<< end of last line
    1560571 1551548 9023 9023 9056 9115  <<< whole last line once again
    0+1 records in
    0+1 records out
    45 bytes copied, 8,7221e-05 s, 516 kB/s
    
    $# read after lseek beyond  end of of file
    $ dd if=/sys/fs/selinux/avc/cache_stats bs=1000 skip=1
    dd: /sys/fs/selinux/avc/cache_stats: cannot skip to specified offset
    1560571 1551548 9023 9023 9056 9115  <<<< generates whole last line
    0+1 records in
    0+1 records out
    36 bytes copied, 9,0934e-05 s, 396 kB/s
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Acked-by: Stephen Smalley <sds@tycho.nsa.gov>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0dcb9cb46874adf2f2fc779e358ce5da73652dc1
Author: Steve Grubb <sgrubb@redhat.com>
Date:   Fri Jan 24 17:29:16 2020 -0500

    audit: CONFIG_CHANGE don't log internal bookkeeping as an event
    
    [ Upstream commit 70b3eeed49e8190d97139806f6fbaf8964306cdb ]
    
    Common Criteria calls out for any action that modifies the audit trail to
    be recorded. That usually is interpreted to mean insertion or removal of
    rules. It is not required to log modification of the inode information
    since the watch is still in effect. Additionally, if the rule is a never
    rule and the underlying file is one they do not want events for, they
    get an event for this bookkeeping update against their wishes.
    
    Since no device/inode info is logged at insertion and no device/inode
    information is logged on update, there is nothing meaningful being
    communicated to the admin by the CONFIG_CHANGE updated_rules event. One
    can assume that the rule was not "modified" because it is still watching
    the intended target. If the device or inode cannot be resolved, then
    audit_panic is called which is sufficient.
    
    The correct resolution is to drop logging config_update events since
    the watch is still in effect but just on another unknown inode.
    
    Signed-off-by: Steve Grubb <sgrubb@redhat.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95e70e4ccb5f65374c43c4751146205abc5f9fe4
Author: Qian Cai <cai@lca.pw>
Date:   Tue Feb 4 13:40:29 2020 -0500

    skbuff: fix a data race in skb_queue_len()
    
    [ Upstream commit 86b18aaa2b5b5bb48e609cd591b3d2d0fdbe0442 ]
    
    sk_buff.qlen can be accessed concurrently as noticed by KCSAN,
    
     BUG: KCSAN: data-race in __skb_try_recv_from_queue / unix_dgram_sendmsg
    
     read to 0xffff8a1b1d8a81c0 of 4 bytes by task 5371 on cpu 96:
      unix_dgram_sendmsg+0x9a9/0xb70 include/linux/skbuff.h:1821
                                     net/unix/af_unix.c:1761
      ____sys_sendmsg+0x33e/0x370
      ___sys_sendmsg+0xa6/0xf0
      __sys_sendmsg+0x69/0xf0
      __x64_sys_sendmsg+0x51/0x70
      do_syscall_64+0x91/0xb47
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
     write to 0xffff8a1b1d8a81c0 of 4 bytes by task 1 on cpu 99:
      __skb_try_recv_from_queue+0x327/0x410 include/linux/skbuff.h:2029
      __skb_try_recv_datagram+0xbe/0x220
      unix_dgram_recvmsg+0xee/0x850
      ____sys_recvmsg+0x1fb/0x210
      ___sys_recvmsg+0xa2/0xf0
      __sys_recvmsg+0x66/0xf0
      __x64_sys_recvmsg+0x51/0x70
      do_syscall_64+0x91/0xb47
      entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Since only the read is operating as lockless, it could introduce a logic
    bug in unix_recvq_full() due to the load tearing. Fix it by adding
    a lockless variant of skb_queue_len() and unix_recvq_full() where
    READ_ONCE() is on the read while WRITE_ONCE() is on the write similar to
    the commit d7d16a89350a ("net: add skb_queue_empty_lockless()").
    
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f213fd9dd8cb4fb094a6ea7c2e58143236687bd
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Thu Feb 6 15:40:53 2020 +0530

    ALSA: hda: Clear RIRB status before reading WP
    
    [ Upstream commit 6d011d5057ff88ee556c000ac6fe0be23bdfcd72 ]
    
    RIRB interrupt status getting cleared after the write pointer is read
    causes a race condition, where last response(s) into RIRB may remain
    unserviced by IRQ, eventually causing azx_rirb_get_response to fall
    back to polling mode. Clearing the RIRB interrupt status ahead of
    write pointer access ensures that this condition is avoided.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Signed-off-by: Viswanath L <viswanathl@nvidia.com>
    Link: https://lore.kernel.org/r/1580983853-351-1-git-send-email-viswanathl@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0637ce33a2aa724af2bb0ab9429ae3fcd76a24c8
Author: Zhuang Yanying <ann.zhuangyanying@huawei.com>
Date:   Sat Oct 12 11:37:31 2019 +0800

    KVM: fix overflow of zero page refcount with ksm running
    
    [ Upstream commit 7df003c85218b5f5b10a7f6418208f31e813f38f ]
    
    We are testing Virtual Machine with KSM on v5.4-rc2 kernel,
    and found the zero_page refcount overflow.
    The cause of refcount overflow is increased in try_async_pf
    (get_user_page) without being decreased in mmu_set_spte()
    while handling ept violation.
    In kvm_release_pfn_clean(), only unreserved page will call
    put_page. However, zero page is reserved.
    So, as well as creating and destroy vm, the refcount of
    zero page will continue to increase until it overflows.
    
    step1:
    echo 10000 > /sys/kernel/pages_to_scan/pages_to_scan
    echo 1 > /sys/kernel/pages_to_scan/run
    echo 1 > /sys/kernel/pages_to_scan/use_zero_pages
    
    step2:
    just create several normal qemu kvm vms.
    And destroy it after 10s.
    Repeat this action all the time.
    
    After a long period of time, all domains hang because
    of the refcount of zero page overflow.
    
    Qemu print error log as follow:
     â€¦
     error: kvm run failed Bad address
     EAX=00006cdc EBX=00000008 ECX=80202001 EDX=078bfbfd
     ESI=ffffffff EDI=00000000 EBP=00000008 ESP=00006cc4
     EIP=000efd75 EFL=00010002 [-------] CPL=0 II=0 A20=1 SMM=0 HLT=0
     ES =0010 00000000 ffffffff 00c09300 DPL=0 DS   [-WA]
     CS =0008 00000000 ffffffff 00c09b00 DPL=0 CS32 [-RA]
     SS =0010 00000000 ffffffff 00c09300 DPL=0 DS   [-WA]
     DS =0010 00000000 ffffffff 00c09300 DPL=0 DS   [-WA]
     FS =0010 00000000 ffffffff 00c09300 DPL=0 DS   [-WA]
     GS =0010 00000000 ffffffff 00c09300 DPL=0 DS   [-WA]
     LDT=0000 00000000 0000ffff 00008200 DPL=0 LDT
     TR =0000 00000000 0000ffff 00008b00 DPL=0 TSS32-busy
     GDT=     000f7070 00000037
     IDT=     000f70ae 00000000
     CR0=00000011 CR2=00000000 CR3=00000000 CR4=00000000
     DR0=0000000000000000 DR1=0000000000000000 DR2=0000000000000000 DR3=0000000000000000
     DR6=00000000ffff0ff0 DR7=0000000000000400
     EFER=0000000000000000
     Code=00 01 00 00 00 e9 e8 00 00 00 c7 05 4c 55 0f 00 01 00 00 00 <8b> 35 00 00 01 00 8b 3d 04 00 01 00 b8 d8 d3 00 00 c1 e0 08 0c ea a3 00 00 01 00 c7 05 04
     â€¦
    
    Meanwhile, a kernel warning is departed.
    
     [40914.836375] WARNING: CPU: 3 PID: 82067 at ./include/linux/mm.h:987 try_get_page+0x1f/0x30
     [40914.836412] CPU: 3 PID: 82067 Comm: CPU 0/KVM Kdump: loaded Tainted: G           OE     5.2.0-rc2 #5
     [40914.836415] RIP: 0010:try_get_page+0x1f/0x30
     [40914.836417] Code: 40 00 c3 0f 1f 84 00 00 00 00 00 48 8b 47 08 a8 01 75 11 8b 47 34 85 c0 7e 10 f0 ff 47 34 b8 01 00 00 00 c3 48 8d 78 ff eb e9 <0f> 0b 31 c0 c3 66 90 66 2e 0f 1f 84 00 0
     0 00 00 00 48 8b 47 08 a8
     [40914.836418] RSP: 0018:ffffb4144e523988 EFLAGS: 00010286
     [40914.836419] RAX: 0000000080000000 RBX: 0000000000000326 RCX: 0000000000000000
     [40914.836420] RDX: 0000000000000000 RSI: 00004ffdeba10000 RDI: ffffdf07093f6440
     [40914.836421] RBP: ffffdf07093f6440 R08: 800000424fd91225 R09: 0000000000000000
     [40914.836421] R10: ffff9eb41bfeebb8 R11: 0000000000000000 R12: ffffdf06bbd1e8a8
     [40914.836422] R13: 0000000000000080 R14: 800000424fd91225 R15: ffffdf07093f6440
     [40914.836423] FS:  00007fb60ffff700(0000) GS:ffff9eb4802c0000(0000) knlGS:0000000000000000
     [40914.836425] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [40914.836426] CR2: 0000000000000000 CR3: 0000002f220e6002 CR4: 00000000003626e0
     [40914.836427] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     [40914.836427] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     [40914.836428] Call Trace:
     [40914.836433]  follow_page_pte+0x302/0x47b
     [40914.836437]  __get_user_pages+0xf1/0x7d0
     [40914.836441]  ? irq_work_queue+0x9/0x70
     [40914.836443]  get_user_pages_unlocked+0x13f/0x1e0
     [40914.836469]  __gfn_to_pfn_memslot+0x10e/0x400 [kvm]
     [40914.836486]  try_async_pf+0x87/0x240 [kvm]
     [40914.836503]  tdp_page_fault+0x139/0x270 [kvm]
     [40914.836523]  kvm_mmu_page_fault+0x76/0x5e0 [kvm]
     [40914.836588]  vcpu_enter_guest+0xb45/0x1570 [kvm]
     [40914.836632]  kvm_arch_vcpu_ioctl_run+0x35d/0x580 [kvm]
     [40914.836645]  kvm_vcpu_ioctl+0x26e/0x5d0 [kvm]
     [40914.836650]  do_vfs_ioctl+0xa9/0x620
     [40914.836653]  ksys_ioctl+0x60/0x90
     [40914.836654]  __x64_sys_ioctl+0x16/0x20
     [40914.836658]  do_syscall_64+0x5b/0x180
     [40914.836664]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
     [40914.836666] RIP: 0033:0x7fb61cb6bfc7
    
    Signed-off-by: LinFeng <linfeng23@huawei.com>
    Signed-off-by: Zhuang Yanying <ann.zhuangyanying@huawei.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0fb7fd729a1dd693fef7737f5bfe2198a493a2ec
Author: Hillf Danton <hdanton@sina.com>
Date:   Wed Feb 5 10:31:59 2020 +0800

    Bluetooth: prefetch channel before killing sock
    
    [ Upstream commit 2a154903cec20fb64ff4d7d617ca53c16f8fd53a ]
    
    Prefetch channel before killing sock in order to fix UAF like
    
     BUG: KASAN: use-after-free in l2cap_sock_release+0x24c/0x290 net/bluetooth/l2cap_sock.c:1212
     Read of size 8 at addr ffff8880944904a0 by task syz-fuzzer/9751
    
    Reported-by: syzbot+c3c5bdea7863886115dc@syzkaller.appspotmail.com
    Fixes: 6c08fc896b60 ("Bluetooth: Fix refcount use-after-free issue")
    Cc: Manish Mandlik <mmandlik@google.com>
    Signed-off-by: Hillf Danton <hdanton@sina.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2966b09a776f67970a279bd648b880d8e2943310
Author: Steven Price <steven.price@arm.com>
Date:   Mon Feb 3 17:35:58 2020 -0800

    mm: pagewalk: fix termination condition in walk_pte_range()
    
    [ Upstream commit c02a98753e0a36ba65a05818626fa6adeb4e7c97 ]
    
    If walk_pte_range() is called with a 'end' argument that is beyond the
    last page of memory (e.g.  ~0UL) then the comparison between 'addr' and
    'end' will always fail and the loop will be infinite.  Instead change the
    comparison to >= while accounting for overflow.
    
    Link: http://lkml.kernel.org/r/20191218162402.45610-15-steven.price@arm.com
    Signed-off-by: Steven Price <steven.price@arm.com>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Alexandre Ghiti <alex@ghiti.fr>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: James Hogan <jhogan@kernel.org>
    Cc: James Morse <james.morse@arm.com>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: "Liang, Kan" <kan.liang@linux.intel.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Paul Burton <paul.burton@mips.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Vineet Gupta <vgupta@synopsys.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Zong Li <zong.li@sifive.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a749cef79692888e4b1dee7286de092af1504a57
Author: Manish Mandlik <mmandlik@google.com>
Date:   Tue Jan 28 10:54:14 2020 -0800

    Bluetooth: Fix refcount use-after-free issue
    
    [ Upstream commit 6c08fc896b60893c5d673764b0668015d76df462 ]
    
    There is no lock preventing both l2cap_sock_release() and
    chan->ops->close() from running at the same time.
    
    If we consider Thread A running l2cap_chan_timeout() and Thread B running
    l2cap_sock_release(), expected behavior is:
      A::l2cap_chan_timeout()->l2cap_chan_close()->l2cap_sock_teardown_cb()
      A::l2cap_chan_timeout()->l2cap_sock_close_cb()->l2cap_sock_kill()
      B::l2cap_sock_release()->sock_orphan()
      B::l2cap_sock_release()->l2cap_sock_kill()
    
    where,
    sock_orphan() clears "sk->sk_socket" and l2cap_sock_teardown_cb() marks
    socket as SOCK_ZAPPED.
    
    In l2cap_sock_kill(), there is an "if-statement" that checks if both
    sock_orphan() and sock_teardown() has been run i.e. sk->sk_socket is NULL
    and socket is marked as SOCK_ZAPPED. Socket is killed if the condition is
    satisfied.
    
    In the race condition, following occurs:
      A::l2cap_chan_timeout()->l2cap_chan_close()->l2cap_sock_teardown_cb()
      B::l2cap_sock_release()->sock_orphan()
      B::l2cap_sock_release()->l2cap_sock_kill()
      A::l2cap_chan_timeout()->l2cap_sock_close_cb()->l2cap_sock_kill()
    
    In this scenario, "if-statement" is true in both B::l2cap_sock_kill() and
    A::l2cap_sock_kill() and we hit "refcount: underflow; use-after-free" bug.
    
    Similar condition occurs at other places where teardown/sock_kill is
    happening:
      l2cap_disconnect_rsp()->l2cap_chan_del()->l2cap_sock_teardown_cb()
      l2cap_disconnect_rsp()->l2cap_sock_close_cb()->l2cap_sock_kill()
    
      l2cap_conn_del()->l2cap_chan_del()->l2cap_sock_teardown_cb()
      l2cap_conn_del()->l2cap_sock_close_cb()->l2cap_sock_kill()
    
      l2cap_disconnect_req()->l2cap_chan_del()->l2cap_sock_teardown_cb()
      l2cap_disconnect_req()->l2cap_sock_close_cb()->l2cap_sock_kill()
    
      l2cap_sock_cleanup_listen()->l2cap_chan_close()->l2cap_sock_teardown_cb()
      l2cap_sock_cleanup_listen()->l2cap_sock_kill()
    
    Protect teardown/sock_kill and orphan/sock_kill by adding hold_lock on
    l2cap channel to ensure that the socket is killed only after marked as
    zapped and orphan.
    
    Signed-off-by: Manish Mandlik <mmandlik@google.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e4bddaf3a9069126a0bcbac0d026fc7dc7bf1842
Author: Doug Smythies <doug.smythies@gmail.com>
Date:   Mon Jan 27 19:59:56 2020 -0800

    tools/power/x86/intel_pstate_tracer: changes for python 3 compatibility
    
    [ Upstream commit e749e09db30c38f1a275945814b0109e530a07b0 ]
    
    Some syntax needs to be more rigorous for python 3.
    Backwards compatibility tested with python 2.7
    
    Signed-off-by: Doug Smythies <dsmythies@telus.net>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8de83f2fea93452d41643e6b81f935b1942f2f78
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Tue Jan 28 09:30:29 2020 +0100

    selftests/ftrace: fix glob selftest
    
    [ Upstream commit af4ddd607dff7aabd466a4a878e01b9f592a75ab ]
    
    test.d/ftrace/func-filter-glob.tc is failing on s390 because it has
    ARCH_INLINE_SPIN_LOCK and friends set to 'y'. So the usual
    __raw_spin_lock symbol isn't in the ftrace function list. Change
    '*aw*lock' to '*spin*lock' which would hopefully match some of the
    locking functions on all platforms.
    
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3653849afee736fc48aad129d1c69e4716566a2
Author: Mert Dirik <mertdirik@gmail.com>
Date:   Thu Jan 16 14:11:25 2020 +0300

    ar5523: Add USB ID of SMCWUSBT-G2 wireless adapter
    
    [ Upstream commit 5b362498a79631f283578b64bf6f4d15ed4cc19a ]
    
    Add the required USB ID for running SMCWUSBT-G2 wireless adapter (SMC
    "EZ Connect g").
    
    This device uses ar5523 chipset and requires firmware to be loaded. Even
    though pid of the device is 4507, this patch adds it as 4506 so that
    AR5523_DEVICE_UG macro can set the AR5523_FLAG_PRE_FIRMWARE flag for pid
    4507.
    
    Signed-off-by: Mert Dirik <mertdirik@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4103450df00c84f1a4f7162aa93ee364bf36dd3
Author: Josef Bacik <jbacik@fb.com>
Date:   Wed Sep 24 16:14:12 2014 -0400

    tracing: Set kernel_stack's caller size properly
    
    [ Upstream commit cbc3b92ce037f5e7536f6db157d185cd8b8f615c ]
    
    I noticed when trying to use the trace-cmd python interface that reading the raw
    buffer wasn't working for kernel_stack events.  This is because it uses a
    stubbed version of __dynamic_array that doesn't do the __data_loc trick and
    encode the length of the array into the field.  Instead it just shows up as a
    size of 0.  So change this to __array and set the len to FTRACE_STACK_ENTRIES
    since this is what we actually do in practice and matches how user_stack_trace
    works.
    
    Link: http://lkml.kernel.org/r/1411589652-1318-1-git-send-email-jbacik@fb.com
    
    Signed-off-by: Josef Bacik <jbacik@fb.com>
    [ Pulled from the archeological digging of my INBOX ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcaa1cc8382a3d23e917bd4346d6331cb20b06ea
Author: Oliver O'Halloran <oohall@gmail.com>
Date:   Wed Oct 16 12:25:36 2019 +1100

    powerpc/eeh: Only dump stack once if an MMIO loop is detected
    
    [ Upstream commit 4e0942c0302b5ad76b228b1a7b8c09f658a1d58a ]
    
    Many drivers don't check for errors when they get a 0xFFs response from an
    MMIO load. As a result after an EEH event occurs a driver can get stuck in
    a polling loop unless it some kind of internal timeout logic.
    
    Currently EEH tries to detect and report stuck drivers by dumping a stack
    trace after eeh_dev_check_failure() is called EEH_MAX_FAILS times on an
    already frozen PE. The value of EEH_MAX_FAILS was chosen so that a dump
    would occur every few seconds if the driver was spinning in a loop. This
    results in a lot of spurious stack traces in the kernel log.
    
    Fix this by limiting it to printing one stack trace for each PE freeze. If
    the driver is truely stuck the kernel's hung task detector is better suited
    to reporting the probelm anyway.
    
    Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
    Reviewed-by: Sam Bobroff <sbobroff@linux.ibm.com>
    Tested-by: Sam Bobroff <sbobroff@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20191016012536.22588-1-oohall@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 829ff0978abb5e04156b63231b25f811cec683f9
Author: Matthias Fend <matthias.fend@wolfvision.net>
Date:   Wed Jan 15 11:22:49 2020 +0100

    dmaengine: zynqmp_dma: fix burst length configuration
    
    [ Upstream commit cc88525ebffc757e00cc5a5d61da6271646c7f5f ]
    
    Since the dma engine expects the burst length register content as
    power of 2 value, the burst length needs to be converted first.
    Additionally add a burst length range check to avoid corrupting unrelated
    register bits.
    
    Signed-off-by: Matthias Fend <matthias.fend@wolfvision.net>
    Link: https://lore.kernel.org/r/20200115102249.24398-1-matthias.fend@wolfvision.net
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bc7ffdd7a48d7ae1939055d59e68e57ba2186f5
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Dec 27 11:04:21 2019 +0100

    ACPI: EC: Reference count query handlers under lock
    
    [ Upstream commit 3df663a147fe077a6ee8444ec626738946e65547 ]
    
    There is a race condition in acpi_ec_get_query_handler()
    theoretically allowing query handlers to go away before refernce
    counting them.
    
    In order to avoid it, call kref_get() on query handlers under
    ec->mutex.
    
    Also simplify the code a bit while at it.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f210e180543fd67236290a20d6e274b62e754a40
Author: Nikhil Devshatwar <nikhil.nd@ti.com>
Date:   Tue Nov 12 15:53:33 2019 +0100

    media: ti-vpe: cal: Restrict DMA to avoid memory corruption
    
    [ Upstream commit 6e72eab2e7b7a157d554b8f9faed7676047be7c1 ]
    
    When setting DMA for video capture from CSI channel, if the DMA size
    is not given, it ends up writing as much data as sent by the camera.
    
    This may lead to overwriting the buffers causing memory corruption.
    Observed green lines on the default framebuffer.
    
    Restrict the DMA to maximum height as specified in the S_FMT ioctl.
    
    Signed-off-by: Nikhil Devshatwar <nikhil.nd@ti.com>
    Signed-off-by: Benoit Parrot <bparrot@ti.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c6755bdf1fdd6f0a8a1d4adaee2af5d3c48d6b5
Author: Marco Elver <elver@google.com>
Date:   Thu Nov 14 19:03:00 2019 +0100

    seqlock: Require WRITE_ONCE surrounding raw_seqcount_barrier
    
    [ Upstream commit bf07132f96d426bcbf2098227fb680915cf44498 ]
    
    This patch proposes to require marked atomic accesses surrounding
    raw_write_seqcount_barrier. We reason that otherwise there is no way to
    guarantee propagation nor atomicity of writes before/after the barrier
    [1]. For example, consider the compiler tears stores either before or
    after the barrier; in this case, readers may observe a partial value,
    and because readers are unaware that writes are going on (writes are not
    in a seq-writer critical section), will complete the seq-reader critical
    section while having observed some partial state.
    [1] https://lwn.net/Articles/793253/
    
    This came up when designing and implementing KCSAN, because KCSAN would
    flag these accesses as data-races. After careful analysis, our reasoning
    as above led us to conclude that the best thing to do is to propose an
    amendment to the raw_seqcount_barrier usage.
    
    Signed-off-by: Marco Elver <elver@google.com>
    Acked-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ec47e1e6607964be8745523ded7cee4e6d2e125
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 10:11:35 2020 +0300

    rt_cpu_seq_next should increase position index
    
    [ Upstream commit a3ea86739f1bc7e121d921842f0f4a8ab1af94d9 ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68757c004bffaad5cebf41c19931cd22e6a9901f
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Jan 23 10:11:28 2020 +0300

    neigh_stat_seq_next() should increase position index
    
    [ Upstream commit 1e3f9f073c47bee7c23e77316b07bc12338c5bba ]
    
    if seq_file .next fuction does not change position index,
    read after some lseek can generate unexpected output.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=206283
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccaaf5504912ec5899247b7089986d9b24d31b5a
Author: Joe Perches <joe@perches.com>
Date:   Wed Dec 4 16:50:53 2019 -0800

    kernel/sys.c: avoid copying possible padding bytes in copy_to_user
    
    [ Upstream commit 5e1aada08cd19ea652b2d32a250501d09b02ff2e ]
    
    Initialization is not guaranteed to zero padding bytes so use an
    explicit memset instead to avoid leaking any kernel content in any
    possible padding bytes.
    
    Link: http://lkml.kernel.org/r/dfa331c00881d61c8ee51577a082d8bebd61805c.camel@perches.com
    Signed-off-by: Joe Perches <joe@perches.com>
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Julia Lawall <julia.lawall@lip6.fr>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4677b78aa2038ff3875932f5d43805567f5a0427
Author: Pavel Shilovsky <pshilov@microsoft.com>
Date:   Tue Oct 29 16:51:19 2019 -0700

    CIFS: Properly process SMB3 lease breaks
    
    [ Upstream commit 9bd4540836684013aaad6070a65d6fcdd9006625 ]
    
    Currenly we doesn't assume that a server may break a lease
    from RWH to RW which causes us setting a wrong lease state
    on a file and thus mistakenly flushing data and byte-range
    locks and purging cached data on the client. This leads to
    performance degradation because subsequent IOs go directly
    to the server.
    
    Fix this by propagating new lease state and epoch values
    to the oplock break handler through cifsFileInfo structure
    and removing the use of cifsInodeInfo flags for that. It
    allows to avoid some races of several lease/oplock breaks
    using those flags in parallel.
    
    Signed-off-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c146c8b6666907fdbe73fb8990b0b1c13ce6bad1
Author: Kusanagi Kouichi <slash@ac.auone-net.jp>
Date:   Thu Nov 21 19:20:21 2019 +0900

    debugfs: Fix !DEBUG_FS debugfs_create_automount
    
    [ Upstream commit 4250b047039d324e0ff65267c8beb5bad5052a86 ]
    
    If DEBUG_FS=n, compile fails with the following error:
    
    kernel/trace/trace.c: In function 'tracing_init_dentry':
    kernel/trace/trace.c:8658:9: error: passing argument 3 of 'debugfs_create_automount' from incompatible pointer type [-Werror=incompatible-pointer-types]
     8658 |         trace_automount, NULL);
          |         ^~~~~~~~~~~~~~~
          |         |
          |         struct vfsmount * (*)(struct dentry *, void *)
    In file included from kernel/trace/trace.c:24:
    ./include/linux/debugfs.h:206:25: note: expected 'struct vfsmount * (*)(void *)' but argument is of type 'struct vfsmount * (*)(struct dentry *, void *)'
      206 |      struct vfsmount *(*f)(void *),
          |      ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
    
    Signed-off-by: Kusanagi Kouichi <slash@ac.auone-net.jp>
    Link: https://lore.kernel.org/r/20191121102021787.MLMY.25002.ppp.dion.ne.jp@dmta0003.auone-net.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 803c84dc410d2b49bb781bfc95f6a5a26875d3e6
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Tue Nov 19 11:40:46 2019 -0500

    gfs2: clean up iopen glock mess in gfs2_create_inode
    
    [ Upstream commit 2c47c1be51fbded1f7baa2ceaed90f97932f79be ]
    
    Before this patch, gfs2_create_inode had a use-after-free for the
    iopen glock in some error paths because it did this:
    
            gfs2_glock_put(io_gl);
    fail_gunlock2:
            if (io_gl)
                    clear_bit(GLF_INODE_CREATING, &io_gl->gl_flags);
    
    In some cases, the io_gl was used for create and only had one
    reference, so the glock might be freed before the clear_bit().
    This patch tries to straighten it out by only jumping to the
    error paths where iopen is properly set, and moving the
    gfs2_glock_put after the clear_bit.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 074c87f18148c27b7d6fcbf686cb02c8370330b1
Author: Bradley Bolen <bradleybolen@gmail.com>
Date:   Sat Nov 16 20:00:45 2019 -0500

    mmc: core: Fix size overflow for mmc partitions
    
    [ Upstream commit f3d7c2292d104519195fdb11192daec13229c219 ]
    
    With large eMMC cards, it is possible to create general purpose
    partitions that are bigger than 4GB.  The size member of the mmc_part
    struct is only an unsigned int which overflows for gp partitions larger
    than 4GB.  Change this to a u64 to handle the overflow.
    
    Signed-off-by: Bradley Bolen <bradleybolen@gmail.com>
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d8ae52f1fd8a2206286ddd96e4b57297d4419622
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Mon Sep 23 21:07:46 2019 +0200

    RDMA/iw_cgxb4: Fix an error handling path in 'c4iw_connect()'
    
    [ Upstream commit 9067f2f0b41d7e817fc8c5259bab1f17512b0147 ]
    
    We should jump to fail3 in order to undo the 'xa_insert_irq()' call.
    
    Link: https://lore.kernel.org/r/20190923190746.10964-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2116e20b653e369797b263d08d0a387bf9f5395b
Author: Brian Foster <bfoster@redhat.com>
Date:   Fri Nov 15 21:15:08 2019 -0800

    xfs: fix attr leaf header freemap.size underflow
    
    [ Upstream commit 2a2b5932db67586bacc560cc065d62faece5b996 ]
    
    The leaf format xattr addition helper xfs_attr3_leaf_add_work()
    adjusts the block freemap in a couple places. The first update drops
    the size of the freemap that the caller had already selected to
    place the xattr name/value data. Before the function returns, it
    also checks whether the entries array has encroached on a freemap
    range by virtue of the new entry addition. This is necessary because
    the entries array grows from the start of the block (but end of the
    block header) towards the end of the block while the name/value data
    grows from the end of the block in the opposite direction. If the
    associated freemap is already empty, however, size is zero and the
    subtraction underflows the field and causes corruption.
    
    This is reproduced rarely by generic/070. The observed behavior is
    that a smaller sized freemap is aligned to the end of the entries
    list, several subsequent xattr additions land in larger freemaps and
    the entries list expands into the smaller freemap until it is fully
    consumed and then underflows. Note that it is not otherwise a
    corruption for the entries array to consume an empty freemap because
    the nameval list (i.e. the firstused pointer in the xattr header)
    starts beyond the end of the corrupted freemap.
    
    Update the freemap size modification to account for the fact that
    the freemap entry can be empty and thus stale.
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c94d70b40a4e6aba428bd2f5cf6f41bf115278a
Author: Pan Bian <bianpan2016@163.com>
Date:   Wed Nov 6 14:44:11 2019 +0800

    RDMA/i40iw: Fix potential use after free
    
    [ Upstream commit da046d5f895fca18d63b15ac8faebd5bf784e23a ]
    
    Release variable dst after logging dst->error to avoid possible use after
    free.
    
    Link: https://lore.kernel.org/r/1573022651-37171-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15e8bcbff83be528b00dc44005fe5eb0001761c0
Author: Guoju Fang <fangguoju@gmail.com>
Date:   Wed Nov 13 16:03:16 2019 +0800

    bcache: fix a lost wake-up problem caused by mca_cannibalize_lock
    
    [ Upstream commit 34cf78bf34d48dddddfeeadb44f9841d7864997a ]
    
    This patch fix a lost wake-up problem caused by the race between
    mca_cannibalize_lock and bch_cannibalize_unlock.
    
    Consider two processes, A and B. Process A is executing
    mca_cannibalize_lock, while process B takes c->btree_cache_alloc_lock
    and is executing bch_cannibalize_unlock. The problem happens that after
    process A executes cmpxchg and will execute prepare_to_wait. In this
    timeslice process B executes wake_up, but after that process A executes
    prepare_to_wait and set the state to TASK_INTERRUPTIBLE. Then process A
    goes to sleep but no one will wake up it. This problem may cause bcache
    device to dead.
    
    Signed-off-by: Guoju Fang <fangguoju@gmail.com>
    Signed-off-by: Coly Li <colyli@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f48cb71fec0f015eba032a1ab5b2213f7bc5134f
Author: Divya Indi <divya.indi@oracle.com>
Date:   Wed Aug 14 10:55:25 2019 -0700

    tracing: Adding NULL checks for trace_array descriptor pointer
    
    [ Upstream commit 953ae45a0c25e09428d4a03d7654f97ab8a36647 ]
    
    As part of commit f45d1225adb0 ("tracing: Kernel access to Ftrace
    instances") we exported certain functions. Here, we are adding some additional
    NULL checks to ensure safe usage by users of these APIs.
    
    Link: http://lkml.kernel.org/r/1565805327-579-4-git-send-email-divya.indi@oracle.com
    
    Signed-off-by: Divya Indi <divya.indi@oracle.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84cb952fa29412caf54415ed60d4f0fcdc8e7f9d
Author: Lee Jones <lee.jones@linaro.org>
Date:   Mon Oct 21 10:16:34 2019 +0100

    mfd: mfd-core: Protect against NULL call-back function pointer
    
    [ Upstream commit b195e101580db390f50b0d587b7f66f241d2bc88 ]
    
    If a child device calls mfd_cell_{en,dis}able() without an appropriate
    call-back being set, we are likely to encounter a panic.  Avoid this
    by adding suitable checking.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Reviewed-by: Daniel Thompson <daniel.thompson@linaro.org>
    Reviewed-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf40742df9c343c7487de9e3f2b625d67130c13d
Author: Hou Tao <houtao1@huawei.com>
Date:   Tue Oct 8 10:36:37 2019 +0800

    mtd: cfi_cmdset_0002: don't free cfi->cfiq in error path of cfi_amdstd_setup()
    
    [ Upstream commit 03976af89e3bd9489d542582a325892e6a8cacc0 ]
    
    Else there may be a double-free problem, because cfi->cfiq will
    be freed by mtd_do_chip_probe() if both the two invocations of
    check_cmd_set() return failure.
    
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Vignesh Raghavendra <vigneshr@ti.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57f00dfe8bf9dcb864cde9fa5aeedb0f7e605e3f
Author: Stephen Kitt <steve@sk2.org>
Date:   Sat Oct 19 16:06:34 2019 +0200

    clk/ti/adpll: allocate room for terminating null
    
    [ Upstream commit 7f6ac72946b88b89ee44c1c527aa8591ac5ffcbe ]
    
    The buffer allocated in ti_adpll_clk_get_name doesn't account for the
    terminating null. This patch switches to devm_kasprintf to avoid
    overflowing.
    
    Signed-off-by: Stephen Kitt <steve@sk2.org>
    Link: https://lkml.kernel.org/r/20191019140634.15596-1-steve@sk2.org
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e756299cdfc7dd3de72cb46acf836b332b820961
Author: Pan Bian <bianpan2016@163.com>
Date:   Mon Nov 4 23:26:22 2019 +0800

    scsi: fnic: fix use after free
    
    [ Upstream commit ec990306f77fd4c58c3b27cc3b3c53032d6e6670 ]
    
    The memory chunk io_req is released by mempool_free. Accessing
    io_req->start_time will result in a use after free bug. The variable
    start_time is a backup of the timestamp. So, use start_time here to
    avoid use after free.
    
    Link: https://lore.kernel.org/r/1572881182-37664-1-git-send-email-bianpan2016@163.com
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Reviewed-by: Satish Kharat <satishkh@cisco.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3ea082a4cd35726aa131493209118ece70c74d1
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Tue Nov 5 00:56:03 2019 +0300

    PM / devfreq: tegra30: Fix integer overflow on CPU's freq max out
    
    [ Upstream commit 53b4b2aeee26f42cde5ff2a16dd0d8590c51a55a ]
    
    There is another kHz-conversion bug in the code, resulting in integer
    overflow. Although, this time the resulting value is 4294966296 and it's
    close to ULONG_MAX, which is okay in this case.
    
    Reviewed-by: Chanwoo Choi <cw00.choi@samsung.com>
    Tested-by: Peter Geis <pgwipeout@gmail.com>
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Chanwoo Choi <cw00.choi@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f222a2ae4e5a7eff6059977c69c79977792f6b3
Author: Hui Wang <hui.wang@canonical.com>
Date:   Mon Sep 14 14:51:18 2020 +0800

    ALSA: hda/realtek - Couldn't detect Mic if booting with headset plugged
    
    commit 3f74249057827c5f6676c41c18f6be12ce1469ce upstream.
    
    We found a Mic detection issue on many Lenovo laptops, those laptops
    belong to differnt models and they have different audio design like
    internal mic connects to the codec or PCH, they all have this problem,
    the problem is if plugging a headset before powerup/reboot the
    machine, after booting up, the headphone could be detected but Mic
    couldn't. If we plug out and plug in the headset, both headphone and
    Mic could be detected then.
    
    Through debugging we found the codec on those laptops are same, it is
    alc257, and if we don't disable the 3k pulldown in alc256_shutup(),
    the issue will be fixed. So far there is no pop noise or power
    consumption regression on those laptops after this change.
    
    Cc: Kailang Yang <kailang@realtek.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20200914065118.19238-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b74f4a7899c1e0183278e938d9ea471ec8dbca2f
Author: Joakim Tjernlund <joakim.tjernlund@infinera.com>
Date:   Thu Sep 10 10:53:28 2020 +0200

    ALSA: usb-audio: Add delay quirk for H570e USB headsets
    
    commit 315c7ad7a701baba28c628c4c5426b3d9617ceed upstream.
    
    Needs the same delay as H650e
    
    Signed-off-by: Joakim Tjernlund <joakim.tjernlund@infinera.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200910085328.19188-1-joakim.tjernlund@infinera.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e261dc4239ec968d8d79685b9beccacb03c957eb
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Sep 23 17:46:20 2020 +0200

    x86/ioapic: Unbreak check_timer()
    
    commit 86a82ae0b5095ea24c55898a3f025791e7958b21 upstream.
    
    Several people reported in the kernel bugzilla that between v4.12 and v4.13
    the magic which works around broken hardware and BIOSes to find the proper
    timer interrupt delivery mode stopped working for some older affected
    platforms which need to fall back to ExtINT delivery mode.
    
    The reason is that the core code changed to keep track of the masked and
    disabled state of an interrupt line more accurately to avoid the expensive
    hardware operations.
    
    That broke an assumption in i8259_make_irq() which invokes
    
         disable_irq_nosync();
         irq_set_chip_and_handler();
         enable_irq();
    
    Up to v4.12 this worked because enable_irq() unconditionally unmasked the
    interrupt line, but after the state tracking improvements this is not
    longer the case because the IO/APIC uses lazy disabling. So the line state
    is unmasked which means that enable_irq() does not call into the new irq
    chip to unmask it.
    
    In principle this is a shortcoming of the core code, but it's more than
    unclear whether the core code should try to reset state. At least this
    cannot be done unconditionally as that would break other existing use cases
    where the chip type is changed, e.g. when changing the trigger type, but
    the callers expect the state to be preserved.
    
    As the way how check_timer() is switching the delivery modes is truly
    unique, the obvious fix is to simply unmask the i8259 manually after
    changing the mode to ExtINT delivery and switching the irq chip to the
    legacy PIC.
    
    Note, that the fixes tag is not really precise, but identifies the commit
    which broke the assumptions in the IO/APIC and i8259 code and that's the
    kernel version to which this needs to be backported.
    
    Fixes: bf22ff45bed6 ("genirq: Avoid unnecessary low level irq function calls")
    Reported-by: p_c_chan@hotmail.com
    Reported-by: ecm4@mail.com
    Reported-by: perdigao1@yahoo.com
    Reported-by: matzes@users.sourceforge.net
    Reported-by: rvelascog@gmail.com
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: p_c_chan@hotmail.com
    Tested-by: matzes@users.sourceforge.net
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=197769
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d8a897ca590e9966f746ece12985ddd1f0912ed
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Fri Sep 25 21:19:24 2020 -0700

    arch/x86/lib/usercopy_64.c: fix __copy_user_flushcache() cache writeback
    
    commit a1cd6c2ae47ee10ff21e62475685d5b399e2ed4a upstream.
    
    If we copy less than 8 bytes and if the destination crosses a cache
    line, __copy_user_flushcache would invalidate only the first cache line.
    
    This patch makes it invalidate the second cache line as well.
    
    Fixes: 0aed55af88345b ("x86, uaccess: introduce copy_from_iter_flushcache for pmem / cache-bypass operations")
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Dan Williams <dan.j.wiilliams@intel.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jeff Moyer <jmoyer@redhat.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Toshi Kani <toshi.kani@hpe.com>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Matthew Wilcox <mawilcox@microsoft.com>
    Cc: Ross Zwisler <ross.zwisler@linux.intel.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/alpine.LRH.2.02.2009161451140.21915@file01.intranet.prod.int.rdu2.redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd0b8b13a28071c7c1859fc47f686764aadf39dc
Author: Sakari Ailus <sakari.ailus@linux.intel.com>
Date:   Mon Sep 23 11:25:42 2019 -0300

    media: smiapp: Fix error handling at NVM reading
    
    [ Upstream commit a5b1d5413534607b05fb34470ff62bf395f5c8d0 ]
    
    If NVM reading failed, the device was left powered on. Fix that.
    
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e333d66dcca3b92bfb28882b03a39b9f8b854b63
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Oct 23 16:46:59 2019 +0100

    ASoC: kirkwood: fix IRQ error handling
    
    [ Upstream commit 175fc928198236037174e5c5c066fe3c4691903e ]
    
    Propagate the error code from request_irq(), rather than returning
    -EBUSY.
    
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Link: https://lore.kernel.org/r/E1iNIqh-0000tW-EZ@rmk-PC.armlinux.org.uk
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b88379f52483689479fb1923af55130a51f1874
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Thu Oct 17 23:29:53 2019 -0500

    gma/gma500: fix a memory disclosure bug due to uninitialized bytes
    
    [ Upstream commit 57a25a5f754ce27da2cfa6f413cfd366f878db76 ]
    
    `best_clock` is an object that may be sent out. Object `clock`
    contains uninitialized bytes that are copied to `best_clock`,
    which leads to memory disclosure and information leak.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191018042953.31099-1-kjlu@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c850699a3e84a53ec07fc47c29d3a7dcca5a6b9f
Author: Fuqian Huang <huangfq.daxian@gmail.com>
Date:   Fri Sep 27 20:15:44 2019 +0800

    m68k: q40: Fix info-leak in rtc_ioctl
    
    [ Upstream commit 7cf78b6b12fd5550545e4b73b35dca18bd46b44c ]
    
    When the option is RTC_PLL_GET, pll will be copied to userland
    via copy_to_user. pll is initialized using mach_get_rtc_pll indirect
    call and mach_get_rtc_pll is only assigned with function
    q40_get_rtc_pll in arch/m68k/q40/config.c.
    In function q40_get_rtc_pll, the field pll_ctrl is not initialized.
    This will leak uninitialized stack content to userland.
    Fix this by zeroing the uninitialized field.
    
    Signed-off-by: Fuqian Huang <huangfq.daxian@gmail.com>
    Link: https://lore.kernel.org/r/20190927121544.7650-1-huangfq.daxian@gmail.com
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 871ef3ac59ce371c0d5b7f346aafe417aa46ccb2
Author: Balsundar P <balsundar.p@microsemi.com>
Date:   Tue Oct 15 11:51:58 2019 +0530

    scsi: aacraid: fix illegal IO beyond last LBA
    
    [ Upstream commit c86fbe484c10b2cd1e770770db2d6b2c88801c1d ]
    
    The driver fails to handle data when read or written beyond device reported
    LBA, which triggers kernel panic
    
    Link: https://lore.kernel.org/r/1571120524-6037-2-git-send-email-balsundar.p@microsemi.com
    Signed-off-by: Balsundar P <balsundar.p@microsemi.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46961211b097409c50651e0e2d0fc6dbe0c7be73
Author: Jia He <justin.he@arm.com>
Date:   Fri Oct 11 22:09:39 2019 +0800

    mm: fix double page fault on arm64 if PTE_AF is cleared
    
    [ Upstream commit 83d116c53058d505ddef051e90ab27f57015b025 ]
    
    When we tested pmdk unit test [1] vmmalloc_fork TEST3 on arm64 guest, there
    will be a double page fault in __copy_from_user_inatomic of cow_user_page.
    
    To reproduce the bug, the cmd is as follows after you deployed everything:
    make -C src/test/vmmalloc_fork/ TEST_TIME=60m check
    
    Below call trace is from arm64 do_page_fault for debugging purpose:
    [  110.016195] Call trace:
    [  110.016826]  do_page_fault+0x5a4/0x690
    [  110.017812]  do_mem_abort+0x50/0xb0
    [  110.018726]  el1_da+0x20/0xc4
    [  110.019492]  __arch_copy_from_user+0x180/0x280
    [  110.020646]  do_wp_page+0xb0/0x860
    [  110.021517]  __handle_mm_fault+0x994/0x1338
    [  110.022606]  handle_mm_fault+0xe8/0x180
    [  110.023584]  do_page_fault+0x240/0x690
    [  110.024535]  do_mem_abort+0x50/0xb0
    [  110.025423]  el0_da+0x20/0x24
    
    The pte info before __copy_from_user_inatomic is (PTE_AF is cleared):
    [ffff9b007000] pgd=000000023d4f8003, pud=000000023da9b003,
                   pmd=000000023d4b3003, pte=360000298607bd3
    
    As told by Catalin: "On arm64 without hardware Access Flag, copying from
    user will fail because the pte is old and cannot be marked young. So we
    always end up with zeroed page after fork() + CoW for pfn mappings. we
    don't always have a hardware-managed access flag on arm64."
    
    This patch fixes it by calling pte_mkyoung. Also, the parameter is
    changed because vmf should be passed to cow_user_page()
    
    Add a WARN_ON_ONCE when __copy_from_user_inatomic() returns error
    in case there can be some obscure use-case (by Kirill).
    
    [1] https://github.com/pmem/pmdk/tree/master/src/test/vmmalloc_fork
    
    Signed-off-by: Jia He <justin.he@arm.com>
    Reported-by: Yibo Cai <Yibo.Cai@arm.com>
    Reviewed-by: Catalin Marinas <catalin.marinas@arm.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 076cbadde5e1542737ea4080ef9c8a2ccd761e96
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue May 12 14:40:01 2020 +0200

    serial: 8250: Avoid error message on reprobe
    
    commit e0a851fe6b9b619527bd928aa93caaddd003f70c upstream.
    
    If the call to uart_add_one_port() in serial8250_register_8250_port()
    fails, a half-initialized entry in the serial_8250ports[] array is left
    behind.
    
    A subsequent reprobe of the same serial port causes that entry to be
    reused.  Because uart->port.dev is set, uart_remove_one_port() is called
    for the half-initialized entry and bails out with an error message:
    
    bcm2835-aux-uart 3f215040.serial: Removing wrong port: (null) != (ptrval)
    
    The same happens on failure of mctrl_gpio_init() since commit
    4a96895f74c9 ("tty/serial/8250: use mctrl_gpio helpers").
    
    Fix by zeroing the uart->port.dev pointer in the probe error path.
    
    The bug was introduced in v2.6.10 by historical commit befff6f5bf5f
    ("[SERIAL] Add new port registration/unregistration functions."):
    https://git.kernel.org/tglx/history/c/befff6f5bf5f
    
    The commit added an unconditional call to uart_remove_one_port() in
    serial8250_register_port().  In v3.7, commit 835d844d1a28 ("8250_pnp:
    do pnp probe before legacy probe") made that call conditional on
    uart->port.dev which allows me to fix the issue by zeroing that pointer
    in the error path.  Thus, the present commit will fix the problem as far
    back as v3.7 whereas still older versions need to also cherry-pick
    835d844d1a28.
    
    Fixes: 835d844d1a28 ("8250_pnp: do pnp probe before legacy probe")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v2.6.10
    Cc: stable@vger.kernel.org # v2.6.10: 835d844d1a28: 8250_pnp: do pnp probe before legacy
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/b4a072013ee1a1d13ee06b4325afb19bda57ca1b.1589285873.git.lukas@wunner.de
    [iwamatsu: Backported to 4.14, 4.19: adjust context]
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bda84657b269285209e93336227e584e85fa66f4
Author: Mark Gray <mark.d.gray@redhat.com>
Date:   Wed Sep 16 05:19:35 2020 -0400

    geneve: add transport ports in route lookup for geneve
    
    [ Upstream commit 34beb21594519ce64a55a498c2fe7d567bc1ca20 ]
    
    This patch adds transport ports information for route lookup so that
    IPsec can select Geneve tunnel traffic to do encryption. This is
    needed for OVS/OVN IPsec with encrypted Geneve tunnels.
    
    This can be tested by configuring a host-host VPN using an IKE
    daemon and specifying port numbers. For example, for an
    Openswan-type configuration, the following parameters should be
    configured on both hosts and IPsec set up as-per normal:
    
    $ cat /etc/ipsec.conf
    
    conn in
    ...
    left=$IP1
    right=$IP2
    ...
    leftprotoport=udp/6081
    rightprotoport=udp
    ...
    conn out
    ...
    left=$IP1
    right=$IP2
    ...
    leftprotoport=udp
    rightprotoport=udp/6081
    ...
    
    The tunnel can then be setup using "ip" on both hosts (but
    changing the relevant IP addresses):
    
    $ ip link add tun type geneve id 1000 remote $IP2
    $ ip addr add 192.168.0.1/24 dev tun
    $ ip link set tun up
    
    This can then be tested by pinging from $IP1:
    
    $ ping 192.168.0.2
    
    Without this patch the traffic is unencrypted on the wire.
    
    Fixes: 2d07dc79fe04 ("geneve: add initial netdev driver for GENEVE tunnels")
    Signed-off-by: Qiuyu Xiao <qiuyu.xiao.qyx@gmail.com>
    Signed-off-by: Mark Gray <mark.d.gray@redhat.com>
    Reviewed-by: Greg Rose <gvrose8192@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd99058867a267dc98a64c04bcadbbc85c33a384
Author: David Ahern <dsahern@kernel.org>
Date:   Mon Sep 14 21:03:54 2020 -0600

    ipv4: Update exception handling for multipath routes via same device
    
    [ Upstream commit 2fbc6e89b2f1403189e624cabaf73e189c5e50c6 ]
    
    Kfir reported that pmtu exceptions are not created properly for
    deployments where multipath routes use the same device.
    
    After some digging I see 2 compounding problems:
    1. ip_route_output_key_hash_rcu is updating the flowi4_oif *after*
       the route lookup. This is the second use case where this has
       been a problem (the first is related to use of vti devices with
       VRF). I can not find any reason for the oif to be changed after the
       lookup; the code goes back to the start of git. It does not seem
       logical so remove it.
    
    2. fib_lookups for exceptions do not call fib_select_path to handle
       multipath route selection based on the hash.
    
    The end result is that the fib_lookup used to add the exception
    always creates it based using the first leg of the route.
    
    An example topology showing the problem:
    
                     |  host1
                 +------+
                 | eth0 |  .209
                 +------+
                     |
                 +------+
         switch  | br0  |
                 +------+
                     |
           +---------+---------+
           | host2             |  host3
       +------+             +------+
       | eth0 | .250        | eth0 | 192.168.252.252
       +------+             +------+
    
       +-----+             +-----+
       | vti | .2          | vti | 192.168.247.3
       +-----+             +-----+
           \                  /
     =================================
     tunnels
             192.168.247.1/24
    
    for h in host1 host2 host3; do
            ip netns add ${h}
            ip -netns ${h} link set lo up
            ip netns exec ${h} sysctl -wq net.ipv4.ip_forward=1
    done
    
    ip netns add switch
    ip -netns switch li set lo up
    ip -netns switch link add br0 type bridge stp 0
    ip -netns switch link set br0 up
    
    for n in 1 2 3; do
            ip -netns switch link add eth-sw type veth peer name eth-h${n}
            ip -netns switch li set eth-h${n} master br0 up
            ip -netns switch li set eth-sw netns host${n} name eth0
    done
    
    ip -netns host1 addr add 192.168.252.209/24 dev eth0
    ip -netns host1 link set dev eth0 up
    ip -netns host1 route add 192.168.247.0/24 \
            nexthop via 192.168.252.250 dev eth0 nexthop via 192.168.252.252 dev eth0
    
    ip -netns host2 addr add 192.168.252.250/24 dev eth0
    ip -netns host2 link set dev eth0 up
    
    ip -netns host2 addr add 192.168.252.252/24 dev eth0
    ip -netns host3 link set dev eth0 up
    
    ip netns add tunnel
    ip -netns tunnel li set lo up
    ip -netns tunnel li add br0 type bridge
    ip -netns tunnel li set br0 up
    for n in $(seq 11 20); do
            ip -netns tunnel addr add dev br0 192.168.247.${n}/24
    done
    
    for n in 2 3
    do
            ip -netns tunnel link add vti${n} type veth peer name eth${n}
            ip -netns tunnel link set eth${n} mtu 1360 master br0 up
            ip -netns tunnel link set vti${n} netns host${n} mtu 1360 up
            ip -netns host${n} addr add dev vti${n} 192.168.247.${n}/24
    done
    ip -netns tunnel ro add default nexthop via 192.168.247.2 nexthop via 192.168.247.3
    
    ip netns exec host1 ping -M do -s 1400 -c3 -I 192.168.252.209 192.168.247.11
    ip netns exec host1 ping -M do -s 1400 -c3 -I 192.168.252.209 192.168.247.15
    ip -netns host1 ro ls cache
    
    Before this patch the cache always shows exceptions against the first
    leg in the multipath route; 192.168.252.250 per this example. Since the
    hash has an initial random seed, you may need to vary the final octet
    more than what is listed. In my tests, using addresses between 11 and 19
    usually found 1 that used both legs.
    
    With this patch, the cache will have exceptions for both legs.
    
    Fixes: 4895c771c7f0 ("ipv4: Add FIB nexthop exceptions")
    Reported-by: Kfir Itzhak <mastertheknife@gmail.com>
    Signed-off-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bd680ad7be63a69e2f6b47e19d9cab5eca2149a
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Sep 9 01:27:40 2020 -0700

    net: add __must_check to skb_put_padto()
    
    [ Upstream commit 4a009cb04aeca0de60b73f37b102573354214b52 ]
    
    skb_put_padto() and __skb_put_padto() callers
    must check return values or risk use-after-free.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7bb86f6301c5630780300add795f4d62c3c212a
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Sep 16 20:43:09 2020 -0700

    net: phy: Avoid NPD upon phy_detach() when driver is unbound
    
    [ Upstream commit c2b727df7caa33876e7066bde090f40001b6d643 ]
    
    If we have unbound the PHY driver prior to calling phy_detach() (often
    via phy_disconnect()) then we can cause a NULL pointer de-reference
    accessing the driver owner member. The steps to reproduce are:
    
    echo unimac-mdio-0:01 > /sys/class/net/eth0/phydev/driver/unbind
    ip link set eth0 down
    
    Fixes: cafe8df8b9bc ("net: phy: Fix lack of reference count on PHY driver")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fba4bdda3953329e5c0c339dbbad3736f46c7073
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Sun Sep 20 21:08:56 2020 -0400

    bnxt_en: Protect bnxt_set_eee() and bnxt_set_pauseparam() with mutex.
    
    [ Upstream commit a53906908148d64423398a62c4435efb0d09652c ]
    
    All changes related to bp->link_info require the protection of the
    link_lock mutex.  It's not sufficient to rely just on RTNL.
    
    Fixes: 163e9ef63641 ("bnxt_en: Fix race when modifying pause settings.")
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27a6c4d830bb6864bc730350ce562da3f6246300
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5eb2cba74a05a5663fad0d6d63ce2d6923ee4271
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    [ Upstream commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980 ]
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff268159b072f1670ec15ce91d9744fed1363d09
Author: Necip Fazil Yildiran <fazilyildiran@gmail.com>
Date:   Thu Sep 17 19:46:43 2020 +0300

    net: ipv6: fix kconfig dependency warning for IPV6_SEG6_HMAC
    
    [ Upstream commit db7cd91a4be15e1485d6b58c6afc8761c59c4efb ]
    
    When IPV6_SEG6_HMAC is enabled and CRYPTO is disabled, it results in the
    following Kbuild warning:
    
    WARNING: unmet direct dependencies detected for CRYPTO_HMAC
      Depends on [n]: CRYPTO [=n]
      Selected by [y]:
      - IPV6_SEG6_HMAC [=y] && NET [=y] && INET [=y] && IPV6 [=y]
    
    WARNING: unmet direct dependencies detected for CRYPTO_SHA1
      Depends on [n]: CRYPTO [=n]
      Selected by [y]:
      - IPV6_SEG6_HMAC [=y] && NET [=y] && INET [=y] && IPV6 [=y]
    
    WARNING: unmet direct dependencies detected for CRYPTO_SHA256
      Depends on [n]: CRYPTO [=n]
      Selected by [y]:
      - IPV6_SEG6_HMAC [=y] && NET [=y] && INET [=y] && IPV6 [=y]
    
    The reason is that IPV6_SEG6_HMAC selects CRYPTO_HMAC, CRYPTO_SHA1, and
    CRYPTO_SHA256 without depending on or selecting CRYPTO while those configs
    are subordinate to CRYPTO.
    
    Honor the kconfig menu hierarchy to remove kconfig dependency warnings.
    
    Fixes: bf355b8d2c30 ("ipv6: sr: add core files for SR HMAC support")
    Signed-off-by: Necip Fazil Yildiran <fazilyildiran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a14a04f1d02804199e8dc5441cfa3b1f48e0934a
Author: Wei Wang <weiwan@google.com>
Date:   Tue Sep 8 14:09:34 2020 -0700

    ip: fix tos reflection in ack and reset packets
    
    [ Upstream commit ba9e04a7ddf4f22a10e05bf9403db6b97743c7bf ]
    
    Currently, in tcp_v4_reqsk_send_ack() and tcp_v4_send_reset(), we
    echo the TOS value of the received packets in the response.
    However, we do not want to echo the lower 2 ECN bits in accordance
    with RFC 3168 6.1.5 robustness principles.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    
    Signed-off-by: Wei Wang <weiwan@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78c0817e8d49a6b8c7aba8692c505e41d81437f9
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Sep 9 12:46:48 2020 +0300

    hdlc_ppp: add range checks in ppp_cp_parse_cr()
    
    [ Upstream commit 66d42ed8b25b64eb63111a2b8582c5afc8bf1105 ]
    
    There are a couple bugs here:
    1) If opt[1] is zero then this results in a forever loop.  If the value
       is less than 2 then it is invalid.
    2) It assumes that "len" is more than sizeof(valid_accm) or 6 which can
       result in memory corruption.
    
    In the case of LCP_OPTION_ACCM, then  we should check "opt[1]" instead
    of "len" because, if "opt[1]" is less than sizeof(valid_accm) then
    "nak_len" gets out of sync and it can lead to memory corruption in the
    next iterations through the loop.  In case of LCP_OPTION_MAGIC, the
    only valid value for opt[1] is 6, but the code is trying to log invalid
    data so we should only discard the data when "len" is less than 6
    because that leads to a read overflow.
    
    Reported-by: ChenNan Of Chaitin Security Research Lab  <whutchennan@gmail.com>
    Fixes: e022c2f07ae5 ("WAN: new synchronous PPP implementation for generic HDLC.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 994054dcb7a4cbc4a01cdd8291f65aaefe99fa1d
Author: Shamir Rabinovitch <shamir.rabinovitch@oracle.com>
Date:   Thu Sep 24 18:24:49 2020 +0900

    RDMA/ucma: ucma_context reference leak in error path
    
    commit ef95a90ae6f4f21990e1f7ced6719784a409e811 upstream.
    
    Validating input parameters should be done before getting the cm_id
    otherwise it can leak a cm_id reference.
    
    Fixes: 6a21dfc0d0db ("RDMA/ucma: Limit possible option size")
    Signed-off-by: Shamir Rabinovitch <shamir.rabinovitch@oracle.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    [iwamatsu: Backported to 4.4, 4.9 and 4.14: adjust context]
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e100c26733b96a464dbc70405c23395ddcd8dcf3
Author: Ralph Campbell <rcampbell@nvidia.com>
Date:   Fri Sep 18 21:20:24 2020 -0700

    mm/thp: fix __split_huge_pmd_locked() for migration PMD
    
    [ Upstream commit ec0abae6dcdf7ef88607c869bf35a4b63ce1b370 ]
    
    A migrating transparent huge page has to already be unmapped.  Otherwise,
    the page could be modified while it is being copied to a new page and data
    could be lost.  The function __split_huge_pmd() checks for a PMD migration
    entry before calling __split_huge_pmd_locked() leading one to think that
    __split_huge_pmd_locked() can handle splitting a migrating PMD.
    
    However, the code always increments the page->_mapcount and adjusts the
    memory control group accounting assuming the page is mapped.
    
    Also, if the PMD entry is a migration PMD entry, the call to
    is_huge_zero_pmd(*pmd) is incorrect because it calls pmd_pfn(pmd) instead
    of migration_entry_to_pfn(pmd_to_swp_entry(pmd)).  Fix these problems by
    checking for a PMD migration entry.
    
    Fixes: 84c3fc4e9c56 ("mm: thp: check pmd migration entry in common path")
    Signed-off-by: Ralph Campbell <rcampbell@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Reviewed-by: Zi Yan <ziy@nvidia.com>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: John Hubbard <jhubbard@nvidia.com>
    Cc: Alistair Popple <apopple@nvidia.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Jason Gunthorpe <jgg@nvidia.com>
    Cc: Bharata B Rao <bharata@linux.ibm.com>
    Cc: Ben Skeggs <bskeggs@redhat.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: <stable@vger.kernel.org>    [4.14+]
    Link: https://lkml.kernel.org/r/20200903183140.19055-1-rcampbell@nvidia.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0973c5dc3fc66c32af2dfbe13f242ce9650f018e
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Fri Sep 18 21:20:21 2020 -0700

    kprobes: fix kill kprobe which has been marked as gone
    
    [ Upstream commit b0399092ccebd9feef68d4ceb8d6219a8c0caa05 ]
    
    If a kprobe is marked as gone, we should not kill it again.  Otherwise, we
    can disarm the kprobe more than once.  In that case, the statistics of
    kprobe_ftrace_enabled can unbalance which can lead to that kprobe do not
    work.
    
    Fixes: e8386a0cb22f ("kprobes: support probing module __exit function")
    Co-developed-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: "Naveen N . Rao" <naveen.n.rao@linux.ibm.com>
    Cc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200822030055.32383-1-songmuchun@bytedance.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b9b318d259958e08cfd7fcce112ec55d956cc09
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Mon Sep 7 11:55:35 2020 -0700

    KVM: fix memory leak in kvm_io_bus_unregister_dev()
    
    [ Upstream commit f65886606c2d3b562716de030706dfe1bea4ed5e ]
    
    when kmalloc() fails in kvm_io_bus_unregister_dev(), before removing
    the bus, we should iterate over all other devices linked to it and call
    kvm_iodevice_destructor() for them
    
    Fixes: 90db10434b16 ("KVM: kvm_io_bus_unregister_dev() should never fail")
    Cc: stable@vger.kernel.org
    Reported-and-tested-by: syzbot+f196caa45793d6374707@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=f196caa45793d6374707
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20200907185535.233114-1-rkovhaev@gmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 615452e9c1df324e604e2a646851ed37e2378e7c
Author: Sivaprakash Murugesan <sivaprak@codeaurora.org>
Date:   Wed Jul 29 21:00:03 2020 +0530

    phy: qcom-qmp: Use correct values for ipq8074 PCIe Gen2 PHY init
    
    [ Upstream commit afd55e6d1bd35b4b36847869011447a83a81c8e0 ]
    
    There were some problem in ipq8074 Gen2 PCIe phy init sequence.
    
    1. Few register values were wrongly updated in the phy init sequence.
    2. The register QSERDES_RX_SIGDET_CNTRL is a RX tuning parameter
       register which is added in serdes table causing the wrong register
       was getting updated.
    3. Clocks and resets were not added in the phy init.
    
    Fix these to make Gen2 PCIe port on ipq8074 devices to work.
    
    Fixes: eef243d04b2b6 ("phy: qcom-qmp: Add support for IPQ8074")
    Cc: stable@vger.kernel.org
    Co-developed-by: Selvam Sathappan Periakaruppan <speriaka@codeaurora.org>
    Signed-off-by: Selvam Sathappan Periakaruppan <speriaka@codeaurora.org>
    Signed-off-by: Sivaprakash Murugesan <sivaprak@codeaurora.org>
    Link: https://lore.kernel.org/r/1596036607-11877-4-git-send-email-sivaprak@codeaurora.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6d18b980c7393bde64541a0ea9e055c5c9f1550
Author: Mark Salyzyn <salyzyn@android.com>
Date:   Wed Jul 22 04:00:53 2020 -0700

    af_key: pfkey_dump needs parameter validation
    
    commit 37bd22420f856fcd976989f1d4f1f7ad28e1fcac upstream.
    
    In pfkey_dump() dplen and splen can both be specified to access the
    xfrm_address_t structure out of bounds in__xfrm_state_filter_match()
    when it calls addr_match() with the indexes.  Return EINVAL if either
    are out of range.
    
    Signed-off-by: Mark Salyzyn <salyzyn@android.com>
    Cc: netdev@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Cc: kernel-team@android.com
    Cc: Steffen Klassert <steffen.klassert@secunet.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58a3bf85dcaf7394ff36f5a117611377a5a68676
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Sep 23 10:46:37 2020 +0200

    Linux 4.14.199
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/lkml/20200921162035.541285330@linuxfoundation.org/
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c628e244bbb7ab24d87b777bbb5f2dd09e6cf4df
Author: Adam Borowski <kilobyte@angband.pl>
Date:   Tue Oct 9 08:28:03 2018 +0200

    x86/defconfig: Enable CONFIG_USB_XHCI_HCD=y
    
    commit 72a9c673636b779e370983fea08e40f97039b981 upstream.
    
    A spanking new machine I just got has all but one USB ports wired as 3.0.
    Booting defconfig resulted in no keyboard or mouse, which was pretty
    uncool.  Let's enable that -- USB3 is ubiquitous rather than an oddity.
    As 'y' not 'm' -- recovering from initrd problems needs a keyboard.
    
    Also add it to the 32-bit defconfig.
    
    Signed-off-by: Adam Borowski <kilobyte@angband.pl>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-usb@vger.kernel.org
    Link: http://lkml.kernel.org/r/20181009062803.4332-1-kilobyte@angband.pl
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe88e5be1423021da56eb565ce04a9bfb8f1497a
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Tue Sep 8 11:51:06 2020 +1000

    powerpc/dma: Fix dma_map_ops::get_required_mask
    
    commit 437ef802e0adc9f162a95213a3488e8646e5fc03 upstream.
    
    There are 2 problems with it:
      1. "<" vs expected "<<"
      2. the shift number is an IOMMU page number mask, not an address
      mask as the IOMMU page shift is missing.
    
    This did not hit us before f1565c24b596 ("powerpc: use the generic
    dma_ops_bypass mode") because we had additional code to handle bypass
    mask so this chunk (almost?) never executed.However there were
    reports that aacraid does not work with "iommu=nobypass".
    
    After f1565c24b596, aacraid (and probably others which call
    dma_get_required_mask() before setting the mask) was unable to enable
    64bit DMA and fall back to using IOMMU which was known not to work,
    one of the problems is double free of an IOMMU page.
    
    This fixes DMA for aacraid, both with and without "iommu=nobypass" in
    the kernel command line. Verified with "stress-ng -d 4".
    
    Fixes: 6a5c7be5e484 ("powerpc: Override dma_get_required_mask by platform hook and ops")
    Cc: stable@vger.kernel.org # v3.2+
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200908015106.79661-1-aik@ozlabs.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f51ed1515975f302f06986558752e72477c725cb
Author: Quentin Perret <qperret@google.com>
Date:   Wed Sep 16 18:18:25 2020 +0100

    ehci-hcd: Move include to keep CRC stable
    
    commit 29231826f3bd65500118c473fccf31c0cf14dbc0 upstream.
    
    The CRC calculation done by genksyms is triggered when the parser hits
    EXPORT_SYMBOL*() macros. At this point, genksyms recursively expands the
    types of the function parameters, and uses that as the input for the CRC
    calculation. In the case of forward-declared structs, the type expands
    to 'UNKNOWN'. Following this, it appears that the result of the
    expansion of each type is cached somewhere, and seems to be re-used
    when/if the same type is seen again for another exported symbol in the
    same C file.
    
    Unfortunately, this can cause CRC 'stability' issues when a struct
    definition becomes visible in the middle of a C file. For example, let's
    assume code with the following pattern:
    
        struct foo;
    
        int bar(struct foo *arg)
        {
            /* Do work ... */
        }
        EXPORT_SYMBOL_GPL(bar);
    
        /* This contains struct foo's definition */
        #include "foo.h"
    
        int baz(struct foo *arg)
        {
            /* Do more work ... */
        }
        EXPORT_SYMBOL_GPL(baz);
    
    Here, baz's CRC will be computed using the expansion of struct foo that
    was cached after bar's CRC calculation ('UNKOWN' here). But if
    EXPORT_SYMBOL_GPL(bar) is removed from the file (because of e.g. symbol
    trimming using CONFIG_TRIM_UNUSED_KSYMS), struct foo will be expanded
    late, during baz's CRC calculation, which now has visibility over the
    full struct definition, hence resulting in a different CRC for baz.
    
    The proper fix for this certainly is in genksyms, but that will take me
    some time to get right. In the meantime, we have seen one occurrence of
    this in the ehci-hcd code which hits this problem because of the way it
    includes C files halfway through the code together with an unlucky mix
    of symbol trimming.
    
    In order to workaround this, move the include done in ehci-hub.c early
    in ehci-hcd.c, hence making sure the struct definitions are visible to
    the entire file. This improves CRC stability of the ehci-hcd exports
    even when symbol trimming is enabled.
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Link: https://lore.kernel.org/r/20200916171825.3228122-1-qperret@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31eb213213a1d3e1996edc456b0cc7aa512976b1
Author: Tobias Diedrich <tobiasdiedrich@gmail.com>
Date:   Mon Sep 14 19:36:28 2020 +0200

    serial: 8250_pci: Add Realtek 816a and 816b
    
    commit 3c5a87be170aba8ac40982182f812dcff6ed1ad1 upstream.
    
    These serial ports are exposed by the OOB-management-engine on
    RealManage-enabled network cards (e.g. AMD DASH enabled systems using
    Realtek cards).
    
    Because these have 3 BARs, they fail the "num_iomem <= 1" check in
    serial_pci_guess_board.
    
    I've manually checked the two IOMEM regions and BAR 2 doesn't seem to
    respond to reads, but BAR 4 seems to be an MMIO version of the IO ports
    (untested).
    
    With this change, the ports are detected:
    0000:02:00.1: ttyS0 at I/O 0x2200 (irq = 82, base_baud = 115200) is a 16550A
    0000:02:00.2: ttyS1 at I/O 0x2100 (irq = 55, base_baud = 115200) is a 16550A
    
    lspci output:
    02:00.1 0700: 10ec:816a (rev 0e) (prog-if 02 [16550])
            Subsystem: 17aa:5082
            Control: I/O+ Mem+ BusMaster- SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-
            Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast >TAbort+ <TAbort- <MAbort- >SERR- <PERR- INTx-
            Interrupt: pin B routed to IRQ 82
            IOMMU group: 11
            Region 0: I/O ports at 2200 [size=256]
            Region 2: Memory at fd715000 (64-bit, non-prefetchable) [size=4K]
            Region 4: Memory at fd704000 (64-bit, non-prefetchable) [size=16K]
            Capabilities: [40] Power Management version 3
                    Flags: PMEClk- DSI- D1+ D2+ AuxCurrent=375mA PME(D0+,D1+,D2+,D3hot+,D3cold+)
                    Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-
            Capabilities: [50] MSI: Enable- Count=1/1 Maskable- 64bit+
                    Address: 0000000000000000  Data: 0000
            Capabilities: [70] Express (v2) Endpoint, MSI 01
                    DevCap: MaxPayload 128 bytes, PhantFunc 0, Latency L0s unlimited, L1 <64us
                            ExtTag- AttnBtn- AttnInd- PwrInd- RBE+ FLReset- SlotPowerLimit 0.000W
                    DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-
                            RlxdOrd+ ExtTag- PhantFunc- AuxPwr- NoSnoop-
                            MaxPayload 128 bytes, MaxReadReq 512 bytes
                    DevSta: CorrErr+ NonFatalErr- FatalErr- UnsupReq+ AuxPwr+ TransPend-
                    LnkCap: Port #0, Speed 2.5GT/s, Width x1, ASPM L0s L1, Exit Latency L0s unlimited, L1 <64us
                            ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+
                    LnkCtl: ASPM L1 Enabled; RCB 64 bytes, Disabled- CommClk+
                            ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
                    LnkSta: Speed 2.5GT/s (ok), Width x1 (ok)
                            TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
                    DevCap2: Completion Timeout: Range ABCD, TimeoutDis+ NROPrPrP- LTR+
                             10BitTagComp- 10BitTagReq- OBFF Via message/WAKE#, ExtFmt- EETLPPrefix-
                             EmergencyPowerReduction Not Supported, EmergencyPowerReductionInit-
                             FRS- TPHComp- ExtTPHComp-
                             AtomicOpsCap: 32bit- 64bit- 128bitCAS-
                    DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis- LTR- OBFF Disabled,
                             AtomicOpsCtl: ReqEn-
                    LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete- EqualizationPhase1-
                             EqualizationPhase2- EqualizationPhase3- LinkEqualizationRequest-
                             Retimer- 2Retimers- CrosslinkRes: unsupported
            Capabilities: [b0] MSI-X: Enable- Count=4 Masked-
                    Vector table: BAR=4 offset=00000000
                    PBA: BAR=4 offset=00000800
            Capabilities: [d0] Vital Product Data
                    Not readable
            Capabilities: [100 v2] Advanced Error Reporting
                    UESta:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
                    UEMsk:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
                    UESvrt: DLP+ SDES+ TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-
                    CESta:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
                    CEMsk:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
                    AERCap: First Error Pointer: 00, ECRCGenCap+ ECRCGenEn- ECRCChkCap+ ECRCChkEn-
                            MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-
                    HeaderLog: 00000000 00000000 00000000 00000000
            Capabilities: [160 v1] Device Serial Number 00-00-00-00-00-00-00-00
            Capabilities: [170 v1] Latency Tolerance Reporting
                    Max snoop latency: 0ns
                    Max no snoop latency: 0ns
            Capabilities: [178 v1] L1 PM Substates
                    L1SubCap: PCI-PM_L1.2+ PCI-PM_L1.1+ ASPM_L1.2+ ASPM_L1.1+ L1_PM_Substates+
                              PortCommonModeRestoreTime=150us PortTPowerOnTime=150us
                    L1SubCtl1: PCI-PM_L1.2- PCI-PM_L1.1- ASPM_L1.2- ASPM_L1.1-
                               T_CommonMode=0us LTR1.2_Threshold=0ns
                    L1SubCtl2: T_PwrOn=10us
    02:00.2 0700: 10ec:816b (rev 0e)
    [...same...]
    
    Signed-off-by: Tobias Diedrich <tobiasdiedrich@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200914173628.GA22508@yamamaya.is-a-geek.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 328f18b309bea517eeb13952a7631d9a445e4144
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Sep 8 16:27:29 2020 -0700

    Input: i8042 - add Entroware Proteus EL07R4 to nomux and reset lists
    
    commit c4440b8a457779adeec42c5e181cb4016f19ce0f upstream.
    
    The keyboard drops keypresses early during boot unless both the nomux
    and reset quirks are set. Add DMI table entries for this.
    
    BugLink: https://bugzilla.redhat.com/show_bug.cgi?id=1806085
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200907095656.13155-1-hdegoede@redhat.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42035e37d4b1c1728b154b3d6ed78c95fbdffe05
Author: Vincent Huang <vincent.huang@tw.synaptics.com>
Date:   Mon Sep 14 12:19:08 2020 -0700

    Input: trackpoint - add new trackpoint variant IDs
    
    commit 6c77545af100a72bf5e28142b510ba042a17648d upstream.
    
    Add trackpoint variant IDs to allow supported control on Synaptics
    trackpoints.
    
    Signed-off-by: Vincent Huang <vincent.huang@tw.synaptics.com>
    Link: https://lore.kernel.org/r/20200914120327.2592-1-vincent.huang@tw.synaptics.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d09312d17aa85c9f909f2eae1ca6135336ca624
Author: Sunghyun Jin <mcsmonk@gmail.com>
Date:   Thu Sep 3 21:41:16 2020 +0900

    percpu: fix first chunk size calculation for populated bitmap
    
    commit b3b33d3c43bbe0177d70653f4e889c78cc37f097 upstream.
    
    Variable populated, which is a member of struct pcpu_chunk, is used as a
    unit of size of unsigned long.
    However, size of populated is miscounted. So, I fix this minor part.
    
    Fixes: 8ab16c43ea79 ("percpu: change the number of pages marked in the first_chunk pop bitmap")
    Cc: <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Sunghyun Jin <mcsmonk@gmail.com>
    Signed-off-by: Dennis Zhou <dennis@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b4578fec1f45cdcd8a409695bf94b05a02a79ab
Author: Volker Rümelin <vr_qemu@t-online.de>
Date:   Tue Sep 1 15:22:21 2020 +0200

    i2c: i801: Fix resume bug
    
    commit 66d402e2e9455cf0213c42b97f22a0493372d7cc upstream.
    
    On suspend the original host configuration gets restored. The
    resume routine has to undo this, otherwise the SMBus master
    may be left in disabled state or in i2c mode.
    
    [JD: Rebased on v5.8, moved the write into i801_setup_hstcfg.]
    
    Signed-off-by: Volker Rümelin <vr_qemu@t-online.de>
    Signed-off-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d64a22004ad8d9e187123ec8c77f3de267740e3e
Author: Oliver Neukum <oneukum@suse.com>
Date:   Thu Sep 17 12:34:27 2020 +0200

    usblp: fix race between disconnect() and read()
    
    commit 9cdabcb3ef8c24ca3a456e4db7b012befb688e73 upstream.
    
    read() needs to check whether the device has been
    disconnected before it tries to talk to the device.
    
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Reported-by: syzbot+be5b5f86a162a6c281e6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/20200917103427.15740-1-oneukum@suse.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1adfd278d99fd1b46e11cbf1ba54ae91e7b1f0ab
Author: Oliver Neukum <oneukum@suse.com>
Date:   Wed Sep 16 11:40:25 2020 +0200

    USB: UAS: fix disconnect by unplugging a hub
    
    commit 325b008723b2dd31de020e85ab9d2e9aa4637d35 upstream.
    
    The SCSI layer can go into an ugly loop if you ignore that a device is
    gone. You need to report an error in the command rather than in the
    return value of the queue method.
    
    We need to specifically check for ENODEV. The issue goes back to the
    introduction of the driver.
    
    Fixes: 115bb1ffa54c3 ("USB: Add UAS driver")
    Signed-off-by: Oliver Neukum <oneukum@suse.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200916094026.30085-2-oneukum@suse.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf89d982c6b9cf9c21d4e9e5551ba8a40d28d1cf
Author: Penghao <penghao@uniontech.com>
Date:   Mon Sep 7 10:30:26 2020 +0800

    USB: quirks: Add USB_QUIRK_IGNORE_REMOTE_WAKEUP quirk for BYD zhaoxin notebook
    
    commit bcea6dafeeef7d1a6a8320a249aabf981d63b881 upstream.
    
    Add a USB_QUIRK_IGNORE_REMOTE_WAKEUP quirk for the BYD zhaoxin notebook.
    This notebook come with usb touchpad. And we would like to disable
    touchpad wakeup on this notebook by default.
    
    Signed-off-by: Penghao <penghao@uniontech.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200907023026.28189-1-penghao@uniontech.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3225e51bcce4c2ace64b1503a38f4f619efc663a
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Fri Sep 11 19:21:51 2020 +0800

    drm/mediatek: Add missing put_device() call in mtk_hdmi_dt_parse_pdata()
    
    [ Upstream commit 0680a622318b8d657323b94082f4b9a44038dfee ]
    
    if of_find_device_by_node() succeed, mtk_drm_kms_init() doesn't have
    a corresponding put_device(). Thus add jump target to fix the exception
    handling for this function implementation.
    
    Fixes: 8f83f26891e1 ("drm/mediatek: Add HDMI support")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb363443f5b9b72405da9fa8ccae279df5b22500
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Wed Sep 9 16:49:42 2020 +0800

    drm/mediatek: Add exception handing in mtk_drm_probe() if component init fail
    
    [ Upstream commit 64c194c00789889b0f9454f583712f079ba414ee ]
    
    mtk_ddp_comp_init() is called in a loop in mtk_drm_probe(), if it
    fail, previous successive init component is not proccessed.
    
    Thus uninitialize valid component and put their device if component
    init failed.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Chun-Kuang Hu <chunkuang.hu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c423cc8521479b0fa7383981ceb497d824ff9313
Author: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
Date:   Wed Sep 16 15:54:37 2020 +0200

    MIPS: SNI: Fix spurious interrupts
    
    [ Upstream commit b959b97860d0fee8c8f6a3e641d3c2ad76eab6be ]
    
    On A20R machines the interrupt pending bits in cause register need to be
    updated by requesting the chipset to do it. This needs to be done to
    find the interrupt cause and after interrupt service. In
    commit 0b888c7f3a03 ("MIPS: SNI: Convert to new irq_chip functions") the
    function to do after service update got lost, which caused spurious
    interrupts.
    
    Fixes: 0b888c7f3a03 ("MIPS: SNI: Convert to new irq_chip functions")
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db24b901d553c70018ea01d202924f76267d5ba9
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Fri Sep 11 07:57:06 2020 +0900

    fbcon: Fix user font detection test at fbcon_resize().
    
    [ Upstream commit ec0972adecb391a8d8650832263a4790f3bfb4df ]
    
    syzbot is reporting OOB read at fbcon_resize() [1], for
    commit 39b3cffb8cf31117 ("fbcon: prevent user font height or width change
     from causing potential out-of-bounds access") is by error using
    registered_fb[con2fb_map[vc->vc_num]]->fbcon_par->p->userfont (which was
    set to non-zero) instead of fb_display[vc->vc_num].userfont (which remains
    zero for that display).
    
    We could remove tricky userfont flag [2], for we can determine it by
    comparing address of the font data and addresses of built-in font data.
    But since that commit is failing to fix the original OOB read [3], this
    patch keeps the change minimal in case we decide to revert altogether.
    
    [1] https://syzkaller.appspot.com/bug?id=ebcbbb6576958a496500fee9cf7aa83ea00b5920
    [2] https://syzkaller.appspot.com/text?tag=Patch&x=14030853900000
    [3] https://syzkaller.appspot.com/bug?id=6fba8c186d97cf1011ab17660e633b1cc4e080c9
    
    Reported-by: syzbot <syzbot+b38b1ef6edf0c74a8d97@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Fixes: 39b3cffb8cf31117 ("fbcon: prevent user font height or width change from causing potential out-of-bounds access")
    Cc: George Kennedy <george.kennedy@oracle.com>
    Link: https://lore.kernel.org/r/f6e3e611-8704-1263-d163-f52c906a4f06@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cef5836f72009cc0417df2208144eeac0c7b9500
Author: Namhyung Kim <namhyung@kernel.org>
Date:   Tue Sep 15 12:18:19 2020 +0900

    perf test: Free formats for perf pmu parse test
    
    [ Upstream commit d26383dcb2b4b8629fde05270b4e3633be9e3d4b ]
    
    The following leaks were detected by ASAN:
    
      Indirect leak of 360 byte(s) in 9 object(s) allocated from:
        #0 0x7fecc305180e in calloc (/lib/x86_64-linux-gnu/libasan.so.5+0x10780e)
        #1 0x560578f6dce5 in perf_pmu__new_format util/pmu.c:1333
        #2 0x560578f752fc in perf_pmu_parse util/pmu.y:59
        #3 0x560578f6a8b7 in perf_pmu__format_parse util/pmu.c:73
        #4 0x560578e07045 in test__pmu tests/pmu.c:155
        #5 0x560578de109b in run_test tests/builtin-test.c:410
        #6 0x560578de109b in test_and_print tests/builtin-test.c:440
        #7 0x560578de401a in __cmd_test tests/builtin-test.c:661
        #8 0x560578de401a in cmd_test tests/builtin-test.c:807
        #9 0x560578e49354 in run_builtin /home/namhyung/project/linux/tools/perf/perf.c:312
        #10 0x560578ce71a8 in handle_internal_command /home/namhyung/project/linux/tools/perf/perf.c:364
        #11 0x560578ce71a8 in run_argv /home/namhyung/project/linux/tools/perf/perf.c:408
        #12 0x560578ce71a8 in main /home/namhyung/project/linux/tools/perf/perf.c:538
        #13 0x7fecc2b7acc9 in __libc_start_main ../csu/libc-start.c:308
    
    Fixes: cff7f956ec4a1 ("perf tests: Move pmu tests into separate object")
    Signed-off-by: Namhyung Kim <namhyung@kernel.org>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lore.kernel.org/lkml/20200915031819.386559-12-namhyung@kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d250e79a5b7b522f4571f686267ed48074476dbf
Author: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
Date:   Mon Sep 14 18:05:00 2020 +0200

    MIPS: SNI: Fix MIPS_L1_CACHE_SHIFT
    
    [ Upstream commit 564c836fd945a94b5dd46597d6b7adb464092650 ]
    
    Commit 930beb5ac09a ("MIPS: introduce MIPS_L1_CACHE_SHIFT_<N>") forgot
    to select the correct MIPS_L1_CACHE_SHIFT for SNI RM. This breaks non
    coherent DMA because of a wrong allocation alignment.
    
    Fixes: 930beb5ac09a ("MIPS: introduce MIPS_L1_CACHE_SHIFT_<N>")
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f322435ff49af8dbb21c4b1c5832aac96e939c3e
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Sun Sep 13 12:47:29 2020 -0700

    Drivers: hv: vmbus: Add timeout to vmbus_wait_for_unload
    
    [ Upstream commit 911e1987efc8f3e6445955fbae7f54b428b92bd3 ]
    
    vmbus_wait_for_unload() looks for a CHANNELMSG_UNLOAD_RESPONSE message
    coming from Hyper-V.  But if the message isn't found for some reason,
    the panic path gets hung forever.  Add a timeout of 10 seconds to prevent
    this.
    
    Fixes: 415719160de3 ("Drivers: hv: vmbus: avoid scheduling in interrupt context in vmbus_initiate_unload()")
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/1600026449-23651-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 679eadd7b17658664b19faeca9fd7308b84f6f32
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Sun Aug 9 21:40:20 2020 -0700

    clk: rockchip: Fix initialization of mux_pll_src_4plls_p
    
    [ Upstream commit e9c006bc782c488f485ffe50de20b44e1e3daa18 ]
    
    A new warning in Clang points out that the initialization of
    mux_pll_src_4plls_p appears incorrect:
    
    ../drivers/clk/rockchip/clk-rk3228.c:140:58: warning: suspicious
    concatenation of string literals in an array initialization; did you
    mean to separate the elements with a comma? [-Wstring-concatenation]
    PNAME(mux_pll_src_4plls_p)      = { "cpll", "gpll", "hdmiphy" "usb480m" };
                                                                  ^
                                                                 ,
    ../drivers/clk/rockchip/clk-rk3228.c:140:48: note: place parentheses
    around the string literal to silence warning
    PNAME(mux_pll_src_4plls_p)      = { "cpll", "gpll", "hdmiphy" "usb480m" };
                                                        ^
    1 warning generated.
    
    Given the name of the variable and the same variable name in rv1108, it
    seems that this should have been four distinct elements. Fix it up by
    adding the comma as suggested.
    
    Fixes: 307a2e9ac524 ("clk: rockchip: add clock controller for rk3228")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1123
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Link: https://lore.kernel.org/r/20200810044020.2063350-1-natechancellor@gmail.com
    Reviewed-by: Heiko Stübner <heiko@sntech.de>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49ed744e992e83273f8f91702854dc3e3fb8d254
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Sep 10 18:33:51 2020 +0800

    KVM: MIPS: Change the definition of kvm type
    
    [ Upstream commit 15e9e35cd1dec2bc138464de6bf8ef828df19235 ]
    
    MIPS defines two kvm types:
    
     #define KVM_VM_MIPS_TE          0
     #define KVM_VM_MIPS_VZ          1
    
    In Documentation/virt/kvm/api.rst it is said that "You probably want to
    use 0 as machine type", which implies that type 0 be the "automatic" or
    "default" type. And, in user-space libvirt use the null-machine (with
    type 0) to detect the kvm capability, which returns "KVM not supported"
    on a VZ platform.
    
    I try to fix it in QEMU but it is ugly:
    https://lists.nongnu.org/archive/html/qemu-devel/2020-08/msg05629.html
    
    And Thomas Huth suggests me to change the definition of kvm type:
    https://lists.nongnu.org/archive/html/qemu-devel/2020-09/msg03281.html
    
    So I define like this:
    
     #define KVM_VM_MIPS_AUTO        0
     #define KVM_VM_MIPS_VZ          1
     #define KVM_VM_MIPS_TE          2
    
    Since VZ and TE cannot co-exists, using type 0 on a TE platform will
    still return success (so old user-space tools have no problems on new
    kernels); the advantage is that using type 0 on a VZ platform will not
    return failure. So, the only problem is "new user-space tools use type
    2 on old kernels", but if we treat this as a kernel bug, we can backport
    this patch to old stable kernels.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Message-Id: <1599734031-28746-1-git-send-email-chenhc@lemote.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59962fd5d9855375910fb88a8b460f381b2e7896
Author: Gustav Wiklander <gustavwi@axis.com>
Date:   Tue Sep 8 17:11:29 2020 +0200

    spi: Fix memory leak on splited transfers
    
    [ Upstream commit b59a7ca15464c78ea1ba3b280cfc5ac5ece11ade ]
    
    In the prepare_message callback the bus driver has the
    opportunity to split a transfer into smaller chunks.
    spi_map_msg is done after prepare_message.
    
    Function spi_res_release releases the splited transfers
    in the message. Therefore spi_res_release should be called
    after spi_map_msg.
    
    The previous try at this was commit c9ba7a16d0f1
    which released the splited transfers after
    spi_finalize_current_message had been called.
    This introduced a race since the message struct could be
    out of scope because the spi_sync call got completed.
    
    Fixes this leak on spi bus driver spi-bcm2835.c when transfer
    size is greater than 65532:
    
    Kmemleak:
    sg_alloc_table+0x28/0xc8
    spi_map_buf+0xa4/0x300
    __spi_pump_messages+0x370/0x748
    __spi_sync+0x1d4/0x270
    spi_sync+0x34/0x58
    spi_test_execute_msg+0x60/0x340 [spi_loopback_test]
    spi_test_run_iter+0x548/0x578 [spi_loopback_test]
    spi_test_run_test+0x94/0x140 [spi_loopback_test]
    spi_test_run_tests+0x150/0x180 [spi_loopback_test]
    spi_loopback_test_probe+0x50/0xd0 [spi_loopback_test]
    spi_drv_probe+0x84/0xe0
    
    Signed-off-by: Gustav Wiklander <gustavwi@axis.com>
    Link: https://lore.kernel.org/r/20200908151129.15915-1-gustav.wiklander@axis.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adb1d37f1c4e7cf98eb4facd003e9db290ce802b
Author: Evan Nimmo <evan.nimmo@alliedtelesis.co.nz>
Date:   Wed Sep 9 08:32:47 2020 +1200

    i2c: algo: pca: Reapply i2c bus settings after reset
    
    [ Upstream commit 0a355aeb24081e4538d4d424cd189f16c0bbd983 ]
    
    If something goes wrong (such as the SCL being stuck low) then we need
    to reset the PCA chip. The issue with this is that on reset we lose all
    config settings and the chip ends up in a disabled state which results
    in a lock up/high CPU usage. We need to re-apply any configuration that
    had previously been set and re-enable the chip.
    
    Signed-off-by: Evan Nimmo <evan.nimmo@alliedtelesis.co.nz>
    Reviewed-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b011a85399aafd2cae8fa446b4c23780602b75ae
Author: Sahitya Tummala <stummala@codeaurora.org>
Date:   Tue Aug 18 15:40:14 2020 +0530

    f2fs: fix indefinite loop scanning for free nid
    
    [ Upstream commit e2cab031ba7b5003cd12185b3ef38f1a75e3dae8 ]
    
    If the sbi->ckpt->next_free_nid is not NAT block aligned and if there
    are free nids in that NAT block between the start of the block and
    next_free_nid, then those free nids will not be scanned in scan_nat_page().
    This results into mismatch between nm_i->available_nids and the sum of
    nm_i->free_nid_count of all NAT blocks scanned. And nm_i->available_nids
    will always be greater than the sum of free nids in all the blocks.
    Under this condition, if we use all the currently scanned free nids,
    then it will loop forever in f2fs_alloc_nid() as nm_i->available_nids
    is still not zero but nm_i->free_nid_count of that partially scanned
    NAT block is zero.
    
    Fix this to align the nm_i->next_scan_nid to the first nid of the
    corresponding NAT block.
    
    Signed-off-by: Sahitya Tummala <stummala@codeaurora.org>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e39c8e6bf78d21bd8728e097654a6c793003adf
Author: David Milburn <dmilburn@redhat.com>
Date:   Wed Sep 2 17:42:54 2020 -0500

    nvme-fc: cancel async events before freeing event struct
    
    [ Upstream commit e126e8210e950bb83414c4f57b3120ddb8450742 ]
    
    Cancel async event work in case async event has been queued up, and
    nvme_fc_submit_async_event() runs after event has been freed.
    
    Signed-off-by: David Milburn <dmilburn@redhat.com>
    Reviewed-by: Keith Busch <kbusch@kernel.org>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f30404305092d2cdf24c31e5fe3128f5b1012fb8
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Wed Jul 29 01:19:40 2020 +0300

    rapidio: Replace 'select' DMAENGINES 'with depends on'
    
    [ Upstream commit d2b86100245080cfdf1e95e9e07477474c1be2bd ]
    
    Enabling a whole subsystem from a single driver 'select' is frowned
    upon and won't be accepted in new drivers, that need to use 'depends on'
    instead. Existing selection of DMAENGINES will then cause circular
    dependencies. Replace them with a dependency.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2fa4d279343f5ed4c95e5451c80bcc4ab16e509
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Sat Sep 5 10:03:26 2020 -0400

    SUNRPC: stop printk reading past end of string
    
    [ Upstream commit 8c6b6c793ed32b8f9770ebcdf1ba99af423c303b ]
    
    Since p points at raw xdr data, there's no guarantee that it's NULL
    terminated, so we should give a length.  And probably escape any special
    characters too.
    
    Reported-by: Zhi Li <yieli@redhat.com>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee33b3b909e7f1fa22d42f2b5b66a3314ac02b14
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Wed Sep 2 15:23:41 2020 +0200

    spi: spi-loopback-test: Fix out-of-bounds read
    
    [ Upstream commit 837ba18dfcd4db21ad58107c65bfe89753aa56d7 ]
    
    The "tx/rx-transfer - crossing PAGE_SIZE" test always fails when
    len=131071 and rx_offset >= 5:
    
     spi-loopback-test spi0.0: Running test tx/rx-transfer - crossing PAGE_SIZE
     ...
       with iteration values: len = 131071, tx_off = 0, rx_off = 3
       with iteration values: len = 131071, tx_off = 0, rx_off = 4
       with iteration values: len = 131071, tx_off = 0, rx_off = 5
     loopback strangeness - rx changed outside of allowed range at: ...a4321000
       spi_msg@ffffffd5a4157690
         frame_length:  131071
         actual_length: 131071
         spi_transfer@ffffffd5a41576f8
           len:    131071
           tx_buf: ffffffd5a4340ffc
    
    Note that rx_offset > 3 can only occur if the SPI controller driver sets
    ->dma_alignment to a higher value than 4, so most SPI controller drivers
    are not affect.
    
    The allocated Rx buffer is of size SPI_TEST_MAX_SIZE_PLUS, which is 132
    KiB (assuming 4 KiB pages).  This test uses an initial offset into the
    rx_buf of PAGE_SIZE - 4, and a len of 131071, so the range expected to
    be written in this transfer ends at (4096 - 4) + 5 + 131071 == 132 KiB,
    which is also the end of the allocated buffer.  But the code which
    verifies the content of the buffer reads a byte beyond the allocated
    buffer and spuriously fails because this out-of-bounds read doesn't
    return the expected value.
    
    Fix this by using ITERATE_LEN instead of ITERATE_MAX_LEN to avoid
    testing sizes which cause out-of-bounds reads.
    
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Link: https://lore.kernel.org/r/20200902132341.7079-1-vincent.whitchurch@axis.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f4405697e41b0488db23e72ac198fcebe06d9ac
Author: James Smart <james.smart@broadcom.com>
Date:   Fri Aug 28 10:53:30 2020 -0700

    scsi: lpfc: Fix FLOGI/PLOGI receive race condition in pt2pt discovery
    
    [ Upstream commit 7b08e89f98cee9907895fabb64cf437bc505ce9a ]
    
    The driver is unable to successfully login with remote device. During pt2pt
    login, the driver completes its FLOGI request with the remote device having
    WWN precedence.  The remote device issues its own (delayed) FLOGI after
    accepting the driver's and, upon transmitting the FLOGI, immediately
    recognizes it has already processed the driver's FLOGI thus it transitions
    to sending a PLOGI before waiting for an ACC to its FLOGI.
    
    In the driver, the FLOGI is received and an ACC sent, followed by the PLOGI
    being received and an ACC sent. The issue is that the PLOGI reception
    occurs before the response from the adapter from the FLOGI ACC is
    received. Processing of the PLOGI sets state flags to perform the REG_RPI
    mailbox command and proceed with the rest of discovery on the port. The
    same completion routine used by both FLOGI and PLOGI is generic in
    nature. One of the things it does is clear flags, and those flags happen to
    drive the rest of discovery.  So what happened was the PLOGI processing set
    the flags, the FLOGI ACC completion cleared them, thus when the PLOGI ACC
    completes it doesn't see the flags and stops.
    
    Fix by modifying the generic completion routine to not clear the rest of
    discovery flag (NLP_ACC_REGLOGIN) unless the completion is also associated
    with performing a mailbox command as part of its handling.  For things such
    as FLOGI ACC, there isn't a subsequent action to perform with the adapter,
    thus there is no mailbox cmd ptr. PLOGI ACC though will perform REG_RPI
    upon completion, thus there is a mailbox cmd ptr.
    
    Link: https://lore.kernel.org/r/20200828175332.130300-3-james.smart@broadcom.com
    Co-developed-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <james.smart@broadcom.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd4385800bd3f6870ed12adc0127fbf824049ec9
Author: Javed Hasan <jhasan@marvell.com>
Date:   Tue Aug 25 02:39:40 2020 -0700

    scsi: libfc: Fix for double free()
    
    [ Upstream commit 5a5b80f98534416b3b253859897e2ba1dc241e70 ]
    
    Fix for '&fp->skb' double free.
    
    Link:
    https://lore.kernel.org/r/20200825093940.19612-1-jhasan@marvell.com
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75854c309aae515908e68683a03b7466e3850a92
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Aug 23 17:14:53 2020 +0800

    scsi: pm8001: Fix memleak in pm8001_exec_internal_task_abort
    
    [ Upstream commit ea403fde7552bd61bad6ea45e3feb99db77cb31e ]
    
    When pm8001_tag_alloc() fails, task should be freed just like it is done in
    the subsequent error paths.
    
    Link: https://lore.kernel.org/r/20200823091453.4782-1-dinghao.liu@zju.edu.cn
    Acked-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 161f637caef3178314a980b97b5c11ae62378744
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Thu Aug 20 18:52:43 2020 -0400

    NFSv4.1 handle ERR_DELAY error reclaiming locking state on delegation recall
    
    [ Upstream commit 3d7a9520f0c3e6a68b6de8c5812fc8b6d7a52626 ]
    
    A client should be able to handle getting an ERR_DELAY error
    while doing a LOCK call to reclaim state due to delegation being
    recalled. This is a transient error that can happen due to server
    moving its volumes and invalidating its file location cache and
    upon reference to it during the LOCK call needing to do an
    expensive lookup (leading to an ERR_DELAY error on a PUTFH).
    
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7156f594748073a59f52899848c237af9769bc6b
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Thu Aug 20 14:53:14 2020 -0700

    hv_netvsc: Remove "unlikely" from netvsc_select_queue
    
    commit 4d820543c54c47a2bd3c95ddbf52f83c89a219a0 upstream.
    
    When using vf_ops->ndo_select_queue, the number of queues of VF is
    usually bigger than the synthetic NIC. This condition may happen
    often.
    Remove "unlikely" from the comparison of ndev->real_num_tx_queues.
    
    Fixes: b3bf5666a510 ("hv_netvsc: defer queue selection to VF")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07b6d226b04f5de3950ddc40a50ec0acaf84274c
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Sat Aug 15 04:46:41 2020 -0400

    net: handle the return value of pskb_carve_frag_list() correctly
    
    commit eabe861881a733fc84f286f4d5a1ffaddd4f526f upstream.
    
    pskb_carve_frag_list() may return -ENOMEM in pskb_carve_inside_nonlinear().
    we should handle this correctly or we would get wrong sk_buff.
    
    Fixes: 6fa01ccd8830 ("skbuff: Add pskb_extract() helper function")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 289bbb0bdcaac67c5188525c956d9bd75766d2f1
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Fri Jun 5 14:12:34 2020 -0500

    gfs2: initialize transaction tr_ailX_lists earlier
    
    commit cbcc89b630447ec7836aa2b9242d9bb1725f5a61 upstream.
    
    Since transactions may be freed shortly after they're created, before
    a log_flush occurs, we need to initialize their ail1 and ail2 lists
    earlier. Before this patch, the ail1 list was initialized in gfs2_log_flush().
    This moves the initialization to the point when the transaction is first
    created.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Andreas Gruenbacher <agruenba@redhat.com>
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b618e5e39f6e33b7a96c5d7b123709c6f38fd9c3
Author: Peter Oberparleiter <oberpar@linux.ibm.com>
Date:   Thu Sep 10 14:52:01 2020 +0200

    gcov: add support for GCC 10.1
    
    [ Upstream commit 40249c6962075c040fd071339acae524f18bfac9 ]
    
    Using gcov to collect coverage data for kernels compiled with GCC 10.1
    causes random malfunctions and kernel crashes.  This is the result of a
    changed GCOV_COUNTERS value in GCC 10.1 that causes a mismatch between
    the layout of the gcov_info structure created by GCC profiling code and
    the related structure used by the kernel.
    
    Fix this by updating the in-kernel GCOV_COUNTERS value.  Also re-enable
    config GCOV_KERNEL for use with GCC 10.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Reported-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Tested-by: Leon Romanovsky <leonro@nvidia.com>
    Tested-and-Acked-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e998b13d0f19147a076bc6fc9a353816e00fcec
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Sep 4 14:09:18 2020 +0300

    usb: typec: ucsi: acpi: Check the _DEP dependencies
    
    commit 1f3546ff3f0a1000971daef58406954bad3f7061 upstream.
    
    Failing probe with -EPROBE_DEFER until all dependencies
    listed in the _DEP (Operation Region Dependencies) object
    have been met.
    
    This will fix an issue where on some platforms UCSI ACPI
    driver fails to probe because the address space handler for
    the operation region that the UCSI ACPI interface uses has
    not been loaded yet.
    
    Fixes: 8243edf44152 ("usb: typec: ucsi: Add ACPI driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20200904110918.51546-1-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8768672610ca069a6faf36770e2e7b5355bc0cfb
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Tue Sep 1 11:25:28 2020 +0300

    usb: Fix out of sync data toggle if a configured device is reconfigured
    
    commit cfd54fa83a5068b61b7eb28d3c117d8354c74c7a upstream.
    
    Userspace drivers that use a SetConfiguration() request to "lightweight"
    reset an already configured usb device might cause data toggles to get out
    of sync between the device and host, and the device becomes unusable.
    
    The xHCI host requires endpoints to be dropped and added back to reset the
    toggle. If USB core notices the new configuration is the same as the
    current active configuration it will avoid these extra steps by calling
    usb_reset_configuration() instead of usb_set_configuration().
    
    A SetConfiguration() request will reset the device side data toggles.
    Make sure usb_reset_configuration() function also drops and adds back the
    endpoints to ensure data toggles are in sync.
    
    To avoid code duplication split the current usb_disable_device() function
    and reuse the endpoint specific part.
    
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Martin Thierer <mthierer@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200901082528.12557-1-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bead136b700f7f821281204ee38f8a878d6929c1
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Sat Aug 29 11:05:39 2020 +0200

    USB: serial: option: add support for SIM7070/SIM7080/SIM7090 modules
    
    commit 1ac698790819b83f39fd7ea4f6cdabee9bdd7b38 upstream.
    
    These modules have 2 different USB layouts:
    
    The default layout with PID 0x9205 (AT+CUSBSELNV=1) exposes 4 TTYs and
    an ECM interface:
    
      T:  Bus=02 Lev=01 Prnt=01 Port=02 Cnt=01 Dev#=  6 Spd=480 MxCh= 0
      D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
      P:  Vendor=1e0e ProdID=9205 Rev=00.00
      S:  Manufacturer=SimTech, Incorporated
      S:  Product=SimTech SIM7080
      S:  SerialNumber=1234567890ABCDEF
      C:  #Ifs= 6 Cfg#= 1 Atr=e0 MxPwr=500mA
      I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x4 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
      I:  If#=0x5 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    
    The purpose of each TTY is as follows:
     * ttyUSB0: DIAG/QCDM port.
     * ttyUSB1: GNSS data.
     * ttyUSB2: AT-capable port (control).
     * ttyUSB3: AT-capable port (data).
    
    In the secondary layout with PID=0x9206 (AT+CUSBSELNV=86) the module
    exposes 6 TTY ports:
    
      T:  Bus=02 Lev=01 Prnt=01 Port=02 Cnt=01 Dev#=  8 Spd=480 MxCh= 0
      D:  Ver= 2.00 Cls=02(commc) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
      P:  Vendor=1e0e ProdID=9206 Rev=00.00
      S:  Manufacturer=SimTech, Incorporated
      S:  Product=SimTech SIM7080
      S:  SerialNumber=1234567890ABCDEF
      C:  #Ifs= 6 Cfg#= 1 Atr=e0 MxPwr=500mA
      I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
      I:  If#=0x5 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    
    The purpose of each TTY is as follows:
     * ttyUSB0: DIAG/QCDM port.
     * ttyUSB1: GNSS data.
     * ttyUSB2: AT-capable port (control).
     * ttyUSB3: QFLOG interface.
     * ttyUSB4: DAM interface.
     * ttyUSB5: AT-capable port (data).
    
    Signed-off-by: Aleksander Morgado <aleksander@aleksander.es>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47fbc10784ecce533eaa7ee378c5ef288c8d60ec
Author: Bjørn Mork <bjorn@mork.no>
Date:   Sat Aug 29 15:42:50 2020 +0200

    USB: serial: option: support dynamic Quectel USB compositions
    
    commit 2bb70f0a4b238323e4e2f392fc3ddeb5b7208c9e upstream.
    
    The USB composition, defining the set of exported functions, is dynamic
    in newer Quectel modems.  Default functions can be disabled and
    alternative functions can be enabled instead.  The alternatives
    includes class functions using interface pairs, which should be
    handled by the respective class drivers.
    
    Active interfaces are numbered consecutively, so static
    blacklisting based on interface numbers will fail when the
    composition changes.  An example of such an error, where the
    option driver has bound to the CDC ECM data interface,
    preventing cdc_ether from handling this function:
    
     T: Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 2 Spd=480 MxCh= 0
     D: Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs= 1
     P: Vendor=2c7c ProdID=0125 Rev= 3.18
     S: Manufacturer=Quectel
     S: Product=EC25-AF
     C:* #Ifs= 6 Cfg#= 1 Atr=a0 MxPwr=500mA
     A: FirstIf#= 4 IfCount= 2 Cls=02(comm.) Sub=06 Prot=00
     I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
     E: Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
     E: Ad=83(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
     E: Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
     E: Ad=85(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
     E: Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
     E: Ad=87(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
     E: Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 4 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=06 Prot=00 Driver=(none)
     E: Ad=89(I) Atr=03(Int.) MxPS= 16 Ivl=32ms
     I:* If#= 5 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=00 Driver=option
     I: If#= 5 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=option
     E: Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Another device with the same id gets correct drivers, since the
    interface of the network function happens to be blacklisted by option:
    
     T: Bus=01 Lev=02 Prnt=02 Port=01 Cnt=01 Dev#= 3 Spd=480 MxCh= 0
     D: Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs= 1
     P: Vendor=2c7c ProdID=0125 Rev= 3.18
     S: Manufacturer=Android
     S: Product=Android
     C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
     I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
     E: Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
     E: Ad=83(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
     E: Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
     E: Ad=85(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
     E: Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
     E: Ad=87(I) Atr=03(Int.) MxPS= 10 Ivl=32ms
     E: Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
     E: Ad=89(I) Atr=03(Int.) MxPS= 8 Ivl=32ms
     E: Ad=88(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
     E: Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Change rules for EC21, EC25, BG96 and EG95 to match vendor specific
    serial functions only, to prevent binding to class functions. Require
    2 endpoints on ff/ff/ff functions, avoiding the 3 endpoint QMI/RMNET
    network functions.
    
    Cc: AceLan Kao <acelan.kao@canonical.com>
    Cc: Sebastian Sjoholm <ssjoholm@mac.com>
    Cc: Dan Williams <dcbw@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52141634154c0b9fe15ec4959249ebac54b8c9bb
Author: Patrick Riphagen <patrick.riphagen@xsens.com>
Date:   Thu Aug 6 13:55:47 2020 +0200

    USB: serial: ftdi_sio: add IDs for Xsens Mti USB converter
    
    commit 6ccc48e0eb2f3a5f3bd39954a21317e5f8874726 upstream.
    
    The device added has an FTDI chip inside.
    The device is used to connect Xsens USB Motion Trackers.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Patrick Riphagen <patrick.riphagen@xsens.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3031867168b6bdb0fc08e3232f0731029d0241ba
Author: Zeng Tao <prime.zeng@hisilicon.com>
Date:   Fri Sep 4 14:37:44 2020 +0800

    usb: core: fix slab-out-of-bounds Read in read_descriptors
    
    commit a18cd6c9b6bc73dc17e8b7e9bd07decaa8833c97 upstream.
    
    The USB device descriptor may get changed between two consecutive
    enumerations on the same device for some reason, such as DFU or
    malicius device.
    In that case, we may access the changing descriptor if we don't take
    the device lock here.
    
    The issue is reported:
    https://syzkaller.appspot.com/bug?id=901a0d9e6519ef8dc7acab25344bd287dd3c7be9
    
    Cc: stable <stable@vger.kernel.org>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: syzbot+256e56ddde8b8957eabd@syzkaller.appspotmail.com
    Fixes: 217a9081d8e6 ("USB: add all configs to the "descriptors" attribute")
    Signed-off-by: Zeng Tao <prime.zeng@hisilicon.com>
    Link: https://lore.kernel.org/r/1599201467-11000-1-git-send-email-prime.zeng@hisilicon.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de5cbc5f3b755cdf2841e236177a6e8eb3e1190f
Author: Vaibhav Agarwal <vaibhav.sr@gmail.com>
Date:   Fri Aug 14 18:03:15 2020 +0530

    staging: greybus: audio: fix uninitialized value issue
    
    commit 1dffeb8b8b4c261c45416d53c75ea51e6ece1770 upstream.
    
    The current implementation for gbcodec_mixer_dapm_ctl_put() uses
    uninitialized gbvalue for comparison with updated value. This was found
    using static analysis with coverity.
    
    Uninitialized scalar variable (UNINIT)
    11. uninit_use: Using uninitialized value
    gbvalue.value.integer_value[0].
    460        if (gbvalue.value.integer_value[0] != val) {
    
    This patch fixes the issue with fetching the gbvalue before using it for
        comparision.
    
    Fixes: 6339d2322c47 ("greybus: audio: Add topology parser for GB codec")
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Vaibhav Agarwal <vaibhav.sr@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/bc4f29eb502ccf93cd2ffd98db0e319fa7d0f247.1597408126.git.vaibhav.sr@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e8f3335349113e7d5bc41bcf5669e35c027ad4e
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Mon Aug 31 19:37:00 2020 +0900

    video: fbdev: fix OOB read in vga_8planes_imageblit()
    
    commit bd018a6a75cebb511bb55a0e7690024be975fe93 upstream.
    
    syzbot is reporting OOB read at vga_8planes_imageblit() [1], for
    "cdat[y] >> 4" can become a negative value due to "const char *cdat".
    
    [1] https://syzkaller.appspot.com/bug?id=0d7a0da1557dcd1989e00cb3692b26d4173b4132
    
    Reported-by: syzbot <syzbot+69fbd3e01470f169c8c4@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/90b55ec3-d5b0-3307-9f7c-7ff5c5fd6ad3@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b645b8afb6a62e9a580854d7565d2aeee023887
Author: Chris Healy <cphealy@gmail.com>
Date:   Fri Aug 21 14:21:02 2020 -0700

    ARM: dts: vfxxx: Add syscon compatible with OCOTP
    
    commit 2a6838d54128952ace6f0ca166dd8706abe46649 upstream.
    
    Add syscon compatibility with Vybrid OCOTP node. This is required to
    access the UID.
    
    Fixes: fa8d20c8dbb77 ("ARM: dts: vfxxx: Add node corresponding to OCOTP")
    Cc: stable@vger.kernel.org
    Reviewed-by: Fabio Estevam <festevam@gmail.com>
    Reviewed-by: Stefan Agner <stefan@agner.ch>
    Signed-off-by: Chris Healy <cphealy@gmail.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6bb56440af699170696de31484412951b611e340
Author: Wanpeng Li <wanpengli@tencent.com>
Date:   Wed Aug 19 16:55:27 2020 +0800

    KVM: VMX: Don't freeze guest when event delivery causes an APIC-access exit
    
    commit 99b82a1437cb31340dbb2c437a2923b9814a7b15 upstream.
    
    According to SDM 27.2.4, Event delivery causes an APIC-access VM exit.
    Don't report internal error and freeze guest when event delivery causes
    an APIC-access exit, it is handleable and the event will be re-injected
    during the next vmentry.
    
    Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
    Message-Id: <1597827327-25055-2-git-send-email-wanpengli@tencent.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf6f0bc39541a026c85cf5106e6bd194c0e3ff34
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Sep 9 14:53:50 2020 -0700

    vgacon: remove software scrollback support
    
    commit 973c096f6a85e5b5f2a295126ba6928d9a6afd45 upstream.
    
    Yunhai Zhang recently fixed a VGA software scrollback bug in commit
    ebfdfeeae8c0 ("vgacon: Fix for missing check in scrollback handling"),
    but that then made people look more closely at some of this code, and
    there were more problems on the vgacon side, but also the fbcon software
    scrollback.
    
    We don't really have anybody who maintains this code - probably because
    nobody actually _uses_ it any more.  Sure, people still use both VGA and
    the framebuffer consoles, but they are no longer the main user
    interfaces to the kernel, and haven't been for decades, so these kinds
    of extra features end up bitrotting and not really being used.
    
    So rather than try to maintain a likely unused set of code, I'll just
    aggressively remove it, and see if anybody even notices.  Maybe there
    are people who haven't jumped on the whole GUI badnwagon yet, and think
    it's just a fad.  And maybe those people use the scrollback code.
    
    If that turns out to be the case, we can resurrect this again, once
    we've found the sucker^Wmaintainer for it who actually uses it.
    
    Reported-by: NopNop Nop <nopitydays@gmail.com>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Cc: 张云海 <zhangyunhai@nsfocus.com>
    Acked-by: Andy Lutomirski <luto@amacapital.net>
    Acked-by: Willy Tarreau <w@1wt.eu>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3eed1a100ee4919c1ca190df80da46fc59d4928f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 8 10:56:27 2020 -0700

    fbcon: remove now unusued 'softback_lines' cursor() argument
    
    commit 06a0df4d1b8b13b551668e47b11fd7629033b7df upstream.
    
    Since the softscroll code got removed, this argument is always zero and
    makes no sense any more.
    
    Tested-by: Yuan Ming <yuanmingbuaa@gmail.com>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 414f595b12e5b3bb74ef9f6cc8d3717e4f3678e3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Sep 7 11:45:27 2020 -0700

    fbcon: remove soft scrollback code
    
    commit 50145474f6ef4a9c19205b173da6264a644c7489 upstream.
    
    This (and the VGA soft scrollback) turns out to have various nasty small
    special cases that nobody really is willing to fight.  The soft
    scrollback code was really useful a few decades ago when you typically
    used the console interactively as the main way to interact with the
    machine, but that just isn't the case any more.
    
    So it's not worth dragging along.
    
    Tested-by: Yuan Ming <yuanmingbuaa@gmail.com>
    Tested-by: Willy Tarreau <w@1wt.eu>
    Acked-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b04499fd2d30a3c119e542ce278e19c6bbf5387e
Author: Yi Zhang <yi.zhang@redhat.com>
Date:   Thu Aug 20 23:36:46 2020 +0800

    RDMA/rxe: Fix the parent sysfs read when the interface has 15 chars
    
    commit 60b1af64eb35074a4f2d41cc1e503a7671e68963 upstream.
    
    'parent' sysfs reads will yield '\0' bytes when the interface name has 15
    chars, and there will no "\n" output.
    
    To reproduce, create one interface with 15 chars:
    
     [root@test ~]# ip a s enp0s29u1u7u3c2
     2: enp0s29u1u7u3c2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 1000
         link/ether 02:21:28:57:47:17 brd ff:ff:ff:ff:ff:ff
         inet6 fe80::ac41:338f:5bcd:c222/64 scope link noprefixroute
            valid_lft forever preferred_lft forever
     [root@test ~]# modprobe rdma_rxe
     [root@test ~]# echo enp0s29u1u7u3c2 > /sys/module/rdma_rxe/parameters/add
     [root@test ~]# cat /sys/class/infiniband/rxe0/parent
     enp0s29u1u7u3c2[root@test ~]#
     [root@test ~]# f="/sys/class/infiniband/rxe0/parent"
     [root@test ~]# echo "$(<"$f")"
     -bash: warning: command substitution: ignored null byte in input
     enp0s29u1u7u3c2
    
    Use scnprintf and PAGE_SIZE to fill the sysfs output buffer.
    
    Cc: stable@vger.kernel.org
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20200820153646.31316-1-yi.zhang@redhat.com
    Suggested-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Yi Zhang <yi.zhang@redhat.com>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1be774e464b07ecf6edf42b77b79556dfc1d749
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Thu Sep 3 13:24:11 2020 +0200

    rbd: require global CAP_SYS_ADMIN for mapping and unmapping
    
    commit f44d04e696feaf13d192d942c4f14ad2e117065a upstream.
    
    It turns out that currently we rely only on sysfs attribute
    permissions:
    
      $ ll /sys/bus/rbd/{add*,remove*}
      --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/add
      --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/add_single_major
      --w------- 1 root root 4096 Sep  3 20:37 /sys/bus/rbd/remove
      --w------- 1 root root 4096 Sep  3 20:38 /sys/bus/rbd/remove_single_major
    
    This means that images can be mapped and unmapped (i.e. block devices
    can be created and deleted) by a UID 0 process even after it drops all
    privileges or by any process with CAP_DAC_OVERRIDE in its user namespace
    as long as UID 0 is mapped into that user namespace.
    
    Be consistent with other virtual block devices (loop, nbd, dm, md, etc)
    and require CAP_SYS_ADMIN in the initial user namespace for mapping and
    unmapping, and also for dumping the configuration string and refreshing
    the image header.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d747ef6348e60d455d4705705f405baa0e1131d
Author: Hou Pu <houpu@bytedance.com>
Date:   Wed Jul 29 09:03:43 2020 -0400

    scsi: target: iscsi: Fix hang in iscsit_access_np() when getting tpg->np_login_sem
    
    commit ed43ffea78dcc97db3f561da834f1a49c8961e33 upstream.
    
    The iSCSI target login thread might get stuck with the following stack:
    
    cat /proc/`pidof iscsi_np`/stack
    [<0>] down_interruptible+0x42/0x50
    [<0>] iscsit_access_np+0xe3/0x167
    [<0>] iscsi_target_locate_portal+0x695/0x8ac
    [<0>] __iscsi_target_login_thread+0x855/0xb82
    [<0>] iscsi_target_login_thread+0x2f/0x5a
    [<0>] kthread+0xfa/0x130
    [<0>] ret_from_fork+0x1f/0x30
    
    This can be reproduced via the following steps:
    
    1. Initiator A tries to log in to iqn1-tpg1 on port 3260. After finishing
       PDU exchange in the login thread and before the negotiation is finished
       the the network link goes down. At this point A has not finished login
       and tpg->np_login_sem is held.
    
    2. Initiator B tries to log in to iqn2-tpg1 on port 3260. After finishing
       PDU exchange in the login thread the target expects to process remaining
       login PDUs in workqueue context.
    
    3. Initiator A' tries to log in to iqn1-tpg1 on port 3260 from a new
       socket. A' will wait for tpg->np_login_sem with np->np_login_timer
       loaded to wait for at most 15 seconds. The lock is held by A so A'
       eventually times out.
    
    4. Before A' got timeout initiator B gets negotiation failed and calls
       iscsi_target_login_drop()->iscsi_target_login_sess_out().  The
       np->np_login_timer is canceled and initiator A' will hang forever.
       Because A' is now in the login thread, no new login requests can be
       serviced.
    
    Fix this by moving iscsi_stop_login_thread_timer() out of
    iscsi_target_login_sess_out(). Also remove iscsi_np parameter from
    iscsi_target_login_sess_out().
    
    Link: https://lore.kernel.org/r/20200729130343.24976-1-houpu@bytedance.com
    Cc: stable@vger.kernel.org
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Hou Pu <houpu@bytedance.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dbde616ffe617b13b1b27d6deb6f258336fea2cb
Author: Varun Prakash <varun@chelsio.com>
Date:   Tue Aug 25 18:05:10 2020 +0530

    scsi: target: iscsi: Fix data digest calculation
    
    commit 5528d03183fe5243416c706f64b1faa518b05130 upstream.
    
    Current code does not consider 'page_off' in data digest calculation. To
    fix this, add a local variable 'first_sg' and set first_sg.offset to
    sg->offset + page_off.
    
    Link: https://lore.kernel.org/r/1598358910-3052-1-git-send-email-varun@chelsio.com
    Fixes: e48354ce078c ("iscsi-target: Add iSCSI fabric support for target v4.1")
    Cc: <stable@vger.kernel.org>
    Reviewed-by: Mike Christie <michael.christie@oralce.com>
    Signed-off-by: Varun Prakash <varun@chelsio.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab6abe20d03454e4574fd3b59abba62593033ccf
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Aug 12 03:31:36 2020 +0200

    regulator: push allocation in set_consumer_device_supply() out of lock
    
    commit 5c06540165d443c6455123eb48e7f1a9b618ab34 upstream.
    
    Pull regulator_list_mutex into set_consumer_device_supply() and keep
    allocations outside of it. Fourth of the fs_reclaim deadlock case.
    
    Fixes: 45389c47526d ("regulator: core: Add early supply resolution for regulators")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/f0380bdb3d60aeefa9693c4e234d2dcda7e56747.1597195321.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1408c9cede8502cb106593d8503d55c3c1695060
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Sep 14 09:01:04 2020 +0100

    btrfs: fix wrong address when faulting in pages in the search ioctl
    
    commit 1c78544eaa4660096aeb6a57ec82b42cdb3bfe5a upstream.
    
    When faulting in the pages for the user supplied buffer for the search
    ioctl, we are passing only the base address of the buffer to the function
    fault_in_pages_writeable(). This means that after the first iteration of
    the while loop that searches for leaves, when we have a non-zero offset,
    stored in 'sk_offset', we try to fault in a wrong page range.
    
    So fix this by adding the offset in 'sk_offset' to the base address of the
    user supplied buffer when calling fault_in_pages_writeable().
    
    Several users have reported that the applications compsize and bees have
    started to operate incorrectly since commit a48b73eca4ceb9 ("btrfs: fix
    potential deadlock in the search ioctl") was added to stable trees, and
    these applications make heavy use of the search ioctls. This fixes their
    issues.
    
    Link: https://lore.kernel.org/linux-btrfs/632b888d-a3c3-b085-cdf5-f9bb61017d92@lechevalier.se/
    Link: https://github.com/kilobyte/compsize/issues/34
    Fixes: a48b73eca4ceb9 ("btrfs: fix potential deadlock in the search ioctl")
    CC: stable@vger.kernel.org # 4.4+
    Tested-by: A L <mail@lechevalier.se>
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a588683368333661291acdab3a5b74dff976b0d
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Aug 31 10:52:42 2020 -0400

    btrfs: fix lockdep splat in add_missing_dev
    
    commit fccc0007b8dc952c6bc0805cdf842eb8ea06a639 upstream.
    
    Nikolay reported a lockdep splat in generic/476 that I could reproduce
    with btrfs/187.
    
      ======================================================
      WARNING: possible circular locking dependency detected
      5.9.0-rc2+ #1 Tainted: G        W
      ------------------------------------------------------
      kswapd0/100 is trying to acquire lock:
      ffff9e8ef38b6268 (&delayed_node->mutex){+.+.}-{3:3}, at: __btrfs_release_delayed_node.part.0+0x3f/0x330
    
      but task is already holding lock:
      ffffffffa9d74700 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #2 (fs_reclaim){+.+.}-{0:0}:
             fs_reclaim_acquire+0x65/0x80
             slab_pre_alloc_hook.constprop.0+0x20/0x200
             kmem_cache_alloc_trace+0x3a/0x1a0
             btrfs_alloc_device+0x43/0x210
             add_missing_dev+0x20/0x90
             read_one_chunk+0x301/0x430
             btrfs_read_sys_array+0x17b/0x1b0
             open_ctree+0xa62/0x1896
             btrfs_mount_root.cold+0x12/0xea
             legacy_get_tree+0x30/0x50
             vfs_get_tree+0x28/0xc0
             vfs_kern_mount.part.0+0x71/0xb0
             btrfs_mount+0x10d/0x379
             legacy_get_tree+0x30/0x50
             vfs_get_tree+0x28/0xc0
             path_mount+0x434/0xc00
             __x64_sys_mount+0xe3/0x120
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #1 (&fs_info->chunk_mutex){+.+.}-{3:3}:
             __mutex_lock+0x7e/0x7e0
             btrfs_chunk_alloc+0x125/0x3a0
             find_free_extent+0xdf6/0x1210
             btrfs_reserve_extent+0xb3/0x1b0
             btrfs_alloc_tree_block+0xb0/0x310
             alloc_tree_block_no_bg_flush+0x4a/0x60
             __btrfs_cow_block+0x11a/0x530
             btrfs_cow_block+0x104/0x220
             btrfs_search_slot+0x52e/0x9d0
             btrfs_lookup_inode+0x2a/0x8f
             __btrfs_update_delayed_inode+0x80/0x240
             btrfs_commit_inode_delayed_inode+0x119/0x120
             btrfs_evict_inode+0x357/0x500
             evict+0xcf/0x1f0
             vfs_rmdir.part.0+0x149/0x160
             do_rmdir+0x136/0x1a0
             do_syscall_64+0x33/0x40
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #0 (&delayed_node->mutex){+.+.}-{3:3}:
             __lock_acquire+0x1184/0x1fa0
             lock_acquire+0xa4/0x3d0
             __mutex_lock+0x7e/0x7e0
             __btrfs_release_delayed_node.part.0+0x3f/0x330
             btrfs_evict_inode+0x24c/0x500
             evict+0xcf/0x1f0
             dispose_list+0x48/0x70
             prune_icache_sb+0x44/0x50
             super_cache_scan+0x161/0x1e0
             do_shrink_slab+0x178/0x3c0
             shrink_slab+0x17c/0x290
             shrink_node+0x2b2/0x6d0
             balance_pgdat+0x30a/0x670
             kswapd+0x213/0x4c0
             kthread+0x138/0x160
             ret_from_fork+0x1f/0x30
    
      other info that might help us debug this:
    
      Chain exists of:
        &delayed_node->mutex --> &fs_info->chunk_mutex --> fs_reclaim
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(fs_reclaim);
                                     lock(&fs_info->chunk_mutex);
                                     lock(fs_reclaim);
        lock(&delayed_node->mutex);
    
       *** DEADLOCK ***
    
      3 locks held by kswapd0/100:
       #0: ffffffffa9d74700 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
       #1: ffffffffa9d65c50 (shrinker_rwsem){++++}-{3:3}, at: shrink_slab+0x115/0x290
       #2: ffff9e8e9da260e0 (&type->s_umount_key#48){++++}-{3:3}, at: super_cache_scan+0x38/0x1e0
    
      stack backtrace:
      CPU: 1 PID: 100 Comm: kswapd0 Tainted: G        W         5.9.0-rc2+ #1
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.13.0-2.fc32 04/01/2014
      Call Trace:
       dump_stack+0x92/0xc8
       check_noncircular+0x12d/0x150
       __lock_acquire+0x1184/0x1fa0
       lock_acquire+0xa4/0x3d0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       __mutex_lock+0x7e/0x7e0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       ? __btrfs_release_delayed_node.part.0+0x3f/0x330
       ? lock_acquire+0xa4/0x3d0
       ? btrfs_evict_inode+0x11e/0x500
       ? find_held_lock+0x2b/0x80
       __btrfs_release_delayed_node.part.0+0x3f/0x330
       btrfs_evict_inode+0x24c/0x500
       evict+0xcf/0x1f0
       dispose_list+0x48/0x70
       prune_icache_sb+0x44/0x50
       super_cache_scan+0x161/0x1e0
       do_shrink_slab+0x178/0x3c0
       shrink_slab+0x17c/0x290
       shrink_node+0x2b2/0x6d0
       balance_pgdat+0x30a/0x670
       kswapd+0x213/0x4c0
       ? _raw_spin_unlock_irqrestore+0x46/0x60
       ? add_wait_queue_exclusive+0x70/0x70
       ? balance_pgdat+0x670/0x670
       kthread+0x138/0x160
       ? kthread_create_worker_on_cpu+0x40/0x40
       ret_from_fork+0x1f/0x30
    
    This is because we are holding the chunk_mutex when we call
    btrfs_alloc_device, which does a GFP_KERNEL allocation.  We don't want
    to switch that to a GFP_NOFS lock because this is the only place where
    it matters.  So instead use memalloc_nofs_save() around the allocation
    in order to avoid the lockdep splat.
    
    Reported-by: Nikolay Borisov <nborisov@suse.com>
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25e8e4e5c6db31b156f1e46d21641660864a9e52
Author: Qu Wenruo <wqu@suse.com>
Date:   Wed Aug 26 17:26:43 2020 +0800

    btrfs: require only sector size alignment for parent eb bytenr
    
    commit ea57788eb76dc81f6003245427356a1dcd0ac524 upstream.
    
    [BUG]
    A completely sane converted fs will cause kernel warning at balance
    time:
    
      [ 1557.188633] BTRFS info (device sda7): relocating block group 8162107392 flags data
      [ 1563.358078] BTRFS info (device sda7): found 11722 extents
      [ 1563.358277] BTRFS info (device sda7): leaf 7989321728 gen 95 total ptrs 213 free space 3458 owner 2
      [ 1563.358280]        item 0 key (7984947200 169 0) itemoff 16250 itemsize 33
      [ 1563.358281]                extent refs 1 gen 90 flags 2
      [ 1563.358282]                ref#0: tree block backref root 4
      [ 1563.358285]        item 1 key (7985602560 169 0) itemoff 16217 itemsize 33
      [ 1563.358286]                extent refs 1 gen 93 flags 258
      [ 1563.358287]                ref#0: shared block backref parent 7985602560
      [ 1563.358288]                        (parent 7985602560 is NOT ALIGNED to nodesize 16384)
      [ 1563.358290]        item 2 key (7985635328 169 0) itemoff 16184 itemsize 33
      ...
      [ 1563.358995] BTRFS error (device sda7): eb 7989321728 invalid extent inline ref type 182
      [ 1563.358996] ------------[ cut here ]------------
      [ 1563.359005] WARNING: CPU: 14 PID: 2930 at 0xffffffff9f231766
    
    Then with transaction abort, and obviously failed to balance the fs.
    
    [CAUSE]
    That mentioned inline ref type 182 is completely sane, it's
    BTRFS_SHARED_BLOCK_REF_KEY, it's some extra check making kernel to
    believe it's invalid.
    
    Commit 64ecdb647ddb ("Btrfs: add one more sanity check for shared ref
    type") introduced extra checks for backref type.
    
    One of the requirement is, parent bytenr must be aligned to node size,
    which is not correct.
    
    One example is like this:
    
    0       1G  1G+4K               2G 2G+4K
            |   |///////////////////|//|  <- A chunk starts at 1G+4K
                |   |       <- A tree block get reserved at bytenr 1G+4K
    
    Then we have a valid tree block at bytenr 1G+4K, but not aligned to
    nodesize (16K).
    
    Such chunk is not ideal, but current kernel can handle it pretty well.
    We may warn about such tree block in the future, but should not reject
    them.
    
    [FIX]
    Change the alignment requirement from node size alignment to sector size
    alignment.
    
    Also, to make our lives a little easier, also output @iref when
    btrfs_get_extent_inline_ref_type() failed, so we can locate the item
    easier.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=205475
    Fixes: 64ecdb647ddb ("Btrfs: add one more sanity check for shared ref type")
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    [ update comments and messages ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 437c4a64efa37fd1570d66aab472ed78c47baa3a
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Tue Aug 4 07:56:14 2020 -0700

    staging: wlan-ng: fix out of bounds read in prism2sta_probe_usb()
    
    commit fea22e159d51c766ba70473f473a0ec914cc7e92 upstream.
    
    let's use usb_find_common_endpoints() to discover endpoints, it does all
    necessary checks for type and xfer direction
    
    remove memset() in hfa384x_create(), because we now assign endpoints in
    prism2sta_probe_usb() and because create_wlan() uses kzalloc() to
    allocate hfa384x struct before calling hfa384x_create()
    
    Fixes: faaff9765664 ("staging: wlan-ng: properly check endpoint types")
    Reported-and-tested-by: syzbot+22794221ab96b0bab53a@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=22794221ab96b0bab53a
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200804145614.104320-1-rkovhaev@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fe15ec3699d259a79f831dd02b75e4fdae1cacd
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:38 2020 +0100

    iio:accel:mma8452: Fix timestamp alignment and prevent data leak.
    
    commit 89226a296d816727405d3fea684ef69e7d388bd8 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 16 byte u8 array on the stack.  As Lars also noted
    this anti pattern can involve a leak of data to userspace and that
    indeed can happen here.  We close both issues by moving to
    a suitable structure in the iio_priv() data with alignment
    ensured by use of an explicit c structure.  This data is allocated
    with kzalloc so no data can leak appart from previous readings.
    
    The additional forcing of the 8 byte alignment of the timestamp
    is not strictly necessary but makes the code less fragile by
    making this explicit.
    
    Fixes: c7eeea93ac60 ("iio: Add Freescale MMA8452Q 3-axis accelerometer driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Peter Meerwald <pmeerw@pmeerw.net>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 015c13612bb6cd33dd0d006de4248d98cab65bf4
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:40 2020 +0100

    iio:accel:mma7455: Fix timestamp alignment and prevent data leak.
    
    commit 7e5ac1f2206eda414f90c698fe1820dee873394d upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 16 byte u8 array on the stack   As Lars also noted
    this anti pattern can involve a leak of data to userspace and that
    indeed can happen here.  We close both issues by moving to
    a suitable structure in the iio_priv() data with alignment
    ensured by use of an explicit c structure.  This data is allocated
    with kzalloc so no data can leak appart from previous readings.
    
    The force alignment of ts is not strictly necessary in this particularly
    case but does make the code less fragile.
    
    Fixes: a84ef0d181d9 ("iio: accel: add Freescale MMA7455L/MMA7456L 3-axis accelerometer driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 766f2aebc62b30e2030fb59ca41d7d70012c5dac
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:37 2020 +0100

    iio: accel: kxsd9: Fix alignment of local buffer.
    
    commit 95ad67577de4ea08eb8e441394e698aa4addcc0b upstream.
    
    iio_push_to_buffers_with_timestamp assumes 8 byte alignment which
    is not guaranteed by an array of smaller elements.
    
    Note that whilst in this particular case the alignment forcing
    of the ts element is not strictly necessary it acts as good
    documentation.  Doing this where not necessary should cut
    down on the number of cut and paste introduced errors elsewhere.
    
    Fixes: 0427a106a98a ("iio: accel: kxsd9: Add triggered buffer handling")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c7ef404d6689e9bc7d4662b5536eadde208b352
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:43 2020 +0100

    iio:chemical:ccs811: Fix timestamp alignment and prevent data leak.
    
    commit eb1a148ef41d8ae8d9201efc3f1b145976290331 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    The explicit alignment of ts is necessary to ensure consistent
    padding for x86_32 in which the ts would otherwise be 4 byte aligned.
    
    Fixes: 283d26917ad6 ("iio: chemical: ccs811: Add triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Narcisa Ana Maria Vasile <narcisaanamaria12@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98e111bf73c73616b04d89df4964825018ff61e9
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:45 2020 +0100

    iio:light:max44000 Fix timestamp alignment and prevent data leak.
    
    commit 523628852a5f5f34a15252b2634d0498d3cfb347 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 16 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv().
    This data is allocated with kzalloc so no data can leak appart
    from previous readings.
    
    It is necessary to force the alignment of ts to avoid the padding
    on x86_32 being different from 64 bit platorms (it alows for
    4 bytes aligned 8 byte types.
    
    Fixes: 06ad7ea10e2b ("max44000: Initial triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fdbd9683981563928999aedf06addd8de444641
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:49 2020 +0100

    iio:magnetometer:ak8975 Fix alignment and data leak issues.
    
    commit 02ad21cefbac4d89ac443866f25b90449527737b upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    
    This data is allocated with kzalloc so no data can leak apart from
    previous readings.
    
    The explicit alignment of ts is not necessary in this case as by
    coincidence the padding will end up the same, however I consider
    it to make the code less fragile and have included it.
    
    Fixes: bc11ca4a0b84 ("iio:magnetometer:ak8975: triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Gregor Boirie <gregor.boirie@parrot.com>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79e07b8f19585637dcfa7080468840680b09c3a7
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:56 2020 +0100

    iio:adc:ti-adc081c Fix alignment and data leak issues
    
    commit 54f82df2ba86e2a8e9cbf4036d192366e3905c89 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv().
    
    This data is allocated with kzalloc so no data can leak apart
    from previous readings.
    
    The eplicit alignment of ts is necessary to ensure correct padding
    on x86_32 where s64 is only aligned to 4 bytes.
    
    Fixes: 08e05d1fce5c ("ti-adc081c: Initial triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8bdfa615929cc15e136f3009f1ae8270d8f4098c
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:51:03 2020 +0100

    iio:adc:max1118 Fix alignment of timestamp and data leak issues
    
    commit db8f06d97ec284dc018e2e4890d2e5035fde8630 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    
    This data is allocated with kzalloc so no data can leak apart
    from previous readings.
    
    The explicit alignment of ts is necessary to ensure correct padding
    on architectures where s64 is only 4 bytes aligned such as x86_32.
    
    Fixes: a9e9c7153e96 ("iio: adc: add max1117/max1118/max1119 ADC driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Akinobu Mita <akinobu.mita@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95c72452c60149506cd92bd8df727c7a070e9aa8
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:51:02 2020 +0100

    iio:adc:ina2xx Fix timestamp alignment issue.
    
    commit f8cd222feb82ecd82dcf610fcc15186f55f9c2b5 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 32 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak apart from previous readings. The explicit alignment
    isn't technically needed here, but it reduced fragility and avoids
    cut and paste into drivers where it will be needed.
    
    If we want this in older stables will need manual backport due to
    driver reworks.
    
    Fixes: c43a102e67db ("iio: ina2xx: add support for TI INA2xx Power Monitors")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Stefan Brüns <stefan.bruens@rwth-aachen.de>
    Cc: Marc Titinger <mtitinger@baylibre.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84349a12882e2ab992e9d383da28c2aff3246b21
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:57 2020 +0100

    iio:adc:ti-adc084s021 Fix alignment and data leak issues.
    
    commit a661b571e3682705cb402a5cd1e970586a3ec00f upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv().
    
    This data is allocated with kzalloc so no data can leak apart from
    previous readings.
    
    The force alignment of ts is not strictly necessary in this case
    but reduces the fragility of the code.
    
    Fixes: 3691e5a69449 ("iio: adc: add driver for the ti-adc084s021 chip")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Mårten Lindahl <martenli@axis.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4023c0a33da1b33321cfb5ba849d1aa10e4f847d
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:39 2020 +0100

    iio:accel:bmc150-accel: Fix timestamp alignment and prevent data leak.
    
    commit a6f86f724394de3629da63fe5e1b7a4ab3396efe upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 16 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by moving
    to a suitable structure in the iio_priv() data with alignment
    ensured by use of an explicit c structure.  This data is allocated
    with kzalloc so no data can leak appart from previous readings.
    
    Fixes tag is beyond some major refactoring so likely manual backporting
    would be needed to get that far back.
    
    Whilst the force alignment of the ts is not strictly necessary, it
    does make the code less fragile.
    
    Fixes: 3bbec9773389 ("iio: bmc150_accel: add support for hardware fifo")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 916a36ca66113ddefd54843e611f92392661d618
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Wed Jul 22 16:50:48 2020 +0100

    iio:light:ltr501 Fix timestamp alignment issue.
    
    commit 2684d5003490df5398aeafe2592ba9d4a4653998 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    Here we use a structure on the stack.  The driver already did an
    explicit memset so no data leak was possible.
    
    Forced alignment of ts is not strictly necessary but probably makes
    the code slightly less fragile.
    
    Note there has been some rework in this driver of the years, so no
    way this will apply cleanly all the way back.
    
    Fixes: 2690be905123 ("iio: Add Lite-On ltr501 ambient light / proximity sensor driver")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34a27375301356f8501a171b1b5e5cae39b9641e
Author: Maxim Kochetkov <fido_max@inbox.ru>
Date:   Mon Aug 3 08:04:05 2020 +0300

    iio: adc: ti-ads1015: fix conversion when CONFIG_PM is not set
    
    commit e71e6dbe96ac80ac2aebe71a6a942e7bd60e7596 upstream.
    
    To stop conversion ads1015_set_power_state() function call unimplemented
    function __pm_runtime_suspend() from pm_runtime_put_autosuspend()
    if CONFIG_PM is not set.
    In case of CONFIG_PM is not set: __pm_runtime_suspend() returns -ENOSYS,
    so ads1015_read_raw() failed because ads1015_set_power_state() returns an
    error.
    
    If CONFIG_PM is disabled, there is no need to start/stop conversion.
    Fix it by adding return 0 function variant if CONFIG_PM is not set.
    
    Signed-off-by: Maxim Kochetkov <fido_max@inbox.ru>
    Fixes: ecc24e72f437 ("iio: adc: Add TI ADS1015 ADC driver support")
    Tested-by: Maxim Kiselev <bigunclemax@gmail.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit da74a3704135def6f9196eabe57437266d964cbf
Author: Angelo Compagnucci <angelo.compagnucci@gmail.com>
Date:   Tue Sep 1 11:32:18 2020 +0200

    iio: adc: mcp3422: fix locking on error path
    
    [ Upstream commit a139ffa40f0c24b753838b8ef3dcf6ad10eb7854 ]
    
    Reading from the chip should be unlocked on error path else the lock
    could never being released.
    
    Fixes: 07914c84ba30 ("iio: adc: Add driver for Microchip MCP3422/3/4 high resolution ADC")
    Fixes: 3f1093d83d71 ("iio: adc: mcp3422: fix locking scope")
    Acked-by: Jonathan Cameron <jonathan.cameron@huawei.com>
    Signed-off-by: Angelo Compagnucci <angelo.compagnucci@gmail.com>
    Link: https://lore.kernel.org/r/20200901093218.1500845-1-angelo.compagnucci@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73a9974b3fce0401119f4e3c37c97fa846fc42bf
Author: Angelo Compagnucci <angelo.compagnucci@gmail.com>
Date:   Wed Aug 19 09:55:25 2020 +0200

    iio: adc: mcp3422: fix locking scope
    
    commit 3f1093d83d7164e4705e4232ccf76da54adfda85 upstream.
    
    Locking should be held for the entire reading sequence involving setting
    the channel, waiting for the channel switch and reading from the
    channel.
    If not, reading from a channel can result mixing with the reading from
    another channel.
    
    Fixes: 07914c84ba30 ("iio: adc: Add driver for Microchip MCP3422/3/4 high resolution ADC")
    Signed-off-by: Angelo Compagnucci <angelo.compagnucci@gmail.com>
    Link: https://lore.kernel.org/r/20200819075525.1395248-1-angelo.compagnucci@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31026af51d7ca8b121c7d9a7313504ce471aa44a
Author: Leon Romanovsky <leonro@nvidia.com>
Date:   Fri Sep 4 18:58:08 2020 +0300

    gcov: Disable gcov build with GCC 10
    
    [ Upstream commit cfc905f158eaa099d6258031614d11869e7ef71c ]
    
    GCOV built with GCC 10 doesn't initialize n_function variable.  This
    produces different kernel panics as was seen by Colin in Ubuntu and me
    in FC 32.
    
    As a workaround, let's disable GCOV build for broken GCC 10 version.
    
    Link: https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1891288
    Link: https://lore.kernel.org/lkml/20200827133932.3338519-1-leon@kernel.org
    Link: https://lore.kernel.org/lkml/CAHk-=whbijeSdSvx-Xcr0DPMj0BiwhJ+uiNnDSVZcr_h_kg7UA@mail.gmail.com/
    Cc: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 304e1857d6b94599004d09cc77ddd1c67690a67b
Author: Rander Wang <rander.wang@intel.com>
Date:   Wed Sep 2 18:42:18 2020 +0300

    ALSA: hda: fix a runtime pm issue in SOF when integrated GPU is disabled
    
    [ Upstream commit 13774d81f38538c5fa2924bdcdfa509155480fa6 ]
    
    In snd_hdac_device_init pm_runtime_set_active is called to
    increase child_count in parent device. But when it is failed
    to build connection with GPU for one case that integrated
    graphic gpu is disabled, snd_hdac_ext_bus_device_exit will be
    invoked to clean up a HD-audio extended codec base device. At
    this time the child_count of parent is not decreased, which
    makes parent device can't get suspended.
    
    This patch calls pm_runtime_set_suspended to decrease child_count
    in parent device in snd_hdac_device_exit to match with
    snd_hdac_device_init. pm_runtime_set_suspended can make sure that
    it will not decrease child_count if the device is already suspended.
    
    Signed-off-by: Rander Wang <rander.wang@intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Bard Liao <yung-chuan.liao@linux.intel.com>
    Reviewed-by: Guennadi Liakhovetski <guennadi.liakhovetski@linux.intel.com>
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200902154218.1440441-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 49fc3fdd2f3ff5b70710e4bf08a03b86b95b05fa
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Thu Aug 20 17:40:02 2020 +0200

    cpufreq: intel_pstate: Refuse to turn off with HWP enabled
    
    [ Upstream commit 43298db3009f06fe5c69e1ca8b6cfc2565772fa1 ]
    
    After commit f6ebbcf08f37 ("cpufreq: intel_pstate: Implement passive
    mode with HWP enabled") it is possible to change the driver status
    to "off" via sysfs with HWP enabled, which effectively causes the
    driver to unregister itself, but HWP remains active and it forces the
    minimum performance, so even if another cpufreq driver is loaded,
    it will not be able to control the CPU frequency.
    
    For this reason, make the driver refuse to change the status to
    "off" with HWP enabled.
    
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 111d978d43d9d281a7f10eb635815a4e6d247423
Author: Evgeniy Didin <Evgeniy.Didin@synopsys.com>
Date:   Tue Jul 7 18:38:58 2020 +0300

    ARC: [plat-hsdk]: Switch ethernet phy-mode to rgmii-id
    
    [ Upstream commit 26907eb605fbc3ba9dbf888f21d9d8d04471271d ]
    
    HSDK board has Micrel KSZ9031, recent commit
    bcf3440c6dd ("net: phy: micrel: add phy-mode support for the KSZ9031 PHY")
    caused a breakdown of Ethernet.
    Using 'phy-mode = "rgmii"' is not correct because accodring RGMII
    specification it is necessary to have delay on RX (PHY to MAX)
    which is not generated in case of "rgmii".
    Using "rgmii-id" adds necessary delay and solves the issue.
    
    Also adding name of PHY placed on HSDK board.
    
    Signed-off-by: Evgeniy Didin <Evgeniy.Didin@synopsys.com>
    Cc: Eugeniy Paltsev <Eugeniy.Paltsev@synopsys.com>
    Cc: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c165ee2188c44b8696d6353a9ca7f3655550be41
Author: Xie He <xie.he.0141@gmail.com>
Date:   Fri Aug 28 00:07:52 2020 -0700

    drivers/net/wan/hdlc_cisco: Add hard_header_len
    
    [ Upstream commit 1a545ebe380bf4c1433e3c136e35a77764fda5ad ]
    
    This driver didn't set hard_header_len. This patch sets hard_header_len
    for it according to its header_ops->create function.
    
    This driver's header_ops->create function (cisco_hard_header) creates
    a header of (struct hdlc_header), so hard_header_len should be set to
    sizeof(struct hdlc_header).
    
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Acked-by: Krzysztof Halasa <khc@pm.waw.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 442ff23d5336a7ba8f2b78ce17ff3910f8ca8b78
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Mon Aug 24 12:10:33 2020 -0700

    irqchip/eznps: Fix build error for !ARC700 builds
    
    [ Upstream commit 89d29997f103d08264b0685796b420d911658b96 ]
    
    eznps driver is supposed to be platform independent however it ends up
    including stuff from inside arch/arc headers leading to rand config
    build errors.
    
    The quick hack to fix this (proper fix is too much chrun for non active
    user-base) is to add following to nps platform agnostic header.
     - copy AUX_IENABLE from arch/arc header
     - move CTOP_AUX_IACK from arch/arc/plat-eznps/*/**
    
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Link: https://lkml.kernel.org/r/20200824095831.5lpkmkafelnvlpi2@linutronix.de
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6838cd37cca3252672b2d7ed83c40810ba780f4b
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Wed Aug 26 14:12:18 2020 -0700

    xfs: initialize the shortform attr header padding entry
    
    [ Upstream commit 125eac243806e021f33a1fdea3687eccbb9f7636 ]
    
    Don't leak kernel memory contents into the shortform attr fork.
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 56e5a0325c1c8b713808205e6105ee896881a871
Author: Xie He <xie.he.0141@gmail.com>
Date:   Tue Aug 25 20:03:53 2020 -0700

    drivers/net/wan/lapbether: Set network_header before transmitting
    
    [ Upstream commit 91244d108441013b7367b3b4dcc6869998676473 ]
    
    Set the skb's network_header before it is passed to the underlying
    Ethernet device for transmission.
    
    This patch fixes the following issue:
    
    When we use this driver with AF_PACKET sockets, there would be error
    messages of:
       protocol 0805 is buggy, dev (Ethernet interface name)
    printed in the system "dmesg" log.
    
    This is because skbs passed down to the Ethernet device for transmission
    don't have their network_header properly set, and the dev_queue_xmit_nit
    function in net/core/dev.c complains about this.
    
    Reason of setting the network_header to this place (at the end of the
    Ethernet header, and at the beginning of the Ethernet payload):
    
    Because when this driver receives an skb from the Ethernet device, the
    network_header is also set at this place.
    
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b01a4777fe690db72946336985784f6df88c5108
Author: Mohan Kumar <mkumard@nvidia.com>
Date:   Tue Aug 25 10:54:14 2020 +0530

    ALSA: hda: Fix 2 channel swapping for Tegra
    
    [ Upstream commit 216116eae43963c662eb84729507bad95214ca6b ]
    
    The Tegra HDA codec HW implementation has an issue related to not
    swapping the 2 channel Audio Sample Packet(ASP) channel mapping.
    Whatever the FL and FR mapping specified the left channel always
    comes out of left speaker and right channel on right speaker. So
    add condition to disallow the swapping of FL,FR during the playback.
    
    Signed-off-by: Mohan Kumar <mkumard@nvidia.com>
    Acked-by: Sameer Pujar <spujar@nvidia.com>
    Link: https://lore.kernel.org/r/20200825052415.20626-2-mkumard@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb0af1792610550dbd80ee135b10cbc09f7a2c16
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Aug 23 19:29:35 2020 +0800

    firestream: Fix memleak in fs_open
    
    [ Upstream commit 15ac5cdafb9202424206dc5bd376437a358963f9 ]
    
    When make_rate() fails, vcc should be freed just
    like other error paths in fs_open().
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d635ae5ebdb04eb412343d4bef3574c492e69250
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Aug 23 15:23:43 2020 +0800

    NFC: st95hf: Fix memleak in st95hf_in_send_cmd
    
    [ Upstream commit f97c04c316d8fea16dca449fdfbe101fbdfee6a2 ]
    
    When down_killable() fails, skb_resp should be freed
    just like when st95hf_spi_send() fails.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 41dc4e5181dd2982734f9fff6be79c2734688912
Author: Xie He <xie.he.0141@gmail.com>
Date:   Fri Aug 21 14:26:59 2020 -0700

    drivers/net/wan/lapbether: Added needed_tailroom
    
    [ Upstream commit 1ee39c1448c4e0d480c5b390e2db1987561fb5c2 ]
    
    The underlying Ethernet device may request necessary tailroom to be
    allocated by setting needed_tailroom. This driver should also set
    needed_tailroom to request the tailroom needed by the underlying
    Ethernet device to be allocated.
    
    Cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e594252d83ede588eb9c5033f69d27bc3228490c
Author: Hanjun Guo <guohanjun@huawei.com>
Date:   Wed Jul 22 17:54:21 2020 +0800

    dmaengine: acpi: Put the CSRT table after using it
    
    [ Upstream commit 7eb48dd094de5fe0e216b550e73aa85257903973 ]
    
    The acpi_get_table() should be coupled with acpi_put_table() if
    the mapped table is not used at runtime to release the table
    mapping, put the CSRT table buf after using it.
    
    Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
    Link: https://lore.kernel.org/r/1595411661-15936-1-git-send-email-guohanjun@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce0376dda5d7e2876fcd7a917dfeacc1f69603bb
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Thu Jul 9 19:52:32 2020 -0700

    ARC: HSDK: wireup perf irq
    
    [ Upstream commit fe81d927b78c4f0557836661d32e41ebc957b024 ]
    
    Newer version of HSDK aka HSDK-4xD (with dual issue HS48x4 CPU) wired up
    the perf interrupt, so enable that in DT.
    This is OK for old HSDK where this irq is ignored because pct irq is not
    wired up in hardware.
    
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 957cdcd951545896347dc26e3172c30eb049550a
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Aug 26 16:49:19 2020 -0700

    arm64: dts: ns2: Fixed QSPI compatible string
    
    [ Upstream commit 686e0a0c8c61e0e3f55321d0181fece3efd92777 ]
    
    The string was incorrectly defined before from least to most specific,
    swap the compatible strings accordingly.
    
    Fixes: ff73917d38a6 ("ARM64: dts: Add QSPI Device Tree node for NS2")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c47215e4b0eca9915cc432b1f44933c36915f404
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Aug 26 16:45:29 2020 -0700

    ARM: dts: BCM5301X: Fixed QSPI compatible string
    
    [ Upstream commit b793dab8d811e103665d6bddaaea1c25db3776eb ]
    
    The string was incorrectly defined before from least to most
    specific, swap the compatible strings accordingly.
    
    Fixes: 1c8f40650723 ("ARM: dts: BCM5301X: convert to iProc QSPI")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2234fcf654c4efe33c9d554615b07ae28b36112f
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu Aug 27 07:58:41 2020 -0700

    mmc: sdhci-msm: Add retries when all tuning phases are found valid
    
    [ Upstream commit 9d5dcefb7b114d610aeb2371f6a6f119af316e43 ]
    
    As the comments in this patch say, if we tune and find all phases are
    valid it's _almost_ as bad as no phases being found valid.  Probably
    all phases are not really reliable but we didn't detect where the
    unreliable place is.  That means we'll essentially be guessing and
    hoping we get a good phase.
    
    This is not just a problem in theory.  It was causing real problems on
    a real board.  On that board, most often phase 10 is found as the only
    invalid phase, though sometimes 10 and 11 are invalid and sometimes
    just 11.  Some percentage of the time, however, all phases are found
    to be valid.  When this happens, the current logic will decide to use
    phase 11.  Since phase 11 is sometimes found to be invalid, this is a
    bad choice.  Sure enough, when phase 11 is picked we often get mmc
    errors later in boot.
    
    I have seen cases where all phases were found to be valid 3 times in a
    row, so increase the retry count to 10 just to be extra sure.
    
    Fixes: 415b5a75da43 ("mmc: sdhci-msm: Add platform_execute_tuning implementation")
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Veerabhadrarao Badiganti <vbadigan@codeaurora.org>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20200827075809.1.If179abf5ecb67c963494db79c3bc4247d987419b@changeid
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48927340d81c0957ff9daf3c6bedce67dbf84c2d
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Wed Sep 2 15:43:04 2020 +0300

    RDMA/core: Fix reported speed and width
    
    [ Upstream commit 28b0865714b315e318ac45c4fc9156f3d4649646 ]
    
    When the returned speed from __ethtool_get_link_ksettings() is
    SPEED_UNKNOWN this will lead to reporting a wrong speed and width for
    providers that uses ib_get_eth_speed(), fix that by defaulting the
    netdev_speed to SPEED_1000 in case the returned value from
    __ethtool_get_link_ksettings() is SPEED_UNKNOWN.
    
    Fixes: d41861942fc5 ("IB/core: Add generic function to extract IB speed from netdev")
    Link: https://lore.kernel.org/r/20200902124304.170912-1-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f06e00f66021abe6ecd33aa92cdbe4ec96f6ee0c
Author: Luo Jiaxing <luojiaxing@huawei.com>
Date:   Wed Aug 26 15:24:26 2020 +0800

    scsi: libsas: Set data_dir as DMA_NONE if libata marks qc as NODATA
    
    [ Upstream commit 53de092f47ff40e8d4d78d590d95819d391bf2e0 ]
    
    It was discovered that sdparm will fail when attempting to disable write
    cache on a SATA disk connected via libsas.
    
    In the ATA command set the write cache state is controlled through the SET
    FEATURES operation. This is roughly corresponds to MODE SELECT in SCSI and
    the latter command is what is used in the SCSI-ATA translation layer. A
    subtle difference is that a MODE SELECT carries data whereas SET FEATURES
    is defined as a non-data command in ATA.
    
    Set the DMA data direction to DMA_NONE if the requested ATA command is
    identified as non-data.
    
    [mkp: commit desc]
    
    Fixes: fa1c1e8f1ece ("[SCSI] Add SATA support to libsas")
    Link: https://lore.kernel.org/r/1598426666-54544-1-git-send-email-luojiaxing@huawei.com
    Reviewed-by: John Garry <john.garry@huawei.com>
    Reviewed-by: Jason Yan <yanaijie@huawei.com>
    Signed-off-by: Luo Jiaxing <luojiaxing@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19ea9899bf9ce7a0e580d2e58021c9c5f0e6f6a7
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Sun Jul 5 13:43:10 2020 +0300

    RDMA/rxe: Drop pointless checks in rxe_init_ports
    
    [ Upstream commit 6112ef62826e91afbae5446d5d47b38e25f47e3f ]
    
    Both pkey_tbl_len and gid_tbl_len are set in rxe_init_port_param() - so no
    need to check if they aren't set.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20200705104313.283034-2-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Reviewed-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31eb30b2bbcd7ce6968ec61e5ce3ca5fa3a72929
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Aug 19 15:56:32 2020 +0800

    RDMA/rxe: Fix memleak in rxe_mem_init_user
    
    [ Upstream commit e3ddd6067ee62f6e76ebcf61ff08b2c729ae412b ]
    
    When page_address() fails, umem should be freed just like when
    rxe_mem_alloc() fails.
    
    Fixes: 8700e3e7c485 ("Soft RoCE driver")
    Link: https://lore.kernel.org/r/20200819075632.22285-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a432678cd5ee12e4112cae2adc019860395c88a2
Author: Dinh Nguyen <dinguyen@kernel.org>
Date:   Fri Jul 31 10:26:40 2020 -0500

    ARM: dts: socfpga: fix register entry for timer3 on Arria10
    
    [ Upstream commit 0ff5a4812be4ebd4782bbb555d369636eea164f7 ]
    
    Fixes the register address for the timer3 entry on Arria10.
    
    Fixes: 475dc86d08de4 ("arm: dts: socfpga: Add a base DTSI for Altera's Arria10 SOC")
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8207f19c4bee395371b9a80379eaeceafc4ca5bb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Sep 12 13:39:12 2020 +0200

    Linux 4.14.198
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d425a24a02c32ee2ce665f91909df2303458a7
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Aug 26 12:40:06 2020 -0700

    net: disable netpoll on fresh napis
    
    [ Upstream commit 96e97bc07e90f175a8980a22827faf702ca4cb30 ]
    
    napi_disable() makes sure to set the NAPI_STATE_NPSVC bit to prevent
    netpoll from accessing rings before init is complete. However, the
    same is not done for fresh napi instances in netif_napi_add(),
    even though we expect NAPI instances to be added as disabled.
    
    This causes crashes during driver reconfiguration (enabling XDP,
    changing the channel count) - if there is any printk() after
    netif_napi_add() but before napi_enable().
    
    To ensure memory ordering is correct we need to use RCU accessors.
    
    Reported-by: Rob Sherwood <rsher@fb.com>
    Fixes: 2d8bff12699a ("netpoll: Close race condition between poll_one_napi and napi_disable")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6851b3994ca4b76e10d83a12526f9570aa44628f
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bd54cad1205170bb449ec1abfbbedf1fe92180a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Aug 21 14:59:38 2020 +0800

    sctp: not disable bh in the whole sctp_get_port_local()
    
    [ Upstream commit 3106ecb43a05dc3e009779764b9da245a5d082de ]
    
    With disabling bh in the whole sctp_get_port_local(), when
    snum == 0 and too many ports have been used, the do-while
    loop will take the cpu for a long time and cause cpu stuck:
    
      [ ] watchdog: BUG: soft lockup - CPU#11 stuck for 22s!
      [ ] RIP: 0010:native_queued_spin_lock_slowpath+0x4de/0x940
      [ ] Call Trace:
      [ ]  _raw_spin_lock+0xc1/0xd0
      [ ]  sctp_get_port_local+0x527/0x650 [sctp]
      [ ]  sctp_do_bind+0x208/0x5e0 [sctp]
      [ ]  sctp_autobind+0x165/0x1e0 [sctp]
      [ ]  sctp_connect_new_asoc+0x355/0x480 [sctp]
      [ ]  __sctp_connect+0x360/0xb10 [sctp]
    
    There's no need to disable bh in the whole function of
    sctp_get_port_local. So fix this cpu stuck by removing
    local_bh_disable() called at the beginning, and using
    spin_lock_bh() instead.
    
    The same thing was actually done for inet_csk_get_port() in
    Commit ea8add2b1903 ("tcp/dccp: better use of ephemeral
    ports in bind()").
    
    Thanks to Marcelo for pointing the buggy code out.
    
    v1->v2:
      - use cond_resched() to yield cpu to other tasks if needed,
        as Eric noticed.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Ying Xu <yinxu@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45a65bf6639d46967c331725e089288dc255d4fd
Author: Kamil Lorenc <kamil@re-ws.pl>
Date:   Tue Sep 1 10:57:38 2020 +0200

    net: usb: dm9601: Add USB ID of Keenetic Plus DSL
    
    [ Upstream commit a609d0259183a841621f252e067f40f8cc25d6f6 ]
    
    Keenetic Plus DSL is a xDSL modem that uses dm9620 as its USB interface.
    
    Signed-off-by: Kamil Lorenc <kamil@re-ws.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1567d6b8d36fc8424dd566033b27cef136a57939
Author: Paul Moore <paul@paul-moore.com>
Date:   Fri Aug 21 16:34:52 2020 -0400

    netlabel: fix problems with mapping removal
    
    [ Upstream commit d3b990b7f327e2afa98006e7666fb8ada8ed8683 ]
    
    This patch fixes two main problems seen when removing NetLabel
    mappings: memory leaks and potentially extra audit noise.
    
    The memory leaks are caused by not properly free'ing the mapping's
    address selector struct when free'ing the entire entry as well as
    not properly cleaning up a temporary mapping entry when adding new
    address selectors to an existing entry.  This patch fixes both these
    problems such that kmemleak reports no NetLabel associated leaks
    after running the SELinux test suite.
    
    The potentially extra audit noise was caused by the auditing code in
    netlbl_domhsh_remove_entry() being called regardless of the entry's
    validity.  If another thread had already marked the entry as invalid,
    but not removed/free'd it from the list of mappings, then it was
    possible that an additional mapping removal audit record would be
    generated.  This patch fixes this by returning early from the removal
    function when the entry was previously marked invalid.  This change
    also had the side benefit of improving the code by decreasing the
    indentation level of large chunk of code by one (accounting for most
    of the diffstat).
    
    Fixes: 63c416887437 ("netlabel: Add network address selectors to the NetLabel/LSM domain mapping")
    Reported-by: Stephen Smalley <stephen.smalley.work@gmail.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 094f5d75be8b9b3c231a833940fc7f72c1cb0d5f
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Aug 26 12:40:07 2020 -0700

    bnxt: don't enable NAPI until rings are ready
    
    commit 96ecdcc992eb7f468b2cf829b0f5408a1fad4668 upstream.
    
    Netpoll can try to poll napi as soon as napi_enable() is called.
    It crashes trying to access a doorbell which is still NULL:
    
     BUG: kernel NULL pointer dereference, address: 0000000000000000
     CPU: 59 PID: 6039 Comm: ethtool Kdump: loaded Tainted: G S                5.9.0-rc1-00469-g5fd99b5d9950-dirty #26
     RIP: 0010:bnxt_poll+0x121/0x1c0
     Code: c4 20 44 89 e0 5b 5d 41 5c 41 5d 41 5e 41 5f c3 41 8b 86 a0 01 00 00 41 23 85 18 01 00 00 49 8b 96 a8 01 00 00 0d 00 00 00 24 <89> 02
    41 f6 45 77 02 74 cb 49 8b ae d8 01 00 00 31 c0 c7 44 24 1a
      netpoll_poll_dev+0xbd/0x1a0
      __netpoll_send_skb+0x1b2/0x210
      netpoll_send_udp+0x2c9/0x406
      write_ext_msg+0x1d7/0x1f0
      console_unlock+0x23c/0x520
      vprintk_emit+0xe0/0x1d0
      printk+0x58/0x6f
      x86_vector_activate.cold+0xf/0x46
      __irq_domain_activate_irq+0x50/0x80
      __irq_domain_activate_irq+0x32/0x80
      __irq_domain_activate_irq+0x32/0x80
      irq_domain_activate_irq+0x25/0x40
      __setup_irq+0x2d2/0x700
      request_threaded_irq+0xfb/0x160
      __bnxt_open_nic+0x3b1/0x750
      bnxt_open_nic+0x19/0x30
      ethtool_set_channels+0x1ac/0x220
      dev_ethtool+0x11ba/0x2240
      dev_ioctl+0x1cf/0x390
      sock_do_ioctl+0x95/0x130
    
    Reported-by: Rob Sherwood <rsher@fb.com>
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a1934bb72dc58ae086a71484827f7a1a2ddc14e
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Thu Jun 25 11:04:23 2020 -0600

    vfio/pci: Fix SR-IOV VF handling with MMIO blocking
    
    commit ebfa440ce38b7e2e04c3124aa89c8a9f4094cf21 upstream.
    
    SR-IOV VFs do not implement the memory enable bit of the command
    register, therefore this bit is not set in config space after
    pci_enable_device().  This leads to an unintended difference
    between PF and VF in hand-off state to the user.  We can correct
    this by setting the initial value of the memory enable bit in our
    virtualized config space.  There's really no need however to
    ever fault a user on a VF though as this would only indicate an
    error in the user's management of the enable bit, versus a PF
    where the same access could trigger hardware faults.
    
    Fixes: abafbc551fdd ("vfio-pci: Invalidate mmaps and block MMIO access on disabled memory")
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1251a10f0b95ca512b02a0c792617a3c4b90e63
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Wed Apr 22 13:48:11 2020 -0600

    vfio-pci: Invalidate mmaps and block MMIO access on disabled memory
    
    commit abafbc551fddede3e0a08dee1dcde08fc0eb8476 upstream.
    
    Accessing the disabled memory space of a PCI device would typically
    result in a master abort response on conventional PCI, or an
    unsupported request on PCI express.  The user would generally see
    these as a -1 response for the read return data and the write would be
    silently discarded, possibly with an uncorrected, non-fatal AER error
    triggered on the host.  Some systems however take it upon themselves
    to bring down the entire system when they see something that might
    indicate a loss of data, such as this discarded write to a disabled
    memory space.
    
    To avoid this, we want to try to block the user from accessing memory
    spaces while they're disabled.  We start with a semaphore around the
    memory enable bit, where writers modify the memory enable state and
    must be serialized, while readers make use of the memory region and
    can access in parallel.  Writers include both direct manipulation via
    the command register, as well as any reset path where the internal
    mechanics of the reset may both explicitly and implicitly disable
    memory access, and manipulation of the MSI-X configuration, where the
    MSI-X vector table resides in MMIO space of the device.  Readers
    include the read and write file ops to access the vfio device fd
    offsets as well as memory mapped access.  In the latter case, we make
    use of our new vma list support to zap, or invalidate, those memory
    mappings in order to force them to be faulted back in on access.
    
    Our semaphore usage will stall user access to MMIO spaces across
    internal operations like reset, but the user might experience new
    behavior when trying to access the MMIO space while disabled via the
    PCI command register.  Access via read or write while disabled will
    return -EIO and access via memory maps will result in a SIGBUS.  This
    is expected to be compatible with known use cases and potentially
    provides better error handling capabilities than present in the
    hardware, while avoiding the more readily accessible and severe
    platform error responses that might otherwise occur.
    
    Fixes: CVE-2020-12888
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    [Ajay: Regenerated the patch for v4.14]
    Signed-off-by: Ajay Kaher <akaher@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36d74a0bb3bc29038c0864492d968d4420f76637
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Tue Apr 28 13:12:20 2020 -0600

    vfio-pci: Fault mmaps to enable vma tracking
    
    commit 11c4cd07ba111a09f49625f9e4c851d83daf0a22 upstream.
    
    Rather than calling remap_pfn_range() when a region is mmap'd, setup
    a vm_ops handler to support dynamic faulting of the range on access.
    This allows us to manage a list of vmas actively mapping the area that
    we can later use to invalidate those mappings.  The open callback
    invalidates the vma range so that all tracking is inserted in the
    fault handler and removed in the close handler.
    
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    [Ajay: Regenerated the patch for v4.14]
    Signed-off-by: Ajay Kaher <akaher@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0816c495faff4d1f882087fd4c342a89757ea79d
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Tue Apr 28 17:02:24 2020 -0600

    vfio/type1: Support faulting PFNMAP vmas
    
    commit 41311242221e3482b20bfed10fa4d9db98d87016 upstream.
    
    With conversion to follow_pfn(), DMA mapping a PFNMAP range depends on
    the range being faulted into the vma.  Add support to manually provide
    that, in the same way as done on KVM with hva_to_pfn_remapped().
    
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    [Ajay: Regenerated the patch for v4.14]
    Signed-off-by: Ajay Kaher <akaher@vmware.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b88d795ad1bd88d0fe283fe1d05022a40ea10e6d
Author: Jens Axboe <axboe@kernel.dk>
Date:   Mon Aug 31 11:20:02 2020 -0600

    block: ensure bdi->io_pages is always initialized
    
    [ Upstream commit de1b0ee490eafdf65fac9eef9925391a8369f2dc ]
    
    If a driver leaves the limit settings as the defaults, then we don't
    initialize bdi->io_pages. This means that file systems may need to
    work around bdi->io_pages == 0, which is somewhat messy.
    
    Initialize the default value just like we do for ->ra_pages.
    
    Cc: stable@vger.kernel.org
    Fixes: 9491ae4aade6 ("mm: don't cap request size based on read-ahead setting")
    Reported-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be2f9ea2a0d66d6467594d935f767bdeb1f55a87
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Aug 23 16:55:37 2020 +0900

    ALSA; firewire-tascam: exclude Tascam FE-8 from detection
    
    Tascam FE-8 is known to support communication by asynchronous transaction
    only. The support can be implemented in userspace application and
    snd-firewire-ctl-services project has the support. However, ALSA
    firewire-tascam driver is bound to the model.
    
    This commit changes device entries so that the model is excluded. In a
    commit 53b3ffee7885 ("ALSA: firewire-tascam: change device probing
    processing"), I addressed to the concern that version field in
    configuration differs depending on installed firmware. However, as long
    as I checked, the version number is fixed. It's safe to return version
    number back to modalias.
    
    Fixes: 53b3ffee7885 ("ALSA: firewire-tascam: change device probing processing")
    Cc: <stable@vger.kernel.org> # 4.4+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200823075537.56255-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 37083a20289785a199e0abdfcb59261bdcd67a2f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Sep 9 19:03:14 2020 +0200

    Linux 4.14.197
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 571bb387aa0b42709bb0132537f4debc13ca0a00
Author: Himadri Pandya <himadrispandya@gmail.com>
Date:   Thu Aug 27 12:23:55 2020 +0530

    net: usb: Fix uninit-was-stored issue in asix_read_phy_addr()
    
    commit a092b7233f0e000cc6f2c71a49e2ecc6f917a5fc upstream.
    
    The buffer size is 2 Bytes and we expect to receive the same amount of
    data. But sometimes we receive less data and run into uninit-was-stored
    issue upon read. Hence modify the error check on the return value to match
    with the buffer size as a prevention.
    
    Reported-and-tested by: syzbot+a7e220df5a81d1ab400e@syzkaller.appspotmail.com
    Signed-off-by: Himadri Pandya <himadrispandya@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a42ddcbd648bf34a75b67ca17a301dc19d03c77b
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Wed Aug 19 10:46:48 2020 +0200

    cfg80211: regulatory: reject invalid hints
    
    commit 47caf685a6854593348f216e0b489b71c10cbe03 upstream.
    
    Reject invalid hints early in order to not cause a kernel
    WARN later if they're restored to or similar.
    
    Reported-by: syzbot+d451401ffd00a60677ee@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=d451401ffd00a60677ee
    Link: https://lore.kernel.org/r/20200819084648.13956-1-johannes@sipsolutions.net
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b7ec26b8b173614b1204e3b560aa23b3b42fa75
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Fri Sep 4 16:36:13 2020 -0700

    mm/hugetlb: fix a race between hugetlb sysctl handlers
    
    commit 17743798d81238ab13050e8e2833699b54e15467 upstream.
    
    There is a race between the assignment of `table->data` and write value
    to the pointer of `table->data` in the __do_proc_doulongvec_minmax() on
    the other thread.
    
      CPU0:                                 CPU1:
                                            proc_sys_write
      hugetlb_sysctl_handler                  proc_sys_call_handler
      hugetlb_sysctl_handler_common             hugetlb_sysctl_handler
        table->data = &tmp;                       hugetlb_sysctl_handler_common
                                                    table->data = &tmp;
          proc_doulongvec_minmax
            do_proc_doulongvec_minmax           sysctl_head_finish
              __do_proc_doulongvec_minmax         unuse_table
                i = table->data;
                *i = val;  // corrupt CPU1's stack
    
    Fix this by duplicating the `table`, and only update the duplicate of
    it.  And introduce a helper of proc_hugetlb_doulongvec_minmax() to
    simplify the code.
    
    The following oops was seen:
    
        BUG: kernel NULL pointer dereference, address: 0000000000000000
        #PF: supervisor instruction fetch in kernel mode
        #PF: error_code(0x0010) - not-present page
        Code: Bad RIP value.
        ...
        Call Trace:
         ? set_max_huge_pages+0x3da/0x4f0
         ? alloc_pool_huge_page+0x150/0x150
         ? proc_doulongvec_minmax+0x46/0x60
         ? hugetlb_sysctl_handler_common+0x1c7/0x200
         ? nr_hugepages_store+0x20/0x20
         ? copy_fd_bitmaps+0x170/0x170
         ? hugetlb_sysctl_handler+0x1e/0x20
         ? proc_sys_call_handler+0x2f1/0x300
         ? unregister_sysctl_table+0xb0/0xb0
         ? __fd_install+0x78/0x100
         ? proc_sys_write+0x14/0x20
         ? __vfs_write+0x4d/0x90
         ? vfs_write+0xef/0x240
         ? ksys_write+0xc0/0x160
         ? __ia32_sys_read+0x50/0x50
         ? __close_fd+0x129/0x150
         ? __x64_sys_write+0x43/0x50
         ? do_syscall_64+0x6c/0x200
         ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: e5ff215941d5 ("hugetlb: multiple hstates for multiple page sizes")
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/20200828031146.43035-1-songmuchun@bytedance.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2c81e24f21f3ae3636e382468b619270eb413ea
Author: Mrinal Pandey <mrinalmni@gmail.com>
Date:   Fri Sep 4 16:35:52 2020 -0700

    checkpatch: fix the usage of capture group ( ... )
    
    commit 13e45417cedbfc44b1926124b1846f5ee8c6ba4a upstream.
    
    The usage of "capture group (...)" in the immediate condition after `&&`
    results in `$1` being uninitialized.  This issues a warning "Use of
    uninitialized value $1 in regexp compilation at ./scripts/checkpatch.pl
    line 2638".
    
    I noticed this bug while running checkpatch on the set of commits from
    v5.7 to v5.8-rc1 of the kernel on the commits with a diff content in
    their commit message.
    
    This bug was introduced in the script by commit e518e9a59ec3
    ("checkpatch: emit an error when there's a diff in a changelog").  It
    has been in the script since then.
    
    The author intended to store the match made by capture group in variable
    `$1`.  This should have contained the name of the file as `[\w/]+`
    matched.  However, this couldn't be accomplished due to usage of capture
    group and `$1` in the same regular expression.
    
    Fix this by placing the capture group in the condition before `&&`.
    Thus, `$1` can be initialized to the text that capture group matches
    thereby setting it to the desired and required value.
    
    Fixes: e518e9a59ec3 ("checkpatch: emit an error when there's a diff in a changelog")
    Signed-off-by: Mrinal Pandey <mrinalmni@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Tested-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Reviewed-by: Lukas Bulwahn <lukas.bulwahn@gmail.com>
    Cc: Joe Perches <joe@perches.com>
    Link: https://lkml.kernel.org/r/20200714032352.f476hanaj2dlmiot@mrinalpandey
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72c91ba6820fe6a4eeee4258e48f49b6dcbee5c2
Author: James Morse <james.morse@arm.com>
Date:   Fri Sep 4 12:24:37 2020 +0100

    KVM: arm64: Set HCR_EL2.PTW to prevent AT taking synchronous exception
    
    commit 71a7f8cb1ca4ca7214a700b1243626759b6c11d4 upstream.
    
    AT instructions do a translation table walk and return the result, or
    the fault in PAR_EL1. KVM uses these to find the IPA when the value is
    not provided by the CPU in HPFAR_EL1.
    
    If a translation table walk causes an external abort it is taken as an
    exception, even if it was due to an AT instruction. (DDI0487F.a's D5.2.11
    "Synchronous faults generated by address translation instructions")
    
    While we previously made KVM resilient to exceptions taken due to AT
    instructions, the device access causes mismatched attributes, and may
    occur speculatively. Prevent this, by forbidding a walk through memory
    described as device at stage2. Now such AT instructions will report a
    stage2 fault.
    
    Such a fault will cause KVM to restart the guest. If the AT instructions
    always walk the page tables, but guest execution uses the translation cached
    in the TLB, the guest can't make forward progress until the TLB entry is
    evicted. This isn't a problem, as since commit 5dcd0fdbb492 ("KVM: arm64:
    Defer guest entry when an asynchronous exception is pending"), KVM will
    return to the host to process IRQs allowing the rest of the system to keep
    running.
    
    Cc: stable@vger.kernel.org # v4.14
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bace364a2ca4e2e3ebe2b06d770bdead2cbf471
Author: James Morse <james.morse@arm.com>
Date:   Fri Sep 4 12:24:36 2020 +0100

    KVM: arm64: Survive synchronous exceptions caused by AT instructions
    
    commit 88a84ccccb3966bcc3f309cdb76092a9892c0260 upstream.
    
    KVM doesn't expect any synchronous exceptions when executing, any such
    exception leads to a panic(). AT instructions access the guest page
    tables, and can cause a synchronous external abort to be taken.
    
    The arm-arm is unclear on what should happen if the guest has configured
    the hardware update of the access-flag, and a memory type in TCR_EL1 that
    does not support atomic operations. B2.2.6 "Possible implementation
    restrictions on using atomic instructions" from DDI0487F.a lists
    synchronous external abort as a possible behaviour of atomic instructions
    that target memory that isn't writeback cacheable, but the page table
    walker may behave differently.
    
    Make KVM robust to synchronous exceptions caused by AT instructions.
    Add a get_user() style helper for AT instructions that returns -EFAULT
    if an exception was generated.
    
    While KVM's version of the exception table mixes synchronous and
    asynchronous exceptions, only one of these can occur at each location.
    
    Re-enter the guest when the AT instructions take an exception on the
    assumption the guest will take the same exception. This isn't guaranteed
    to make forward progress, as the AT instructions may always walk the page
    tables, but guest execution may use the translation cached in the TLB.
    
    This isn't a problem, as since commit 5dcd0fdbb492 ("KVM: arm64: Defer guest
    entry when an asynchronous exception is pending"), KVM will return to the
    host to process IRQs allowing the rest of the system to keep running.
    
    Cc: stable@vger.kernel.org # v4.14
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 238026c8a9c8ff5abf1f37046025b91638dfa18c
Author: James Morse <james.morse@arm.com>
Date:   Fri Sep 4 12:24:35 2020 +0100

    KVM: arm64: Defer guest entry when an asynchronous exception is pending
    
    commit 5dcd0fdbb492d49dac6bf21c436dfcb5ded0a895 upstream.
    
    SError that occur during world-switch's entry to the guest will be
    accounted to the guest, as the exception is masked until we enter the
    guest... but we want to attribute the SError as precisely as possible.
    
    Reading DISR_EL1 before guest entry requires free registers, and using
    ESB+DISR_EL1 to consume and read back the ESR would leave KVM holding
    a host SError... We would rather leave the SError pending and let the
    host take it once we exit world-switch. To do this, we need to defer
    guest-entry if an SError is pending.
    
    Read the ISR to see if SError (or an IRQ) is pending. If so fake an
    exit. Place this check between __guest_enter()'s save of the host
    registers, and restore of the guest's. SError that occur between
    here and the eret into the guest must have affected the guest's
    registers, which we can naturally attribute to the guest.
    
    The dsb is needed to ensure any previous writes have been done before
    we read ISR_EL1. On systems without the v8.2 RAS extensions this
    doesn't give us anything as we can't contain errors, and the ESR bits
    to describe the severity are all implementation-defined. Replace
    this with a nop for these systems.
    
    v4.14-backport: as this kernel version doesn't have the RAS support at
    all, remove the RAS alternative.
    
    Cc: stable@vger.kernel.org # v4.14
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    [ James: Removed v8.2 RAS related barriers ]
    Signed-off-by: James Morse <james.morse@arm.com>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ef12888a472630613a27af117abc67b0b9c4147
Author: James Morse <james.morse@arm.com>
Date:   Fri Sep 4 12:24:34 2020 +0100

    KVM: arm64: Add kvm_extable for vaxorcism code
    
    commit e9ee186bb735bfc17fa81dbc9aebf268aee5b41e upstream.
    
    KVM has a one instruction window where it will allow an SError exception
    to be consumed by the hypervisor without treating it as a hypervisor bug.
    This is used to consume asynchronous external abort that were caused by
    the guest.
    
    As we are about to add another location that survives unexpected exceptions,
    generalise this code to make it behave like the host's extable.
    
    KVM's version has to be mapped to EL2 to be accessible on nVHE systems.
    
    The SError vaxorcism code is a one instruction window, so has two entries
    in the extable. Because the KVM code is copied for VHE and nVHE, we end up
    with four entries, half of which correspond with code that isn't mapped.
    
    Cc: stable@vger.kernel.org # v4.14
    Signed-off-by: James Morse <james.morse@arm.com>
    Reviewed-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Signed-off-by: Andre Przywara <andre.przywara@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76653900c9deeb528c72ff2eb5dda77396a958d4
Author: Eugeniu Rosca <erosca@de.adit-jv.com>
Date:   Fri Sep 4 16:35:30 2020 -0700

    mm: slub: fix conversion of freelist_corrupted()
    
    commit dc07a728d49cf025f5da2c31add438d839d076c0 upstream.
    
    Commit 52f23478081ae0 ("mm/slub.c: fix corrupted freechain in
    deactivate_slab()") suffered an update when picked up from LKML [1].
    
    Specifically, relocating 'freelist = NULL' into 'freelist_corrupted()'
    created a no-op statement.  Fix it by sticking to the behavior intended
    in the original patch [1].  In addition, make freelist_corrupted()
    immune to passing NULL instead of &freelist.
    
    The issue has been spotted via static analysis and code review.
    
    [1] https://lore.kernel.org/linux-mm/20200331031450.12182-1-dongli.zhang@oracle.com/
    
    Fixes: 52f23478081ae0 ("mm/slub.c: fix corrupted freechain in deactivate_slab()")
    Signed-off-by: Eugeniu Rosca <erosca@de.adit-jv.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Dongli Zhang <dongli.zhang@oracle.com>
    Cc: Joe Jin <joe.jin@oracle.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lkml.kernel.org/r/20200824130643.10291-1-erosca@de.adit-jv.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f68b5e9a9e38c1a0364b8c9ec44478ebf7983da
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Sep 1 14:25:43 2020 +0800

    dm thin metadata: Avoid returning cmd->bm wild pointer on error
    
    commit 219403d7e56f9b716ad80ab87db85d29547ee73e upstream.
    
    Maybe __create_persistent_data_objects() caller will use PTR_ERR as a
    pointer, it will lead to some strange things.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b21aa735c6af1ba8ab72ccd6cec9a416af61af55
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Sep 1 14:25:42 2020 +0800

    dm cache metadata: Avoid returning cmd->bm wild pointer on error
    
    commit d16ff19e69ab57e08bf908faaacbceaf660249de upstream.
    
    Maybe __create_persistent_data_objects() caller will use PTR_ERR as a
    pointer, it will lead to some strange things.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5abd57c26f98cdcb43f81d0b31009807bc238477
Author: Tejun Heo <tj@kernel.org>
Date:   Wed Sep 2 12:32:45 2020 -0400

    libata: implement ATA_HORKAGE_MAX_TRIM_128M and apply to Sandisks
    
    commit 3b5455636fe26ea21b4189d135a424a6da016418 upstream.
    
    All three generations of Sandisk SSDs lock up hard intermittently.
    Experiments showed that disabling NCQ lowered the failure rate significantly
    and the kernel has been disabling NCQ for some models of SD7's and 8's,
    which is obviously undesirable.
    
    Karthik worked with Sandisk to root cause the hard lockups to trim commands
    larger than 128M. This patch implements ATA_HORKAGE_MAX_TRIM_128M which
    limits max trim size to 128M and applies it to all three generations of
    Sandisk SSDs.
    
    Signed-off-by: Tejun Heo <tj@kernel.org>
    Cc: Karthik Shivaram <karthikgs@fb.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6736cb3bf5a81b75a1013e5281fdc44cfd3690f2
Author: Bart Van Assche <bart.vanassche@wdc.com>
Date:   Wed Mar 14 15:48:06 2018 -0700

    block: Move SECTOR_SIZE and SECTOR_SHIFT definitions into <linux/blkdev.h>
    
    commit 233bde21aa43516baa013ef7ac33f3427056db3e upstream.
    
    It happens often while I'm preparing a patch for a block driver that
    I'm wondering: is a definition of SECTOR_SIZE and/or SECTOR_SHIFT
    available for this driver? Do I have to introduce definitions of these
    constants before I can use these constants? To avoid this confusion,
    move the existing definitions of SECTOR_SIZE and SECTOR_SHIFT into the
    <linux/blkdev.h> header file such that these become available for all
    block drivers. Make the SECTOR_SIZE definition in the uapi msdos_fs.h
    header file conditional to avoid that including that header file after
    <linux/blkdev.h> causes the compiler to complain about a SECTOR_SIZE
    redefinition.
    
    Note: the SECTOR_SIZE / SECTOR_SHIFT / SECTOR_BITS definitions have
    not been removed from uapi header files nor from NAND drivers in
    which these constants are used for another purpose than converting
    block layer offsets and sizes into a number of sectors.
    
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Mike Snitzer <snitzer@redhat.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Nitin Gupta <ngupta@vflare.org>
    Reviewed-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Johannes Thumshirn <jthumshirn@suse.de>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Bart Van Assche <bart.vanassche@wdc.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2785494cae2d5db5ab348e0a6b3bed995affe5b
Author: Ming Lei <ming.lei@redhat.com>
Date:   Mon Aug 17 18:00:55 2020 +0800

    block: allow for_each_bvec to support zero len bvec
    
    commit 7e24969022cbd61ddc586f14824fc205661bb124 upstream.
    
    Block layer usually doesn't support or allow zero-length bvec. Since
    commit 1bdc76aea115 ("iov_iter: use bvec iterator to implement
    iterate_bvec()"), iterate_bvec() switches to bvec iterator. However,
    Al mentioned that 'Zero-length segments are not disallowed' in iov_iter.
    
    Fixes for_each_bvec() so that it can move on after seeing one zero
    length bvec.
    
    Fixes: 1bdc76aea115 ("iov_iter: use bvec iterator to implement iterate_bvec()")
    Reported-by: syzbot <syzbot+61acc40a49a3e46e25ea@syzkaller.appspotmail.com>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Tested-by: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Link: https://www.mail-archive.com/linux-kernel@vger.kernel.org/msg2262077.html
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53db0c0a7fe2374142a7689f38ab4ca348cd4f2b
Author: Max Staudt <max@enpas.org>
Date:   Thu Aug 27 17:49:00 2020 +0200

    affs: fix basic permission bits to actually work
    
    commit d3a84a8d0dde4e26bc084b36ffcbdc5932ac85e2 upstream.
    
    The basic permission bits (protection bits in AmigaOS) have been broken
    in Linux' AFFS - it would only set bits, but never delete them.
    Also, contrary to the documentation, the Archived bit was not handled.
    
    Let's fix this for good, and set the bits such that Linux and classic
    AmigaOS can coexist in the most peaceful manner.
    
    Also, update the documentation to represent the current state of things.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable@vger.kernel.org
    Signed-off-by: Max Staudt <max@enpas.org>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5cdfbabd8a2e429982d190e4fb6c0b647c3e48f
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Sun Aug 23 16:55:45 2020 +0900

    ALSA: firewire-digi00x: exclude Avid Adrenaline from detection
    
    commit acd46a6b6de88569654567810acad2b0a0a25cea upstream.
    
    Avid Adrenaline is reported that ALSA firewire-digi00x driver is bound to.
    However, as long as he investigated, the design of this model is hardly
    similar to the one of Digi 00x family. It's better to exclude the model
    from modalias of ALSA firewire-digi00x driver.
    
    This commit changes device entries so that the model is excluded.
    
    $ python3 crpp < ~/git/am-config-rom/misc/avid-adrenaline.img
                   ROM header and bus information block
                   -----------------------------------------------------------------
    400  04203a9c  bus_info_length 4, crc_length 32, crc 15004
    404  31333934  bus_name "1394"
    408  e064a002  irmc 1, cmc 1, isc 1, bmc 0, cyc_clk_acc 100, max_rec 10 (2048)
    40c  00a07e01  company_id 00a07e     |
    410  00085257  device_id 0100085257  | EUI-64 00a07e0100085257
    
                   root directory
                   -----------------------------------------------------------------
    414  0005d08c  directory_length 5, crc 53388
    418  0300a07e  vendor
    41c  8100000c  --> descriptor leaf at 44c
    420  0c008380  node capabilities
    424  8d000002  --> eui-64 leaf at 42c
    428  d1000004  --> unit directory at 438
    
                   eui-64 leaf at 42c
                   -----------------------------------------------------------------
    42c  0002410f  leaf_length 2, crc 16655
    430  00a07e01  company_id 00a07e     |
    434  00085257  device_id 0100085257  | EUI-64 00a07e0100085257
    
                   unit directory at 438
                   -----------------------------------------------------------------
    438  0004d6c9  directory_length 4, crc 54985
    43c  1200a02d  specifier id: 1394 TA
    440  13014001  version: Vender Unique and AV/C
    444  17000001  model
    448  81000009  --> descriptor leaf at 46c
    
                   descriptor leaf at 44c
                   -----------------------------------------------------------------
    44c  00077205  leaf_length 7, crc 29189
    450  00000000  textual descriptor
    454  00000000  minimal ASCII
    458  41766964  "Avid"
    45c  20546563  " Tec"
    460  686e6f6c  "hnol"
    464  6f677900  "ogy"
    468  00000000
    
                   descriptor leaf at 46c
                   -----------------------------------------------------------------
    46c  000599a5  leaf_length 5, crc 39333
    470  00000000  textual descriptor
    474  00000000  minimal ASCII
    478  41647265  "Adre"
    47c  6e616c69  "nali"
    480  6e650000  "ne"
    
    Reported-by: Simon Wood <simon@mungewell.org>
    Fixes: 9edf723fd858 ("ALSA: firewire-digi00x: add skeleton for Digi 002/003 family")
    Cc: <stable@vger.kernel.org> # 4.4+
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20200823075545.56305-1-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 290ee00bdf033123774c207aac30db9433e681fe
Author: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Date:   Wed Aug 26 20:03:06 2020 +0300

    ALSA: hda/hdmi: always check pin power status in i915 pin fixup
    
    commit 858e0ad9301d1270c02b5aca97537d2d6ee9dd68 upstream.
    
    When system is suspended with active audio playback to HDMI/DP, two
    alternative sequences can happen at resume:
      a) monitor is detected first and ALSA prepare follows normal
         stream setup sequence, or
      b) ALSA prepare is called first, but monitor is not yet detected,
         so PCM is restarted without a pin,
    
    In case of (b), on i915 systems, haswell_verify_D0() is not called at
    resume and the pin power state may be incorrect. Result is lack of audio
    after resume with no error reported back to user-space.
    
    Fix the problem by always verifying converter and pin state in the
    i915_pin_cvt_fixup().
    
    BugLink: https://github.com/thesofproject/linux/issues/2388
    Signed-off-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200826170306.701566-1-kai.vehmanen@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b2b5c207a718b8ff2860fa3072337d18e1df9d5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Sep 1 15:18:02 2020 +0200

    ALSA: pcm: oss: Remove superfluous WARN_ON() for mulaw sanity check
    
    commit 949a1ebe8cea7b342085cb6a4946b498306b9493 upstream.
    
    The PCM OSS mulaw plugin has a check of the format of the counter part
    whether it's a linear format.  The check is with snd_BUG_ON() that
    emits WARN_ON() when the debug config is set, and it confuses
    syzkaller as if it were a serious issue.  Let's drop snd_BUG_ON() for
    avoiding that.
    
    While we're at it, correct the error code to a more suitable, EINVAL.
    
    Reported-by: syzbot+23b22dc2e0b81cbfcc95@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200901131802.18157-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b1dc9c8007e59819e4af02b6e79af532f6327ed
Author: Tong Zhang <ztong0001@gmail.com>
Date:   Mon Aug 24 18:45:41 2020 -0400

    ALSA: ca0106: fix error code handling
    
    commit ee0761d1d8222bcc5c86bf10849dc86cf008557c upstream.
    
    snd_ca0106_spi_write() returns 1 on error, snd_ca0106_pcm_power_dac()
    is returning the error code directly, and the caller is expecting an
    negative error code
    
    Signed-off-by: Tong Zhang <ztong0001@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200824224541.1260307-1-ztong0001@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb5158827b3b7004318a3c258d223642b926eab2
Author: Rogan Dawes <rogan@dawes.za.net>
Date:   Wed Jul 17 11:14:33 2019 +0200

    usb: qmi_wwan: add D-Link DWM-222 A2 device ID
    
    [ Upstream commit 7d6053097311643545a8118100175a39bd6fa637 ]
    
    Signed-off-by: Rogan Dawes <rogan@dawes.za.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d0005021ab70b637d7a5c5530fd46608cfa5b34
Author: Daniele Palmas <dnlplm@gmail.com>
Date:   Wed Oct 9 11:07:18 2019 +0200

    net: usb: qmi_wwan: add Telit 0x1050 composition
    
    [ Upstream commit e0ae2c578d3909e60e9448207f5d83f785f1129f ]
    
    This patch adds support for Telit FN980 0x1050 composition
    
    0x1050: tty, adb, rmnet, tty, tty, tty, tty
    
    Signed-off-by: Daniele Palmas <dnlplm@gmail.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0eccf559f3e3deebf0a6b17200d8182fd25fa585
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Aug 10 11:42:27 2020 -0400

    btrfs: fix potential deadlock in the search ioctl
    
    [ Upstream commit a48b73eca4ceb9b8a4b97f290a065335dbcd8a04 ]
    
    With the conversion of the tree locks to rwsem I got the following
    lockdep splat:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      5.8.0-rc7-00165-g04ec4da5f45f-dirty #922 Not tainted
      ------------------------------------------------------
      compsize/11122 is trying to acquire lock:
      ffff889fabca8768 (&mm->mmap_lock#2){++++}-{3:3}, at: __might_fault+0x3e/0x90
    
      but task is already holding lock:
      ffff889fe720fe40 (btrfs-fs-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x39/0x180
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #2 (btrfs-fs-00){++++}-{3:3}:
             down_write_nested+0x3b/0x70
             __btrfs_tree_lock+0x24/0x120
             btrfs_search_slot+0x756/0x990
             btrfs_lookup_inode+0x3a/0xb4
             __btrfs_update_delayed_inode+0x93/0x270
             btrfs_async_run_delayed_root+0x168/0x230
             btrfs_work_helper+0xd4/0x570
             process_one_work+0x2ad/0x5f0
             worker_thread+0x3a/0x3d0
             kthread+0x133/0x150
             ret_from_fork+0x1f/0x30
    
      -> #1 (&delayed_node->mutex){+.+.}-{3:3}:
             __mutex_lock+0x9f/0x930
             btrfs_delayed_update_inode+0x50/0x440
             btrfs_update_inode+0x8a/0xf0
             btrfs_dirty_inode+0x5b/0xd0
             touch_atime+0xa1/0xd0
             btrfs_file_mmap+0x3f/0x60
             mmap_region+0x3a4/0x640
             do_mmap+0x376/0x580
             vm_mmap_pgoff+0xd5/0x120
             ksys_mmap_pgoff+0x193/0x230
             do_syscall_64+0x50/0x90
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #0 (&mm->mmap_lock#2){++++}-{3:3}:
             __lock_acquire+0x1272/0x2310
             lock_acquire+0x9e/0x360
             __might_fault+0x68/0x90
             _copy_to_user+0x1e/0x80
             copy_to_sk.isra.32+0x121/0x300
             search_ioctl+0x106/0x200
             btrfs_ioctl_tree_search_v2+0x7b/0xf0
             btrfs_ioctl+0x106f/0x30a0
             ksys_ioctl+0x83/0xc0
             __x64_sys_ioctl+0x16/0x20
             do_syscall_64+0x50/0x90
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      other info that might help us debug this:
    
      Chain exists of:
        &mm->mmap_lock#2 --> &delayed_node->mutex --> btrfs-fs-00
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(btrfs-fs-00);
                                     lock(&delayed_node->mutex);
                                     lock(btrfs-fs-00);
        lock(&mm->mmap_lock#2);
    
       *** DEADLOCK ***
    
      1 lock held by compsize/11122:
       #0: ffff889fe720fe40 (btrfs-fs-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x39/0x180
    
      stack backtrace:
      CPU: 17 PID: 11122 Comm: compsize Kdump: loaded Not tainted 5.8.0-rc7-00165-g04ec4da5f45f-dirty #922
      Hardware name: Quanta Tioga Pass Single Side 01-0030993006/Tioga Pass Single Side, BIOS F08_3A18 12/20/2018
      Call Trace:
       dump_stack+0x78/0xa0
       check_noncircular+0x165/0x180
       __lock_acquire+0x1272/0x2310
       lock_acquire+0x9e/0x360
       ? __might_fault+0x3e/0x90
       ? find_held_lock+0x72/0x90
       __might_fault+0x68/0x90
       ? __might_fault+0x3e/0x90
       _copy_to_user+0x1e/0x80
       copy_to_sk.isra.32+0x121/0x300
       ? btrfs_search_forward+0x2a6/0x360
       search_ioctl+0x106/0x200
       btrfs_ioctl_tree_search_v2+0x7b/0xf0
       btrfs_ioctl+0x106f/0x30a0
       ? __do_sys_newfstat+0x5a/0x70
       ? ksys_ioctl+0x83/0xc0
       ksys_ioctl+0x83/0xc0
       __x64_sys_ioctl+0x16/0x20
       do_syscall_64+0x50/0x90
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The problem is we're doing a copy_to_user() while holding tree locks,
    which can deadlock if we have to do a page fault for the copy_to_user().
    This exists even without my locking changes, so it needs to be fixed.
    Rework the search ioctl to do the pre-fault and then
    copy_to_user_nofault for the copying.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f20789a21bf4fd9ef389db57f3b57f1bf35110b7
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Sat Nov 2 00:17:56 2019 +0100

    uaccess: Add non-pagefault user-space write function
    
    [ Upstream commit 1d1585ca0f48fe7ed95c3571f3e4a82b2b5045dc ]
    
    Commit 3d7081822f7f ("uaccess: Add non-pagefault user-space read functions")
    missed to add probe write function, therefore factor out a probe_write_common()
    helper with most logic of probe_kernel_write() except setting KERNEL_DS, and
    add a new probe_user_write() helper so it can be used from BPF side.
    
    Again, on some archs, the user address space and kernel address space can
    co-exist and be overlapping, so in such case, setting KERNEL_DS would mean
    that the given address is treated as being in kernel address space.
    
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Acked-by: Andrii Nakryiko <andriin@fb.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Link: https://lore.kernel.org/bpf/9df2542e68141bfa3addde631441ee45503856a8.1572649915.git.daniel@iogearbox.net
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9c7b7582dc261f940f8b7aaf8295f7e6da83c3a
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Wed May 15 14:38:18 2019 +0900

    uaccess: Add non-pagefault user-space read functions
    
    [ Upstream commit 3d7081822f7f9eab867d9bcc8fd635208ec438e0 ]
    
    Add probe_user_read(), strncpy_from_unsafe_user() and
    strnlen_unsafe_user() which allows caller to access user-space
    in IRQ context.
    
    Current probe_kernel_read() and strncpy_from_unsafe() are
    not available for user-space memory, because it sets
    KERNEL_DS while accessing data. On some arch, user address
    space and kernel address space can be co-exist, but others
    can not. In that case, setting KERNEL_DS means given
    address is treated as a kernel address space.
    Also strnlen_user() is only available from user context since
    it can sleep if pagefault is enabled.
    
    To access user-space memory without pagefault, we need
    these new functions which sets USER_DS while accessing
    the data.
    
    Link: http://lkml.kernel.org/r/155789869802.26965.4940338412595759063.stgit@devnote2
    
    Acked-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c689f92f5f670c0fd627e0bd87627e4eada8253
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Aug 10 11:42:31 2020 -0400

    btrfs: set the lockdep class for log tree extent buffers
    
    [ Upstream commit d3beaa253fd6fa40b8b18a216398e6e5376a9d21 ]
    
    These are special extent buffers that get rewound in order to lookup
    the state of the tree at a specific point in time.  As such they do not
    go through the normal initialization paths that set their lockdep class,
    so handle them appropriately when they are created and before they are
    locked.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61ada006faaa2757db4e7b14696388a5f39552fb
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Wed Aug 15 18:26:54 2018 +0300

    btrfs: Remove extraneous extent_buffer_get from tree_mod_log_rewind
    
    [ Upstream commit 24cee18a1c1d7c731ea5987e0c99daea22ae7f4a ]
    
    When a rewound buffer is created it already has a ref count of 1 and the
    dummy flag set. Then another ref is taken bumping the count to 2.
    Finally when this buffer is released from btrfs_release_path the extra
    reference is decremented by the special handling code in
    free_extent_buffer.
    
    However, this special code is in fact redundant sinca ref count of 1 is
    still correct since the buffer is only accessed via btrfs_path struct.
    This paves the way forward of removing the special handling in
    free_extent_buffer.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9d534b3d830eb32c0866593cc52e8e7a72913ff
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Wed Aug 15 18:26:53 2018 +0300

    btrfs: Remove redundant extent_buffer_get in get_old_root
    
    [ Upstream commit 6c122e2a0c515cfb3f3a9cefb5dad4cb62109c78 ]
    
    get_old_root used used only by btrfs_search_old_slot to initialise the
    path structure. The old root is always a cloned buffer (either via alloc
    dummy or via btrfs_clone_extent_buffer) and its reference count is 2: 1
    from allocation, 1 from extent_buffer_get call in get_old_root.
    
    This latter explicit ref count acquire operation is in fact unnecessary
    since the semantic is such that the newly allocated buffer is handed
    over to the btrfs_path for lifetime management. Considering this just
    remove the extra extent_buffer_get in get_old_root.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce966179c15024dfa2ea94d8308195ecd2778a58
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Aug 10 11:42:26 2020 -0400

    btrfs: drop path before adding new uuid tree entry
    
    commit 9771a5cf937129307d9f58922d60484d58ababe7 upstream.
    
    With the conversion of the tree locks to rwsem I got the following
    lockdep splat:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      5.8.0-rc7-00167-g0d7ba0c5b375-dirty #925 Not tainted
      ------------------------------------------------------
      btrfs-uuid/7955 is trying to acquire lock:
      ffff88bfbafec0f8 (btrfs-root-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x39/0x180
    
      but task is already holding lock:
      ffff88bfbafef2a8 (btrfs-uuid-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x39/0x180
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #1 (btrfs-uuid-00){++++}-{3:3}:
             down_read_nested+0x3e/0x140
             __btrfs_tree_read_lock+0x39/0x180
             __btrfs_read_lock_root_node+0x3a/0x50
             btrfs_search_slot+0x4bd/0x990
             btrfs_uuid_tree_add+0x89/0x2d0
             btrfs_uuid_scan_kthread+0x330/0x390
             kthread+0x133/0x150
             ret_from_fork+0x1f/0x30
    
      -> #0 (btrfs-root-00){++++}-{3:3}:
             __lock_acquire+0x1272/0x2310
             lock_acquire+0x9e/0x360
             down_read_nested+0x3e/0x140
             __btrfs_tree_read_lock+0x39/0x180
             __btrfs_read_lock_root_node+0x3a/0x50
             btrfs_search_slot+0x4bd/0x990
             btrfs_find_root+0x45/0x1b0
             btrfs_read_tree_root+0x61/0x100
             btrfs_get_root_ref.part.50+0x143/0x630
             btrfs_uuid_tree_iterate+0x207/0x314
             btrfs_uuid_rescan_kthread+0x12/0x50
             kthread+0x133/0x150
             ret_from_fork+0x1f/0x30
    
      other info that might help us debug this:
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(btrfs-uuid-00);
                                     lock(btrfs-root-00);
                                     lock(btrfs-uuid-00);
        lock(btrfs-root-00);
    
       *** DEADLOCK ***
    
      1 lock held by btrfs-uuid/7955:
       #0: ffff88bfbafef2a8 (btrfs-uuid-00){++++}-{3:3}, at: __btrfs_tree_read_lock+0x39/0x180
    
      stack backtrace:
      CPU: 73 PID: 7955 Comm: btrfs-uuid Kdump: loaded Not tainted 5.8.0-rc7-00167-g0d7ba0c5b375-dirty #925
      Hardware name: Quanta Tioga Pass Single Side 01-0030993006/Tioga Pass Single Side, BIOS F08_3A18 12/20/2018
      Call Trace:
       dump_stack+0x78/0xa0
       check_noncircular+0x165/0x180
       __lock_acquire+0x1272/0x2310
       lock_acquire+0x9e/0x360
       ? __btrfs_tree_read_lock+0x39/0x180
       ? btrfs_root_node+0x1c/0x1d0
       down_read_nested+0x3e/0x140
       ? __btrfs_tree_read_lock+0x39/0x180
       __btrfs_tree_read_lock+0x39/0x180
       __btrfs_read_lock_root_node+0x3a/0x50
       btrfs_search_slot+0x4bd/0x990
       btrfs_find_root+0x45/0x1b0
       btrfs_read_tree_root+0x61/0x100
       btrfs_get_root_ref.part.50+0x143/0x630
       btrfs_uuid_tree_iterate+0x207/0x314
       ? btree_readpage+0x20/0x20
       btrfs_uuid_rescan_kthread+0x12/0x50
       kthread+0x133/0x150
       ? kthread_create_on_node+0x60/0x60
       ret_from_fork+0x1f/0x30
    
    This problem exists because we have two different rescan threads,
    btrfs_uuid_scan_kthread which creates the uuid tree, and
    btrfs_uuid_tree_iterate that goes through and updates or deletes any out
    of date roots.  The problem is they both do things in different order.
    btrfs_uuid_scan_kthread() reads the tree_root, and then inserts entries
    into the uuid_root.  btrfs_uuid_tree_iterate() scans the uuid_root, but
    then does a btrfs_get_fs_root() which can read from the tree_root.
    
    It's actually easy enough to not be holding the path in
    btrfs_uuid_scan_kthread() when we add a uuid entry, as we already drop
    it further down and re-start the search when we loop.  So simply move
    the path release before we add our entry to the uuid tree.
    
    This also fixes a problem where we're holding a path open after we do
    btrfs_end_transaction(), which has it's own problems.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35bf7675506024ac741c605263474ae3d65429e1
Author: Jason Gunthorpe <jgg@nvidia.com>
Date:   Fri Sep 4 16:36:19 2020 -0700

    include/linux/log2.h: add missing () around n in roundup_pow_of_two()
    
    [ Upstream commit 428fc0aff4e59399ec719ffcc1f7a5d29a4ee476 ]
    
    Otherwise gcc generates warnings if the expression is complicated.
    
    Fixes: 312a0c170945 ("[PATCH] LOG2: Alter roundup_pow_of_two() so that it can use a ilog2() on a constant")
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Link: https://lkml.kernel.org/r/0-v1-8a2697e3c003+41165-log_brackets_jgg@nvidia.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 292ba75d9ffb693e420e8919347ef3e28b82f2c7
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Jul 6 11:33:38 2020 -0700

    thermal: ti-soc-thermal: Fix bogus thermal shutdowns for omap4430
    
    [ Upstream commit 30d24faba0532d6972df79a1bf060601994b5873 ]
    
    We can sometimes get bogus thermal shutdowns on omap4430 at least with
    droid4 running idle with a battery charger connected:
    
    thermal thermal_zone0: critical temperature reached (143 C), shutting down
    
    Dumping out the register values shows we can occasionally get a 0x7f value
    that is outside the TRM listed values in the ADC conversion table. And then
    we get a normal value when reading again after that. Reading the register
    multiple times does not seem help avoiding the bogus values as they stay
    until the next sample is ready.
    
    Looking at the TRM chapter "18.4.10.2.3 ADC Codes Versus Temperature", we
    should have values from 13 to 107 listed with a total of 95 values. But
    looking at the omap4430_adc_to_temp array, the values are off, and the
    end values are missing. And it seems that the 4430 ADC table is similar
    to omap3630 rather than omap4460.
    
    Let's fix the issue by using values based on the omap3630 table and just
    ignoring invalid values. Compared to the 4430 TRM, the omap3630 table has
    the missing values added while the TRM table only shows every second
    value.
    
    Note that sometimes the ADC register values within the valid table can
    also be way off for about 1 out of 10 values. But it seems that those
    just show about 25 C too low values rather than too high values. So those
    do not cause a bogus thermal shutdown.
    
    Fixes: 1a31270e54d7 ("staging: omap-thermal: add OMAP4 data structures")
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200706183338.25622-1-tony@atomide.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 956e9037628897949cc78060543d1ad53862e7cd
Author: Lu Baolu <baolu.lu@linux.intel.com>
Date:   Fri Aug 28 08:06:15 2020 +0800

    iommu/vt-d: Serialize IOMMU GCMD register modifications
    
    [ Upstream commit 6e4e9ec65078093165463c13d4eb92b3e8d7b2e8 ]
    
    The VT-d spec requires (10.4.4 Global Command Register, GCMD_REG General
    Description) that:
    
    If multiple control fields in this register need to be modified, software
    must serialize the modifications through multiple writes to this register.
    
    However, in irq_remapping.c, modifications of IRE and CFI are done in one
    write. We need to do two separate writes with STS checking after each. It
    also checks the status register before writing command register to avoid
    unnecessary register write.
    
    Fixes: af8d102f999a4 ("x86/intel/irq_remapping: Clean up x2apic opt-out security warning mess")
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Reviewed-by: Kevin Tian <kevin.tian@intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: Kevin Tian <kevin.tian@intel.com>
    Cc: Ashok Raj <ashok.raj@intel.com>
    Link: https://lore.kernel.org/r/20200828000615.8281-1-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50ed9cd43867e1527fdeca1a4f6c61a8e708c35d
Author: Michael Chan <michael.chan@broadcom.com>
Date:   Thu Sep 3 14:28:54 2020 -0400

    tg3: Fix soft lockup when tg3_reset_task() fails.
    
    [ Upstream commit 556699341efa98243e08e34401b3f601da91f5a3 ]
    
    If tg3_reset_task() fails, the device state is left in an inconsistent
    state with IFF_RUNNING still set but NAPI state not enabled.  A
    subsequent operation, such as ifdown or AER error can cause it to
    soft lock up when it tries to disable NAPI state.
    
    Fix it by bringing down the device to !IFF_RUNNING state when
    tg3_reset_task() fails.  tg3_reset_task() running from workqueue
    will now call tg3_close() when the reset fails.  We need to
    modify tg3_reset_task_cancel() slightly to avoid tg3_close()
    calling cancel_work_sync() to cancel tg3_reset_task().  Otherwise
    cancel_work_sync() will wait forever for tg3_reset_task() to
    finish.
    
    Reported-by: David Christensen <drc@linux.vnet.ibm.com>
    Reported-by: Baptiste Covolato <baptiste@arista.com>
    Fixes: db2199737990 ("tg3: Schedule at most one tg3_reset_task run")
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6429d9172e16ca5868e3ae73afb547398ddb7255
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Sep 2 11:30:48 2020 -0400

    fix regression in "epoll: Keep a reference on files added to the check list"
    
    [ Upstream commit 77f4689de17c0887775bb77896f4cc11a39bf848 ]
    
    epoll_loop_check_proc() can run into a file already committed to destruction;
    we can't grab a reference on those and don't need to add them to the set for
    reverse path check anyway.
    
    Tested-by: Marc Zyngier <maz@kernel.org>
    Fixes: a9ed4a6560b8 ("epoll: Keep a reference on files added to the check list")
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce02cc1cf4e2173772dfd3a94b6c881ee0de050f
Author: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Date:   Mon Aug 31 22:37:09 2020 +0800

    net: ethernet: mlx4: Fix memory allocation in mlx4_buddy_init()
    
    [ Upstream commit cbedcb044e9cc4e14bbe6658111224bb923094f4 ]
    
    On machines with much memory (> 2 TByte) and log_mtts_per_seg == 0, a
    max_order of 31 will be passed to mlx_buddy_init(), which results in
    s = BITS_TO_LONGS(1 << 31) becoming a negative value, leading to
    kvmalloc_array() failure when it is converted to size_t.
    
      mlx4_core 0000:b1:00.0: Failed to initialize memory region table, aborting
      mlx4_core: probe of 0000:b1:00.0 failed with error -12
    
    Fix this issue by changing the left shifting operand from a signed literal to
    an unsigned one.
    
    Fixes: 225c7b1feef1 ("IB/mlx4: Add a driver Mellanox ConnectX InfiniBand adapters")
    Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7617e2be54aba43512268ab8f865306388259c8c
Author: Al Grant <al.grant@foss.arm.com>
Date:   Tue Sep 1 12:10:14 2020 -0300

    perf tools: Correct SNOOPX field offset
    
    [ Upstream commit 39c0a53b114d0317e5c4e76b631f41d133af5cb0 ]
    
    perf_event.h has macros that define the field offsets in the data_src
    bitmask in perf records. The SNOOPX and REMOTE offsets were both 37.
    
    These are distinct fields, and the bitfield layout in perf_mem_data_src
    confirms that SNOOPX should be at offset 38.
    
    Committer notes:
    
    This was extracted from a larger patch that also contained kernel
    changes.
    
    Fixes: 52839e653b5629bd ("perf tools: Add support for printing new mem_info encodings")
    Signed-off-by: Al Grant <al.grant@arm.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/9974f2d0-bf7f-518e-d9f7-4520e5ff1bb0@foss.arm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a172089997127a85000ec1f28abf1f2ca87d5c01
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Aug 21 09:58:19 2020 +0200

    nvmet-fc: Fix a missed _irqsave version of spin_lock in 'nvmet_fc_fod_op_done()'
    
    [ Upstream commit 70e37988db94aba607d5491a94f80ba08e399b6b ]
    
    The way 'spin_lock()' and 'spin_lock_irqsave()' are used is not consistent
    in this function.
    
    Use 'spin_lock_irqsave()' also here, as there is no guarantee that
    interruptions are disabled at that point, according to surrounding code.
    
    Fixes: a97ec51b37ef ("nvmet_fc: Rework target side abort handling")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e7ead172a2ba7b6f7941dec673dbfdac4d6c585
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Wed Aug 26 01:08:35 2020 -0400

    bnxt_en: Fix PCI AER error recovery flow
    
    [ Upstream commit df3875ec550396974b1d8a518bd120d034738236 ]
    
    When a PCI error is detected the PCI state could be corrupt, save
    the PCI state after initialization and restore it after the slot
    reset.
    
    Fixes: 6316ea6db93d ("bnxt_en: Enable AER support.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f453e05011c70f4db4ab128e907c7078c78c0f51
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Wed Aug 26 01:08:33 2020 -0400

    bnxt_en: Check for zero dir entries in NVRAM.
    
    [ Upstream commit dbbfa96ad920c50d58bcaefa57f5f33ceef9d00e ]
    
    If firmware goes into unstable state, HWRM_NVM_GET_DIR_INFO firmware
    command may return zero dir entries. Return error in such case to
    avoid zero length dma buffer request.
    
    Fixes: c0c050c58d84 ("bnxt_en: New Broadcom ethernet driver.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99987522e9d0ec5cb3aeedd4c3d86f2713cf0718
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Tue Aug 25 14:59:40 2020 +0200

    gtp: add GTPA_LINK info to msg sent to userspace
    
    [ Upstream commit b274e47d9e3f4dcd4ad4028a316ec22dc4533ac7 ]
    
    During a dump, this attribute is essential, it enables the userspace to
    know on which interface the context is linked to.
    
    Fixes: 459aa660eb1d ("gtp: add initial driver for datapath of GPRS Tunneling Protocol (GTP-U)")
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Tested-by: Gabriel Ganne <gabriel.ganne@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 70e2e6d80fa2d9a238ea930b5fad8c92e2656702
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Tue Aug 25 08:46:17 2020 +0200

    dmaengine: pl330: Fix burst length if burst size is smaller than bus width
    
    [ Upstream commit 0661cef675d37e2c4b66a996389ebeae8568e49e ]
    
    Move the burst len fixup after setting the generic value for it. This
    finally enables the fixup introduced by commit 137bd11090d8 ("dmaengine:
    pl330: Align DMA memcpy operations to MFIFO width"), which otherwise was
    overwritten by the generic value.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Fixes: 137bd11090d8 ("dmaengine: pl330: Align DMA memcpy operations to MFIFO width")
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Link: https://lore.kernel.org/r/20200825064617.16193-1-m.szyprowski@samsung.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59a18827fb682abe786a2eb3b72482529ae38f30
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Sun Aug 23 16:56:47 2020 +0800

    net: arc_emac: Fix memleak in arc_mdio_probe
    
    [ Upstream commit e2d79cd8875fa8c3cc7defa98a8cc99a1ed0c62f ]
    
    When devm_gpiod_get_optional() fails, bus should be
    freed just like when of_mdiobus_register() fails.
    
    Fixes: 1bddd96cba03d ("net: arc_emac: support the phy reset for emac driver")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee042e32cb1aaa9fefaee9f2a109f97c9abaa973
Author: Yuusuke Ashizuka <ashiduka@fujitsu.com>
Date:   Thu Aug 20 18:43:07 2020 +0900

    ravb: Fixed to be able to unload modules
    
    [ Upstream commit 1838d6c62f57836639bd3d83e7855e0ee4f6defc ]
    
    When this driver is built as a module, I cannot rmmod it after insmoding
    it.
    This is because that this driver calls ravb_mdio_init() at the time of
    probe, and module->refcnt is incremented by alloc_mdio_bitbang() called
    after that.
    Therefore, even if ifup is not performed, the driver is in use and rmmod
    cannot be performed.
    
    $ lsmod
    Module                  Size  Used by
    ravb                   40960  1
    $ rmmod ravb
    rmmod: ERROR: Module ravb is in use
    
    Call ravb_mdio_init() at open and free_mdio_bitbang() at close, thereby
    rmmod is possible in the ifdown state.
    
    Fixes: c156633f1353 ("Renesas Ethernet AVB driver proper")
    Signed-off-by: Yuusuke Ashizuka <ashiduka@fujitsu.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd5881363382d3db411176a24af7c2805df2745d
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Aug 24 13:58:31 2020 +0800

    net: systemport: Fix memleak in bcm_sysport_probe
    
    [ Upstream commit 7ef1fc57301f3cef7201497aa27e89ccb91737fe ]
    
    When devm_kcalloc() fails, dev should be freed just
    like what we've done in the subsequent error paths.
    
    Fixes: 7b78be48a8eb6 ("net: systemport: Dynamically allocate number of TX rings")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ed9a353c6431d9ffe2d96dc16805756a8580ece
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Mon Aug 24 13:44:42 2020 +0800

    net: hns: Fix memleak in hns_nic_dev_probe
    
    [ Upstream commit 100e3345c6e719d2291e1efd5de311cc24bb9c0b ]
    
    hns_nic_dev_probe allocates ndev, but not free it on
    two error handling paths, which may lead to memleak.
    
    Fixes: 63434888aaf1b ("net: hns: net: hns: enet adds support of acpi")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81235f6ceb178eba63ae6a9ba11cf8677bfcbff8
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 20 21:05:50 2020 +0200

    netfilter: nf_tables: fix destination register zeroing
    
    [ Upstream commit 1e105e6afa6c3d32bfb52c00ffa393894a525c27 ]
    
    Following bug was reported via irc:
    nft list ruleset
       set knock_candidates_ipv4 {
          type ipv4_addr . inet_service
          size 65535
          elements = { 127.0.0.1 . 123,
                       127.0.0.1 . 123 }
          }
     ..
       udp dport 123 add @knock_candidates_ipv4 { ip saddr . 123 }
       udp dport 123 add @knock_candidates_ipv4 { ip saddr . udp dport }
    
    It should not have been possible to add a duplicate set entry.
    
    After some debugging it turned out that the problem is the immediate
    value (123) in the second-to-last rule.
    
    Concatenations use 32bit registers, i.e. the elements are 8 bytes each,
    not 6 and it turns out the kernel inserted
    
    inet firewall @knock_candidates_ipv4
            element 0100007f ffff7b00  : 0 [end]
            element 0100007f 00007b00  : 0 [end]
    
    Note the non-zero upper bits of the first element.  It turns out that
    nft_immediate doesn't zero the destination register, but this is needed
    when the length isn't a multiple of 4.
    
    Furthermore, the zeroing in nft_payload is broken.  We can't use
    [len / 4] = 0 -- if len is a multiple of 4, index is off by one.
    
    Skip zeroing in this case and use a conditional instead of (len -1) / 4.
    
    Fixes: 49499c3e6e18 ("netfilter: nf_tables: switch registers to 32 bit addressing")
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd247417feb97f7af5b7b6d01ec67745226cf6eb
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Aug 20 14:12:55 2020 +0200

    netfilter: nf_tables: incorrect enum nft_list_attributes definition
    
    [ Upstream commit da9125df854ea48a6240c66e8a67be06e2c12c03 ]
    
    This should be NFTA_LIST_UNSPEC instead of NFTA_LIST_UNPEC, all other
    similar attribute definitions are postfixed with _UNSPEC.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ec405327b9a8026c1fd70d69c92ab331e621efc
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Thu Aug 20 14:12:54 2020 +0200

    netfilter: nf_tables: add NFTA_SET_USERDATA if not null
    
    [ Upstream commit 6f03bf43ee05b31d3822def2a80f11b3591c55b3 ]
    
    Kernel sends an empty NFTA_SET_USERDATA attribute with no value if
    userspace adds a set with no NFTA_SET_USERDATA attribute.
    
    Fixes: e6d8ecac9e68 ("netfilter: nf_tables: Add new attributes into nft_set to store user data.")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f051e1356f70d80fa77ed843056ea17412ea3f6
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Aug 19 11:26:45 2020 -0700

    MIPS: BMIPS: Also call bmips_cpu_setup() for secondary cores
    
    [ Upstream commit e14f633b66902615cf7faa5d032b45ab8b6fb158 ]
    
    The initialization done by bmips_cpu_setup() typically affects both
    threads of a given core, on 7435 which supports 2 cores and 2 threads,
    logical CPU number 2 and 3 would not run this initialization.
    
    Fixes: 738a3f79027b ("MIPS: BMIPS: Add early CPU initialization code")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f0cfe86e984a318fac76ffdec2480eb0ad25f9f
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Aug 19 11:26:44 2020 -0700

    MIPS: mm: BMIPS5000 has inclusive physical caches
    
    [ Upstream commit dbfc95f98f0158958d1f1e6bf06d74be38dbd821 ]
    
    When the BMIPS generic cpu-feature-overrides.h file was introduced,
    cpu_has_inclusive_caches/MIPS_CPU_INCLUSIVE_CACHES was not set for
    BMIPS5000 CPUs. Correct this when we have initialized the MIPS secondary
    cache successfully.
    
    Fixes: f337967d6d87 ("MIPS: BMIPS: Add cpu-feature-overrides.h")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d14a704425179eca7f58f69aaaf8237443169d1b
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Mon Aug 17 19:57:26 2020 +0800

    dmaengine: at_hdmac: check return value of of_find_device_by_node() in at_dma_xlate()
    
    [ Upstream commit 0cef8e2c5a07d482ec907249dbd6687e8697677f ]
    
    The reurn value of of_find_device_by_node() is not checked, thus null
    pointer dereference will be triggered if of_find_device_by_node()
    failed.
    
    Fixes: bbe89c8e3d59 ("at_hdmac: move to generic DMA binding")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Link: https://lore.kernel.org/r/20200817115728.1706719-2-yukuai3@huawei.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea2b39dc10b10a34a3a04cdfa3f49bcdb024785c
Author: Jussi Kivilinna <jussi.kivilinna@haltian.com>
Date:   Tue Aug 18 17:46:10 2020 +0300

    batman-adv: bla: use netif_rx_ni when not in interrupt context
    
    [ Upstream commit 279e89b2281af3b1a9f04906e157992c19c9f163 ]
    
    batadv_bla_send_claim() gets called from worker thread context through
    batadv_bla_periodic_work(), thus netif_rx_ni needs to be used in that
    case. This fixes "NOHZ: local_softirq_pending 08" log messages seen
    when batman-adv is enabled.
    
    Fixes: 23721387c409 ("batman-adv: add basic bridge loop avoidance code")
    Signed-off-by: Jussi Kivilinna <jussi.kivilinna@haltian.com>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d615372e3f6b73f555baea5748c494553806c2ce
Author: Linus Lüssing <linus.luessing@c0d3.blue>
Date:   Thu Jul 23 14:28:08 2020 +0200

    batman-adv: Fix own OGM check in aggregated OGMs
    
    [ Upstream commit d8bf0c01642275c7dca1e5d02c34e4199c200b1f ]
    
    The own OGM check is currently misplaced and can lead to the following
    issues:
    
    For one thing we might receive an aggregated OGM from a neighbor node
    which has our own OGM in the first place. We would then not only skip
    our own OGM but erroneously also any other, following OGM in the
    aggregate.
    
    For another, we might receive an OGM aggregate which has our own OGM in
    a place other then the first one. Then we would wrongly not skip this
    OGM, leading to populating the orginator and gateway table with ourself.
    
    Fixes: 9323158ef9f4 ("batman-adv: OGMv2 - implement originators logic")
    Signed-off-by: Linus Lüssing <linus.luessing@c0d3.blue>
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 954134686fbddce580dc987dd738c8c624518be8
Author: Sven Eckelmann <sven@narfation.org>
Date:   Wed Jul 22 20:36:43 2020 +0200

    batman-adv: Avoid uninitialized chaddr when handling DHCP
    
    [ Upstream commit 303216e76dcab6049c9d42390b1032f0649a8206 ]
    
    The gateway client code can try to optimize the delivery of DHCP packets to
    avoid broadcasting them through the whole mesh. But also transmissions to
    the client can be optimized by looking up the destination via the chaddr of
    the DHCP packet.
    
    But the chaddr is currently only done when chaddr is fully inside the
    non-paged area of the skbuff. Otherwise it will not be initialized and the
    unoptimized path should have been taken.
    
    But the implementation didn't handle this correctly. It didn't retrieve the
    correct chaddr but still tried to perform the TT lookup with this
    uninitialized memory.
    
    Reported-by: syzbot+ab16e463b903f5a37036@syzkaller.appspotmail.com
    Fixes: 6c413b1c22a2 ("batman-adv: send every DHCP packet as bat-unicast")
    Signed-off-by: Sven Eckelmann <sven@narfation.org>
    Acked-by: Antonio Quartulli <a@unstable.cc>
    Signed-off-by: Simon Wunderlich <sw@simonwunderlich.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef0dc47099eb76b8129647db85eefb60ba3efa5b
Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
Date:   Thu Aug 6 13:49:28 2020 +0300

    dmaengine: of-dma: Fix of_dma_router_xlate's of_dma_xlate handling
    
    [ Upstream commit 5b2aa9f918f6837ae943557f8cec02c34fcf80e7 ]
    
    of_dma_xlate callback can return ERR_PTR as well NULL in case of failure.
    
    If error code is returned (not NULL) then the route should be released and
    the router should not be registered for the channel.
    
    Fixes: 56f13c0d9524c ("dmaengine: of_dma: Support for DMA routers")
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@ti.com>
    Link: https://lore.kernel.org/r/20200806104928.25975-1-peter.ujfalusi@ti.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c0bfff47d7091b96d6092c2be59184f40f3143d
Author: Simon Leiner <simon@leiner.me>
Date:   Tue Aug 25 11:31:52 2020 +0200

    xen/xenbus: Fix granting of vmalloc'd memory
    
    [ Upstream commit d742db70033c745e410523e00522ee0cfe2aa416 ]
    
    On some architectures (like ARM), virt_to_gfn cannot be used for
    vmalloc'd memory because of its reliance on virt_to_phys. This patch
    introduces a check for vmalloc'd addresses and obtains the PFN using
    vmalloc_to_pfn in that case.
    
    Signed-off-by: Simon Leiner <simon@leiner.me>
    Reviewed-by: Stefano Stabellini <sstabellini@kernel.org>
    Link: https://lore.kernel.org/r/20200825093153.35500-1-simon@leiner.me
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18f6563ae693dbc5dc525442b1d83be14b9de298
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Thu Aug 20 09:48:23 2020 +0200

    s390: don't trace preemption in percpu macros
    
    [ Upstream commit 1196f12a2c960951d02262af25af0bb1775ebcc2 ]
    
    Since commit a21ee6055c30 ("lockdep: Change hardirq{s_enabled,_context}
    to per-cpu variables") the lockdep code itself uses percpu variables. This
    leads to recursions because the percpu macros are calling preempt_enable()
    which might call trace_preempt_on().
    
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Reviewed-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8b17a9eaf92730b725c55703fadd07c867eae67
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Thu Aug 20 16:47:24 2020 +0200

    cpuidle: Fixup IRQ state
    
    [ Upstream commit 49d9c5936314e44d314c605c39cce0fd947f9c3a ]
    
    Match the pattern elsewhere in this file.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Tested-by: Marco Elver <elver@google.com>
    Link: https://lkml.kernel.org/r/20200821085348.251340558@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d25f030a378d41f6b0e6b6ce0ba83df794797cf
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Aug 20 11:00:26 2020 -0400

    ceph: don't allow setlease on cephfs
    
    [ Upstream commit 496ceaf12432b3d136dcdec48424312e71359ea7 ]
    
    Leases don't currently work correctly on kcephfs, as they are not broken
    when caps are revoked. They could eventually be implemented similarly to
    how we did them in libcephfs, but for now don't allow them.
    
    [ idryomov: no need for simple_nosetlease() in ceph_dir_fops and
      ceph_snapdir_fops ]
    
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 540066e5094a7a34a16968178b5476ab800c8b0e
Author: Amit Engel <amit.engel@dell.com>
Date:   Wed Aug 19 11:31:11 2020 +0300

    nvmet: Disable keep-alive timer when kato is cleared to 0h
    
    [ Upstream commit 0d3b6a8d213a30387b5104b2fb25376d18636f23 ]
    
    Based on nvme spec, when keep alive timeout is set to zero
    the keep-alive timer should be disabled.
    
    Signed-off-by: Amit Engel <amit.engel@dell.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 528f9ba46d5a5e8279a6ef24529afc491b8a33e2
Author: Tom Rix <trix@redhat.com>
Date:   Thu Aug 20 06:19:32 2020 -0700

    hwmon: (applesmc) check status earlier.
    
    [ Upstream commit cecf7560f00a8419396a2ed0f6e5d245ccb4feac ]
    
    clang static analysis reports this representative problem
    
    applesmc.c:758:10: warning: 1st function call argument is an
      uninitialized value
            left = be16_to_cpu(*(__be16 *)(buffer + 6)) >> 2;
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    buffer is filled by the earlier call
    
            ret = applesmc_read_key(LIGHT_SENSOR_LEFT_KEY, ...
    
    This problem is reported because a goto skips the status check.
    Other similar problems use data from applesmc_read_key before checking
    the status.  So move the checks to before the use.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Henrik Rydberg <rydberg@bitmath.org>
    Link: https://lore.kernel.org/r/20200820131932.10590-1-trix@redhat.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c134b3cb4554b91d99626ff70484ec23958f788
Author: Krishna Manikandan <mkrishn@codeaurora.org>
Date:   Mon Jun 1 16:33:22 2020 +0530

    drm/msm: add shutdown support for display platform_driver
    
    [ Upstream commit 9d5cbf5fe46e350715389d89d0c350d83289a102 ]
    
    Define shutdown callback for display drm driver,
    so as to disable all the CRTCS when shutdown
    notification is received by the driver.
    
    This change will turn off the timing engine so
    that no display transactions are requested
    while mmu translations are getting disabled
    during reboot sequence.
    
    Signed-off-by: Krishna Manikandan <mkrishn@codeaurora.org>
    
    Changes in v2:
            - Remove NULL check from msm_pdev_shutdown (Stephen Boyd)
            - Change commit text to reflect when this issue
              was uncovered (Sai Prakash Ranjan)
    
    Signed-off-by: Rob Clark <robdclark@chromium.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 853fd0859f2deb94d46be4cd60b9a5257005f0dc
Author: Kim Phillips <kim.phillips@amd.com>
Date:   Tue Sep 1 16:58:53 2020 -0500

    perf record/stat: Explicitly call out event modifiers in the documentation
    
    commit e48a73a312ebf19cc3d72aa74985db25c30757c1 upstream.
    
    Event modifiers are not mentioned in the perf record or perf stat
    manpages.  Add them to orient new users more effectively by pointing
    them to the perf list manpage for details.
    
    Fixes: 2055fdaf8703 ("perf list: Document precise event sampling for AMD IBS")
    Signed-off-by: Kim Phillips <kim.phillips@amd.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexey Budankov <alexey.budankov@linux.intel.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Jin Yao <yao.jin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Paul Clarke <pc@us.ibm.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Tony Jones <tonyj@suse.de>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200901215853.276234-1-kim.phillips@amd.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7c56558ef8c4652c5969bbd4bb65336fd8ca0d12
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Sep 1 10:52:33 2020 +0100

    HID: core: Sanitize event code and type when mapping input
    
    commit 35556bed836f8dc07ac55f69c8d17dce3e7f0e25 upstream.
    
    When calling into hid_map_usage(), the passed event code is
    blindly stored as is, even if it doesn't fit in the associated bitmap.
    
    This event code can come from a variety of sources, including devices
    masquerading as input devices, only a bit more "programmable".
    
    Instead of taking the event code at face value, check that it actually
    fits the corresponding bitmap, and if it doesn't:
    - spit out a warning so that we know which device is acting up
    - NULLify the bitmap pointer so that we catch unexpected uses
    
    Code paths that can make use of untrusted inputs can now check
    that the mapping was indeed correct and bail out if not.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bf9b248cc8523688866a39777f89fc1c7e60e06
Author: Marc Zyngier <maz@kernel.org>
Date:   Sat Aug 29 12:26:01 2020 +0100

    HID: core: Correctly handle ReportSize being zero
    
    commit bce1305c0ece3dc549663605e567655dd701752c upstream.
    
    It appears that a ReportSize value of zero is legal, even if a bit
    non-sensical. Most of the HID code seems to handle that gracefully,
    except when computing the total size in bytes. When fed as input to
    memset, this leads to some funky outcomes.
    
    Detect the corner case and correctly compute the size.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Benjamin Tissoires <benjamin.tissoires@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bef1230be5d80bed72ebfa3f5ba903dccaf7e747
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 17:00:08 2023 +0500

    Revert "ext4: fix checking of directory entry validity for inline directories"
    
    This reverts commit d94836fff910fc94d6e64a8d5b06df6991dabb52.
    
    Causes too few arguments error to occur

commit a5c24f79ad456f1416b14d0db7bd8af0626047ea
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 16:59:59 2023 +0500

    Fix redefination errors

commit 64b1efa293ab66eba5313c3b7609fa5177e11f13
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 3 11:22:34 2020 +0200

    Linux 4.14.196
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e6c898659e8af6d37c00be0ae28d23457de2a53
Author: Hector Martin <marcan@marcan.st>
Date:   Sun Aug 16 17:44:31 2020 +0900

    ALSA: usb-audio: Update documentation comment for MS2109 quirk
    
    commit 74a2a7de81a2ef20732ec02087314e92692a7a1b upstream.
    
    As the recent fix addressed the channel swap problem more properly,
    update the comment as well.
    
    Fixes: 1b7ecc241a67 ("ALSA: usb-audio: work around streaming quirk for MacroSilicon MS2109")
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Link: https://lore.kernel.org/r/20200816084431.102151-1-marcan@marcan.st
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 919923673e225d18c6a6c8458ba2a068b97ee315
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Wed Jul 29 07:37:12 2020 -0400

    HID: hiddev: Fix slab-out-of-bounds write in hiddev_ioctl_usage()
    
    commit 25a097f5204675550afb879ee18238ca917cba7a upstream.
    
    `uref->usage_index` is not always being properly checked, causing
    hiddev_ioctl_usage() to go out of bounds under some cases. Fix it.
    
    Reported-by: syzbot+34ee1b45d88571c2fa8b@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=f2aebe90b8c56806b050a20b36f51ed6acabe802
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10f39e7acf4b21292a3f2d93c1f54fd6c142f56e
Author: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
Date:   Mon Aug 31 14:58:49 2020 -0400

    tpm: Unify the mismatching TPM space buffer sizes
    
    [ Upstream commit 6c4e79d99e6f42b79040f1a33cd4018f5425030b ]
    
    The size of the buffers for storing context's and sessions can vary from
    arch to arch as PAGE_SIZE can be anything between 4 kB and 256 kB (the
    maximum for PPC64). Define a fixed buffer size set to 16 kB. This should be
    enough for most use with three handles (that is how many we allow at the
    moment). Parametrize the buffer size while doing this, so that it is easier
    to revisit this later on if required.
    
    Cc: stable@vger.kernel.org
    Reported-by: Stefan Berger <stefanb@linux.ibm.com>
    Fixes: 745b361e989a ("tpm: infrastructure for TPM spaces")
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Tested-by: Stefan Berger <stefanb@linux.ibm.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 769603e8531b3490431b7e6909938d10a11bac4a
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Aug 10 17:31:16 2020 -0400

    btrfs: check the right error variable in btrfs_del_dir_entries_in_log
    
    [ Upstream commit fb2fecbad50964b9f27a3b182e74e437b40753ef ]
    
    With my new locking code dbench is so much faster that I tripped over a
    transaction abort from ENOSPC.  This turned out to be because
    btrfs_del_dir_entries_in_log was checking for ret == -ENOSPC, but this
    function sets err on error, and returns err.  So instead of properly
    marking the inode as needing a full commit, we were returning -ENOSPC
    and aborting in __btrfs_unlink_inode.  Fix this by checking the proper
    variable so that we return the correct thing in the case of ENOSPC.
    
    The ENOENT needs to be checked, because btrfs_lookup_dir_item_index()
    can return -ENOENT if the dir item isn't in the tree log (which would
    happen if we hadn't fsync'ed this guy).  We actually handle that case in
    __btrfs_unlink_inode, so it's an expected error to get back.
    
    Fixes: 4a500fd178c8 ("Btrfs: Metadata ENOSPC handling for tree log")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ add note and comment about ENOENT ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5a7c9c6cdffcaab1a4d9407e121b33eb8a25a0df
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Aug 26 10:32:29 2020 -0400

    usb: storage: Add unusual_uas entry for Sony PSZ drives
    
    commit 20934c0de13b49a072fb1e0ca79fe0fe0e40eae5 upstream.
    
    The PSZ-HA* family of USB disk drives from Sony can't handle the
    REPORT OPCODES command when using the UAS protocol.  This patch adds
    an appropriate quirks entry.
    
    Reported-and-tested-by: Till Dörges <doerges@pre-sense.de>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200826143229.GB400430@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53b266ca9b98d3ee1e37558d3935358e8e4cc396
Author: Tom Rix <trix@redhat.com>
Date:   Sat Aug 1 08:21:54 2020 -0700

    USB: cdc-acm: rework notification_buffer resizing
    
    commit f4b9d8a582f738c24ebeabce5cc15f4b8159d74e upstream.
    
    Clang static analysis reports this error
    
    cdc-acm.c:409:3: warning: Use of memory after it is freed
            acm_process_notification(acm, (unsigned char *)dr);
    
    There are three problems, the first one is that dr is not reset
    
    The variable dr is set with
    
    if (acm->nb_index)
            dr = (struct usb_cdc_notification *)acm->notification_buffer;
    
    But if the notification_buffer is too small it is resized with
    
                    if (acm->nb_size) {
                            kfree(acm->notification_buffer);
                            acm->nb_size = 0;
                    }
                    alloc_size = roundup_pow_of_two(expected_size);
                    /*
                     * kmalloc ensures a valid notification_buffer after a
                     * use of kfree in case the previous allocation was too
                     * small. Final freeing is done on disconnect.
                     */
                    acm->notification_buffer =
                            kmalloc(alloc_size, GFP_ATOMIC);
    
    dr should point to the new acm->notification_buffer.
    
    The second problem is any data in the notification_buffer is lost
    when the pointer is freed.  In the normal case, the current data
    is accumulated in the notification_buffer here.
    
            memcpy(&acm->notification_buffer[acm->nb_index],
                   urb->transfer_buffer, copy_size);
    
    When a resize happens, anything before
    notification_buffer[acm->nb_index] is garbage.
    
    The third problem is the acm->nb_index is not reset on a
    resizing buffer error.
    
    So switch resizing to using krealloc and reassign dr and
    reset nb_index.
    
    Fixes: ea2583529cd1 ("cdc-acm: reassemble fragmented notifications")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20200801152154.20683-1-trix@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a4b10ecb23b8bd58cd46fca5b328176122cbd73
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Aug 26 22:21:19 2020 +0300

    USB: gadget: u_f: Unbreak offset calculation in VLAs
    
    commit bfd08d06d978d0304eb6f7855b548aa2cd1c5486 upstream.
    
    Inadvertently the commit b1cd1b65afba ("USB: gadget: u_f: add overflow checks
    to VLA macros") makes VLA macros to always return 0 due to different scope of
    two variables of the same name. Obviously we need to have only one.
    
    Fixes: b1cd1b65afba ("USB: gadget: u_f: add overflow checks to VLA macros")
    Reported-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Brooke Basile <brookebasile@gmail.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/20200826192119.56450-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b0efd78a607fe8d9b3db93333ea39088f88304f2
Author: Brooke Basile <brookebasile@gmail.com>
Date:   Tue Aug 25 09:07:27 2020 -0400

    USB: gadget: f_ncm: add bounds checks to ncm_unwrap_ntb()
    
    commit 2b74b0a04d3e9f9f08ff026e5663dce88ff94e52 upstream.
    
    Some values extracted by ncm_unwrap_ntb() could possibly lead to several
    different out of bounds reads of memory.  Specifically the values passed
    to netdev_alloc_skb_ip_align() need to be checked so that memory is not
    overflowed.
    
    Resolve this by applying bounds checking to a number of different
    indexes and lengths of the structure parsing logic.
    
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Signed-off-by: Brooke Basile <brookebasile@gmail.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c05677f89645a0aa841e996c45376048e39e72f
Author: Brooke Basile <brookebasile@gmail.com>
Date:   Tue Aug 25 09:05:08 2020 -0400

    USB: gadget: u_f: add overflow checks to VLA macros
    
    commit b1cd1b65afba95971fa457dfdb2c941c60d38c5b upstream.
    
    size can potentially hold an overflowed value if its assigned expression
    is left unchecked, leading to a smaller than needed allocation when
    vla_group_size() is used by callers to allocate memory.
    To fix this, add a test for saturation before declaring variables and an
    overflow check to (n) * sizeof(type).
    If the expression results in overflow, vla_group_size() will return SIZE_MAX.
    
    Reported-by: Ilja Van Sprundel <ivansprundel@ioactive.com>
    Suggested-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Brooke Basile <brookebasile@gmail.com>
    Acked-by: Felipe Balbi <balbi@kernel.org>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5da8a2bde3c9af9a5bd2a8df29642235a3bae61b
Author: Kees Cook <keescook@chromium.org>
Date:   Mon May 7 16:47:02 2018 -0700

    overflow.h: Add allocation size calculation helpers
    
    commit 610b15c50e86eb1e4b77274fabcaea29ac72d6a8 upstream.
    
    In preparation for replacing unchecked overflows for memory allocations,
    this creates helpers for the 3 most common calculations:
    
    array_size(a, b): 2-dimensional array
    array3_size(a, b, c): 3-dimensional array
    struct_size(ptr, member, n): struct followed by n-many trailing members
    
    Each of these return SIZE_MAX on overflow instead of wrapping around.
    
    (Additionally renames a variable named "array_size" to avoid future
    collision.)
    
    Co-developed-by: Matthew Wilcox <mawilcox@microsoft.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d28f202e378bbb1e83636767fa604d5e9ed0bba2
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Wed Aug 26 22:49:31 2020 +0800

    usb: host: ohci-exynos: Fix error handling in exynos_ohci_probe()
    
    commit 1d4169834628d18b2392a2da92b7fbf5e8e2ce89 upstream.
    
    If the function platform_get_irq() failed, the negative value
    returned will not be detected here. So fix error handling in
    exynos_ohci_probe(). And when get irq failed, the function
    platform_get_irq() logs an error message, so remove redundant
    message here.
    
    Fixes: 62194244cf87 ("USB: Add Samsung Exynos OHCI diver")
    Signed-off-by: Zhang Shengju <zhangshengju@cmss.chinamobile.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Link: https://lore.kernel.org/r/20200826144931.1828-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3c89bf4969c05d2c3071fdb463ebfb7c4b3cba9
Author: Cyril Roelandt <tipecaml@gmail.com>
Date:   Tue Aug 25 23:22:31 2020 +0200

    USB: Ignore UAS for JMicron JMS567 ATA/ATAPI Bridge
    
    commit 9aa37788e7ebb3f489fb4b71ce07adadd444264a upstream.
    
    This device does not support UAS properly and a similar entry already
    exists in drivers/usb/storage/unusual_uas.h. Without this patch,
    storage_probe() defers the handling of this device to UAS, which cannot
    handle it either.
    
    Tested-by: Brice Goglin <brice.goglin@gmail.com>
    Fixes: bc3bdb12bbb3 ("usb-storage: Disable UAS on JMicron SATA enclosure")
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Cyril Roelandt <tipecaml@gmail.com>
    Link: https://lore.kernel.org/r/20200825212231.46309-1-tipecaml@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dee231422ec1209d743e6a78193b1134fc1fb124
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri Jul 31 13:16:20 2020 +0800

    USB: quirks: Add no-lpm quirk for another Raydium touchscreen
    
    commit 5967116e8358899ebaa22702d09b0af57fef23e1 upstream.
    
    There's another Raydium touchscreen needs the no-lpm quirk:
    [    1.339149] usb 1-9: New USB device found, idVendor=2386, idProduct=350e, bcdDevice= 0.00
    [    1.339150] usb 1-9: New USB device strings: Mfr=1, Product=2, SerialNumber=0
    [    1.339151] usb 1-9: Product: Raydium Touch System
    [    1.339152] usb 1-9: Manufacturer: Raydium Corporation
    ...
    [    6.450497] usb 1-9: can't set config #1, error -110
    
    BugLink: https://bugs.launchpad.net/bugs/1889446
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200731051622.28643-1-kai.heng.feng@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d128a2076fe63815c7f17cdc10e51429d7ab181
Author: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
Date:   Tue Aug 18 19:27:47 2020 -0700

    usb: uas: Add quirk for PNY Pro Elite
    
    commit 9a469bc9f32dd33c7aac5744669d21a023a719cd upstream.
    
    PNY Pro Elite USB 3.1 Gen 2 device (SSD) doesn't respond to ATA_12
    pass-through command (i.e. it just hangs). If it doesn't support this
    command, it should respond properly to the host. Let's just add a quirk
    to be able to move forward with other operations.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Thinh Nguyen <thinhn@synopsys.com>
    Link: https://lore.kernel.org/r/2b0585228b003eedcc82db84697b31477df152e0.1597803605.git.thinhn@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bda2e0513543f52a91f851c3526a67cbe2e89aca
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Mon Aug 10 14:29:54 2020 -0400

    USB: yurex: Fix bad gfp argument
    
    commit f176ede3a3bde5b398a6777a7f9ff091baa2d3ff upstream.
    
    The syzbot fuzzer identified a bug in the yurex driver: It passes
    GFP_KERNEL as a memory-allocation flag to usb_submit_urb() at a time
    when its state is TASK_INTERRUPTIBLE, not TASK_RUNNING:
    
    do not call blocking ops when !TASK_RUNNING; state=1 set at [<00000000370c7c68>] prepare_to_wait+0xb1/0x2a0 kernel/sched/wait.c:247
    WARNING: CPU: 1 PID: 340 at kernel/sched/core.c:7253 __might_sleep+0x135/0x190
    kernel/sched/core.c:7253
    Kernel panic - not syncing: panic_on_warn set ...
    CPU: 1 PID: 340 Comm: syz-executor677 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google
    01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xf6/0x16e lib/dump_stack.c:118
     panic+0x2aa/0x6e1 kernel/panic.c:231
     __warn.cold+0x20/0x50 kernel/panic.c:600
     report_bug+0x1bd/0x210 lib/bug.c:198
     handle_bug+0x41/0x80 arch/x86/kernel/traps.c:234
     exc_invalid_op+0x14/0x40 arch/x86/kernel/traps.c:254
     asm_exc_invalid_op+0x12/0x20 arch/x86/include/asm/idtentry.h:536
    RIP: 0010:__might_sleep+0x135/0x190 kernel/sched/core.c:7253
    Code: 65 48 8b 1c 25 40 ef 01 00 48 8d 7b 10 48 89 fe 48 c1 ee 03 80 3c 06 00 75
    2b 48 8b 73 10 48 c7 c7 e0 9e 06 86 e8 ed 12 f6 ff <0f> 0b e9 46 ff ff ff e8 1f
    b2 4b 00 e9 29 ff ff ff e8 15 b2 4b 00
    RSP: 0018:ffff8881cdb77a28 EFLAGS: 00010282
    RAX: 0000000000000000 RBX: ffff8881c6458000 RCX: 0000000000000000
    RDX: ffff8881c6458000 RSI: ffffffff8129ec93 RDI: ffffed1039b6ef37
    RBP: ffffffff86fdade2 R08: 0000000000000001 R09: ffff8881db32f54f
    R10: 0000000000000000 R11: 0000000030343354 R12: 00000000000001f2
    R13: 0000000000000000 R14: 0000000000000068 R15: ffffffff83c1b1aa
     slab_pre_alloc_hook.constprop.0+0xea/0x200 mm/slab.h:498
     slab_alloc_node mm/slub.c:2816 [inline]
     slab_alloc mm/slub.c:2900 [inline]
     kmem_cache_alloc_trace+0x46/0x220 mm/slub.c:2917
     kmalloc include/linux/slab.h:554 [inline]
     dummy_urb_enqueue+0x7a/0x880 drivers/usb/gadget/udc/dummy_hcd.c:1251
     usb_hcd_submit_urb+0x2b2/0x22d0 drivers/usb/core/hcd.c:1547
     usb_submit_urb+0xb4e/0x13e0 drivers/usb/core/urb.c:570
     yurex_write+0x3ea/0x820 drivers/usb/misc/yurex.c:495
    
    This patch changes the call to use GFP_ATOMIC instead of GFP_KERNEL.
    
    Reported-and-tested-by: syzbot+c2c3302f9c601a4b1be2@syzkaller.appspotmail.com
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    CC: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200810182954.GB307778@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c0e5f3b6a7405ba9262175b6f3c4df76e190e49
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue Aug 25 11:43:45 2020 -0400

    drm/amdgpu: Fix buffer overflow in INFO ioctl
    
    commit b5b97cab55eb71daba3283c8b1d2cce456d511a1 upstream.
    
    The values for "se_num" and "sh_num" come from the user in the ioctl.
    They can be in the 0-255 range but if they're more than
    AMDGPU_GFX_MAX_SE (4) or AMDGPU_GFX_MAX_SH_PER_SE (2) then it results in
    an out of bounds read.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cf1b4e89d21b7365698a0547c77c15eac0950ea
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Fri Aug 21 13:53:42 2020 +0300

    device property: Fix the secondary firmware node handling in set_primary_fwnode()
    
    commit c15e1bdda4365a5f17cdadf22bf1c1df13884a9e upstream.
    
    When the primary firmware node pointer is removed from a
    device (set to NULL) the secondary firmware node pointer,
    when it exists, is made the primary node for the device.
    However, the secondary firmware node pointer of the original
    primary firmware node is never cleared (set to NULL).
    
    To avoid situation where the secondary firmware node pointer
    is pointing to a non-existing object, clearing it properly
    when the primary node is removed from a device in
    set_primary_fwnode().
    
    Fixes: 97badf873ab6 ("device property: Make it possible to use secondary firmware nodes")
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b8d8e582e566abe913b839268eb562af8af6728
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Aug 24 19:35:31 2020 +0200

    PM: sleep: core: Fix the handling of pending runtime resume requests
    
    commit e3eb6e8fba65094328b8dca635d00de74ba75b45 upstream.
    
    It has been reported that system-wide suspend may be aborted in the
    absence of any wakeup events due to unforseen interactions of it with
    the runtume PM framework.
    
    One failing scenario is when there are multiple devices sharing an
    ACPI power resource and runtime-resume needs to be carried out for
    one of them during system-wide suspend (for example, because it needs
    to be reconfigured before the whole system goes to sleep).  In that
    case, the runtime-resume of that device involves turning the ACPI
    power resource "on" which in turn causes runtime-resume requests
    to be queued up for all of the other devices sharing it.  Those
    requests go to the runtime PM workqueue which is frozen during
    system-wide suspend, so they are not actually taken care of until
    the resume of the whole system, but the pm_runtime_barrier()
    call in __device_suspend() sees them and triggers system wakeup
    events for them which then cause the system-wide suspend to be
    aborted if wakeup source objects are in active use.
    
    Of course, the logic that leads to triggering those wakeup events is
    questionable in the first place, because clearly there are cases in
    which a pending runtime resume request for a device is not connected
    to any real wakeup events in any way (like the one above).  Moreover,
    it is racy, because the device may be resuming already by the time
    the pm_runtime_barrier() runs and so if the driver doesn't take care
    of signaling the wakeup event as appropriate, it will be lost.
    However, if the driver does take care of that, the extra
    pm_wakeup_event() call in the core is redundant.
    
    Accordingly, drop the conditional pm_wakeup_event() call fron
    __device_suspend() and make the latter call pm_runtime_barrier()
    alone.  Also modify the comment next to that call to reflect the new
    code and extend it to mention the need to avoid unwanted interactions
    between runtime PM and system-wide device suspend callbacks.
    
    Fixes: 1e2ef05bb8cf8 ("PM: Limit race conditions between runtime PM and system sleep (v2)")
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Utkarsh H Patel <utkarsh.h.patel@intel.com>
    Tested-by: Utkarsh H Patel <utkarsh.h.patel@intel.com>
    Tested-by: Pengfei Xu <pengfei.xu@intel.com>
    Cc: All applicable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c8a4e3d7e93021001c3eeb585932fdc41408d74
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Fri Aug 21 12:15:48 2020 +0300

    xhci: Do warm-reset when both CAS and XDEV_RESUME are set
    
    commit 904df64a5f4d5ebd670801d869ca0a6d6a6e8df6 upstream.
    
    Sometimes re-plugging a USB device during system sleep renders the device
    useless:
    [  173.418345] xhci_hcd 0000:00:14.0: Get port status 2-4 read: 0x14203e2, return 0x10262
    ...
    [  176.496485] usb 2-4: Waited 2000ms for CONNECT
    [  176.496781] usb usb2-port4: status 0000.0262 after resume, -19
    [  176.497103] usb 2-4: can't resume, status -19
    [  176.497438] usb usb2-port4: logical disconnect
    
    Because PLS equals to XDEV_RESUME, xHCI driver reports U3 to usbcore,
    despite of CAS bit is flagged.
    
    So proritize CAS over XDEV_RESUME to let usbcore handle warm-reset for
    the port.
    
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200821091549.20556-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4adc80584340cf1f1bcde469c49a221d640a5ea9
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Aug 25 17:22:58 2020 +0200

    XEN uses irqdesc::irq_data_common::handler_data to store a per interrupt XEN data pointer which contains XEN specific information.
    
    commit c330fb1ddc0a922f044989492b7fcca77ee1db46 upstream.
    
    handler data is meant for interrupt handlers and not for storing irq chip
    specific information as some devices require handler data to store internal
    per interrupt information, e.g. pinctrl/GPIO chained interrupt handlers.
    
    This obviously creates a conflict of interests and crashes the machine
    because the XEN pointer is overwritten by the driver pointer.
    
    As the XEN data is not handler specific it should be stored in
    irqdesc::irq_data::chip_data instead.
    
    A simple sed s/irq_[sg]et_handler_data/irq_[sg]et_chip_data/ cures that.
    
    Cc: stable@vger.kernel.org
    Reported-by: Roman Shaposhnik <roman@zededa.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Roman Shaposhnik <roman@zededa.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Link: https://lore.kernel.org/r/87lfi2yckt.fsf@nanos.tec.linutronix.de
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf3947082c185b0e6852b25e36797956d9b197e0
Author: Jan Kara <jack@suse.cz>
Date:   Fri May 29 16:08:58 2020 +0200

    writeback: Fix sync livelock due to b_dirty_time processing
    
    commit f9cae926f35e8230330f28c7b743ad088611a8de upstream.
    
    When we are processing writeback for sync(2), move_expired_inodes()
    didn't set any inode expiry value (older_than_this). This can result in
    writeback never completing if there's steady stream of inodes added to
    b_dirty_time list as writeback rechecks dirty lists after each writeback
    round whether there's more work to be done. Fix the problem by using
    sync(2) start time is inode expiry value when processing b_dirty_time
    list similarly as for ordinarily dirtied inodes. This requires some
    refactoring of older_than_this handling which simplifies the code
    noticeably as a bonus.
    
    Fixes: 0ae45f63d4ef ("vfs: add support for a lazytime mount option")
    CC: stable@vger.kernel.org
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b675b04ae31885a32570288baf9d598828a1b6ad
Author: Jan Kara <jack@suse.cz>
Date:   Fri May 29 15:05:22 2020 +0200

    writeback: Avoid skipping inode writeback
    
    commit 5afced3bf28100d81fb2fe7e98918632a08feaf5 upstream.
    
    Inode's i_io_list list head is used to attach inode to several different
    lists - wb->{b_dirty, b_dirty_time, b_io, b_more_io}. When flush worker
    prepares a list of inodes to writeback e.g. for sync(2), it moves inodes
    to b_io list. Thus it is critical for sync(2) data integrity guarantees
    that inode is not requeued to any other writeback list when inode is
    queued for processing by flush worker. That's the reason why
    writeback_single_inode() does not touch i_io_list (unless the inode is
    completely clean) and why __mark_inode_dirty() does not touch i_io_list
    if I_SYNC flag is set.
    
    However there are two flaws in the current logic:
    
    1) When inode has only I_DIRTY_TIME set but it is already queued in b_io
    list due to sync(2), concurrent __mark_inode_dirty(inode, I_DIRTY_SYNC)
    can still move inode back to b_dirty list resulting in skipping
    writeback of inode time stamps during sync(2).
    
    2) When inode is on b_dirty_time list and writeback_single_inode() races
    with __mark_inode_dirty() like:
    
    writeback_single_inode()                __mark_inode_dirty(inode, I_DIRTY_PAGES)
      inode->i_state |= I_SYNC
      __writeback_single_inode()
                                              inode->i_state |= I_DIRTY_PAGES;
                                              if (inode->i_state & I_SYNC)
                                                bail
      if (!(inode->i_state & I_DIRTY_ALL))
      - not true so nothing done
    
    We end up with I_DIRTY_PAGES inode on b_dirty_time list and thus
    standard background writeback will not writeback this inode leading to
    possible dirty throttling stalls etc. (thanks to Martijn Coenen for this
    analysis).
    
    Fix these problems by tracking whether inode is queued in b_io or
    b_more_io lists in a new I_SYNC_QUEUED flag. When this flag is set, we
    know flush worker has queued inode and we should not touch i_io_list.
    On the other hand we also know that once flush worker is done with the
    inode it will requeue the inode to appropriate dirty list. When
    I_SYNC_QUEUED is not set, __mark_inode_dirty() can (and must) move inode
    to appropriate dirty list.
    
    Reported-by: Martijn Coenen <maco@android.com>
    Reviewed-by: Martijn Coenen <maco@android.com>
    Tested-by: Martijn Coenen <maco@android.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Fixes: 0ae45f63d4ef ("vfs: add support for a lazytime mount option")
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b443d870b3dda12906be1305a68f1bbea2a0af1
Author: Jan Kara <jack@suse.cz>
Date:   Wed Jun 10 17:36:03 2020 +0200

    writeback: Protect inode->i_io_list with inode->i_lock
    
    commit b35250c0816c7cf7d0a8de92f5fafb6a7508a708 upstream.
    
    Currently, operations on inode->i_io_list are protected by
    wb->list_lock. In the following patches we'll need to maintain
    consistency between inode->i_state and inode->i_io_list so change the
    code so that inode->i_lock protects also all inode's i_io_list handling.
    
    Reviewed-by: Martijn Coenen <maco@android.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    CC: stable@vger.kernel.org # Prerequisite for "writeback: Avoid skipping inode writeback"
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 359446d5825d5bb78505a87c02020ec19b955273
Author: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Date:   Mon Aug 17 11:26:46 2020 +0900

    serial: 8250: change lock order in serial8250_do_startup()
    
    commit 205d300aea75623e1ae4aa43e0d265ab9cf195fd upstream.
    
    We have a number of "uart.port->desc.lock vs desc.lock->uart.port"
    lockdep reports coming from 8250 driver; this causes a bit of trouble
    to people, so let's fix it.
    
    The problem is reverse lock order in two different call paths:
    
    chain #1:
    
     serial8250_do_startup()
      spin_lock_irqsave(&port->lock);
       disable_irq_nosync(port->irq);
        raw_spin_lock_irqsave(&desc->lock)
    
    chain #2:
    
      __report_bad_irq()
       raw_spin_lock_irqsave(&desc->lock)
        for_each_action_of_desc()
         printk()
          spin_lock_irqsave(&port->lock);
    
    Fix this by changing the order of locks in serial8250_do_startup():
     do disable_irq_nosync() first, which grabs desc->lock, and grab
     uart->port after that, so that chain #1 and chain #2 have same lock
     order.
    
    Full lockdep splat:
    
     ======================================================
     WARNING: possible circular locking dependency detected
     5.4.39 #55 Not tainted
     ======================================================
    
     swapper/0/0 is trying to acquire lock:
     ffffffffab65b6c0 (console_owner){-...}, at: console_lock_spinning_enable+0x31/0x57
    
     but task is already holding lock:
     ffff88810a8e34c0 (&irq_desc_lock_class){-.-.}, at: __report_bad_irq+0x5b/0xba
    
     which lock already depends on the new lock.
    
     the existing dependency chain (in reverse order) is:
    
     -> #2 (&irq_desc_lock_class){-.-.}:
            _raw_spin_lock_irqsave+0x61/0x8d
            __irq_get_desc_lock+0x65/0x89
            __disable_irq_nosync+0x3b/0x93
            serial8250_do_startup+0x451/0x75c
            uart_startup+0x1b4/0x2ff
            uart_port_activate+0x73/0xa0
            tty_port_open+0xae/0x10a
            uart_open+0x1b/0x26
            tty_open+0x24d/0x3a0
            chrdev_open+0xd5/0x1cc
            do_dentry_open+0x299/0x3c8
            path_openat+0x434/0x1100
            do_filp_open+0x9b/0x10a
            do_sys_open+0x15f/0x3d7
            kernel_init_freeable+0x157/0x1dd
            kernel_init+0xe/0x105
            ret_from_fork+0x27/0x50
    
     -> #1 (&port_lock_key){-.-.}:
            _raw_spin_lock_irqsave+0x61/0x8d
            serial8250_console_write+0xa7/0x2a0
            console_unlock+0x3b7/0x528
            vprintk_emit+0x111/0x17f
            printk+0x59/0x73
            register_console+0x336/0x3a4
            uart_add_one_port+0x51b/0x5be
            serial8250_register_8250_port+0x454/0x55e
            dw8250_probe+0x4dc/0x5b9
            platform_drv_probe+0x67/0x8b
            really_probe+0x14a/0x422
            driver_probe_device+0x66/0x130
            device_driver_attach+0x42/0x5b
            __driver_attach+0xca/0x139
            bus_for_each_dev+0x97/0xc9
            bus_add_driver+0x12b/0x228
            driver_register+0x64/0xed
            do_one_initcall+0x20c/0x4a6
            do_initcall_level+0xb5/0xc5
            do_basic_setup+0x4c/0x58
            kernel_init_freeable+0x13f/0x1dd
            kernel_init+0xe/0x105
            ret_from_fork+0x27/0x50
    
     -> #0 (console_owner){-...}:
            __lock_acquire+0x118d/0x2714
            lock_acquire+0x203/0x258
            console_lock_spinning_enable+0x51/0x57
            console_unlock+0x25d/0x528
            vprintk_emit+0x111/0x17f
            printk+0x59/0x73
            __report_bad_irq+0xa3/0xba
            note_interrupt+0x19a/0x1d6
            handle_irq_event_percpu+0x57/0x79
            handle_irq_event+0x36/0x55
            handle_fasteoi_irq+0xc2/0x18a
            do_IRQ+0xb3/0x157
            ret_from_intr+0x0/0x1d
            cpuidle_enter_state+0x12f/0x1fd
            cpuidle_enter+0x2e/0x3d
            do_idle+0x1ce/0x2ce
            cpu_startup_entry+0x1d/0x1f
            start_kernel+0x406/0x46a
            secondary_startup_64+0xa4/0xb0
    
     other info that might help us debug this:
    
     Chain exists of:
       console_owner --> &port_lock_key --> &irq_desc_lock_class
    
      Possible unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(&irq_desc_lock_class);
                                    lock(&port_lock_key);
                                    lock(&irq_desc_lock_class);
       lock(console_owner);
    
      *** DEADLOCK ***
    
     2 locks held by swapper/0/0:
      #0: ffff88810a8e34c0 (&irq_desc_lock_class){-.-.}, at: __report_bad_irq+0x5b/0xba
      #1: ffffffffab65b5c0 (console_lock){+.+.}, at: console_trylock_spinning+0x20/0x181
    
     stack backtrace:
     CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.4.39 #55
     Hardware name: XXXXXX
     Call Trace:
      <IRQ>
      dump_stack+0xbf/0x133
      ? print_circular_bug+0xd6/0xe9
      check_noncircular+0x1b9/0x1c3
      __lock_acquire+0x118d/0x2714
      lock_acquire+0x203/0x258
      ? console_lock_spinning_enable+0x31/0x57
      console_lock_spinning_enable+0x51/0x57
      ? console_lock_spinning_enable+0x31/0x57
      console_unlock+0x25d/0x528
      ? console_trylock+0x18/0x4e
      vprintk_emit+0x111/0x17f
      ? lock_acquire+0x203/0x258
      printk+0x59/0x73
      __report_bad_irq+0xa3/0xba
      note_interrupt+0x19a/0x1d6
      handle_irq_event_percpu+0x57/0x79
      handle_irq_event+0x36/0x55
      handle_fasteoi_irq+0xc2/0x18a
      do_IRQ+0xb3/0x157
      common_interrupt+0xf/0xf
      </IRQ>
    
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Fixes: 768aec0b5bcc ("serial: 8250: fix shared interrupts issues with SMP and RT kernels")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Reported-by: Raul Rangel <rrangel@google.com>
    BugLink: https://bugs.chromium.org/p/chromium/issues/detail?id=1114800
    Link: https://lore.kernel.org/lkml/CAHQZ30BnfX+gxjPm1DUd5psOTqbyDh4EJE=2=VAMW_VDafctkA@mail.gmail.com/T/#u
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200817022646.1484638-1-sergey.senozhatsky@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f6604b7536f57c270eb88a0db32883e30f50c84d
Author: Valmer Huhn <valmer.huhn@concurrent-rt.com>
Date:   Thu Aug 13 12:52:55 2020 -0400

    serial: 8250_exar: Fix number of ports for Commtech PCIe cards
    
    commit c6b9e95dde7b54e6a53c47241201ab5a4035c320 upstream.
    
    The following in 8250_exar.c line 589 is used to determine the number
    of ports for each Exar board:
    
    nr_ports = board->num_ports ? board->num_ports : pcidev->device & 0x0f;
    
    If the number of ports a card has is not explicitly specified, it defaults
    to the rightmost 4 bits of the PCI device ID. This is prone to error since
    not all PCI device IDs contain a number which corresponds to the number of
    ports that card provides.
    
    This particular case involves COMMTECH_4222PCIE, COMMTECH_4224PCIE and
    COMMTECH_4228PCIE cards with device IDs 0x0022, 0x0020 and 0x0021.
    Currently the multiport cards receive 2, 0 and 1 port instead of 2, 4 and
    8 ports respectively.
    
    To fix this, each Commtech Fastcom PCIe card is given a struct where the
    number of ports is explicitly specified. This ensures 'board->num_ports'
    is used instead of the default 'pcidev->device & 0x0f'.
    
    Fixes: d0aeaa83f0b0 ("serial: exar: split out the exar code from 8250_pci")
    Signed-off-by: Valmer Huhn <valmer.huhn@concurrent-rt.com>
    Tested-by: Valmer Huhn <valmer.huhn@concurrent-rt.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200813165255.GC345440@icarus.concurrent-rt.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c949c6ca210c7ef1f0bb41385de20cf5c9650473
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Aug 13 12:59:54 2020 +0200

    serial: pl011: Don't leak amba_ports entry on driver register error
    
    commit 89efbe70b27dd325d8a8c177743a26b885f7faec upstream.
    
    pl011_probe() calls pl011_setup_port() to reserve an amba_ports[] entry,
    then calls pl011_register_port() to register the uart driver with the
    tty layer.
    
    If registration of the uart driver fails, the amba_ports[] entry is not
    released.  If this happens 14 times (value of UART_NR macro), then all
    amba_ports[] entries will have been leaked and driver probing is no
    longer possible.  (To be fair, that can only happen if the DeviceTree
    doesn't contain alias IDs since they cause the same entry to be used for
    a given port.)   Fix it.
    
    Fixes: ef2889f7ffee ("serial: pl011: Move uart_register_driver call to device")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.15+
    Cc: Tushar Behera <tushar.behera@linaro.org>
    Link: https://lore.kernel.org/r/138f8c15afb2f184d8102583f8301575566064a6.1597316167.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0776ca0bc95a2debfe12191334b2cd63f792dad
Author: Lukas Wunner <lukas@wunner.de>
Date:   Thu Aug 13 12:52:40 2020 +0200

    serial: pl011: Fix oops on -EPROBE_DEFER
    
    commit 27afac93e3bd7fa89749cf11da5d86ac9cde4dba upstream.
    
    If probing of a pl011 gets deferred until after free_initmem(), an oops
    ensues because pl011_console_match() is called which has been freed.
    
    Fix by removing the __init attribute from the function and those it
    calls.
    
    Commit 10879ae5f12e ("serial: pl011: add console matching function")
    introduced pl011_console_match() not just for early consoles but
    regular preferred consoles, such as those added by acpi_parse_spcr().
    Regular consoles may be registered after free_initmem() for various
    reasons, one being deferred probing, another being dynamic enablement
    of serial ports using a DeviceTree overlay.
    
    Thus, pl011_console_match() must not be declared __init and the
    functions it calls mustn't either.
    
    Stack trace for posterity:
    
    Unable to handle kernel paging request at virtual address 80c38b58
    Internal error: Oops: 8000000d [#1] PREEMPT SMP ARM
    PC is at pl011_console_match+0x0/0xfc
    LR is at register_console+0x150/0x468
    [<80187004>] (register_console)
    [<805a8184>] (uart_add_one_port)
    [<805b2b68>] (pl011_register_port)
    [<805b3ce4>] (pl011_probe)
    [<80569214>] (amba_probe)
    [<805ca088>] (really_probe)
    [<805ca2ec>] (driver_probe_device)
    [<805ca5b0>] (__device_attach_driver)
    [<805c8060>] (bus_for_each_drv)
    [<805c9dfc>] (__device_attach)
    [<805ca630>] (device_initial_probe)
    [<805c90a8>] (bus_probe_device)
    [<805c95a8>] (deferred_probe_work_func)
    
    Fixes: 10879ae5f12e ("serial: pl011: add console matching function")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v4.10+
    Cc: Aleksey Makarov <amakarov@marvell.com>
    Cc: Peter Hurley <peter@hurleysoftware.com>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Christopher Covington <cov@codeaurora.org>
    Link: https://lore.kernel.org/r/f827ff09da55b8c57d316a1b008a137677b58921.1597315557.git.lukas@wunner.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5c12abf36c5b6f1e860d1fe8ce3b02d2742e718
Author: Tamseel Shams <m.shams@samsung.com>
Date:   Mon Aug 10 08:30:21 2020 +0530

    serial: samsung: Removes the IRQ not found warning
    
    commit 8c6c378b0cbe0c9f1390986b5f8ffb5f6ff7593b upstream.
    
    In few older Samsung SoCs like s3c2410, s3c2412
    and s3c2440, UART IP is having 2 interrupt lines.
    However, in other SoCs like s3c6400, s5pv210,
    exynos5433, and exynos4210 UART is having only 1
    interrupt line. Due to this, "platform_get_irq(platdev, 1)"
    call in the driver gives the following false-positive error:
    "IRQ index 1 not found" on newer SoC's.
    
    This patch adds the condition to check for Tx interrupt
    only for the those SoC's which have 2 interrupt lines.
    
    Tested-by: Alim Akhtar <alim.akhtar@samsung.com>
    Tested-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Reviewed-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Tamseel Shams <m.shams@samsung.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200810030021.45348-1-m.shams@samsung.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ece9c66b2fbed5261c8cfc22ad20fcaa770e54d1
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Fri Jul 31 12:33:12 2020 -0400

    vt_ioctl: change VT_RESIZEX ioctl to check for error return from vc_resize()
    
    commit bc5269ca765057a1b762e79a1cfd267cd7bf1c46 upstream.
    
    vc_resize() can return with an error after failure. Change VT_RESIZEX ioctl
    to save struct vc_data values that are modified and restore the original
    values in case of error.
    
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Reported-by: syzbot+38a3699c7eaf165b97a6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/1596213192-6635-2-git-send-email-george.kennedy@oracle.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e917ac18dfee9e54f15a3aa0c8a885bae36c455
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Jul 29 23:57:01 2020 +0900

    vt: defer kfree() of vc_screenbuf in vc_do_resize()
    
    commit f8d1653daec02315e06d30246cff4af72e76e54e upstream.
    
    syzbot is reporting UAF bug in set_origin() from vc_do_resize() [1], for
    vc_do_resize() calls kfree(vc->vc_screenbuf) before calling set_origin().
    
    Unfortunately, in set_origin(), vc->vc_sw->con_set_origin() might access
    vc->vc_pos when scroll is involved in order to manipulate cursor, but
    vc->vc_pos refers already released vc->vc_screenbuf until vc->vc_pos gets
    updated based on the result of vc->vc_sw->con_set_origin().
    
    Preserving old buffer and tolerating outdated vc members until set_origin()
    completes would be easier than preventing vc->vc_sw->con_set_origin() from
    accessing outdated vc members.
    
    [1] https://syzkaller.appspot.com/bug?id=6649da2081e2ebdc65c0642c214b27fe91099db3
    
    Reported-by: syzbot <syzbot+9116ecc1978ca3a12f43@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1596034621-4714-1-git-send-email-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 744740fb2d5ac40ecef5180a42dd4d29ea4e5b4e
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Wed Aug 5 12:06:43 2020 +0300

    USB: lvtest: return proper error code in probe
    
    commit 531412492ce93ea29b9ca3b4eb5e3ed771f851dd upstream.
    
    lvs_rh_probe() can return some nonnegative value from usb_control_msg()
    when it is less than "USB_DT_HUB_NONVAR_SIZE + 2" that is considered as
    a failure. Make lvs_rh_probe() return -EINVAL in this case.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200805090643.3432-1-novikov@ispras.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f1223f48f639c0cac8a56404552ca2570dfa04b
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Fri Jul 31 12:33:11 2020 -0400

    fbcon: prevent user font height or width change from causing potential out-of-bounds access
    
    commit 39b3cffb8cf3111738ea993e2757ab382253d86a upstream.
    
    Add a check to fbcon_resize() to ensure that a possible change to user font
    height or user font width will not allow a font data out-of-bounds access.
    NOTE: must use original charcount in calculation as font charcount can
    change and cannot be used to determine the font data allocated size.
    
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Reported-by: syzbot+38a3699c7eaf165b97a6@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/r/1596213192-6635-1-git-send-email-george.kennedy@oracle.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f59c2a79daad27a084639ae556b830e26b682078
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Aug 14 11:04:09 2020 +0100

    btrfs: fix space cache memory leak after transaction abort
    
    commit bbc37d6e475eee8ffa2156ec813efc6bbb43c06d upstream.
    
    If a transaction aborts it can cause a memory leak of the pages array of
    a block group's io_ctl structure. The following steps explain how that can
    happen:
    
    1) Transaction N is committing, currently in state TRANS_STATE_UNBLOCKED
       and it's about to start writing out dirty extent buffers;
    
    2) Transaction N + 1 already started and another task, task A, just called
       btrfs_commit_transaction() on it;
    
    3) Block group B was dirtied (extents allocated from it) by transaction
       N + 1, so when task A calls btrfs_start_dirty_block_groups(), at the
       very beginning of the transaction commit, it starts writeback for the
       block group's space cache by calling btrfs_write_out_cache(), which
       allocates the pages array for the block group's io_ctl with a call to
       io_ctl_init(). Block group A is added to the io_list of transaction
       N + 1 by btrfs_start_dirty_block_groups();
    
    4) While transaction N's commit is writing out the extent buffers, it gets
       an IO error and aborts transaction N, also setting the file system to
       RO mode;
    
    5) Task A has already returned from btrfs_start_dirty_block_groups(), is at
       btrfs_commit_transaction() and has set transaction N + 1 state to
       TRANS_STATE_COMMIT_START. Immediately after that it checks that the
       filesystem was turned to RO mode, due to transaction N's abort, and
       jumps to the "cleanup_transaction" label. After that we end up at
       btrfs_cleanup_one_transaction() which calls btrfs_cleanup_dirty_bgs().
       That helper finds block group B in the transaction's io_list but it
       never releases the pages array of the block group's io_ctl, resulting in
       a memory leak.
    
    In fact at the point when we are at btrfs_cleanup_dirty_bgs(), the pages
    array points to pages that were already released by us at
    __btrfs_write_out_cache() through the call to io_ctl_drop_pages(). We end
    up freeing the pages array only after waiting for the ordered extent to
    complete through btrfs_wait_cache_io(), which calls io_ctl_free() to do
    that. But in the transaction abort case we don't wait for the space cache's
    ordered extent to complete through a call to btrfs_wait_cache_io(), so
    that's why we end up with a memory leak - we wait for the ordered extent
    to complete indirectly by shutting down the work queues and waiting for
    any jobs in them to complete before returning from close_ctree().
    
    We can solve the leak simply by freeing the pages array right after
    releasing the pages (with the call to io_ctl_drop_pages()) at
    __btrfs_write_out_cache(), since we will never use it anymore after that
    and the pages array points to already released pages at that point, which
    is currently not a problem since no one will use it after that, but not a
    good practice anyway since it can easily lead to use-after-free issues.
    
    So fix this by freeing the pages array right after releasing the pages at
    __btrfs_write_out_cache().
    
    This issue can often be reproduced with test case generic/475 from fstests
    and kmemleak can detect it and reports it with the following trace:
    
    unreferenced object 0xffff9bbf009fa600 (size 512):
      comm "fsstress", pid 38807, jiffies 4298504428 (age 22.028s)
      hex dump (first 32 bytes):
        00 a0 7c 4d 3d ed ff ff 40 a0 7c 4d 3d ed ff ff  ..|M=...@.|M=...
        80 a0 7c 4d 3d ed ff ff c0 a0 7c 4d 3d ed ff ff  ..|M=.....|M=...
      backtrace:
        [<00000000f4b5cfe2>] __kmalloc+0x1a8/0x3e0
        [<0000000028665e7f>] io_ctl_init+0xa7/0x120 [btrfs]
        [<00000000a1f95b2d>] __btrfs_write_out_cache+0x86/0x4a0 [btrfs]
        [<00000000207ea1b0>] btrfs_write_out_cache+0x7f/0xf0 [btrfs]
        [<00000000af21f534>] btrfs_start_dirty_block_groups+0x27b/0x580 [btrfs]
        [<00000000c3c23d44>] btrfs_commit_transaction+0xa6f/0xe70 [btrfs]
        [<000000009588930c>] create_subvol+0x581/0x9a0 [btrfs]
        [<000000009ef2fd7f>] btrfs_mksubvol+0x3fb/0x4a0 [btrfs]
        [<00000000474e5187>] __btrfs_ioctl_snap_create+0x119/0x1a0 [btrfs]
        [<00000000708ee349>] btrfs_ioctl_snap_create_v2+0xb0/0xf0 [btrfs]
        [<00000000ea60106f>] btrfs_ioctl+0x12c/0x3130 [btrfs]
        [<000000005c923d6d>] __x64_sys_ioctl+0x83/0xb0
        [<0000000043ace2c9>] do_syscall_64+0x33/0x80
        [<00000000904efbce>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8488e9fd3ca89cbd012aab4cb0ef4f8d2a6439d4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Aug 11 15:39:58 2020 +0200

    HID: i2c-hid: Always sleep 60ms after I2C_HID_PWR_ON commands
    
    commit eef4016243e94c438f177ca8226876eb873b9c75 upstream.
    
    Before this commit i2c_hid_parse() consists of the following steps:
    
    1. Send power on cmd
    2. usleep_range(1000, 5000)
    3. Send reset cmd
    4. Wait for reset to complete (device interrupt, or msleep(100))
    5. Send power on cmd
    6. Try to read HID descriptor
    
    Notice how there is an usleep_range(1000, 5000) after the first power-on
    command, but not after the second power-on command.
    
    Testing has shown that at least on the BMAX Y13 laptop's i2c-hid touchpad,
    not having a delay after the second power-on command causes the HID
    descriptor to read as all zeros.
    
    In case we hit this on other devices too, the descriptor being all zeros
    can be recognized by the following message being logged many, many times:
    
    hid-generic 0018:0911:5288.0002: unknown main item tag 0x0
    
    At the same time as the BMAX Y13's touchpad issue was debugged,
    Kai-Heng was working on debugging some issues with Goodix i2c-hid
    touchpads. It turns out that these need a delay after a PWR_ON command
    too, otherwise they stop working after a suspend/resume cycle.
    According to Goodix a delay of minimal 60ms is needed.
    
    Having multiple cases where we need a delay after sending the power-on
    command, seems to indicate that we should always sleep after the power-on
    command.
    
    This commit fixes the mentioned issues by moving the existing 1ms sleep to
    the i2c_hid_set_power() function and changing it to a 60ms sleep.
    
    Cc: stable@vger.kernel.org
    BugLink: https://bugzilla.kernel.org/show_bug.cgi?id=208247
    Reported-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Reported-and-tested-by: Andrea Borgia <andrea@borgia.bo.it>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42d2f0c1ef8ff3903ebad0d982dbcefb457e9965
Author: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
Date:   Thu Aug 6 08:46:32 2020 -0400

    powerpc/perf: Fix soft lockups due to missed interrupt accounting
    
    [ Upstream commit 17899eaf88d689529b866371344c8f269ba79b5f ]
    
    Performance monitor interrupt handler checks if any counter has
    overflown and calls record_and_restart() in core-book3s which invokes
    perf_event_overflow() to record the sample information. Apart from
    creating sample, perf_event_overflow() also does the interrupt and
    period checks via perf_event_account_interrupt().
    
    Currently we record information only if the SIAR (Sampled Instruction
    Address Register) valid bit is set (using siar_valid() check) and
    hence the interrupt check.
    
    But it is possible that we do sampling for some events that are not
    generating valid SIAR, and hence there is no chance to disable the
    event if interrupts are more than max_samples_per_tick. This leads to
    soft lockup.
    
    Fix this by adding perf_event_account_interrupt() in the invalid SIAR
    code path for a sampling event. ie if SIAR is invalid, just do
    interrupt check and don't record the sample information.
    
    Reported-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Athira Rajeev <atrajeev@linux.vnet.ibm.com>
    Tested-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/1596717992-7321-1-git-send-email-atrajeev@linux.vnet.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2b39775a0492b041db0090f1a96ab12aa09a8db
Author: Sumera Priyadarsini <sylphrenadin@gmail.com>
Date:   Wed Aug 19 00:22:41 2020 +0530

    net: gianfar: Add of_node_put() before goto statement
    
    [ Upstream commit 989e4da042ca4a56bbaca9223d1a93639ad11e17 ]
    
    Every iteration of for_each_available_child_of_node() decrements
    reference count of the previous node, however when control
    is transferred from the middle of the loop, as in the case of
    a return or break or goto, there is no decrement thus ultimately
    resulting in a memory leak.
    
    Fix a potential memory leak in gianfar.c by inserting of_node_put()
    before the goto statement.
    
    Issue found with Coccinelle.
    
    Signed-off-by: Sumera Priyadarsini <sylphrenadin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89a139eeec071ff8590f3940159e4b3d9d239d7b
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Tue Aug 11 16:18:58 2020 +0200

    scsi: ufs: Clean up completed request without interrupt notification
    
    [ Upstream commit b10178ee7fa88b68a9e8adc06534d2605cb0ec23 ]
    
    If somehow no interrupt notification is raised for a completed request and
    its doorbell bit is cleared by host, UFS driver needs to cleanup its
    outstanding bit in ufshcd_abort(). Otherwise, system may behave abnormally
    in the following scenario:
    
    After ufshcd_abort() returns, this request will be requeued by SCSI layer
    with its outstanding bit set. Any future completed request will trigger
    ufshcd_transfer_req_compl() to handle all "completed outstanding bits". At
    this time the "abnormal outstanding bit" will be detected and the "requeued
    request" will be chosen to execute request post-processing flow. This is
    wrong because this request is still "alive".
    
    Link: https://lore.kernel.org/r/20200811141859.27399-2-huobean@gmail.com
    Reviewed-by: Can Guo <cang@codeaurora.org>
    Acked-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Bean Huo <beanhuo@micron.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4408c5436a96141ff2106c4f8e5c5944f00cb1be
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Tue Aug 11 16:39:36 2020 +0300

    scsi: ufs: Improve interrupt handling for shared interrupts
    
    [ Upstream commit 127d5f7c4b653b8be5eb3b2c7bbe13728f9003ff ]
    
    For shared interrupts, the interrupt status might be zero, so check that
    first.
    
    Link: https://lore.kernel.org/r/20200811133936.19171-2-adrian.hunter@intel.com
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31973d413872087583f417e322cd5d0eab087cc8
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Sun Aug 9 13:07:34 2020 +0800

    scsi: ufs: Fix possible infinite loop in ufshcd_hold
    
    [ Upstream commit 93b6c5db06028a3b55122bbb74d0715dd8ca4ae0 ]
    
    In ufshcd_suspend(), after clk-gating is suspended and link is set
    as Hibern8 state, ufshcd_hold() is still possibly invoked before
    ufshcd_suspend() returns. For example, MediaTek's suspend vops may
    issue UIC commands which would call ufshcd_hold() during the command
    issuing flow.
    
    Now if UFSHCD_CAP_HIBERN8_WITH_CLK_GATING capability is enabled,
    then ufshcd_hold() may enter infinite loops because there is no
    clk-ungating work scheduled or pending. In this case, ufshcd_hold()
    shall just bypass, and keep the link as Hibern8 state.
    
    Link: https://lore.kernel.org/r/20200809050734.18740-1-stanley.chu@mediatek.com
    Reviewed-by: Avri Altman <avri.altman@wdc.com>
    Co-developed-by: Andy Teng <andy.teng@mediatek.com>
    Signed-off-by: Andy Teng <andy.teng@mediatek.com>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e70f095bd2175a265110ea5c470aaa8da6f2fd24
Author: Vineeth Vijayan <vneethv@linux.ibm.com>
Date:   Thu Jun 18 16:42:45 2020 +0200

    s390/cio: add cond_resched() in the slow_eval_known_fn() loop
    
    [ Upstream commit 0b8eb2ee9da1e8c9b8082f404f3948aa82a057b2 ]
    
    The scanning through subchannels during the time of an event could
    take significant amount of time in case of platforms with lots of
    known subchannels. This might result in higher scheduling latencies
    for other tasks especially on systems with a single CPU. Add
    cond_resched() call, as the loop in slow_eval_known_fn() can be
    executed for a longer duration.
    
    Reviewed-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Signed-off-by: Vineeth Vijayan <vneethv@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1a2ef291e10ea86c1dd602ab797e5230da17ce7e
Author: Amelie Delaunay <amelie.delaunay@st.com>
Date:   Mon Aug 10 09:12:36 2020 +0200

    spi: stm32: fix stm32_spi_prepare_mbr in case of odd clk_rate
    
    [ Upstream commit 9cc61973bf9385b19ff5dda4a2a7e265fcba85e4 ]
    
    Fix spi->clk_rate when it is odd to the nearest lowest even value because
    minimum SPI divider is 2.
    
    Signed-off-by: Amelie Delaunay <amelie.delaunay@st.com>
    Signed-off-by: Alain Volmat <alain.volmat@st.com>
    Link: https://lore.kernel.org/r/1597043558-29668-4-git-send-email-alain.volmat@st.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66c753d435bd27fb19ed7b54afffbb0041d5537c
Author: Xianting Tian <xianting_tian@126.com>
Date:   Fri Jul 31 12:10:25 2020 -0400

    fs: prevent BUG_ON in submit_bh_wbc()
    
    [ Upstream commit 377254b2cd2252c7c3151b113cbdf93a7736c2e9 ]
    
    If a device is hot-removed --- for example, when a physical device is
    unplugged from pcie slot or a nbd device's network is shutdown ---
    this can result in a BUG_ON() crash in submit_bh_wbc().  This is
    because the when the block device dies, the buffer heads will have
    their Buffer_Mapped flag get cleared, leading to the crash in
    submit_bh_wbc.
    
    We had attempted to work around this problem in commit a17712c8
    ("ext4: check superblock mapped prior to committing").  Unfortunately,
    it's still possible to hit the BUG_ON(!buffer_mapped(bh)) if the
    device dies between when the work-around check in ext4_commit_super()
    and when submit_bh_wbh() is finally called:
    
    Code path:
    ext4_commit_super
        judge if 'buffer_mapped(sbh)' is false, return <== commit a17712c8
              lock_buffer(sbh)
              ...
              unlock_buffer(sbh)
                   __sync_dirty_buffer(sbh,...
                        lock_buffer(sbh)
                            judge if 'buffer_mapped(sbh))' is false, return <== added by this patch
                                submit_bh(...,sbh)
                                    submit_bh_wbc(...,sbh,...)
    
    [100722.966497] kernel BUG at fs/buffer.c:3095! <== BUG_ON(!buffer_mapped(bh))' in submit_bh_wbc()
    [100722.966503] invalid opcode: 0000 [#1] SMP
    [100722.966566] task: ffff8817e15a9e40 task.stack: ffffc90024744000
    [100722.966574] RIP: 0010:submit_bh_wbc+0x180/0x190
    [100722.966575] RSP: 0018:ffffc90024747a90 EFLAGS: 00010246
    [100722.966576] RAX: 0000000000620005 RBX: ffff8818a80603a8 RCX: 0000000000000000
    [100722.966576] RDX: ffff8818a80603a8 RSI: 0000000000020800 RDI: 0000000000000001
    [100722.966577] RBP: ffffc90024747ac0 R08: 0000000000000000 R09: ffff88207f94170d
    [100722.966578] R10: 00000000000437c8 R11: 0000000000000001 R12: 0000000000020800
    [100722.966578] R13: 0000000000000001 R14: 000000000bf9a438 R15: ffff88195f333000
    [100722.966580] FS:  00007fa2eee27700(0000) GS:ffff88203d840000(0000) knlGS:0000000000000000
    [100722.966580] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [100722.966581] CR2: 0000000000f0b008 CR3: 000000201a622003 CR4: 00000000007606e0
    [100722.966582] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [100722.966583] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [100722.966583] PKRU: 55555554
    [100722.966583] Call Trace:
    [100722.966588]  __sync_dirty_buffer+0x6e/0xd0
    [100722.966614]  ext4_commit_super+0x1d8/0x290 [ext4]
    [100722.966626]  __ext4_std_error+0x78/0x100 [ext4]
    [100722.966635]  ? __ext4_journal_get_write_access+0xca/0x120 [ext4]
    [100722.966646]  ext4_reserve_inode_write+0x58/0xb0 [ext4]
    [100722.966655]  ? ext4_dirty_inode+0x48/0x70 [ext4]
    [100722.966663]  ext4_mark_inode_dirty+0x53/0x1e0 [ext4]
    [100722.966671]  ? __ext4_journal_start_sb+0x6d/0xf0 [ext4]
    [100722.966679]  ext4_dirty_inode+0x48/0x70 [ext4]
    [100722.966682]  __mark_inode_dirty+0x17f/0x350
    [100722.966686]  generic_update_time+0x87/0xd0
    [100722.966687]  touch_atime+0xa9/0xd0
    [100722.966690]  generic_file_read_iter+0xa09/0xcd0
    [100722.966694]  ? page_cache_tree_insert+0xb0/0xb0
    [100722.966704]  ext4_file_read_iter+0x4a/0x100 [ext4]
    [100722.966707]  ? __inode_security_revalidate+0x4f/0x60
    [100722.966709]  __vfs_read+0xec/0x160
    [100722.966711]  vfs_read+0x8c/0x130
    [100722.966712]  SyS_pread64+0x87/0xb0
    [100722.966716]  do_syscall_64+0x67/0x1b0
    [100722.966719]  entry_SYSCALL64_slow_path+0x25/0x25
    
    To address this, add the check of 'buffer_mapped(bh)' to
    __sync_dirty_buffer().  This also has the benefit of fixing this for
    other file systems.
    
    With this addition, we can drop the workaround in ext4_commit_supper().
    
    [ Commit description rewritten by tytso. ]
    
    Signed-off-by: Xianting Tian <xianting_tian@126.com>
    Link: https://lore.kernel.org/r/1596211825-8750-1-git-send-email-xianting_tian@126.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 186a205f64b39d4e7c40f1c58acce2188bef27ff
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Sat Jun 20 10:54:26 2020 +0800

    jbd2: abort journal if free a async write error metadata buffer
    
    [ Upstream commit c044f3d8360d2ecf831ba2cc9f08cf9fb2c699fb ]
    
    If we free a metadata buffer which has been failed to async write out
    in the background, the jbd2 checkpoint procedure will not detect this
    failure in jbd2_log_do_checkpoint(), so it may lead to filesystem
    inconsistency after cleanup journal tail. This patch abort the journal
    if free a buffer has write_io_error flag to prevent potential further
    inconsistency.
    
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Link: https://lore.kernel.org/r/20200620025427.1756360-5-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cb61eb16116fdf1f1d0abc06f8ff200792c5a34
Author: Jan Kara <jack@suse.cz>
Date:   Fri Jul 10 16:07:59 2020 +0200

    ext4: don't BUG on inconsistent journal feature
    
    [ Upstream commit 11215630aada28307ba555a43138db6ac54fa825 ]
    
    A customer has reported a BUG_ON in ext4_clear_journal_err() hitting
    during an LTP testing. Either this has been caused by a test setup
    issue where the filesystem was being overwritten while LTP was mounting
    it or the journal replay has overwritten the superblock with invalid
    data. In either case it is preferable we don't take the machine down
    with a BUG_ON. So handle the situation of unexpectedly missing
    has_journal feature more gracefully. We issue warning and fail the mount
    in the cases where the race window is narrow and the failed check is
    most likely a programming error. In cases where fs corruption is more
    likely, we do full ext4_error() handling before failing mount / remount.
    
    Reviewed-by: Lukas Czerner <lczerner@redhat.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200710140759.18031-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0cedd4f1078e916de1ecd0b5b8d7fea5c2d8808e
Author: Lukas Czerner <lczerner@redhat.com>
Date:   Wed Jun 17 11:25:49 2020 +0200

    jbd2: make sure jh have b_transaction set in refile/unfile_buffer
    
    [ Upstream commit 24dc9864914eb5813173cfa53313fcd02e4aea7d ]
    
    Callers of __jbd2_journal_unfile_buffer() and
    __jbd2_journal_refile_buffer() assume that the b_transaction is set. In
    fact if it's not, we can end up with journal_head refcounting errors
    leading to crash much later that might be very hard to track down. Add
    asserts to make sure that is the case.
    
    We also make sure that b_next_transaction is NULL in
    __jbd2_journal_unfile_buffer() since the callers expect that as well and
    we should not get into that stage in this state anyway, leading to
    problems later on if we do.
    
    Tested with fstests.
    
    Signed-off-by: Lukas Czerner <lczerner@redhat.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200617092549.6712-1-lczerner@redhat.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8173f2e33b4bddde8e5266dba933b72bed7e5a0
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Aug 14 07:55:01 2020 +0200

    usb: gadget: f_tcm: Fix some resource leaks in some error paths
    
    [ Upstream commit 07c8434150f4eb0b65cae288721c8af1080fde17 ]
    
    If a memory allocation fails within a 'usb_ep_alloc_request()' call, the
    already allocated memory must be released.
    
    Fix a mix-up in the code and free the correct requests.
    
    Fixes: c52661d60f63 ("usb-gadget: Initial merge of target module for UASP + BOT")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b635d56be3eb4af7e671eed43d479e80f19aad7
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Mon Aug 17 14:19:30 2020 +0200

    i2c: rcar: in slave mode, clear NACK earlier
    
    [ Upstream commit 914a7b3563b8fb92f976619bbd0fa3a4a708baae ]
    
    Currently, a NACK in slave mode is set/cleared when SCL is held low by
    the IP core right before the bit is about to be pushed out. This is too
    late for clearing and then a NACK from the previous byte is still used
    for the current one. Now, let's clear the NACK right after we detected
    the STOP condition following the NACK.
    
    Fixes: de20d1857dd6 ("i2c: rcar: add slave support")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd7f99f508606714b7a841c4be7d1d21664ee23b
Author: Hou Pu <houpu@bytedance.com>
Date:   Fri Aug 21 04:34:42 2020 -0400

    null_blk: fix passing of REQ_FUA flag in null_handle_rq
    
    [ Upstream commit 2d62e6b038e729c3e4bfbfcfbd44800ef0883680 ]
    
    REQ_FUA should be checked using rq->cmd_flags instead of req_op().
    
    Fixes: deb78b419dfda ("nullb: emulate cache")
    Signed-off-by: Hou Pu <houpu@bytedance.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76812ab17e7478ce41442496488f9b0c7e4cab4a
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:45 2020 +0800

    nvme-fc: Fix wrong return value in __nvme_fc_init_request()
    
    [ Upstream commit f34448cd0dc697723fb5f4118f8431d9233b370d ]
    
    On an error exit path, a negative error code should be returned
    instead of a positive return value.
    
    Fixes: e399441de9115 ("nvme-fabrics: Add host support for FC transport")
    Cc: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Reviewed-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 11762461dde40fba05d7b14cd9f34e3b8e0c29a0
Author: Sean Young <sean@mess.org>
Date:   Sat May 2 14:50:52 2020 +0200

    media: gpio-ir-tx: improve precision of transmitted signal due to scheduling
    
    [ Upstream commit ea8912b788f8144e7d32ee61e5ccba45424bef83 ]
    
    usleep_range() may take longer than the max argument due to scheduling,
    especially under load. This is causing random errors in the transmitted
    IR. Remove the usleep_range() in favour of busy-looping with udelay().
    
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 71cebe60580f87b127a516c25f940aec765c6926
Author: Zhi Chen <zhichen@codeaurora.org>
Date:   Tue Jan 14 12:35:21 2020 +0800

    Revert "ath10k: fix DMA related firmware crashes on multiple devices"
    
    [ Upstream commit a1769bb68a850508a492e3674ab1e5e479b11254 ]
    
    This reverts commit 76d164f582150fd0259ec0fcbc485470bcd8033e.
    PCIe hung issue was observed on multiple platforms. The issue was reproduced
    when DUT was configured as AP and associated with 50+ STAs.
    
    For QCA9984/QCA9888, the DMA_BURST_SIZE register controls the AXI burst size
    of the RD/WR access to the HOST MEM.
    0 - No split , RAW read/write transfer size from MAC is put out on bus
        as burst length
    1 - Split at 256 byte boundary
    2,3 - Reserved
    
    With PCIe protocol analyzer, we can see DMA Read crossing 4KB boundary when
    issue happened. It broke PCIe spec and caused PCIe stuck. So revert
    the default value from 0 to 1.
    
    Tested:  IPQ8064 + QCA9984 with firmware 10.4-3.10-00047
             QCS404 + QCA9984 with firmware 10.4-3.9.0.2--00044
             Synaptics AS370 + QCA9888  with firmware 10.4-3.9.0.2--00040
    
    Signed-off-by: Zhi Chen <zhichen@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3032b78b4a139f199130c002332cd60b9f681249
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Aug 6 23:25:01 2020 -0700

    efi: provide empty efi_enter_virtual_mode implementation
    
    [ Upstream commit 2c547f9da0539ad1f7ef7f08c8c82036d61b011a ]
    
    When CONFIG_EFI is not enabled, we might get an undefined reference to
    efi_enter_virtual_mode() error, if this efi_enabled() call isn't inlined
    into start_kernel().  This happens in particular, if start_kernel() is
    annodated with __no_sanitize_address.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Elena Petrova <lenaptr@google.com>
    Cc: Marco Elver <elver@google.com>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: Walter Wu <walter-zh.wu@mediatek.com>
    Link: http://lkml.kernel.org/r/6514652d3a32d3ed33d6eb5c91d0af63bf0d1a0c.1596544734.git.andreyknvl@google.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05e00117282dffc98edea3d97cce13659f341a34
Author: Changming Liu <charley.ashbringer@gmail.com>
Date:   Sat Jul 11 00:30:18 2020 -0400

    USB: sisusbvga: Fix a potential UB casued by left shifting a negative value
    
    [ Upstream commit 2b53a19284f537168fb506f2f40d7fda40a01162 ]
    
    The char buffer buf, receives data directly from user space,
    so its content might be negative and its elements are left
    shifted to form an unsigned integer.
    
    Since left shifting a negative value is undefined behavior, thus
    change the char to u8 to elimintate this UB.
    
    Signed-off-by: Changming Liu <charley.ashbringer@gmail.com>
    Link: https://lore.kernel.org/r/20200711043018.928-1-charley.ashbringer@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d92bfebc7a00287b7aa301b468e017858e399e1e
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jul 6 15:22:46 2020 +0200

    powerpc/spufs: add CONFIG_COREDUMP dependency
    
    [ Upstream commit b648a5132ca3237a0f1ce5d871fff342b0efcf8a ]
    
    The kernel test robot pointed out a slightly different error message
    after recent commit 5456ffdee666 ("powerpc/spufs: simplify spufs core
    dumping") to spufs for a configuration that never worked:
    
       powerpc64-linux-ld: arch/powerpc/platforms/cell/spufs/file.o: in function `.spufs_proxydma_info_dump':
    >> file.c:(.text+0x4c68): undefined reference to `.dump_emit'
       powerpc64-linux-ld: arch/powerpc/platforms/cell/spufs/file.o: in function `.spufs_dma_info_dump':
       file.c:(.text+0x4d70): undefined reference to `.dump_emit'
       powerpc64-linux-ld: arch/powerpc/platforms/cell/spufs/file.o: in function `.spufs_wbox_info_dump':
       file.c:(.text+0x4df4): undefined reference to `.dump_emit'
    
    Add a Kconfig dependency to prevent this from happening again.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Jeremy Kerr <jk@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200706132302.3885935-1-arnd@arndb.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ff4a992b73f59120df3fc279e14e84907f0323e
Author: David Brazdil <dbrazdil@google.com>
Date:   Thu Jun 25 14:14:06 2020 +0100

    KVM: arm64: Fix symbol dependency in __hyp_call_panic_nvhe
    
    [ Upstream commit b38b298aa4397e2dc74a89b4dd3eac9e59b64c96 ]
    
    __hyp_call_panic_nvhe contains inline assembly which did not declare
    its dependency on the __hyp_panic_string symbol.
    
    The static-declared string has previously been kept alive because of a use in
    __hyp_call_panic_vhe. Fix this in preparation for separating the source files
    between VHE and nVHE when the two users land in two different compilation
    units. The static variable otherwise gets dropped when compiling the nVHE
    source file, causing an undefined symbol linker error later.
    
    Signed-off-by: David Brazdil <dbrazdil@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200625131420.71444-2-dbrazdil@google.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83ada7c5ee934d0e5f0b658930c0ec4e387cb83a
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Thu Jul 23 19:04:53 2020 +0200

    media: davinci: vpif_capture: fix potential double free
    
    [ Upstream commit 602649eadaa0c977e362e641f51ec306bc1d365d ]
    
    In case of errors vpif_probe_complete() releases memory for vpif_obj.sd
    and unregisters the V4L2 device. But then this is done again by
    vpif_probe() itself. The patch removes the cleaning from
    vpif_probe_complete().
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ad87c1dc01d7393f43a1920a5c6387ca009872c1
Author: Jason Baron <jbaron@akamai.com>
Date:   Thu Jul 16 14:25:11 2020 -0400

    EDAC/ie31200: Fallback if host bridge device is already initialized
    
    [ Upstream commit 709ed1bcef12398ac1a35c149f3e582db04456c2 ]
    
    The Intel uncore driver may claim some of the pci ids from ie31200 which
    means that the ie31200 edac driver will not initialize them as part of
    pci_register_driver().
    
    Let's add a fallback for this case to 'pci_get_device()' to get a
    reference on the device such that it can still be configured. This is
    similar in approach to other edac drivers.
    
    Signed-off-by: Jason Baron <jbaron@akamai.com>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Mauro Carvalho Chehab <mchehab@kernel.org>
    Cc: linux-edac <linux-edac@vger.kernel.org>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Link: https://lore.kernel.org/r/1594923911-10885-1-git-send-email-jbaron@akamai.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e7ca17d4700cf5966a74089767f6aaffdb0980d
Author: Javed Hasan <jhasan@marvell.com>
Date:   Wed Jul 29 01:18:24 2020 -0700

    scsi: fcoe: Memory leak fix in fcoe_sysfs_fcf_del()
    
    [ Upstream commit e95b4789ff4380733006836d28e554dc296b2298 ]
    
    In fcoe_sysfs_fcf_del(), we first deleted the fcf from the list and then
    freed it if ctlr_dev was not NULL. This was causing a memory leak.
    
    Free the fcf even if ctlr_dev is NULL.
    
    Link: https://lore.kernel.org/r/20200729081824.30996-3-jhasan@marvell.com
    Reviewed-by: Girish Basrur <gbasrur@marvell.com>
    Reviewed-by: Santosh Vernekar <svernekar@marvell.com>
    Reviewed-by: Saurav Kashyap <skashyap@marvell.com>
    Reviewed-by: Shyam Sundar <ssundar@marvell.com>
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01ea94b4d4da697d798579327abbd814a11594f5
Author: Xiubo Li <xiubli@redhat.com>
Date:   Wed Jul 1 01:52:48 2020 -0400

    ceph: fix potential mdsc use-after-free crash
    
    [ Upstream commit fa9967734227b44acb1b6918033f9122dc7825b9 ]
    
    Make sure the delayed work stopped before releasing the resources.
    
    cancel_delayed_work_sync() will only guarantee that the work finishes
    executing if the work is already in the ->worklist.  That means after
    the cancel_delayed_work_sync() returns, it will leave the work requeued
    if it was rearmed at the end. That can lead to a use after free once the
    work struct is freed.
    
    Fix it by flushing the delayed work instead of trying to cancel it, and
    ensure that the work doesn't rearm if the mdsc is stopping.
    
    URL: https://tracker.ceph.com/issues/46293
    Signed-off-by: Xiubo Li <xiubli@redhat.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f608e076951951dbc786ce9cf46d5dad57df0ad0
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Mon Jun 15 16:12:26 2020 +0800

    scsi: iscsi: Do not put host in iscsi_set_flashnode_param()
    
    [ Upstream commit 68e12e5f61354eb42cfffbc20a693153fc39738e ]
    
    If scsi_host_lookup() fails we will jump to put_host which may cause a
    panic. Jump to exit_set_fnode instead.
    
    Link: https://lore.kernel.org/r/20200615081226.183068-1-jingxiangfeng@huawei.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 462dad154543a9d27bb15959741cecb5fe62b3ff
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jul 25 19:51:10 2020 +0100

    locking/lockdep: Fix overflow in presentation of average lock-time
    
    [ Upstream commit a7ef9b28aa8d72a1656fa6f0a01bbd1493886317 ]
    
    Though the number of lock-acquisitions is tracked as unsigned long, this
    is passed as the divisor to div_s64() which interprets it as a s32,
    giving nonsense values with more than 2 billion acquisitons. E.g.
    
      acquisitions   holdtime-min   holdtime-max holdtime-total   holdtime-avg
      -------------------------------------------------------------------------
        2350439395           0.07         353.38   649647067.36          0.-32
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20200725185110.11588-1-chris@chris-wilson.co.uk
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88b793d0a7694d1a36bcd56fbec6e89cc9fbc28a
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:22:23 2020 -0500

    drm/nouveau: Fix reference count leak in nouveau_connector_detect
    
    [ Upstream commit 990a1162986e8eff7ca18cc5a0e03b4304392ae2 ]
    
    nouveau_connector_detect() calls pm_runtime_get_sync and in turn
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 496a1a42ab3b1e37e5b0ef2faff8d03b99c93a0e
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:33:42 2020 -0500

    drm/nouveau/drm/noveau: fix reference count leak in nouveau_fbcon_open
    
    [ Upstream commit bfad51c7633325b5d4b32444efe04329d53297b2 ]
    
    nouveau_fbcon_open() calls calls pm_runtime_get_sync() that
    increments the reference count. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca4884c41132a17b551baa9e4f632992707a5d60
Author: Li Guifu <bluce.liguifu@huawei.com>
Date:   Fri Jul 24 09:38:11 2020 +0800

    f2fs: fix use-after-free issue
    
    [ Upstream commit 99c787cfd2bd04926f1f553b30bd7dcea2caaba1 ]
    
    During umount, f2fs_put_super() unregisters procfs entries after
    f2fs_destroy_segment_manager(), it may cause use-after-free
    issue when umount races with procfs accessing, fix it by relocating
    f2fs_unregister_sysfs().
    
    [Chao Yu: change commit title/message a bit]
    
    Signed-off-by: Li Guifu <bluce.liguifu@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1ea8464a9db72f21853ae9c7b3446c6c4f2bb4b
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Fri Jun 26 12:44:26 2020 +0200

    cec-api: prevent leaking memory through hole in structure
    
    [ Upstream commit 6c42227c3467549ddc65efe99c869021d2f4a570 ]
    
    Fix this smatch warning:
    
    drivers/media/cec/core/cec-api.c:156 cec_adap_g_log_addrs() warn: check that 'log_addrs' doesn't leak information (struct has a hole after
    'features')
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 702eb523ea06c2c1276cd1e676bf9172231c8670
Author: Peng Fan <fanpeng@loongson.cn>
Date:   Tue Jul 14 20:30:18 2020 +0800

    mips/vdso: Fix resource leaks in genvdso.c
    
    [ Upstream commit a859647b4e6bfeb192284d27d24b6a0c914cae1d ]
    
    Close "fd" before the return of map_vdso() and close "out_file"
    in main().
    
    Signed-off-by: Peng Fan <fanpeng@loongson.cn>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a639a710487d0e3dc606e1325cdee49ee85ef01
Author: Reto Schneider <code@reto-schneider.ch>
Date:   Mon Jun 22 15:21:12 2020 +0200

    rtlwifi: rtl8192cu: Prevent leaking urb
    
    [ Upstream commit 03128643eb5453a798db5770952c73dc64fcaf00 ]
    
    If usb_submit_urb fails the allocated urb should be unanchored and
    released.
    
    Signed-off-by: Reto Schneider <code@reto-schneider.ch>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200622132113.14508-3-code@reto-schneider.ch
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c31c388df655a0c7d82fdad0a9fad2c758742b5c
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Wed May 27 21:13:22 2020 -0500

    PCI: Fix pci_create_slot() reference count leak
    
    [ Upstream commit 8a94644b440eef5a7b9c104ac8aa7a7f413e35e5 ]
    
    kobject_init_and_add() takes a reference even when it fails.  If it returns
    an error, kobject_put() must be called to clean up the memory associated
    with the object.
    
    When kobject_init_and_add() fails, call kobject_put() instead of kfree().
    
    b8eb718348b8 ("net-sysfs: Fix reference count leak in
    rx|netdev_queue_add_kobject") fixed a similar problem.
    
    Link: https://lore.kernel.org/r/20200528021322.1984-1-wu000273@umn.edu
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93c253fe916306086c65d7d182d89410280ccb04
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 22:05:18 2020 -0500

    omapfb: fix multiple reference count leaks due to pm_runtime_get_sync
    
    [ Upstream commit 78c2ce9bde70be5be7e3615a2ae7024ed8173087 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Cc: kjlu@umn.edu
    Cc: wu000273@umn.edu
    Cc: Allison Randal <allison@lohutok.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Enrico Weigelt <info@metux.net>
    cc: "Andrew F. Davis" <afd@ti.com>
    Cc: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Alexios Zavras <alexios.zavras@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200614030528.128064-1-pakki001@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 139916920119eff81a105825ed1e6eba974a3ba8
Author: Desnes A. Nunes do Rosario <desnesn@linux.ibm.com>
Date:   Fri Jun 26 13:47:37 2020 -0300

    selftests/powerpc: Purge extra count_pmc() calls of ebb selftests
    
    [ Upstream commit 3337bf41e0dd70b4064cdf60acdfcdc2d050066c ]
    
    An extra count on ebb_state.stats.pmc_count[PMC_INDEX(pmc)] is being per-
    formed when count_pmc() is used to reset PMCs on a few selftests. This
    extra pmc_count can occasionally invalidate results, such as the ones from
    cycles_test shown hereafter. The ebb_check_count() failed with an above
    the upper limit error due to the extra value on ebb_state.stats.pmc_count.
    
    Furthermore, this extra count is also indicated by extra PMC1 trace_log on
    the output of the cycle test (as well as on pmc56_overflow_test):
    
    ==========
       ...
       [21]: counter = 8
       [22]: register SPRN_MMCR0 = 0x0000000080000080
       [23]: register SPRN_PMC1  = 0x0000000080000004
       [24]: counter = 9
       [25]: register SPRN_MMCR0 = 0x0000000080000080
       [26]: register SPRN_PMC1  = 0x0000000080000004
       [27]: counter = 10
       [28]: register SPRN_MMCR0 = 0x0000000080000080
       [29]: register SPRN_PMC1  = 0x0000000080000004
    >> [30]: register SPRN_PMC1  = 0x000000004000051e
    PMC1 count (0x280000546) above upper limit 0x2800003e8 (+0x15e)
    [FAIL] Test FAILED on line 52
    failure: cycles
    ==========
    
    Signed-off-by: Desnes A. Nunes do Rosario <desnesn@linux.ibm.com>
    Tested-by: Sachin Sant <sachinp@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200626164737.21943-1-desnesn@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 19edf5b95a9f5984296037a79ee051fa6287aaa4
Author: Dick Kennedy <dick.kennedy@broadcom.com>
Date:   Tue Jun 30 14:49:54 2020 -0700

    scsi: lpfc: Fix shost refcount mismatch when deleting vport
    
    [ Upstream commit 03dbfe0668e6692917ac278883e0586cd7f7d753 ]
    
    When vports are deleted, it is observed that there is memory/kthread
    leakage as the vport isn't fully being released.
    
    There is a shost reference taken in scsi_add_host_dma that is not released
    during scsi_remove_host. It was noticed that other drivers resolve this by
    doing a scsi_host_put after calling scsi_remove_host.
    
    The vport_delete routine is taking two references one that corresponds to
    an access to the scsi_host in the vport_delete routine and another that is
    released after the adapter mailbox command completes that destroys the VPI
    that corresponds to the vport.
    
    Remove one of the references taken such that the second reference that is
    put will complete the missing scsi_add_host_dma reference and the shost
    will be terminated.
    
    Link: https://lore.kernel.org/r/20200630215001.70793-8-jsmart2021@gmail.com
    Signed-off-by: Dick Kennedy <dick.kennedy@broadcom.com>
    Signed-off-by: James Smart <jsmart2021@gmail.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75fbf494d69abbfac2468411c0aec85abf158ea7
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:05:28 2020 -0500

    drm/amdgpu/display: fix ref count leak when pm_runtime_get_sync fails
    
    [ Upstream commit f79f94765f8c39db0b7dec1d335ab046aac03f20 ]
    
    The call to pm_runtime_get_sync increments the counter even in case of
    failure, leading to incorrect ref count.
    In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33d481b104be047a66dcdf0f8d301de9f892f7bb
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:09:44 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_display_crtc_set_config
    
    [ Upstream commit e008fa6fb41544b63973a529b704ef342f47cc65 ]
    
    in amdgpu_display_crtc_set_config, the call to pm_runtime_get_sync
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9363c9ba98cc6d894439bea40adfbc1f3e8b2e32
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:14:50 2020 -0500

    drm/amd/display: fix ref count leak in amdgpu_drm_ioctl
    
    [ Upstream commit 5509ac65f2fe5aa3c0003237ec629ca55024307c ]
    
    in amdgpu_drm_ioctl the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36974b0e57b5ba4b6ae1b8bb43890265f9ad5ec0
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sun Jun 14 02:12:29 2020 -0500

    drm/amdgpu: fix ref count leak in amdgpu_driver_open_kms
    
    [ Upstream commit 9ba8923cbbe11564dd1bf9f3602add9a9cfbb5c6 ]
    
    in amdgpu_driver_open_kms the call to pm_runtime_get_sync increments the
    counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ad070975f09487c14ce6bde5a7d651e7bdd2da4
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:55:39 2020 -0500

    drm/radeon: fix multiple reference count leak
    
    [ Upstream commit 6f2e8acdb48ed166b65d47837c31b177460491ec ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fec0a4d2cc7d18f630c6ded01572b02e9cbd5b50
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 14:32:26 2020 -0500

    drm/amdkfd: Fix reference count leaks.
    
    [ Upstream commit 20eca0123a35305e38b344d571cf32768854168c ]
    
    kobject_init_and_add() takes reference even when it fails.
    If this function returns an error, kobject_put() must be called to
    properly clean up the memory associated with the object.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ce474084375625c9b01711d5512891d6dd099f6
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Tue Jun 2 14:08:18 2020 +0100

    iommu/iova: Don't BUG on invalid PFNs
    
    [ Upstream commit d3e3d2be688b4b5864538de61e750721a311e4fc ]
    
    Unlike the other instances which represent a complete loss of
    consistency within the rcache mechanism itself, or a fundamental
    and obvious misconfiguration by an IOMMU driver, the BUG_ON() in
    iova_magazine_free_pfns() can be provoked at more or less any time
    in a "spooky action-at-a-distance" manner by any old device driver
    passing nonsense to dma_unmap_*() which then propagates through to
    queue_iova().
    
    Not only is this well outside the IOVA layer's control, it's also
    nowhere near fatal enough to justify panicking anyway - all that
    really achieves is to make debugging the offending driver more
    difficult. Let's simply WARN and otherwise ignore bogus PFNs.
    
    Reported-by: Prakash Gupta <guptap@codeaurora.org>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Reviewed-by: Prakash Gupta <guptap@codeaurora.org>
    Link: https://lore.kernel.org/r/acbd2d092b42738a03a21b417ce64e27f8c91c86.1591103298.git.robin.murphy@arm.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 25eef62ed08fa5f898f0356201f2ae4bbd2e3bda
Author: Bodo Stroesser <bstroesser@ts.fujitsu.com>
Date:   Mon Jun 29 11:37:56 2020 +0200

    scsi: target: tcmu: Fix crash on ARM during cmd completion
    
    [ Upstream commit 5a0c256d96f020e4771f6fd5524b80f89a2d3132 ]
    
    If tcmu_handle_completions() has to process a padding shorter than
    sizeof(struct tcmu_cmd_entry), the current call to
    tcmu_flush_dcache_range() with sizeof(struct tcmu_cmd_entry) as length
    param is wrong and causes crashes on e.g. ARM, because
    tcmu_flush_dcache_range() in this case calls
    flush_dcache_page(vmalloc_to_page(start)); with start being an invalid
    address above the end of the vmalloc'ed area.
    
    The fix is to use the minimum of remaining ring space and sizeof(struct
    tcmu_cmd_entry) as the length param.
    
    The patch was tested on kernel 4.19.118.
    
    See https://bugzilla.kernel.org/show_bug.cgi?id=208045#c10
    
    Link: https://lore.kernel.org/r/20200629093756.8947-1-bstroesser@ts.fujitsu.com
    Tested-by: JiangYu <lnsyyj@hotmail.com>
    Acked-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Bodo Stroesser <bstroesser@ts.fujitsu.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 365838c2de4e575b88985d861db562dfd18e343a
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Fri Jun 19 20:47:29 2020 +0000

    blktrace: ensure our debugfs dir exists
    
    [ Upstream commit b431ef837e3374da0db8ff6683170359aaa0859c ]
    
    We make an assumption that a debugfs directory exists, but since
    this can fail ensure it exists before allowing blktrace setup to
    complete. Otherwise we end up stuffing blktrace files on the debugfs
    root directory. In the worst case scenario this *in theory* can create
    an eventual panic *iff* in the future a similarly named file is created
    prior on the debugfs root directory. This theoretical crash can happen
    due to a recursive removal followed by a specific dentry removal.
    
    This doesn't fix any known crash, however I have seen the files
    go into the main debugfs root directory in cases where the debugfs
    directory was not created due to other internal bugs with blktrace
    now fixed.
    
    blktrace is also completely useless without this directory, so
    this ensures to userspace we only setup blktrace if the kernel
    can stuff files where they are supposed to go into.
    
    debugfs directory creations typically aren't checked for, and we have
    maintainers doing sweep removals of these checks, but since we need this
    check to ensure proper userspace blktrace functionality we make sure
    to annotate the justification for the check.
    
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62ec9c02d8be2ec2071a391f6d3965bd9f75be16
Author: Jia-Ju Bai <baijiaju@tsinghua.edu.cn>
Date:   Sat May 30 16:42:08 2020 +0200

    media: pci: ttpci: av7110: fix possible buffer overflow caused by bad DMA value in debiirq()
    
    [ Upstream commit 6499a0db9b0f1e903d52f8244eacc1d4be00eea2 ]
    
    The value av7110->debi_virt is stored in DMA memory, and it is assigned
    to data, and thus data[0] can be modified at any time by malicious
    hardware. In this case, "if (data[0] < 2)" can be passed, but then
    data[0] can be changed into a large number, which may cause buffer
    overflow when the code "av7110->ci_slot[data[0]]" is used.
    
    To fix this possible bug, data[0] is assigned to a local variable, which
    replaces the use of data[0].
    
    Signed-off-by: Jia-Ju Bai <baijiaju@tsinghua.edu.cn>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c73c29c8f7700ee1da3de2d0dc48ac53ec9b4a5
Author: Alexey Kardashevskiy <aik@ozlabs.ru>
Date:   Fri Jun 12 14:33:03 2020 +1000

    powerpc/xive: Ignore kmemleak false positives
    
    [ Upstream commit f0993c839e95dd6c7f054a1015e693c87e33e4fb ]
    
    xive_native_provision_pages() allocates memory and passes the pointer to
    OPAL so kmemleak cannot find the pointer usage in the kernel memory and
    produces a false positive report (below) (even if the kernel did scan
    OPAL memory, it is unable to deal with __pa() addresses anyway).
    
    This silences the warning.
    
    unreferenced object 0xc000200350c40000 (size 65536):
      comm "qemu-system-ppc", pid 2725, jiffies 4294946414 (age 70776.530s)
      hex dump (first 32 bytes):
        02 00 00 00 50 00 00 00 00 00 00 00 00 00 00 00  ....P...........
        01 00 08 07 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<0000000081ff046c>] xive_native_alloc_vp_block+0x120/0x250
        [<00000000d555d524>] kvmppc_xive_compute_vp_id+0x248/0x350 [kvm]
        [<00000000d69b9c9f>] kvmppc_xive_connect_vcpu+0xc0/0x520 [kvm]
        [<000000006acbc81c>] kvm_arch_vcpu_ioctl+0x308/0x580 [kvm]
        [<0000000089c69580>] kvm_vcpu_ioctl+0x19c/0xae0 [kvm]
        [<00000000902ae91e>] ksys_ioctl+0x184/0x1b0
        [<00000000f3e68bd7>] sys_ioctl+0x48/0xb0
        [<0000000001b2c127>] system_call_exception+0x124/0x1f0
        [<00000000d2b2ee40>] system_call_common+0xe8/0x214
    
    Signed-off-by: Alexey Kardashevskiy <aik@ozlabs.ru>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200612043303.84894-1-aik@ozlabs.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64904fd3691afc6d059b8ad3de4ed7efdeb19e8b
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Fri Jun 5 20:59:15 2020 +0200

    arm64: dts: qcom: msm8916: Pull down PDM GPIOs during sleep
    
    [ Upstream commit e2ee9edc282961783d519c760bbaa20fed4dec38 ]
    
    The original qcom kernel changed the PDM GPIOs to be pull-down
    during sleep at some point. Reportedly this was done because
    there was some "leakage at PDM outputs during sleep":
    
      https://source.codeaurora.org/quic/la/kernel/msm-3.10/commit/?id=0f87e08c1cd3e6484a6f7fb3e74e37340bdcdee0
    
    I cannot say how effective this is, but everything seems to work
    fine with this change so let's apply the same to mainline just
    to be sure.
    
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200605185916.318494-3-stephan@gerhold.net
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc306e9b1c9e38a7a5964f372d6fe75f372c2581
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Jun 15 19:10:32 2020 +0300

    mfd: intel-lpss: Add Intel Emmitsburg PCH PCI IDs
    
    [ Upstream commit 3ea2e4eab64cefa06055bb0541fcdedad4b48565 ]
    
    Intel Emmitsburg PCH has the same LPSS than Intel Ice Lake.
    Add the new IDs to the list of supported devices.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cca0a8e45c80c3994d8dc9b2726c7d8266651ac0
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:44:19 2020 -0500

    ASoC: tegra: Fix reference count leaks.
    
    [ Upstream commit deca195383a6085be62cb453079e03e04d618d6e ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200613204422.24484-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f12ccf2ec532091ce690d98a7b2692c0faec4446
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Wed Aug 5 19:19:26 2020 -0700

    ALSA: pci: delete repeated words in comments
    
    [ Upstream commit c7fabbc51352f50cc58242a6dc3b9c1a3599849b ]
    
    Drop duplicated words in sound/pci/.
    {and, the, at}
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Link: https://lore.kernel.org/r/20200806021926.32418-1-rdunlap@infradead.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9889f1a3717a9b8cb69566e5531a83555f3e2789
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Wed Aug 19 13:53:58 2020 +1200

    gre6: Fix reception with IP6_TNL_F_RCV_DSCP_COPY
    
    [ Upstream commit 272502fcb7cda01ab07fc2fcff82d1d2f73d43cc ]
    
    When receiving an IPv4 packet inside an IPv6 GRE packet, and the
    IP6_TNL_F_RCV_DSCP_COPY flag is set on the tunnel, the IPv4 header would
    get corrupted. This is due to the common ip6_tnl_rcv() function assuming
    that the inner header is always IPv6. This patch checks the tunnel
    protocol for IPv4 inner packets, but still defaults to IPv6.
    
    Fixes: 308edfdf1563 ("gre6: Cleanup GREv6 receive path, call common GRE functions")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebf1bfb62a954bf1e7e09821a3cab4abc5354aca
Author: Mahesh Bandewar <maheshb@google.com>
Date:   Fri Aug 14 22:53:24 2020 -0700

    ipvlan: fix device features
    
    [ Upstream commit d0f5c7076e01fef6fcb86988d9508bf3ce258bd4 ]
    
    Processing NETDEV_FEAT_CHANGE causes IPvlan links to lose
    NETIF_F_LLTX feature because of the incorrect handling of
    features in ipvlan_fix_features().
    
    --before--
    lpaa10:~# ethtool -k ipvl0 | grep tx-lockless
    tx-lockless: on [fixed]
    lpaa10:~# ethtool -K ipvl0 tso off
    Cannot change tcp-segmentation-offload
    Actual changes:
    vlan-challenged: off [fixed]
    tx-lockless: off [fixed]
    lpaa10:~# ethtool -k ipvl0 | grep tx-lockless
    tx-lockless: off [fixed]
    lpaa10:~#
    
    --after--
    lpaa10:~# ethtool -k ipvl0 | grep tx-lockless
    tx-lockless: on [fixed]
    lpaa10:~# ethtool -K ipvl0 tso off
    Cannot change tcp-segmentation-offload
    Could not change any device features
    lpaa10:~# ethtool -k ipvl0 | grep tx-lockless
    tx-lockless: on [fixed]
    lpaa10:~#
    
    Fixes: 2ad7bf363841 ("ipvlan: Initial check-in of the IPVLAN driver.")
    Signed-off-by: Mahesh Bandewar <maheshb@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84d7f644f0cc317ee138445106e296a6943d4821
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94140bf45d58da44da836215d771303074529c2d
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Sat Aug 15 04:44:31 2020 -0400

    net: Fix potential wrong skb->protocol in skb_vlan_untag()
    
    [ Upstream commit 55eff0eb7460c3d50716ed9eccf22257b046ca92 ]
    
    We may access the two bytes after vlan_hdr in vlan_set_encap_proto(). So
    we should pull VLAN_HLEN + sizeof(unsigned short) in skb_vlan_untag() or
    we may access the wrong data.
    
    Fixes: 0d5501c1c828 ("net: Always untag vlan-tagged traffic on input.")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31b3295d40209898b7c01b48f0d04227e9066b13
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Thu May 28 00:58:40 2020 +1000

    powerpc/64s: Don't init FSCR_DSCR in __init_FSCR()
    
    commit 0828137e8f16721842468e33df0460044a0c588b upstream.
    
    __init_FSCR() was added originally in commit 2468dcf641e4 ("powerpc:
    Add support for context switching the TAR register") (Feb 2013), and
    only set FSCR_TAR.
    
    At that point FSCR (Facility Status and Control Register) was not
    context switched, so the setting was permanent after boot.
    
    Later we added initialisation of FSCR_DSCR to __init_FSCR(), in commit
    54c9b2253d34 ("powerpc: Set DSCR bit in FSCR setup") (Mar 2013), again
    that was permanent after boot.
    
    Then commit 2517617e0de6 ("powerpc: Fix context switch DSCR on
    POWER8") (Aug 2013) added a limited context switch of FSCR, just the
    FSCR_DSCR bit was context switched based on thread.dscr_inherit. That
    commit said "This clears the H/FSCR DSCR bit initially", but it
    didn't, it left the initialisation of FSCR_DSCR in __init_FSCR().
    However the initial context switch from init_task to pid 1 would clear
    FSCR_DSCR because thread.dscr_inherit was 0.
    
    That commit also introduced the requirement that FSCR_DSCR be clear
    for user processes, so that we can take the facility unavailable
    interrupt in order to manage dscr_inherit.
    
    Then in commit 152d523e6307 ("powerpc: Create context switch helpers
    save_sprs() and restore_sprs()") (Dec 2015) FSCR was added to
    thread_struct. However it still wasn't fully context switched, we just
    took the existing value and set FSCR_DSCR if the new thread had
    dscr_inherit set. FSCR was still initialised at boot to FSCR_DSCR |
    FSCR_TAR, but that value was not propagated into the thread_struct, so
    the initial context switch set FSCR_DSCR back to 0.
    
    Finally commit b57bd2de8c6c ("powerpc: Improve FSCR init and context
    switching") (Jun 2016) added a full context switch of the FSCR, and
    added an initialisation of init_task.thread.fscr to FSCR_TAR |
    FSCR_EBB, but omitted FSCR_DSCR.
    
    The end result is that swapper runs with FSCR_DSCR set because of the
    initialisation in __init_FSCR(), but no other processes do, they use
    the value from init_task.thread.fscr.
    
    Having FSCR_DSCR set for swapper allows it to access SPR 3 from
    userspace, but swapper never runs userspace, so it has no useful
    effect. It's also confusing to have the value initialised in two
    places to two different values.
    
    So remove FSCR_DSCR from __init_FSCR(), this at least gets us to the
    point where there's a single value of FSCR, even if it's still set in
    two places.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Tested-by: Alistair Popple <alistair@popple.id.au>
    Link: https://lore.kernel.org/r/20200527145843.2761782-1-mpe@ellerman.id.au
    Cc: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c0bf1b46825a290df13ec9dea70b09458802933
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 26 10:30:00 2020 +0200

    Linux 4.14.195
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cbc44f64ee81238e04ef39e2d6e731d51efb0a7
Author: Will Deacon <will@kernel.org>
Date:   Mon Aug 24 12:29:54 2020 +0100

    KVM: arm/arm64: Don't reschedule in unmap_stage2_range()
    
    Upstream commits fdfe7cbd5880 ("KVM: Pass MMU notifier range flags to
    kvm_unmap_hva_range()") and b5331379bc62 ("KVM: arm64: Only reschedule
    if MMU_NOTIFIER_RANGE_BLOCKABLE is not set") fix a "sleeping from invalid
    context" BUG caused by unmap_stage2_range() attempting to reschedule when
    called on the OOM path.
    
    Unfortunately, these patches rely on the MMU notifier callback being
    passed knowledge about whether or not blocking is permitted, which was
    introduced in 4.19. Rather than backport this considerable amount of
    infrastructure just for KVM on arm, instead just remove the conditional
    reschedule.
    
    Cc: <stable@vger.kernel.org> # v4.14 only
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e6993e3d2c30f350d6dec57a67b55132e3b8a87
Author: Stephen Boyd <sboyd@kernel.org>
Date:   Wed Aug 28 11:19:59 2019 -0700

    clk: Evict unregistered clks from parent caches
    
    commit bdcf1dc253248542537a742ae1e7ccafdd03f2d3 upstream.
    
    We leave a dangling pointer in each clk_core::parents array that has an
    unregistered clk as a potential parent when that clk_core pointer is
    freed by clk{_hw}_unregister(). It is impossible for the true parent of
    a clk to be set with clk_set_parent() once the dangling pointer is left
    in the cache because we compare parent pointers in
    clk_fetch_parent_index() instead of checking for a matching clk name or
    clk_hw pointer.
    
    Before commit ede77858473a ("clk: Remove global clk traversal on fetch
    parent index"), we would check clk_hw pointers, which has a higher
    chance of being the same between registration and unregistration, but it
    can still be allocated and freed by the clk provider. In fact, this has
    been a long standing problem since commit da0f0b2c3ad2 ("clk: Correct
    lookup logic in clk_fetch_parent_index()") where we stopped trying to
    compare clk names and skipped over entries in the cache that weren't
    NULL.
    
    There are good (performance) reasons to not do the global tree lookup in
    cases where the cache holds dangling pointers to parents that have been
    unregistered. Let's take the performance hit on the uncommon
    registration path instead. Loop through all the clk_core::parents arrays
    when a clk is unregistered and set the entry to NULL when the parent
    cache entry and clk being unregistered are the same pointer. This will
    fix this problem and avoid the overhead for the "normal" case.
    
    Based on a patch by Bjorn Andersson.
    
    Fixes: da0f0b2c3ad2 ("clk: Correct lookup logic in clk_fetch_parent_index()")
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Tested-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Link: https://lkml.kernel.org/r/20190828181959.204401-1-sboyd@kernel.org
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f3f38f45c0328a9ea067b19746d4dc6d6abf46f
Author: Juergen Gross <jgross@suse.com>
Date:   Thu Aug 20 08:59:08 2020 +0200

    xen: don't reschedule in preemption off sections
    
    For support of long running hypercalls xen_maybe_preempt_hcall() is
    calling cond_resched() in case a hypercall marked as preemptible has
    been interrupted.
    
    Normally this is no problem, as only hypercalls done via some ioctl()s
    are marked to be preemptible. In rare cases when during such a
    preemptible hypercall an interrupt occurs and any softirq action is
    started from irq_exit(), a further hypercall issued by the softirq
    handler will be regarded to be preemptible, too. This might lead to
    rescheduling in spite of the softirq handler potentially having set
    preempt_disable(), leading to splats like:
    
    BUG: sleeping function called from invalid context at drivers/xen/preempt.c:37
    in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 20775, name: xl
    INFO: lockdep is turned off.
    CPU: 1 PID: 20775 Comm: xl Tainted: G D W 5.4.46-1_prgmr_debug.el7.x86_64 #1
    Call Trace:
    <IRQ>
    dump_stack+0x8f/0xd0
    ___might_sleep.cold.76+0xb2/0x103
    xen_maybe_preempt_hcall+0x48/0x70
    xen_do_hypervisor_callback+0x37/0x40
    RIP: e030:xen_hypercall_xen_version+0xa/0x20
    Code: ...
    RSP: e02b:ffffc900400dcc30 EFLAGS: 00000246
    RAX: 000000000004000d RBX: 0000000000000200 RCX: ffffffff8100122a
    RDX: ffff88812e788000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: ffffffff83ee3ad0 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000000 R11: 0000000000000246 R12: ffff8881824aa0b0
    R13: 0000000865496000 R14: 0000000865496000 R15: ffff88815d040000
    ? xen_hypercall_xen_version+0xa/0x20
    ? xen_force_evtchn_callback+0x9/0x10
    ? check_events+0x12/0x20
    ? xen_restore_fl_direct+0x1f/0x20
    ? _raw_spin_unlock_irqrestore+0x53/0x60
    ? debug_dma_sync_single_for_cpu+0x91/0xc0
    ? _raw_spin_unlock_irqrestore+0x53/0x60
    ? xen_swiotlb_sync_single_for_cpu+0x3d/0x140
    ? mlx4_en_process_rx_cq+0x6b6/0x1110 [mlx4_en]
    ? mlx4_en_poll_rx_cq+0x64/0x100 [mlx4_en]
    ? net_rx_action+0x151/0x4a0
    ? __do_softirq+0xed/0x55b
    ? irq_exit+0xea/0x100
    ? xen_evtchn_do_upcall+0x2c/0x40
    ? xen_do_hypervisor_callback+0x29/0x40
    </IRQ>
    ? xen_hypercall_domctl+0xa/0x20
    ? xen_hypercall_domctl+0x8/0x20
    ? privcmd_ioctl+0x221/0x990 [xen_privcmd]
    ? do_vfs_ioctl+0xa5/0x6f0
    ? ksys_ioctl+0x60/0x90
    ? trace_hardirqs_off_thunk+0x1a/0x20
    ? __x64_sys_ioctl+0x16/0x20
    ? do_syscall_64+0x62/0x250
    ? entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Fix that by testing preempt_count() before calling cond_resched().
    
    In kernel 5.8 this can't happen any more due to the entry code rework
    (more than 100 patches, so not a candidate for backporting).
    
    The issue was introduced in kernel 4.3, so this patch should go into
    all stable kernels in [4.3 ... 5.7].
    
    Reported-by: Sarah Newman <srn@prgmr.com>
    Fixes: 0fa2f5cb2b0ecd8 ("sched/preempt, xen: Use need_resched() instead of should_resched()")
    Cc: Sarah Newman <srn@prgmr.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Tested-by: Chris Brannon <cmb@prgmr.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 195d6657aa25f99da1bf08d1fc91ffa39a86e72d
Author: Peter Xu <peterx@redhat.com>
Date:   Thu Aug 6 23:26:11 2020 -0700

    mm/hugetlb: fix calculation of adjust_range_if_pmd_sharing_possible
    
    commit 75802ca66354a39ab8e35822747cd08b3384a99a upstream.
    
    This is found by code observation only.
    
    Firstly, the worst case scenario should assume the whole range was covered
    by pmd sharing.  The old algorithm might not work as expected for ranges
    like (1g-2m, 1g+2m), where the adjusted range should be (0, 1g+2m) but the
    expected range should be (0, 2g).
    
    Since at it, remove the loop since it should not be required.  With that,
    the new code should be faster too when the invalidating range is huge.
    
    Mike said:
    
    : With range (1g-2m, 1g+2m) within a vma (0, 2g) the existing code will only
    : adjust to (0, 1g+2m) which is incorrect.
    :
    : We should cc stable.  The original reason for adjusting the range was to
    : prevent data corruption (getting wrong page).  Since the range is not
    : always adjusted correctly, the potential for corruption still exists.
    :
    : However, I am fairly confident that adjust_range_if_pmd_sharing_possible
    : is only gong to be called in two cases:
    :
    : 1) for a single page
    : 2) for range == entire vma
    :
    : In those cases, the current code should produce the correct results.
    :
    : To be safe, let's just cc stable.
    
    Fixes: 017b1660df89 ("mm: migration: fix migration of huge PMD shared pages")
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200730201636.74778-1-peterx@redhat.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc416caeae308f311407383fd7d6160ead58c1ce
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Aug 22 18:25:52 2020 -0400

    do_epoll_ctl(): clean the failure exits up a bit
    
    commit 52c479697c9b73f628140dcdfcd39ea302d05482 upstream.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ee597ef5e373c4bc59881efb60ad481379a9746
Author: Marc Zyngier <maz@kernel.org>
Date:   Wed Aug 19 17:12:17 2020 +0100

    epoll: Keep a reference on files added to the check list
    
    commit a9ed4a6560b8562b7e2e2bed9527e88001f7b682 upstream.
    
    When adding a new fd to an epoll, and that this new fd is an
    epoll fd itself, we recursively scan the fds attached to it
    to detect cycles, and add non-epool files to a "check list"
    that gets subsequently parsed.
    
    However, this check list isn't completely safe when deletions
    can happen concurrently. To sidestep the issue, make sure that
    a struct file placed on the check list sees its f_count increased,
    ensuring that a concurrent deletion won't result in the file
    disapearing from under our feet.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7978ae493b520e8b902ca8a78974510bf3ff547
Author: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
Date:   Thu Aug 20 11:48:44 2020 +0530

    powerpc/pseries: Do not initiate shutdown when system is running on UPS
    
    commit 90a9b102eddf6a3f987d15f4454e26a2532c1c98 upstream.
    
    As per PAPR we have to look for both EPOW sensor value and event
    modifier to identify the type of event and take appropriate action.
    
    In LoPAPR v1.1 section 10.2.2 includes table 136 "EPOW Action Codes":
    
      SYSTEM_SHUTDOWN 3
    
      The system must be shut down. An EPOW-aware OS logs the EPOW error
      log information, then schedules the system to be shut down to begin
      after an OS defined delay internal (default is 10 minutes.)
    
    Then in section 10.3.2.2.8 there is table 146 "Platform Event Log
    Format, Version 6, EPOW Section", which includes the "EPOW Event
    Modifier":
    
      For EPOW sensor value = 3
      0x01 = Normal system shutdown with no additional delay
      0x02 = Loss of utility power, system is running on UPS/Battery
      0x03 = Loss of system critical functions, system should be shutdown
      0x04 = Ambient temperature too high
      All other values = reserved
    
    We have a user space tool (rtas_errd) on LPAR to monitor for
    EPOW_SHUTDOWN_ON_UPS. Once it gets an event it initiates shutdown
    after predefined time. It also starts monitoring for any new EPOW
    events. If it receives "Power restored" event before predefined time
    it will cancel the shutdown. Otherwise after predefined time it will
    shutdown the system.
    
    Commit 79872e35469b ("powerpc/pseries: All events of
    EPOW_SYSTEM_SHUTDOWN must initiate shutdown") changed our handling of
    the "on UPS/Battery" case, to immediately shutdown the system. This
    breaks existing setups that rely on the userspace tool to delay
    shutdown and let the system run on the UPS.
    
    Fixes: 79872e35469b ("powerpc/pseries: All events of EPOW_SYSTEM_SHUTDOWN must initiate shutdown")
    Cc: stable@vger.kernel.org # v4.0+
    Signed-off-by: Vasant Hegde <hegdevasant@linux.vnet.ibm.com>
    [mpe: Massage change log and add PAPR references]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200820061844.306460-1-hegdevasant@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a0d08463ab9b5f81a1dfea582bf0fa0dd59963b
Author: Tom Rix <trix@redhat.com>
Date:   Fri Aug 21 06:56:00 2020 -0700

    net: dsa: b53: check for timeout
    
    [ Upstream commit 774d977abfd024e6f73484544b9abe5a5cd62de7 ]
    
    clang static analysis reports this problem
    
    b53_common.c:1583:13: warning: The left expression of the compound
      assignment is an uninitialized value. The computed value will
      also be garbage
            ent.port &= ~BIT(port);
            ~~~~~~~~ ^
    
    ent is set by a successful call to b53_arl_read().  Unsuccessful
    calls are caught by an switch statement handling specific returns.
    b32_arl_read() calls b53_arl_op_wait() which fails with the
    unhandled -ETIMEDOUT.
    
    So add -ETIMEDOUT to the switch statement.  Because
    b53_arl_op_wait() already prints out a message, do not add another
    one.
    
    Fixes: 1da6df85c6fb ("net: dsa: b53: Implement ARL add/del/dump operations")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62050c4a55a38359b7cc4a9ecbe34f9e58213d11
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Thu Aug 20 14:53:15 2020 -0700

    hv_netvsc: Fix the queue_mapping in netvsc_vf_xmit()
    
    [ Upstream commit c3d897e01aef8ddc43149e4d661b86f823e3aae7 ]
    
    netvsc_vf_xmit() / dev_queue_xmit() will call VF NIC’s ndo_select_queue
    or netdev_pick_tx() again. They will use skb_get_rx_queue() to get the
    queue number, so the “skb->queue_mapping - 1” will be used. This may
    cause the last queue of VF not been used.
    
    Use skb_record_rx_queue() here, so that the skb_get_rx_queue() called
    later will get the correct queue number, and VF will be able to use
    all queues.
    
    Fixes: b3bf5666a510 ("hv_netvsc: defer queue selection to VF")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5f59ec4a485bd83fef03f32002df5e095581073
Author: Jiri Wiesner <jwiesner@suse.com>
Date:   Sun Aug 16 20:52:44 2020 +0200

    bonding: fix active-backup failover for current ARP slave
    
    [ Upstream commit 0410d07190961ac526f05085765a8d04d926545b ]
    
    When the ARP monitor is used for link detection, ARP replies are
    validated for all slaves (arp_validate=3) and fail_over_mac is set to
    active, two slaves of an active-backup bond may get stuck in a state
    where both of them are active and pass packets that they receive to
    the bond. This state makes IPv6 duplicate address detection fail. The
    state is reached thus:
    1. The current active slave goes down because the ARP target
       is not reachable.
    2. The current ARP slave is chosen and made active.
    3. A new slave is enslaved. This new slave becomes the current active
       slave and can reach the ARP target.
    As a result, the current ARP slave stays active after the enslave
    action has finished and the log is littered with "PROBE BAD" messages:
    > bond0: PROBE: c_arp ens10 && cas ens11 BAD
    The workaround is to remove the slave with "going back" status from
    the bond and re-enslave it. This issue was encountered when DPDK PMD
    interfaces were being enslaved to an active-backup bond.
    
    I would be possible to fix the issue in bond_enslave() or
    bond_change_active_slave() but the ARP monitor was fixed instead to
    keep most of the actions changing the current ARP slave in the ARP
    monitor code. The current ARP slave is set as inactive and backup
    during the commit phase. A new state, BOND_LINK_FAIL, has been
    introduced for slaves in the context of the ARP monitor. This allows
    administrators to see how slaves are rotated for sending ARP requests
    and attempts are made to find a new active slave.
    
    Fixes: b2220cad583c9 ("bonding: refactor ARP active-backup monitor")
    Signed-off-by: Jiri Wiesner <jwiesner@suse.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b00ec874f16fbd677b04b2014d523c357f08e943
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Mon Aug 17 11:09:13 2020 -0600

    vfio/type1: Add proper error unwind for vfio_iommu_replay()
    
    [ Upstream commit aae7a75a821a793ed6b8ad502a5890fb8e8f172d ]
    
    The vfio_iommu_replay() function does not currently unwind on error,
    yet it does pin pages, perform IOMMU mapping, and modify the vfio_dma
    structure to indicate IOMMU mapping.  The IOMMU mappings are torn down
    when the domain is destroyed, but the other actions go on to cause
    trouble later.  For example, the iommu->domain_list can be empty if we
    only have a non-IOMMU backed mdev attached.  We don't currently check
    if the list is empty before getting the first entry in the list, which
    leads to a bogus domain pointer.  If a vfio_dma entry is erroneously
    marked as iommu_mapped, we'll attempt to use that bogus pointer to
    retrieve the existing physical page addresses.
    
    This is the scenario that uncovered this issue, attempting to hot-add
    a vfio-pci device to a container with an existing mdev device and DMA
    mappings, one of which could not be pinned, causing a failure adding
    the new group to the existing container and setting the conditions
    for a subsequent attempt to explode.
    
    To resolve this, we can first check if the domain_list is empty so
    that we can reject replay of a bogus domain, should we ever encounter
    this inconsistent state again in the future.  The real fix though is
    to add the necessary unwind support, which means cleaning up the
    current pinning if an IOMMU mapping fails, then walking back through
    the r-b tree of DMA entries, reading from the IOMMU which ranges are
    mapped, and unmapping and unpinning those ranges.  To be able to do
    this, we also defer marking the DMA entry as IOMMU mapped until all
    entries are processed, in order to allow the unwind to know the
    disposition of each entry.
    
    Fixes: a54eb55045ae ("vfio iommu type1: Add support for mediated devices")
    Reported-by: Zhiyi Guo <zhguo@redhat.com>
    Tested-by: Zhiyi Guo <zhguo@redhat.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1966ea13c0308dd0f699526f6e2dfe50732c1236
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Aug 13 16:41:10 2020 +0800

    ASoC: intel: Fix memleak in sst_media_open
    
    [ Upstream commit 062fa09f44f4fb3776a23184d5d296b0c8872eb9 ]
    
    When power_up_sst() fails, stream needs to be freed
    just like when try_module_get() fails. However, current
    code is returning directly and ends up leaking memory.
    
    Fixes: 0121327c1a68b ("ASoC: Intel: mfld-pcm: add control for powering up/down dsp")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Acked-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200813084112.26205-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3722a7b516112c41e76ee1eadb3d200f1fcb017a
Author: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
Date:   Tue Aug 11 11:34:52 2020 +0100

    ASoC: msm8916-wcd-analog: fix register Interrupt offset
    
    [ Upstream commit ff69c97ef84c9f7795adb49e9f07c9adcdd0c288 ]
    
    For some reason interrupt set and clear register offsets are
    not set correctly.
    This patch corrects them!
    
    Fixes: 585e881e5b9e ("ASoC: codecs: Add msm8916-wcd analog codec")
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Tested-by: Stephan Gerhold <stephan@gerhold.net>
    Reviewed-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200811103452.20448-1-srinivas.kandagatla@linaro.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58372e59bb1a9702f24d56d8b21fb8bc7afad349
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Aug 14 20:05:58 2020 -0700

    bonding: fix a potential double-unregister
    
    [ Upstream commit 832707021666411d04795c564a4adea5d6b94f17 ]
    
    When we tear down a network namespace, we unregister all
    the netdevices within it. So we may queue a slave device
    and a bonding device together in the same unregister queue.
    
    If the only slave device is non-ethernet, it would
    automatically unregister the bonding device as well. Thus,
    we may end up unregistering the bonding device twice.
    
    Workaround this special case by checking reg_state.
    
    Fixes: 9b5e383c11b0 ("net: Introduce unregister_netdevice_many()")
    Reported-by: syzbot+af23e7f3e0a7e10c8b67@syzkaller.appspotmail.com
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Andy Gospodarek <andy@greyhouse.net>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 818c561428c5b183187f6bb051265aed28e28837
Author: Jarod Wilson <jarod@redhat.com>
Date:   Thu Aug 13 10:09:00 2020 -0400

    bonding: show saner speed for broadcast mode
    
    [ Upstream commit 4ca0d9ac3fd8f9f90b72a15d8da2aca3ffb58418 ]
    
    Broadcast mode bonds transmit a copy of all traffic simultaneously out of
    all interfaces, so the "speed" of the bond isn't really the aggregate of
    all interfaces, but rather, the speed of the slowest active interface.
    
    Also, the type of the speed field is u32, not unsigned long, so adjust
    that accordingly, as required to make min() function here without
    complaining about mismatching types.
    
    Fixes: bb5b052f751b ("bond: add support to read speed and duplex via ethtool")
    CC: Jay Vosburgh <j.vosburgh@gmail.com>
    CC: Veaceslav Falico <vfalico@gmail.com>
    CC: Andy Gospodarek <andy@greyhouse.net>
    CC: "David S. Miller" <davem@davemloft.net>
    CC: netdev@vger.kernel.org
    Acked-by: Jay Vosburgh <jay.vosburgh@canonical.com>
    Signed-off-by: Jarod Wilson <jarod@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5ee49c3d9bc1dc1b9e677e836937b26c8b82ae62
Author: Fugang Duan <fugang.duan@nxp.com>
Date:   Thu Aug 13 15:13:14 2020 +0800

    net: fec: correct the error path for regulator disable in probe
    
    [ Upstream commit c6165cf0dbb82ded90163dce3ac183fc7a913dc4 ]
    
    Correct the error path for regulator disable.
    
    Fixes: 9269e5560b26 ("net: fec: add phy-reset-gpios PROBE_DEFER check")
    Signed-off-by: Fugang Duan <fugang.duan@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20cf9e6f89e8591dfe549eb63a833bb55844d92c
Author: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
Date:   Tue Aug 11 10:56:49 2020 +0000

    i40e: Fix crash during removing i40e driver
    
    [ Upstream commit 5b6d4a7f20b09c47ca598760f6dafd554af8b6d5 ]
    
    Fix the reason of crashing system by add waiting time to finish reset
    recovery process before starting remove driver procedure.
    Now VSI is releasing if VSI is not in reset recovery mode.
    Without this fix it was possible to start remove driver if other
    processing command need reset recovery procedure which resulted in
    null pointer dereference. VSI used by the ethtool process has been
    cleared by remove driver process.
    
    [ 6731.508665] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [ 6731.508668] #PF: supervisor read access in kernel mode
    [ 6731.508670] #PF: error_code(0x0000) - not-present page
    [ 6731.508671] PGD 0 P4D 0
    [ 6731.508674] Oops: 0000 [#1] SMP PTI
    [ 6731.508679] Hardware name: Intel Corporation S2600WT2R/S2600WT2R, BIOS SE5C610.86B.01.01.0021.032120170601 03/21/2017
    [ 6731.508694] RIP: 0010:i40e_down+0x252/0x310 [i40e]
    [ 6731.508696] Code: c7 78 de fa c0 e8 61 02 3a c1 66 83 bb f6 0c 00 00 00 0f 84 bf 00 00 00 45 31 e4 45 31 ff eb 03 41 89 c7 48 8b 83 98 0c 00 00 <4a> 8b 3c 20 e8 a5 79 02 00 48 83 bb d0 0c 00 00 00 74 10 48 8b 83
    [ 6731.508698] RSP: 0018:ffffb75ac7b3faf0 EFLAGS: 00010246
    [ 6731.508700] RAX: 0000000000000000 RBX: ffff9c9874bd5000 RCX: 0000000000000007
    [ 6731.508701] RDX: 0000000000000000 RSI: 0000000000000096 RDI: ffff9c987f4d9780
    [ 6731.508703] RBP: ffffb75ac7b3fb30 R08: 0000000000005b60 R09: 0000000000000004
    [ 6731.508704] R10: ffffb75ac64fbd90 R11: 0000000000000001 R12: 0000000000000000
    [ 6731.508706] R13: ffff9c97a08e0000 R14: ffff9c97a08e0a68 R15: 0000000000000000
    [ 6731.508708] FS:  00007f2617cd2740(0000) GS:ffff9c987f4c0000(0000) knlGS:0000000000000000
    [ 6731.508710] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 6731.508711] CR2: 0000000000000000 CR3: 0000001e765c4006 CR4: 00000000003606e0
    [ 6731.508713] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 6731.508714] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 6731.508715] Call Trace:
    [ 6731.508734]  i40e_vsi_close+0x84/0x90 [i40e]
    [ 6731.508742]  i40e_quiesce_vsi.part.98+0x3c/0x40 [i40e]
    [ 6731.508749]  i40e_pf_quiesce_all_vsi+0x55/0x60 [i40e]
    [ 6731.508757]  i40e_prep_for_reset+0x59/0x130 [i40e]
    [ 6731.508765]  i40e_reconfig_rss_queues+0x5a/0x120 [i40e]
    [ 6731.508774]  i40e_set_channels+0xda/0x170 [i40e]
    [ 6731.508778]  ethtool_set_channels+0xe9/0x150
    [ 6731.508781]  dev_ethtool+0x1b94/0x2920
    [ 6731.508805]  dev_ioctl+0xc2/0x590
    [ 6731.508811]  sock_do_ioctl+0xae/0x150
    [ 6731.508813]  sock_ioctl+0x34f/0x3c0
    [ 6731.508821]  ksys_ioctl+0x98/0xb0
    [ 6731.508828]  __x64_sys_ioctl+0x1a/0x20
    [ 6731.508831]  do_syscall_64+0x57/0x1c0
    [ 6731.508835]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 4b8164467b85 ("i40e: Add common function for finding VSI by type")
    Signed-off-by: Grzegorz Szczurek <grzegorzx.szczurek@intel.com>
    Signed-off-by: Arkadiusz Kubalewski <arkadiusz.kubalewski@intel.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f8b92a2f264f31b6dc7aa397252ff82e6d473c7
Author: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
Date:   Thu Aug 6 13:40:59 2020 +0000

    i40e: Set RX_ONLY mode for unicast promiscuous on VLAN
    
    [ Upstream commit 4bd5e02a2ed1575c2f65bd3c557a077dd399f0e8 ]
    
    Trusted VF with unicast promiscuous mode set, could listen to TX
    traffic of other VFs.
    Set unicast promiscuous mode to RX traffic, if VSI has port VLAN
    configured. Rename misleading I40E_AQC_SET_VSI_PROMISC_TX bit to
    I40E_AQC_SET_VSI_PROMISC_RX_ONLY. Aligned unicast promiscuous with
    VLAN to the one without VLAN.
    
    Fixes: 6c41a7606967 ("i40e: Add promiscuous on VLAN support")
    Fixes: 3b1200891b7f ("i40e: When in promisc mode apply promisc mode to Tx Traffic as well")
    Signed-off-by: Przemyslaw Patynowski <przemyslawx.patynowski@intel.com>
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Signed-off-by: Arkadiusz Kubalewski <arkadiusz.kubalewski@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1c49de955a7b27a6fe90e6a3eaecc121454326c
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Wed Jun 17 14:19:04 2020 -0500

    ext4: fix potential negative array index in do_split()
    
    [ Upstream commit 5872331b3d91820e14716632ebb56b1399b34fe1 ]
    
    If for any reason a directory passed to do_split() does not have enough
    active entries to exceed half the size of the block, we can end up
    iterating over all "count" entries without finding a split point.
    
    In this case, count == move, and split will be zero, and we will
    attempt a negative index into map[].
    
    Guard against this by detecting this case, and falling back to
    split-to-half-of-count instead; in this case we will still have
    plenty of space (> half blocksize) in each split block.
    
    Fixes: ef2b02d3e617 ("ext34: ensure do_split leaves enough free space in both blocks")
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/f53e246b-647c-64bb-16ec-135383c70ad7@redhat.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32e965887f261074077929320451cf411491d0f2
Author: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
Date:   Tue Aug 11 18:33:54 2020 -0700

    alpha: fix annotation of io{read,write}{16,32}be()
    
    [ Upstream commit bd72866b8da499e60633ff28f8a4f6e09ca78efe ]
    
    These accessors must be used to read/write a big-endian bus.  The value
    returned or written is native-endian.
    
    However, these accessors are defined using be{16,32}_to_cpu() or
    cpu_to_be{16,32}() to make the endian conversion but these expect a
    __be{16,32} when none is present.  Keeping them would need a force cast
    that would solve nothing at all.
    
    So, do the conversion using swab{16,32}, like done in asm-generic for
    similar situations.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Richard Henderson <rth@twiddle.net>
    Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Cc: Matt Turner <mattst88@gmail.com>
    Cc: Stephen Boyd <sboyd@kernel.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Link: http://lkml.kernel.org/r/20200622114232.80039-1-luc.vanoostenryck@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b3b28551711ca0d62417d27b3d7aa966e7f122c
Author: Eiichi Tsukata <devel@etsukata.com>
Date:   Thu Aug 6 15:18:48 2020 -0700

    xfs: Fix UBSAN null-ptr-deref in xfs_sysfs_init
    
    [ Upstream commit 96cf2a2c75567ff56195fe3126d497a2e7e4379f ]
    
    If xfs_sysfs_init is called with parent_kobj == NULL, UBSAN
    shows the following warning:
    
      UBSAN: null-ptr-deref in ./fs/xfs/xfs_sysfs.h:37:23
      member access within null pointer of type 'struct xfs_kobj'
      Call Trace:
       dump_stack+0x10e/0x195
       ubsan_type_mismatch_common+0x241/0x280
       __ubsan_handle_type_mismatch_v1+0x32/0x40
       init_xfs_fs+0x12b/0x28f
       do_one_initcall+0xdd/0x1d0
       do_initcall_level+0x151/0x1b6
       do_initcalls+0x50/0x8f
       do_basic_setup+0x29/0x2b
       kernel_init_freeable+0x19f/0x20b
       kernel_init+0x11/0x1e0
       ret_from_fork+0x22/0x30
    
    Fix it by checking parent_kobj before the code accesses its member.
    
    Signed-off-by: Eiichi Tsukata <devel@etsukata.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    [darrick: minor whitespace edits]
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4596fa78b85191af0e8c2b94ae014b9290d428bd
Author: Mao Wenan <wenan.mao@linux.alibaba.com>
Date:   Sun Aug 2 15:44:09 2020 +0800

    virtio_ring: Avoid loop when vq is broken in virtqueue_poll
    
    [ Upstream commit 481a0d7422db26fb63e2d64f0652667a5c6d0f3e ]
    
    The loop may exist if vq->broken is true,
    virtqueue_get_buf_ctx_packed or virtqueue_get_buf_ctx_split
    will return NULL, so virtnet_poll will reschedule napi to
    receive packet, it will lead cpu usage(si) to 100%.
    
    call trace as below:
    virtnet_poll
            virtnet_receive
                    virtqueue_get_buf_ctx
                            virtqueue_get_buf_ctx_packed
                            virtqueue_get_buf_ctx_split
            virtqueue_napi_complete
                    virtqueue_poll           //return true
                    virtqueue_napi_schedule //it will reschedule napi
    
    to fix this, return false if vq is broken in virtqueue_poll.
    
    Signed-off-by: Mao Wenan <wenan.mao@linux.alibaba.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Link: https://lore.kernel.org/r/1596354249-96204-1-git-send-email-wenan.mao@linux.alibaba.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7596285b594ca1b2467c2cfd33e1057c8e05ce9d
Author: Javed Hasan <jhasan@marvell.com>
Date:   Wed Jul 29 01:18:23 2020 -0700

    scsi: libfc: Free skb in fc_disc_gpn_id_resp() for valid cases
    
    [ Upstream commit ec007ef40abb6a164d148b0dc19789a7a2de2cc8 ]
    
    In fc_disc_gpn_id_resp(), skb is supposed to get freed in all cases except
    for PTR_ERR. However, in some cases it didn't.
    
    This fix is to call fc_frame_free(fp) before function returns.
    
    Link: https://lore.kernel.org/r/20200729081824.30996-2-jhasan@marvell.com
    Reviewed-by: Girish Basrur <gbasrur@marvell.com>
    Reviewed-by: Santosh Vernekar <svernekar@marvell.com>
    Reviewed-by: Saurav Kashyap <skashyap@marvell.com>
    Reviewed-by: Shyam Sundar <ssundar@marvell.com>
    Signed-off-by: Javed Hasan <jhasan@marvell.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 057be95e249f85c8228ba2686cea6ddf1dcc105b
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Mon Aug 3 11:37:20 2020 -0700

    cpufreq: intel_pstate: Fix cpuinfo_max_freq when MSR_TURBO_RATIO_LIMIT is 0
    
    [ Upstream commit 4daca379c703ff55edc065e8e5173dcfeecf0148 ]
    
    The MSR_TURBO_RATIO_LIMIT can be 0. This is not an error. User can update
    this MSR via BIOS settings on some systems or can use msr tools to update.
    Also some systems boot with value = 0.
    
    This results in display of cpufreq/cpuinfo_max_freq wrong. This value
    will be equal to cpufreq/base_frequency, even though turbo is enabled.
    
    But platform will still function normally in HWP mode as we get max
    1-core frequency from the MSR_HWP_CAPABILITIES. This MSR is already used
    to calculate cpu->pstate.turbo_freq, which is used for to set
    policy->cpuinfo.max_freq. But some other places cpu->pstate.turbo_pstate
    is used. For example to set policy->max.
    
    To fix this, also update cpu->pstate.turbo_pstate when updating
    cpu->pstate.turbo_freq.
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc6b7a93a79549c49abb5f0c7be3e54100fc0332
Author: Zhe Li <lizhe67@huawei.com>
Date:   Fri Jun 19 17:06:35 2020 +0800

    jffs2: fix UAF problem
    
    [ Upstream commit 798b7347e4f29553db4b996393caf12f5b233daf ]
    
    The log of UAF problem is listed below.
    BUG: KASAN: use-after-free in jffs2_rmdir+0xa4/0x1cc [jffs2] at addr c1f165fc
    Read of size 4 by task rm/8283
    =============================================================================
    BUG kmalloc-32 (Tainted: P    B      O   ): kasan: bad access detected
    -----------------------------------------------------------------------------
    
    INFO: Allocated in 0xbbbbbbbb age=3054364 cpu=0 pid=0
            0xb0bba6ef
            jffs2_write_dirent+0x11c/0x9c8 [jffs2]
            __slab_alloc.isra.21.constprop.25+0x2c/0x44
            __kmalloc+0x1dc/0x370
            jffs2_write_dirent+0x11c/0x9c8 [jffs2]
            jffs2_do_unlink+0x328/0x5fc [jffs2]
            jffs2_rmdir+0x110/0x1cc [jffs2]
            vfs_rmdir+0x180/0x268
            do_rmdir+0x2cc/0x300
            ret_from_syscall+0x0/0x3c
    INFO: Freed in 0x205b age=3054364 cpu=0 pid=0
            0x2e9173
            jffs2_add_fd_to_list+0x138/0x1dc [jffs2]
            jffs2_add_fd_to_list+0x138/0x1dc [jffs2]
            jffs2_garbage_collect_dirent.isra.3+0x21c/0x288 [jffs2]
            jffs2_garbage_collect_live+0x16bc/0x1800 [jffs2]
            jffs2_garbage_collect_pass+0x678/0x11d4 [jffs2]
            jffs2_garbage_collect_thread+0x1e8/0x3b0 [jffs2]
            kthread+0x1a8/0x1b0
            ret_from_kernel_thread+0x5c/0x64
    Call Trace:
    [c17ddd20] [c02452d4] kasan_report.part.0+0x298/0x72c (unreliable)
    [c17ddda0] [d2509680] jffs2_rmdir+0xa4/0x1cc [jffs2]
    [c17dddd0] [c026da04] vfs_rmdir+0x180/0x268
    [c17dde00] [c026f4e4] do_rmdir+0x2cc/0x300
    [c17ddf40] [c001a658] ret_from_syscall+0x0/0x3c
    
    The root cause is that we don't get "jffs2_inode_info.sem" before
    we scan list "jffs2_inode_info.dents" in function jffs2_rmdir.
    This patch add codes to get "jffs2_inode_info.sem" before we scan
    "jffs2_inode_info.dents" to slove the UAF problem.
    
    Signed-off-by: Zhe Li <lizhe67@huawei.com>
    Reviewed-by: Hou Tao <houtao1@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 43a3ee10992b7ca9bc25abcf44c51d88868c500a
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Tue Jul 14 10:36:09 2020 -0700

    xfs: fix inode quota reservation checks
    
    [ Upstream commit f959b5d037e71a4d69b5bf71faffa065d9269b4a ]
    
    xfs_trans_dqresv is the function that we use to make reservations
    against resource quotas.  Each resource contains two counters: the
    q_core counter, which tracks resources allocated on disk; and the dquot
    reservation counter, which tracks how much of that resource has either
    been allocated or reserved by threads that are working on metadata
    updates.
    
    For disk blocks, we compare the proposed reservation counter against the
    hard and soft limits to decide if we're going to fail the operation.
    However, for inodes we inexplicably compare against the q_core counter,
    not the incore reservation count.
    
    Since the q_core counter is always lower than the reservation count and
    we unlock the dquot between reservation and transaction commit, this
    means that multiple threads can reserve the last inode count before we
    hit the hard limit, and when they commit, we'll be well over the hard
    limit.
    
    Fix this by checking against the incore inode reservation counter, since
    we would appear to maintain that correctly (and that's what we report in
    GETQUOTA).
    
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Allison Collins <allison.henderson@oracle.com>
    Reviewed-by: Chandan Babu R <chandanrlinux@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 47eab5c5ebabd5fc697c1f700c4457c658e27cb3
Author: Greg Ungerer <gerg@linux-m68k.org>
Date:   Sat Jun 13 17:17:52 2020 +1000

    m68knommu: fix overwriting of bits in ColdFire V3 cache control
    
    [ Upstream commit bdee0e793cea10c516ff48bf3ebb4ef1820a116b ]
    
    The Cache Control Register (CACR) of the ColdFire V3 has bits that
    control high level caching functions, and also enable/disable the use
    of the alternate stack pointer register (the EUSP bit) to provide
    separate supervisor and user stack pointer registers. The code as
    it is today will blindly clear the EUSP bit on cache actions like
    invalidation. So it is broken for this case - and that will result
    in failed booting (interrupt entry and exit processing will be
    completely hosed).
    
    This only affects ColdFire V3 parts that support the alternate stack
    register (like the 5329 for example) - generally speaking new parts do,
    older parts don't. It has no impact on ColdFire V3 parts with the single
    stack pointer, like the 5307 for example.
    
    Fix the cache bit defines used, so they maintain the EUSP bit when
    carrying out cache actions through the CACR register.
    
    Signed-off-by: Greg Ungerer <gerg@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28e6970444a9fe45e796a3d4cfdc7005f730647a
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Jul 21 22:24:07 2020 -0700

    Input: psmouse - add a newline when printing 'proto' by sysfs
    
    [ Upstream commit 4aec14de3a15cf9789a0e19c847f164776f49473 ]
    
    When I cat parameter 'proto' by sysfs, it displays as follows. It's
    better to add a newline for easy reading.
    
    root@syzkaller:~# cat /sys/module/psmouse/parameters/proto
    autoroot@syzkaller:~#
    
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Link: https://lore.kernel.org/r/20200720073846.120724-1-wangxiongfeng2@huawei.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f76b315e48523167bb283da979e30a98deefb01
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Fri Jul 10 11:02:23 2020 +0200

    media: vpss: clean up resources in init
    
    [ Upstream commit 9c487b0b0ea7ff22127fe99a7f67657d8730ff94 ]
    
    If platform_driver_register() fails within vpss_init() resources are not
    cleaned up. The patch fixes this issue by introducing the corresponding
    error handling.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 414c6a7c18c7876f1378c22f5e556af79483d62a
Author: Huacai Chen <chenhc@lemote.com>
Date:   Sat Jun 20 20:04:43 2020 +0800

    rtc: goldfish: Enable interrupt in set_alarm() when necessary
    
    [ Upstream commit 22f8d5a1bf230cf8567a4121fc3789babb46336d ]
    
    When use goldfish rtc, the "hwclock" command fails with "select() to
    /dev/rtc to wait for clock tick timed out". This is because "hwclock"
    need the set_alarm() hook to enable interrupt when alrm->enabled is
    true. This operation is missing in goldfish rtc (but other rtc drivers,
    such as cmos rtc, enable interrupt here), so add it.
    
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/1592654683-31314-1-git-send-email-chenhc@lemote.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 064e95f0b2838551d1f02c2ed002781af4eed96c
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Fri Jun 5 18:17:28 2020 +0200

    media: budget-core: Improve exception handling in budget_register()
    
    [ Upstream commit fc0456458df8b3421dba2a5508cd817fbc20ea71 ]
    
    budget_register() has no error handling after its failure.
    Add the missed undo functions for error handling to fix it.
    
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 816918ceab3e0179fc860d18cbd870134bc87026
Author: Stanley Chu <stanley.chu@mediatek.com>
Date:   Fri Jun 12 09:26:24 2020 +0800

    scsi: ufs: Add DELAY_BEFORE_LPM quirk for Micron devices
    
    [ Upstream commit c0a18ee0ce78d7957ec1a53be35b1b3beba80668 ]
    
    It is confirmed that Micron device needs DELAY_BEFORE_LPM quirk to have a
    delay before VCC is powered off. Sdd Micron vendor ID and this quirk for
    Micron devices.
    
    Link: https://lore.kernel.org/r/20200612012625.6615-2-stanley.chu@mediatek.com
    Reviewed-by: Bean Huo <beanhuo@micron.com>
    Reviewed-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Stanley Chu <stanley.chu@mediatek.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1afffa7348eaf71a9fe10ef6d907c56fd527502
Author: Lukas Wunner <lukas@wunner.de>
Date:   Mon Aug 3 13:09:01 2020 +0200

    spi: Prevent adding devices below an unregistering controller
    
    [ Upstream commit ddf75be47ca748f8b12d28ac64d624354fddf189 ]
    
    CONFIG_OF_DYNAMIC and CONFIG_ACPI allow adding SPI devices at runtime
    using a DeviceTree overlay or DSDT patch.  CONFIG_SPI_SLAVE allows the
    same via sysfs.
    
    But there are no precautions to prevent adding a device below a
    controller that's being removed.  Such a device is unusable and may not
    even be able to unbind cleanly as it becomes inaccessible once the
    controller has been torn down.  E.g. it is then impossible to quiesce
    the device's interrupt.
    
    of_spi_notify() and acpi_spi_notify() do hold a ref on the controller,
    but otherwise run lockless against spi_unregister_controller().
    
    Fix by holding the spi_add_lock in spi_unregister_controller() and
    bailing out of spi_add_device() if the controller has been unregistered
    concurrently.
    
    Fixes: ce79d54ae447 ("spi/of: Add OF notifier handler")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.19+
    Cc: Geert Uytterhoeven <geert+renesas@glider.be>
    Cc: Octavian Purdila <octavian.purdila@intel.com>
    Cc: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
    Link: https://lore.kernel.org/r/a8c3205088a969dc8410eec1eba9aface60f36af.1596451035.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0376000e43e5daf0e3107ce52c5c501e6445ac56
Author: zhangyi (F) <yi.zhang@huawei.com>
Date:   Sat Jun 20 14:19:48 2020 +0800

    jbd2: add the missing unlock_buffer() in the error path of jbd2_write_superblock()
    
    commit ef3f5830b859604eda8723c26d90ab23edc027a4 upstream.
    
    jbd2_write_superblock() is under the buffer lock of journal superblock
    before ending that superblock write, so add a missing unlock_buffer() in
    in the error path before submitting buffer.
    
    Fixes: 742b06b5628f ("jbd2: check superblock mapped prior to committing")
    Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>
    Reviewed-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/r/20200620061948.2049579-1-yi.zhang@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d94836fff910fc94d6e64a8d5b06df6991dabb52
Author: Jan Kara <jack@suse.cz>
Date:   Fri Jul 31 18:21:35 2020 +0200

    ext4: fix checking of directory entry validity for inline directories
    
    commit 7303cb5bfe845f7d43cd9b2dbd37dbb266efda9b upstream.
    
    ext4_search_dir() and ext4_generic_delete_entry() can be called both for
    standard director blocks and for inline directories stored inside inode
    or inline xattr space. For the second case we didn't call
    ext4_check_dir_entry() with proper constraints that could result in
    accepting corrupted directory entry as well as false positive filesystem
    errors like:
    
    EXT4-fs error (device dm-0): ext4_search_dir:1395: inode #28320400:
    block 113246792: comm dockerd: bad entry in directory: directory entry too
    close to block end - offset=0, inode=28320403, rec_len=32, name_len=8,
    size=4096
    
    Fix the arguments passed to ext4_check_dir_entry().
    
    Fixes: 109ba779d6cc ("ext4: check for directory entries too close to block end")
    CC: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20200731162135.8080-1-jack@suse.cz
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 70ac602c25a18647eb4ee312bea936e88bcf4629
Author: Charan Teja Reddy <charante@codeaurora.org>
Date:   Thu Aug 20 17:42:27 2020 -0700

    mm, page_alloc: fix core hung in free_pcppages_bulk()
    
    commit 88e8ac11d2ea3acc003cf01bb5a38c8aa76c3cfd upstream.
    
    The following race is observed with the repeated online, offline and a
    delay between two successive online of memory blocks of movable zone.
    
    P1                                              P2
    
    Online the first memory block in
    the movable zone. The pcp struct
    values are initialized to default
    values,i.e., pcp->high = 0 &
    pcp->batch = 1.
    
                                            Allocate the pages from the
                                            movable zone.
    
    Try to Online the second memory
    block in the movable zone thus it
    entered the online_pages() but yet
    to call zone_pcp_update().
                                            This process is entered into
                                            the exit path thus it tries
                                            to release the order-0 pages
                                            to pcp lists through
                                            free_unref_page_commit().
                                            As pcp->high = 0, pcp->count = 1
                                            proceed to call the function
                                            free_pcppages_bulk().
    Update the pcp values thus the
    new pcp values are like, say,
    pcp->high = 378, pcp->batch = 63.
                                            Read the pcp's batch value using
                                            READ_ONCE() and pass the same to
                                            free_pcppages_bulk(), pcp values
                                            passed here are, batch = 63,
                                            count = 1.
    
                                            Since num of pages in the pcp
                                            lists are less than ->batch,
                                            then it will stuck in
                                            while(list_empty(list)) loop
                                            with interrupts disabled thus
                                            a core hung.
    
    Avoid this by ensuring free_pcppages_bulk() is called with proper count of
    pcp list pages.
    
    The mentioned race is some what easily reproducible without [1] because
    pcp's are not updated for the first memory block online and thus there is
    a enough race window for P2 between alloc+free and pcp struct values
    update through onlining of second memory block.
    
    With [1], the race still exists but it is very narrow as we update the pcp
    struct values for the first memory block online itself.
    
    This is not limited to the movable zone, it could also happen in cases
    with the normal zone (e.g., hotplug to a node that only has DMA memory, or
    no other memory yet).
    
    [1]: https://patchwork.kernel.org/patch/11696389/
    
    Fixes: 5f8dcc21211a ("page-allocator: split per-cpu list into one-list-per-migrate-type")
    Signed-off-by: Charan Teja Reddy <charante@codeaurora.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: David Hildenbrand <david@redhat.com>
    Acked-by: David Rientjes <rientjes@google.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Vinayak Menon <vinmenon@codeaurora.org>
    Cc: <stable@vger.kernel.org> [2.6+]
    Link: http://lkml.kernel.org/r/1597150703-19003-1-git-send-email-charante@codeaurora.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b5aab9b4679519138207a8dd8c1ade22253028f
Author: Doug Berger <opendmb@gmail.com>
Date:   Thu Aug 20 17:42:24 2020 -0700

    mm: include CMA pages in lowmem_reserve at boot
    
    commit e08d3fdfe2dafa0331843f70ce1ff6c1c4900bf4 upstream.
    
    The lowmem_reserve arrays provide a means of applying pressure against
    allocations from lower zones that were targeted at higher zones.  Its
    values are a function of the number of pages managed by higher zones and
    are assigned by a call to the setup_per_zone_lowmem_reserve() function.
    
    The function is initially called at boot time by the function
    init_per_zone_wmark_min() and may be called later by accesses of the
    /proc/sys/vm/lowmem_reserve_ratio sysctl file.
    
    The function init_per_zone_wmark_min() was moved up from a module_init to
    a core_initcall to resolve a sequencing issue with khugepaged.
    Unfortunately this created a sequencing issue with CMA page accounting.
    
    The CMA pages are added to the managed page count of a zone when
    cma_init_reserved_areas() is called at boot also as a core_initcall.  This
    makes it uncertain whether the CMA pages will be added to the managed page
    counts of their zones before or after the call to
    init_per_zone_wmark_min() as it becomes dependent on link order.  With the
    current link order the pages are added to the managed count after the
    lowmem_reserve arrays are initialized at boot.
    
    This means the lowmem_reserve values at boot may be lower than the values
    used later if /proc/sys/vm/lowmem_reserve_ratio is accessed even if the
    ratio values are unchanged.
    
    In many cases the difference is not significant, but for example
    an ARM platform with 1GB of memory and the following memory layout
    
      cma: Reserved 256 MiB at 0x0000000030000000
      Zone ranges:
        DMA      [mem 0x0000000000000000-0x000000002fffffff]
        Normal   empty
        HighMem  [mem 0x0000000030000000-0x000000003fffffff]
    
    would result in 0 lowmem_reserve for the DMA zone.  This would allow
    userspace to deplete the DMA zone easily.
    
    Funnily enough
    
      $ cat /proc/sys/vm/lowmem_reserve_ratio
    
    would fix up the situation because as a side effect it forces
    setup_per_zone_lowmem_reserve.
    
    This commit breaks the link order dependency by invoking
    init_per_zone_wmark_min() as a postcore_initcall so that the CMA pages
    have the chance to be properly accounted in their zone(s) and allowing
    the lowmem_reserve arrays to receive consistent values.
    
    Fixes: bc22af74f271 ("mm: update min_free_kbytes from khugepaged after core initialization")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Jason Baron <jbaron@akamai.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/1597423766-27849-1-git-send-email-opendmb@gmail.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 774c6206bc3e787f056337f114b6cde4aed8a626
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu Aug 20 17:42:14 2020 -0700

    kernel/relay.c: fix memleak on destroy relay channel
    
    commit 71e843295c680898959b22dc877ae3839cc22470 upstream.
    
    kmemleak report memory leak as follows:
    
      unreferenced object 0x607ee4e5f948 (size 8):
      comm "syz-executor.1", pid 2098, jiffies 4295031601 (age 288.468s)
      hex dump (first 8 bytes):
      00 00 00 00 00 00 00 00 ........
      backtrace:
         relay_open kernel/relay.c:583 [inline]
         relay_open+0xb6/0x970 kernel/relay.c:563
         do_blk_trace_setup+0x4a8/0xb20 kernel/trace/blktrace.c:557
         __blk_trace_setup+0xb6/0x150 kernel/trace/blktrace.c:597
         blk_trace_ioctl+0x146/0x280 kernel/trace/blktrace.c:738
         blkdev_ioctl+0xb2/0x6a0 block/ioctl.c:613
         block_ioctl+0xe5/0x120 fs/block_dev.c:1871
         vfs_ioctl fs/ioctl.c:48 [inline]
         __do_sys_ioctl fs/ioctl.c:753 [inline]
         __se_sys_ioctl fs/ioctl.c:739 [inline]
         __x64_sys_ioctl+0x170/0x1ce fs/ioctl.c:739
         do_syscall_64+0x33/0x40 arch/x86/entry/common.c:46
         entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    'chan->buf' is malloced in relay_open() by alloc_percpu() but not free
    while destroy the relay channel.  Fix it by adding free_percpu() before
    return from relay_destroy_channel().
    
    Fixes: 017c59c042d0 ("relay: Use per CPU constructs for the relay channel buffer pointers")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Michel Lespinasse <walken@google.com>
    Cc: Daniel Axtens <dja@axtens.net>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Akash Goel <akash.goel@intel.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200817122826.48518-1-weiyongjun1@huawei.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8f308155a10937b4fd61b80186b8f11b4fc8ebd
Author: Jann Horn <jannh@google.com>
Date:   Thu Aug 20 17:42:11 2020 -0700

    romfs: fix uninitialized memory leak in romfs_dev_read()
    
    commit bcf85fcedfdd17911982a3e3564fcfec7b01eebd upstream.
    
    romfs has a superblock field that limits the size of the filesystem; data
    beyond that limit is never accessed.
    
    romfs_dev_read() fetches a caller-supplied number of bytes from the
    backing device.  It returns 0 on success or an error code on failure;
    therefore, its API can't represent short reads, it's all-or-nothing.
    
    However, when romfs_dev_read() detects that the requested operation would
    cross the filesystem size limit, it currently silently truncates the
    requested number of bytes.  This e.g.  means that when the content of a
    file with size 0x1000 starts one byte before the filesystem size limit,
    ->readpage() will only fill a single byte of the supplied page while
    leaving the rest uninitialized, leaking that uninitialized memory to
    userspace.
    
    Fix it by returning an error code instead of truncating the read when the
    requested read operation would go beyond the end of the filesystem.
    
    Fixes: da4458bda237 ("NOMMU: Make it possible for RomFS to use MTD devices directly")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: David Howells <dhowells@redhat.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200818013202.2246365-1-jannh@google.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 544e5bf40f299246abdf42e92df419cb576fd8ca
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Jul 21 10:17:50 2020 -0400

    btrfs: sysfs: use NOFS for device creation
    
    [ Upstream commit a47bd78d0c44621efb98b525d04d60dc4d1a79b0 ]
    
    Dave hit this splat during testing btrfs/078:
    
      ======================================================
      WARNING: possible circular locking dependency detected
      5.8.0-rc6-default+ #1191 Not tainted
      ------------------------------------------------------
      kswapd0/75 is trying to acquire lock:
      ffffa040e9d04ff8 (&delayed_node->mutex){+.+.}-{3:3}, at: __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
    
      but task is already holding lock:
      ffffffff8b0c8040 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
    
      which lock already depends on the new lock.
    
      the existing dependency chain (in reverse order) is:
    
      -> #2 (fs_reclaim){+.+.}-{0:0}:
             __lock_acquire+0x56f/0xaa0
             lock_acquire+0xa3/0x440
             fs_reclaim_acquire.part.0+0x25/0x30
             __kmalloc_track_caller+0x49/0x330
             kstrdup+0x2e/0x60
             __kernfs_new_node.constprop.0+0x44/0x250
             kernfs_new_node+0x25/0x50
             kernfs_create_link+0x34/0xa0
             sysfs_do_create_link_sd+0x5e/0xd0
             btrfs_sysfs_add_devices_dir+0x65/0x100 [btrfs]
             btrfs_init_new_device+0x44c/0x12b0 [btrfs]
             btrfs_ioctl+0xc3c/0x25c0 [btrfs]
             ksys_ioctl+0x68/0xa0
             __x64_sys_ioctl+0x16/0x20
             do_syscall_64+0x50/0xe0
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
      -> #1 (&fs_info->chunk_mutex){+.+.}-{3:3}:
             __lock_acquire+0x56f/0xaa0
             lock_acquire+0xa3/0x440
             __mutex_lock+0xa0/0xaf0
             btrfs_chunk_alloc+0x137/0x3e0 [btrfs]
             find_free_extent+0xb44/0xfb0 [btrfs]
             btrfs_reserve_extent+0x9b/0x180 [btrfs]
             btrfs_alloc_tree_block+0xc1/0x350 [btrfs]
             alloc_tree_block_no_bg_flush+0x4a/0x60 [btrfs]
             __btrfs_cow_block+0x143/0x7a0 [btrfs]
             btrfs_cow_block+0x15f/0x310 [btrfs]
             push_leaf_right+0x150/0x240 [btrfs]
             split_leaf+0x3cd/0x6d0 [btrfs]
             btrfs_search_slot+0xd14/0xf70 [btrfs]
             btrfs_insert_empty_items+0x64/0xc0 [btrfs]
             __btrfs_commit_inode_delayed_items+0xb2/0x840 [btrfs]
             btrfs_async_run_delayed_root+0x10e/0x1d0 [btrfs]
             btrfs_work_helper+0x2f9/0x650 [btrfs]
             process_one_work+0x22c/0x600
             worker_thread+0x50/0x3b0
             kthread+0x137/0x150
             ret_from_fork+0x1f/0x30
    
      -> #0 (&delayed_node->mutex){+.+.}-{3:3}:
             check_prev_add+0x98/0xa20
             validate_chain+0xa8c/0x2a00
             __lock_acquire+0x56f/0xaa0
             lock_acquire+0xa3/0x440
             __mutex_lock+0xa0/0xaf0
             __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
             btrfs_evict_inode+0x3bf/0x560 [btrfs]
             evict+0xd6/0x1c0
             dispose_list+0x48/0x70
             prune_icache_sb+0x54/0x80
             super_cache_scan+0x121/0x1a0
             do_shrink_slab+0x175/0x420
             shrink_slab+0xb1/0x2e0
             shrink_node+0x192/0x600
             balance_pgdat+0x31f/0x750
             kswapd+0x206/0x510
             kthread+0x137/0x150
             ret_from_fork+0x1f/0x30
    
      other info that might help us debug this:
    
      Chain exists of:
        &delayed_node->mutex --> &fs_info->chunk_mutex --> fs_reclaim
    
       Possible unsafe locking scenario:
    
             CPU0                    CPU1
             ----                    ----
        lock(fs_reclaim);
                                     lock(&fs_info->chunk_mutex);
                                     lock(fs_reclaim);
        lock(&delayed_node->mutex);
    
       *** DEADLOCK ***
    
      3 locks held by kswapd0/75:
       #0: ffffffff8b0c8040 (fs_reclaim){+.+.}-{0:0}, at: __fs_reclaim_acquire+0x5/0x30
       #1: ffffffff8b0b50b8 (shrinker_rwsem){++++}-{3:3}, at: shrink_slab+0x54/0x2e0
       #2: ffffa040e057c0e8 (&type->s_umount_key#26){++++}-{3:3}, at: trylock_super+0x16/0x50
    
      stack backtrace:
      CPU: 2 PID: 75 Comm: kswapd0 Not tainted 5.8.0-rc6-default+ #1191
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba527-rebuilt.opensuse.org 04/01/2014
      Call Trace:
       dump_stack+0x78/0xa0
       check_noncircular+0x16f/0x190
       check_prev_add+0x98/0xa20
       validate_chain+0xa8c/0x2a00
       __lock_acquire+0x56f/0xaa0
       lock_acquire+0xa3/0x440
       ? __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
       __mutex_lock+0xa0/0xaf0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
       ? __lock_acquire+0x56f/0xaa0
       ? __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
       ? lock_acquire+0xa3/0x440
       ? btrfs_evict_inode+0x138/0x560 [btrfs]
       ? btrfs_evict_inode+0x2fe/0x560 [btrfs]
       ? __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
       __btrfs_release_delayed_node.part.0+0x3f/0x310 [btrfs]
       btrfs_evict_inode+0x3bf/0x560 [btrfs]
       evict+0xd6/0x1c0
       dispose_list+0x48/0x70
       prune_icache_sb+0x54/0x80
       super_cache_scan+0x121/0x1a0
       do_shrink_slab+0x175/0x420
       shrink_slab+0xb1/0x2e0
       shrink_node+0x192/0x600
       balance_pgdat+0x31f/0x750
       kswapd+0x206/0x510
       ? _raw_spin_unlock_irqrestore+0x3e/0x50
       ? finish_wait+0x90/0x90
       ? balance_pgdat+0x750/0x750
       kthread+0x137/0x150
       ? kthread_stop+0x2a0/0x2a0
       ret_from_fork+0x1f/0x30
    
    This is because we're holding the chunk_mutex while adding this device
    and adding its sysfs entries.  We actually hold different locks in
    different places when calling this function, the dev_replace semaphore
    for instance in dev replace, so instead of moving this call around
    simply wrap it's operations in NOFS.
    
    CC: stable@vger.kernel.org # 4.14+
    Reported-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 757738a9f02656ea18b938ecc3aea5b0a80fba02
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Jul 28 16:39:26 2020 +0800

    btrfs: inode: fix NULL pointer dereference if inode doesn't need compression
    
    [ Upstream commit 1e6e238c3002ea3611465ce5f32777ddd6a40126 ]
    
    [BUG]
    There is a bug report of NULL pointer dereference caused in
    compress_file_extent():
    
      Oops: Kernel access of bad area, sig: 11 [#1]
      LE PAGE_SIZE=64K MMU=Hash SMP NR_CPUS=2048 NUMA pSeries
      Workqueue: btrfs-delalloc btrfs_delalloc_helper [btrfs]
      NIP [c008000006dd4d34] compress_file_range.constprop.41+0x75c/0x8a0 [btrfs]
      LR [c008000006dd4d1c] compress_file_range.constprop.41+0x744/0x8a0 [btrfs]
      Call Trace:
      [c000000c69093b00] [c008000006dd4d1c] compress_file_range.constprop.41+0x744/0x8a0 [btrfs] (unreliable)
      [c000000c69093bd0] [c008000006dd4ebc] async_cow_start+0x44/0xa0 [btrfs]
      [c000000c69093c10] [c008000006e14824] normal_work_helper+0xdc/0x598 [btrfs]
      [c000000c69093c80] [c0000000001608c0] process_one_work+0x2c0/0x5b0
      [c000000c69093d10] [c000000000160c38] worker_thread+0x88/0x660
      [c000000c69093db0] [c00000000016b55c] kthread+0x1ac/0x1c0
      [c000000c69093e20] [c00000000000b660] ret_from_kernel_thread+0x5c/0x7c
      ---[ end trace f16954aa20d822f6 ]---
    
    [CAUSE]
    For the following execution route of compress_file_range(), it's
    possible to hit NULL pointer dereference:
    
     compress_file_extent()
     |- pages = NULL;
     |- start = async_chunk->start = 0;
     |- end = async_chunk = 4095;
     |- nr_pages = 1;
     |- inode_need_compress() == false; <<< Possible, see later explanation
     |  Now, we have nr_pages = 1, pages = NULL
     |- cont:
     |-             ret = cow_file_range_inline();
     |-             if (ret <= 0) {
     |-             for (i = 0; i < nr_pages; i++) {
     |-                     WARN_ON(pages[i]->mapping);     <<< Crash
    
    To enter above call execution branch, we need the following race:
    
        Thread 1 (chattr)     |            Thread 2 (writeback)
    --------------------------+------------------------------
                              | btrfs_run_delalloc_range
                              | |- inode_need_compress = true
                              | |- cow_file_range_async()
    btrfs_ioctl_set_flag()    |
    |- binode_flags |=        |
       BTRFS_INODE_NOCOMPRESS |
                              | compress_file_range()
                              | |- inode_need_compress = false
                              | |- nr_page = 1 while pages = NULL
                              | |  Then hit the crash
    
    [FIX]
    This patch will fix it by checking @pages before doing accessing it.
    This patch is only designed as a hot fix and easy to backport.
    
    More elegant fix may make btrfs only check inode_need_compress() once to
    avoid such race, but that would be another story.
    
    Reported-by: Luciano Chavez <chavez@us.ibm.com>
    Fixes: 4d3a800ebb12 ("btrfs: merge nr_pages input and output parameter in compress_pages")
    CC: stable@vger.kernel.org # 4.14.x: cecc8d9038d16: btrfs: Move free_pages_out label in inline extent handling branch in compress_file_range
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2dc8f6ed93d3185cf20946f647e1c67d42488f27
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Wed Jul 17 14:41:45 2019 +0300

    btrfs: Move free_pages_out label in inline extent handling branch in compress_file_range
    
    [ Upstream commit cecc8d9038d164eda61fbcd72520975a554ea63e ]
    
    This label is only executed if compress_file_range fails to create an
    inline extent. So move its code in the semantically related inline
    extent handling branch. No functional changes.
    
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 054d41ed5f6fede52012d786a8a8e165b736b86b
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Wed Jul 22 11:12:46 2020 -0400

    btrfs: don't show full path of bind mounts in subvol=
    
    [ Upstream commit 3ef3959b29c4a5bd65526ab310a1a18ae533172a ]
    
    Chris Murphy reported a problem where rpm ostree will bind mount a bunch
    of things for whatever voodoo it's doing.  But when it does this
    /proc/mounts shows something like
    
      /dev/sda /mnt/test btrfs rw,relatime,subvolid=256,subvol=/foo 0 0
      /dev/sda /mnt/test/baz btrfs rw,relatime,subvolid=256,subvol=/foo/bar 0 0
    
    Despite subvolid=256 being subvol=/foo.  This is because we're just
    spitting out the dentry of the mount point, which in the case of bind
    mounts is the source path for the mountpoint.  Instead we should spit
    out the path to the actual subvol.  Fix this by looking up the name for
    the subvolid we have mounted.  With this fix the same test looks like
    this
    
      /dev/sda /mnt/test btrfs rw,relatime,subvolid=256,subvol=/foo 0 0
      /dev/sda /mnt/test/baz btrfs rw,relatime,subvolid=256,subvol=/foo 0 0
    
    Reported-by: Chris Murphy <chris@colorremedies.com>
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 496270e0f9eece3eb0a1968d3d73dbba27c8cea9
Author: Marcos Paulo de Souza <mpdesouza@suse.com>
Date:   Fri Feb 21 14:56:12 2020 +0100

    btrfs: export helpers for subvolume name/id resolution
    
    [ Upstream commit c0c907a47dccf2cf26251a8fb4a8e7a3bf79ce84 ]
    
    The functions will be used outside of export.c and super.c to allow
    resolving subvolume name from a given id, eg. for subvolume deletion by
    id ioctl.
    
    Signed-off-by: Marcos Paulo de Souza <mpdesouza@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ split from the next patch ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 89b1affb074a860cfe6b0b995e9283d577456803
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Fri Jul 24 19:25:25 2020 +1000

    powerpc: Allow 4224 bytes of stack expansion for the signal frame
    
    [ Upstream commit 63dee5df43a31f3844efabc58972f0a206ca4534 ]
    
    We have powerpc specific logic in our page fault handling to decide if
    an access to an unmapped address below the stack pointer should expand
    the stack VMA.
    
    The code was originally added in 2004 "ported from 2.4". The rough
    logic is that the stack is allowed to grow to 1MB with no extra
    checking. Over 1MB the access must be within 2048 bytes of the stack
    pointer, or be from a user instruction that updates the stack pointer.
    
    The 2048 byte allowance below the stack pointer is there to cover the
    288 byte "red zone" as well as the "about 1.5kB" needed by the signal
    delivery code.
    
    Unfortunately since then the signal frame has expanded, and is now
    4224 bytes on 64-bit kernels with transactional memory enabled. This
    means if a process has consumed more than 1MB of stack, and its stack
    pointer lies less than 4224 bytes from the next page boundary, signal
    delivery will fault when trying to expand the stack and the process
    will see a SEGV.
    
    The total size of the signal frame is the size of struct rt_sigframe
    (which includes the red zone) plus __SIGNAL_FRAMESIZE (128 bytes on
    64-bit).
    
    The 2048 byte allowance was correct until 2008 as the signal frame
    was:
    
    struct rt_sigframe {
            struct ucontext    uc;                           /*     0  1440 */
            /* --- cacheline 11 boundary (1408 bytes) was 32 bytes ago --- */
            long unsigned int          _unused[2];           /*  1440    16 */
            unsigned int               tramp[6];             /*  1456    24 */
            struct siginfo *           pinfo;                /*  1480     8 */
            void *                     puc;                  /*  1488     8 */
            struct siginfo     info;                         /*  1496   128 */
            /* --- cacheline 12 boundary (1536 bytes) was 88 bytes ago --- */
            char                       abigap[288];          /*  1624   288 */
    
            /* size: 1920, cachelines: 15, members: 7 */
            /* padding: 8 */
    };
    
    1920 + 128 = 2048
    
    Then in commit ce48b2100785 ("powerpc: Add VSX context save/restore,
    ptrace and signal support") (Jul 2008) the signal frame expanded to
    2304 bytes:
    
    struct rt_sigframe {
            struct ucontext    uc;                           /*     0  1696 */      <--
            /* --- cacheline 13 boundary (1664 bytes) was 32 bytes ago --- */
            long unsigned int          _unused[2];           /*  1696    16 */
            unsigned int               tramp[6];             /*  1712    24 */
            struct siginfo *           pinfo;                /*  1736     8 */
            void *                     puc;                  /*  1744     8 */
            struct siginfo     info;                         /*  1752   128 */
            /* --- cacheline 14 boundary (1792 bytes) was 88 bytes ago --- */
            char                       abigap[288];          /*  1880   288 */
    
            /* size: 2176, cachelines: 17, members: 7 */
            /* padding: 8 */
    };
    
    2176 + 128 = 2304
    
    At this point we should have been exposed to the bug, though as far as
    I know it was never reported. I no longer have a system old enough to
    easily test on.
    
    Then in 2010 commit 320b2b8de126 ("mm: keep a guard page below a
    grow-down stack segment") caused our stack expansion code to never
    trigger, as there was always a VMA found for a write up to PAGE_SIZE
    below r1.
    
    That meant the bug was hidden as we continued to expand the signal
    frame in commit 2b0a576d15e0 ("powerpc: Add new transactional memory
    state to the signal context") (Feb 2013):
    
    struct rt_sigframe {
            struct ucontext    uc;                           /*     0  1696 */
            /* --- cacheline 13 boundary (1664 bytes) was 32 bytes ago --- */
            struct ucontext    uc_transact;                  /*  1696  1696 */      <--
            /* --- cacheline 26 boundary (3328 bytes) was 64 bytes ago --- */
            long unsigned int          _unused[2];           /*  3392    16 */
            unsigned int               tramp[6];             /*  3408    24 */
            struct siginfo *           pinfo;                /*  3432     8 */
            void *                     puc;                  /*  3440     8 */
            struct siginfo     info;                         /*  3448   128 */
            /* --- cacheline 27 boundary (3456 bytes) was 120 bytes ago --- */
            char                       abigap[288];          /*  3576   288 */
    
            /* size: 3872, cachelines: 31, members: 8 */
            /* padding: 8 */
            /* last cacheline: 32 bytes */
    };
    
    3872 + 128 = 4000
    
    And commit 573ebfa6601f ("powerpc: Increase stack redzone for 64-bit
    userspace to 512 bytes") (Feb 2014):
    
    struct rt_sigframe {
            struct ucontext    uc;                           /*     0  1696 */
            /* --- cacheline 13 boundary (1664 bytes) was 32 bytes ago --- */
            struct ucontext    uc_transact;                  /*  1696  1696 */
            /* --- cacheline 26 boundary (3328 bytes) was 64 bytes ago --- */
            long unsigned int          _unused[2];           /*  3392    16 */
            unsigned int               tramp[6];             /*  3408    24 */
            struct siginfo *           pinfo;                /*  3432     8 */
            void *                     puc;                  /*  3440     8 */
            struct siginfo     info;                         /*  3448   128 */
            /* --- cacheline 27 boundary (3456 bytes) was 120 bytes ago --- */
            char                       abigap[512];          /*  3576   512 */      <--
    
            /* size: 4096, cachelines: 32, members: 8 */
            /* padding: 8 */
    };
    
    4096 + 128 = 4224
    
    Then finally in 2017, commit 1be7107fbe18 ("mm: larger stack guard
    gap, between vmas") exposed us to the existing bug, because it changed
    the stack VMA to be the correct/real size, meaning our stack expansion
    code is now triggered.
    
    Fix it by increasing the allowance to 4224 bytes.
    
    Hard-coding 4224 is obviously unsafe against future expansions of the
    signal frame in the same way as the existing code. We can't easily use
    sizeof() because the signal frame structure is not in a header. We
    will either fix that, or rip out all the custom stack expansion
    checking logic entirely.
    
    Fixes: ce48b2100785 ("powerpc: Add VSX context save/restore, ptrace and signal support")
    Cc: stable@vger.kernel.org # v2.6.27+
    Reported-by: Tom Lane <tgl@sss.pgh.pa.us>
    Tested-by: Daniel Axtens <dja@axtens.net>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200724092528.1578671-2-mpe@ellerman.id.au
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe04327bcc1a0cc398db7bd1667c43676409f544
Author: Christophe Leroy <christophe.leroy@c-s.fr>
Date:   Wed May 23 10:53:22 2018 +0200

    powerpc/mm: Only read faulting instruction when necessary in do_page_fault()
    
    [ Upstream commit 0e36b0d12501e278686634712975b785bae11641 ]
    
    Commit a7a9dcd882a67 ("powerpc: Avoid taking a data miss on every
    userspace instruction miss") has shown that limiting the read of
    faulting instruction to likely cases improves performance.
    
    This patch goes further into this direction by limiting the read
    of the faulting instruction to the only cases where it is likely
    needed.
    
    On an MPC885, with the same benchmark app as in the commit referred
    above, we see a reduction of about 3900 dTLB misses (approx 3%):
    
    Before the patch:
     Performance counter stats for './fault 500' (10 runs):
    
             683033312      cpu-cycles                                                    ( +-  0.03% )
                134538      dTLB-load-misses                                              ( +-  0.03% )
                 46099      iTLB-load-misses                                              ( +-  0.02% )
                 19681      faults                                                        ( +-  0.02% )
    
           5.389747878 seconds time elapsed                                          ( +-  0.06% )
    
    With the patch:
    
     Performance counter stats for './fault 500' (10 runs):
    
             682112862      cpu-cycles                                                    ( +-  0.03% )
                130619      dTLB-load-misses                                              ( +-  0.03% )
                 46073      iTLB-load-misses                                              ( +-  0.05% )
                 19681      faults                                                        ( +-  0.01% )
    
           5.381342641 seconds time elapsed                                          ( +-  0.07% )
    
    The proper work of the huge stack expansion was tested with the
    following app:
    
    int main(int argc, char **argv)
    {
            char buf[1024 * 1025];
    
            sprintf(buf, "Hello world !\n");
            printf(buf);
    
            exit(0);
    }
    
    Signed-off-by: Christophe Leroy <christophe.leroy@c-s.fr>
    Reviewed-by: Nicholas Piggin <npiggin@gmail.com>
    [mpe: Add include of pagemap.h to fix build errors]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 493ad68aef1d534c48d42e3f985558eb773ad547
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Aug 20 17:42:02 2020 -0700

    khugepaged: adjust VM_BUG_ON_MM() in __khugepaged_enter()
    
    [ Upstream commit f3f99d63a8156c7a4a6b20aac22b53c5579c7dc1 ]
    
    syzbot crashes on the VM_BUG_ON_MM(khugepaged_test_exit(mm), mm) in
    __khugepaged_enter(): yes, when one thread is about to dump core, has set
    core_state, and is waiting for others, another might do something calling
    __khugepaged_enter(), which now crashes because I lumped the core_state
    test (known as "mmget_still_valid") into khugepaged_test_exit().  I still
    think it's best to lump them together, so just in this exceptional case,
    check mm->mm_users directly instead of khugepaged_test_exit().
    
    Fixes: bbe98f9cadff ("khugepaged: khugepaged_test_exit() check mmget_still_valid()")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Yang Shi <shy828301@gmail.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2008141503370.18085@eggly.anvils
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c766d2f4c9b36d5350c34625ce59683f34e08dc1
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Aug 6 23:26:25 2020 -0700

    khugepaged: khugepaged_test_exit() check mmget_still_valid()
    
    [ Upstream commit bbe98f9cadff58cdd6a4acaeba0efa8565dabe65 ]
    
    Move collapse_huge_page()'s mmget_still_valid() check into
    khugepaged_test_exit() itself.  collapse_huge_page() is used for anon THP
    only, and earned its mmget_still_valid() check because it inserts a huge
    pmd entry in place of the page table's pmd entry; whereas
    collapse_file()'s retract_page_tables() or collapse_pte_mapped_thp()
    merely clears the page table's pmd entry.  But core dumping without mmap
    lock must have been as open to mistaking a racily cleared pmd entry for a
    page table at physical page 0, as exit_mmap() was.  And we certainly have
    no interest in mapping as a THP once dumping core.
    
    Fixes: 59ea6d06cfa9 ("coredump: fix race condition between collapse_huge_page() and core dumping")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2008021217020.27773@eggly.anvils
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05df922a1d689221f320851609b6be591cc036f1
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Fri Jul 10 22:11:23 2020 +0900

    perf probe: Fix memory leakage when the probe point is not found
    
    [ Upstream commit 12d572e785b15bc764e956caaa8a4c846fd15694 ]
    
    Fix the memory leakage in debuginfo__find_trace_events() when the probe
    point is not found in the debuginfo. If there is no probe point found in
    the debuginfo, debuginfo__find_probes() will NOT return -ENOENT, but 0.
    
    Thus the caller of debuginfo__find_probes() must check the tf.ntevs and
    release the allocated memory for the array of struct probe_trace_event.
    
    The current code releases the memory only if the debuginfo__find_probes()
    hits an error but not checks tf.ntevs. In the result, the memory allocated
    on *tevs are not released if tf.ntevs == 0.
    
    This fixes the memory leakage by checking tf.ntevs == 0 in addition to
    ret < 0.
    
    Fixes: ff741783506c ("perf probe: Introduce debuginfo to encapsulate dwarf information")
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/159438668346.62703.10887420400718492503.stgit@devnote2
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 269e034ae98827c7d395ff2008f8150e65e6f49c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Jul 8 16:49:11 2020 +0100

    drm/vgem: Replace opencoded version of drm_gem_dumb_map_offset()
    
    [ Upstream commit 119c53d2d4044c59c450c4f5a568d80b9d861856 ]
    
    drm_gem_dumb_map_offset() now exists and does everything
    vgem_gem_dump_map does and *ought* to do.
    
    In particular, vgem_gem_dumb_map() was trying to reject mmapping an
    imported dmabuf by checking the existence of obj->filp. Unfortunately,
    we always allocated an obj->filp, even if unused for an imported dmabuf.
    Instead, the drm_gem_dumb_map_offset(), since commit 90378e589192
    ("drm/gem: drm_gem_dumb_map_offset(): reject dma-buf"), uses the
    obj->import_attach to reject such invalid mmaps.
    
    This prevents vgem from allowing userspace mmapping the dumb handle and
    attempting to incorrectly fault in remote pages belonging to another
    device, where there may not even be a struct page.
    
    v2: Use the default drm_gem_dumb_map_offset() callback
    
    Fixes: af33a9190d02 ("drm/vgem: Enable dmabuf import interfaces")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: <stable@vger.kernel.org> # v4.13+
    Link: https://patchwork.freedesktop.org/patch/msgid/20200708154911.21236-1-chris@chris-wilson.co.uk
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0543c265f2d6b6f24093fe74d9591f435775e1b9
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 21 09:48:24 2020 +0200

    Linux 4.14.194
    
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7a47a8a6c43b89ba48d464d05c360378147a658
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Thu Oct 19 17:30:20 2017 -0400

    dm cache: remove all obsolete writethrough-specific code
    
    commit 9958f1d9a04efb3db19134482b3f4c6897e0e7b8 upstream.
    
    Now that the writethrough code is much simpler there is no need to track
    so much state or cascade bio submission (as was done, via
    writethrough_endio(), to issue origin then cache IO in series).
    
    As such the obsolete writethrough list and workqueue is also removed.
    
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24e4a610b3b762104ece8ee2df3e5adde982c833
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Thu Oct 19 17:16:54 2017 -0400

    dm cache: submit writethrough writes in parallel to origin and cache
    
    commit 2df3bae9a6543e90042291707b8db0cbfbae9ee9 upstream.
    
    Discontinue issuing writethrough write IO in series to the origin and
    then cache.
    
    Use bio_clone_fast() to create a new origin clone bio that will be
    mapped to the origin device and then bio_chain() it to the bio that gets
    remapped to the cache device.  The origin clone bio does _not_ have a
    copy of the per_bio_data -- as such check_if_tick_bio_needed() will not
    be called.
    
    The cache bio (parent bio) will not complete until the origin bio has
    completed -- this fulfills bio_clone_fast()'s requirements as well as
    the requirement to not complete the original IO until the write IO has
    completed to both the origin and cache device.
    
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d039bed204f3b205f518fa82f1ad2648be00cfe8
Author: Mike Snitzer <snitzer@redhat.com>
Date:   Thu Oct 19 21:01:04 2017 -0400

    dm cache: pass cache structure to mode functions
    
    commit 8e3c3827776fc93728c0c8d7c7b731226dc6ee23 upstream.
    
    No functional changes, just a bit cleaner than passing cache_features
    structure.
    
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76a0898b32fbff6a070705d9b55c50635bc51745
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jul 24 22:44:41 2020 +0200

    genirq/affinity: Make affinity setting if activated opt-in
    
    commit f0c7baca180046824e07fc5f1326e83a8fd150c7 upstream.
    
    John reported that on a RK3288 system the perf per CPU interrupts are all
    affine to CPU0 and provided the analysis:
    
     "It looks like what happens is that because the interrupts are not per-CPU
      in the hardware, armpmu_request_irq() calls irq_force_affinity() while
      the interrupt is deactivated and then request_irq() with IRQF_PERCPU |
      IRQF_NOBALANCING.
    
      Now when irq_startup() runs with IRQ_STARTUP_NORMAL, it calls
      irq_setup_affinity() which returns early because IRQF_PERCPU and
      IRQF_NOBALANCING are set, leaving the interrupt on its original CPU."
    
    This was broken by the recent commit which blocked interrupt affinity
    setting in hardware before activation of the interrupt. While this works in
    general, it does not work for this particular case. As contrary to the
    initial analysis not all interrupt chip drivers implement an activate
    callback, the safe cure is to make the deferred interrupt affinity setting
    at activation time opt-in.
    
    Implement the necessary core logic and make the two irqchip implementations
    for which this is required opt-in. In hindsight this would have been the
    right thing to do, but ...
    
    Fixes: baedb87d1b53 ("genirq/affinity: Handle affinity setting on inactive interrupts correctly")
    Reported-by: John Keeping <john@metanate.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/87blk4tzgm.fsf@nanos.tec.linutronix.de
    [fllinden@amazon.com - backported to 4.14]
    Signed-off-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e1d166f5eacf9ded904dc040fa1b1be2c5b7cce
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri Jul 17 18:00:02 2020 +0200

    genirq/affinity: Handle affinity setting on inactive interrupts correctly
    
    commit baedb87d1b53532f81b4bd0387f83b05d4f7eb9a upstream.
    
    Setting interrupt affinity on inactive interrupts is inconsistent when
    hierarchical irq domains are enabled. The core code should just store the
    affinity and not call into the irq chip driver for inactive interrupts
    because the chip drivers may not be in a state to handle such requests.
    
    X86 has a hacky workaround for that but all other irq chips have not which
    causes problems e.g. on GIC V3 ITS.
    
    Instead of adding more ugly hacks all over the place, solve the problem in
    the core code. If the affinity is set on an inactive interrupt then:
    
        - Store it in the irq descriptors affinity mask
        - Update the effective affinity to reflect that so user space has
          a consistent view
        - Don't call into the irq chip driver
    
    This is the core equivalent of the X86 workaround and works correctly
    because the affinity setting is established in the irq chip when the
    interrupt is activated later on.
    
    Note, that this is only effective when hierarchical irq domains are enabled
    by the architecture. Doing it unconditionally would break legacy irq chip
    implementations.
    
    For hierarchial irq domains this works correctly as none of the drivers can
    have a dependency on affinity setting in inactive state by design.
    
    Remove the X86 workaround as it is not longer required.
    
    Fixes: 02edee152d6e ("x86/apic/vector: Ignore set_affinity call for inactive interrupts")
    Reported-by: Ali Saidi <alisaidi@amazon.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Ali Saidi <alisaidi@amazon.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200529015501.15771-1-alisaidi@amazon.com
    Link: https://lkml.kernel.org/r/877dv2rv25.fsf@nanos.tec.linutronix.de
    [fllinden@amazon.com - 4.14 never had the x86 workaround, so skip x86 changes]
    Signed-off-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 809f71f6c7e5bc637047f15bb0ab590dcc0e4fd7
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Aug 6 23:26:22 2020 -0700

    khugepaged: retract_page_tables() remember to test exit
    
    commit 18e77600f7a1ed69f8ce46c9e11cad0985712dfa upstream.
    
    Only once have I seen this scenario (and forgot even to notice what forced
    the eventual crash): a sequence of "BUG: Bad page map" alerts from
    vm_normal_page(), from zap_pte_range() servicing exit_mmap();
    pmd:00000000, pte values corresponding to data in physical page 0.
    
    The pte mappings being zapped in this case were supposed to be from a huge
    page of ext4 text (but could as well have been shmem): my belief is that
    it was racing with collapse_file()'s retract_page_tables(), found *pmd
    pointing to a page table, locked it, but *pmd had become 0 by the time
    start_pte was decided.
    
    In most cases, that possibility is excluded by holding mmap lock; but
    exit_mmap() proceeds without mmap lock.  Most of what's run by khugepaged
    checks khugepaged_test_exit() after acquiring mmap lock:
    khugepaged_collapse_pte_mapped_thps() and hugepage_vma_revalidate() do so,
    for example.  But retract_page_tables() did not: fix that.
    
    The fix is for retract_page_tables() to check khugepaged_test_exit(),
    after acquiring mmap lock, before doing anything to the page table.
    Getting the mmap lock serializes with __mmput(), which briefly takes and
    drops it in __khugepaged_exit(); then the khugepaged_test_exit() check on
    mm_users makes sure we don't touch the page table once exit_mmap() might
    reach it, since exit_mmap() will be proceeding without mmap lock, not
    expecting anyone to be racing with it.
    
    Fixes: f3f0e1d2150b ("khugepaged: add support of collapse for tmpfs/shmem pages")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2008021215400.27773@eggly.anvils
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa23290a67b9b161e9b01810e36464a40b96a6d2
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Aug 14 14:42:45 2020 +0200

    sh: landisk: Add missing initialization of sh_io_port_base
    
    [ Upstream commit 0c64a0dce51faa9c706fdf1f957d6f19878f4b81 ]
    
    The Landisk setup code maps the CF IDE area using ioremap_prot(), and
    passes the resulting virtual addresses to the pata_platform driver,
    disguising them as I/O port addresses.  Hence the pata_platform driver
    translates them again using ioport_map().
    As CONFIG_GENERIC_IOMAP=n, and CONFIG_HAS_IOPORT_MAP=y, the
    SuperH-specific mapping code in arch/sh/kernel/ioport.c translates
    I/O port addresses to virtual addresses by adding sh_io_port_base, which
    defaults to -1, thus breaking the assumption of an identity mapping.
    
    Fix this by setting sh_io_port_base to zero.
    
    Fixes: 37b7a97884ba64bf ("sh: machvec IO death.")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abb2074c0ae65737c627ca63f7a799894c5c6368
Author: Daniel Díaz <daniel.diaz@linaro.org>
Date:   Wed Aug 12 17:15:17 2020 -0500

    tools build feature: Quote CC and CXX for their arguments
    
    [ Upstream commit fa5c893181ed2ca2f96552f50073786d2cfce6c0 ]
    
    When using a cross-compilation environment, such as OpenEmbedded,
    the CC an CXX variables are set to something more than just a
    command: there are arguments (such as --sysroot) that need to be
    passed on to the compiler so that the right set of headers and
    libraries are used.
    
    For the particular case that our systems detected, CC is set to
    the following:
    
      export CC="aarch64-linaro-linux-gcc  --sysroot=/oe/build/tmp/work/machine/perf/1.0-r9/recipe-sysroot"
    
    Without quotes, detection is as follows:
    
      Auto-detecting system features:
      ...                         dwarf: [ OFF ]
      ...            dwarf_getlocations: [ OFF ]
      ...                         glibc: [ OFF ]
      ...                          gtk2: [ OFF ]
      ...                        libbfd: [ OFF ]
      ...                        libcap: [ OFF ]
      ...                        libelf: [ OFF ]
      ...                       libnuma: [ OFF ]
      ...        numa_num_possible_cpus: [ OFF ]
      ...                       libperl: [ OFF ]
      ...                     libpython: [ OFF ]
      ...                     libcrypto: [ OFF ]
      ...                     libunwind: [ OFF ]
      ...            libdw-dwarf-unwind: [ OFF ]
      ...                          zlib: [ OFF ]
      ...                          lzma: [ OFF ]
      ...                     get_cpuid: [ OFF ]
      ...                           bpf: [ OFF ]
      ...                        libaio: [ OFF ]
      ...                       libzstd: [ OFF ]
      ...        disassembler-four-args: [ OFF ]
    
      Makefile.config:414: *** No gnu/libc-version.h found, please install glibc-dev[el].  Stop.
      Makefile.perf:230: recipe for target 'sub-make' failed
      make[1]: *** [sub-make] Error 2
      Makefile:69: recipe for target 'all' failed
      make: *** [all] Error 2
    
    With CC and CXX quoted, some of those features are now detected.
    
    Fixes: e3232c2f39ac ("tools build feature: Use CC and CXX from parent")
    Signed-off-by: Daniel Díaz <daniel.diaz@linaro.org>
    Reviewed-by: Thomas Hebb <tommyhebb@gmail.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Andrii Nakryiko <andriin@fb.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: KP Singh <kpsingh@chromium.org>
    Cc: Martin KaFai Lau <kafai@fb.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: Yonghong Song <yhs@fb.com>
    Link: http://lore.kernel.org/lkml/20200812221518.2869003-1-daniel.diaz@linaro.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eea8e679219965d10c998fdf3ef470044b7782dc
Author: Vincent Whitchurch <vincent.whitchurch@axis.com>
Date:   Mon Aug 10 15:34:04 2020 +0200

    perf bench mem: Always memset source before memcpy
    
    [ Upstream commit 1beaef29c34154ccdcb3f1ae557f6883eda18840 ]
    
    For memcpy, the source pages are memset to zero only when --cycles is
    used.  This leads to wildly different results with or without --cycles,
    since all sources pages are likely to be mapped to the same zero page
    without explicit writes.
    
    Before this fix:
    
    $ export cmd="./perf stat -e LLC-loads -- ./perf bench \
      mem memcpy -s 1024MB -l 100 -f default"
    $ $cmd
    
             2,935,826      LLC-loads
           3.821677452 seconds time elapsed
    
    $ $cmd --cycles
    
           217,533,436      LLC-loads
           8.616725985 seconds time elapsed
    
    After this fix:
    
    $ $cmd
    
           214,459,686      LLC-loads
           8.674301124 seconds time elapsed
    
    $ $cmd --cycles
    
           214,758,651      LLC-loads
           8.644480006 seconds time elapsed
    
    Fixes: 47b5757bac03c338 ("perf bench mem: Move boilerplate memory allocation to the infrastructure")
    Signed-off-by: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: kernel@axis.com
    Link: http://lore.kernel.org/lkml/20200810133404.30829-1-vincent.whitchurch@axis.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f8aa33f8f96d65018e632b81ab2f07d8ea4e55e
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Thu Aug 13 15:46:30 2020 +0800

    ALSA: echoaudio: Fix potential Oops in snd_echo_resume()
    
    [ Upstream commit 5a25de6df789cc805a9b8ba7ab5deef5067af47e ]
    
    Freeing chip on error may lead to an Oops at the next time
    the system goes to resume. Fix this by removing all
    snd_echo_free() calls on error.
    
    Fixes: 47b5d028fdce8 ("ALSA: Echoaudio - Add suspend support #2")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Link: https://lore.kernel.org/r/20200813074632.17022-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76aa02f9a4a80e5fbcf3d63d38bd57c856138a23
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jul 23 16:02:46 2020 +0300

    mfd: dln2: Run event handler loop under spinlock
    
    [ Upstream commit 3d858942250820b9adc35f963a257481d6d4c81d ]
    
    The event handler loop must be run with interrupts disabled.
    Otherwise we will have a warning:
    
    [ 1970.785649] irq 31 handler lineevent_irq_handler+0x0/0x20 enabled interrupts
    [ 1970.792739] WARNING: CPU: 0 PID: 0 at kernel/irq/handle.c:159 __handle_irq_event_percpu+0x162/0x170
    [ 1970.860732] RIP: 0010:__handle_irq_event_percpu+0x162/0x170
    ...
    [ 1970.946994] Call Trace:
    [ 1970.949446]  <IRQ>
    [ 1970.951471]  handle_irq_event_percpu+0x2c/0x80
    [ 1970.955921]  handle_irq_event+0x23/0x43
    [ 1970.959766]  handle_simple_irq+0x57/0x70
    [ 1970.963695]  generic_handle_irq+0x42/0x50
    [ 1970.967717]  dln2_rx+0xc1/0x210 [dln2]
    [ 1970.971479]  ? usb_hcd_unmap_urb_for_dma+0xa6/0x1c0
    [ 1970.976362]  __usb_hcd_giveback_urb+0x77/0xe0
    [ 1970.980727]  usb_giveback_urb_bh+0x8e/0xe0
    [ 1970.984837]  tasklet_action_common.isra.0+0x4a/0xe0
    ...
    
    Recently xHCI driver switched to tasklets in the commit 36dc01657b49
    ("usb: host: xhci: Support running urb giveback in tasklet context").
    
    The handle_irq_event_* functions are expected to be called with interrupts
    disabled and they rightfully complain here because we run in tasklet context
    with interrupts enabled.
    
    Use a event spinlock to protect event handler from being interrupted.
    
    Note, that there are only two users of this GPIO and ADC drivers and both of
    them are using generic_handle_irq() which makes above happen.
    
    Fixes: 338a12814297 ("mfd: Add support for Diolan DLN-2 devices")
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a842ed3b88fc32a65c3c3e05c4bda3441bb20319
Author: Tiezhu Yang <yangtiezhu@loongson.cn>
Date:   Tue Aug 11 18:36:16 2020 -0700

    test_kmod: avoid potential double free in trigger_config_run_type()
    
    [ Upstream commit 0776d1231bec0c7ab43baf440a3f5ef5f49dd795 ]
    
    Reset the member "test_fs" of the test configuration after a call of the
    function "kfree_const" to a null pointer so that a double memory release
    will not be performed.
    
    Fixes: d9c6a72d6fa2 ("kmod: add test driver to stress test the module loader")
    Signed-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Chuck Lever <chuck.lever@oracle.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: James Morris <jmorris@namei.org>
    Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: J. Bruce Fields <bfields@fieldses.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Josh Triplett <josh@joshtriplett.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Lars Ellenberg <lars.ellenberg@linbit.com>
    Cc: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Cc: Philipp Reisner <philipp.reisner@linbit.com>
    Cc: Roopa Prabhu <roopa@cumulusnetworks.com>
    Cc: "Serge E. Hallyn" <serge@hallyn.com>
    Cc: Sergei Trofimovich <slyfox@gentoo.org>
    Cc: Sergey Kvachonok <ravenexp@gmail.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Tony Vroon <chainsaw@gentoo.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Link: http://lkml.kernel.org/r/20200610154923.27510-4-mcgrof@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4fb68ccff4a3a3775bc8cce4a5b934123c35fd6
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Aug 11 18:35:53 2020 -0700

    fs/ufs: avoid potential u32 multiplication overflow
    
    [ Upstream commit 88b2e9b06381551b707d980627ad0591191f7a2d ]
    
    The 64 bit ino is being compared to the product of two u32 values,
    however, the multiplication is being performed using a 32 bit multiply so
    there is a potential of an overflow.  To be fully safe, cast uspi->s_ncg
    to a u64 to ensure a 64 bit multiplication occurs to avoid any chance of
    overflow.
    
    Fixes: f3e2a520f5fb ("ufs: NFS support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Evgeniy Dushistov <dushistov@mail.ru>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Link: http://lkml.kernel.org/r/20200715170355.1081713-1-colin.king@canonical.com
    Addresses-Coverity: ("Unintentional integer overflow")
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4686e6b0f9fee699c705cf49e7b74b6d05237ab0
Author: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
Date:   Wed Aug 5 12:23:19 2020 -0500

    nfs: Fix getxattr kernel panic and memory overflow
    
    [ Upstream commit b4487b93545214a9db8cbf32e86411677b0cca21 ]
    
    Move the buffer size check to decode_attr_security_label() before memcpy()
    Only call memcpy() if the buffer is large enough
    
    Fixes: aa9c2669626c ("NFS: Client implementation of Labeled-NFS")
    Signed-off-by: Jeffrey Mitchell <jeffrey.mitchell@starlab.io>
    [Trond: clean up duplicate test of label->len != 0]
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d2dc54777ab5be2c8623702275546c004dd70da
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Aug 10 10:57:05 2020 +0800

    net: qcom/emac: add missed clk_disable_unprepare in error path of emac_clks_phase1_init
    
    [ Upstream commit 50caa777a3a24d7027748e96265728ce748b41ef ]
    
    Fix the missing clk_disable_unprepare() before return
    from emac_clks_phase1_init() in the error handling case.
    
    Fixes: b9b17debc69d ("net: emac: emac gigabit ethernet controller driver")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Acked-by: Timur Tabi <timur@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c3f3bab8be19f4f64aeea3ea8fe73ddc55542216
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jun 26 13:39:59 2020 +0300

    drm/vmwgfx: Fix two list_for_each loop exit tests
    
    [ Upstream commit 4437c1152ce0e57ab8f401aa696ea6291cc07ab1 ]
    
    These if statements are supposed to be true if we ended the
    list_for_each_entry() loops without hitting a break statement but they
    don't work.
    
    In the first loop, we increment "i" after the "if (i == unit)" condition
    so we don't necessarily know that "i" is not equal to unit at the end of
    the loop.
    
    In the second loop we exit when mode is not pointing to a valid
    drm_display_mode struct so it doesn't make sense to check "mode->type".
    
    Fixes: a278724aa23c ("drm/vmwgfx: Implement fbdev on kms v2")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Roland Scheidegger <sroland@vmware.com>
    Signed-off-by: Roland Scheidegger <sroland@vmware.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c989b3b8a3acfbea230f589212a0855f531de58
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jun 26 13:34:37 2020 +0300

    drm/vmwgfx: Use correct vmw_legacy_display_unit pointer
    
    [ Upstream commit 1d2c0c565bc0da25f5e899a862fb58e612b222df ]
    
    The "entry" pointer is an offset from the list head and it doesn't
    point to a valid vmw_legacy_display_unit struct.  Presumably the
    intent was to point to the last entry.
    
    Also the "i++" wasn't used so I have removed that as well.
    
    Fixes: d7e1958dbe4a ("drm/vmwgfx: Support older hardware.")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Roland Scheidegger <sroland@vmware.com>
    Signed-off-by: Roland Scheidegger <sroland@vmware.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cddc1719a167779a3860c278fa6ea9282964df2
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Aug 6 15:35:34 2020 -0700

    Input: sentelic - fix error return when fsp_reg_write fails
    
    [ Upstream commit ea38f06e0291986eb93beb6d61fd413607a30ca4 ]
    
    Currently when the call to fsp_reg_write fails -EIO is not being returned
    because the count is being returned instead of the return value in retval.
    Fix this by returning the value in retval instead of count.
    
    Addresses-Coverity: ("Unused value")
    Fixes: fc69f4a6af49 ("Input: add new driver for Sentelic Finger Sensing Pad")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20200603141218.131663-1-colin.king@canonical.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01031b181550a346442f800cf490c46b3e886433
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sun Jul 26 18:16:06 2020 +0200

    i2c: rcar: avoid race when unregistering slave
    
    [ Upstream commit c7c9e914f9a0478fba4dc6f227cfd69cf84a4063 ]
    
    Due to the lockless design of the driver, it is theoretically possible
    to access a NULL pointer, if a slave interrupt was running while we were
    unregistering the slave. To make this rock solid, disable the interrupt
    for a short time while we are clearing the interrupt_enable register.
    This patch is purely based on code inspection. The OOPS is super-hard to
    trigger because clearing SAR (the address) makes interrupts even more
    unlikely to happen as well. While here, reinit SCR to SDBS because this
    bit should always be set according to documentation. There is no effect,
    though, because the interface is disabled.
    
    Fixes: 7b814d852af6 ("i2c: rcar: avoid race when unregistering slave client")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Niklas Söderlund <niklas.soderlund+renesas@ragnatech.se>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4408205b41c7a9fa1c8c1ff94d2d5df15771ea22
Author: Thomas Hebb <tommyhebb@gmail.com>
Date:   Sun Jul 26 21:08:14 2020 -0700

    tools build feature: Use CC and CXX from parent
    
    [ Upstream commit e3232c2f39acafd5a29128425bc30b9884642cfa ]
    
    commit c8c188679ccf ("tools build: Use the same CC for feature detection
    and actual build") changed these assignments from unconditional (:=) to
    conditional (?=) so that they wouldn't clobber values from the
    environment. However, conditional assignment does not work properly for
    variables that Make implicitly sets, among which are CC and CXX. To
    quote tools/scripts/Makefile.include, which handles this properly:
    
      # Makefiles suck: This macro sets a default value of $(2) for the
      # variable named by $(1), unless the variable has been set by
      # environment or command line. This is necessary for CC and AR
      # because make sets default values, so the simpler ?= approach
      # won't work as expected.
    
    In other words, the conditional assignments will not run even if the
    variables are not overridden in the environment; Make will set CC to
    "cc" and CXX to "g++" when it starts[1], meaning the variables are not
    empty by the time the conditional assignments are evaluated. This breaks
    cross-compilation when CROSS_COMPILE is set but CC isn't, since "cc"
    gets used for feature detection instead of the cross compiler (and
    likewise for CXX).
    
    To fix the issue, just pass down the values of CC and CXX computed by
    the parent Makefile, which gets included by the Makefile that actually
    builds whatever we're detecting features for and so is guaranteed to
    have good values. This is a better solution anyway, since it means we
    aren't trying to replicate the logic of the parent build system and so
    don't risk it getting out of sync.
    
    Leave PKG_CONFIG alone, since 1) there's no common logic to compute it
    in Makefile.include, and 2) it's not an implicit variable, so
    conditional assignment works properly.
    
    [1] https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
    
    Fixes: c8c188679ccf ("tools build: Use the same CC for feature detection and actual build")
    Signed-off-by: Thomas Hebb <tommyhebb@gmail.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: David Carrillo-Cisneros <davidcc@google.com>
    Cc: Ian Rogers <irogers@google.com>
    Cc: Igor Lubashev <ilubashe@akamai.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Quentin Monnet <quentin@isovalent.com>
    Cc: Song Liu <songliubraving@fb.com>
    Cc: Stephane Eranian <eranian@google.com>
    Cc: thomas hebb <tommyhebb@gmail.com>
    Link: http://lore.kernel.org/lkml/0a6e69d1736b0fa231a648f50b0cce5d8a6734ef.1595822871.git.tommyhebb@gmail.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a35a85779b40bc0f19ec3bc6cdbcfca64bc5a286
Author: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
Date:   Fri Jul 17 21:46:06 2020 -0700

    pwm: bcm-iproc: handle clk_get_rate() return
    
    [ Upstream commit 6ced5ff0be8e94871ba846dfbddf69d21363f3d7 ]
    
    Handle clk_get_rate() returning 0 to avoid possible division by zero.
    
    Fixes: daa5abc41c80 ("pwm: Add support for Broadcom iProc PWM controller")
    Signed-off-by: Rayagonda Kokatanur <rayagonda.kokatanur@broadcom.com>
    Signed-off-by: Scott Branden <scott.branden@broadcom.com>
    Reviewed-by: Ray Jui <ray.jui@broadcom.com>
    Reviewed-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f39500d97ed4069c76c09e5d0b2715638e8eaeb
Author: Xu Wang <vulab@iscas.ac.cn>
Date:   Mon Jul 13 03:21:43 2020 +0000

    clk: clk-atlas6: fix return value check in atlas6_clk_init()
    
    [ Upstream commit 12b90b40854a8461a02ef19f6f4474cc88d64b66 ]
    
    In case of error, the function clk_register() returns ERR_PTR()
    and never returns NULL. The NULL test in the return value check
    should be replaced with IS_ERR().
    
    Signed-off-by: Xu Wang <vulab@iscas.ac.cn>
    Link: https://lore.kernel.org/r/20200713032143.21362-1-vulab@iscas.ac.cn
    Acked-by: Barry Song <baohua@kernel.org>
    Fixes: 7bf21bc81f28 ("clk: sirf: re-arch to make the codes support both prima2 and atlas6")
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f460fce31999b1f756cf2f723085a479b28ab780
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Mon Jun 29 17:38:07 2020 +0200

    i2c: rcar: slave: only send STOP event when we have been addressed
    
    [ Upstream commit 314139f9f0abdba61ed9a8463bbcb0bf900ac5a2 ]
    
    When the SSR interrupt is activated, it will detect every STOP condition
    on the bus, not only the ones after we have been addressed. So, enable
    this interrupt only after we have been addressed, and disable it
    otherwise.
    
    Fixes: de20d1857dd6 ("i2c: rcar: add slave support")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86fc382e6bb998793bed96889015e1ff74595bf9
Author: Liu Yi L <yi.l.liu@intel.com>
Date:   Fri Jul 24 09:49:14 2020 +0800

    iommu/vt-d: Enforce PASID devTLB field mask
    
    [ Upstream commit 5f77d6ca5ca74e4b4a5e2e010f7ff50c45dea326 ]
    
    Set proper masks to avoid invalid input spillover to reserved bits.
    
    Signed-off-by: Liu Yi L <yi.l.liu@intel.com>
    Signed-off-by: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Link: https://lore.kernel.org/r/20200724014925.15523-2-baolu.lu@linux.intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit caaeceadccd69641c803b26dce3cfdf686edc5c3
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Jul 14 20:22:11 2020 +0100

    iommu/omap: Check for failure of a call to omap_iommu_dump_ctx
    
    [ Upstream commit dee9d154f40c58d02f69acdaa5cfd1eae6ebc28b ]
    
    It is possible for the call to omap_iommu_dump_ctx to return
    a negative error number, so check for the failure and return
    the error number rather than pass the negative value to
    simple_read_from_buffer.
    
    Fixes: 14e0e6796a0d ("OMAP: iommu: add initial debugfs support")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20200714192211.744776-1-colin.king@canonical.com
    Addresses-Coverity: ("Improper use of negative value")
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit caa301d61ce77e93b89ae6b1e29f0459601dd1e4
Author: Ming Lei <ming.lei@redhat.com>
Date:   Fri Jun 19 16:42:14 2020 +0800

    dm rq: don't call blk_mq_queue_stopped() in dm_stop_queue()
    
    [ Upstream commit e766668c6cd49d741cfb49eaeb38998ba34d27bc ]
    
    dm_stop_queue() only uses blk_mq_quiesce_queue() so it doesn't
    formally stop the blk-mq queue; therefore there is no point making the
    blk_mq_queue_stopped() check -- it will never be stopped.
    
    In addition, even though dm_stop_queue() actually tries to quiesce hw
    queues via blk_mq_quiesce_queue(), checking with blk_queue_quiesced()
    to avoid unnecessary queue quiesce isn't reliable because: the
    QUEUE_FLAG_QUIESCED flag is set before synchronize_rcu() and
    dm_stop_queue() may be called when synchronize_rcu() from another
    blk_mq_quiesce_queue() is in-progress.
    
    Fixes: 7b17c2f7292ba ("dm: Fix a race condition related to stopping and starting queues")
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b8272ea6c6c5a46f7d4c413907d0bbc12f802ac
Author: Steve Longerbeam <slongerbeam@gmail.com>
Date:   Wed Jun 17 15:40:37 2020 -0700

    gpu: ipu-v3: image-convert: Combine rotate/no-rotate irq handlers
    
    [ Upstream commit 0f6245f42ce9b7e4d20f2cda8d5f12b55a44d7d1 ]
    
    Combine the rotate_irq() and norotate_irq() handlers into a single
    eof_irq() handler.
    
    Signed-off-by: Steve Longerbeam <slongerbeam@gmail.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 894c9cb90d78f9d66cb2b8227c175d604f4f5d7e
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 8 14:49:52 2020 +0200

    USB: serial: ftdi_sio: clean up receive processing
    
    [ Upstream commit ce054039ba5e47b75a3be02a00274e52b06a6456 ]
    
    Clean up receive processing by dropping the character pointer and
    keeping the length argument unchanged throughout the function.
    
    Also make it more apparent that sysrq processing can consume a
    characters by adding an explicit continue.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a9bec220b6812b113c350f4db493cd016bd220ac
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 8 14:49:51 2020 +0200

    USB: serial: ftdi_sio: make process-packet buffer unsigned
    
    [ Upstream commit ab4cc4ef6724ea588e835fc1e764c4b4407a70b7 ]
    
    Use an unsigned type for the process-packet buffer argument and give it
    a more apt name.
    
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d89c6815880255bce12aa6555150160d26957556
Author: Kamal Heib <kamalheib1@gmail.com>
Date:   Tue Jun 23 13:52:36 2020 +0300

    RDMA/ipoib: Return void from ipoib_ib_dev_stop()
    
    [ Upstream commit 95a5631f6c9f3045f26245e6045244652204dfdb ]
    
    The return value from ipoib_ib_dev_stop() is always 0 - change it to be
    void.
    
    Link: https://lore.kernel.org/r/20200623105236.18683-1-kamalheib1@gmail.com
    Signed-off-by: Kamal Heib <kamalheib1@gmail.com>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1b7465bc7be9db1d2baac2413f00341e4031dc5
Author: Charles Keepax <ckeepax@opensource.cirrus.com>
Date:   Mon Jun 15 14:53:21 2020 +0100

    mfd: arizona: Ensure 32k clock is put on driver unbind and error
    
    [ Upstream commit ddff6c45b21d0437ce0c85f8ac35d7b5480513d7 ]
    
    Whilst it doesn't matter if the internal 32k clock register settings
    are cleaned up on exit, as the part will be turned off losing any
    settings, hence the driver hasn't historially bothered. The external
    clock should however be cleaned up, as it could cause clocks to be
    left on, and will at best generate a warning on unbind.
    
    Add clean up on both the probe error path and unbind for the 32k
    clock.
    
    Fixes: cdd8da8cc66b ("mfd: arizona: Add gating of external MCLKn clocks")
    Signed-off-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4626f27956989a0d7d3df546cf4b601f872a6e6
Author: Liu Ying <victor.liu@nxp.com>
Date:   Thu Jul 9 10:28:52 2020 +0800

    drm/imx: imx-ldb: Disable both channels for split mode in enc->disable()
    
    commit 3b2a999582c467d1883716b37ffcc00178a13713 upstream.
    
    Both of the two LVDS channels should be disabled for split mode
    in the encoder's ->disable() callback, because they are enabled
    in the encoder's ->enable() callback.
    
    Fixes: 6556f7f82b9c ("drm: imx: Move imx-drm driver out of staging")
    Cc: Philipp Zabel <p.zabel@pengutronix.de>
    Cc: Sascha Hauer <s.hauer@pengutronix.de>
    Cc: Pengutronix Kernel Team <kernel@pengutronix.de>
    Cc: NXP Linux Team <linux-imx@nxp.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Liu Ying <victor.liu@nxp.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4e637074166c8be1650fc08ba24317bff66deb7
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Fri Jul 10 18:10:53 2020 +0300

    perf intel-pt: Fix FUP packet state
    
    commit 401136bb084fd021acd9f8c51b52fe0a25e326b2 upstream.
    
    While walking code towards a FUP ip, the packet state is
    INTEL_PT_STATE_FUP or INTEL_PT_STATE_FUP_NO_TIP. That was mishandled
    resulting in the state becoming INTEL_PT_STATE_IN_SYNC prematurely.  The
    result was an occasional lost EXSTOP event.
    
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: stable@vger.kernel.org
    Link: http://lore.kernel.org/lkml/20200710151104.15137-2-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f15fbd289600fbbe5f1d6fcb4ec5a4cc069209e1
Author: Anton Blanchard <anton@ozlabs.org>
Date:   Wed Jul 15 10:08:20 2020 +1000

    pseries: Fix 64 bit logical memory block panic
    
    commit 89c140bbaeee7a55ed0360a88f294ead2b95201b upstream.
    
    Booting with a 4GB LMB size causes us to panic:
    
      qemu-system-ppc64: OS terminated: OS panic:
          Memory block size not suitable: 0x0
    
    Fix pseries_memory_block_size() to handle 64 bit LMBs.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Anton Blanchard <anton@ozlabs.org>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200715000820.1255764-1-anton@ozlabs.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c2416d2d323234f1674d21948dbe68685a3f4b1a
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Thu Jun 11 21:17:45 2020 +0200

    watchdog: f71808e_wdt: clear watchdog timeout occurred flag
    
    commit 4f39d575844148fbf3081571a1f3b4ae04150958 upstream.
    
    The flag indicating a watchdog timeout having occurred normally persists
    till Power-On Reset of the Fintek Super I/O chip. The user can clear it
    by writing a `1' to the bit.
    
    The driver doesn't offer a restart method, so regular system reboot
    might not reset the Super I/O and if the watchdog isn't enabled, we
    won't touch the register containing the bit on the next boot.
    In this case all subsequent regular reboots will be wrongly flagged
    by the driver as being caused by the watchdog.
    
    Fix this by having the flag cleared after read. This is also done by
    other drivers like those for the i6300esb and mpc8xxx_wdt.
    
    Fixes: b97cb21a4634 ("watchdog: f71808e_wdt: Fix WDTMOUT_STS register read")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200611191750.28096-5-a.fatoum@pengutronix.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c46c2a3813b039a240fb4da40ad29c4331a0ad1e
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Thu Jun 11 21:17:44 2020 +0200

    watchdog: f71808e_wdt: remove use of wrong watchdog_info option
    
    commit 802141462d844f2e6a4d63a12260d79b7afc4c34 upstream.
    
    The flags that should be or-ed into the watchdog_info.options by drivers
    all start with WDIOF_, e.g. WDIOF_SETTIMEOUT, which indicates that the
    driver's watchdog_ops has a usable set_timeout.
    
    WDIOC_SETTIMEOUT was used instead, which expands to 0xc0045706, which
    equals:
    
       WDIOF_FANFAULT | WDIOF_EXTERN1 | WDIOF_PRETIMEOUT | WDIOF_ALARMONLY |
       WDIOF_MAGICCLOSE | 0xc0045000
    
    These were so far indicated to userspace on WDIOC_GETSUPPORT.
    As the driver has not yet been migrated to the new watchdog kernel API,
    the constant can just be dropped without substitute.
    
    Fixes: 96cb4eb019ce ("watchdog: f71808e_wdt: new watchdog driver for Fintek F71808E and F71882FG")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200611191750.28096-4-a.fatoum@pengutronix.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b62190dc4d6a1955847e3171e60f15b42fe55121
Author: Ahmad Fatoum <a.fatoum@pengutronix.de>
Date:   Thu Jun 11 21:17:43 2020 +0200

    watchdog: f71808e_wdt: indicate WDIOF_CARDRESET support in watchdog_info.options
    
    commit e871e93fb08a619dfc015974a05768ed6880fd82 upstream.
    
    The driver supports populating bootstatus with WDIOF_CARDRESET, but so
    far userspace couldn't portably determine whether absence of this flag
    meant no watchdog reset or no driver support. Or-in the bit to fix this.
    
    Fixes: b97cb21a4634 ("watchdog: f71808e_wdt: Fix WDTMOUT_STS register read")
    Cc: stable@vger.kernel.org
    Signed-off-by: Ahmad Fatoum <a.fatoum@pengutronix.de>
    Reviewed-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/20200611191750.28096-3-a.fatoum@pengutronix.de
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Wim Van Sebroeck <wim@linux-watchdog.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39cfcb4100f3ddcde5ead1679593adfe692cea55
Author: Steven Rostedt (VMware) <rostedt@goodmis.org>
Date:   Tue Aug 4 20:00:02 2020 -0400

    tracing: Use trace_sched_process_free() instead of exit() for pid tracing
    
    commit afcab636657421f7ebfa0783a91f90256bba0091 upstream.
    
    On exit, if a process is preempted after the trace_sched_process_exit()
    tracepoint but before the process is done exiting, then when it gets
    scheduled in, the function tracers will not filter it properly against the
    function tracing pid filters.
    
    That is because the function tracing pid filters hooks to the
    sched_process_exit() tracepoint to remove the exiting task's pid from the
    filter list. Because the filtering happens at the sched_switch tracepoint,
    when the exiting task schedules back in to finish up the exit, it will no
    longer be in the function pid filtering tables.
    
    This was noticeable in the notrace self tests on a preemptable kernel, as
    the tests would fail as it exits and preempted after being taken off the
    notrace filter table and on scheduling back in it would not be in the
    notrace list, and then the ending of the exit function would trace. The test
    detected this and would fail.
    
    Cc: stable@vger.kernel.org
    Cc: Namhyung Kim <namhyung@kernel.org>
    Fixes: 1e10486ffee0a ("ftrace: Add 'function-fork' trace option")
    Fixes: c37775d57830a ("tracing: Add infrastructure to allow set_event_pid to follow children"
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 498374f74c3842a2bab53b11545eb916303f5fa4
Author: Kevin Hao <haokexin@gmail.com>
Date:   Thu Jul 30 16:23:18 2020 +0800

    tracing/hwlat: Honor the tracing_cpumask
    
    commit 96b4833b6827a62c295b149213c68b559514c929 upstream.
    
    In calculation of the cpu mask for the hwlat kernel thread, the wrong
    cpu mask is used instead of the tracing_cpumask, this causes the
    tracing/tracing_cpumask useless for hwlat tracer. Fixes it.
    
    Link: https://lkml.kernel.org/r/20200730082318.42584-2-haokexin@gmail.com
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: stable@vger.kernel.org
    Fixes: 0330f7aa8ee6 ("tracing: Have hwlat trace migrate across tracing_cpumask CPUs")
    Signed-off-by: Kevin Hao <haokexin@gmail.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c5487346053ab67828f7f636cffbb4e954e6004
Author: Muchun Song <songmuchun@bytedance.com>
Date:   Tue Jul 28 14:45:36 2020 +0800

    kprobes: Fix NULL pointer dereference at kprobe_ftrace_handler
    
    commit 0cb2f1372baa60af8456388a574af6133edd7d80 upstream.
    
    We found a case of kernel panic on our server. The stack trace is as
    follows(omit some irrelevant information):
    
      BUG: kernel NULL pointer dereference, address: 0000000000000080
      RIP: 0010:kprobe_ftrace_handler+0x5e/0xe0
      RSP: 0018:ffffb512c6550998 EFLAGS: 00010282
      RAX: 0000000000000000 RBX: ffff8e9d16eea018 RCX: 0000000000000000
      RDX: ffffffffbe1179c0 RSI: ffffffffc0535564 RDI: ffffffffc0534ec0
      RBP: ffffffffc0534ec1 R08: ffff8e9d1bbb0f00 R09: 0000000000000004
      R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
      R13: ffff8e9d1f797060 R14: 000000000000bacc R15: ffff8e9ce13eca00
      CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000000080 CR3: 00000008453d0005 CR4: 00000000003606e0
      DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
      DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
      Call Trace:
       <IRQ>
       ftrace_ops_assist_func+0x56/0xe0
       ftrace_call+0x5/0x34
       tcpa_statistic_send+0x5/0x130 [ttcp_engine]
    
    The tcpa_statistic_send is the function being kprobed. After analysis,
    the root cause is that the fourth parameter regs of kprobe_ftrace_handler
    is NULL. Why regs is NULL? We use the crash tool to analyze the kdump.
    
      crash> dis tcpa_statistic_send -r
             <tcpa_statistic_send>: callq 0xffffffffbd8018c0 <ftrace_caller>
    
    The tcpa_statistic_send calls ftrace_caller instead of ftrace_regs_caller.
    So it is reasonable that the fourth parameter regs of kprobe_ftrace_handler
    is NULL. In theory, we should call the ftrace_regs_caller instead of the
    ftrace_caller. After in-depth analysis, we found a reproducible path.
    
      Writing a simple kernel module which starts a periodic timer. The
      timer's handler is named 'kprobe_test_timer_handler'. The module
      name is kprobe_test.ko.
    
      1) insmod kprobe_test.ko
      2) bpftrace -e 'kretprobe:kprobe_test_timer_handler {}'
      3) echo 0 > /proc/sys/kernel/ftrace_enabled
      4) rmmod kprobe_test
      5) stop step 2) kprobe
      6) insmod kprobe_test.ko
      7) bpftrace -e 'kretprobe:kprobe_test_timer_handler {}'
    
    We mark the kprobe as GONE but not disarm the kprobe in the step 4).
    The step 5) also do not disarm the kprobe when unregister kprobe. So
    we do not remove the ip from the filter. In this case, when the module
    loads again in the step 6), we will replace the code to ftrace_caller
    via the ftrace_module_enable(). When we register kprobe again, we will
    not replace ftrace_caller to ftrace_regs_caller because the ftrace is
    disabled in the step 3). So the step 7) will trigger kernel panic. Fix
    this problem by disarming the kprobe when the module is going away.
    
    Link: https://lkml.kernel.org/r/20200728064536.24405-1-songmuchun@bytedance.com
    
    Cc: stable@vger.kernel.org
    Fixes: ae6aa16fdc16 ("kprobes: introduce ftrace based optimization")
    Acked-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Co-developed-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8136c5625cdfcba2dc408c1d2438f38284957dcb
Author: Chengming Zhou <zhouchengming@bytedance.com>
Date:   Wed Jul 29 02:05:53 2020 +0800

    ftrace: Setup correct FTRACE_FL_REGS flags for module
    
    commit 8a224ffb3f52b0027f6b7279854c71a31c48fc97 upstream.
    
    When module loaded and enabled, we will use __ftrace_replace_code
    for module if any ftrace_ops referenced it found. But we will get
    wrong ftrace_addr for module rec in ftrace_get_addr_new, because
    rec->flags has not been setup correctly. It can cause the callback
    function of a ftrace_ops has FTRACE_OPS_FL_SAVE_REGS to be called
    with pt_regs set to NULL.
    So setup correct FTRACE_FL_REGS flags for rec when we call
    referenced_filters to find ftrace_ops references it.
    
    Link: https://lkml.kernel.org/r/20200728180554.65203-1-zhouchengming@bytedance.com
    
    Cc: stable@vger.kernel.org
    Fixes: 8c4f3c3fa9681 ("ftrace: Check module functions being traced on reload")
    Signed-off-by: Chengming Zhou <zhouchengming@bytedance.com>
    Signed-off-by: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e6b387f79c8f947a61b444ee4b7508e020aaa830
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Thu Aug 6 23:18:02 2020 -0700

    ocfs2: change slot number type s16 to u16
    
    commit 38d51b2dd171ad973afc1f5faab825ed05a2d5e9 upstream.
    
    Dan Carpenter reported the following static checker warning.
    
            fs/ocfs2/super.c:1269 ocfs2_parse_options() warn: '(-1)' 65535 can't fit into 32767 'mopt->slot'
            fs/ocfs2/suballoc.c:859 ocfs2_init_inode_steal_slot() warn: '(-1)' 65535 can't fit into 32767 'osb->s_inode_steal_slot'
            fs/ocfs2/suballoc.c:867 ocfs2_init_meta_steal_slot() warn: '(-1)' 65535 can't fit into 32767 'osb->s_meta_steal_slot'
    
    That's because OCFS2_INVALID_SLOT is (u16)-1. Slot number in ocfs2 can be
    never negative, so change s16 to u16.
    
    Fixes: 9277f8334ffc ("ocfs2: fix value of OCFS2_INVALID_SLOT")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Reviewed-by: Gang He <ghe@suse.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200627001259.19757-1-junxiao.bi@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60c1ebb84d3c1fa02521f5b1653271d321956cc4
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Mon Apr 20 16:02:21 2020 -0400

    ext2: fix missing percpu_counter_inc
    
    commit bc2fbaa4d3808aef82dd1064a8e61c16549fe956 upstream.
    
    sbi->s_freeinodes_counter is only decreased by the ext2 code, it is never
    increased. This patch fixes it.
    
    Note that sbi->s_freeinodes_counter is only used in the algorithm that
    tries to find the group for new allocations, so this bug is not easily
    visible (the only visibility is that the group finding algorithm selects
    inoptinal result).
    
    Link: https://lore.kernel.org/r/alpine.LRH.2.02.2004201538300.19436@file01.intranet.prod.int.rdu2.redhat.com
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 773dde4a5e70d5ffa5129b6170d5cb886b2fe6d2
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Jul 16 18:40:23 2020 +0800

    MIPS: CPU#0 is not hotpluggable
    
    commit 9cce844abf07b683cff5f0273977d5f8d0af94c7 upstream.
    
    Now CPU#0 is not hotpluggable on MIPS, so prevent to create /sys/devices
    /system/cpu/cpu0/online which confuses some user-space tools.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b944a9e3e2718a8b87807ba5834fdc3048b0e2ae
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Aug 3 11:02:10 2020 +0200

    mac80211: fix misplaced while instead of if
    
    commit 5981fe5b0529ba25d95f37d7faa434183ad618c5 upstream.
    
    This never was intended to be a 'while' loop, it should've
    just been an 'if' instead of 'while'. Fix this.
    
    I noticed this while applying another patch from Ben that
    intended to fix a busy loop at this spot.
    
    Cc: stable@vger.kernel.org
    Fixes: b16798f5b907 ("mac80211: mark station unauthorized before key removal")
    Reported-by: Ben Greear <greearb@candelatech.com>
    Link: https://lore.kernel.org/r/20200803110209.253009ae41ff.I3522aad099392b31d5cf2dcca34cbac7e5832dde@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e4f9dfd6650d3295844faba2ecdb3dc2ac02fae
Author: Coly Li <colyli@suse.de>
Date:   Sat Jul 25 20:00:16 2020 +0800

    bcache: allocate meta data pages as compound pages
    
    commit 5fe48867856367142d91a82f2cbf7a57a24cbb70 upstream.
    
    There are some meta data of bcache are allocated by multiple pages,
    and they are used as bio bv_page for I/Os to the cache device. for
    example cache_set->uuids, cache->disk_buckets, journal_write->data,
    bset_tree->data.
    
    For such meta data memory, all the allocated pages should be treated
    as a single memory block. Then the memory management and underlying I/O
    code can treat them more clearly.
    
    This patch adds __GFP_COMP flag to all the location allocating >0 order
    pages for the above mentioned meta data. Then their pages are treated
    as compound pages now.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0fdf2cd83a3c6abed1aebfcc218bc9e174cb1226
Author: ChangSyun Peng <allenpeng@synology.com>
Date:   Fri Jul 31 17:50:17 2020 +0800

    md/raid5: Fix Force reconstruct-write io stuck in degraded raid5
    
    commit a1c6ae3d9f3dd6aa5981a332a6f700cf1c25edef upstream.
    
    In degraded raid5, we need to read parity to do reconstruct-write when
    data disks fail. However, we can not read parity from
    handle_stripe_dirtying() in force reconstruct-write mode.
    
    Reproducible Steps:
    
    1. Create degraded raid5
    mdadm -C /dev/md2 --assume-clean -l5 -n3 /dev/sda2 /dev/sdb2 missing
    2. Set rmw_level to 0
    echo 0 > /sys/block/md2/md/rmw_level
    3. IO to raid5
    
    Now some io may be stuck in raid5. We can use handle_stripe_fill() to read
    the parity in this situation.
    
    Cc: <stable@vger.kernel.org> # v4.4+
    Reviewed-by: Alex Wu <alexwu@synology.com>
    Reviewed-by: BingJing Chang <bingjingc@synology.com>
    Reviewed-by: Danny Shih <dannyshih@synology.com>
    Signed-off-by: ChangSyun Peng <allenpeng@synology.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dfe707387e712d05b428b52dbe4b30d236c67ef0
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Jun 9 16:11:29 2020 -0700

    net/compat: Add missing sock updates for SCM_RIGHTS
    
    commit d9539752d23283db4692384a634034f451261e29 upstream.
    
    Add missed sock updates to compat path via a new helper, which will be
    used more in coming patches. (The net/core/scm.c code is left as-is here
    to assist with -stable backports for the compat path.)
    
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Sargun Dhillon <sargun@sargun.me>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 48a87cc26c13 ("net: netprio: fd passed in SCM_RIGHTS datagram not set correctly")
    Fixes: d84295067fc7 ("net: net_cls: fd passed in SCM_RIGHTS datagram not set correctly")
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e887ae89f08bc202b2541aa2f499538d7b7335d8
Author: Jonathan McDowell <noodles@earth.li>
Date:   Wed Aug 12 20:37:01 2020 +0100

    net: stmmac: dwmac1000: provide multicast filter fallback
    
    commit 592d751c1e174df5ff219946908b005eb48934b3 upstream.
    
    If we don't have a hardware multicast filter available then instead of
    silently failing to listen for the requested ethernet broadcast
    addresses fall back to receiving all multicast packets, in a similar
    fashion to other drivers with no multicast filter.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jonathan McDowell <noodles@earth.li>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fa50f210048bcb1c02b2f6a72533fcc70cee3c9
Author: Jonathan McDowell <noodles@earth.li>
Date:   Wed Aug 12 20:37:23 2020 +0100

    net: ethernet: stmmac: Disable hardware multicast filter
    
    commit df43dd526e6609769ae513a81443c7aa727c8ca3 upstream.
    
    The IPQ806x does not appear to have a functional multicast ethernet
    address filter. This was observed as a failure to correctly receive IPv6
    packets on a LAN to the all stations address. Checking the vendor driver
    shows that it does not attempt to enable the multicast filter and
    instead falls back to receiving all multicast packets, internally
    setting ALLMULTI.
    
    Use the new fallback support in the dwmac1000 driver to correctly
    achieve the same with the mainline IPQ806x driver. Confirmed to fix IPv6
    functionality on an RB3011 router.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Jonathan McDowell <noodles@earth.li>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb8a301b47f0ec0a4f6bdbb4b707bc6e2cdb7f23
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Tue Aug 4 22:44:06 2020 +1000

    powerpc: Fix circular dependency between percpu.h and mmu.h
    
    commit 0c83b277ada72b585e6a3e52b067669df15bcedb upstream.
    
    Recently random.h started including percpu.h (see commit
    f227e3ec3b5c ("random32: update the net random state on interrupt and
    activity")), which broke corenet64_smp_defconfig:
    
      In file included from /linux/arch/powerpc/include/asm/paca.h:18,
                       from /linux/arch/powerpc/include/asm/percpu.h:13,
                       from /linux/include/linux/random.h:14,
                       from /linux/lib/uuid.c:14:
      /linux/arch/powerpc/include/asm/mmu.h:139:22: error: unknown type name 'next_tlbcam_idx'
        139 | DECLARE_PER_CPU(int, next_tlbcam_idx);
    
    This is due to a circular header dependency:
      asm/mmu.h includes asm/percpu.h, which includes asm/paca.h, which
      includes asm/mmu.h
    
    Which means DECLARE_PER_CPU() isn't defined when mmu.h needs it.
    
    We can fix it by moving the include of paca.h below the include of
    asm-generic/percpu.h.
    
    This moves the include of paca.h out of the #ifdef __powerpc64__, but
    that is OK because paca.h is almost entirely inside #ifdef
    CONFIG_PPC64 anyway.
    
    It also moves the include of paca.h out of the #ifdef CONFIG_SMP,
    which could possibly break something, but seems to have no ill
    effects.
    
    Fixes: f227e3ec3b5c ("random32: update the net random state on interrupt and activity")
    Cc: stable@vger.kernel.org # v5.8
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200804130558.292328-1-mpe@ellerman.id.au
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db6138fcfb0ece98efb2e7091d00b49a4e3f1b1f
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Fri Jul 31 12:37:32 2020 -0700

    xtensa: fix xtensa_pmu_setup prototype
    
    commit 6d65d3769d1910379e1cfa61ebf387efc6bfb22c upstream.
    
    Fix the following build error in configurations with
    CONFIG_XTENSA_VARIANT_HAVE_PERF_EVENTS=y:
    
      arch/xtensa/kernel/perf_event.c:420:29: error: passing argument 3 of
      ‘cpuhp_setup_state’ from incompatible pointer type
    
    Cc: stable@vger.kernel.org
    Fixes: 25a77b55e74c ("xtensa/perf: Convert the hotplug notifier to state machine callbacks")
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 918a18cd9a74d1a58964304b9b8e33f20148a7ac
Author: Alexandru Ardelean <alexandru.ardelean@analog.com>
Date:   Mon Jul 6 14:02:57 2020 +0300

    iio: dac: ad5592r: fix unbalanced mutex unlocks in ad5592r_read_raw()
    
    commit 65afb0932a81c1de719ceee0db0b276094b10ac8 upstream.
    
    There are 2 exit paths where the lock isn't held, but try to unlock the
    mutex when exiting. In these places we should just return from the
    function.
    
    A neater approach would be to cleanup the ad5592r_read_raw(), but that
    would make this patch more difficult to backport to stable versions.
    
    Fixes 56ca9db862bf3: ("iio: dac: Add support for the AD5592R/AD5593R ADCs/DACs")
    Reported-by: Charles Stanhope <charles.stanhope@gmail.com>
    Signed-off-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7db74492b27d1b537811415bb54b71d86ddca300
Author: Christian Eggers <ceggers@arri.de>
Date:   Mon Jul 27 12:16:05 2020 +0200

    dt-bindings: iio: io-channel-mux: Fix compatible string in example code
    
    commit add48ba425192c6e04ce70549129cacd01e2a09e upstream.
    
    The correct compatible string is "gpio-mux" (see
    bindings/mux/gpio-mux.txt).
    
    Cc: stable@vger.kernel.org # v4.13+
    Reviewed-by: Peter Rosin <peda@axentia.se>
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Link: https://lore.kernel.org/r/20200727101605.24384-1-ceggers@arri.de
    Signed-off-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6dea2165ea58a48be5c932dd4c3c6c27dacdf47b
Author: Filipe Manana <fdmanana@suse.com>
Date:   Wed Jul 29 10:17:50 2020 +0100

    btrfs: fix memory leaks after failure to lookup checksums during inode logging
    
    commit 4f26433e9b3eb7a55ed70d8f882ae9cd48ba448b upstream.
    
    While logging an inode, at copy_items(), if we fail to lookup the checksums
    for an extent we release the destination path, free the ins_data array and
    then return immediately. However a previous iteration of the for loop may
    have added checksums to the ordered_sums list, in which case we leak the
    memory used by them.
    
    So fix this by making sure we iterate the ordered_sums list and free all
    its checksums before returning.
    
    Fixes: 3650860b90cc2a ("Btrfs: remove almost all of the BUG()'s from tree-log.c")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ab5eeed94aeed68b9bb5c82cc3e2edd0355fa0b
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Mon Jul 27 10:28:05 2020 -0400

    btrfs: only search for left_info if there is no right_info in try_merge_free_space
    
    commit bf53d4687b8f3f6b752f091eb85f62369a515dfd upstream.
    
    In try_to_merge_free_space we attempt to find entries to the left and
    right of the entry we are adding to see if they can be merged.  We
    search for an entry past our current info (saved into right_info), and
    then if right_info exists and it has a rb_prev() we save the rb_prev()
    into left_info.
    
    However there's a slight problem in the case that we have a right_info,
    but no entry previous to that entry.  At that point we will search for
    an entry just before the info we're attempting to insert.  This will
    simply find right_info again, and assign it to left_info, making them
    both the same pointer.
    
    Now if right_info _can_ be merged with the range we're inserting, we'll
    add it to the info and free right_info.  However further down we'll
    access left_info, which was right_info, and thus get a use-after-free.
    
    Fix this by only searching for the left entry if we don't find a right
    entry at all.
    
    The CVE referenced had a specially crafted file system that could
    trigger this use-after-free. However with the tree checker improvements
    we no longer trigger the conditions for the UAF.  But the original
    conditions still apply, hence this fix.
    
    Reference: CVE-2019-19448
    Fixes: 963030817060 ("Btrfs: use hybrid extents+bitmap rb tree for free space")
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a72c924b9c5cb7092de7e2f84508b2f6141b515a
Author: Qu Wenruo <wqu@suse.com>
Date:   Tue Jun 16 10:17:34 2020 +0800

    btrfs: don't allocate anonymous block device for user invisible roots
    
    commit 851fd730a743e072badaf67caf39883e32439431 upstream.
    
    [BUG]
    When a lot of subvolumes are created, there is a user report about
    transaction aborted:
    
      BTRFS: Transaction aborted (error -24)
      WARNING: CPU: 17 PID: 17041 at fs/btrfs/transaction.c:1576 create_pending_snapshot+0xbc4/0xd10 [btrfs]
      RIP: 0010:create_pending_snapshot+0xbc4/0xd10 [btrfs]
      Call Trace:
       create_pending_snapshots+0x82/0xa0 [btrfs]
       btrfs_commit_transaction+0x275/0x8c0 [btrfs]
       btrfs_mksubvol+0x4b9/0x500 [btrfs]
       btrfs_ioctl_snap_create_transid+0x174/0x180 [btrfs]
       btrfs_ioctl_snap_create_v2+0x11c/0x180 [btrfs]
       btrfs_ioctl+0x11a4/0x2da0 [btrfs]
       do_vfs_ioctl+0xa9/0x640
       ksys_ioctl+0x67/0x90
       __x64_sys_ioctl+0x1a/0x20
       do_syscall_64+0x5a/0x110
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
      ---[ end trace 33f2f83f3d5250e9 ]---
      BTRFS: error (device sda1) in create_pending_snapshot:1576: errno=-24 unknown
      BTRFS info (device sda1): forced readonly
      BTRFS warning (device sda1): Skipping commit of aborted transaction.
      BTRFS: error (device sda1) in cleanup_transaction:1831: errno=-24 unknown
    
    [CAUSE]
    The error is EMFILE (Too many files open) and comes from the anonymous
    block device allocation. The ids are in a shared pool of size 1<<20.
    
    The ids are assigned to live subvolumes, ie. the root structure exists
    in memory (eg. after creation or after the root appears in some path).
    The pool could be exhausted if the numbers are not reclaimed fast
    enough, after subvolume deletion or if other system component uses the
    anon block devices.
    
    [WORKAROUND]
    Since it's not possible to completely solve the problem, we can only
    minimize the time the id is allocated to a subvolume root.
    
    Firstly, we can reduce the use of anon_dev by trees that are not
    subvolume roots, like data reloc tree.
    
    This patch will do extra check on root objectid, to skip roots that
    don't need anon_dev.  Currently it's only data reloc tree and orphan
    roots.
    
    Reported-by: Greed Rong <greedrong@gmail.com>
    Link: https://lore.kernel.org/linux-btrfs/CA+UqX+NTrZ6boGnWHhSeZmEY5J76CTqmYjO2S+=tHJX7nb9DPw@mail.gmail.com/
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Qu Wenruo <wqu@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cad6fb18c4b56a488f80e66fed43779141330f16
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Fri Jun 26 19:42:34 2020 +0200

    PCI: hotplug: ACPI: Fix context refcounting in acpiphp_grab_context()
    
    commit dae68d7fd4930315389117e9da35b763f12238f9 upstream.
    
    If context is not NULL in acpiphp_grab_context(), but the
    is_going_away flag is set for the device's parent, the reference
    counter of the context needs to be decremented before returning
    NULL or the context will never be freed, so make that happen.
    
    Fixes: edf5bf34d408 ("ACPI / dock: Use callback pointers from devices' ACPI hotplug contexts")
    Reported-by: Vasily Averin <vvs@virtuozzo.com>
    Cc: 3.15+ <stable@vger.kernel.org> # 3.15+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 17e40ab581646419a5939f711fcc533e89866c57
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Jul 16 00:34:21 2020 -0500

    smb3: warn on confusing error scenario with sec=krb5
    
    commit 0a018944eee913962bce8ffebbb121960d5125d9 upstream.
    
    When mounting with Kerberos, users have been confused about the
    default error returned in scenarios in which either keyutils is
    not installed or the user did not properly acquire a krb5 ticket.
    Log a warning message in the case that "ENOKEY" is returned
    from the get_spnego_key upcall so that users can better understand
    why mount failed in those two cases.
    
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb5841f3c410800095b4f708b44d66bd66d0c807
Author: Tim Froidcoeur <tim.froidcoeur@tessares.net>
Date:   Tue Aug 11 20:33:24 2020 +0200

    net: initialize fastreuse on inet_inherit_port
    
    commit d76f3351cea2d927fdf70dd7c06898235035e84e upstream.
    
    In the case of TPROXY, bind_conflict optimizations for SO_REUSEADDR or
    SO_REUSEPORT are broken, possibly resulting in O(n) instead of O(1) bind
    behaviour or in the incorrect reuse of a bind.
    
    the kernel keeps track for each bind_bucket if all sockets in the
    bind_bucket support SO_REUSEADDR or SO_REUSEPORT in two fastreuse flags.
    These flags allow skipping the costly bind_conflict check when possible
    (meaning when all sockets have the proper SO_REUSE option).
    
    For every socket added to a bind_bucket, these flags need to be updated.
    As soon as a socket that does not support reuse is added, the flag is
    set to false and will never go back to true, unless the bind_bucket is
    deleted.
    
    Note that there is no mechanism to re-evaluate these flags when a socket
    is removed (this might make sense when removing a socket that would not
    allow reuse; this leaves room for a future patch).
    
    For this optimization to work, it is mandatory that these flags are
    properly initialized and updated.
    
    When a child socket is created from a listen socket in
    __inet_inherit_port, the TPROXY case could create a new bind bucket
    without properly initializing these flags, thus preventing the
    optimization to work. Alternatively, a socket not allowing reuse could
    be added to an existing bind bucket without updating the flags, causing
    bind_conflict to never be called as it should.
    
    Call inet_csk_update_fastreuse when __inet_inherit_port decides to create
    a new bind_bucket or use a different bind_bucket than the one of the
    listen socket.
    
    Fixes: 093d282321da ("tproxy: fix hash locking issue when using port redirection in __inet_inherit_port()")
    Acked-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Tim Froidcoeur <tim.froidcoeur@tessares.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13eee84d7fa2afd9261e020446702589ea4a52e5
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Mon Jul 27 11:13:40 2020 +0200

    xen/balloon: make the balloon wait interruptible
    
    commit 88a479ff6ef8af7f07e11593d58befc644244ff7 upstream.
    
    So it can be killed, or else processes can get hung indefinitely
    waiting for balloon pages.
    
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200727091342.52325-3-roger.pau@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 308fff15f373ec404d95f82750274be1c25de247
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Mon Jul 27 11:13:39 2020 +0200

    xen/balloon: fix accounting in alloc_xenballooned_pages error path
    
    commit 1951fa33ec259abdf3497bfee7b63e7ddbb1a394 upstream.
    
    target_unpopulated is incremented with nr_pages at the start of the
    function, but the call to free_xenballooned_pages will only subtract
    pgno number of pages, and thus the rest need to be subtracted before
    returning or else accounting will be skewed.
    
    Signed-off-by: Roger Pau Monné <roger.pau@citrix.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200727091342.52325-2-roger.pau@citrix.com
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 711cbec543b10704d18774bed65e1c8afe063e11
Author: Jon Derrick <jonathan.derrick@intel.com>
Date:   Tue Jul 21 14:26:09 2020 -0600

    irqdomain/treewide: Free firmware node after domain removal
    
    commit ec0160891e387f4771f953b888b1fe951398e5d9 upstream.
    
    Commit 711419e504eb ("irqdomain: Add the missing assignment of
    domain->fwnode for named fwnode") unintentionally caused a dangling pointer
    page fault issue on firmware nodes that were freed after IRQ domain
    allocation. Commit e3beca48a45b fixed that dangling pointer issue by only
    freeing the firmware node after an IRQ domain allocation failure. That fix
    no longer frees the firmware node immediately, but leaves the firmware node
    allocated after the domain is removed.
    
    The firmware node must be kept around through irq_domain_remove, but should be
    freed it afterwards.
    
    Add the missing free operations after domain removal where where appropriate.
    
    Fixes: e3beca48a45b ("irqdomain/treewide: Keep firmware node unconditionally allocated")
    Signed-off-by: Jon Derrick <jonathan.derrick@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>   # drivers/pci
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/1595363169-7157-1-git-send-email-jonathan.derrick@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d960c86cfe72423daefe0b1476c56167dc2477d
Author: Nathan Huckleberry <nhuck@google.com>
Date:   Fri Jul 10 20:23:37 2020 +0100

    ARM: 8992/1: Fix unwind_frame for clang-built kernels
    
    commit b4d5ec9b39f8b31d98f65bc5577b5d15d93795d7 upstream.
    
    Since clang does not push pc and sp in function prologues, the current
    implementation of unwind_frame does not work. By using the previous
    frame's lr/fp instead of saved pc/sp we get valid unwinds on clang-built
    kernels.
    
    The bounds check on next frame pointer must be changed as well since
    there are 8 less bytes between frames.
    
    This fixes /proc/<pid>/stack.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/912
    
    Reported-by: Miles Chen <miles.chen@mediatek.com>
    Tested-by: Miles Chen <miles.chen@mediatek.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Nathan Huckleberry <nhuck@google.com>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ccf1743fcd3f72485ddf957ca7fa401651d83329
Author: Sven Schnelle <svens@stackframe.org>
Date:   Tue Aug 11 18:19:19 2020 +0200

    parisc: mask out enable and reserved bits from sba imask
    
    commit 5b24993c21cbf2de11aff077a48c5cb0505a0450 upstream.
    
    When using kexec the SBA IOMMU IBASE might still have the RE
    bit set. This triggers a WARN_ON when trying to write back the
    IBASE register later, and it also makes some mask calculations fail.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sven Schnelle <svens@stackframe.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16c2773d1d26383bcaab140b7ae9e6187873c884
Author: John David Anglin <dave.anglin@bell.net>
Date:   Thu Jul 30 08:59:12 2020 -0400

    parisc: Implement __smp_store_release and __smp_load_acquire barriers
    
    commit e96ebd589debd9a6a793608c4ec7019c38785dea upstream.
    
    This patch implements the __smp_store_release and __smp_load_acquire barriers
    using ordered stores and loads.  This avoids the sync instruction present in
    the generic implementation.
    
    Cc: <stable@vger.kernel.org> # 4.14+
    Signed-off-by: Dave Anglin <dave.anglin@bell.net>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8bb0aad75756198baff052767912258b7de0c5c
Author: Sivaprakash Murugesan <sivaprak@codeaurora.org>
Date:   Fri Jun 12 13:28:15 2020 +0530

    mtd: rawnand: qcom: avoid write to unavailable register
    
    commit 443440cc4a901af462239d286cd10721aa1c7dfc upstream.
    
    SFLASHC_BURST_CFG is only available on older ipq NAND platforms, this
    register has been removed when the NAND controller got implemented in
    the qpic controller.
    
    Avoid writing this register on devices which are based on qpic NAND
    controller.
    
    Fixes: dce84760b09f ("mtd: nand: qcom: Support for IPQ8074 QPIC NAND controller")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sivaprakash Murugesan <sivaprak@codeaurora.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/1591948696-16015-2-git-send-email-sivaprak@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a693abcd43c07533d6efef032464a85cc0c3ab9
Author: Christian Eggers <ceggers@arri.de>
Date:   Tue Jul 28 12:08:32 2020 +0200

    spi: spidev: Align buffers for DMA
    
    commit aa9e862d7d5bcecd4dca9f39e8b684b93dd84ee7 upstream.
    
    Simply copying all xfers from userspace into one bounce buffer causes
    alignment problems if the SPI controller uses DMA.
    
    Ensure that all transfer data blocks within the rx and tx bounce buffers
    are aligned for DMA (according to ARCH_KMALLOC_MINALIGN).
    
    Alignment may increase the usage of the bounce buffers. In some cases,
    the buffers may need to be increased using the "bufsiz" module
    parameter.
    
    Signed-off-by: Christian Eggers <ceggers@arri.de>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200728100832.24788-1-ceggers@arri.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d3ea5a5fefc2dbf00dd75439a225ea4a2a39fb9
Author: Zheng Bin <zhengbin13@huawei.com>
Date:   Mon Jun 15 09:21:53 2020 +0800

    9p: Fix memory leak in v9fs_mount
    
    commit cb0aae0e31c632c407a2cab4307be85a001d4d98 upstream.
    
    v9fs_mount
      v9fs_session_init
        v9fs_cache_session_get_cookie
          v9fs_random_cachetag                     -->alloc cachetag
          v9ses->fscache = fscache_acquire_cookie  -->maybe NULL
      sb = sget                                    -->fail, goto clunk
    clunk_fid:
      v9fs_session_close
        if (v9ses->fscache)                        -->NULL
          kfree(v9ses->cachetag)
    
    Thus memleak happens.
    
    Link: http://lkml.kernel.org/r/20200615012153.89538-1-zhengbin13@huawei.com
    Fixes: 60e78d2c993e ("9p: Add fscache support to 9p")
    Cc: <stable@vger.kernel.org> # v2.6.32+
    Signed-off-by: Zheng Bin <zhengbin13@huawei.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1b51bd0fd6c1cbdcd75172b9555c47baf1a3d0c
Author: Hector Martin <marcan@marcan.st>
Date:   Mon Aug 10 17:24:00 2020 +0900

    ALSA: usb-audio: work around streaming quirk for MacroSilicon MS2109
    
    commit 1b7ecc241a67ad6b584e071bd791a54e0cd5f097 upstream.
    
    Further investigation of the L-R swap problem on the MS2109 reveals that
    the problem isn't that the channels are swapped, but rather that they
    are swapped and also out of phase by one sample. In other words, the
    issue is actually that the very first frame that comes from the hardware
    is a half-frame containing only the right channel, and after that
    everything becomes offset.
    
    So introduce a new quirk field to drop the very first 2 bytes that come
    in after the format is configured and a capture stream starts. This puts
    the channels in phase and in the correct order.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Link: https://lore.kernel.org/r/20200810082400.225858-1-marcan@marcan.st
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 530a6efcc05c04c67d3c4f6bfe40cb20b96d46c7
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Aug 11 18:35:30 2020 -0700

    fs/minix: reject too-large maximum file size
    
    commit 270ef41094e9fa95273f288d7d785313ceab2ff3 upstream.
    
    If the minix filesystem tries to map a very large logical block number to
    its on-disk location, block_to_path() can return offsets that are too
    large, causing out-of-bounds memory accesses when accessing indirect index
    blocks.  This should be prevented by the check against the maximum file
    size, but this doesn't work because the maximum file size is read directly
    from the on-disk superblock and isn't validated itself.
    
    Fix this by validating the maximum file size at mount time.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+c7d9ec7a1a7272dd71b3@syzkaller.appspotmail.com
    Reported-by: syzbot+3b7b03a0c28948054fb5@syzkaller.appspotmail.com
    Reported-by: syzbot+6e056ee473568865f3e6@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Qiujun Huang <anenbupt@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200628060846.682158-4-ebiggers@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1000d443d632e11397abd300e7c1c7a392aac12e
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Aug 11 18:35:27 2020 -0700

    fs/minix: don't allow getting deleted inodes
    
    commit facb03dddec04e4aac1bb2139accdceb04deb1f3 upstream.
    
    If an inode has no links, we need to mark it bad rather than allowing it
    to be accessed.  This avoids WARNINGs in inc_nlink() and drop_nlink() when
    doing directory operations on a fuzzed filesystem.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+a9ac3de1b5de5fb10efc@syzkaller.appspotmail.com
    Reported-by: syzbot+df958cf5688a96ad3287@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Qiujun Huang <anenbupt@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200628060846.682158-3-ebiggers@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 118999da19b5da3259d41fb7f02944b5b09947a9
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Aug 11 18:35:24 2020 -0700

    fs/minix: check return value of sb_getblk()
    
    commit da27e0a0e5f655f0d58d4e153c3182bb2b290f64 upstream.
    
    Patch series "fs/minix: fix syzbot bugs and set s_maxbytes".
    
    This series fixes all syzbot bugs in the minix filesystem:
    
            KASAN: null-ptr-deref Write in get_block
            KASAN: use-after-free Write in get_block
            KASAN: use-after-free Read in get_block
            WARNING in inc_nlink
            KMSAN: uninit-value in get_block
            WARNING in drop_nlink
    
    It also fixes the minix filesystem to set s_maxbytes correctly, so that
    userspace sees the correct behavior when exceeding the max file size.
    
    This patch (of 6):
    
    sb_getblk() can fail, so check its return value.
    
    This fixes a NULL pointer dereference.
    
    Originally from Qiujun Huang.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+4a88b2b9dc280f47baf4@syzkaller.appspotmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Qiujun Huang <anenbupt@gmail.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200628060846.682158-1-ebiggers@kernel.org
    Link: http://lkml.kernel.org/r/20200628060846.682158-2-ebiggers@kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46b48718bfe2d27016f551a6b810a5ba1104a688
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Aug 10 11:21:11 2020 -0700

    bitfield.h: don't compile-time validate _val in FIELD_FIT
    
    commit 444da3f52407d74c9aa12187ac6b01f76ee47d62 upstream.
    
    When ur_load_imm_any() is inlined into jeq_imm(), it's possible for the
    compiler to deduce a case where _val can only have the value of -1 at
    compile time. Specifically,
    
    /* struct bpf_insn: _s32 imm */
    u64 imm = insn->imm; /* sign extend */
    if (imm >> 32) { /* non-zero only if insn->imm is negative */
      /* inlined from ur_load_imm_any */
      u32 __imm = imm >> 32; /* therefore, always 0xffffffff */
      if (__builtin_constant_p(__imm) && __imm > 255)
        compiletime_assert_XXX()
    
    This can result in tripping a BUILD_BUG_ON() in __BF_FIELD_CHECK() that
    checks that a given value is representable in one byte (interpreted as
    unsigned).
    
    FIELD_FIT() should return true or false at runtime for whether a value
    can fit for not. Don't break the build over a value that's too large for
    the mask. We'd prefer to keep the inlining and compiler optimizations
    though we know this case will always return false.
    
    Cc: stable@vger.kernel.org
    Fixes: 1697599ee301a ("bitfield.h: add FIELD_FIT() helper")
    Link: https://lore.kernel.org/kernel-hardening/CAK7LNASvb0UDJ0U5wkYYRzTAdnEs64HjXpEUL7d=V0CXiAXcNw@mail.gmail.com/
    Reported-by: Masahiro Yamada <masahiroy@kernel.org>
    Debugged-by: Sami Tolvanen <samitolvanen@google.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1d3d049a2bdc938b1cbb656e5104ac11d6b684a
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Jun 17 09:48:56 2020 -0400

    crypto: cpt - don't sleep of CRYPTO_TFM_REQ_MAY_SLEEP was not specified
    
    commit 9e27c99104707f083dccd3b4d79762859b5a0614 upstream.
    
    There is this call chain:
    cvm_encrypt -> cvm_enc_dec -> cptvf_do_request -> process_request -> kzalloc
    where we call sleeping allocator function even if CRYPTO_TFM_REQ_MAY_SLEEP
    was not specified.
    
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org      # v4.11+
    Fixes: c694b233295b ("crypto: cavium - Add the Virtual Function driver for CPT")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0a1cd3b9b99783b1cd772d7ea469ea49c981058
Author: John Allen <john.allen@amd.com>
Date:   Mon Jun 22 15:24:02 2020 -0500

    crypto: ccp - Fix use of merged scatterlists
    
    commit 8a302808c60d441d9884cb00ea7f2b534f2e3ca5 upstream.
    
    Running the crypto manager self tests with
    CONFIG_CRYPTO_MANAGER_EXTRA_TESTS may result in several types of errors
    when using the ccp-crypto driver:
    
    alg: skcipher: cbc-des3-ccp encryption failed on test vector 0; expected_error=0, actual_error=-5 ...
    
    alg: skcipher: ctr-aes-ccp decryption overran dst buffer on test vector 0 ...
    
    alg: ahash: sha224-ccp test failed (wrong result) on test vector ...
    
    These errors are the result of improper processing of scatterlists mapped
    for DMA.
    
    Given a scatterlist in which entries are merged as part of mapping the
    scatterlist for DMA, the DMA length of a merged entry will reflect the
    combined length of the entries that were merged. The subsequent
    scatterlist entry will contain DMA information for the scatterlist entry
    after the last merged entry, but the non-DMA information will be that of
    the first merged entry.
    
    The ccp driver does not take this scatterlist merging into account. To
    address this, add a second scatterlist pointer to track the current
    position in the DMA mapped representation of the scatterlist. Both the DMA
    representation and the original representation of the scatterlist must be
    tracked as while most of the driver can use just the DMA representation,
    scatterlist_map_and_copy() must use the original representation and
    expects the scatterlist pointer to be accurate to the original
    representation.
    
    In order to properly walk the original scatterlist, the scatterlist must
    be walked until the combined lengths of the entries seen is equal to the
    DMA length of the current entry being processed in the DMA mapped
    representation.
    
    Fixes: 63b945091a070 ("crypto: ccp - CCP device driver and interface support")
    Signed-off-by: John Allen <john.allen@amd.com>
    Cc: stable@vger.kernel.org
    Acked-by: Tom Lendacky <thomas.lendacky@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d541895fce440accc150798eecbe7d27c6a7db91
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jul 13 07:06:34 2020 -0700

    crypto: qat - fix double free in qat_uclo_create_batch_init_list
    
    commit c06c76602e03bde24ee69a2022a829127e504202 upstream.
    
    clang static analysis flags this error
    
    qat_uclo.c:297:3: warning: Attempt to free released memory
      [unix.Malloc]
                    kfree(*init_tab_base);
                    ^~~~~~~~~~~~~~~~~~~~~
    
    When input *init_tab_base is null, the function allocates memory for
    the head of the list.  When there is problem allocating other list
    elements the list is unwound and freed.  Then a check is made if the
    list head was allocated and is also freed.
    
    Keeping track of the what may need to be freed is the variable 'tail_old'.
    The unwinding/freeing block is
    
            while (tail_old) {
                    mem_init = tail_old->next;
                    kfree(tail_old);
                    tail_old = mem_init;
            }
    
    The problem is that the first element of tail_old is also what was
    allocated for the list head
    
                    init_header = kzalloc(sizeof(*init_header), GFP_KERNEL);
                    ...
                    *init_tab_base = init_header;
                    flag = 1;
            }
            tail_old = init_header;
    
    So *init_tab_base/init_header are freed twice.
    
    There is another problem.
    When the input *init_tab_base is non null the tail_old is calculated by
    traveling down the list to first non null entry.
    
            tail_old = init_header;
            while (tail_old->next)
                    tail_old = tail_old->next;
    
    When the unwinding free happens, the last entry of the input list will
    be freed.
    
    So the freeing needs a general changed.
    If locally allocated the first element of tail_old is freed, else it
    is skipped.  As a bit of cleanup, reset *init_tab_base if it came in
    as null.
    
    Fixes: b4b7e67c917f ("crypto: qat - Intel(R) QAT ucode part of fw loader")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53c02a750e52e785063746ffc2439bb2629d8432
Author: Hector Martin <marcan@marcan.st>
Date:   Mon Aug 10 17:25:02 2020 +0900

    ALSA: usb-audio: add quirk for Pioneer DDJ-RB
    
    commit 6e8596172ee1cd46ec0bfd5adcf4ff86371478b6 upstream.
    
    This is just another Pioneer device with fixed endpoints. Input is dummy
    but used as feedback (it always returns silence).
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Link: https://lore.kernel.org/r/20200810082502.225979-1-marcan@marcan.st
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c414086a9791f809f1a2e2d0774c92e1e11b2d4
Author: Hector Martin <marcan@marcan.st>
Date:   Mon Aug 10 13:53:19 2020 +0900

    ALSA: usb-audio: fix overeager device match for MacroSilicon MS2109
    
    commit 14a720dc1f5332f3bdf30a23a3bc549e81be974c upstream.
    
    Matching by device matches all interfaces, which breaks the video/HID
    portions of the device depending on module load order.
    
    Fixes: e337bf19f6af ("ALSA: usb-audio: add quirk for MacroSilicon MS2109")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Link: https://lore.kernel.org/r/20200810045319.128745-1-marcan@marcan.st
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11c23ba0b351bb6569bc323ef711639bc9b285e3
Author: Mirko Dietrich <buzz@l4m1.de>
Date:   Thu Aug 6 14:48:50 2020 +0200

    ALSA: usb-audio: Creative USB X-Fi Pro SB1095 volume knob support
    
    commit fec9008828cde0076aae595ac031bfcf49d335a4 upstream.
    
    Adds an entry for Creative USB X-Fi to the rc_config array in
    mixer_quirks.c to allow use of volume knob on the device.
    Adds support for newer X-Fi Pro card, known as "Model No. SB1095"
    with USB ID "041e:3263"
    
    Signed-off-by: Mirko Dietrich <buzz@l4m1.de>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200806124850.20334-1-buzz@l4m1.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46cfa9287534be16133b113fdfc56c4c9cb3361e
Author: Brant Merryman <brant.merryman@silabs.com>
Date:   Fri Jun 26 04:22:58 2020 +0000

    USB: serial: cp210x: enable usb generic throttle/unthrottle
    
    commit 4387b3dbb079d482d3c2b43a703ceed4dd27ed28 upstream.
    
    Assign the .throttle and .unthrottle functions to be generic function
    in the driver structure to prevent data loss that can otherwise occur
    if the host does not enable USB throttling.
    
    Signed-off-by: Brant Merryman <brant.merryman@silabs.com>
    Co-developed-by: Phu Luu <phu.luu@silabs.com>
    Signed-off-by: Phu Luu <phu.luu@silabs.com>
    Link: https://lore.kernel.org/r/57401AF3-9961-461F-95E1-F8AFC2105F5E@silabs.com
    [ johan: fix up tags ]
    Fixes: 39a66b8d22a3 ("[PATCH] USB: CP2101 Add support for flow control")
    Cc: stable <stable@vger.kernel.org>     # 2.6.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10cffb554a4fb8aedc24504d4286c6972457d721
Author: Brant Merryman <brant.merryman@silabs.com>
Date:   Fri Jun 26 04:24:20 2020 +0000

    USB: serial: cp210x: re-enable auto-RTS on open
    
    commit c7614ff9b73a1e6fb2b1b51396da132ed22fecdb upstream.
    
    CP210x hardware disables auto-RTS but leaves auto-CTS when in hardware
    flow control mode and UART on cp210x hardware is disabled. When
    re-opening the port, if auto-CTS is enabled on the cp210x, then auto-RTS
    must be re-enabled in the driver.
    
    Signed-off-by: Brant Merryman <brant.merryman@silabs.com>
    Co-developed-by: Phu Luu <phu.luu@silabs.com>
    Signed-off-by: Phu Luu <phu.luu@silabs.com>
    Link: https://lore.kernel.org/r/ECCF8E73-91F3-4080-BE17-1714BC8818FB@silabs.com
    [ johan: fix up tags and problem description ]
    Fixes: 39a66b8d22a3 ("[PATCH] USB: CP2101 Add support for flow control")
    Cc: stable <stable@vger.kernel.org>     # 2.6.12
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cad54a5d7159dcc08d5c799574411bc48b1d1da
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Thu Aug 6 19:53:16 2020 +0800

    net: Set fput_needed iff FDPUT_FPUT is set
    
    [ Upstream commit ce787a5a074a86f76f5d3fd804fa78e01bfb9e89 ]
    
    We should fput() file iff FDPUT_FPUT is set. So we should set fput_needed
    accordingly.
    
    Fixes: 00e188ef6a7e ("sockfd_lookup_light(): switch to fdget^W^Waway from fget_light")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 339998ac78f140924cffe95ecc8bbf06d8c4254d
Author: Tim Froidcoeur <tim.froidcoeur@tessares.net>
Date:   Tue Aug 11 20:33:23 2020 +0200

    net: refactor bind_bucket fastreuse into helper
    
    [ Upstream commit 62ffc589abb176821662efc4525ee4ac0b9c3894 ]
    
    Refactor the fastreuse update code in inet_csk_get_port into a small
    helper function that can be called from other places.
    
    Acked-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: Tim Froidcoeur <tim.froidcoeur@tessares.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7bfac5b414cc6b18a4484e6682143ffcd946590c
Author: Qingyu Li <ieatmuttonchuan@gmail.com>
Date:   Mon Aug 10 09:51:00 2020 +0800

    net/nfc/rawsock.c: add CAP_NET_RAW check.
    
    [ Upstream commit 26896f01467a28651f7a536143fe5ac8449d4041 ]
    
    When creating a raw AF_NFC socket, CAP_NET_RAW needs to be checked first.
    
    Signed-off-by: Qingyu Li <ieatmuttonchuan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b90f5602ea052d6811508c60c0eaa9982341010
Author: Xie He <xie.he.0141@gmail.com>
Date:   Wed Aug 5 18:50:40 2020 -0700

    drivers/net/wan/lapbether: Added needed_headroom and a skb->len check
    
    [ Upstream commit c7ca03c216acb14466a713fedf1b9f2c24994ef2 ]
    
    1. Added a skb->len check
    
    This driver expects upper layers to include a pseudo header of 1 byte
    when passing down a skb for transmission. This driver will read this
    1-byte header. This patch added a skb->len check before reading the
    header to make sure the header exists.
    
    2. Changed to use needed_headroom instead of hard_header_len to request
    necessary headroom to be allocated
    
    In net/packet/af_packet.c, the function packet_snd first reserves a
    headroom of length (dev->hard_header_len + dev->needed_headroom).
    Then if the socket is a SOCK_DGRAM socket, it calls dev_hard_header,
    which calls dev->header_ops->create, to create the link layer header.
    If the socket is a SOCK_RAW socket, it "un-reserves" a headroom of
    length (dev->hard_header_len), and assumes the user to provide the
    appropriate link layer header.
    
    So according to the logic of af_packet.c, dev->hard_header_len should
    be the length of the header that would be created by
    dev->header_ops->create.
    
    However, this driver doesn't provide dev->header_ops, so logically
    dev->hard_header_len should be 0.
    
    So we should use dev->needed_headroom instead of dev->hard_header_len
    to request necessary headroom to be allocated.
    
    This change fixes kernel panic when this driver is used with AF_PACKET
    SOCK_RAW sockets.
    
    Call stack when panic:
    
    [  168.399197] skbuff: skb_under_panic: text:ffffffff819d95fb len:20
    put:14 head:ffff8882704c0a00 data:ffff8882704c09fd tail:0x11 end:0xc0
    dev:veth0
    ...
    [  168.399255] Call Trace:
    [  168.399259]  skb_push.cold+0x14/0x24
    [  168.399262]  eth_header+0x2b/0xc0
    [  168.399267]  lapbeth_data_transmit+0x9a/0xb0 [lapbether]
    [  168.399275]  lapb_data_transmit+0x22/0x2c [lapb]
    [  168.399277]  lapb_transmit_buffer+0x71/0xb0 [lapb]
    [  168.399279]  lapb_kick+0xe3/0x1c0 [lapb]
    [  168.399281]  lapb_data_request+0x76/0xc0 [lapb]
    [  168.399283]  lapbeth_xmit+0x56/0x90 [lapbether]
    [  168.399286]  dev_hard_start_xmit+0x91/0x1f0
    [  168.399289]  ? irq_init_percpu_irqstack+0xc0/0x100
    [  168.399291]  __dev_queue_xmit+0x721/0x8e0
    [  168.399295]  ? packet_parse_headers.isra.0+0xd2/0x110
    [  168.399297]  dev_queue_xmit+0x10/0x20
    [  168.399298]  packet_sendmsg+0xbf0/0x19b0
    ......
    
    Cc: Willem de Bruijn <willemdebruijn.kernel@gmail.com>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Cc: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 147d8e342062a93f28fe5834bc976324bdbc5c6a
Author: John Ogness <john.ogness@linutronix.de>
Date:   Thu Aug 13 21:45:25 2020 +0206

    af_packet: TPACKET_V3: fix fill status rwlock imbalance
    
    [ Upstream commit 88fd1cb80daa20af063bce81e1fad14e945a8dc4 ]
    
    After @blk_fill_in_prog_lock is acquired there is an early out vnet
    situation that can occur. In that case, the rwlock needs to be
    released.
    
    Also, since @blk_fill_in_prog_lock is only acquired when @tp_version
    is exactly TPACKET_V3, only release it on that exact condition as
    well.
    
    And finally, add sparse annotation so that it is clearer that
    prb_fill_curr_block() and prb_clear_blk_fill_status() are acquiring
    and releasing @blk_fill_in_prog_lock, respectively. sparse is still
    unable to understand the balance, but the warnings are now on a
    higher level that make more sense.
    
    Fixes: 632ca50f2cbd ("af_packet: TPACKET_V3: replace busy-wait loop")
    Signed-off-by: John Ogness <john.ogness@linutronix.de>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41eb382350a98aab4685108152ecd99f9b06e20f
Author: Jian Cai <caij2003@gmail.com>
Date:   Mon Jun 22 16:24:33 2020 -0700

    crypto: aesni - add compatibility with IAS
    
    [ Upstream commit 44069737ac9625a0f02f0f7f5ab96aae4cd819bc ]
    
    Clang's integrated assembler complains "invalid reassignment of
    non-absolute variable 'var_ddq_add'" while assembling
    arch/x86/crypto/aes_ctrby8_avx-x86_64.S. It was because var_ddq_add was
    reassigned with non-absolute values several times, which IAS did not
    support. We can avoid the reassignment by replacing the uses of
    var_ddq_add with its definitions accordingly to have compatilibility
    with IAS.
    
    Link: https://github.com/ClangBuiltLinux/linux/issues/1008
    Reported-by: Sedat Dilek <sedat.dilek@gmail.com>
    Reported-by: Fangrui Song <maskray@google.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com> # build+boot Linux v5.7.5; clang v11.0.0-git
    Signed-off-by: Jian Cai <caij2003@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37c225eb91761b258cb418517c058f1a777f94ce
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Aug 14 11:16:17 2020 -0700

    x86/fsgsbase/64: Fix NULL deref in 86_fsgsbase_read_task
    
    [ Upstream commit 8ab49526b53d3172d1d8dd03a75c7d1f5bd21239 ]
    
    syzbot found its way in 86_fsgsbase_read_task() and triggered this oops:
    
       KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
       CPU: 0 PID: 6866 Comm: syz-executor262 Not tainted 5.8.0-syzkaller #0
       RIP: 0010:x86_fsgsbase_read_task+0x16d/0x310 arch/x86/kernel/process_64.c:393
       Call Trace:
         putreg32+0x3ab/0x530 arch/x86/kernel/ptrace.c:876
         genregs32_set arch/x86/kernel/ptrace.c:1026 [inline]
         genregs32_set+0xa4/0x100 arch/x86/kernel/ptrace.c:1006
         copy_regset_from_user include/linux/regset.h:326 [inline]
         ia32_arch_ptrace arch/x86/kernel/ptrace.c:1061 [inline]
         compat_arch_ptrace+0x36c/0xd90 arch/x86/kernel/ptrace.c:1198
         __do_compat_sys_ptrace kernel/ptrace.c:1420 [inline]
         __se_compat_sys_ptrace kernel/ptrace.c:1389 [inline]
         __ia32_compat_sys_ptrace+0x220/0x2f0 kernel/ptrace.c:1389
         do_syscall_32_irqs_on arch/x86/entry/common.c:84 [inline]
         __do_fast_syscall_32+0x57/0x80 arch/x86/entry/common.c:126
         do_fast_syscall_32+0x2f/0x70 arch/x86/entry/common.c:149
         entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    
    This can happen if ptrace() or sigreturn() pokes an LDT selector into FS
    or GS for a task with no LDT and something tries to read the base before
    a return to usermode notices the bad selector and fixes it.
    
    The fix is to make sure ldt pointer is not NULL.
    
    Fixes: 07e1d88adaae ("x86/fsgsbase/64: Fix ptrace() to read the FS/GS base accurately")
    Co-developed-by: Jann Horn <jannh@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Andy Lutomirski <luto@kernel.org>
    Cc: Chang S. Bae <chang.seok.bae@intel.com>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Brian Gerst <brgerst@gmail.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Denys Vlasenko <dvlasenk@redhat.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Markus T Metzger <markus.t.metzger@intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Ravi Shankar <ravi.v.shankar@intel.com>
    Cc: Rik van Riel <riel@surriel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6bbf1039da5c131a14049e03fbbf1947301f4204
Author: Drew Fustini <drew@beagleboard.org>
Date:   Mon Jun 8 14:51:43 2020 +0200

    pinctrl-single: fix pcs_parse_pinconf() return value
    
    [ Upstream commit f46fe79ff1b65692a65266a5bec6dbe2bf7fc70f ]
    
    This patch causes pcs_parse_pinconf() to return -ENOTSUPP when no
    pinctrl_map is added.  The current behavior is to return 0 when
    !PCS_HAS_PINCONF or !nconfs.  Thus pcs_parse_one_pinctrl_entry()
    incorrectly assumes that a map was added and sets num_maps = 2.
    
    Analysis:
    =========
    The function pcs_parse_one_pinctrl_entry() calls pcs_parse_pinconf()
    if PCS_HAS_PINCONF is enabled.  The function pcs_parse_pinconf()
    returns 0 to indicate there was no error and num_maps is then set to 2:
    
     980 static int pcs_parse_one_pinctrl_entry(struct pcs_device *pcs,
     981                                                 struct device_node *np,
     982                                                 struct pinctrl_map **map,
     983                                                 unsigned *num_maps,
     984                                                 const char **pgnames)
     985 {
    <snip>
    1053         (*map)->type = PIN_MAP_TYPE_MUX_GROUP;
    1054         (*map)->data.mux.group = np->name;
    1055         (*map)->data.mux.function = np->name;
    1056
    1057         if (PCS_HAS_PINCONF && function) {
    1058                 res = pcs_parse_pinconf(pcs, np, function, map);
    1059                 if (res)
    1060                         goto free_pingroups;
    1061                 *num_maps = 2;
    1062         } else {
    1063                 *num_maps = 1;
    1064         }
    
    However, pcs_parse_pinconf() will also return 0 if !PCS_HAS_PINCONF or
    !nconfs.  I believe these conditions should indicate that no map was
    added by returning -ENOTSUPP. Otherwise pcs_parse_one_pinctrl_entry()
    will set num_maps = 2 even though no maps were successfully added, as
    it does not reach "m++" on line 940:
    
     895 static int pcs_parse_pinconf(struct pcs_device *pcs, struct device_node *np,
     896                              struct pcs_function *func,
     897                              struct pinctrl_map **map)
     898
     899 {
     900         struct pinctrl_map *m = *map;
    <snip>
     917         /* If pinconf isn't supported, don't parse properties in below. */
     918         if (!PCS_HAS_PINCONF)
     919                 return 0;
     920
     921         /* cacluate how much properties are supported in current node */
     922         for (i = 0; i < ARRAY_SIZE(prop2); i++) {
     923                 if (of_find_property(np, prop2[i].name, NULL))
     924                         nconfs++;
     925         }
     926         for (i = 0; i < ARRAY_SIZE(prop4); i++) {
     927                 if (of_find_property(np, prop4[i].name, NULL))
     928                         nconfs++;
     929         }
     930         if (!nconfs)
     919                 return 0;
     932
     933         func->conf = devm_kcalloc(pcs->dev,
     934                                   nconfs, sizeof(struct pcs_conf_vals),
     935                                   GFP_KERNEL);
     936         if (!func->conf)
     937                 return -ENOMEM;
     938         func->nconfs = nconfs;
     939         conf = &(func->conf[0]);
     940         m++;
    
    This situtation will cause a boot failure [0] on the BeagleBone Black
    (AM3358) when am33xx_pinmux node in arch/arm/boot/dts/am33xx-l4.dtsi
    has compatible = "pinconf-single" instead of "pinctrl-single".
    
    The patch fixes this issue by returning -ENOSUPP when !PCS_HAS_PINCONF
    or !nconfs, so that pcs_parse_one_pinctrl_entry() will know that no
    map was added.
    
    Logic is also added to pcs_parse_one_pinctrl_entry() to distinguish
    between -ENOSUPP and other errors.  In the case of -ENOSUPP, num_maps
    is set to 1 as it is valid for pinconf to be enabled and a given pin
    group to not any pinconf properties.
    
    [0] https://lore.kernel.org/linux-omap/20200529175544.GA3766151@x1/
    
    Fixes: 9dddb4df90d1 ("pinctrl: single: support generic pinconf")
    Signed-off-by: Drew Fustini <drew@beagleboard.org>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Link: https://lore.kernel.org/r/20200608125143.GA2789203@x1
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bf9cc08c31bb59dfa2edc839d21c04448cc2069b
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Jun 15 11:25:33 2020 +0800

    dlm: Fix kobject memleak
    
    [ Upstream commit 0ffddafc3a3970ef7013696e7f36b3d378bc4c16 ]
    
    Currently the error return path from kobject_init_and_add() is not
    followed by a call to kobject_put() - which means we are leaking
    the kobject.
    
    Set do_unreg = 1 before kobject_init_and_add() to ensure that
    kobject_put() can be called in its error patch.
    
    Fixes: 901195ed7f4b ("Kobject: change GFS2 to use kobject_init_and_add")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Signed-off-by: David Teigland <teigland@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9145ba5681700b2dce8bf509369c1ac39b6a77d
Author: Florinel Iordache <florinel.iordache@nxp.com>
Date:   Mon Aug 3 10:07:34 2020 +0300

    fsl/fman: fix eth hash table allocation
    
    [ Upstream commit 3207f715c34317d08e798e11a10ce816feb53c0f ]
    
    Fix memory allocation for ethernet address hash table.
    The code was wrongly allocating an array for eth hash table which
    is incorrect because this is the main structure for eth hash table
    (struct eth_hash_t) that contains inside a number of elements.
    
    Fixes: 57ba4c9b56d8 ("fsl/fman: Add FMan MAC support")
    Signed-off-by: Florinel Iordache <florinel.iordache@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f667bc42e5bbf6fe3b029fb84c6041eb4f30f90
Author: Florinel Iordache <florinel.iordache@nxp.com>
Date:   Mon Aug 3 10:07:33 2020 +0300

    fsl/fman: check dereferencing null pointer
    
    [ Upstream commit cc5d229a122106733a85c279d89d7703f21e4d4f ]
    
    Add a safe check to avoid dereferencing null pointer
    
    Fixes: 57ba4c9b56d8 ("fsl/fman: Add FMan MAC support")
    Signed-off-by: Florinel Iordache <florinel.iordache@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d3c4f25fdf6a5ec66ecf90c3e1857a0915641af
Author: Florinel Iordache <florinel.iordache@nxp.com>
Date:   Mon Aug 3 10:07:32 2020 +0300

    fsl/fman: fix unreachable code
    
    [ Upstream commit cc79fd8f557767de90ff199d3b6fb911df43160a ]
    
    The parameter 'priority' is incorrectly forced to zero which ultimately
    induces logically dead code in the subsequent lines.
    
    Fixes: 57ba4c9b56d8 ("fsl/fman: Add FMan MAC support")
    Signed-off-by: Florinel Iordache <florinel.iordache@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ef7142a225835806388f6c9c2e36f72dbc1ffec
Author: Florinel Iordache <florinel.iordache@nxp.com>
Date:   Mon Aug 3 10:07:31 2020 +0300

    fsl/fman: fix dereference null return value
    
    [ Upstream commit 0572054617f32670abab4b4e89a876954d54b704 ]
    
    Check before using returned value to avoid dereferencing null pointer.
    
    Fixes: 18a6c85fcc78 ("fsl/fman: Add FMan Port Support")
    Signed-off-by: Florinel Iordache <florinel.iordache@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b968e4452fa0e187de699e80748b12213b2560ce
Author: Florinel Iordache <florinel.iordache@nxp.com>
Date:   Mon Aug 3 10:07:30 2020 +0300

    fsl/fman: use 32-bit unsigned integer
    
    [ Upstream commit 99f47abd9f7bf6e365820d355dc98f6955a562df ]
    
    Potentially overflowing expression (ts_freq << 16 and intgr << 16)
    declared as type u32 (32-bit unsigned) is evaluated using 32-bit
    arithmetic and then used in a context that expects an expression of
    type u64 (64-bit unsigned) which ultimately is used as 16-bit
    unsigned by typecasting to u16. Fixed by using an unsigned 32-bit
    integer since the value is truncated anyway in the end.
    
    Fixes: 414fd46e7762 ("fsl/fman: Add FMan support")
    Signed-off-by: Florinel Iordache <florinel.iordache@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccfa070322df944695e10672b447dcdb39345357
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Aug 2 15:53:33 2020 +0200

    net: spider_net: Fix the size used in a 'dma_free_coherent()' call
    
    [ Upstream commit 36f28f7687a9ce665479cce5d64ce7afaa9e77ae ]
    
    Update the size used in 'dma_free_coherent()' in order to match the one
    used in the corresponding 'dma_alloc_coherent()', in
    'spider_net_init_chain()'.
    
    Fixes: d4ed8f8d1fb7 ("Spidernet DMA coalescing")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bce6829130ba7b20004193bc53a3f20292dd3300
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:44 2020 +0800

    liquidio: Fix wrong return value in cn23xx_get_pf_num()
    
    [ Upstream commit aa027850a292ea65524b8fab83eb91a124ad362c ]
    
    On an error exit path, a negative error code should be returned
    instead of a positive return value.
    
    Fixes: 0c45d7fe12c7e ("liquidio: fix use of pf in pass-through mode in a virtual machine")
    Cc: Rick Farrington <ricardo.farrington@cavium.com>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b336c79f17f3135aadd0ff38ee7f5283277ea162
Author: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
Date:   Sun Aug 2 19:15:37 2020 +0800

    net: ethernet: aquantia: Fix wrong return value
    
    [ Upstream commit 0470a48880f8bc42ce26962b79c7b802c5a695ec ]
    
    In function hw_atl_a0_hw_multicast_list_set(), when an invalid
    request is encountered, a negative error code should be returned.
    
    Fixes: bab6de8fd180b ("net: ethernet: aquantia: Atlantic A0 and B0 specific functions")
    Cc: David VomLehn <vomlehn@texas.net>
    Signed-off-by: Tianjia Zhang <tianjia.zhang@linux.alibaba.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6529e60afefb8bf89766732b185b092234c34415
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Thu Jul 30 19:42:44 2020 -0700

    tools, build: Propagate build failures from tools/build/Makefile.build
    
    [ Upstream commit a278f3d8191228212c553a5d4303fa603214b717 ]
    
    The '&&' command seems to have a bad effect when $(cmd_$(1)) exits with
    non-zero effect: the command failure is masked (despite `set -e`) and all but
    the first command of $(dep-cmd) is executed (successfully, as they are mostly
    printfs), thus overall returning 0 in the end.
    
    This means in practice that despite compilation errors, tools's build Makefile
    will return success. We see this very reliably with libbpf's Makefile, which
    doesn't get compilation error propagated properly. This in turns causes issues
    with selftests build, as well as bpftool and other projects that rely on
    building libbpf.
    
    The fix is simple: don't use &&. Given `set -e`, we don't need to chain
    commands with &&. The shell will exit on first failure, giving desired
    behavior and propagating error properly.
    
    Fixes: 275e2d95591e ("tools build: Move dependency copy into function")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Link: https://lore.kernel.org/bpf/20200731024244.872574-1-andriin@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75f48087f4d8e95865299934da3aecc24efec973
Author: Wang Hai <wanghai38@huawei.com>
Date:   Thu Jul 30 15:39:39 2020 +0800

    wl1251: fix always return 0 error
    
    [ Upstream commit 20e6421344b5bc2f97b8e2db47b6994368417904 ]
    
    wl1251_event_ps_report() should not always return 0 because
    wl1251_ps_set_mode() may fail. Change it to return 'ret'.
    
    Fixes: f7ad1eed4d4b ("wl1251: retry power save entry")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200730073939.33704-1-wanghai38@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b7317234c72761b2a4d332fdd42edbd60e54c8b5
Author: Julian Wiedmann <jwi@linux.ibm.com>
Date:   Thu Jul 30 17:01:20 2020 +0200

    s390/qeth: don't process empty bridge port events
    
    [ Upstream commit 02472e28b9a45471c6d8729ff2c7422baa9be46a ]
    
    Discard events that don't contain any entries. This shouldn't happen,
    but subsequent code relies on being able to use entry 0. So better
    be safe than accessing garbage.
    
    Fixes: b4d72c08b358 ("qeth: bridgeport support - basic control")
    Signed-off-by: Julian Wiedmann <jwi@linux.ibm.com>
    Reviewed-by: Alexandra Winter <wintera@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02f4596f8cccdee35b29b25c94b7e5b29ba4d3c8
Author: Sandipan Das <sandipan@linux.ibm.com>
Date:   Thu Jul 30 10:38:46 2020 +0530

    selftests/powerpc: Fix online CPU selection
    
    [ Upstream commit dfa03fff86027e58c8dba5c03ae68150d4e513ad ]
    
    The size of the CPU affinity mask must be large enough for
    systems with a very large number of CPUs. Otherwise, tests
    which try to determine the first online CPU by calling
    sched_getaffinity() will fail. This makes sure that the size
    of the allocated affinity mask is dependent on the number of
    CPUs as reported by get_nprocs_conf().
    
    Fixes: 3752e453f6ba ("selftests/powerpc: Add tests of PMU EBBs")
    Reported-by: Shirisha Ganta <shiganta@in.ibm.com>
    Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
    Reviewed-by: Kamalesh Babulal <kamalesh@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/a408c4b8e9a23bb39b539417a21eb0ff47bb5127.1596084858.git.sandipan@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97b80c0cd81c0984a00a1225ce315ba0dbec5bec
Author: Hanjun Guo <guohanjun@huawei.com>
Date:   Wed Jul 22 17:44:28 2020 +0800

    PCI: Release IVRS table in AMD ACS quirk
    
    [ Upstream commit 090688fa4e448284aaa16136372397d7d10814db ]
    
    The acpi_get_table() should be coupled with acpi_put_table() if the mapped
    table is not used at runtime to release the table mapping.
    
    In pci_quirk_amd_sb_acs(), IVRS table is just used for checking AMD IOMMU
    is supported, not used at runtime, so put the table after using it.
    
    Fixes: 15b100dfd1c9 ("PCI: Claim ACS support for AMD southbridge devices")
    Link: https://lore.kernel.org/r/1595411068-15440-1-git-send-email-guohanjun@huawei.com
    Signed-off-by: Hanjun Guo <guohanjun@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86cc33760ca351f29d571ead7c436d5fd30b7c3e
Author: Harish <harish@linux.ibm.com>
Date:   Tue Jun 9 13:44:23 2020 +0530

    selftests/powerpc: Fix CPU affinity for child process
    
    [ Upstream commit 854eb5022be04f81e318765f089f41a57c8e5d83 ]
    
    On systems with large number of cpus, test fails trying to set
    affinity by calling sched_setaffinity() with smaller size for affinity
    mask. This patch fixes it by making sure that the size of allocated
    affinity mask is dependent on the number of CPUs as reported by
    get_nprocs().
    
    Fixes: 00b7ec5c9cf3 ("selftests/powerpc: Import Anton's context_switch2 benchmark")
    Reported-by: Shirisha Ganta <shiganta@in.ibm.com>
    Signed-off-by: Sandipan Das <sandipan@linux.ibm.com>
    Signed-off-by: Harish <harish@linux.ibm.com>
    Reviewed-by: Kamalesh Babulal <kamalesh@linux.vnet.ibm.com>
    Reviewed-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200609081423.529664-1-harish@linux.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a3b4d03bf32f80cd5b855499814b31442c8ba0b9
Author: Nicolas Boichat <drinkcat@chromium.org>
Date:   Tue Jul 21 10:37:16 2020 +0800

    Bluetooth: hci_serdev: Only unregister device if it was registered
    
    [ Upstream commit 202798db9570104728dce8bb57dfeed47ce764bc ]
    
    We should not call hci_unregister_dev if the device was not
    successfully registered.
    
    Fixes: c34dc3bfa7642fd ("Bluetooth: hci_serdev: Introduce hci_uart_unregister_device()")
    Signed-off-by: Nicolas Boichat <drinkcat@chromium.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c32a3d75bb74bce1d89f76c2e93d7fb4ccc5b5d
Author: Tom Rix <trix@redhat.com>
Date:   Sun Jul 12 12:23:51 2020 -0700

    power: supply: check if calc_soc succeeded in pm860x_init_battery
    
    [ Upstream commit ccf193dee1f0fff55b556928591f7818bac1b3b1 ]
    
    clang static analysis flags this error
    
    88pm860x_battery.c:522:19: warning: Assigned value is
      garbage or undefined [core.uninitialized.Assign]
                    info->start_soc = soc;
                                    ^ ~~~
    soc is set by calling calc_soc.
    But calc_soc can return without setting soc.
    
    So check the return status and bail similarly to other
    checks in pm860x_init_battery and initialize soc to
    silence the warning.
    
    Fixes: a830d28b48bf ("power_supply: Enable battery-charger for 88pm860x")
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 471d94a02924535e8cbb0ffb43cec184791400cc
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jul 23 18:23:05 2020 +0300

    Smack: prevent underflow in smk_set_cipso()
    
    [ Upstream commit 42a2df3e829f3c5562090391b33714b2e2e5ad4a ]
    
    We have an upper bound on "maplevel" but forgot to check for negative
    values.
    
    Fixes: e114e473771c ("Smack: Simplified Mandatory Access Control Kernel")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3555efbe06f9571e4a69c6a50a3a9c416e6f4ac
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jul 23 18:22:19 2020 +0300

    Smack: fix another vsscanf out of bounds
    
    [ Upstream commit a6bd4f6d9b07452b0b19842044a6c3ea384b0b88 ]
    
    This is similar to commit 84e99e58e8d1 ("Smack: slab-out-of-bounds in
    vsscanf") where we added a bounds check on "rule".
    
    Reported-by: syzbot+a22c6092d003d6fe1122@syzkaller.appspotmail.com
    Fixes: f7112e6c9abf ("Smack: allow for significantly longer Smack labels v4")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f46e078cd077387369794885c688bcf0182735e
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Fri Jul 24 11:21:20 2020 +1200

    net: dsa: mv88e6xxx: MV88E6097 does not support jumbo configuration
    
    [ Upstream commit 0f3c66a3c7b4e8b9f654b3c998e9674376a51b0f ]
    
    The MV88E6097 chip does not support configuring jumbo frames. Prior to
    commit 5f4366660d65 only the 6352, 6351, 6165 and 6320 chips configured
    jumbo mode. The refactor accidentally added the function for the 6097.
    Remove the erroneous function pointer assignment.
    
    Fixes: 5f4366660d65 ("net: dsa: mv88e6xxx: Refactor setting of jumbo frames")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ef874913c116833682bc3c113ae9e40850372b9
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Thu Jul 23 09:25:51 2020 +1000

    scsi: mesh: Fix panic after host or bus reset
    
    [ Upstream commit edd7dd2292ab9c3628b65c4d04514c3068ad54f6 ]
    
    Booting Linux with a Conner CP3200 drive attached to the MESH SCSI bus
    results in EH measures and a panic:
    
    [   25.499838] mesh: configured for synchronous 5 MB/s
    [   25.787154] mesh: performing initial bus reset...
    [   29.867115] scsi host0: MESH
    [   29.929527] mesh: target 0 synchronous at 3.6 MB/s
    [   29.998763] scsi 0:0:0:0: Direct-Access     CONNER   CP3200-200mb-3.5 4040 PQ: 0 ANSI: 1 CCS
    [   31.989975] sd 0:0:0:0: [sda] 415872 512-byte logical blocks: (213 MB/203 MiB)
    [   32.070975] sd 0:0:0:0: [sda] Write Protect is off
    [   32.137197] sd 0:0:0:0: [sda] Mode Sense: 5b 00 00 08
    [   32.209661] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
    [   32.332708]  sda: [mac] sda1 sda2 sda3
    [   32.417733] sd 0:0:0:0: [sda] Attached SCSI disk
    ... snip ...
    [   76.687067] mesh_abort((ptrval))
    [   76.743606] mesh: state at (ptrval), regs at (ptrval), dma at (ptrval)
    [   76.810798]     ct=6000 seq=86 bs=4017 fc= 0 exc= 0 err= 0 im= 7 int= 0 sp=85
    [   76.880720]     dma stat=84e0 cmdptr=1f73d000
    [   76.941387]     phase=4 msgphase=0 conn_tgt=0 data_ptr=24576
    [   77.005567]     dma_st=1 dma_ct=0 n_msgout=0
    [   77.065456]     target 0: req=(ptrval) goes_out=0 saved_ptr=0
    [   77.130512] mesh_abort((ptrval))
    [   77.187670] mesh: state at (ptrval), regs at (ptrval), dma at (ptrval)
    [   77.255594]     ct=6000 seq=86 bs=4017 fc= 0 exc= 0 err= 0 im= 7 int= 0 sp=85
    [   77.325778]     dma stat=84e0 cmdptr=1f73d000
    [   77.387239]     phase=4 msgphase=0 conn_tgt=0 data_ptr=24576
    [   77.453665]     dma_st=1 dma_ct=0 n_msgout=0
    [   77.515900]     target 0: req=(ptrval) goes_out=0 saved_ptr=0
    [   77.582902] mesh_host_reset
    [   88.187083] Kernel panic - not syncing: mesh: double DMA start !
    [   88.254510] CPU: 0 PID: 358 Comm: scsi_eh_0 Not tainted 5.6.13-pmac #1
    [   88.323302] Call Trace:
    [   88.378854] [e16ddc58] [c0027080] panic+0x13c/0x308 (unreliable)
    [   88.446221] [e16ddcb8] [c02b2478] mesh_start.part.12+0x130/0x414
    [   88.513298] [e16ddcf8] [c02b2fc8] mesh_queue+0x54/0x70
    [   88.577097] [e16ddd18] [c02a1848] scsi_send_eh_cmnd+0x374/0x384
    [   88.643476] [e16dddc8] [c02a1938] scsi_eh_tur+0x5c/0xb8
    [   88.707878] [e16dddf8] [c02a1ab8] scsi_eh_test_devices+0x124/0x178
    [   88.775663] [e16dde28] [c02a2094] scsi_eh_ready_devs+0x588/0x8a8
    [   88.843124] [e16dde98] [c02a31d8] scsi_error_handler+0x344/0x520
    [   88.910697] [e16ddf08] [c00409c8] kthread+0xe4/0xe8
    [   88.975166] [e16ddf38] [c000f234] ret_from_kernel_thread+0x14/0x1c
    [   89.044112] Rebooting in 180 seconds..
    
    In theory, a panic can happen after a bus or host reset with dma_started
    flag set. Fix this by halting the DMA before reinitializing the host.
    Don't assume that ms->current_req is set when halt_dma() is invoked as it
    may not hold for bus or host reset.
    
    BTW, this particular Conner drive can be made to work by inhibiting
    disconnect/reselect with 'mesh.resel_targets=0'.
    
    Link: https://lore.kernel.org/r/3952bc691e150a7128b29120999b6092071b039a.1595460351.git.fthain@telegraphics.com.au
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: Paul Mackerras <paulus@ozlabs.org>
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c406693bc429afd21e9835b8a3e59160038e400d
Author: Marek Szyprowski <m.szyprowski@samsung.com>
Date:   Thu Jul 16 14:09:48 2020 +0200

    usb: dwc2: Fix error path in gadget registration
    
    [ Upstream commit 33a06f1300a79cfd461cea0268f05e969d4f34ec ]
    
    When gadget registration fails, one should not call usb_del_gadget_udc().
    Ensure this by setting gadget->udc to NULL. Also in case of a failure
    there is no need to disable low-level hardware, so return immiedetly
    instead of jumping to error_init label.
    
    This fixes the following kernel NULL ptr dereference on gadget failure
    (can be easily triggered with g_mass_storage without any module
    parameters):
    
    dwc2 12480000.hsotg: dwc2_check_params: Invalid parameter besl=1
    dwc2 12480000.hsotg: dwc2_check_params: Invalid parameter g_np_tx_fifo_size=1024
    dwc2 12480000.hsotg: EPs: 16, dedicated fifos, 7808 entries in SPRAM
    Mass Storage Function, version: 2009/09/11
    LUN: removable file: (no medium)
    no file given for LUN0
    g_mass_storage 12480000.hsotg: failed to start g_mass_storage: -22
    8<--- cut here ---
    Unable to handle kernel NULL pointer dereference at virtual address 00000104
    pgd = (ptrval)
    [00000104] *pgd=00000000
    Internal error: Oops: 805 [#1] PREEMPT SMP ARM
    Modules linked in:
    CPU: 0 PID: 12 Comm: kworker/0:1 Not tainted 5.8.0-rc5 #3133
    Hardware name: Samsung Exynos (Flattened Device Tree)
    Workqueue: events deferred_probe_work_func
    PC is at usb_del_gadget_udc+0x38/0xc4
    LR is at __mutex_lock+0x31c/0xb18
    ...
    Process kworker/0:1 (pid: 12, stack limit = 0x(ptrval))
    Stack: (0xef121db0 to 0xef122000)
    ...
    [<c076bf3c>] (usb_del_gadget_udc) from [<c0726bec>] (dwc2_hsotg_remove+0x10/0x20)
    [<c0726bec>] (dwc2_hsotg_remove) from [<c0711208>] (dwc2_driver_probe+0x57c/0x69c)
    [<c0711208>] (dwc2_driver_probe) from [<c06247c0>] (platform_drv_probe+0x6c/0xa4)
    [<c06247c0>] (platform_drv_probe) from [<c0621df4>] (really_probe+0x200/0x48c)
    [<c0621df4>] (really_probe) from [<c06221e8>] (driver_probe_device+0x78/0x1fc)
    [<c06221e8>] (driver_probe_device) from [<c061fcd4>] (bus_for_each_drv+0x74/0xb8)
    [<c061fcd4>] (bus_for_each_drv) from [<c0621b54>] (__device_attach+0xd4/0x16c)
    [<c0621b54>] (__device_attach) from [<c0620c98>] (bus_probe_device+0x88/0x90)
    [<c0620c98>] (bus_probe_device) from [<c06211b0>] (deferred_probe_work_func+0x3c/0xd0)
    [<c06211b0>] (deferred_probe_work_func) from [<c0149280>] (process_one_work+0x234/0x7dc)
    [<c0149280>] (process_one_work) from [<c014986c>] (worker_thread+0x44/0x51c)
    [<c014986c>] (worker_thread) from [<c0150b1c>] (kthread+0x158/0x1a0)
    [<c0150b1c>] (kthread) from [<c0100114>] (ret_from_fork+0x14/0x20)
    Exception stack(0xef121fb0 to 0xef121ff8)
    ...
    ---[ end trace 9724c2fc7cc9c982 ]---
    
    While fixing this also fix the double call to dwc2_lowlevel_hw_disable()
    if dr_mode is set to USB_DR_MODE_PERIPHERAL. In such case low-level
    hardware is already disabled before calling usb_add_gadget_udc(). That
    function correctly preserves low-level hardware state, there is no need
    for the second unconditional dwc2_lowlevel_hw_disable() call.
    
    Fixes: 207324a321a8 ("usb: dwc2: Postponed gadget registration to the udc class driver")
    Acked-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9833984f7f3fe9130437f74efddef67bb25bd4a
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 21 21:47:18 2020 +0800

    MIPS: OCTEON: add missing put_device() call in dwc3_octeon_device_init()
    
    [ Upstream commit e8b9fc10f2615b9a525fce56981e40b489528355 ]
    
    if of_find_device_by_node() succeed, dwc3_octeon_device_init() doesn't have
    a corresponding put_device(). Thus add put_device() to fix the exception
    handling for this function implementation.
    
    Fixes: 93e502b3c2d4 ("MIPS: OCTEON: Platform support for OCTEON III USB controller")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8809d6bd4661cfbeb21c46a2a0046cb87de7d38f
Author: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
Date:   Thu Jul 16 11:57:42 2020 -0600

    coresight: tmc: Fix TMC mode read in tmc_read_unprepare_etb()
    
    [ Upstream commit d021f5c5ff679432c5e9faee0fd7350db2efb97c ]
    
    Reading TMC mode register without proper coresight power
    management can lead to exceptions like the one in the call
    trace below in tmc_read_unprepare_etb() when the trace data
    is read after the sink is disabled. So fix this by having
    a check for coresight sysfs mode before reading TMC mode
    management register in tmc_read_unprepare_etb() similar to
    tmc_read_prepare_etb().
    
      SError Interrupt on CPU6, code 0xbe000411 -- SError
      pstate: 80400089 (Nzcv daIf +PAN -UAO)
      pc : tmc_read_unprepare_etb+0x74/0x108
      lr : tmc_read_unprepare_etb+0x54/0x108
      sp : ffffff80d9507c30
      x29: ffffff80d9507c30 x28: ffffff80b3569a0c
      x27: 0000000000000000 x26: 00000000000a0001
      x25: ffffff80cbae9550 x24: 0000000000000010
      x23: ffffffd07296b0f0 x22: ffffffd0109ee028
      x21: 0000000000000000 x20: ffffff80d19e70e0
      x19: ffffff80d19e7080 x18: 0000000000000000
      x17: 0000000000000000 x16: 0000000000000000
      x15: 0000000000000000 x14: 0000000000000000
      x13: 0000000000000000 x12: 0000000000000000
      x11: 0000000000000000 x10: dfffffd000000001
      x9 : 0000000000000000 x8 : 0000000000000002
      x7 : ffffffd071d0fe78 x6 : 0000000000000000
      x5 : 0000000000000080 x4 : 0000000000000001
      x3 : ffffffd071d0fe98 x2 : 0000000000000000
      x1 : 0000000000000004 x0 : 0000000000000001
      Kernel panic - not syncing: Asynchronous SError Interrupt
    
    Fixes: 4525412a5046 ("coresight: tmc: making prepare/unprepare functions generic")
    Reported-by: Mike Leach <mike.leach@linaro.org>
    Signed-off-by: Sai Prakash Ranjan <saiprakash.ranjan@codeaurora.org>
    Tested-by: Mike Leach <mike.leach@linaro.org>
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200716175746.3338735-14-mathieu.poirier@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d99e1b8939a34d1e934637156521dc45f32b3edf
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jun 16 12:19:49 2020 +0300

    thermal: ti-soc-thermal: Fix reversed condition in ti_thermal_expose_sensor()
    
    [ Upstream commit 0f348db01fdf128813fdd659fcc339038fb421a4 ]
    
    This condition is reversed and will cause breakage.
    
    Fixes: 7440f518dad9 ("thermal/drivers/ti-soc-thermal: Avoid dereferencing ERR_PTR")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200616091949.GA11940@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit faf12f119303364699365c070f797e8f6dd358cc
Author: Johan Hovold <johan@kernel.org>
Date:   Thu Jul 16 10:50:55 2020 +0200

    USB: serial: iuu_phoenix: fix led-activity helpers
    
    [ Upstream commit de37458f8c2bfc465500a1dd0d15dbe96d2a698c ]
    
    The set-led command is eight bytes long and starts with a command byte
    followed by six bytes of RGB data and ends with a byte encoding a
    frequency (see iuu_led() and iuu_rgbf_fill_buffer()).
    
    The led activity helpers had a few long-standing bugs which corrupted
    the command packets by inserting a second command byte and thereby
    offsetting the RGB data and dropping the frequency in non-xmas mode.
    
    In xmas mode, a related off-by-one error left the frequency field
    uninitialised.
    
    Fixes: 60a8fc017103 ("USB: add iuu_phoenix driver")
    Reported-by: George Spelvin <lkml@sdf.org>
    Link: https://lore.kernel.org/r/20200716085056.31471-1-johan@kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6f161aa07ce93e8825c247038c54a7e81fc7eeba
Author: Marco Felsch <m.felsch@pengutronix.de>
Date:   Thu Jun 11 14:43:32 2020 +0200

    drm/imx: tve: fix regulator_disable error path
    
    [ Upstream commit 7bb58b987fee26da2a1665c01033022624986b7c ]
    
    Add missing regulator_disable() as devm_action to avoid dedicated
    unbind() callback and fix the missing error handling.
    
    Fixes: fcbc51e54d2a ("staging: drm/imx: Add support for Television Encoder (TVEv2)")
    Signed-off-by: Marco Felsch <m.felsch@pengutronix.de>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a278258f0d2fc38f68f18ab2e776de371dab7593
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Fri Jul 17 15:59:25 2020 +0800

    PCI/ASPM: Add missing newline in sysfs 'policy'
    
    [ Upstream commit 3167e3d340c092fd47924bc4d23117a3074ef9a9 ]
    
    When I cat ASPM parameter 'policy' by sysfs, it displays as follows.  Add a
    newline for easy reading.  Other sysfs attributes already include a
    newline.
    
      [root@localhost ~]# cat /sys/module/pcie_aspm/parameters/policy
      [default] performance powersave powersupersave [root@localhost ~]#
    
    Fixes: 7d715a6c1ae5 ("PCI: add PCI Express ASPM support")
    Link: https://lore.kernel.org/r/1594972765-10404-1-git-send-email-wangxiongfeng2@huawei.com
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cba086df2982b678dfd63c54aab0bbec6a7d9c24
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jul 16 16:47:20 2020 +0100

    staging: rtl8192u: fix a dubious looking mask before a shift
    
    [ Upstream commit c4283950a9a4d3bf4a3f362e406c80ab14f10714 ]
    
    Currently the masking of ret with 0xff and followed by a right shift
    of 8 bits always leaves a zero result.  It appears the mask of 0xff
    is incorrect and should be 0xff00, but I don't have the hardware to
    test this. Fix this to mask the upper 8 bits before shifting.
    
    [ Not tested ]
    
    Addresses-Coverity: ("Operands don't affect result")
    Fixes: 8fc8598e61f6 ("Staging: Added Realtek rtl8192u driver to staging")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20200716154720.1710252-1-colin.king@canonical.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18692c1f1c1a5186ef34fecabdcc3ef9a3494fdf
Author: Milton Miller <miltonm@us.ibm.com>
Date:   Thu Jul 16 09:37:04 2020 +1000

    powerpc/vdso: Fix vdso cpu truncation
    
    [ Upstream commit a9f675f950a07d5c1dbcbb97aabac56f5ed085e3 ]
    
    The code in vdso_cpu_init that exposes the cpu and numa node to
    userspace via SPRG_VDSO incorrctly masks the cpu to 12 bits. This means
    that any kernel running on a box with more than 4096 threads (NR_CPUS
    advertises a limit of of 8192 cpus) would expose userspace to two cpu
    contexts running at the same time with the same cpu number.
    
    Note: I'm not aware of any distro shipping a kernel with support for more
    than 4096 threads today, nor of any system image that currently exceeds
    4096 threads. Found via code browsing.
    
    Fixes: 18ad51dd342a7eb09dbcd059d0b451b616d4dafc ("powerpc: Add VDSO version of getcpu")
    Signed-off-by: Milton Miller <miltonm@us.ibm.com>
    Signed-off-by: Anton Blanchard <anton@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200715233704.1352257-1-anton@ozlabs.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fa09e9c7862cc0607fe782013248a2bff24f889
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jul 8 14:58:57 2020 +0300

    mwifiex: Prevent memory corruption handling keys
    
    [ Upstream commit e18696786548244914f36ec3c46ac99c53df99c3 ]
    
    The length of the key comes from the network and it's a 16 bit number.  It
    needs to be capped to prevent a buffer overflow.
    
    Fixes: 5e6e3a92b9a4 ("wireless: mwifiex: initial commit for Marvell mwifiex driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Ganapathi Bhat <ganapathi.bhat@nxp.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200708115857.GA13729@mwanda
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f717831cdd96abf764e818b4dfddadcefc56e667
Author: John Garry <john.garry@huawei.com>
Date:   Thu Jul 9 20:23:19 2020 +0800

    scsi: scsi_debug: Add check for sdebug_max_queue during module init
    
    [ Upstream commit c87bf24cfb60bce27b4d2c7e56ebfd86fb9d16bb ]
    
    sdebug_max_queue should not exceed SDEBUG_CANQUEUE, otherwise crashes like
    this can be triggered by passing an out-of-range value:
    
    Hardware name: Huawei D06 /D06, BIOS Hisilicon D06 UEFI RC0 - V1.16.01 03/15/2019
     pstate: 20400009 (nzCv daif +PAN -UAO BTYPE=--)
     pc : schedule_resp+0x2a4/0xa70 [scsi_debug]
     lr : schedule_resp+0x52c/0xa70 [scsi_debug]
     sp : ffff800022ab36f0
     x29: ffff800022ab36f0 x28: ffff0023a935a610
     x27: ffff800008e0a648 x26: 0000000000000003
     x25: ffff0023e84f3200 x24: 00000000003d0900
     x23: 0000000000000000 x22: 0000000000000000
     x21: ffff0023be60a320 x20: ffff0023be60b538
     x19: ffff800008e13000 x18: 0000000000000000
     x17: 0000000000000000 x16: 0000000000000000
     x15: 0000000000000000 x14: 0000000000000000
     x13: 0000000000000000 x12: 0000000000000000
     x11: 0000000000000000 x10: 0000000000000000
     x9 : 0000000000000001 x8 : 0000000000000000
     x7 : 0000000000000000 x6 : 00000000000000c1
     x5 : 0000020000200000 x4 : dead0000000000ff
     x3 : 0000000000000200 x2 : 0000000000000200
     x1 : ffff800008e13d88 x0 : 0000000000000000
     Call trace:
    schedule_resp+0x2a4/0xa70 [scsi_debug]
    scsi_debug_queuecommand+0x2c4/0x9e0 [scsi_debug]
    scsi_queue_rq+0x698/0x840
    __blk_mq_try_issue_directly+0x108/0x228
    blk_mq_request_issue_directly+0x58/0x98
    blk_mq_try_issue_list_directly+0x5c/0xf0
    blk_mq_sched_insert_requests+0x18c/0x200
    blk_mq_flush_plug_list+0x11c/0x190
    blk_flush_plug_list+0xdc/0x110
    blk_finish_plug+0x38/0x210
    blkdev_direct_IO+0x450/0x4d8
    generic_file_read_iter+0x84/0x180
    blkdev_read_iter+0x3c/0x50
    aio_read+0xc0/0x170
    io_submit_one+0x5c8/0xc98
    __arm64_sys_io_submit+0x1b0/0x258
    el0_svc_common.constprop.3+0x68/0x170
    do_el0_svc+0x24/0x90
    el0_sync_handler+0x13c/0x1a8
    el0_sync+0x158/0x180
     Code: 528847e0 72a001e0 6b00003f 540018cd (3941c340)
    
    In addition, it should not be less than 1.
    
    So add checks for these, and fail the module init for those cases.
    
    [mkp: changed if condition to match error message]
    
    Link: https://lore.kernel.org/r/1594297400-24756-2-git-send-email-john.garry@huawei.com
    Fixes: c483739430f1 ("scsi_debug: add multiple queue support")
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0b78619482c4cf85470c226b311b2f17b567a2c4
Author: Tom Rix <trix@redhat.com>
Date:   Sun Jul 12 08:24:53 2020 -0700

    drm/bridge: sil_sii8620: initialize return of sii8620_readb
    
    [ Upstream commit 02cd2d3144653e6e2a0c7ccaa73311e48e2dc686 ]
    
    clang static analysis flags this error
    
    sil-sii8620.c:184:2: warning: Undefined or garbage value
      returned to caller [core.uninitialized.UndefReturn]
            return ret;
            ^~~~~~~~~~
    
    sii8620_readb calls sii8620_read_buf.
    sii8620_read_buf can return without setting its output
    pararmeter 'ret'.
    
    So initialize ret.
    
    Fixes: ce6e153f414a ("drm/bridge: add Silicon Image SiI8620 driver")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Andrzej Hajda <a.hajda@samsung.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200712152453.27510-1-trix@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8f71e3aee5562e69f10aec67d25ff4d56a8ff80
Author: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
Date:   Sun Jul 12 01:53:17 2020 +0300

    drm: panel: simple: Fix bpc for LG LB070WV8 panel
    
    [ Upstream commit a6ae2fe5c9f9fd355a48fb7d21c863e5b20d6c9c ]
    
    The LG LB070WV8 panel incorrectly reports a 16 bits per component value,
    while the panel uses 8 bits per component. Fix it.
    
    Fixes: dd0150026901 ("drm/panel: simple: Add support for LG LB070WV8 800x480 7" panel")
    Signed-off-by: Laurent Pinchart <laurent.pinchart+renesas@ideasonboard.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200711225317.28476-1-laurent.pinchart+renesas@ideasonboard.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b44d0e3064c73afb63c62673078fc2194dd35d64
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Thu Jul 2 13:45:00 2020 +0800

    leds: core: Flush scheduled work for system suspend
    
    [ Upstream commit 302a085c20194bfa7df52e0fe684ee0c41da02e6 ]
    
    Sometimes LED won't be turned off by LED_CORE_SUSPENDRESUME flag upon
    system suspend.
    
    led_set_brightness_nopm() uses schedule_work() to set LED brightness.
    However, there's no guarantee that the scheduled work gets executed
    because no one flushes the work.
    
    So flush the scheduled work to make sure LED gets turned off.
    
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Acked-by: Jacek Anaszewski <jacek.anaszewski@gmail.com>
    Fixes: 81fe8e5b73e3 ("leds: core: Add led_set_brightness_nosleep{nopm} functions")
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34506b92c0498b859d02bfbf40f0d485e1cca83f
Author: Bjorn Helgaas <bhelgaas@google.com>
Date:   Thu Jun 25 18:14:55 2020 -0500

    PCI: Fix pci_cfg_wait queue locking problem
    
    [ Upstream commit 2a7e32d0547f41c5ce244f84cf5d6ca7fccee7eb ]
    
    The pci_cfg_wait queue is used to prevent user-space config accesses to
    devices while they are recovering from reset.
    
    Previously we used these operations on pci_cfg_wait:
    
      __add_wait_queue(&pci_cfg_wait, ...)
      __remove_wait_queue(&pci_cfg_wait, ...)
      wake_up_all(&pci_cfg_wait)
    
    The wake_up acquires the wait queue lock, but the add and remove do not.
    
    Originally these were all protected by the pci_lock, but cdcb33f98244
    ("PCI: Avoid possible deadlock on pci_lock and p->pi_lock"), moved
    wake_up_all() outside pci_lock, so it could race with add/remove
    operations, which caused occasional kernel panics, e.g., during vfio-pci
    hotplug/unplug testing:
    
      Unable to handle kernel read from unreadable memory at virtual address ffff802dac469000
    
    Resolve this by using wait_event() instead of __add_wait_queue() and
    __remove_wait_queue().  The wait queue lock is held by both wait_event()
    and wake_up_all(), so it provides mutual exclusion.
    
    Fixes: cdcb33f98244 ("PCI: Avoid possible deadlock on pci_lock and p->pi_lock")
    Link: https://lore.kernel.org/linux-pci/79827f2f-9b43-4411-1376-b9063b67aee3@huawei.com/T/#u
    Based-on: https://lore.kernel.org/linux-pci/20191210031527.40136-1-zhengxiang9@huawei.com/
    Based-on-patch-by: Xiang Zheng <zhengxiang9@huawei.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Tested-by: Xiang Zheng <zhengxiang9@huawei.com>
    Cc: Heyi Guo <guoheyi@huawei.com>
    Cc: Biaoxiang Ye <yebiaoxiang@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 306dfa3ba6ec015e856425f952c479be05a0e823
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Mon Jun 29 14:47:18 2020 -0700

    xfs: fix reflink quota reservation accounting error
    
    [ Upstream commit 83895227aba1ade33e81f586aa7b6b1e143096a5 ]
    
    Quota reservations are supposed to account for the blocks that might be
    allocated due to a bmap btree split.  Reflink doesn't do this, so fix
    this to make the quota accounting more accurate before we start
    rearranging things.
    
    Fixes: 862bb360ef56 ("xfs: reflink extents from one file to another")
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Brian Foster <bfoster@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1defb82e165d99963f0592dc79adab1082acb5f2
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu May 28 08:41:47 2020 +0200

    media: exynos4-is: Add missed check for pinctrl_lookup_state()
    
    [ Upstream commit 18ffec750578f7447c288647d7282c7d12b1d969 ]
    
    fimc_md_get_pinctrl() misses a check for pinctrl_lookup_state().
    Add the missed check to fix it.
    
    Fixes: 4163851f7b99 ("[media] s5p-fimc: Use pinctrl API for camera ports configuration]")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 807e7e86120f981f267eccc1c1f774adfb5e1d93
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri May 8 16:40:22 2020 +0200

    media: firewire: Using uninitialized values in node_probe()
    
    [ Upstream commit 2505a210fc126599013aec2be741df20aaacc490 ]
    
    If fw_csr_string() returns -ENOENT, then "name" is uninitialized.  So
    then the "strlen(model_names[i]) <= name_len" is true because strlen()
    is unsigned and -ENOENT is type promoted to a very high positive value.
    Then the "strncmp(name, model_names[i], name_len)" uses uninitialized
    data because "name" is uninitialized.
    
    Fixes: 92374e886c75 ("[media] firedtv: drop obsolete backend abstraction")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c175d7afcbc845c64444eb67fde1457532f8117e
Author: Julian Anastasov <ja@ssi.bg>
Date:   Wed Jul 1 18:17:19 2020 +0300

    ipvs: allow connection reuse for unconfirmed conntrack
    
    [ Upstream commit f0a5e4d7a594e0fe237d3dfafb069bb82f80f42f ]
    
    YangYuxi is reporting that connection reuse
    is causing one-second delay when SYN hits
    existing connection in TIME_WAIT state.
    Such delay was added to give time to expire
    both the IPVS connection and the corresponding
    conntrack. This was considered a rare case
    at that time but it is causing problem for
    some environments such as Kubernetes.
    
    As nf_conntrack_tcp_packet() can decide to
    release the conntrack in TIME_WAIT state and
    to replace it with a fresh NEW conntrack, we
    can use this to allow rescheduling just by
    tuning our check: if the conntrack is
    confirmed we can not schedule it to different
    real server and the one-second delay still
    applies but if new conntrack was created,
    we are free to select new real server without
    any delays.
    
    YangYuxi lists some of the problem reports:
    
    - One second connection delay in masquerading mode:
    https://marc.info/?t=151683118100004&r=1&w=2
    
    - IPVS low throughput #70747
    https://github.com/kubernetes/kubernetes/issues/70747
    
    - Apache Bench can fill up ipvs service proxy in seconds #544
    https://github.com/cloudnativelabs/kube-router/issues/544
    
    - Additional 1s latency in `host -> service IP -> pod`
    https://github.com/kubernetes/kubernetes/issues/90854
    
    Fixes: f719e3754ee2 ("ipvs: drop first packet to redirect conntrack")
    Co-developed-by: YangYuxi <yx.atom1@gmail.com>
    Signed-off-by: YangYuxi <yx.atom1@gmail.com>
    Signed-off-by: Julian Anastasov <ja@ssi.bg>
    Reviewed-by: Simon Horman <horms@verge.net.au>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28e4fe928dfdd536976997ca4535b6c837c9bf33
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Jun 26 06:05:53 2020 +0200

    scsi: eesox: Fix different dev_id between request_irq() and free_irq()
    
    [ Upstream commit 86f2da1112ccf744ad9068b1d5d9843faf8ddee6 ]
    
    The dev_id used in request_irq() and free_irq() should match. Use 'info' in
    both cases.
    
    Link: https://lore.kernel.org/r/20200626040553.944352-1-christophe.jaillet@wanadoo.fr
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5337d82dd0ee8d39a1c08792ca8a60b3dc8abdfe
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Fri Jun 26 05:59:48 2020 +0200

    scsi: powertec: Fix different dev_id between request_irq() and free_irq()
    
    [ Upstream commit d179f7c763241c1dc5077fca88ddc3c47d21b763 ]
    
    The dev_id used in request_irq() and free_irq() should match. Use 'info' in
    both cases.
    
    Link: https://lore.kernel.org/r/20200626035948.944148-1-christophe.jaillet@wanadoo.fr
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73ad7e9aa1220c0a3d33dbbe9cf992f2fa1c70b5
Author: Colin Ian King <colin.king@canonical.com>
Date:   Wed Jun 24 13:07:10 2020 +0100

    drm/radeon: fix array out-of-bounds read and write issues
    
    [ Upstream commit 7ee78aff9de13d5dccba133f4a0de5367194b243 ]
    
    There is an off-by-one bounds check on the index into arrays
    table->mc_reg_address and table->mc_reg_table_entry[k].mc_data[j] that
    can lead to reads and writes outside of arrays. Fix the bound checking
    off-by-one error.
    
    Addresses-Coverity: ("Out-of-bounds read/write")
    Fixes: cc8dbbb4f62a ("drm/radeon: add dpm support for CI dGPUs (v2)")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6418cbbdf780119ae3207f2dff8c98424f68615f
Author: Wang Hai <wanghai38@huawei.com>
Date:   Tue Jun 2 20:07:33 2020 +0800

    cxl: Fix kobject memleak
    
    [ Upstream commit 85c5cbeba8f4fb28e6b9bfb3e467718385f78f76 ]
    
    Currently the error return path from kobject_init_and_add() is not
    followed by a call to kobject_put() - which means we are leaking
    the kobject.
    
    Fix it by adding a call to kobject_put() in the error path of
    kobject_init_and_add().
    
    Fixes: b087e6190ddc ("cxl: Export optional AFU configuration record in sysfs")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Acked-by: Andrew Donnellan <ajd@linux.ibm.com>
    Acked-by: Frederic Barrat <fbarrat@linux.ibm.com>
    Link: https://lore.kernel.org/r/20200602120733.5943-1-wanghai38@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d72aa0ecf881aeffb744a672d98affe614dee69
Author: Emil Velikov <emil.velikov@collabora.com>
Date:   Tue May 5 17:03:29 2020 +0100

    drm/mipi: use dcs write for mipi_dsi_dcs_set_tear_scanline
    
    [ Upstream commit 7a05c3b6d24b8460b3cec436cf1d33fac43c8450 ]
    
    The helper uses the MIPI_DCS_SET_TEAR_SCANLINE, although it's currently
    using the generic write. This does not look right.
    
    Perhaps some platforms don't distinguish between the two writers?
    
    Cc: Robert Chiras <robert.chiras@nxp.com>
    Cc: Vinay Simha BN <simhavcs@gmail.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Thierry Reding <treding@nvidia.com>
    Fixes: e83950816367 ("drm/dsi: Implement set tear scanline")
    Signed-off-by: Emil Velikov <emil.velikov@collabora.com>
    Reviewed-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200505160329.2976059-3-emil.l.velikov@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a63ea7e2c7c65909808ae7525d4741ed9f13edc7
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Thu Jun 25 22:47:30 2020 +0200

    scsi: cumana_2: Fix different dev_id between request_irq() and free_irq()
    
    [ Upstream commit 040ab9c4fd0070cd5fa71ba3a7b95b8470db9b4d ]
    
    The dev_id used in request_irq() and free_irq() should match.  Use 'info'
    in both cases.
    
    Link: https://lore.kernel.org/r/20200625204730.943520-1-christophe.jaillet@wanadoo.fr
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Acked-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 047dcd87e50e60ba67728386cf39aaafdf318dac
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Thu Jun 25 14:12:55 2020 -0500

    ASoC: Intel: bxt_rt298: add missing .owner field
    
    [ Upstream commit 88cee34b776f80d2da04afb990c2a28c36799c43 ]
    
    This field is required for ASoC cards. Not setting it will result in a
    module->name pointer being NULL and generate problems such as
    
    cat /proc/asound/modules
     0 (efault)
    
    Fixes: 76016322ec56 ('ASoC: Intel: Add Broxton-P machine driver')
    Reported-by: Jaroslav Kysela <perex@perex.cz>
    Suggested-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Link: https://lore.kernel.org/r/20200625191308.3322-5-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 559a88df733ee83bed026a12c66b999d861e57a7
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Jun 3 18:41:22 2020 +0200

    media: omap3isp: Add missed v4l2_ctrl_handler_free() for preview_init_entities()
    
    [ Upstream commit dc7690a73017e1236202022e26a6aa133f239c8c ]
    
    preview_init_entities() does not call v4l2_ctrl_handler_free() when
    it fails.
    Add the missed function to fix it.
    
    Fixes: de1135d44f4f ("[media] omap3isp: CCDC, preview engine and resizer")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Reviewed-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffe96de991a8872bdf5d127b1cab6be6376dc898
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue May 5 16:19:17 2020 +0200

    leds: lm355x: avoid enum conversion warning
    
    [ Upstream commit 985b1f596f9ed56f42b8c2280005f943e1434c06 ]
    
    clang points out that doing arithmetic between diffent enums is usually
    a mistake:
    
    drivers/leds/leds-lm355x.c:167:28: warning: bitwise operation between different enumeration types ('enum lm355x_tx2' and 'enum lm355x_ntc') [-Wenum-enum-conversion]
                    reg_val = pdata->pin_tx2 | pdata->ntc_pin;
                              ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~
    drivers/leds/leds-lm355x.c:178:28: warning: bitwise operation between different enumeration types ('enum lm355x_tx2' and 'enum lm355x_ntc') [-Wenum-enum-conversion]
                    reg_val = pdata->pin_tx2 | pdata->ntc_pin | pdata->pass_mode;
                              ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~
    
    In this driver, it is intentional, so add a cast to hide the false-positive
    warning. It appears to be the only instance of this warning at the moment.
    
    Fixes: b98d13c72592 ("leds: Add new LED driver for lm355x chips")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2190e425c7797bc77159315f606a88a2446c8764
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jun 18 11:04:00 2020 +0100

    drm/arm: fix unintentional integer overflow on left shift
    
    [ Upstream commit 5f368ddea6fec519bdb93b5368f6a844b6ea27a6 ]
    
    Shifting the integer value 1 is evaluated using 32-bit arithmetic
    and then used in an expression that expects a long value leads to
    a potential integer overflow. Fix this by using the BIT macro to
    perform the shift to avoid the overflow.
    
    Addresses-Coverity: ("Unintentional integer overflow")
    Fixes: ad49f8602fe8 ("drm/arm: Add support for Mali Display Processors")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Liviu Dudau <liviu.dudau@arm.com>
    Signed-off-by: Liviu Dudau <Liviu.Dudau@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200618100400.11464-1-colin.king@canonical.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bcc76193b088b2327e1aa62f042c2cdb3847090
Author: Tomasz Duszynski <tomasz.duszynski@octakon.com>
Date:   Mon Jun 1 18:15:52 2020 +0200

    iio: improve IIO_CONCENTRATION channel type description
    
    [ Upstream commit df16c33a4028159d1ba8a7061c9fa950b58d1a61 ]
    
    IIO_CONCENTRATION together with INFO_RAW specifier is used for reporting
    raw concentrations of pollutants. Raw value should be meaningless
    before being properly scaled. Because of that description shouldn't
    mention raw value unit whatsoever.
    
    Fix this by rephrasing existing description so it follows conventions
    used throughout IIO ABI docs.
    
    Fixes: 8ff6b3bc94930 ("iio: chemical: Add IIO_CONCENTRATION channel type")
    Signed-off-by: Tomasz Duszynski <tomasz.duszynski@octakon.com>
    Acked-by: Matt Ranostay <matt.ranostay@konsulko.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5becabdb89a3c1cec8d6c209195868bba4e8c4df
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Wed Apr 29 10:45:05 2020 +0200

    video: pxafb: Fix the function used to balance a 'dma_alloc_coherent()' call
    
    [ Upstream commit 499a2c41b954518c372873202d5e7714e22010c4 ]
    
    'dma_alloc_coherent()' must be balanced by a call to 'dma_free_coherent()'
    not 'dma_free_wc()'.
    The correct dma_free_ function is already used in the error handling path
    of the probe function.
    
    Fixes: 77e196752bdd ("[ARM] pxafb: allow video memory size to be configurable")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Viresh Kumar <viresh.kumar@linaro.org>
    Cc: Jani Nikula <jani.nikula@intel.com>
    cc: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Cc: Eric Miao <eric.miao@marvell.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200429084505.108897-1-christophe.jaillet@wanadoo.fr
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eb9a5196e8027b2c97909c2123a2ca23292cf08
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Fri Apr 24 00:42:51 2020 +0800

    console: newport_con: fix an issue about leak related system resources
    
    [ Upstream commit fd4b8243877250c05bb24af7fea5567110c9720b ]
    
    A call of the function do_take_over_console() can fail here.
    The corresponding system resources were not released then.
    Thus add a call of iounmap() and release_mem_region()
    together with the check of a failure predicate. and also
    add release_mem_region() on device removal.
    
    Fixes: e86bb8acc0fdc ("[PATCH] VT binding: Make newport_con support binding")
    Suggested-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200423164251.3349-1-zhengdejin5@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac20142733356e0ab65f051edc739c6f2d80de5c
Author: Dejin Zheng <zhengdejin5@gmail.com>
Date:   Thu Apr 23 00:07:19 2020 +0800

    video: fbdev: sm712fb: fix an issue about iounmap for a wrong address
    
    [ Upstream commit 98bd4f72988646c35569e1e838c0ab80d06c77f6 ]
    
    the sfb->fb->screen_base is not save the value get by iounmap() when
    the chip id is 0x720. so iounmap() for address sfb->fb->screen_base
    is not right.
    
    Fixes: 1461d6672864854 ("staging: sm7xxfb: merge sm712fb with fbdev")
    Cc: Andy Shevchenko <andy.shevchenko@gmail.com>
    Cc: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Cc: Teddy Wang <teddy.wang@siliconmotion.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Dejin Zheng <zhengdejin5@gmail.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200422160719.27763-1-zhengdejin5@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7add1e5eb71bc1a4a0da6952160689bded3ff96
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Fri May 22 09:34:51 2020 +0100

    agp/intel: Fix a memory leak on module initialisation failure
    
    [ Upstream commit b975abbd382fe442713a4c233549abb90e57c22b ]
    
    In intel_gtt_setup_scratch_page(), pointer "page" is not released if
    pci_dma_mapping_error() return an error, leading to a memory leak on
    module initialisation failure.  Simply fix this issue by freeing "page"
    before return.
    
    Fixes: 0e87d2b06cb46 ("intel-gtt: initialize our own scratch page")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200522083451.7448-1-chris@chris-wilson.co.uk
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3baa40fc3933fd026fba48b7d6ec96b6d095d35d
Author: Erik Kaneda <erik.kaneda@intel.com>
Date:   Mon Jul 20 10:31:20 2020 -0700

    ACPICA: Do not increment operation_region reference counts for field units
    
    [ Upstream commit 6a54ebae6d047c988a31f5ac5a64ab5cf83797a2 ]
    
    ACPICA commit e17b28cfcc31918d0db9547b6b274b09c413eb70
    
    Object reference counts are used as a part of ACPICA's garbage
    collection mechanism. This mechanism keeps track of references to
    heap-allocated structures such as the ACPI operand objects.
    
    Recent server firmware has revealed that this reference count can
    overflow on large servers that declare many field units under the
    same operation_region. This occurs because each field unit declaration
    will add a reference count to the source operation_region.
    
    This change solves the reference count overflow for operation_regions
    objects by preventing fieldunits from incrementing their
    operation_region's reference count. Each operation_region's reference
    count will not be changed by named objects declared under the Field
    operator. During namespace deletion, the operation_region namespace
    node will be deleted and each fieldunit will be deleted without
    touching the deleted operation_region object.
    
    Link: https://github.com/acpica/acpica/commit/e17b28cf
    Signed-off-by: Erik Kaneda <erik.kaneda@intel.com>
    Signed-off-by: Bob Moore <robert.moore@intel.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84ff9d1b7a6095049ef6950363069185a271f581
Author: Coly Li <colyli@suse.de>
Date:   Sat Jul 25 20:00:26 2020 +0800

    bcache: fix super block seq numbers comparision in register_cache_set()
    
    [ Upstream commit 117f636ea695270fe492d0c0c9dfadc7a662af47 ]
    
    In register_cache_set(), c is pointer to struct cache_set, and ca is
    pointer to struct cache, if ca->sb.seq > c->sb.seq, it means this
    registering cache has up to date version and other members, the in-
    memory version and other members should be updated to the newer value.
    
    But current implementation makes a cache set only has a single cache
    device, so the above assumption works well except for a special case.
    The execption is when a cache device new created and both ca->sb.seq and
    c->sb.seq are 0, because the super block is never flushed out yet. In
    the location for the following if() check,
    2156         if (ca->sb.seq > c->sb.seq) {
    2157                 c->sb.version           = ca->sb.version;
    2158                 memcpy(c->sb.set_uuid, ca->sb.set_uuid, 16);
    2159                 c->sb.flags             = ca->sb.flags;
    2160                 c->sb.seq               = ca->sb.seq;
    2161                 pr_debug("set version = %llu\n", c->sb.version);
    2162         }
    c->sb.version is not initialized yet and valued 0. When ca->sb.seq is 0,
    the if() check will fail (because both values are 0), and the cache set
    version, set_uuid, flags and seq won't be updated.
    
    The above problem is hiden for current code, because the bucket size is
    compatible among different super block version. And the next time when
    running cache set again, ca->sb.seq will be larger than 0 and cache set
    super block version will be updated properly.
    
    But if the large bucket feature is enabled,  sb->bucket_size is the low
    16bits of the bucket size. For a power of 2 value, when the actual
    bucket size exceeds 16bit width, sb->bucket_size will always be 0. Then
    read_super_common() will fail because the if() check to
    is_power_of_2(sb->bucket_size) is false. This is how the long time
    hidden bug is triggered.
    
    This patch modifies the if() check to the following way,
    2156         if (ca->sb.seq > c->sb.seq || c->sb.seq == 0) {
    Then cache set's version, set_uuid, flags and seq will always be updated
    corectly including for a new created cache device.
    
    Signed-off-by: Coly Li <colyli@suse.de>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 321b6494567834730f7272e5b33cc3c956bbf8af
Author: Jim Cromie <jim.cromie@gmail.com>
Date:   Sun Jul 19 17:10:47 2020 -0600

    dyndbg: fix a BUG_ON in ddebug_describe_flags
    
    [ Upstream commit f678ce8cc3cb2ad29df75d8824c74f36398ba871 ]
    
    ddebug_describe_flags() currently fills a caller provided string buffer,
    after testing its size (also passed) in a BUG_ON.  Fix this by
    replacing them with a known-big-enough string buffer wrapped in a
    struct, and passing that instead.
    
    Also simplify ddebug_describe_flags() flags parameter from a struct to
    a member in that struct, and hoist the member deref up to the caller.
    This makes the function reusable (soon) where flags are unpacked.
    
    Acked-by: <jbaron@akamai.com>
    Signed-off-by: Jim Cromie <jim.cromie@gmail.com>
    Link: https://lore.kernel.org/r/20200719231058.1586423-8-jim.cromie@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4122fc8f550738ad3bd2055cae0bb1188918a7b
Author: Danesh Petigara <danesh.petigara@broadcom.com>
Date:   Wed Jul 22 13:07:45 2020 -0400

    usb: bdc: Halt controller on suspend
    
    [ Upstream commit 5fc453d7de3d0c345812453823a3a56783c5f82c ]
    
    GISB bus error kernel panics have been observed during S2 transition
    tests on the 7271t platform. The errors are a result of the BDC
    interrupt handler trying to access BDC register space after the
    system's suspend callbacks have completed.
    
    Adding a suspend hook to the BDC driver that halts the controller before
    S2 entry thus preventing unwanted access to the BDC register space during
    this transition.
    
    Signed-off-by: Danesh Petigara <danesh.petigara@broadcom.com>
    Signed-off-by: Al Cooper <alcooperx@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c05141b48ec0e3c52f8ec5fa91e212a10b5df6c9
Author: Sasi Kumar <sasi.kumar@broadcom.com>
Date:   Wed Jul 22 13:07:42 2020 -0400

    bdc: Fix bug causing crash after multiple disconnects
    
    [ Upstream commit a95bdfd22076497288868c028619bc5995f5cc7f ]
    
    Multiple connects/disconnects can cause a crash on the second
    disconnect. The driver had a problem where it would try to send
    endpoint commands after it was disconnected which is not allowed
    by the hardware. The fix is to only allow the endpoint commands
    when the endpoint is connected. This will also fix issues that
    showed up when using configfs to create gadgets.
    
    Signed-off-by: Sasi Kumar <sasi.kumar@broadcom.com>
    Signed-off-by: Al Cooper <alcooperx@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3d20904f8f7437cf56aba19e9619f733a34a308
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Tue Jul 21 23:15:58 2020 +0300

    usb: gadget: net2280: fix memory leak on probe error handling paths
    
    [ Upstream commit 2468c877da428ebfd701142c4cdfefcfb7d4c00e ]
    
    Driver does not release memory for device on error handling paths in
    net2280_probe() when gadget_release() is not registered yet.
    
    The patch fixes the bug like in other similar drivers.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8679b50cd340721c09d198ff2bbc97762465154
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Mon Jun 29 06:18:41 2020 +0300

    gpu: host1x: debug: Fix multiple channels emitting messages simultaneously
    
    [ Upstream commit 35681862808472a0a4b9a8817ae2789c0b5b3edc ]
    
    Once channel's job is hung, it dumps the channel's state into KMSG before
    tearing down the offending job. If multiple channels hang at once, then
    they dump messages simultaneously, making the debug info unreadable, and
    thus, useless. This patch adds mutex which allows only one channel to emit
    debug messages at a time.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1ca304b640a662c05821694f99d5bbd377a10e3
Author: Bolarinwa Olayemi Saheed <refactormyself@gmail.com>
Date:   Mon Jul 13 19:55:27 2020 +0200

    iwlegacy: Check the return value of pcie_capability_read_*()
    
    [ Upstream commit 9018fd7f2a73e9b290f48a56b421558fa31e8b75 ]
    
    On failure pcie_capability_read_dword() sets it's last parameter, val
    to 0. However, with Patch 14/14, it is possible that val is set to ~0 on
    failure. This would introduce a bug because (x & x) == (~0 & x).
    
    This bug can be avoided without changing the function's behaviour if the
    return value of pcie_capability_read_dword is checked to confirm success.
    
    Check the return value of pcie_capability_read_dword() to ensure success.
    
    Suggested-by: Bjorn Helgaas <bjorn@helgaas.com>
    Signed-off-by: Bolarinwa Olayemi Saheed <refactormyself@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200713175529.29715-3-refactormyself@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d7c9a5df1dc45f3ec932536bb081f6377fe09df
Author: Wright Feng <wright.feng@cypress.com>
Date:   Wed Jun 24 04:16:07 2020 -0500

    brcmfmac: set state of hanger slot to FREE when flushing PSQ
    
    [ Upstream commit fcdd7a875def793c38d7369633af3eba6c7cf089 ]
    
    When USB or SDIO device got abnormal bus disconnection, host driver
    tried to clean up the skbs in PSQ and TXQ (The skb's pointer in hanger
    slot linked to PSQ and TSQ), so we should set the state of skb hanger slot
    to BRCMF_FWS_HANGER_ITEM_STATE_FREE before freeing skb.
    In brcmf_fws_bus_txq_cleanup it already sets
    BRCMF_FWS_HANGER_ITEM_STATE_FREE before freeing skb, therefore we add the
    same thing in brcmf_fws_psq_flush to avoid following warning message.
    
       [ 1580.012880] ------------   [ cut here ]------------
       [ 1580.017550] WARNING: CPU: 3 PID: 3065 at
    drivers/net/wireless/broadcom/brcm80211/brcmutil/utils.c:49
    brcmu_pkt_buf_free_skb+0x21/0x30 [brcmutil]
       [ 1580.184017] Call Trace:
       [ 1580.186514]  brcmf_fws_cleanup+0x14e/0x190 [brcmfmac]
       [ 1580.191594]  brcmf_fws_del_interface+0x70/0x90 [brcmfmac]
       [ 1580.197029]  brcmf_proto_bcdc_del_if+0xe/0x10 [brcmfmac]
       [ 1580.202418]  brcmf_remove_interface+0x69/0x190 [brcmfmac]
       [ 1580.207888]  brcmf_detach+0x90/0xe0 [brcmfmac]
       [ 1580.212385]  brcmf_usb_disconnect+0x76/0xb0 [brcmfmac]
       [ 1580.217557]  usb_unbind_interface+0x72/0x260
       [ 1580.221857]  device_release_driver_internal+0x141/0x200
       [ 1580.227152]  device_release_driver+0x12/0x20
       [ 1580.231460]  bus_remove_device+0xfd/0x170
       [ 1580.235504]  device_del+0x1d9/0x300
       [ 1580.239041]  usb_disable_device+0x9e/0x270
       [ 1580.243160]  usb_disconnect+0x94/0x270
       [ 1580.246980]  hub_event+0x76d/0x13b0
       [ 1580.250499]  process_one_work+0x144/0x360
       [ 1580.254564]  worker_thread+0x4d/0x3c0
       [ 1580.258247]  kthread+0x109/0x140
       [ 1580.261515]  ? rescuer_thread+0x340/0x340
       [ 1580.265543]  ? kthread_park+0x60/0x60
       [ 1580.269237]  ? SyS_exit_group+0x14/0x20
       [ 1580.273118]  ret_from_fork+0x25/0x30
       [ 1580.300446] ------------   [ cut here ]------------
    
    Acked-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Wright Feng <wright.feng@cypress.com>
    Signed-off-by: Chi-hsien Lin <chi-hsien.lin@cypress.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200624091608.25154-2-wright.feng@cypress.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c5bfd3edc96f04122aa647b8c26bbbb3ec35c09
Author: Prasanna Kerekoppa <prasanna.kerekoppa@cypress.com>
Date:   Thu Jun 4 02:18:35 2020 -0500

    brcmfmac: To fix Bss Info flag definition Bug
    
    [ Upstream commit fa3266541b13f390eb35bdbc38ff4a03368be004 ]
    
    Bss info flag definition need to be fixed from 0x2 to 0x4
    This flag is for rssi info received on channel.
    All Firmware branches defined as 0x4 and this is bug in brcmfmac.
    
    Signed-off-by: Prasanna Kerekoppa <prasanna.kerekoppa@cypress.com>
    Signed-off-by: Chi-hsien Lin <chi-hsien.lin@cypress.com>
    Signed-off-by: Wright Feng <wright.feng@cypress.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200604071835.3842-6-wright.feng@cypress.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec2c0793b8116c573ea395a675433b69491dbe2e
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Thu Apr 16 16:46:10 2020 -0700

    mm/mmap.c: Add cond_resched() for exit_mmap() CPU stalls
    
    [ Upstream commit 0a3b3c253a1eb2c7fe7f34086d46660c909abeb3 ]
    
    A large process running on a heavily loaded system can encounter the
    following RCU CPU stall warning:
    
      rcu: INFO: rcu_sched self-detected stall on CPU
      rcu:  3-....: (20998 ticks this GP) idle=4ea/1/0x4000000000000002 softirq=556558/556558 fqs=5190
            (t=21013 jiffies g=1005461 q=132576)
      NMI backtrace for cpu 3
      CPU: 3 PID: 501900 Comm: aio-free-ring-w Kdump: loaded Not tainted 5.2.9-108_fbk12_rc3_3858_gb83b75af7909 #1
      Hardware name: Wiwynn   HoneyBadger/PantherPlus, BIOS HBM6.71 02/03/2016
      Call Trace:
       <IRQ>
       dump_stack+0x46/0x60
       nmi_cpu_backtrace.cold.3+0x13/0x50
       ? lapic_can_unplug_cpu.cold.27+0x34/0x34
       nmi_trigger_cpumask_backtrace+0xba/0xca
       rcu_dump_cpu_stacks+0x99/0xc7
       rcu_sched_clock_irq.cold.87+0x1aa/0x397
       ? tick_sched_do_timer+0x60/0x60
       update_process_times+0x28/0x60
       tick_sched_timer+0x37/0x70
       __hrtimer_run_queues+0xfe/0x270
       hrtimer_interrupt+0xf4/0x210
       smp_apic_timer_interrupt+0x5e/0x120
       apic_timer_interrupt+0xf/0x20
       </IRQ>
      RIP: 0010:kmem_cache_free+0x223/0x300
      Code: 88 00 00 00 0f 85 ca 00 00 00 41 8b 55 18 31 f6 f7 da 41 f6 45 0a 02 40 0f 94 c6 83 c6 05 9c 41 5e fa e8 a0 a7 01 00 41 56 9d <49> 8b 47 08 a8 03 0f 85 87 00 00 00 65 48 ff 08 e9 3d fe ff ff 65
      RSP: 0018:ffffc9000e8e3da8 EFLAGS: 00000206 ORIG_RAX: ffffffffffffff13
      RAX: 0000000000020000 RBX: ffff88861b9de960 RCX: 0000000000000030
      RDX: fffffffffffe41e8 RSI: 000060777fe3a100 RDI: 000000000001be18
      RBP: ffffea00186e7780 R08: ffffffffffffffff R09: ffffffffffffffff
      R10: ffff88861b9dea28 R11: ffff88887ffde000 R12: ffffffff81230a1f
      R13: ffff888854684dc0 R14: 0000000000000206 R15: ffff8888547dbc00
       ? remove_vma+0x4f/0x60
       remove_vma+0x4f/0x60
       exit_mmap+0xd6/0x160
       mmput+0x4a/0x110
       do_exit+0x278/0xae0
       ? syscall_trace_enter+0x1d3/0x2b0
       ? handle_mm_fault+0xaa/0x1c0
       do_group_exit+0x3a/0xa0
       __x64_sys_exit_group+0x14/0x20
       do_syscall_64+0x42/0x100
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    And on a PREEMPT=n kernel, the "while (vma)" loop in exit_mmap() can run
    for a very long time given a large process.  This commit therefore adds
    a cond_resched() to this loop, providing RCU any needed quiescent states.
    
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: <linux-mm@kvack.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0d0a1d0be4777ed33ef70eb9f44cc6335155a0f
Author: Bartosz Golaszewski <bgolaszewski@baylibre.com>
Date:   Mon Jun 15 09:44:45 2020 +0200

    irqchip/irq-mtk-sysirq: Replace spinlock with raw_spinlock
    
    [ Upstream commit 6eeb997ab5075e770a002c51351fa4ec2c6b5c39 ]
    
    This driver may take a regular spinlock when a raw spinlock
    (irq_desc->lock) is already taken which results in the following
    lockdep splat:
    
    =============================
    [ BUG: Invalid wait context ]
    5.7.0-rc7 #1 Not tainted
    -----------------------------
    swapper/0/0 is trying to lock:
    ffffff800303b798 (&chip_data->lock){....}-{3:3}, at: mtk_sysirq_set_type+0x48/0xc0
    other info that might help us debug this:
    context-{5:5}
    2 locks held by swapper/0/0:
     #0: ffffff800302ee68 (&desc->request_mutex){....}-{4:4}, at: __setup_irq+0xc4/0x8a0
     #1: ffffff800302ecf0 (&irq_desc_lock_class){....}-{2:2}, at: __setup_irq+0xe4/0x8a0
    stack backtrace:
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.7.0-rc7 #1
    Hardware name: Pumpkin MT8516 (DT)
    Call trace:
     dump_backtrace+0x0/0x180
     show_stack+0x14/0x20
     dump_stack+0xd0/0x118
     __lock_acquire+0x8c8/0x2270
     lock_acquire+0xf8/0x470
     _raw_spin_lock_irqsave+0x50/0x78
     mtk_sysirq_set_type+0x48/0xc0
     __irq_set_trigger+0x58/0x170
     __setup_irq+0x420/0x8a0
     request_threaded_irq+0xd8/0x190
     timer_of_init+0x1e8/0x2c4
     mtk_gpt_init+0x5c/0x1dc
     timer_probe+0x74/0xf4
     time_init+0x14/0x44
     start_kernel+0x394/0x4f0
    
    Replace the spinlock_t with raw_spinlock_t to avoid this warning.
    
    Signed-off-by: Bartosz Golaszewski <bgolaszewski@baylibre.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200615074445.3579-1-brgl@bgdev.pl
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf62ec1299388b17ec186cf5d854c0bb020d63c1
Author: Michael Tretter <m.tretter@pengutronix.de>
Date:   Thu Aug 17 12:43:07 2017 +0200

    drm/debugfs: fix plain echo to connector "force" attribute
    
    [ Upstream commit c704b17071c4dc571dca3af4e4151dac51de081a ]
    
    Using plain echo to set the "force" connector attribute fails with
    -EINVAL, because echo appends a newline to the output.
    
    Replace strcmp with sysfs_streq to also accept strings that end with a
    newline.
    
    v2: use sysfs_streq instead of stripping trailing whitespace
    
    Signed-off-by: Michael Tretter <m.tretter@pengutronix.de>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Emil Velikov <emil.l.velikov@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170817104307.17124-1-m.tretter@pengutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1379b6ef4b554a339a1ffd11a8a4fa00e6a4bfa7
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 20:41:56 2020 -0500

    drm/nouveau: fix multiple instances of reference count leaks
    
    [ Upstream commit 659fb5f154c3434c90a34586f3b7aa1c39cf6062 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    ref count before returning the error.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcce8bae44f84647b0f227a6835eb1d1cb1bfee0
Author: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
Date:   Mon Jun 1 08:33:06 2020 +0200

    arm64: dts: hisilicon: hikey: fixes to comply with adi, adv7533 DT binding
    
    [ Upstream commit bbe28fc3cbabbef781bcdf847615d52ce2e26e42 ]
    
    hi3660-hikey960.dts:
      Define a 'ports' node for 'adv7533: adv7533@39' and the
      'adi,dsi-lanes' property to make it compliant with the adi,adv7533 DT
      binding.
    
      This fills the requirements to meet the binding requirements,
      remote endpoints are not defined.
    
    hi6220-hikey.dts:
      Change property name s/pd-gpio/pd-gpios, gpio properties should be
      plural. This is just a cosmetic change.
    
    Signed-off-by: Ricardo Cañuelo <ricardo.canuelo@collabora.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Wei Xu <xuwei5@hisilicon.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 022b66780f5333eaf511884a65e771afeec9dbc8
Author: Zhao Heming <heming.zhao@suse.com>
Date:   Thu Jul 9 11:29:29 2020 +0800

    md-cluster: fix wild pointer of unlock_all_bitmaps()
    
    [ Upstream commit 60f80d6f2d07a6d8aee485a1d1252327eeee0c81 ]
    
    reproduction steps:
    ```
    node1 # mdadm -C /dev/md0 -b clustered -e 1.2 -n 2 -l mirror /dev/sda
    /dev/sdb
    node2 # mdadm -A /dev/md0 /dev/sda /dev/sdb
    node1 # mdadm -G /dev/md0 -b none
    mdadm: failed to remove clustered bitmap.
    node1 # mdadm -S --scan
    ^C  <==== mdadm hung & kernel crash
    ```
    
    kernel stack:
    ```
    [  335.230657] general protection fault: 0000 [#1] SMP NOPTI
    [...]
    [  335.230848] Call Trace:
    [  335.230873]  ? unlock_all_bitmaps+0x5/0x70 [md_cluster]
    [  335.230886]  unlock_all_bitmaps+0x3d/0x70 [md_cluster]
    [  335.230899]  leave+0x10f/0x190 [md_cluster]
    [  335.230932]  ? md_super_wait+0x93/0xa0 [md_mod]
    [  335.230947]  ? leave+0x5/0x190 [md_cluster]
    [  335.230973]  md_cluster_stop+0x1a/0x30 [md_mod]
    [  335.230999]  md_bitmap_free+0x142/0x150 [md_mod]
    [  335.231013]  ? _cond_resched+0x15/0x40
    [  335.231025]  ? mutex_lock+0xe/0x30
    [  335.231056]  __md_stop+0x1c/0xa0 [md_mod]
    [  335.231083]  do_md_stop+0x160/0x580 [md_mod]
    [  335.231119]  ? 0xffffffffc05fb078
    [  335.231148]  md_ioctl+0xa04/0x1930 [md_mod]
    [  335.231165]  ? filename_lookup+0xf2/0x190
    [  335.231179]  blkdev_ioctl+0x93c/0xa10
    [  335.231205]  ? _cond_resched+0x15/0x40
    [  335.231214]  ? __check_object_size+0xd4/0x1a0
    [  335.231224]  block_ioctl+0x39/0x40
    [  335.231243]  do_vfs_ioctl+0xa0/0x680
    [  335.231253]  ksys_ioctl+0x70/0x80
    [  335.231261]  __x64_sys_ioctl+0x16/0x20
    [  335.231271]  do_syscall_64+0x65/0x1f0
    [  335.231278]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    ```
    
    Signed-off-by: Zhao Heming <heming.zhao@suse.com>
    Signed-off-by: Song Liu <songliubraving@fb.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4c693d475995afcb1c11ee3c5f402b8d318ba9cd
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Tue Jun 30 22:54:51 2020 +0300

    video: fbdev: neofb: fix memory leak in neo_scan_monitor()
    
    [ Upstream commit edcb3895a751c762a18d25c8d9846ce9759ed7e1 ]
    
    neofb_probe() calls neo_scan_monitor() that can successfully allocate a
    memory for info->monspecs.modedb and proceed to case 0x03. There it does
    not free the memory and returns -1. neofb_probe() goes to label
    err_scan_monitor, thus, it does not free this memory through calling
    fb_destroy_modedb() as well. We can not go to label err_init_hw since
    neo_scan_monitor() can fail during memory allocation. So, the patch frees
    the memory directly for case 0x03.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200630195451.18675-1-novikov@ispras.ru
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c2060b3bfe1de301e3f491019775b737989f541
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sat Jun 13 21:21:22 2020 -0500

    drm/radeon: Fix reference count leaks caused by pm_runtime_get_sync
    
    [ Upstream commit 9fb10671011143d15b6b40d6d5fa9c52c57e9d63 ]
    
    On calling pm_runtime_get_sync() the reference count of the device
    is incremented. In case of failure, decrement the
    reference count before returning the error.
    
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c6442f159c460a8fc98a36eeb387d07a643a920
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Fri May 8 14:15:37 2020 -0700

    fs/btrfs: Add cond_resched() for try_release_extent_mapping() stalls
    
    [ Upstream commit 9f47eb5461aaeb6cb8696f9d11503ae90e4d5cb0 ]
    
    Very large I/Os can cause the following RCU CPU stall warning:
    
    RIP: 0010:rb_prev+0x8/0x50
    Code: 49 89 c0 49 89 d1 48 89 c2 48 89 f8 e9 e5 fd ff ff 4c 89 48 10 c3 4c =
    89 06 c3 4c 89 40 10 c3 0f 1f 00 48 8b 0f 48 39 cf 74 38 <48> 8b 47 10 48 85 c0 74 22 48 8b 50 08 48 85 d2 74 0c 48 89 d0 48
    RSP: 0018:ffffc9002212bab0 EFLAGS: 00000287 ORIG_RAX: ffffffffffffff13
    RAX: ffff888821f93630 RBX: ffff888821f93630 RCX: ffff888821f937e0
    RDX: 0000000000000000 RSI: 0000000000102000 RDI: ffff888821f93630
    RBP: 0000000000103000 R08: 000000000006c000 R09: 0000000000000238
    R10: 0000000000102fff R11: ffffc9002212bac8 R12: 0000000000000001
    R13: ffffffffffffffff R14: 0000000000102000 R15: ffff888821f937e0
     __lookup_extent_mapping+0xa0/0x110
     try_release_extent_mapping+0xdc/0x220
     btrfs_releasepage+0x45/0x70
     shrink_page_list+0xa39/0xb30
     shrink_inactive_list+0x18f/0x3b0
     shrink_lruvec+0x38e/0x6b0
     shrink_node+0x14d/0x690
     do_try_to_free_pages+0xc6/0x3e0
     try_to_free_mem_cgroup_pages+0xe6/0x1e0
     reclaim_high.constprop.73+0x87/0xc0
     mem_cgroup_handle_over_high+0x66/0x150
     exit_to_usermode_loop+0x82/0xd0
     do_syscall_64+0xd4/0x100
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    On a PREEMPT=n kernel, the try_release_extent_mapping() function's
    "while" loop might run for a very long time on a large I/O.  This commit
    therefore adds a cond_resched() to this loop, providing RCU any needed
    quiescent states.
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4d1ef0f57b29f91bfd71189c70faae50ff182597
Author: Lihong Kou <koulihong@huawei.com>
Date:   Tue Jun 23 20:28:41 2020 +0800

    Bluetooth: add a mutex lock to avoid UAF in do_enale_set
    
    [ Upstream commit f9c70bdc279b191da8d60777c627702c06e4a37d ]
    
    In the case we set or free the global value listen_chan in
    different threads, we can encounter the UAF problems because
    the method is not protected by any lock, add one to avoid
    this bug.
    
    BUG: KASAN: use-after-free in l2cap_chan_close+0x48/0x990
    net/bluetooth/l2cap_core.c:730
    Read of size 8 at addr ffff888096950000 by task kworker/1:102/2868
    
    CPU: 1 PID: 2868 Comm: kworker/1:102 Not tainted 5.5.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    Workqueue: events do_enable_set
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1fb/0x318 lib/dump_stack.c:118
     print_address_description+0x74/0x5c0 mm/kasan/report.c:374
     __kasan_report+0x149/0x1c0 mm/kasan/report.c:506
     kasan_report+0x26/0x50 mm/kasan/common.c:641
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:135
     l2cap_chan_close+0x48/0x990 net/bluetooth/l2cap_core.c:730
     do_enable_set+0x660/0x900 net/bluetooth/6lowpan.c:1074
     process_one_work+0x7f5/0x10f0 kernel/workqueue.c:2264
     worker_thread+0xbbc/0x1630 kernel/workqueue.c:2410
     kthread+0x332/0x350 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Allocated by task 2870:
     save_stack mm/kasan/common.c:72 [inline]
     set_track mm/kasan/common.c:80 [inline]
     __kasan_kmalloc+0x118/0x1c0 mm/kasan/common.c:515
     kasan_kmalloc+0x9/0x10 mm/kasan/common.c:529
     kmem_cache_alloc_trace+0x221/0x2f0 mm/slab.c:3551
     kmalloc include/linux/slab.h:555 [inline]
     kzalloc include/linux/slab.h:669 [inline]
     l2cap_chan_create+0x50/0x320 net/bluetooth/l2cap_core.c:446
     chan_create net/bluetooth/6lowpan.c:640 [inline]
     bt_6lowpan_listen net/bluetooth/6lowpan.c:959 [inline]
     do_enable_set+0x6a4/0x900 net/bluetooth/6lowpan.c:1078
     process_one_work+0x7f5/0x10f0 kernel/workqueue.c:2264
     worker_thread+0xbbc/0x1630 kernel/workqueue.c:2410
     kthread+0x332/0x350 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Freed by task 2870:
     save_stack mm/kasan/common.c:72 [inline]
     set_track mm/kasan/common.c:80 [inline]
     kasan_set_free_info mm/kasan/common.c:337 [inline]
     __kasan_slab_free+0x12e/0x1e0 mm/kasan/common.c:476
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:485
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10d/0x220 mm/slab.c:3757
     l2cap_chan_destroy net/bluetooth/l2cap_core.c:484 [inline]
     kref_put include/linux/kref.h:65 [inline]
     l2cap_chan_put+0x170/0x190 net/bluetooth/l2cap_core.c:498
     do_enable_set+0x66c/0x900 net/bluetooth/6lowpan.c:1075
     process_one_work+0x7f5/0x10f0 kernel/workqueue.c:2264
     worker_thread+0xbbc/0x1630 kernel/workqueue.c:2410
     kthread+0x332/0x350 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    The buggy address belongs to the object at ffff888096950000
     which belongs to the cache kmalloc-2k of size 2048
    The buggy address is located 0 bytes inside of
     2048-byte region [ffff888096950000, ffff888096950800)
    The buggy address belongs to the page:
    page:ffffea00025a5400 refcount:1 mapcount:0 mapping:ffff8880aa400e00 index:0x0
    flags: 0xfffe0000000200(slab)
    raw: 00fffe0000000200 ffffea00027d1548 ffffea0002397808 ffff8880aa400e00
    raw: 0000000000000000 ffff888096950000 0000000100000001 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88809694ff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff88809694ff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff888096950000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                       ^
     ffff888096950080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff888096950100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Reported-by: syzbot+96414aa0033c363d8458@syzkaller.appspotmail.com
    Signed-off-by: Lihong Kou <koulihong@huawei.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 60432947f6b61d54a0fbe3d3cc0d2f90fde268f5
Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
Date:   Wed Apr 29 13:42:32 2020 +0300

    drm/tilcdc: fix leak & null ref in panel_connector_get_modes
    
    [ Upstream commit 3f9c1c872cc97875ddc8d63bc9fe6ee13652b933 ]
    
    If videomode_from_timings() returns true, the mode allocated with
    drm_mode_create will be leaked.
    
    Also, the return value of drm_mode_create() is never checked, and thus
    could cause NULL deref.
    
    Fix these two issues.
    
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200429104234.18910-1-tomi.valkeinen@ti.com
    Reviewed-by: Jyri Sarha <jsarha@ti.com>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb272a8c31a7ea5a139fe84a9ee90d8c2a96ad64
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Tue Jul 21 21:45:51 2020 +0800

    ARM: socfpga: PM: add missing put_device() call in socfpga_setup_ocram_self_refresh()
    
    [ Upstream commit 3ad7b4e8f89d6bcc9887ca701cf2745a6aedb1a0 ]
    
    if of_find_device_by_node() succeed, socfpga_setup_ocram_self_refresh
    doesn't have a corresponding put_device(). Thus add a jump target to
    fix the exception handling for this function implementation.
    
    Fixes: 44fd8c7d4005 ("ARM: socfpga: support suspend to ram")
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68df0008958bce3bc7d50695a0e8fd763e594e36
Author: Dilip Kota <eswara.kota@linux.intel.com>
Date:   Fri Jul 17 14:27:50 2020 +0800

    spi: lantiq: fix: Rx overflow error in full duplex mode
    
    [ Upstream commit 661ccf2b3f1360be50242726f7c26ced6a9e7d52 ]
    
    In full duplex mode, rx overflow error is observed. To overcome the error,
    wait until the complete data got received and proceed further.
    
    Fixes: 17f84b793c01 ("spi: lantiq-ssc: add support for Lantiq SSC SPI controller")
    Signed-off-by: Dilip Kota <eswara.kota@linux.intel.com>
    Link: https://lore.kernel.org/r/efb650b0faa49a00788c4e0ca8ef7196bdba851d.1594957019.git.eswara.kota@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ed68d6d2ce261857619663424de5690a99577e31
Author: yu kuai <yukuai3@huawei.com>
Date:   Thu Jun 4 20:33:01 2020 +0800

    ARM: at91: pm: add missing put_device() call in at91_pm_sram_init()
    
    [ Upstream commit f87a4f022c44e5b87e842a9f3e644fba87e8385f ]
    
    if of_find_device_by_node() succeed, at91_pm_sram_init() doesn't have
    a corresponding put_device(). Thus add a jump target to fix the exception
    handling for this function implementation.
    
    Fixes: d2e467905596 ("ARM: at91: pm: use the mmio-sram pool to access SRAM")
    Signed-off-by: yu kuai <yukuai3@huawei.com>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    Link: https://lore.kernel.org/r/20200604123301.3905837-1-yukuai3@huawei.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5eeb250f9358b9bbd8731d37da705968acb9f40
Author: Lu Wei <luwei32@huawei.com>
Date:   Fri Jul 10 17:30:18 2020 +0800

    platform/x86: intel-vbtn: Fix return value check in check_acpi_dev()
    
    [ Upstream commit 64dd4a5a7d214a07e3d9f40227ec30ac8ba8796e ]
    
    In the function check_acpi_dev(), if it fails to create
    platform device, the return value is ERR_PTR() or NULL.
    Thus it must use IS_ERR_OR_NULL() to check return value.
    
    Fixes: 332e081225fc ("intel-vbtn: new driver for Intel Virtual Button")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Lu Wei <luwei32@huawei.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 502552b20c80f20ccb48afeb908941b844ff0339
Author: Lu Wei <luwei32@huawei.com>
Date:   Fri Jul 10 17:30:17 2020 +0800

    platform/x86: intel-hid: Fix return value check in check_acpi_dev()
    
    [ Upstream commit 71fbe886ce6dd0be17f20aded9c63fe58edd2806 ]
    
    In the function check_acpi_dev(), if it fails to create
    platform device, the return value is ERR_PTR() or NULL.
    Thus it must use IS_ERR_OR_NULL() to check return value.
    
    Fixes: ecc83e52b28c ("intel-hid: new hid event driver for hotkeys")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Lu Wei <luwei32@huawei.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7cb82d2ec29a8e678e6b1f38e099ed88305c5f3a
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sun May 31 09:12:13 2020 +1000

    m68k: mac: Fix IOP status/control register writes
    
    [ Upstream commit 931fc82a6aaf4e2e4a5490addaa6a090d78c24a7 ]
    
    When writing values to the IOP status/control register make sure those
    values do not have any extraneous bits that will clear interrupt flags.
    
    To place the SCC IOP into bypass mode would be desirable but this is not
    achieved by writing IOP_DMAINACTIVE | IOP_RUN | IOP_AUTOINC | IOP_BYPASS
    to the control register. Drop this ineffective register write.
    
    Remove the flawed and unused iop_bypass() function. Make use of the
    unused iop_stop() function.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/09bcb7359a1719a18b551ee515da3c4c3cf709e6.1590880333.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3565f999e2a03fe6ea157bc8cb59f5e8f47472a
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sun May 31 09:12:13 2020 +1000

    m68k: mac: Don't send IOP message until channel is idle
    
    [ Upstream commit aeb445bf2194d83e12e85bf5c65baaf1f093bd8f ]
    
    In the following sequence of calls, iop_do_send() gets called when the
    "send" channel is not in the IOP_MSG_IDLE state:
    
            iop_ism_irq()
                    iop_handle_send()
                            (msg->handler)()
                                    iop_send_message()
                            iop_do_send()
    
    Avoid this by testing the channel state before calling iop_do_send().
    
    When sending, and iop_send_queue is empty, call iop_do_send() because
    the channel is idle. If iop_send_queue is not empty, iop_do_send() will
    get called later by iop_handle_send().
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Tested-by: Stan Johnson <userm57@yahoo.com>
    Cc: Joshua Thompson <funaho@jurai.org>
    Link: https://lore.kernel.org/r/6d667c39e53865661fa5a48f16829d18ed8abe54.1590880333.git.fthain@telegraphics.com.au
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ebff3b40e78ecf3ae47479c38be4c401fcdea7d
Author: Alim Akhtar <alim.akhtar@samsung.com>
Date:   Sun Jul 5 12:39:17 2020 +0530

    arm64: dts: exynos: Fix silent hang after boot on Espresso
    
    [ Upstream commit b072714bfc0e42c984b8fd6e069f3ca17de8137a ]
    
    Once regulators are disabled after kernel boot, on Espresso board silent
    hang observed because of LDO7 being disabled.  LDO7 actually provide
    power to CPU cores and non-cpu blocks circuitries.  Keep this regulator
    always-on to fix this hang.
    
    Fixes: 9589f7721e16 ("arm64: dts: Add S2MPS15 PMIC node on exynos7-espresso")
    Signed-off-by: Alim Akhtar <alim.akhtar@samsung.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7f81e4b70132f1f69e19025abf921a17ea3dc29f
Author: Stephan Gerhold <stephan@gerhold.net>
Date:   Fri Jun 5 20:59:14 2020 +0200

    arm64: dts: qcom: msm8916: Replace invalid bias-pull-none property
    
    [ Upstream commit 1b6a1a162defe649c5599d661b58ac64bb6f31b6 ]
    
    msm8916-pins.dtsi specifies "bias-pull-none" for most of the audio
    pin configurations. This was likely copied from the qcom kernel fork
    where the same property was used for these audio pins.
    
    However, "bias-pull-none" actually does not exist at all - not in
    mainline and not in downstream. I can only guess that the original
    intention was to configure "no pull", i.e. bias-disable.
    
    Change it to that instead.
    
    Fixes: 143bb9ad85b7 ("arm64: dts: qcom: add audio pinctrls")
    Cc: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Signed-off-by: Stephan Gerhold <stephan@gerhold.net>
    Link: https://lore.kernel.org/r/20200605185916.318494-2-stephan@gerhold.net
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 807ece5e54f41953de90e6cdba4d405754afd5a8
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Thu May 28 15:22:37 2020 -0500

    EDAC: Fix reference count leaks
    
    [ Upstream commit 17ed808ad243192fb923e4e653c1338d3ba06207 ]
    
    When kobject_init_and_add() returns an error, it should be handled
    because kobject_init_and_add() takes a reference even when it fails. If
    this function returns an error, kobject_put() must be called to properly
    clean up the memory associated with the object.
    
    Therefore, replace calling kfree() and call kobject_put() and add a
    missing kobject_put() in the edac_device_register_sysfs_main_kobj()
    error path.
    
     [ bp: Massage and merge into a single patch. ]
    
    Fixes: b2ed215a3338 ("Kobject: change drivers/edac to use kobject_init_and_add")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20200528202238.18078-1-wu000273@umn.edu
    Link: https://lkml.kernel.org/r/20200528203526.20908-1-wu000273@umn.edu
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bb238ac47bf678f423199a93ab1d9b7f2ecba02
Author: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
Date:   Wed Jun 3 15:28:36 2020 +0200

    arm64: dts: rockchip: fix rk3399-puma gmac reset gpio
    
    [ Upstream commit 8a445086f8af0b7b9bd8d1901d6f306bb154f70d ]
    
    The puma gmac node currently uses opposite active-values for the
    gmac phy reset pin. The gpio-declaration uses active-high while the
    separate snps,reset-active-low property marks the pin as active low.
    
    While on the kernel side this works ok, other DT users may get
    confused - as seen with uboot right now.
    
    So bring this in line and make both properties match, similar to the
    other Rockchip board.
    
    Fixes: 2c66fc34e945 ("arm64: dts: rockchip: add RK3399-Q7 (Puma) SoM")
    Signed-off-by: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
    Link: https://lore.kernel.org/r/20200603132836.362519-1-heiko@sntech.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0059f56130df45d81bedc4e3d6f59e1bbf4b5e1
Author: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
Date:   Thu Jun 4 11:12:39 2020 +0200

    arm64: dts: rockchip: fix rk3399-puma vcc5v0-host gpio
    
    [ Upstream commit 7a7184f6cfa9279f1a1c10a1845d247d7fad54ff ]
    
    The puma vcc5v0_host regulator node currently uses opposite active-values
    for the enable pin. The gpio-declaration uses active-high while the
    separate enable-active-low property marks the pin as active low.
    
    While on the kernel side this works ok, other DT users may get
    confused - as seen with uboot right now.
    
    So bring this in line and make both properties match, similar to the
    gmac fix.
    
    Fixes: 2c66fc34e945 ("arm64: dts: rockchip: add RK3399-Q7 (Puma) SoM")
    Signed-off-by: Heiko Stuebner <heiko.stuebner@theobroma-systems.com>
    Link: https://lore.kernel.org/r/20200604091239.424318-1-heiko@sntech.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3332641e0bfd68b8837294918bd89fefefc3b67a
Author: Peng Liu <iwtbavbm@gmail.com>
Date:   Tue Jun 9 23:09:36 2020 +0800

    sched: correct SD_flags returned by tl->sd_flags()
    
    [ Upstream commit 9b1b234bb86bcdcdb142e900d39b599185465dbb ]
    
    During sched domain init, we check whether non-topological SD_flags are
    returned by tl->sd_flags(), if found, fire a waning and correct the
    violation, but the code failed to correct the violation. Correct this.
    
    Fixes: 143e1e28cb40 ("sched: Rework sched_domain topology definition")
    Signed-off-by: Peng Liu <iwtbavbm@gmail.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Link: https://lkml.kernel.org/r/20200609150936.GA13060@iZj6chx1xj0e0buvshuecpZ
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dce9c7014ecbf9bf96e11bf07a5f073ea5a4545b
Author: Zhenzhong Duan <zhenzhong.duan@gmail.com>
Date:   Thu Jun 11 10:32:38 2020 +0800

    x86/mce/inject: Fix a wrong assignment of i_mce.status
    
    [ Upstream commit 5d7f7d1d5e01c22894dee7c9c9266500478dca99 ]
    
    The original code is a nop as i_mce.status is or'ed with part of itself,
    fix it.
    
    Fixes: a1300e505297 ("x86/ras/mce_amd_inj: Trigger deferred and thresholding errors interrupts")
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Link: https://lkml.kernel.org/r/20200611023238.3830-1-zhenzhong.duan@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6423fcebadc5138b8a3c38b43176202609f64daa
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Thu Aug 13 20:29:16 2020 +0000

    cgroup: add missing skcd->no_refcnt check in cgroup_sk_clone()
    
    Add skcd->no_refcnt check which is missed when backporting
    ad0f75e5f57c ("cgroup: fix cgroup_sk_alloc() for sk_clone_lock()").
    
    This patch is needed in stable-4.9, stable-4.14 and stable-4.19.
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1df90a59df33e3c0c8299c377536a9c5509b083d
Author: Grant Likely <grant.likely@secretlab.ca>
Date:   Fri Jul 10 16:19:39 2020 +0100

    HID: input: Fix devices that return multiple bytes in battery report
    
    commit 4f57cace81438cc873a96f9f13f08298815c9b51 upstream.
    
    Some devices, particularly the 3DConnexion Spacemouse wireless 3D
    controllers, return more than just the battery capacity in the battery
    report. The Spacemouse devices return an additional byte with a device
    specific field. However, hidinput_query_battery_capacity() only
    requests a 2 byte transfer.
    
    When a spacemouse is connected via USB (direct wire, no wireless dongle)
    and it returns a 3 byte report instead of the assumed 2 byte battery
    report the larger transfer confuses and frightens the USB subsystem
    which chooses to ignore the transfer. Then after 2 seconds assume the
    device has stopped responding and reset it. This can be reproduced
    easily by using a wired connection with a wireless spacemouse. The
    Spacemouse will enter a loop of resetting every 2 seconds which can be
    observed in dmesg.
    
    This patch solves the problem by increasing the transfer request to 4
    bytes instead of 2. The fix isn't particularly elegant, but it is simple
    and safe to backport to stable kernels. A further patch will follow to
    more elegantly handle battery reports that contain additional data.
    
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
    Cc: Darren Hart <darren@dvhart.com>
    Cc: Jiri Kosina <jikos@kernel.org>
    Cc: Benjamin Tissoires <benjamin.tissoires@redhat.com>
    Cc: stable@vger.kernel.org
    Tested-by: Darren Hart <dvhart@infradead.org>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8f00747c6ac64b87a3a623fbb61b80ed193efc6
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Thu Jul 30 15:45:54 2020 -0700

    tracepoint: Mark __tracepoint_string's __used
    
    commit f3751ad0116fb6881f2c3c957d66a9327f69cefb upstream.
    
    __tracepoint_string's have their string data stored in .rodata, and an
    address to that data stored in the "__tracepoint_str" section. Functions
    that refer to those strings refer to the symbol of the address. Compiler
    optimization can replace those address references with references
    directly to the string data. If the address doesn't appear to have other
    uses, then it appears dead to the compiler and is removed. This can
    break the /tracing/printk_formats sysfs node which iterates the
    addresses stored in the "__tracepoint_str" section.
    
    Like other strings stored in custom sections in this header, mark these
    __used to inform the compiler that there are other non-obvious users of
    the address, so they should still be emitted.
    
    Link: https://lkml.kernel.org/r/20200730224555.2142154-2-ndesaulniers@google.com
    
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Miguel Ojeda <miguel.ojeda.sandonis@gmail.com>
    Cc: stable@vger.kernel.org
    Fixes: 102c9323c35a8 ("tracing: Add __tracepoint_string() to export string pointers")
    Reported-by: Tim Murray <timmurray@google.com>
    Reported-by: Simon MacMullen <simonmacm@google.com>
    Suggested-by: Greg Hackmann <ghackmann@google.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e45aa04cdb72dd2dce5282c22bcb6593536481b5
Author: Eric Biggers <ebiggers@google.com>
Date:   Wed Jul 8 13:15:20 2020 -0700

    Smack: fix use-after-free in smk_write_relabel_self()
    
    commit beb4ee6770a89646659e6a2178538d2b13e2654e upstream.
    
    smk_write_relabel_self() frees memory from the task's credentials with
    no locking, which can easily cause a use-after-free because multiple
    tasks can share the same credentials structure.
    
    Fix this by using prepare_creds() and commit_creds() to correctly modify
    the task's credentials.
    
    Reproducer for "BUG: KASAN: use-after-free in smk_write_relabel_self":
    
            #include <fcntl.h>
            #include <pthread.h>
            #include <unistd.h>
    
            static void *thrproc(void *arg)
            {
                    int fd = open("/sys/fs/smackfs/relabel-self", O_WRONLY);
                    for (;;) write(fd, "foo", 3);
            }
    
            int main()
            {
                    pthread_t t;
                    pthread_create(&t, NULL, thrproc, NULL);
                    thrproc(NULL);
            }
    
    Reported-by: syzbot+e6416dabb497a650da40@syzkaller.appspotmail.com
    Fixes: 38416e53936e ("Smack: limited capability for changing process label")
    Cc: <stable@vger.kernel.org> # v4.4+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Casey Schaufler <casey@schaufler-ca.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f77a1b248d27611cdb20a997ddea6ff7ca3b81b
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jul 29 00:03:56 2020 +0100

    rxrpc: Fix race between recvmsg and sendmsg on immediate call failure
    
    [ Upstream commit 65550098c1c4db528400c73acf3e46bfa78d9264 ]
    
    There's a race between rxrpc_sendmsg setting up a call, but then failing to
    send anything on it due to an error, and recvmsg() seeing the call
    completion occur and trying to return the state to the user.
    
    An assertion fails in rxrpc_recvmsg() because the call has already been
    released from the socket and is about to be released again as recvmsg deals
    with it.  (The recvmsg_q queue on the socket holds a ref, so there's no
    problem with use-after-free.)
    
    We also have to be careful not to end up reporting an error twice, in such
    a way that both returns indicate to userspace that the user ID supplied
    with the call is no longer in use - which could cause the client to
    malfunction if it recycles the user ID fast enough.
    
    Fix this by the following means:
    
     (1) When sendmsg() creates a call after the point that the call has been
         successfully added to the socket, don't return any errors through
         sendmsg(), but rather complete the call and let recvmsg() retrieve
         them.  Make sendmsg() return 0 at this point.  Further calls to
         sendmsg() for that call will fail with ESHUTDOWN.
    
         Note that at this point, we haven't send any packets yet, so the
         server doesn't yet know about the call.
    
     (2) If sendmsg() returns an error when it was expected to create a new
         call, it means that the user ID wasn't used.
    
     (3) Mark the call disconnected before marking it completed to prevent an
         oops in rxrpc_release_call().
    
     (4) recvmsg() will then retrieve the error and set MSG_EOR to indicate
         that the user ID is no longer known by the kernel.
    
    An oops like the following is produced:
    
            kernel BUG at net/rxrpc/recvmsg.c:605!
            ...
            RIP: 0010:rxrpc_recvmsg+0x256/0x5ae
            ...
            Call Trace:
             ? __init_waitqueue_head+0x2f/0x2f
             ____sys_recvmsg+0x8a/0x148
             ? import_iovec+0x69/0x9c
             ? copy_msghdr_from_user+0x5c/0x86
             ___sys_recvmsg+0x72/0xaa
             ? __fget_files+0x22/0x57
             ? __fget_light+0x46/0x51
             ? fdget+0x9/0x1b
             do_recvmmsg+0x15e/0x232
             ? _raw_spin_unlock+0xa/0xb
             ? vtime_delta+0xf/0x25
             __x64_sys_recvmmsg+0x2c/0x2f
             do_syscall_64+0x4c/0x78
             entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 357f5ef64628 ("rxrpc: Call rxrpc_release_call() on error in rxrpc_new_client_call()")
    Reported-by: syzbot+b54969381df354936d96@syzkaller.appspotmail.com
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Marc Dionne <marc.dionne@auristor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21b17fa28bdc2a357ca8dc767c1444edf37a95ca
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Mon Jul 27 23:42:17 2020 -0700

    usb: hso: check for return value in hso_serial_common_create()
    
    [ Upstream commit e911e99a0770f760377c263bc7bac1b1593c6147 ]
    
    in case of an error tty_register_device_attr() returns ERR_PTR(),
    add IS_ERR() check
    
    Reported-and-tested-by: syzbot+67b2bd0e34f952d0321e@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=67b2bd0e34f952d0321e
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a74192c1c2d83f025761a74b0eb1f328084d38b3
Author: Willem de Bruijn <willemb@google.com>
Date:   Wed Aug 5 04:40:45 2020 -0400

    selftests/net: relax cpu affinity requirement in msg_zerocopy test
    
    [ Upstream commit 16f6458f2478b55e2b628797bc81a4455045c74e ]
    
    The msg_zerocopy test pins the sender and receiver threads to separate
    cores to reduce variance between runs.
    
    But it hardcodes the cores and skips core 0, so it fails on machines
    with the selected cores offline, or simply fewer cores.
    
    The test mainly gives code coverage in automated runs. The throughput
    of zerocopy ('-z') and non-zerocopy runs is logged for manual
    inspection.
    
    Continue even when sched_setaffinity fails. Just log to warn anyone
    interpreting the data.
    
    Fixes: 07b65c5b31ce ("test: add msg_zerocopy test")
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Acked-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1db3b9c10adcc616fa0e8619b19ddd3693981048
Author: Hangbin Liu <liuhangbin@gmail.com>
Date:   Wed Aug 5 10:41:31 2020 +0800

    Revert "vxlan: fix tos value before xmit"
    
    [ Upstream commit a0dced17ad9dc08b1b25e0065b54c97a318e6e8b ]
    
    This reverts commit 71130f29979c7c7956b040673e6b9d5643003176.
    
    In commit 71130f29979c ("vxlan: fix tos value before xmit") we want to
    make sure the tos value are filtered by RT_TOS() based on RFC1349.
    
           0     1     2     3     4     5     6     7
        +-----+-----+-----+-----+-----+-----+-----+-----+
        |   PRECEDENCE    |          TOS          | MBZ |
        +-----+-----+-----+-----+-----+-----+-----+-----+
    
    But RFC1349 has been obsoleted by RFC2474. The new DSCP field defined like
    
           0     1     2     3     4     5     6     7
        +-----+-----+-----+-----+-----+-----+-----+-----+
        |          DS FIELD, DSCP           | ECN FIELD |
        +-----+-----+-----+-----+-----+-----+-----+-----+
    
    So with
    
    IPTOS_TOS_MASK          0x1E
    RT_TOS(tos)             ((tos)&IPTOS_TOS_MASK)
    
    the first 3 bits DSCP info will get lost.
    
    To take all the DSCP info in xmit, we should revert the patch and just push
    all tos bits to ip_tunnel_ecn_encap(), which will handling ECN field later.
    
    Fixes: 71130f29979c ("vxlan: fix tos value before xmit")
    Signed-off-by: Hangbin Liu <liuhangbin@gmail.com>
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 476b64176a3109742b958f385494fcc1ed56bbf9
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Fri Jul 31 00:48:38 2020 -0400

    openvswitch: Prevent kernel-infoleak in ovs_ct_put_key()
    
    [ Upstream commit 9aba6c5b49254d5bee927d81593ed4429e91d4ae ]
    
    ovs_ct_put_key() is potentially copying uninitialized kernel stack memory
    into socket buffers, since the compiler may leave a 3-byte hole at the end
    of `struct ovs_key_ct_tuple_ipv4` and `struct ovs_key_ct_tuple_ipv6`. Fix
    it by initializing `orig` with memset().
    
    Fixes: 9dd7f8907c37 ("openvswitch: Add original direction conntrack tuple to sw_flow_key.")
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3349b4eedeeef76b5f88ccf052f041f790adf1f3
Author: Lorenzo Bianconi <lorenzo@kernel.org>
Date:   Fri Jul 31 20:12:05 2020 +0200

    net: gre: recompute gre csum for sctp over gre tunnels
    
    [ Upstream commit 622e32b7d4a6492cf5c1f759ef833f817418f7b3 ]
    
    The GRE tunnel can be used to transport traffic that does not rely on a
    Internet checksum (e.g. SCTP). The issue can be triggered creating a GRE
    or GRETAP tunnel and transmitting SCTP traffic ontop of it where CRC
    offload has been disabled. In order to fix the issue we need to
    recompute the GRE csum in gre_gso_segment() not relying on the inner
    checksum.
    The issue is still present when we have the CRC offload enabled.
    In this case we need to disable the CRC offload if we require GRE
    checksum since otherwise skb_checksum() will report a wrong value.
    
    Fixes: 90017accff61 ("sctp: Add GSO support")
    Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
    Reviewed-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c9800a2257c0e7c98c3f7ac8fb71c831512c013
Author: Stephen Hemminger <stephen@networkplumber.org>
Date:   Tue Aug 4 09:54:15 2020 -0700

    hv_netvsc: do not use VF device if link is down
    
    [ Upstream commit 7c9864bbccc23e1812ac82966555d68c13ea4006 ]
    
    If the accelerated networking SRIOV VF device has lost carrier
    use the synthetic network device which is available as backup
    path. This is a rare case since if VF link goes down, normally
    the VMBus device will also loose external connectivity as well.
    But if the communication is between two VM's on the same host
    the VMBus device will still work.
    
    Reported-by: "Shah, Ashish N" <ashish.n.shah@intel.com>
    Fixes: 0c195567a8f6 ("netvsc: transparent VF management")
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dab7872f39b2e725543de1da0de617080d5c2dde
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 263a6bcee0d1e6191f494c2ca8ee4a62c9f0078d
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 29 11:34:36 2020 +0300

    vxlan: Ensure FDB dump is performed under RCU
    
    [ Upstream commit b5141915b5aec3b29a63db869229e3741ebce258 ]
    
    The commit cited below removed the RCU read-side critical section from
    rtnl_fdb_dump() which means that the ndo_fdb_dump() callback is invoked
    without RCU protection.
    
    This results in the following warning [1] in the VXLAN driver, which
    relied on the callback being invoked from an RCU read-side critical
    section.
    
    Fix this by calling rcu_read_lock() in the VXLAN driver, as already done
    in the bridge driver.
    
    [1]
    WARNING: suspicious RCU usage
    5.8.0-rc4-custom-01521-g481007553ce6 #29 Not tainted
    -----------------------------
    drivers/net/vxlan.c:1379 RCU-list traversed in non-reader section!!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    1 lock held by bridge/166:
     #0: ffffffff85a27850 (rtnl_mutex){+.+.}-{3:3}, at: netlink_dump+0xea/0x1090
    
    stack backtrace:
    CPU: 1 PID: 166 Comm: bridge Not tainted 5.8.0-rc4-custom-01521-g481007553ce6 #29
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-2.fc32 04/01/2014
    Call Trace:
     dump_stack+0x100/0x184
     lockdep_rcu_suspicious+0x153/0x15d
     vxlan_fdb_dump+0x51e/0x6d0
     rtnl_fdb_dump+0x4dc/0xad0
     netlink_dump+0x540/0x1090
     __netlink_dump_start+0x695/0x950
     rtnetlink_rcv_msg+0x802/0xbd0
     netlink_rcv_skb+0x17a/0x480
     rtnetlink_rcv+0x22/0x30
     netlink_unicast+0x5ae/0x890
     netlink_sendmsg+0x98a/0xf40
     __sys_sendto+0x279/0x3b0
     __x64_sys_sendto+0xe6/0x1a0
     do_syscall_64+0x54/0xa0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7fe14fa2ade0
    Code: Bad RIP value.
    RSP: 002b:00007fff75bb5b88 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00005614b1ba0020 RCX: 00007fe14fa2ade0
    RDX: 000000000000011c RSI: 00007fff75bb5b90 RDI: 0000000000000003
    RBP: 00007fff75bb5b90 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00005614b1b89160
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Fixes: 5e6d24358799 ("bridge: netlink dump interface at par with brctl")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d0de705caaaa59e4ba1d43bd2e7242ede85235f
Author: Landen Chao <landen.chao@mediatek.com>
Date:   Wed Jul 29 10:15:17 2020 +0200

    net: ethernet: mtk_eth_soc: fix MTU warnings
    
    [ Upstream commit 555a893303872e044fb86f0a5834ce78d41ad2e2 ]
    
    in recent kernel versions there are warnings about incorrect MTU size
    like these:
    
    eth0: mtu greater than device maximum
    mtk_soc_eth 1b100000.ethernet eth0: error -22 setting MTU to include DSA overhead
    
    Fixes: bfcb813203e6 ("net: dsa: configure the MTU for switch ports")
    Fixes: 72579e14a1d3 ("net: dsa: don't fail to probe if we couldn't set the MTU")
    Fixes: 7a4c53bee332 ("net: report invalid mtu value via netlink extack")
    Signed-off-by: Landen Chao <landen.chao@mediatek.com>
    Signed-off-by: Frank Wunderlich <frank-w@public-files.de>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd9ad68c4427d92bc740943777286ff86f60b771
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Jul 25 15:40:53 2020 -0700

    ipv6: fix memory leaks on IPV6_ADDRFORM path
    
    [ Upstream commit 8c0de6e96c9794cb523a516c465991a70245da1c ]
    
    IPV6_ADDRFORM causes resource leaks when converting an IPv6 socket
    to IPv4, particularly struct ipv6_ac_socklist. Similar to
    struct ipv6_mc_socklist, we should just close it on this path.
    
    This bug can be easily reproduced with the following C program:
    
      #include <stdio.h>
      #include <string.h>
      #include <sys/types.h>
      #include <sys/socket.h>
      #include <arpa/inet.h>
    
      int main()
      {
        int s, value;
        struct sockaddr_in6 addr;
        struct ipv6_mreq m6;
    
        s = socket(AF_INET6, SOCK_DGRAM, 0);
        addr.sin6_family = AF_INET6;
        addr.sin6_port = htons(5000);
        inet_pton(AF_INET6, "::ffff:192.168.122.194", &addr.sin6_addr);
        connect(s, (struct sockaddr *)&addr, sizeof(addr));
    
        inet_pton(AF_INET6, "fe80::AAAA", &m6.ipv6mr_multiaddr);
        m6.ipv6mr_interface = 5;
        setsockopt(s, SOL_IPV6, IPV6_JOIN_ANYCAST, &m6, sizeof(m6));
    
        value = AF_INET;
        setsockopt(s, SOL_IPV6, IPV6_ADDRFORM, &value, sizeof(value));
    
        close(s);
        return 0;
      }
    
    Reported-by: ch3332xr@gmail.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b8da9d3cb6835a0bb22fe71d47abaa871260c53d
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 29 11:37:13 2020 +0300

    ipv4: Silence suspicious RCU usage warning
    
    [ Upstream commit 83f3522860f702748143e022f1a546547314c715 ]
    
    fib_trie_unmerge() is called with RTNL held, but not from an RCU
    read-side critical section. This leads to the following warning [1] when
    the FIB alias list in a leaf is traversed with
    hlist_for_each_entry_rcu().
    
    Since the function is always called with RTNL held and since
    modification of the list is protected by RTNL, simply use
    hlist_for_each_entry() and silence the warning.
    
    [1]
    WARNING: suspicious RCU usage
    5.8.0-rc4-custom-01520-gc1f937f3f83b #30 Not tainted
    -----------------------------
    net/ipv4/fib_trie.c:1867 RCU-list traversed in non-reader section!!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    1 lock held by ip/164:
     #0: ffffffff85a27850 (rtnl_mutex){+.+.}-{3:3}, at: rtnetlink_rcv_msg+0x49a/0xbd0
    
    stack backtrace:
    CPU: 0 PID: 164 Comm: ip Not tainted 5.8.0-rc4-custom-01520-gc1f937f3f83b #30
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.13.0-2.fc32 04/01/2014
    Call Trace:
     dump_stack+0x100/0x184
     lockdep_rcu_suspicious+0x153/0x15d
     fib_trie_unmerge+0x608/0xdb0
     fib_unmerge+0x44/0x360
     fib4_rule_configure+0xc8/0xad0
     fib_nl_newrule+0x37a/0x1dd0
     rtnetlink_rcv_msg+0x4f7/0xbd0
     netlink_rcv_skb+0x17a/0x480
     rtnetlink_rcv+0x22/0x30
     netlink_unicast+0x5ae/0x890
     netlink_sendmsg+0x98a/0xf40
     ____sys_sendmsg+0x879/0xa00
     ___sys_sendmsg+0x122/0x190
     __sys_sendmsg+0x103/0x1d0
     __x64_sys_sendmsg+0x7d/0xb0
     do_syscall_64+0x54/0xa0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x7fc80a234e97
    Code: Bad RIP value.
    RSP: 002b:00007ffef8b66798 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007fc80a234e97
    RDX: 0000000000000000 RSI: 00007ffef8b66800 RDI: 0000000000000003
    RBP: 000000005f141b1c R08: 0000000000000001 R09: 0000000000000000
    R10: 00007fc80a2a8ac0 R11: 0000000000000246 R12: 0000000000000001
    R13: 0000000000000000 R14: 00007ffef8b67008 R15: 0000556fccb10020
    
    Fixes: 0ddcf43d5d4a ("ipv4: FIB Local/MAIN table collapse")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f197f51ad442c06eaa934d65e220e3bfcc77bb6
Author: Frank van der Linden <fllinden@amazon.com>
Date:   Tue Jun 23 22:39:18 2020 +0000

    xattr: break delegations in {set,remove}xattr
    
    commit 08b5d5014a27e717826999ad20e394a8811aae92 upstream.
    
    set/removexattr on an exported filesystem should break NFS delegations.
    This is true in general, but also for the upcoming support for
    RFC 8726 (NFSv4 extended attribute support). Make sure that they do.
    
    Additionally, they need to grow a _locked variant, since callers might
    call this with i_rwsem held (like the NFS server code).
    
    Cc: stable@vger.kernel.org # v4.9+
    Cc: linux-fsdevel@vger.kernel.org
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2eb51c88a2fe0bb4a37a94a76b61e010e5813486
Author: Dexuan Cui <decui@microsoft.com>
Date:   Sun Jan 19 15:29:22 2020 -0800

    Drivers: hv: vmbus: Ignore CHANNELMSG_TL_CONNECT_RESULT(23)
    
    [ Upstream commit ddc9d357b991838c2d975e8d7e4e9db26f37a7ff ]
    
    When a Linux hv_sock app tries to connect to a Service GUID on which no
    host app is listening, a recent host (RS3+) sends a
    CHANNELMSG_TL_CONNECT_RESULT (23) message to Linux and this triggers such
    a warning:
    
    unknown msgtype=23
    WARNING: CPU: 2 PID: 0 at drivers/hv/vmbus_drv.c:1031 vmbus_on_msg_dpc
    
    Actually Linux can safely ignore the message because the Linux app's
    connect() will time out in 2 seconds: see VSOCK_DEFAULT_CONNECT_TIMEOUT
    and vsock_stream_connect(). We don't bother to make use of the message
    because: 1) it's only supported on recent hosts; 2) a non-trivial effort
    is required to use the message in Linux, but the benefit is small.
    
    So, let's not see the warning by silently ignoring the message.
    
    Signed-off-by: Dexuan Cui <decui@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b300d20cef2b694726d9873857e818c25cc3e888
Author: Philippe Duplessis-Guindon <pduplessis@efficios.com>
Date:   Thu Jul 30 11:02:36 2020 -0400

    tools lib traceevent: Fix memory leak in process_dynamic_array_len
    
    [ Upstream commit e24c6447ccb7b1a01f9bf0aec94939e6450c0b4d ]
    
    I compiled with AddressSanitizer and I had these memory leaks while I
    was using the tep_parse_format function:
    
        Direct leak of 28 byte(s) in 4 object(s) allocated from:
            #0 0x7fb07db49ffe in __interceptor_realloc (/lib/x86_64-linux-gnu/libasan.so.5+0x10dffe)
            #1 0x7fb07a724228 in extend_token /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:985
            #2 0x7fb07a724c21 in __read_token /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:1140
            #3 0x7fb07a724f78 in read_token /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:1206
            #4 0x7fb07a725191 in __read_expect_type /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:1291
            #5 0x7fb07a7251df in read_expect_type /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:1299
            #6 0x7fb07a72e6c8 in process_dynamic_array_len /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:2849
            #7 0x7fb07a7304b8 in process_function /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:3161
            #8 0x7fb07a730900 in process_arg_token /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:3207
            #9 0x7fb07a727c0b in process_arg /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:1786
            #10 0x7fb07a731080 in event_read_print_args /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:3285
            #11 0x7fb07a731722 in event_read_print /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:3369
            #12 0x7fb07a740054 in __tep_parse_format /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:6335
            #13 0x7fb07a74047a in __parse_event /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:6389
            #14 0x7fb07a740536 in tep_parse_format /home/pduplessis/repo/linux/tools/lib/traceevent/event-parse.c:6431
            #15 0x7fb07a785acf in parse_event ../../../src/fs-src/fs.c:251
            #16 0x7fb07a785ccd in parse_systems ../../../src/fs-src/fs.c:284
            #17 0x7fb07a786fb3 in read_metadata ../../../src/fs-src/fs.c:593
            #18 0x7fb07a78760e in ftrace_fs_source_init ../../../src/fs-src/fs.c:727
            #19 0x7fb07d90c19c in add_component_with_init_method_data ../../../../src/lib/graph/graph.c:1048
            #20 0x7fb07d90c87b in add_source_component_with_initialize_method_data ../../../../src/lib/graph/graph.c:1127
            #21 0x7fb07d90c92a in bt_graph_add_source_component ../../../../src/lib/graph/graph.c:1152
            #22 0x55db11aa632e in cmd_run_ctx_create_components_from_config_components ../../../src/cli/babeltrace2.c:2252
            #23 0x55db11aa6fda in cmd_run_ctx_create_components ../../../src/cli/babeltrace2.c:2347
            #24 0x55db11aa780c in cmd_run ../../../src/cli/babeltrace2.c:2461
            #25 0x55db11aa8a7d in main ../../../src/cli/babeltrace2.c:2673
            #26 0x7fb07d5460b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)
    
    The token variable in the process_dynamic_array_len function is
    allocated in the read_expect_type function, but is not freed before
    calling the read_token function.
    
    Free the token variable before calling read_token in order to plug the
    leak.
    
    Signed-off-by: Philippe Duplessis-Guindon <pduplessis@efficios.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Link: https://lore.kernel.org/linux-trace-devel/20200730150236.5392-1-pduplessis@efficios.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fcf436d941d42c496c23060d309980652a70159
Author: Xin Xiong <xiongx18@fudan.edu.cn>
Date:   Wed Jul 29 21:06:59 2020 +0800

    atm: fix atm_dev refcnt leaks in atmtcp_remove_persistent
    
    [ Upstream commit 51875dad43b44241b46a569493f1e4bfa0386d86 ]
    
    atmtcp_remove_persistent() invokes atm_dev_lookup(), which returns a
    reference of atm_dev with increased refcount or NULL if fails.
    
    The refcount leaks issues occur in two error handling paths. If
    dev_data->persist is zero or PRIV(dev)->vcc isn't NULL, the function
    returns 0 without decreasing the refcount kept by a local variable,
    resulting in refcount leaks.
    
    Fix the issue by adding atm_dev_put() before returning 0 both when
    dev_data->persist is zero or PRIV(dev)->vcc isn't NULL.
    
    Signed-off-by: Xin Xiong <xiongx18@fudan.edu.cn>
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9107822bc356b6cb0e4d6bc395d8a2a15c931ceb
Author: Francesco Ruggeri <fruggeri@arista.com>
Date:   Thu Jul 2 15:39:06 2020 -0700

    igb: reinit_locked() should be called with rtnl_lock
    
    [ Upstream commit 024a8168b749db7a4aa40a5fbdfa04bf7e77c1c0 ]
    
    We observed two panics involving races with igb_reset_task.
    The first panic is caused by this race condition:
    
            kworker                 reboot -f
    
            igb_reset_task
            igb_reinit_locked
            igb_down
            napi_synchronize
                                    __igb_shutdown
                                    igb_clear_interrupt_scheme
                                    igb_free_q_vectors
                                    igb_free_q_vector
                                    adapter->q_vector[v_idx] = NULL;
            napi_disable
            Panics trying to access
            adapter->q_vector[v_idx].napi_state
    
    The second panic (a divide error) is caused by this race:
    
    kworker         reboot -f       tx packet
    
    igb_reset_task
                    __igb_shutdown
                    rtnl_lock()
                    ...
                    igb_clear_interrupt_scheme
                    igb_free_q_vectors
                    adapter->num_tx_queues = 0
                    ...
                    rtnl_unlock()
    rtnl_lock()
    igb_reinit_locked
    igb_down
    igb_up
    netif_tx_start_all_queues
                                    dev_hard_start_xmit
                                    igb_xmit_frame
                                    igb_tx_queue_mapping
                                    Panics on
                                    r_idx % adapter->num_tx_queues
    
    This commit applies to igb_reset_task the same changes that
    were applied to ixgbe in commit 2f90b8657ec9 ("ixgbe: this patch
    adds support for DCB to the kernel and ixgbe driver"),
    commit 8f4c5c9fb87a ("ixgbe: reinit_locked() should be called with
    rtnl_lock") and commit 88adce4ea8f9 ("ixgbe: fix possible race in
    reset subtask").
    
    Signed-off-by: Francesco Ruggeri <fruggeri@arista.com>
    Tested-by: Aaron Brown <aaron.f.brown@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9f4ccc55638c95a6ffc467b92ec367f044d8e1d
Author: Julian Squires <julian@cipht.net>
Date:   Mon Jul 6 17:13:53 2020 -0400

    cfg80211: check vendor command doit pointer before use
    
    [ Upstream commit 4052d3d2e8f47a15053320bbcbe365d15610437d ]
    
    In the case where a vendor command does not implement doit, and has no
    flags set, doit would not be validated and a NULL pointer dereference
    would occur, for example when invoking the vendor command via iw.
    
    I encountered this while developing new vendor commands.  Perhaps in
    practice it is advisable to always implement doit along with dumpit,
    but it seems reasonable to me to always check doit anyway, not just
    when NEED_WDEV.
    
    Signed-off-by: Julian Squires <julian@cipht.net>
    Link: https://lore.kernel.org/r/20200706211353.2366470-1-julian@cipht.net
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c51146a40c7ae93bbf65ae66fd2dc15f2f61f6e3
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sat Jul 25 21:50:53 2020 +0200

    i2c: slave: add sanity check when unregistering
    
    [ Upstream commit 8808981baf96e1b3dea1f08461e4d958aa0dbde1 ]
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dfd202a077ef256a34a741fe3b8c2c647fe5445a
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sat Jul 25 21:50:52 2020 +0200

    i2c: slave: improve sanity check when registering
    
    [ Upstream commit 1b1be3bf27b62f5abcf85c6f3214bdb9c7526685 ]
    
    Add check for ERR_PTR and simplify code while here.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Reviewed-by: Alain Volmat <alain.volmat@st.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 491da31c39ed16a53d1b387232fb18ee6b1e7112
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Fri Jul 24 17:02:48 2020 +1000

    drm/nouveau/fbcon: zero-initialise the mode_cmd2 structure
    
    [ Upstream commit 15fbc3b938534cc8eaac584a7b0c1183fc968b86 ]
    
    This is tripping up the format modifier patches.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18113133f3e99015e6239ce87db173e3705abbf9
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Fri Jul 24 17:01:39 2020 +1000

    drm/nouveau/fbcon: fix module unload when fbcon init has failed for some reason
    
    [ Upstream commit 498595abf5bd51f0ae074cec565d888778ea558f ]
    
    Stale pointer was tripping up the unload path.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8360518d7a377b4d52327f4934d7ae411937d725
Author: Christoph Hellwig <hch@lst.de>
Date:   Fri Jul 10 10:57:22 2020 +0200

    net/9p: validate fds in p9_fd_open
    
    [ Upstream commit a39c46067c845a8a2d7144836e9468b7f072343e ]
    
    p9_fd_open just fgets file descriptors passed in from userspace, but
    doesn't verify that they are valid for read or writing.  This gets
    cought down in the VFS when actually attempting a read or write, but
    a new warning added in linux-next upsets syzcaller.
    
    Fix this by just verifying the fds early on.
    
    Link: http://lkml.kernel.org/r/20200710085722.435850-1-hch@lst.de
    Reported-by: syzbot+e6f77e16ff68b2434a2c@syzkaller.appspotmail.com
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    [Dominique: amend goto as per Doug Nazar's review]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d8f87fbee153f19df8b6b452204d20cb5db9422
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jun 1 15:39:45 2020 +0200

    leds: 88pm860x: fix use-after-free on unbind
    
    commit eca21c2d8655387823d695b26e6fe78cf3975c05 upstream.
    
    Several MFD child drivers register their class devices directly under
    the parent device. This means you cannot blindly do devres conversions
    so that deregistration ends up being tied to the parent device,
    something which leads to use-after-free on driver unbind when the class
    device is released while still being registered.
    
    Fixes: 375446df95ee ("leds: 88pm860x: Use devm_led_classdev_register")
    Cc: stable <stable@vger.kernel.org>     # 4.6
    Cc: Amitoj Kaur Chawla <amitoj1606@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c3674c3902d3ef2ef6b946d3438645d40b597a1
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jun 1 15:39:47 2020 +0200

    leds: lm3533: fix use-after-free on unbind
    
    commit d584221e683bbd173738603b83a315f27d27d043 upstream.
    
    Several MFD child drivers register their class devices directly under
    the parent device. This means you cannot blindly do devres conversions
    so that deregistration ends up being tied to the parent device,
    something which leads to use-after-free on driver unbind when the class
    device is released while still being registered.
    
    Fixes: 50154e29e5cc ("leds: lm3533: Use devm_led_classdev_register")
    Cc: stable <stable@vger.kernel.org>     # 4.6
    Cc: Amitoj Kaur Chawla <amitoj1606@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aacd97eecd02434886c8995bc98f3f972b09f5ba
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jun 1 15:39:46 2020 +0200

    leds: da903x: fix use-after-free on unbind
    
    commit 6f4aa35744f69ed9b0bf5a736c9ca9b44bc1dcea upstream.
    
    Several MFD child drivers register their class devices directly under
    the parent device. This means you cannot blindly do devres conversions
    so that deregistration ends up being tied to the parent device,
    something which leads to use-after-free on driver unbind when the class
    device is released while still being registered.
    
    Fixes: eed16255d66b ("leds: da903x: Use devm_led_classdev_register")
    Cc: stable <stable@vger.kernel.org>     # 4.6
    Cc: Amitoj Kaur Chawla <amitoj1606@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 811d91cb25623e60a4faa5d2fae3fc9ec6030694
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Jun 1 15:39:49 2020 +0200

    leds: wm831x-status: fix use-after-free on unbind
    
    commit 47a459ecc800a17109d0c496a4e21e478806ee40 upstream.
    
    Several MFD child drivers register their class devices directly under
    the parent device. This means you cannot blindly do devres conversions
    so that deregistration ends up being tied to the parent device,
    something which leads to use-after-free on driver unbind when the class
    device is released while still being registered.
    
    Fixes: 8d3b6a4001ce ("leds: wm831x-status: Use devm_led_classdev_register")
    Cc: stable <stable@vger.kernel.org>     # 4.6
    Cc: Amitoj Kaur Chawla <amitoj1606@gmail.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 877f96ce1e136e25ed20a75d1b39e1e9d0a4fb37
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 16 13:53:46 2020 +0200

    mtd: properly check all write ioctls for permissions
    
    commit f7e6b19bc76471ba03725fe58e0c218a3d6266c3 upstream.
    
    When doing a "write" ioctl call, properly check that we have permissions
    to do so before copying anything from userspace or anything else so we
    can "fail fast".  This includes also covering the MEMWRITE ioctl which
    previously missed checking for this.
    
    Cc: Miquel Raynal <miquel.raynal@bootlin.com>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Vignesh Raghavendra <vigneshr@ti.com>
    Cc: stable <stable@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [rw: Fixed locking issue]
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f5c8d496a1e40f745613fce08906892da49bd19
Author: Yunhai Zhang <zhangyunhai@nsfocus.com>
Date:   Tue Jul 28 09:58:03 2020 +0800

    vgacon: Fix for missing check in scrollback handling
    
    commit ebfdfeeae8c01fcb2b3b74ffaf03876e20835d2d upstream.
    
    vgacon_scrollback_update() always leaves enbough room in the scrollback
    buffer for the next call, but if the console size changed that room
    might not actually be enough, and so we need to re-check.
    
    The check should be in the loop since vgacon_scrollback_cur->tail is
    updated in the loop and count may be more than 1 when triggered by CSI M,
    as Jiri's PoC:
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/ioctl.h>
    #include <fcntl.h>
    
    int main(int argc, char** argv)
    {
            int fd = open("/dev/tty1", O_RDWR);
            unsigned short size[3] = {25, 200, 0};
            ioctl(fd, 0x5609, size); // VT_RESIZE
    
            write(fd, "\e[1;1H", 6);
            for (int i = 0; i < 30; i++)
                    write(fd, "\e[10M", 5);
    }
    
    It leads to various crashes as vgacon_scrollback_update writes out of
    the buffer:
     BUG: unable to handle page fault for address: ffffc900001752a0
     #PF: supervisor write access in kernel mode
     #PF: error_code(0x0002) - not-present page
     RIP: 0010:mutex_unlock+0x13/0x30
    ...
     Call Trace:
      n_tty_write+0x1a0/0x4d0
      tty_write+0x1a0/0x2e0
    
    Or to KASAN reports:
    BUG: KASAN: slab-out-of-bounds in vgacon_scroll+0x57a/0x8ed
    
    This fixes CVE-2020-14331.
    
    Reported-by: 张云海 <zhangyunhai@nsfocus.com>
    Reported-by: Yang Yingliang <yangyingliang@huawei.com>
    Reported-by: Kyungtae Kim <kt0755@gmail.com>
    Fixes: 15bdab959c9b ([PATCH] vgacon: Add support for soft scrollback)
    Cc: stable@vger.kernel.org
    Cc: linux-fbdev@vger.kernel.org
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Solar Designer <solar@openwall.com>
    Cc: "Srivatsa S. Bhat" <srivatsa@csail.mit.edu>
    Cc: Anthony Liguori <aliguori@amazon.com>
    Cc: Yang Yingliang <yangyingliang@huawei.com>
    Cc: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Signed-off-by: Yunhai Zhang <zhangyunhai@nsfocus.com>
    Link: https://lore.kernel.org/r/9fb43895-ca91-9b07-ebfd-808cf854ca95@nsfocus.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4912fbc90d259835fd3a30434c1cebaefa906463
Author: Jann Horn <jannh@google.com>
Date:   Mon Jul 27 14:04:24 2020 +0200

    binder: Prevent context manager from incrementing ref 0
    
    commit 4b836a1426cb0f1ef2a6e211d7e553221594f8fc upstream.
    
    Binder is designed such that a binder_proc never has references to
    itself. If this rule is violated, memory corruption can occur when a
    process sends a transaction to itself; see e.g.
    <https://syzkaller.appspot.com/bug?extid=09e05aba06723a94d43d>.
    
    There is a remaining edgecase through which such a transaction-to-self
    can still occur from the context of a task with BINDER_SET_CONTEXT_MGR
    access:
    
     - task A opens /dev/binder twice, creating binder_proc instances P1
       and P2
     - P1 becomes context manager
     - P2 calls ACQUIRE on the magic handle 0, allocating index 0 in its
       handle table
     - P1 dies (by closing the /dev/binder fd and waiting a bit)
     - P2 becomes context manager
     - P2 calls ACQUIRE on the magic handle 0, allocating index 1 in its
       handle table
       [this triggers a warning: "binder: 1974:1974 tried to acquire
       reference to desc 0, got 1 instead"]
     - task B opens /dev/binder once, creating binder_proc instance P3
     - P3 calls P2 (via magic handle 0) with (void*)1 as argument (two-way
       transaction)
     - P2 receives the handle and uses it to call P3 (two-way transaction)
     - P3 calls P2 (via magic handle 0) (two-way transaction)
     - P2 calls P2 (via handle 1) (two-way transaction)
    
    And then, if P2 does *NOT* accept the incoming transaction work, but
    instead closes the binder fd, we get a crash.
    
    Solve it by preventing the context manager from using ACQUIRE on ref 0.
    There shouldn't be any legitimate reason for the context manager to do
    that.
    
    Additionally, print a warning if someone manages to find another way to
    trigger a transaction-to-self bug in the future.
    
    Cc: stable@vger.kernel.org
    Fixes: 457b9a6f09f0 ("Staging: android: add binder driver")
    Acked-by: Todd Kjos <tkjos@google.com>
    Signed-off-by: Jann Horn <jannh@google.com>
    Reviewed-by: Martijn Coenen <maco@android.com>
    Link: https://lore.kernel.org/r/20200727120424.1627555-1-jannh@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bd561209b726985c5607f24491417130bbc92a6
Author: Adam Ford <aford173@gmail.com>
Date:   Tue Jun 30 13:26:36 2020 -0500

    omapfb: dss: Fix max fclk divider for omap36xx
    
    commit 254503a2b186caa668a188dbbd7ab0d25149c0a5 upstream.
    
    The drm/omap driver was fixed to correct an issue where using a
    divider of 32 breaks the DSS despite the TRM stating 32 is a valid
    number.  Through experimentation, it appears that 31 works, and
    it is consistent with the value used by the drm/omap driver.
    
    This patch fixes the divider for fbdev driver instead of the drm.
    
    Fixes: f76ee892a99e ("omapfb: copy omapdss & displays for omapfb")
    Cc: <stable@vger.kernel.org> #4.5+
    Signed-off-by: Adam Ford <aford173@gmail.com>
    Reviewed-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
    Cc: Dave Airlie <airlied@gmail.com>
    Cc: Rob Clark <robdclark@gmail.com>
    [b.zolnierkie: mark patch as applicable to stable 4.5+ (was 4.9+)]
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200630182636.439015-1-aford173@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e1a7f27da282df7f52f0886ad7ef95a58e2701e
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Fri Jul 10 17:45:26 2020 -0400

    Bluetooth: Prevent out-of-bounds read in hci_inquiry_result_with_rssi_evt()
    
    commit 629b49c848ee71244203934347bd7730b0ddee8d upstream.
    
    Check `num_rsp` before using it as for-loop counter. Add `unlock` label.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 132c0d5f9cdcd496bcd2bb38664fda6343c52b8e
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Fri Jul 10 17:39:18 2020 -0400

    Bluetooth: Prevent out-of-bounds read in hci_inquiry_result_evt()
    
    commit 75bbd2ea50ba1c5d9da878a17e92eac02fe0fd3a upstream.
    
    Check `num_rsp` before using it as for-loop counter.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 586b79cab181d8806c73e010bc5f9f7da7a4861d
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Fri Jul 10 12:09:15 2020 -0400

    Bluetooth: Fix slab-out-of-bounds read in hci_extended_inquiry_result_evt()
    
    commit 51c19bf3d5cfaa66571e4b88ba2a6f6295311101 upstream.
    
    Check upon `num_rsp` is insufficient. A malformed event packet with a
    large `num_rsp` number makes hci_extended_inquiry_result_evt() go out
    of bounds. Fix it.
    
    This patch fixes the following syzbot bug:
    
        https://syzkaller.appspot.com/bug?id=4bf11aa05c4ca51ce0df86e500fce486552dc8d2
    
    Reported-by: syzbot+d8489a79b781849b9c46@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86d3976de9ba472793b538f9caec979846c34401
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Thu Jul 30 12:26:32 2020 -0700

    staging: android: ashmem: Fix lockdep warning for write operation
    
    commit 3e338d3c95c735dc3265a86016bb4c022ec7cadc upstream.
    
    syzbot report [1] describes a deadlock when write operation against an
    ashmem fd executed at the time when ashmem is shrinking its cache results
    in the following lock sequence:
    
    Possible unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(fs_reclaim);
                                    lock(&sb->s_type->i_mutex_key#13);
                                    lock(fs_reclaim);
       lock(&sb->s_type->i_mutex_key#13);
    
    kswapd takes fs_reclaim and then inode_lock while generic_perform_write
    takes inode_lock and then fs_reclaim. However ashmem does not support
    writing into backing shmem with a write syscall. The only way to change
    its content is to mmap it and operate on mapped memory. Therefore the race
    that lockdep is warning about is not valid. Resolve this by introducing a
    separate lockdep class for the backing shmem inodes.
    
    [1]: https://lkml.kernel.org/lkml/0000000000000b5f9d059aa2037f@google.com/
    
    Reported-by: syzbot+7a0d9d0b26efefe61780@syzkaller.appspotmail.com
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Cc: stable <stable@vger.kernel.org>
    Reviewed-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Link: https://lore.kernel.org/r/20200730192632.3088194-1-surenb@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 85e90b45b96bc93cf05907f1b343949ecad47105
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Aug 4 20:58:15 2020 +0200

    ALSA: seq: oss: Serialize ioctls
    
    commit 80982c7e834e5d4e325b6ce33757012ecafdf0bb upstream.
    
    Some ioctls via OSS sequencer API may race and lead to UAF when the
    port create and delete are performed concurrently, as spotted by a
    couple of syzkaller cases.  This patch is an attempt to address it by
    serializing the ioctls with the existing register_mutex.
    
    Basically OSS sequencer API is an obsoleted interface and was designed
    without much consideration of the concurrency.  There are very few
    applications with it, and the concurrent performance isn't asked,
    hence this "big hammer" approach should be good enough.
    
    Reported-by: syzbot+1a54a94bd32716796edd@syzkaller.appspotmail.com
    Reported-by: syzbot+9d2abfef257f3e2d4713@syzkaller.appspotmail.com
    Suggested-by: Hillf Danton <hdanton@sina.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200804185815.2453-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a9f920dd949b42ee35103422f322c43249230c0f
Author: Forest Crossman <cyrozap@gmail.com>
Date:   Mon Jul 27 23:24:08 2020 -0500

    usb: xhci: Fix ASMedia ASM1142 DMA addressing
    
    commit ec37198acca7b4c17b96247697406e47aafe0605 upstream.
    
    I've confirmed that the ASMedia ASM1142 has the same problem as the
    ASM2142/ASM3142, in that it too reports that it supports 64-bit DMA
    addresses when in fact it does not. As with the ASM2142/ASM3142, this
    can cause problems on systems where the upper bits matter, and adding
    the XHCI_NO_64BIT_SUPPORT quirk completely fixes the issue.
    
    Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Forest Crossman <cyrozap@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200728042408.180529-3-cyrozap@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0927676a53d856267c6fd20ca10e03cfb9ba612f
Author: Forest Crossman <cyrozap@gmail.com>
Date:   Mon Jul 27 23:24:07 2020 -0500

    usb: xhci: define IDs for various ASMedia host controllers
    
    commit 1841cb255da41e87bed9573915891d056f80e2e7 upstream.
    
    Not all ASMedia host controllers have a device ID that matches its part
    number. #define some of these IDs to make it clearer at a glance which
    chips require what quirks.
    
    Acked-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Signed-off-by: Forest Crossman <cyrozap@gmail.com>
    Link: https://lore.kernel.org/r/20200728042408.180529-2-cyrozap@gmail.com
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b37230e3a93ccce25c76140d4a39dccd82d1ade0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sun Jul 26 11:49:39 2020 +0200

    USB: iowarrior: fix up report size handling for some devices
    
    commit 17a82716587e9d7c3b246a789add490b2b5dcab6 upstream.
    
    In previous patches that added support for new iowarrior devices, the
    handling of the report size was not done correct.
    
    Fix that up and update the copyright date for the driver
    
    Reworked from an original patch written by Christoph Jung.
    
    Fixes: bab5417f5f01 ("USB: misc: iowarrior: add support for the 100 device")
    Fixes: 5f6f8da2d7b5 ("USB: misc: iowarrior: add support for the 28 and 28L devices")
    Fixes: 461d8deb26a7 ("USB: misc: iowarrior: add support for 2 OEMed devices")
    Cc: stable <stable@kernel.org>
    Reported-by: Christoph Jung <jung@codemercs.com>
    Link: https://lore.kernel.org/r/20200726094939.1268978-1-gregkh@linuxfoundation.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d0f41267533e53f8d6600ff6d0922cce8ac850e1
Author: Roi Dayan <roid@mellanox.com>
Date:   Thu Aug 6 19:05:42 2020 -0700

    net/mlx5e: Don't support phys switch id if not in switchdev mode
    
    Support for phys switch id ndo added for representors and if
    we do not have representors there is no need to support it.
    Since each port return different switch id supporting this
    block support for creating bond over PFs and attaching to bridge
    in legacy mode.
    
    This bug doesn't exist upstream as the code got refactored and the
    netdev api is totally different.
    
    Fixes: cb67b832921c ("net/mlx5e: Introduce SRIOV VF representors")
    Signed-off-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96d5d921f55ffd585050ae83e2cf92f14469d4e2
Author: Erik Ekman <erik@kryo.se>
Date:   Fri Jul 17 20:51:18 2020 +0200

    USB: serial: qcserial: add EM7305 QDL product ID
    
    commit d2a4309c1ab6df424b2239fe2920d6f26f808d17 upstream.
    
    When running qmi-firmware-update on the Sierra Wireless EM7305 in a Toshiba
    laptop, it changed product ID to 0x9062 when entering QDL mode:
    
    usb 2-4: new high-speed USB device number 78 using xhci_hcd
    usb 2-4: New USB device found, idVendor=1199, idProduct=9062, bcdDevice= 0.00
    usb 2-4: New USB device strings: Mfr=1, Product=2, SerialNumber=0
    usb 2-4: Product: EM7305
    usb 2-4: Manufacturer: Sierra Wireless, Incorporated
    
    The upgrade could complete after running
     # echo 1199 9062 > /sys/bus/usb-serial/drivers/qcserial/new_id
    
    qcserial 2-4:1.0: Qualcomm USB modem converter detected
    usb 2-4: Qualcomm USB modem converter now attached to ttyUSB0
    
    Signed-off-by: Erik Ekman <erik@kryo.se>
    Link: https://lore.kernel.org/r/20200717185118.3640219-1-erik@kryo.se
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d66ee97738d09b53c88f94ea14457ef758229a6d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 7 09:38:42 2020 +0200

    Linux 4.14.193
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6d9e36f408b5a6044b4613c515e661b8e4b4098
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Tue Oct 3 19:14:38 2017 +0100

    ARM: 8702/1: head-common.S: Clear lr before jumping to start_kernel()
    
    commit 59b6359dd92d18f5dc04b14a4c926fa08ab66f7c upstream.
    
    If CONFIG_DEBUG_LOCK_ALLOC=y, the kernel log is spammed with a few
    hundred identical messages:
    
        unwind: Unknown symbol address c0800300
        unwind: Index not found c0800300
    
    c0800300 is the return address from the last subroutine call (to
    __memzero()) in __mmap_switched().  Apparently having this address in
    the link register confuses the unwinder.
    
    To fix this, reset the link register to zero before jumping to
    start_kernel().
    
    Fixes: 9520b1a1b5f7a348 ("ARM: head-common.S: speed up startup code")
    Suggested-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Nicolas Pitre <nico@linaro.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>

commit 3ad04b61b9de4ef83216e62ccdecbe66cdde9ba4
Author: Jiang Ying <jiangying8582@126.com>
Date:   Wed Aug 5 15:57:21 2020 +0800

    ext4: fix direct I/O read error
    
    This patch is used to fix ext4 direct I/O read error when
    the read size is not aligned with block size.
    
    Then, I will use a test to explain the error.
    
    (1) Make a file that is not aligned with block size:
            $dd if=/dev/zero of=./test.jar bs=1000 count=3
    
    (2) I wrote a source file named "direct_io_read_file.c" as following:
    
            #include <stdio.h>
            #include <stdlib.h>
            #include <unistd.h>
            #include <sys/file.h>
            #include <sys/types.h>
            #include <sys/stat.h>
            #include <string.h>
            #define BUF_SIZE 1024
    
            int main()
            {
                    int fd;
                    int ret;
    
                    unsigned char *buf;
                    ret = posix_memalign((void **)&buf, 512, BUF_SIZE);
                    if (ret) {
                            perror("posix_memalign failed");
                            exit(1);
                    }
                    fd = open("./test.jar", O_RDONLY | O_DIRECT, 0755);
                    if (fd < 0){
                            perror("open ./test.jar failed");
                            exit(1);
                    }
    
                    do {
                            ret = read(fd, buf, BUF_SIZE);
                            printf("ret=%d\n",ret);
                            if (ret < 0) {
                                    perror("write test.jar failed");
                            }
                    } while (ret > 0);
    
                    free(buf);
                    close(fd);
            }
    
    (3) Compile the source file:
            $gcc direct_io_read_file.c -D_GNU_SOURCE
    
    (4) Run the test program:
            $./a.out
    
            The result is as following:
            ret=1024
            ret=1024
            ret=952
            ret=-1
            write test.jar failed: Invalid argument.
    
    I have tested this program on XFS filesystem, XFS does not have
    this problem, because XFS use iomap_dio_rw() to do direct I/O
    read. And the comparing between read offset and file size is done
    in iomap_dio_rw(), the code is as following:
    
            if (pos < size) {
                    retval = filemap_write_and_wait_range(mapping, pos,
                                    pos + iov_length(iov, nr_segs) - 1);
    
                    if (!retval) {
                            retval = mapping->a_ops->direct_IO(READ, iocb,
                                                    iov, pos, nr_segs);
                    }
                    ...
            }
    
    ...only when "pos < size", direct I/O can be done, or 0 will be return.
    
    I have tested the fix patch on Ext4, it is up to the mustard of
    EINVAL in man2(read) as following:
            #include <unistd.h>
            ssize_t read(int fd, void *buf, size_t count);
    
            EINVAL
                    fd is attached to an object which is unsuitable for reading;
                    or the file was opened with the O_DIRECT flag, and either the
                    address specified in buf, the value specified in count, or the
                    current file offset is not suitably aligned.
    
    So I think this patch can be applied to fix ext4 direct I/O error.
    
    However Ext4 introduces direct I/O read using iomap infrastructure
    on kernel 5.5, the patch is commit <b1b4705d54ab>
    ("ext4: introduce direct I/O read using iomap infrastructure"),
    then Ext4 will be the same as XFS, they all use iomap_dio_rw() to do direct
    I/O read. So this problem does not exist on kernel 5.5 for Ext4.
    
    >From above description, we can see this problem exists on all the kernel
    versions between kernel 3.14 and kernel 5.4. It will cause the Applications
    to fail to read. For example, when the search service downloads a new full
    index file, the search engine is loading the previous index file and is
    processing the search request, it can not use buffer io that may squeeze
    the previous index file in use from pagecache, so the serch service must
    use direct I/O read.
    
    Please apply this patch on these kernel versions, or please use the method
    on kernel 5.5 to fix this problem.
    
    Fixes: 9fe55eea7e4b ("Fix race when checking i_size on direct i/o read")
    Reviewed-by: Jan Kara <jack@suse.cz>
    Co-developed-by: Wang Long <wanglong19@meituan.com>
    Signed-off-by: Wang Long <wanglong19@meituan.com>
    Signed-off-by: Jiang Ying <jiangying8582@126.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5899faed44925946f07fd4f3a044daca59666630
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 31 07:51:14 2020 +0200

    random32: move the pseudo-random 32-bit definitions to prandom.h
    
    commit c0842fbc1b18c7a044e6ff3e8fa78bfa822c7d1a upstream.
    
    The addition of percpu.h to the list of includes in random.h revealed
    some circular dependencies on arm64 and possibly other platforms.  This
    include was added solely for the pseudo-random definitions, which have
    nothing to do with the rest of the definitions in this file but are
    still there for legacy reasons.
    
    This patch moves the pseudo-random parts to linux/prandom.h and the
    percpu.h include with it, which is now guarded by _LINUX_PRANDOM_H and
    protected against recursive inclusion.
    
    A further cleanup step would be to remove this from <linux/random.h>
    entirely, and make people who use the prandom infrastructure include
    just the new header file.  That's a bit of a churn patch, but grepping
    for "prandom_" and "next_pseudo_random32" "struct rnd_state" should
    catch most users.
    
    But it turns out that that nice cleanup step is fairly painful, because
    a _lot_ of code currently seems to depend on the implicit include of
    <linux/random.h>, which can currently come in a lot of ways, including
    such fairly core headfers as <linux/net.h>.
    
    So the "nice cleanup" part may or may never happen.
    
    Fixes: 1c9df907da83 ("random: fix circular include dependency on arm64 after addition of percpu.h")
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Acked-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d60654bec8cf442124f7207b9c7d2265cc26759
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 29 19:11:00 2020 -0700

    random32: remove net_rand_state from the latent entropy gcc plugin
    
    commit 83bdc7275e6206f560d247be856bceba3e1ed8f2 upstream.
    
    It turns out that the plugin right now ends up being really unhappy
    about the change from 'static' to 'extern' storage that happened in
    commit f227e3ec3b5c ("random32: update the net random state on interrupt
    and activity").
    
    This is probably a trivial fix for the latent_entropy plugin, but for
    now, just remove net_rand_state from the list of things the plugin
    worries about.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Emese Revfy <re.emese@gmail.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 086551a237895482f50489bd4a9ded8fc43b7976
Author: Willy Tarreau <w@1wt.eu>
Date:   Thu Jul 30 07:59:24 2020 +0200

    random: fix circular include dependency on arm64 after addition of percpu.h
    
    commit 1c9df907da83812e4f33b59d3d142c864d9da57f upstream.
    
    Daniel Díaz and Kees Cook independently reported that commit
    f227e3ec3b5c ("random32: update the net random state on interrupt and
    activity") broke arm64 due to a circular dependency on include files
    since the addition of percpu.h in random.h.
    
    The correct fix would definitely be to move all the prandom32 stuff out
    of random.h but for backporting, a smaller solution is preferred.
    
    This one replaces linux/percpu.h with asm/percpu.h, and this fixes the
    problem on x86_64, arm64, arm, and mips.  Note that moving percpu.h
    around didn't change anything and that removing it entirely broke
    differently.  When backporting, such options might still be considered
    if this patch fails to help.
    
    [ It turns out that an alternate fix seems to be to just remove the
      troublesome <asm/pointer_auth.h> remove from the arm64 <asm/smp.h>
      that causes the circular dependency.
    
      But we might as well do the whole belt-and-suspenders thing, and
      minimize inclusion in <linux/random.h> too. Either will fix the
      problem, and both are good changes.   - Linus ]
    
    Reported-by: Daniel Díaz <daniel.diaz@linaro.org>
    Reported-by: Kees Cook <keescook@chromium.org>
    Tested-by: Marc Zyngier <maz@kernel.org>
    Fixes: f227e3ec3b5c
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0795b5b2686a0fa65f2356907d97e8a1c8b9a7c9
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Jul 30 22:05:01 2020 +0300

    ARM: percpu.h: fix build error
    
    commit aa54ea903abb02303bf55855fb51e3fcee135d70 upstream.
    
    Fix build error for the case:
      defined(CONFIG_SMP) && !defined(CONFIG_CPU_V6)
    
    config: keystone_defconfig
    
      CC      arch/arm/kernel/signal.o
      In file included from ../include/linux/random.h:14,
                        from ../arch/arm/kernel/signal.c:8:
      ../arch/arm/include/asm/percpu.h: In function ‘__my_cpu_offset’:
      ../arch/arm/include/asm/percpu.h:29:34: error: ‘current_stack_pointer’ undeclared (first use in this function); did you mean ‘user_stack_pointer’?
          : "Q" (*(const unsigned long *)current_stack_pointer));
                                         ^~~~~~~~~~~~~~~~~~~~~
                                         user_stack_pointer
    
    Fixes: f227e3ec3b5c ("random32: update the net random state on interrupt and activity")
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54276f7b72b8d34b26129ddf53834d24bb6133fb
Author: Willy Tarreau <w@1wt.eu>
Date:   Fri Jul 10 15:23:19 2020 +0200

    random32: update the net random state on interrupt and activity
    
    commit f227e3ec3b5cad859ad15666874405e8c1bbc1d4 upstream.
    
    This modifies the first 32 bits out of the 128 bits of a random CPU's
    net_rand_state on interrupt or CPU activity to complicate remote
    observations that could lead to guessing the network RNG's internal
    state.
    
    Note that depending on some network devices' interrupt rate moderation
    or binding, this re-seeding might happen on every packet or even almost
    never.
    
    In addition, with NOHZ some CPUs might not even get timer interrupts,
    leaving their local state rarely updated, while they are running
    networked processes making use of the random state.  For this reason, we
    also perform this update in update_process_times() in order to at least
    update the state when there is user or system activity, since it's the
    only case we care about.
    
    Reported-by: Amit Klein <aksecurity@gmail.com>
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: "Jason A. Donenfeld" <Jason@zx2c4.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 797bb9e6338681b9e15bebe94e5a63507b737d6b
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 5 11:49:14 2020 +0200

    Revert "scsi: libsas: direct call probe and destruct"
    
    This reverts commit 3a156abd24346a3188eb7e88cf86386a409e0d02 which is
    commit 0558f33c06bb910e2879e355192227a8e8f0219d upstream.
    
    John writes:
            This patch was one of a series from Jason to fix this WARN issue, below:
    
            https://lore.kernel.org/linux-scsi/8f6e3763-2b04-23e8-f1ec-8ed3c58f55d3@huawei.com/
    
            I'm doubtful that it should be taken in isolation. Maybe 1 or 2 other
            patches are required.
    
            The WARN was really annoying, so we could spend a bit of time to test a
            backport of what is strictly required. Let us know.
    
    Cc: Jason Yan <yanaijie@huawei.com>
    CC: John Garry <john.garry@huawei.com>
    CC: Johannes Thumshirn <jthumshirn@suse.de>
    CC: Ewan Milne <emilne@redhat.com>
    CC: Christoph Hellwig <hch@lst.de>
    CC: Tomas Henzl <thenzl@redhat.com>
    CC: Dan Williams <dan.j.williams@intel.com>
    Cc: Hannes Reinecke <hare@suse.com>
    Cc: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Sasha Levin <sashal@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c8df4f86d79194ba7ecd7b11639ea247841c21f
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 15:48:07 2023 +0500

    Revert "f2fs_encrypted_inode" to "IS_ENCRYPTED" from c10efaec35901c820834a924f6100531c17aea02 to fix building errors.

commit 907149346fc083f4aba604b5f1c5f1a65b3f5c2e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 5 10:06:53 2020 +0200

    Linux 4.14.192
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bbe100e3028373ad96655812c591f755f6d5f73
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Wed Jul 29 10:53:28 2020 +0200

    x86/i8259: Use printk_deferred() to prevent deadlock
    
    commit bdd65589593edd79b6a12ce86b3b7a7c6dae5208 upstream.
    
    0day reported a possible circular locking dependency:
    
    Chain exists of:
      &irq_desc_lock_class --> console_owner --> &port_lock_key
    
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(&port_lock_key);
                                   lock(console_owner);
                                   lock(&port_lock_key);
      lock(&irq_desc_lock_class);
    
    The reason for this is a printk() in the i8259 interrupt chip driver
    which is invoked with the irq descriptor lock held, which reverses the
    lock operations vs. printk() from arbitrary contexts.
    
    Switch the printk() to printk_deferred() to avoid that.
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/87365abt2v.fsf@nanos.tec.linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5382458a0f8ae1d96d3d07b86c6a123db2bfd723
Author: Wanpeng Li <wanpengli@tencent.com>
Date:   Fri Jul 31 11:12:19 2020 +0800

    KVM: LAPIC: Prevent setting the tscdeadline timer if the lapic is hw disabled
    
    commit d2286ba7d574ba3103a421a2f9ec17cb5b0d87a1 upstream.
    
    Prevent setting the tscdeadline timer if the lapic is hw disabled.
    
    Fixes: bce87cce88 (KVM: x86: consolidate different ways to test for in-kernel LAPIC)
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Wanpeng Li <wanpengli@tencent.com>
    Message-Id: <1596165141-28874-1-git-send-email-wanpengli@tencent.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ffd90b780bdcb839601cb06f055f33ec565053e
Author: Andrea Righi <andrea.righi@canonical.com>
Date:   Fri Jul 24 10:59:10 2020 +0200

    xen-netfront: fix potential deadlock in xennet_remove()
    
    [ Upstream commit c2c633106453611be07821f53dff9e93a9d1c3f0 ]
    
    There's a potential race in xennet_remove(); this is what the driver is
    doing upon unregistering a network device:
    
      1. state = read bus state
      2. if state is not "Closed":
      3.    request to set state to "Closing"
      4.    wait for state to be set to "Closing"
      5.    request to set state to "Closed"
      6.    wait for state to be set to "Closed"
    
    If the state changes to "Closed" immediately after step 1 we are stuck
    forever in step 4, because the state will never go back from "Closed" to
    "Closing".
    
    Make sure to check also for state == "Closed" in step 4 to prevent the
    deadlock.
    
    Also add a 5 sec timeout any time we wait for the bus state to change,
    to avoid getting stuck forever in wait_event().
    
    Signed-off-by: Andrea Righi <andrea.righi@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c859a8f60279734c9838f542997ed9a575a8c3d3
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Wed Jul 22 21:58:39 2020 -0500

    cxgb4: add missing release on skb in uld_send()
    
    [ Upstream commit e6827d1abdc9b061a57d7b7d3019c4e99fabea2f ]
    
    In the implementation of uld_send(), the skb is consumed on all
    execution paths except one. Release skb when returning NET_XMIT_DROP.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de244c9fd9fc2175e34add4c172ebb9e1cdbaa03
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Fri Jul 17 09:04:25 2020 -0500

    x86/unwind/orc: Fix ORC for newly forked tasks
    
    [ Upstream commit 372a8eaa05998cd45b3417d0e0ffd3a70978211a ]
    
    The ORC unwinder fails to unwind newly forked tasks which haven't yet
    run on the CPU.  It correctly reads the 'ret_from_fork' instruction
    pointer from the stack, but it incorrectly interprets that value as a
    call stack address rather than a "signal" one, so the address gets
    incorrectly decremented in the call to orc_find(), resulting in bad ORC
    data.
    
    Fix it by forcing 'ret_from_fork' frames to be signal frames.
    
    Reported-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
    Link: https://lkml.kernel.org/r/f91a8778dde8aae7f71884b5df2b16d552040441.1594994374.git.jpoimboe@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d738cf7e72cab3afc531bd74140b86cc7df2bcb6
Author: Raviteja Narayanam <raviteja.narayanam@xilinx.com>
Date:   Fri Jul 3 19:25:49 2020 +0530

    Revert "i2c: cadence: Fix the hold bit setting"
    
    [ Upstream commit 0db9254d6b896b587759e2c844c277fb1a6da5b9 ]
    
    This reverts commit d358def706880defa4c9e87381c5bf086a97d5f9.
    
    There are two issues with "i2c: cadence: Fix the hold bit setting" commit.
    
    1. In case of combined message request from user space, when the HOLD
    bit is cleared in cdns_i2c_mrecv function, a STOP condition is sent
    on the bus even before the last message is started. This is because when
    the HOLD bit is cleared, the FIFOS are empty and there is no pending
    transfer. The STOP condition should occur only after the last message
    is completed.
    
    2. The code added by the commit is redundant. Driver is handling the
    setting/clearing of HOLD bit in right way before the commit.
    
    The setting of HOLD bit based on 'bus_hold_flag' is taken care in
    cdns_i2c_master_xfer function even before cdns_i2c_msend/cdns_i2c_recv
    functions.
    
    The clearing of HOLD bit is taken care at the end of cdns_i2c_msend and
    cdns_i2c_recv functions based on bus_hold_flag and byte count.
    Since clearing of HOLD bit is done after the slave address is written to
    the register (writing to address register triggers the message transfer),
    it is ensured that STOP condition occurs at the right time after
    completion of the pending transfer (last message).
    
    Signed-off-by: Raviteja Narayanam <raviteja.narayanam@xilinx.com>
    Acked-by: Michal Simek <michal.simek@xilinx.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0364a372193c8f7a20b9ff9218db152c0713bce6
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Jul 21 15:23:12 2020 +0900

    net: ethernet: ravb: exit if re-initialization fails in tx timeout
    
    [ Upstream commit 015c5d5e6aa3523c758a70eb87b291cece2dbbb4 ]
    
    According to the report of [1], this driver is possible to cause
    the following error in ravb_tx_timeout_work().
    
    ravb e6800000.ethernet ethernet: failed to switch device to config mode
    
    This error means that the hardware could not change the state
    from "Operation" to "Configuration" while some tx and/or rx queue
    are operating. After that, ravb_config() in ravb_dmac_init() will fail,
    and then any descriptors will be not allocaled anymore so that NULL
    pointer dereference happens after that on ravb_start_xmit().
    
    To fix the issue, the ravb_tx_timeout_work() should check
    the return values of ravb_stop_dma() and ravb_dmac_init().
    If ravb_stop_dma() fails, ravb_tx_timeout_work() re-enables TX and RX
    and just exits. If ravb_dmac_init() fails, just exits.
    
    [1]
    https://lore.kernel.org/linux-renesas-soc/20200518045452.2390-1-dirk.behme@de.bosch.com/
    
    Reported-by: Dirk Behme <dirk.behme@de.bosch.com>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Reviewed-by: Sergei Shtylyov <sergei.shtylyov@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a6f052f1ca7423e890d7ada5e85cb89bde578dd5
Author: Liam Beguin <liambeguin@gmail.com>
Date:   Sat Jul 18 16:10:21 2020 -0400

    parisc: add support for cmpxchg on u8 pointers
    
    [ Upstream commit b344d6a83d01c52fddbefa6b3b4764da5b1022a0 ]
    
    The kernel test bot reported[1] that using set_mask_bits on a u8 causes
    the following issue on parisc:
    
            hppa-linux-ld: drivers/phy/ti/phy-tusb1210.o: in function `tusb1210_probe':
            >> (.text+0x2f4): undefined reference to `__cmpxchg_called_with_bad_pointer'
            >> hppa-linux-ld: (.text+0x324): undefined reference to `__cmpxchg_called_with_bad_pointer'
            hppa-linux-ld: (.text+0x354): undefined reference to `__cmpxchg_called_with_bad_pointer'
    
    Add support for cmpxchg on u8 pointers.
    
    [1] https://lore.kernel.org/patchwork/patch/1272617/#1468946
    
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Liam Beguin <liambeguin@gmail.com>
    Tested-by: Dave Anglin <dave.anglin@bell.net>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2459c33f367f25dae5ddd10289d48abe99443bd0
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Sat Jul 18 00:31:49 2020 -0500

    nfc: s3fwrn5: add missing release on skb in s3fwrn5_recv_frame
    
    [ Upstream commit 1e8fd3a97f2d83a7197876ceb4f37b4c2b00a0f3 ]
    
    The implementation of s3fwrn5_recv_frame() is supposed to consume skb on
    all execution paths. Release skb before returning -ENODEV.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0eed995678d4e571843ca0f5928f665b61b5ca87
Author: Laurence Oberman <loberman@redhat.com>
Date:   Tue Jul 14 18:08:05 2020 -0400

    qed: Disable "MFW indication via attention" SPAM every 5 minutes
    
    [ Upstream commit 1d61e21852d3161f234b9656797669fe185c251b ]
    
    This is likely firmware causing this but its starting to annoy customers.
    Change the message level to verbose to prevent the spam.
    Note that this seems to only show up with ISCSI enabled on the HBA via the
    qedi driver.
    
    Signed-off-by: Laurence Oberman <loberman@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7eb8880145cc4ceaec58dd2fc26e12356a118da
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Mon Jul 13 13:05:13 2020 +0200

    usb: hso: Fix debug compile warning on sparc32
    
    [ Upstream commit e0484010ec05191a8edf980413fc92f28050c1cc ]
    
    On sparc32, tcflag_t is "unsigned long", unlike on all other
    architectures, where it is "unsigned int":
    
        drivers/net/usb/hso.c: In function ‘hso_serial_set_termios’:
        include/linux/kern_levels.h:5:18: warning: format ‘%d’ expects argument of type ‘unsigned int’, but argument 4 has type ‘tcflag_t {aka long unsigned int}’ [-Wformat=]
        drivers/net/usb/hso.c:1393:3: note: in expansion of macro ‘hso_dbg’
           hso_dbg(0x16, "Termios called with: cflags new[%d] - old[%d]\n",
           ^~~~~~~
        include/linux/kern_levels.h:5:18: warning: format ‘%d’ expects argument of type ‘unsigned int’, but argument 5 has type ‘tcflag_t {aka long unsigned int}’ [-Wformat=]
        drivers/net/usb/hso.c:1393:3: note: in expansion of macro ‘hso_dbg’
           hso_dbg(0x16, "Termios called with: cflags new[%d] - old[%d]\n",
           ^~~~~~~
    
    As "unsigned long" is 32-bit on sparc32, fix this by casting all tcflag_t
    parameters to "unsigned int".
    While at it, use "%u" to format unsigned numbers.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d346b3c348a8a106839e3d723f6a5c0e309627a
Author: Robin Murphy <robin.murphy@arm.com>
Date:   Thu Jul 30 10:56:49 2020 +0100

    arm64: csum: Fix handling of bad packets
    
    [ Upstream commit 05fb3dbda187bbd9cc1cd0e97e5d6595af570ac6 ]
    
    Although iph is expected to point to at least 20 bytes of valid memory,
    ihl may be bogus, for example on reception of a corrupt packet. If it
    happens to be less than 5, we really don't want to run away and
    dereference 16GB worth of memory until it wraps back to exactly zero...
    
    Fixes: 0e455d8e80aa ("arm64: Implement optimised IP checksum helpers")
    Reported-by: guodeqing <geffrey.guo@huawei.com>
    Signed-off-by: Robin Murphy <robin.murphy@arm.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1b1d42d0da7da587d13e652e70523c5eadcfb92c
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Thu Jul 30 08:37:01 2020 -0700

    arm64/alternatives: move length validation inside the subsection
    
    [ Upstream commit 966a0acce2fca776391823381dba95c40e03c339 ]
    
    Commit f7b93d42945c ("arm64/alternatives: use subsections for replacement
    sequences") breaks LLVM's integrated assembler, because due to its
    one-pass design, it cannot compute instruction sequence lengths before the
    layout for the subsection has been finalized. This change fixes the build
    by moving the .org directives inside the subsection, so they are processed
    after the subsection layout is known.
    
    Fixes: f7b93d42945c ("arm64/alternatives: use subsections for replacement sequences")
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1078
    Link: https://lore.kernel.org/r/20200730153701.3892953-1-samitolvanen@google.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b76ef718a361c2e9bc857e5fe035a6bc287849e2
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Sat Jul 4 15:54:19 2020 +0200

    mac80211: mesh: Free pending skb when destroying a mpath
    
    [ Upstream commit 5e43540c2af0a0c0a18e39579b1ad49541f87506 ]
    
    A mpath object can hold reference on a list of skb that are waiting for
    mpath resolution to be sent. When destroying a mpath this skb list
    should be cleaned up in order to not leak memory.
    
    Fixing that kind of leak:
    
    unreferenced object 0xffff0000181c9300 (size 1088):
      comm "openvpn", pid 1782, jiffies 4295071698 (age 80.416s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 f9 80 36 00 00 00 00 00  ..........6.....
        02 00 07 40 00 00 00 00 00 00 00 00 00 00 00 00  ...@............
      backtrace:
        [<000000004bc6a443>] kmem_cache_alloc+0x1a4/0x2f0
        [<000000002caaef13>] sk_prot_alloc.isra.39+0x34/0x178
        [<00000000ceeaa916>] sk_alloc+0x34/0x228
        [<00000000ca1f1d04>] inet_create+0x198/0x518
        [<0000000035626b1c>] __sock_create+0x134/0x328
        [<00000000a12b3a87>] __sys_socket+0xb0/0x158
        [<00000000ff859f23>] __arm64_sys_socket+0x40/0x58
        [<00000000263486ec>] el0_svc_handler+0xd0/0x1a0
        [<0000000005b5157d>] el0_svc+0x8/0xc
    unreferenced object 0xffff000012973a40 (size 216):
      comm "openvpn", pid 1782, jiffies 4295082137 (age 38.660s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        00 c0 06 16 00 00 ff ff 00 93 1c 18 00 00 ff ff  ................
      backtrace:
        [<000000004bc6a443>] kmem_cache_alloc+0x1a4/0x2f0
        [<0000000023c8c8f9>] __alloc_skb+0xc0/0x2b8
        [<000000007ad950bb>] alloc_skb_with_frags+0x60/0x320
        [<00000000ef90023a>] sock_alloc_send_pskb+0x388/0x3c0
        [<00000000104fb1a3>] sock_alloc_send_skb+0x1c/0x28
        [<000000006919d2dd>] __ip_append_data+0xba4/0x11f0
        [<0000000083477587>] ip_make_skb+0x14c/0x1a8
        [<0000000024f3d592>] udp_sendmsg+0xaf0/0xcf0
        [<000000005aabe255>] inet_sendmsg+0x5c/0x80
        [<000000008651ea08>] __sys_sendto+0x15c/0x218
        [<000000003505c99b>] __arm64_sys_sendto+0x74/0x90
        [<00000000263486ec>] el0_svc_handler+0xd0/0x1a0
        [<0000000005b5157d>] el0_svc+0x8/0xc
    
    Fixes: 2bdaf386f99c (mac80211: mesh: move path tables into if_mesh)
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Link: https://lore.kernel.org/r/20200704135419.27703-1-repk@triplefau.lt
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20efc5b249032021a4aee5e747458bcd1f0f3d49
Author: Remi Pommarel <repk@triplefau.lt>
Date:   Sat Jul 4 15:50:07 2020 +0200

    mac80211: mesh: Free ie data when leaving mesh
    
    [ Upstream commit 6a01afcf8468d3ca2bd8bbb27503f60dcf643b20 ]
    
    At ieee80211_join_mesh() some ie data could have been allocated (see
    copy_mesh_setup()) and need to be cleaned up when leaving the mesh.
    
    This fixes the following kmemleak report:
    
    unreferenced object 0xffff0000116bc600 (size 128):
      comm "wpa_supplicant", pid 608, jiffies 4294898983 (age 293.484s)
      hex dump (first 32 bytes):
        30 14 01 00 00 0f ac 04 01 00 00 0f ac 04 01 00  0...............
        00 0f ac 08 00 00 00 00 c4 65 40 00 00 00 00 00  .........e@.....
      backtrace:
        [<00000000bebe439d>] __kmalloc_track_caller+0x1c0/0x330
        [<00000000a349dbe1>] kmemdup+0x28/0x50
        [<0000000075d69baa>] ieee80211_join_mesh+0x6c/0x3b8 [mac80211]
        [<00000000683bb98b>] __cfg80211_join_mesh+0x1e8/0x4f0 [cfg80211]
        [<0000000072cb507f>] nl80211_join_mesh+0x520/0x6b8 [cfg80211]
        [<0000000077e9bcf9>] genl_family_rcv_msg+0x374/0x680
        [<00000000b1bd936d>] genl_rcv_msg+0x78/0x108
        [<0000000022c53788>] netlink_rcv_skb+0xb0/0x1c0
        [<0000000011af8ec9>] genl_rcv+0x34/0x48
        [<0000000069e41f53>] netlink_unicast+0x268/0x2e8
        [<00000000a7517316>] netlink_sendmsg+0x320/0x4c0
        [<0000000069cba205>] ____sys_sendmsg+0x354/0x3a0
        [<00000000e06bab0f>] ___sys_sendmsg+0xd8/0x120
        [<0000000037340728>] __sys_sendmsg+0xa4/0xf8
        [<000000004fed9776>] __arm64_sys_sendmsg+0x44/0x58
        [<000000001c1e5647>] el0_svc_handler+0xd0/0x1a0
    
    Fixes: c80d545da3f7 (mac80211: Let userspace enable and configure vendor specific path selection.)
    Signed-off-by: Remi Pommarel <repk@triplefau.lt>
    Link: https://lore.kernel.org/r/20200704135007.27292-1-repk@triplefau.lt
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 403be9ab0fd6a3d56557f0e42e0f2057d5d5f27e
Author: Andrii Nakryiko <andriin@fb.com>
Date:   Tue Jul 28 21:09:12 2020 -0700

    bpf: Fix map leak in HASH_OF_MAPS map
    
    [ Upstream commit 1d4e1eab456e1ee92a94987499b211db05f900ea ]
    
    Fix HASH_OF_MAPS bug of not putting inner map pointer on bpf_map_elem_update()
    operation. This is due to per-cpu extra_elems optimization, which bypassed
    free_htab_elem() logic doing proper clean ups. Make sure that inner map is put
    properly in optimized case as well.
    
    Fixes: 8c290e60fa2a ("bpf: fix hashmap extra_elems logic")
    Signed-off-by: Andrii Nakryiko <andriin@fb.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Song Liu <songliubraving@fb.com>
    Link: https://lore.kernel.org/bpf/20200729040913.2815687-1-andriin@fb.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bf331c3ab9e730b758df2e09db82ccc007ed706
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Wed Jul 29 16:36:32 2020 -0500

    ibmvnic: Fix IRQ mapping disposal in error path
    
    [ Upstream commit 27a2145d6f826d1fad9de06ac541b1016ced3427 ]
    
    RX queue IRQ mappings are disposed in both the TX IRQ and RX IRQ
    error paths. Fix this and dispose of TX IRQ mappings correctly in
    case of an error.
    
    Fixes: ea22d51a7831 ("ibmvnic: simplify and improve driver probe function")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd5690877fad9bb1fada0afdd813e91cb5278199
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 29 12:26:46 2020 +0300

    mlxsw: core: Free EMAD transactions using kfree_rcu()
    
    [ Upstream commit 3c8ce24b037648a5a15b85888b259a74b05ff97d ]
    
    The lifetime of EMAD transactions (i.e., 'struct mlxsw_reg_trans') is
    managed using RCU. They are freed using kfree_rcu() once the transaction
    ends.
    
    However, in case the transaction failed it is freed immediately after being
    removed from the active transactions list. This is problematic because it is
    still possible for a different CPU to dereference the transaction from an RCU
    read-side critical section while traversing the active transaction list in
    mlxsw_emad_rx_listener_func(). In which case, a use-after-free is triggered
    [1].
    
    Fix this by freeing the transaction after a grace period by calling
    kfree_rcu().
    
    [1]
    BUG: KASAN: use-after-free in mlxsw_emad_rx_listener_func+0x969/0xac0 drivers/net/ethernet/mellanox/mlxsw/core.c:671
    Read of size 8 at addr ffff88800b7964e8 by task syz-executor.2/2881
    
    CPU: 0 PID: 2881 Comm: syz-executor.2 Not tainted 5.8.0-rc4+ #44
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Call Trace:
     <IRQ>
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0xf6/0x16e lib/dump_stack.c:118
     print_address_description.constprop.0+0x1c/0x250 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     mlxsw_emad_rx_listener_func+0x969/0xac0 drivers/net/ethernet/mellanox/mlxsw/core.c:671
     mlxsw_core_skb_receive+0x571/0x700 drivers/net/ethernet/mellanox/mlxsw/core.c:2061
     mlxsw_pci_cqe_rdq_handle drivers/net/ethernet/mellanox/mlxsw/pci.c:595 [inline]
     mlxsw_pci_cq_tasklet+0x12a6/0x2520 drivers/net/ethernet/mellanox/mlxsw/pci.c:651
     tasklet_action_common.isra.0+0x13f/0x3e0 kernel/softirq.c:550
     __do_softirq+0x223/0x964 kernel/softirq.c:292
     asm_call_on_stack+0x12/0x20 arch/x86/entry/entry_64.S:711
     </IRQ>
     __run_on_irqstack arch/x86/include/asm/irq_stack.h:22 [inline]
     run_on_irqstack_cond arch/x86/include/asm/irq_stack.h:48 [inline]
     do_softirq_own_stack+0x109/0x140 arch/x86/kernel/irq_64.c:77
     invoke_softirq kernel/softirq.c:387 [inline]
     __irq_exit_rcu kernel/softirq.c:417 [inline]
     irq_exit_rcu+0x16f/0x1a0 kernel/softirq.c:429
     sysvec_apic_timer_interrupt+0x4e/0xd0 arch/x86/kernel/apic/apic.c:1091
     asm_sysvec_apic_timer_interrupt+0x12/0x20 arch/x86/include/asm/idtentry.h:587
    RIP: 0010:arch_local_irq_restore arch/x86/include/asm/irqflags.h:85 [inline]
    RIP: 0010:__raw_spin_unlock_irqrestore include/linux/spinlock_api_smp.h:160 [inline]
    RIP: 0010:_raw_spin_unlock_irqrestore+0x3b/0x40 kernel/locking/spinlock.c:191
    Code: e8 2a c3 f4 fc 48 89 ef e8 12 96 f5 fc f6 c7 02 75 11 53 9d e8 d6 db 11 fd 65 ff 0d 1f 21 b3 56 5b 5d c3 e8 a7 d7 11 fd 53 9d <eb> ed 0f 1f 00 55 48 89 fd 65 ff 05 05 21 b3 56 ff 74 24 08 48 8d
    RSP: 0018:ffff8880446ffd80 EFLAGS: 00000286
    RAX: 0000000000000006 RBX: 0000000000000286 RCX: 0000000000000006
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffffa94ecea9
    RBP: ffff888012934408 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000001 R11: fffffbfff57be301 R12: 1ffff110088dffc1
    R13: ffff888037b817c0 R14: ffff88802442415a R15: ffff888024424000
     __do_sys_perf_event_open+0x1b5d/0x2bd0 kernel/events/core.c:11874
     do_syscall_64+0x56/0xa0 arch/x86/entry/common.c:384
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x473dbd
    Code: Bad RIP value.
    RSP: 002b:00007f21e5e9cc28 EFLAGS: 00000246 ORIG_RAX: 000000000000012a
    RAX: ffffffffffffffda RBX: 000000000057bf00 RCX: 0000000000473dbd
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000040
    RBP: 000000000057bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000003 R11: 0000000000000246 R12: 000000000057bf0c
    R13: 00007ffd0493503f R14: 00000000004d0f46 R15: 00007f21e5e9cd80
    
    Allocated by task 871:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc mm/kasan/common.c:494 [inline]
     __kasan_kmalloc.constprop.0+0xc2/0xd0 mm/kasan/common.c:467
     kmalloc include/linux/slab.h:555 [inline]
     kzalloc include/linux/slab.h:669 [inline]
     mlxsw_core_reg_access_emad+0x70/0x1410 drivers/net/ethernet/mellanox/mlxsw/core.c:1812
     mlxsw_core_reg_access+0xeb/0x540 drivers/net/ethernet/mellanox/mlxsw/core.c:1991
     mlxsw_sp_port_get_hw_xstats+0x335/0x7e0 drivers/net/ethernet/mellanox/mlxsw/spectrum.c:1130
     update_stats_cache+0xf4/0x140 drivers/net/ethernet/mellanox/mlxsw/spectrum.c:1173
     process_one_work+0xa3e/0x17a0 kernel/workqueue.c:2269
     worker_thread+0x9e/0x1050 kernel/workqueue.c:2415
     kthread+0x355/0x470 kernel/kthread.c:291
     ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:293
    
    Freed by task 871:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x12c/0x170 mm/kasan/common.c:455
     slab_free_hook mm/slub.c:1474 [inline]
     slab_free_freelist_hook mm/slub.c:1507 [inline]
     slab_free mm/slub.c:3072 [inline]
     kfree+0xe6/0x320 mm/slub.c:4052
     mlxsw_core_reg_access_emad+0xd45/0x1410 drivers/net/ethernet/mellanox/mlxsw/core.c:1819
     mlxsw_core_reg_access+0xeb/0x540 drivers/net/ethernet/mellanox/mlxsw/core.c:1991
     mlxsw_sp_port_get_hw_xstats+0x335/0x7e0 drivers/net/ethernet/mellanox/mlxsw/spectrum.c:1130
     update_stats_cache+0xf4/0x140 drivers/net/ethernet/mellanox/mlxsw/spectrum.c:1173
     process_one_work+0xa3e/0x17a0 kernel/workqueue.c:2269
     worker_thread+0x9e/0x1050 kernel/workqueue.c:2415
     kthread+0x355/0x470 kernel/kthread.c:291
     ret_from_fork+0x22/0x30 arch/x86/entry/entry_64.S:293
    
    The buggy address belongs to the object at ffff88800b796400
     which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 232 bytes inside of
     512-byte region [ffff88800b796400, ffff88800b796600)
    The buggy address belongs to the page:
    page:ffffea00002de500 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 head:ffffea00002de500 order:2 compound_mapcount:0 compound_pincount:0
    flags: 0x100000000010200(slab|head)
    raw: 0100000000010200 dead000000000100 dead000000000122 ffff88806c402500
    raw: 0000000000000000 0000000000100010 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88800b796380: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff88800b796400: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88800b796480: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                              ^
     ffff88800b796500: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88800b796580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: caf7297e7ab5 ("mlxsw: core: Introduce support for asynchronous EMAD register access")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fad736274baa2ad3f4220b52b71796d27ca6b8f6
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jul 29 12:26:45 2020 +0300

    mlxsw: core: Increase scope of RCU read-side critical section
    
    [ Upstream commit 7d8e8f3433dc8d1dc87c1aabe73a154978fb4c4d ]
    
    The lifetime of the Rx listener item ('rxl_item') is managed using RCU,
    but is dereferenced outside of RCU read-side critical section, which can
    lead to a use-after-free.
    
    Fix this by increasing the scope of the RCU read-side critical section.
    
    Fixes: 93c1edb27f9e ("mlxsw: Introduce Mellanox switch driver core")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3f77f37b3b1740ca3fe94b27ebb403236a737707
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Jul 24 16:15:43 2020 -0700

    mlx4: disable device on shutdown
    
    [ Upstream commit 3cab8c65525920f00d8f4997b3e9bb73aecb3a8e ]
    
    It appears that not disabling a PCI device on .shutdown may lead to
    a Hardware Error with particular (perhaps buggy) BIOS versions:
    
        mlx4_en: eth0: Close port called
        mlx4_en 0000:04:00.0: removed PHC
        reboot: Restarting system
        {1}[Hardware Error]: Hardware error from APEI Generic Hardware Error Source: 1
        {1}[Hardware Error]: event severity: fatal
        {1}[Hardware Error]:  Error 0, type: fatal
        {1}[Hardware Error]:   section_type: PCIe error
        {1}[Hardware Error]:   port_type: 4, root port
        {1}[Hardware Error]:   version: 1.16
        {1}[Hardware Error]:   command: 0x4010, status: 0x0143
        {1}[Hardware Error]:   device_id: 0000:00:02.2
        {1}[Hardware Error]:   slot: 0
        {1}[Hardware Error]:   secondary_bus: 0x04
        {1}[Hardware Error]:   vendor_id: 0x8086, device_id: 0x2f06
        {1}[Hardware Error]:   class_code: 000604
        {1}[Hardware Error]:   bridge: secondary_status: 0x2000, control: 0x0003
        {1}[Hardware Error]:   aer_uncor_status: 0x00100000, aer_uncor_mask: 0x00000000
        {1}[Hardware Error]:   aer_uncor_severity: 0x00062030
        {1}[Hardware Error]:   TLP Header: 40000018 040000ff 791f4080 00000000
    [hw error repeats]
        Kernel panic - not syncing: Fatal hardware error!
        CPU: 0 PID: 2189 Comm: reboot Kdump: loaded Not tainted 5.6.x-blabla #1
        Hardware name: HP ProLiant DL380 Gen9/ProLiant DL380 Gen9, BIOS P89 05/05/2017
    
    Fix the mlx4 driver.
    
    This is a very similar problem to what had been fixed in:
    commit 0d98ba8d70b0 ("scsi: hpsa: disable device during shutdown")
    to address https://bugzilla.kernel.org/show_bug.cgi?id=199779.
    
    Fixes: 2ba5fbd62b25 ("net/mlx4_core: Handle AER flow properly")
    Reported-by: Jake Lawrence <lawja@fb.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7740019f104c26252e2d34dd9d1e990f399ac409
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:30 2020 +0200

    net: lan78xx: fix transfer-buffer memory leak
    
    [ Upstream commit 63634aa679ba8b5e306ad0727120309ae6ba8a8e ]
    
    The interrupt URB transfer-buffer was never freed on disconnect or after
    probe errors.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Cc: Woojung.Huh@microchip.com <Woojung.Huh@microchip.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b52ccd0096dc892903e90f68ba25095d4973657e
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:29 2020 +0200

    net: lan78xx: add missing endpoint sanity check
    
    [ Upstream commit 8d8e95fd6d69d774013f51e5f2ee10c6e6d1fc14 ]
    
    Add the missing endpoint sanity check to prevent a NULL-pointer
    dereference should a malicious device lack the expected endpoints.
    
    Note that the driver has a broken endpoint-lookup helper,
    lan78xx_get_endpoints(), which can end up accepting interfaces in an
    altsetting without endpoints as long as *some* altsetting has a bulk-in
    and a bulk-out endpoint.
    
    Fixes: 55d7de9de6c3 ("Microchip's LAN7800 family USB 2/3 to 10/100/1000 Ethernet device driver")
    Cc: Woojung.Huh@microchip.com <Woojung.Huh@microchip.com>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b663e63e2fbeb42ae5bfe92de378f723249a021c
Author: Michael Karcher <kernel@mkarcher.dialup.fu-berlin.de>
Date:   Thu Jul 23 01:13:19 2020 +0200

    sh: Fix validation of system call number
    
    [ Upstream commit 04a8a3d0a73f51c7c2da84f494db7ec1df230e69 ]
    
    The slow path for traced system call entries accessed a wrong memory
    location to get the number of the maximum allowed system call number.
    Renumber the numbered "local" label for the correct location to avoid
    collisions with actual local labels.
    
    Signed-off-by: Michael Karcher <kernel@mkarcher.dialup.fu-berlin.de>
    Tested-by: John Paul Adrian Glaubitz <glaubitz@physik.fu-berlin.de>
    Fixes: f3a8308864f920d2 ("sh: Add a few missing irqflags tracing markers.")
    Signed-off-by: Rich Felker <dalias@libc.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbd39d5e4046f7b8ab8d66893ae869b5fc2b8e1d
Author: Tanner Love <tannerlove@google.com>
Date:   Mon Jul 27 12:25:28 2020 -0400

    selftests/net: rxtimestamp: fix clang issues for target arch PowerPC
    
    [ Upstream commit 955cbe91bcf782c09afe369c95a20f0a4b6dcc3c ]
    
    The signedness of char is implementation-dependent. Some systems
    (including PowerPC and ARM) use unsigned char. Clang 9 threw:
    warning: result of comparison of constant -1 with expression of type \
    'char' is always true [-Wtautological-constant-out-of-range-compare]
                                      &arg_index)) != -1) {
    
    Tested: make -C tools/testing/selftests TARGETS="net" run_tests
    
    Fixes: 16e781224198 ("selftests/net: Add a test to validate behavior of rx timestamps")
    Signed-off-by: Tanner Love <tannerlove@google.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f63d7ae47e3491f499933dbb3493c7287f75487
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Apr 28 16:12:08 2020 +0800

    net/x25: Fix null-ptr-deref in x25_disconnect
    
    commit 8999dc89497ab1c80d0718828e838c7cd5f6bffe upstream.
    
    We should check null before do x25_neigh_put in x25_disconnect,
    otherwise may cause null-ptr-deref like this:
    
     #include <sys/socket.h>
     #include <linux/x25.h>
    
     int main() {
        int sck_x25;
        sck_x25 = socket(AF_X25, SOCK_SEQPACKET, 0);
        close(sck_x25);
        return 0;
     }
    
    BUG: kernel NULL pointer dereference, address: 00000000000000d8
    CPU: 0 PID: 4817 Comm: t2 Not tainted 5.7.0-rc3+ #159
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.9.3-
    RIP: 0010:x25_disconnect+0x91/0xe0
    Call Trace:
     x25_release+0x18a/0x1b0
     __sock_release+0x3d/0xc0
     sock_close+0x13/0x20
     __fput+0x107/0x270
     ____fput+0x9/0x10
     task_work_run+0x6d/0xb0
     exit_to_usermode_loop+0x102/0x110
     do_syscall_64+0x23c/0x260
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    
    Reported-by: syzbot+6db548b615e5aeefdce2@syzkaller.appspotmail.com
    Fixes: 4becb7ee5b3d ("net/x25: Fix x25_neigh refcnt leak when x25 disconnect")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfb9a0fbfc412c3d8d6c1dfc372a93d698ee3b95
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Sat Apr 25 21:06:25 2020 +0800

    net/x25: Fix x25_neigh refcnt leak when x25 disconnect
    
    commit 4becb7ee5b3d2829ed7b9261a245a77d5b7de902 upstream.
    
    x25_connect() invokes x25_get_neigh(), which returns a reference of the
    specified x25_neigh object to "x25->neighbour" with increased refcnt.
    
    When x25 connect success and returns, the reference still be hold by
    "x25->neighbour", so the refcount should be decreased in
    x25_disconnect() to keep refcount balanced.
    
    The reference counting issue happens in x25_disconnect(), which forgets
    to decrease the refcnt increased by x25_get_neigh() in x25_connect(),
    causing a refcnt leak.
    
    Fix this issue by calling x25_neigh_put() before x25_disconnect()
    returns.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91f8df5606c186c8e70e713d94f7653f430eefc4
Author: Rik van Riel <riel@surriel.com>
Date:   Thu Sep 5 17:32:48 2019 -0700

    xfs: fix missed wakeup on l_flush_wait
    
    commit cdea5459ce263fbc963657a7736762ae897a8ae6 upstream.
    
    The code in xlog_wait uses the spinlock to make adding the task to
    the wait queue, and setting the task state to UNINTERRUPTIBLE atomic
    with respect to the waker.
    
    Doing the wakeup after releasing the spinlock opens up the following
    race condition:
    
    Task 1                                  task 2
    add task to wait queue
                                            wake up task
    set task state to UNINTERRUPTIBLE
    
    This issue was found through code inspection as a result of kworkers
    being observed stuck in UNINTERRUPTIBLE state with an empty
    wait queue. It is rare and largely unreproducable.
    
    Simply moving the spin_unlock to after the wake_up_all results
    in the waker not being able to see a task on the waitqueue before
    it has set its state to UNINTERRUPTIBLE.
    
    This bug dates back to the conversion of this code to generic
    waitqueue infrastructure from a counting semaphore back in 2008
    which didn't place the wakeups consistently w.r.t. to the relevant
    spin locks.
    
    [dchinner: Also fix a similar issue in the shutdown path on
    xc_commit_wait. Update commit log with more details of the issue.]
    
    Fixes: d748c62367eb ("[XFS] Convert l_flushsema to a sv_t")
    Reported-by: Chris Mason <clm@fb.com>
    Signed-off-by: Rik van Riel <riel@surriel.com>
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Cc: stable@vger.kernel.org # 4.9.x-4.19.x
    [modified for contextual change near xlog_state_do_callback()]
    Signed-off-by: Samuel Mendoza-Jonas <samjonas@amazon.com>
    Reviewed-by: Frank van der Linden <fllinden@amazon.com>
    Reviewed-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Reviewed-by: Benjamin Herrenschmidt <benh@amazon.com>
    Reviewed-by: Anchal Agarwal <anchalag@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0481c8fd56dfb275aa620b99f30804d3682e18b3
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Thu Jul 30 15:20:26 2020 -0400

    rds: Prevent kernel-infoleak in rds_notify_queue_get()
    
    commit bbc8a99e952226c585ac17477a85ef1194501762 upstream.
    
    rds_notify_queue_get() is potentially copying uninitialized kernel stack
    memory to userspace since the compiler may leave a 4-byte hole at the end
    of `cmsg`.
    
    In 2016 we tried to fix this issue by doing `= { 0 };` on `cmsg`, which
    unfortunately does not always initialize that 4-byte hole. Fix it by using
    memset() instead.
    
    Cc: stable@vger.kernel.org
    Fixes: f037590fff30 ("rds: fix a leak of kernel memory")
    Fixes: bdbe6fbc6a2f ("RDS: recv.c")
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Acked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf9c45de3d4b5f59a632c2dc91f24d4a1e13b0f2
Author: Joerg Roedel <jroedel@suse.de>
Date:   Tue Jul 21 11:34:48 2020 +0200

    x86, vmlinux.lds: Page-align end of ..page_aligned sections
    
    [ Upstream commit de2b41be8fcccb2f5b6c480d35df590476344201 ]
    
    On x86-32 the idt_table with 256 entries needs only 2048 bytes. It is
    page-aligned, but the end of the .bss..page_aligned section is not
    guaranteed to be page-aligned.
    
    As a result, objects from other .bss sections may end up on the same 4k
    page as the idt_table, and will accidentially get mapped read-only during
    boot, causing unexpected page-faults when the kernel writes to them.
    
    This could be worked around by making the objects in the page aligned
    sections page sized, but that's wrong.
    
    Explicit sections which store only page aligned objects have an implicit
    guarantee that the object is alone in the page in which it is placed. That
    works for all objects except the last one. That's inconsistent.
    
    Enforcing page sized objects for these sections would wreckage memory
    sanitizers, because the object becomes artificially larger than it should
    be and out of bound access becomes legit.
    
    Align the end of the .bss..page_aligned and .data..page_aligned section on
    page-size so all objects places in these sections are guaranteed to have
    their own page.
    
    [ tglx: Amended changelog ]
    
    Signed-off-by: Joerg Roedel <jroedel@suse.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200721093448.10417-1-joro@8bytes.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f08dcabb0dae3847ad1af27174ae8593f2deff7c
Author: Sami Tolvanen <samitolvanen@google.com>
Date:   Mon Apr 15 09:49:56 2019 -0700

    x86/build/lto: Fix truncated .bss with -fdata-sections
    
    [ Upstream commit 6a03469a1edc94da52b65478f1e00837add869a3 ]
    
    With CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y, we compile the kernel with
    -fdata-sections, which also splits the .bss section.
    
    The new section, with a new .bss.* name, which pattern gets missed by the
    main x86 linker script which only expects the '.bss' name. This results
    in the discarding of the second part and a too small, truncated .bss
    section and an unhappy, non-working kernel.
    
    Use the common BSS_MAIN macro in the linker script to properly capture
    and merge all the generated BSS sections.
    
    Signed-off-by: Sami Tolvanen <samitolvanen@google.com>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Nick Desaulniers <ndesaulniers@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20190415164956.124067-1-samitolvanen@google.com
    [ Extended the changelog. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 903a9ca30166ff329b9a7687b0db83528d8d5b41
Author: Wang Hai <wanghai38@huawei.com>
Date:   Fri Jun 12 17:08:33 2020 +0800

    9p/trans_fd: Fix concurrency del of req_list in p9_fd_cancelled/p9_read_work
    
    [ Upstream commit 74d6a5d5662975aed7f25952f62efbb6f6dadd29 ]
    
    p9_read_work and p9_fd_cancelled may be called concurrently.
    In some cases, req->req_list may be deleted by both p9_read_work
    and p9_fd_cancelled.
    
    We can fix it by ignoring replies associated with a cancelled
    request and ignoring cancelled request if message has been received
    before lock.
    
    Link: http://lkml.kernel.org/r/20200612090833.36149-1-wanghai38@huawei.com
    Fixes: 60ff779c4abb ("9p: client: remove unused code and any reference to "cancelled" function")
    Cc: <stable@vger.kernel.org> # v3.12+
    Reported-by: syzbot+77a25acfa0382e06ab23@syzkaller.appspotmail.com
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e96e49a43fcfa38f31cc4b8bf1e4f01de7faf2a2
Author: Dominique Martinet <dominique.martinet@cea.fr>
Date:   Tue Oct 9 11:18:52 2018 +0900

    9p/trans_fd: abort p9_read_work if req status changed
    
    [ Upstream commit e4ca13f7d075e551dc158df6af18fb412a1dba0a ]
    
    p9_read_work would try to handle an errored req even if it got put to
    error state by another thread between the lookup (that worked) and the
    time it had been fully read.
    The request itself is safe to use because we hold a ref to it from the
    lookup (for m->rreq, so it was safe to read into the request data buffer
    until this point), but the req_list has been deleted at the same time
    status changed, and client_cb already has been called as well, so we
    should not do either.
    
    Link: http://lkml.kernel.org/r/1539057956-23741-1-git-send-email-asmadeus@codewreck.org
    Signed-off-by: Dominique Martinet <dominique.martinet@cea.fr>
    Reported-by: syzbot+2222c34dc40b515f30dc@syzkaller.appspotmail.com
    Cc: Eric Van Hensbergen <ericvh@gmail.com>
    Cc: Latchesar Ionkov <lucho@ionkov.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 122d88c0080a34889268e1bf5ab3bafb87af1e54
Author: Sheng Yong <shengyong1@huawei.com>
Date:   Mon Jan 7 15:02:34 2019 +0800

    f2fs: check if file namelen exceeds max value
    
    [ Upstream commit 720db068634c91553a8e1d9a0fcd8c7050e06d2b ]
    
    Dentry bitmap is not enough to detect incorrect dentries. So this patch
    also checks the namelen value of a dentry.
    
    Signed-off-by: Gong Chen <gongchen4@huawei.com>
    Signed-off-by: Sheng Yong <shengyong1@huawei.com>
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c10efaec35901c820834a924f6100531c17aea02
Author: Jaegeuk Kim <jaegeuk@kernel.org>
Date:   Wed Nov 14 12:40:30 2018 -0800

    f2fs: check memory boundary by insane namelen
    
    [ Upstream commit 4e240d1bab1ead280ddf5eb05058dba6bbd57d10 ]
    
    If namelen is corrupted to have very long value, fill_dentries can copy
    wrong memory area.
    
    Reviewed-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44c7b7f0cb7d46afeda5e5438f8d358d74c8712c
Author: Steve Cohen <cohens@codeaurora.org>
Date:   Mon Jul 20 18:30:50 2020 -0400

    drm: hold gem reference until object is no longer accessed
    
    commit 8490d6a7e0a0a6fab5c2d82d57a3937306660864 upstream.
    
    A use-after-free in drm_gem_open_ioctl can happen if the
    GEM object handle is closed between the idr lookup and
    retrieving the size from said object since a local reference
    is not being held at that point. Hold the local reference
    while the object can still be accessed to fix this and
    plug the potential security hole.
    
    Signed-off-by: Steve Cohen <cohens@codeaurora.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/1595284250-31580-1-git-send-email-cohens@codeaurora.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f29e3152b0a2e11efaa62db0d30520291288d19
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Tue Jul 28 15:29:24 2020 -0400

    drm/amdgpu: Prevent kernel-infoleak in amdgpu_info_ioctl()
    
    commit 543e8669ed9bfb30545fd52bc0e047ca4df7fb31 upstream.
    
    Compiler leaves a 4-byte hole near the end of `dev_info`, causing
    amdgpu_info_ioctl() to copy uninitialized kernel stack memory to userspace
    when `size` is greater than 356.
    
    In 2015 we tried to fix this issue by doing `= {};` on `dev_info`, which
    unfortunately does not initialize that 4-byte hole. Fix it by using
    memset() instead.
    
    Cc: stable@vger.kernel.org
    Fixes: c193fa91b918 ("drm/amdgpu: information leak in amdgpu_info_ioctl()")
    Fixes: d38ceaf99ed0 ("drm/amdgpu: add core driver (v4)")
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2457c76bbc892aaddb88a445648a1162448c01ef
Author: Will Deacon <will@kernel.org>
Date:   Thu Jun 18 11:16:45 2020 +0100

    ARM: 8986/1: hw_breakpoint: Don't invoke overflow handler on uaccess watchpoints
    
    commit eec13b42d41b0f3339dcf0c4da43734427c68620 upstream.
    
    Unprivileged memory accesses generated by the so-called "translated"
    instructions (e.g. LDRT) in kernel mode can cause user watchpoints to fire
    unexpectedly. In such cases, the hw_breakpoint logic will invoke the user
    overflow handler which will typically raise a SIGTRAP back to the current
    task. This is futile when returning back to the kernel because (a) the
    signal won't have been delivered and (b) userspace can't handle the thing
    anyway.
    
    Avoid invoking the user overflow handler for watchpoints triggered by
    kernel uaccess routines, and instead single-step over the faulting
    instruction as we would if no overflow handler had been installed.
    
    Cc: <stable@vger.kernel.org>
    Fixes: f81ef4a920c8 ("ARM: 6356/1: hw-breakpoint: add ARM backend for the hw-breakpoint framework")
    Reported-by: Luis Machado <luis.machado@linaro.org>
    Tested-by: Luis Machado <luis.machado@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20eae0f969a434d7022321b8dfa1ec4b0f67d354
Author: Pi-Hsun Shih <pihsun@chromium.org>
Date:   Wed Dec 4 16:13:07 2019 +0800

    wireless: Use offsetof instead of custom macro.
    
    commit 6989310f5d4327e8595664954edd40a7f99ddd0d upstream.
    
    Use offsetof to calculate offset of a field to take advantage of
    compiler built-in version when possible, and avoid UBSAN warning when
    compiling with Clang:
    
    ==================================================================
    UBSAN: Undefined behaviour in net/wireless/wext-core.c:525:14
    member access within null pointer of type 'struct iw_point'
    CPU: 3 PID: 165 Comm: kworker/u16:3 Tainted: G S      W         4.19.23 #43
    Workqueue: cfg80211 __cfg80211_scan_done [cfg80211]
    Call trace:
     dump_backtrace+0x0/0x194
     show_stack+0x20/0x2c
     __dump_stack+0x20/0x28
     dump_stack+0x70/0x94
     ubsan_epilogue+0x14/0x44
     ubsan_type_mismatch_common+0xf4/0xfc
     __ubsan_handle_type_mismatch_v1+0x34/0x54
     wireless_send_event+0x3cc/0x470
     ___cfg80211_scan_done+0x13c/0x220 [cfg80211]
     __cfg80211_scan_done+0x28/0x34 [cfg80211]
     process_one_work+0x170/0x35c
     worker_thread+0x254/0x380
     kthread+0x13c/0x158
     ret_from_fork+0x10/0x18
    ===================================================================
    
    Signed-off-by: Pi-Hsun Shih <pihsun@chromium.org>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lore.kernel.org/r/20191204081307.138765-1-pihsun@chromium.org
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06590e2ef555f647df50b93555df2ed5d6dc2c0d
Author: Robert Hancock <hancockrwd@gmail.com>
Date:   Tue Jul 21 20:18:03 2020 -0600

    PCI/ASPM: Disable ASPM on ASMedia ASM1083/1085 PCIe-to-PCI bridge
    
    commit b361663c5a40c8bc758b7f7f2239f7a192180e7c upstream.
    
    Recently ASPM handling was changed to allow ASPM on PCIe-to-PCI/PCI-X
    bridges.  Unfortunately the ASMedia ASM1083/1085 PCIe to PCI bridge device
    doesn't seem to function properly with ASPM enabled.  On an Asus PRIME
    H270-PRO motherboard, it causes errors like these:
    
      pcieport 0000:00:1c.0: AER: PCIe Bus Error: severity=Corrected, type=Data Link Layer, (Transmitter ID)
      pcieport 0000:00:1c.0: AER:   device [8086:a292] error status/mask=00003000/00002000
      pcieport 0000:00:1c.0: AER:    [12] Timeout
      pcieport 0000:00:1c.0: AER: Corrected error received: 0000:00:1c.0
      pcieport 0000:00:1c.0: AER: can't find device of ID00e0
    
    In addition to flooding the kernel log, this also causes the machine to
    wake up immediately after suspend is initiated.
    
    The device advertises ASPM L0s and L1 support in the Link Capabilities
    register, but the ASMedia web page for ASM1083 [1] claims "No PCIe ASPM
    support".
    
    Windows 10 (build 2004) enables L0s, but it also logs correctable PCIe
    errors.
    
    Add a quirk to disable ASPM for this device.
    
    [1] https://www.asmedia.com.tw/eng/e_show_products.php?cate_index=169&item=114
    
    [bhelgaas: commit log]
    Fixes: 66ff14e59e8a ("PCI/ASPM: Allow ASPM on links to PCIe-to-PCI/PCI-X Bridges")
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=208667
    Link: https://lore.kernel.org/r/20200722021803.17958-1-hancockrwd@gmail.com
    Signed-off-by: Robert Hancock <hancockrwd@gmail.com>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47b93822b7cb19c55c8a34ad09963da4aa5ef888
Author: Sasha Levin <sashal@kernel.org>
Date:   Thu Jul 30 19:33:48 2020 -0400

    x86/kvm: Be careful not to clear KVM_VCPU_FLUSH_TLB bit
    
    [ Upstream commit 8c6de56a42e0c657955e12b882a81ef07d1d073e ]
    
    kvm_steal_time_set_preempted() may accidentally clear KVM_VCPU_FLUSH_TLB
    bit if it is called more than once while VCPU is preempted.
    
    This is part of CVE-2019-3016.
    
    (This bug was also independently discovered by Jim Mattson
    <jmattson@google.com>)
    
    Signed-off-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Joao Martins <joao.m.martins@oracle.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2be7d07b6e2e8064e14a6281012a36b397206332
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Fri Sep 6 13:59:30 2019 -0500

    ath9k: release allocated buffer if timed out
    
    [ Upstream commit 728c1e2a05e4b5fc52fab3421dce772a806612a2 ]
    
    In ath9k_wmi_cmd, the allocated network buffer needs to be released
    if timeout happens. Otherwise memory will be leaked.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb325b9ad5b95982bedfc2ca29e71024de960f79
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Fri Sep 6 13:26:03 2019 -0500

    ath9k_htc: release allocated buffer if timed out
    
    [ Upstream commit 853acf7caf10b828102d92d05b5c101666a6142b ]
    
    In htc_config_pipe_credits, htc_setup_complete, and htc_connect_service
    if time out happens, the allocated buffer needs to be released.
    Otherwise there will be memory leak.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b1b83a974fd26bbbe41c2eb62e45ba326383c73
Author: Sasha Levin <sashal@kernel.org>
Date:   Thu Jul 30 19:14:12 2020 -0400

    iio: imu: adis16400: fix memory leak
    
    [ Upstream commit 9c0530e898f384c5d279bfcebd8bb17af1105873 ]
    
    In adis_update_scan_mode_burst, if adis->buffer allocation fails release
    the adis->xfer.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Reviewed-by: Alexandru Ardelean <alexandru.ardelean@analog.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit da74a9e11d063e095bbedbc3c6e88fe11475a620
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Wed Sep 25 12:02:41 2019 -0300

    media: rc: prevent memory leak in cx23888_ir_probe
    
    [ Upstream commit a7b2df76b42bdd026e3106cf2ba97db41345a177 ]
    
    In cx23888_ir_probe if kfifo_alloc fails the allocated memory for state
    should be released.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Sean Young <sean@mess.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c49995c889aa1ebd32d4e572ea3f4f14a6c02367
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Sep 19 11:04:48 2019 -0500

    crypto: ccp - Release all allocated memory if sha type is invalid
    
    [ Upstream commit 128c66429247add5128c03dc1e144ca56f05a4e2 ]
    
    Release all allocated memory if sha type is invalid:
    In ccp_run_sha_cmd, if the type of sha is invalid, the allocated
    hmac_buf should be released.
    
    v2: fix the goto.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8913047f85cdd387f602f2c42f76c689aaed810
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Thu Jan 11 11:21:51 2018 +0000

    net: phy: mdio-bcm-unimac: fix potential NULL dereference in unimac_mdio_probe()
    
    [ Upstream commit 297a6961ffb8ff4dc66c9fbf53b924bd1dda05d5 ]
    
    platform_get_resource() may fail and return NULL, so we should
    better check it's return value to avoid a NULL pointer dereference
    a bit later in the code.
    
    This is detected by Coccinelle semantic patch.
    
    @@
    expression pdev, res, n, t, e, e1, e2;
    @@
    
    res = platform_get_resource(pdev, t, n);
    + if (!res)
    +   return -EINVAL;
    ... when != res == NULL
    e = devm_ioremap(e1, res->start, e2);
    
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b27f0807c9548446896c13cf200450f7c7c1727
Author: Jason Yan <yanaijie@huawei.com>
Date:   Fri Dec 8 17:42:09 2017 +0800

    scsi: libsas: direct call probe and destruct
    
    [ Upstream commit 0558f33c06bb910e2879e355192227a8e8f0219d ]
    
    In commit 87c8331fcf72 ("[SCSI] libsas: prevent domain rediscovery
    competing with ata error handling") introduced disco mutex to prevent
    rediscovery competing with ata error handling and put the whole
    revalidation in the mutex. But the rphy add/remove needs to wait for the
    error handling which also grabs the disco mutex. This may leads to dead
    lock.So the probe and destruct event were introduce to do the rphy
    add/remove asynchronously and out of the lock.
    
    The asynchronously processed workers makes the whole discovery process
    not atomic, the other events may interrupt the process. For example,
    if a loss of signal event inserted before the probe event, the
    sas_deform_port() is called and the port will be deleted.
    
    And sas_port_delete() may run before the destruct event, but the
    port-x:x is the top parent of end device or expander. This leads to
    a kernel WARNING such as:
    
    [   82.042979] sysfs group 'power' not found for kobject 'phy-1:0:22'
    [   82.042983] ------------[ cut here ]------------
    [   82.042986] WARNING: CPU: 54 PID: 1714 at fs/sysfs/group.c:237
    sysfs_remove_group+0x94/0xa0
    [   82.043059] Call trace:
    [   82.043082] [<ffff0000082e7624>] sysfs_remove_group+0x94/0xa0
    [   82.043085] [<ffff00000864e320>] dpm_sysfs_remove+0x60/0x70
    [   82.043086] [<ffff00000863ee10>] device_del+0x138/0x308
    [   82.043089] [<ffff00000869a2d0>] sas_phy_delete+0x38/0x60
    [   82.043091] [<ffff00000869a86c>] do_sas_phy_delete+0x6c/0x80
    [   82.043093] [<ffff00000863dc20>] device_for_each_child+0x58/0xa0
    [   82.043095] [<ffff000008696f80>] sas_remove_children+0x40/0x50
    [   82.043100] [<ffff00000869d1bc>] sas_destruct_devices+0x64/0xa0
    [   82.043102] [<ffff0000080e93bc>] process_one_work+0x1fc/0x4b0
    [   82.043104] [<ffff0000080e96c0>] worker_thread+0x50/0x490
    [   82.043105] [<ffff0000080f0364>] kthread+0xfc/0x128
    [   82.043107] [<ffff0000080836c0>] ret_from_fork+0x10/0x50
    
    Make probe and destruct a direct call in the disco and revalidate function,
    but put them outside the lock. The whole discovery or revalidate won't
    be interrupted by other events. And the DISCE_PROBE and DISCE_DESTRUCT
    event are deleted as a result of the direct call.
    
    Introduce a new list to destruct the sas_port and put the port delete after
    the destruct. This makes sure the right order of destroying the sysfs
    kobject and fix the warning above.
    
    In sas_ex_revalidate_domain() have a loop to find all broadcasted
    device, and sometimes we have a chance to find the same expander twice.
    Because the sas_port will be deleted at the end of the whole revalidate
    process, sas_port with the same name cannot be added before this.
    Otherwise the sysfs will complain of creating duplicate filename. Since
    the LLDD will send broadcast for every device change, we can only
    process one expander's revalidation.
    
    [mkp: kbuild test robot warning]
    
    Signed-off-by: Jason Yan <yanaijie@huawei.com>
    CC: John Garry <john.garry@huawei.com>
    CC: Johannes Thumshirn <jthumshirn@suse.de>
    CC: Ewan Milne <emilne@redhat.com>
    CC: Christoph Hellwig <hch@lst.de>
    CC: Tomas Henzl <thenzl@redhat.com>
    CC: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Hannes Reinecke <hare@suse.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb6e12a92b6493d9bd198f493da1f1b30db56806
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Jul 31 16:44:45 2020 +0200

    Linux 4.14.191
    
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 631c197b7d6af9115b449e03da881a6e56ed9547
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Mon Apr 16 23:07:27 2018 -0700

    xfs: set format back to extents if xfs_bmap_extents_to_btree
    
    commit 2c4306f719b083d17df2963bc761777576b8ad1b upstream.
    
    If xfs_bmap_extents_to_btree fails in a mode where we call
    xfs_iroot_realloc(-1) to de-allocate the root, set the
    format back to extents.
    
    Otherwise we can assume we can dereference ifp->if_broot
    based on the XFS_DINODE_FMT_BTREE format, and crash.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199423
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Nobuhiro Iwamatsu (CIP) <nobuhiro1.iwamatsu@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d46f0459874ba20aa27d3e9792bba5dd67f56f08
Author: Peng Fan <peng.fan@nxp.com>
Date:   Fri Mar 13 09:58:07 2020 +0800

    regmap: debugfs: check count when read regmap file
    
    commit 74edd08a4fbf51d65fd8f4c7d8289cd0f392bd91 upstream.
    
    When executing the following command, we met kernel dump.
    dmesg -c > /dev/null; cd /sys;
    for i in `ls /sys/kernel/debug/regmap/* -d`; do
            echo "Checking regmap in $i";
            cat $i/registers;
    done && grep -ri "0x02d0" *;
    
    It is because the count value is too big, and kmalloc fails. So add an
    upper bound check to allow max size `PAGE_SIZE << (MAX_ORDER - 1)`.
    
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/1584064687-12964-1-git-send-email-peng.fan@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72fdf64e5eaa1a53ea74a3a1b0b300b4fa1d4558
Author: Oscar Salvador <osalvador@techadventures.net>
Date:   Thu Jan 18 16:33:53 2018 -0800

    mm/page_owner.c: remove drain_all_pages from init_early_allocated_pages
    
    commit 6bec6ad77fac3d29aed0d8e0b7526daedc964970 upstream.
    
    When setting page_owner = on, the following warning can be seen in the
    boot log:
    
      WARNING: CPU: 0 PID: 0 at mm/page_alloc.c:2537 drain_all_pages+0x171/0x1a0
      Modules linked in:
      CPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.15.0-rc7-next-20180109-1-default+ #7
      Hardware name: Dell Inc. Latitude E7470/0T6HHJ, BIOS 1.11.3 11/09/2016
      RIP: 0010:drain_all_pages+0x171/0x1a0
      Call Trace:
        init_page_owner+0x4e/0x260
        start_kernel+0x3e6/0x4a6
        ? set_init_arg+0x55/0x55
        secondary_startup_64+0xa5/0xb0
      Code: c5 ed ff 89 df 48 c7 c6 20 3b 71 82 e8 f9 4b 52 00 3b 05 d7 0b f8 00 89 c3 72 d5 5b 5d 41 5
    
    This warning is shown because we are calling drain_all_pages() in
    init_early_allocated_pages(), but mm_percpu_wq is not up yet, it is being
    set up later on in kernel_init_freeable() -> init_mm_internals().
    
    Link: http://lkml.kernel.org/r/20180109153921.GA13070@techadventures.net
    Signed-off-by: Oscar Salvador <osalvador@techadventures.net>
    Acked-by: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Ayush Mittal <ayush.m@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1927c992d0e686c0afe9bf3f74950d166920e2db
Author: Yuchung Cheng <ycheng@google.com>
Date:   Thu Jul 23 12:00:06 2020 -0700

    tcp: allow at most one TLP probe per flight
    
    [ Upstream commit 76be93fc0702322179bb0ea87295d820ee46ad14 ]
    
    Previously TLP may send multiple probes of new data in one
    flight. This happens when the sender is cwnd limited. After the
    initial TLP containing new data is sent, the sender receives another
    ACK that acks partial inflight.  It may re-arm another TLP timer
    to send more, if no further ACK returns before the next TLP timeout
    (PTO) expires. The sender may send in theory a large amount of TLP
    until send queue is depleted. This only happens if the sender sees
    such irregular uncommon ACK pattern. But it is generally undesirable
    behavior during congestion especially.
    
    The original TLP design restrict only one TLP probe per inflight as
    published in "Reducing Web Latency: the Virtue of Gentle Aggression",
    SIGCOMM 2013. This patch changes TLP to send at most one probe
    per inflight.
    
    Note that if the sender is app-limited, TLP retransmits old data
    and did not have this issue.
    
    Signed-off-by: Yuchung Cheng <ycheng@google.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42a9eb73b7cc9e4f0288a0943bf83222e4b0915a
Author: Weilong Chen <chenweilong@huawei.com>
Date:   Wed Jul 15 20:58:10 2020 +0800

    rtnetlink: Fix memory(net_device) leak when ->newlink fails
    
    [ Upstream commit cebb69754f37d68e1355a5e726fdac317bcda302 ]
    
    When vlan_newlink call register_vlan_dev fails, it might return error
    with dev->reg_state = NETREG_UNREGISTERED. The rtnl_newlink should
    free the memory. But currently rtnl_newlink only free the memory which
    state is NETREG_UNINITIALIZED.
    
    BUG: memory leak
    unreferenced object 0xffff8881051de000 (size 4096):
      comm "syz-executor139", pid 560, jiffies 4294745346 (age 32.445s)
      hex dump (first 32 bytes):
        76 6c 61 6e 32 00 00 00 00 00 00 00 00 00 00 00  vlan2...........
        00 45 28 03 81 88 ff ff 00 00 00 00 00 00 00 00  .E(.............
      backtrace:
        [<0000000047527e31>] kmalloc_node include/linux/slab.h:578 [inline]
        [<0000000047527e31>] kvmalloc_node+0x33/0xd0 mm/util.c:574
        [<000000002b59e3bc>] kvmalloc include/linux/mm.h:753 [inline]
        [<000000002b59e3bc>] kvzalloc include/linux/mm.h:761 [inline]
        [<000000002b59e3bc>] alloc_netdev_mqs+0x83/0xd90 net/core/dev.c:9929
        [<000000006076752a>] rtnl_create_link+0x2c0/0xa20 net/core/rtnetlink.c:3067
        [<00000000572b3be5>] __rtnl_newlink+0xc9c/0x1330 net/core/rtnetlink.c:3329
        [<00000000e84ea553>] rtnl_newlink+0x66/0x90 net/core/rtnetlink.c:3397
        [<0000000052c7c0a9>] rtnetlink_rcv_msg+0x540/0x990 net/core/rtnetlink.c:5460
        [<000000004b5cb379>] netlink_rcv_skb+0x12b/0x3a0 net/netlink/af_netlink.c:2469
        [<00000000c71c20d3>] netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
        [<00000000c71c20d3>] netlink_unicast+0x4c6/0x690 net/netlink/af_netlink.c:1329
        [<00000000cca72fa9>] netlink_sendmsg+0x735/0xcc0 net/netlink/af_netlink.c:1918
        [<000000009221ebf7>] sock_sendmsg_nosec net/socket.c:652 [inline]
        [<000000009221ebf7>] sock_sendmsg+0x109/0x140 net/socket.c:672
        [<000000001c30ffe4>] ____sys_sendmsg+0x5f5/0x780 net/socket.c:2352
        [<00000000b71ca6f3>] ___sys_sendmsg+0x11d/0x1a0 net/socket.c:2406
        [<0000000007297384>] __sys_sendmsg+0xeb/0x1b0 net/socket.c:2439
        [<000000000eb29b11>] do_syscall_64+0x56/0xa0 arch/x86/entry/common.c:359
        [<000000006839b4d0>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: cb626bf566eb ("net-sysfs: Fix reference count leak")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Weilong Chen <chenweilong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec3ccca6b02c402e938b71b2a04e46b2bbb21cfd
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Jul 13 23:59:50 2020 +0800

    ip6_gre: fix null-ptr-deref in ip6gre_init_net()
    
    [ Upstream commit 46ef5b89ec0ecf290d74c4aee844f063933c4da4 ]
    
    KASAN report null-ptr-deref error when register_netdev() failed:
    
    KASAN: null-ptr-deref in range [0x00000000000003c0-0x00000000000003c7]
    CPU: 2 PID: 422 Comm: ip Not tainted 5.8.0-rc4+ #12
    Call Trace:
     ip6gre_init_net+0x4ab/0x580
     ? ip6gre_tunnel_uninit+0x3f0/0x3f0
     ops_init+0xa8/0x3c0
     setup_net+0x2de/0x7e0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? ops_init+0x3c0/0x3c0
     ? kasan_unpoison_shadow+0x33/0x40
     ? __kasan_kmalloc.constprop.0+0xc2/0xd0
     copy_net_ns+0x27d/0x530
     create_new_namespaces+0x382/0xa30
     unshare_nsproxy_namespaces+0xa1/0x1d0
     ksys_unshare+0x39c/0x780
     ? walk_process_tree+0x2a0/0x2a0
     ? trace_hardirqs_on+0x4a/0x1b0
     ? _raw_spin_unlock_irq+0x1f/0x30
     ? syscall_trace_enter+0x1a7/0x330
     ? do_syscall_64+0x1c/0xa0
     __x64_sys_unshare+0x2d/0x40
     do_syscall_64+0x56/0xa0
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    ip6gre_tunnel_uninit() has set 'ign->fb_tunnel_dev' to NULL, later
    access to ign->fb_tunnel_dev cause null-ptr-deref. Fix it by saving
    'ign->fb_tunnel_dev' to local variable ndev.
    
    Fixes: dafabb6590cb ("ip6_gre: fix use-after-free in ip6gre_tunnel_lookup()")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7a0844479a75f5b4a585ea6ca5e3aab49596047
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jul 23 17:49:57 2020 +0300

    AX.25: Prevent integer overflows in connect and sendmsg
    
    [ Upstream commit 17ad73e941b71f3bec7523ea4e9cbc3752461c2d ]
    
    We recently added some bounds checking in ax25_connect() and
    ax25_sendmsg() and we so we removed the AX25_MAX_DIGIS checks because
    they were no longer required.
    
    Unfortunately, I believe they are required to prevent integer overflows
    so I have added them back.
    
    Fixes: 8885bb0621f0 ("AX.25: Prevent out-of-bounds read in ax25_sendmsg()")
    Fixes: 2f2a7ffad5c6 ("AX.25: Fix out-of-bounds read in ax25_connect()")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 404116b51c591ab9ec79e52d9d095239331bb7fd
Author: David Howells <dhowells@redhat.com>
Date:   Mon Jul 20 12:41:46 2020 +0100

    rxrpc: Fix sendmsg() returning EPIPE due to recvmsg() returning ENODATA
    
    [ Upstream commit 639f181f0ee20d3249dbc55f740f0167267180f0 ]
    
    rxrpc_sendmsg() returns EPIPE if there's an outstanding error, such as if
    rxrpc_recvmsg() indicating ENODATA if there's nothing for it to read.
    
    Change rxrpc_recvmsg() to return EAGAIN instead if there's nothing to read
    as this particular error doesn't get stored in ->sk_err by the networking
    core.
    
    Also change rxrpc_sendmsg() so that it doesn't fail with delayed receive
    errors (there's no way for it to report which call, if any, the error was
    caused by).
    
    Fixes: 17926a79320a ("[AF_RXRPC]: Provide secure RxRPC sockets for use by userspace and kernel both")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 964ba007130ff896050f4aa46823f844e6716588
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Jul 21 17:11:44 2020 +0800

    net: udp: Fix wrong clean up for IS_UDPLITE macro
    
    [ Upstream commit b0a422772fec29811e293c7c0e6f991c0fd9241d ]
    
    We can't use IS_UDPLITE to replace udp_sk->pcflag when UDPLITE_RECV_CC is
    checked.
    
    Fixes: b2bf1e2659b1 ("[UDP]: Clean up for IS_UDPLITE macro")
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0cdfd99d70afe37b296f672b08edd97f63a438f2
Author: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date:   Tue Jul 21 15:02:57 2020 +0800

    net-sysfs: add a newline when printing 'tx_timeout' by sysfs
    
    [ Upstream commit 9bb5fbea59f36a589ef886292549ca4052fe676c ]
    
    When I cat 'tx_timeout' by sysfs, it displays as follows. It's better to
    add a newline for easy reading.
    
    root@syzkaller:~# cat /sys/devices/virtual/net/lo/queues/tx-0/tx_timeout
    0root@syzkaller:~#
    
    Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c369b0144d7b9f088430a01bc7e3ffd5c78b502e
Author: Xie He <xie.he.0141@gmail.com>
Date:   Thu Jul 16 16:44:33 2020 -0700

    drivers/net/wan/x25_asy: Fix to make it work
    
    [ Upstream commit 8fdcabeac39824fe67480fd9508d80161c541854 ]
    
    This driver is not working because of problems of its receiving code.
    This patch fixes it to make it work.
    
    When the driver receives an LAPB frame, it should first pass the frame
    to the LAPB module to process. After processing, the LAPB module passes
    the data (the packet) back to the driver, the driver should then add a
    one-byte pseudo header and pass the data to upper layers.
    
    The changes to the "x25_asy_bump" function and the
    "x25_asy_data_indication" function are to correctly implement this
    procedure.
    
    Also, the "x25_asy_unesc" function ignores any frame that is shorter
    than 3 bytes. However the shortest frames are 2-byte long. So we need
    to change it to allow 2-byte frames to pass.
    
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Reviewed-by: Martin Schiller <ms@dev.tdt.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff00dafebc5f3eff600c0d6d1b992d915c838658
Author: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
Date:   Thu Jul 23 11:31:48 2020 -0600

    dev: Defer free of skbs in flush_backlog
    
    [ Upstream commit 7df5cb75cfb8acf96c7f2342530eb41e0c11f4c3 ]
    
    IRQs are disabled when freeing skbs in input queue.
    Use the IRQ safe variant to free skbs here.
    
    Fixes: 145dd5f9c88f ("net: flush the softnet backlog in process context")
    Signed-off-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9e3dcadbbda8f58f1dccd3032d8b5cfa8a4cf6f7
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Wed Jul 22 12:05:12 2020 -0400

    AX.25: Prevent out-of-bounds read in ax25_sendmsg()
    
    [ Upstream commit 8885bb0621f01a6c82be60a91e5fc0f6e2f71186 ]
    
    Checks on `addr_len` and `usax->sax25_ndigis` are insufficient.
    ax25_sendmsg() can go out of bounds when `usax->sax25_ndigis` equals to 7
    or 8. Fix it.
    
    It is safe to remove `usax->sax25_ndigis > AX25_MAX_DIGIS`, since
    `addr_len` is guaranteed to be less than or equal to
    `sizeof(struct full_sockaddr_ax25)`
    
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 038c054f421a1a3674954de90d644e43a9e8ef40
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Wed Jul 22 11:19:01 2020 -0400

    AX.25: Fix out-of-bounds read in ax25_connect()
    
    [ Upstream commit 2f2a7ffad5c6cbf3d438e813cfdc88230e185ba6 ]
    
    Checks on `addr_len` and `fsa->fsa_ax25.sax25_ndigis` are insufficient.
    ax25_connect() can go out of bounds when `fsa->fsa_ax25.sax25_ndigis`
    equals to 7 or 8. Fix it.
    
    This issue has been reported as a KMSAN uninit-value bug, because in such
    a case, ax25_connect() reaches into the uninitialized portion of the
    `struct sockaddr_storage` statically allocated in __sys_connect().
    
    It is safe to remove `fsa->fsa_ax25.sax25_ndigis > AX25_MAX_DIGIS` because
    `addr_len` is guaranteed to be less than or equal to
    `sizeof(struct full_sockaddr_ax25)`.
    
    Reported-by: syzbot+c82752228ed975b0a623@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=55ef9d629f3b3d7d70b69558015b63b48d01af66
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3648c389c00d203893a3186eb567ef6500a7660
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 15:30:18 2023 +0500

    Fix errors caused by a conflict left unresolved

commit 748ee05c65f3c9fd017c3f33d8581f5ba558251d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 29 07:42:58 2020 +0200

    Linux 4.14.190
    
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3da1d7f151ae81d3da3aa8a4f7e56671b38ebd6a
Author: Mark O'Donovan <shiftee@posteo.net>
Date:   Sat Jul 11 05:33:24 2020 +0100

    ath9k: Fix regression with Atheros 9271
    
    commit 92f53e2fda8bb9a559ad61d57bfb397ce67ed0ab upstream.
    
    This fix allows ath9k_htc modules to connect to WLAN once again.
    
    Fixes: 2bbcaaee1fcb ("ath9k: Fix general protection fault in ath9k_hif_usb_rx_cb")
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=208251
    Signed-off-by: Mark O'Donovan <shiftee@posteo.net>
    Reported-by: Roman Mamedov <rm@romanrm.net>
    Tested-by: Viktor Jägersküpper <viktor_jaegerskuepper@freenet.de>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200711043324.8079-1-shiftee@posteo.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bed799faa81679a391e885982fd495ef7214838c
Author: Qiujun Huang <hqjagain@gmail.com>
Date:   Sat Apr 4 12:18:38 2020 +0800

    ath9k: Fix general protection fault in ath9k_hif_usb_rx_cb
    
    commit 2bbcaaee1fcbd83272e29f31e2bb7e70d8c49e05 upstream.
    
    In ath9k_hif_usb_rx_cb interface number is assumed to be 0.
    usb_ifnum_to_if(urb->dev, 0)
    But it isn't always true.
    
    The case reported by syzbot:
    https://lore.kernel.org/linux-usb/000000000000666c9c05a1c05d12@google.com
    usb 2-1: new high-speed USB device number 2 using dummy_hcd
    usb 2-1: config 1 has an invalid interface number: 2 but max is 0
    usb 2-1: config 1 has no interface number 0
    usb 2-1: New USB device found, idVendor=0cf3, idProduct=9271, bcdDevice=
    1.08
    usb 2-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
    general protection fault, probably for non-canonical address
    0xdffffc0000000015: 0000 [#1] SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000000a8-0x00000000000000af]
    CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.6.0-rc5-syzkaller #0
    
    Call Trace
    __usb_hcd_giveback_urb+0x29a/0x550 drivers/usb/core/hcd.c:1650
    usb_hcd_giveback_urb+0x368/0x420 drivers/usb/core/hcd.c:1716
    dummy_timer+0x1258/0x32ae drivers/usb/gadget/udc/dummy_hcd.c:1966
    call_timer_fn+0x195/0x6f0 kernel/time/timer.c:1404
    expire_timers kernel/time/timer.c:1449 [inline]
    __run_timers kernel/time/timer.c:1773 [inline]
    __run_timers kernel/time/timer.c:1740 [inline]
    run_timer_softirq+0x5f9/0x1500 kernel/time/timer.c:1786
    __do_softirq+0x21e/0x950 kernel/softirq.c:292
    invoke_softirq kernel/softirq.c:373 [inline]
    irq_exit+0x178/0x1a0 kernel/softirq.c:413
    exiting_irq arch/x86/include/asm/apic.h:546 [inline]
    smp_apic_timer_interrupt+0x141/0x540 arch/x86/kernel/apic/apic.c:1146
    apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:829
    
    Reported-and-tested-by: syzbot+40d5d2e8a4680952f042@syzkaller.appspotmail.com
    Signed-off-by: Qiujun Huang <hqjagain@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200404041838.10426-6-hqjagain@gmail.com
    Cc: Viktor Jägersküpper <viktor_jaegerskuepper@freenet.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0dce8673bbeb32ea95f3bf0d79af935db54bbccd
Author: John David Anglin <dave.anglin@bell.net>
Date:   Tue Jul 21 07:36:59 2020 -0400

    parisc: Add atomic64_set_release() define to avoid CPU soft lockups
    
    commit be6577af0cef934ccb036445314072e8cb9217b9 upstream.
    
    Stalls are quite frequent with recent kernels. I enabled
    CONFIG_SOFTLOCKUP_DETECTOR and I caught the following stall:
    
    watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [cc1:22803]
    CPU: 0 PID: 22803 Comm: cc1 Not tainted 5.6.17+ #3
    Hardware name: 9000/800/rp3440
     IAOQ[0]: d_alloc_parallel+0x384/0x688
     IAOQ[1]: d_alloc_parallel+0x388/0x688
     RP(r2): d_alloc_parallel+0x134/0x688
    Backtrace:
     [<000000004036974c>] __lookup_slow+0xa4/0x200
     [<0000000040369fc8>] walk_component+0x288/0x458
     [<000000004036a9a0>] path_lookupat+0x88/0x198
     [<000000004036e748>] filename_lookup+0xa0/0x168
     [<000000004036e95c>] user_path_at_empty+0x64/0x80
     [<000000004035d93c>] vfs_statx+0x104/0x158
     [<000000004035dfcc>] __do_sys_lstat64+0x44/0x80
     [<000000004035e5a0>] sys_lstat64+0x20/0x38
     [<0000000040180054>] syscall_exit+0x0/0x14
    
    The code was stuck in this loop in d_alloc_parallel:
    
        4037d414:   0e 00 10 dc     ldd 0(r16),ret0
        4037d418:   c7 fc 5f ed     bb,< ret0,1f,4037d414 <d_alloc_parallel+0x384>
        4037d41c:   08 00 02 40     nop
    
    This is the inner loop of bit_spin_lock which is called by hlist_bl_unlock in
    d_alloc_parallel:
    
    static inline void bit_spin_lock(int bitnum, unsigned long *addr)
    {
            /*
             * Assuming the lock is uncontended, this never enters
             * the body of the outer loop. If it is contended, then
             * within the inner loop a non-atomic test is used to
             * busywait with less bus contention for a good time to
             * attempt to acquire the lock bit.
             */
            preempt_disable();
    #if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK)
            while (unlikely(test_and_set_bit_lock(bitnum, addr))) {
                    preempt_enable();
                    do {
                            cpu_relax();
                    } while (test_bit(bitnum, addr));
                    preempt_disable();
            }
    #endif
            __acquire(bitlock);
    }
    
    After consideration, I realized that we must be losing bit unlocks.
    Then, I noticed that we missed defining atomic64_set_release().
    Adding this define fixes the stalls in bit operations.
    
    Signed-off-by: Dave Anglin <dave.anglin@bell.net>
    Cc: stable@vger.kernel.org
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46744dd216533dcfed640e601a3507d5acdd0275
Author: Michael J. Ruhl <michael.j.ruhl@intel.com>
Date:   Thu Jul 23 21:15:46 2020 -0700

    io-mapping: indicate mapping failure
    
    commit e0b3e0b1a04367fc15c07f44e78361545b55357c upstream.
    
    The !ATOMIC_IOMAP version of io_maping_init_wc will always return
    success, even when the ioremap fails.
    
    Since the ATOMIC_IOMAP version returns NULL when the init fails, and
    callers check for a NULL return on error this is unexpected.
    
    During a device probe, where the ioremap failed, a crash can look like
    this:
    
        BUG: unable to handle page fault for address: 0000000000210000
         #PF: supervisor write access in kernel mode
         #PF: error_code(0x0002) - not-present page
         Oops: 0002 [#1] PREEMPT SMP
         CPU: 0 PID: 177 Comm:
         RIP: 0010:fill_page_dma [i915]
           gen8_ppgtt_create [i915]
           i915_ppgtt_create [i915]
           intel_gt_init [i915]
           i915_gem_init [i915]
           i915_driver_probe [i915]
           pci_device_probe
           really_probe
           driver_probe_device
    
    The remap failure occurred much earlier in the probe.  If it had been
    propagated, the driver would have exited with an error.
    
    Return NULL on ioremap failure.
    
    [akpm@linux-foundation.org: detect ioremap_wc() errors earlier]
    
    Fixes: cafaf14a5d8f ("io-mapping: Always create a struct to hold metadata about the io-mapping")
    Signed-off-by: Michael J. Ruhl <michael.j.ruhl@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Mike Rapoport <rppt@linux.ibm.com>
    Cc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/20200721171936.81563-1-michael.j.ruhl@intel.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c1f15e8dafcf21a752032c2f0236fbb6e3884aa
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Jul 23 21:15:24 2020 -0700

    mm/memcg: fix refcount error while moving and swapping
    
    commit 8d22a9351035ef2ff12ef163a1091b8b8cf1e49c upstream.
    
    It was hard to keep a test running, moving tasks between memcgs with
    move_charge_at_immigrate, while swapping: mem_cgroup_id_get_many()'s
    refcount is discovered to be 0 (supposedly impossible), so it is then
    forced to REFCOUNT_SATURATED, and after thousands of warnings in quick
    succession, the test is at last put out of misery by being OOM killed.
    
    This is because of the way moved_swap accounting was saved up until the
    task move gets completed in __mem_cgroup_clear_mc(), deferred from when
    mem_cgroup_move_swap_account() actually exchanged old and new ids.
    Concurrent activity can free up swap quicker than the task is scanned,
    bringing id refcount down 0 (which should only be possible when
    offlining).
    
    Just skip that optimization: do that part of the accounting immediately.
    
    Fixes: 615d66c37c75 ("mm: memcontrol: fix memcg id ref counter on swap charge move")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Alex Shi <alex.shi@linux.alibaba.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Alex Shi <alex.shi@linux.alibaba.com>
    Cc: Shakeel Butt <shakeelb@google.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: <stable@vger.kernel.org>
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2007071431050.4726@eggly.anvils
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e72f872915fbc4951d32c3fa0a6eb06fd5f632b
Author: Fangrui Song <maskray@google.com>
Date:   Tue Jul 21 10:31:23 2020 -0700

    Makefile: Fix GCC_TOOLCHAIN_DIR prefix for Clang cross compilation
    
    commit ca9b31f6bb9c6aa9b4e5f0792f39a97bbffb8c51 upstream.
    
    When CROSS_COMPILE is set (e.g. aarch64-linux-gnu-), if
    $(CROSS_COMPILE)elfedit is found at /usr/bin/aarch64-linux-gnu-elfedit,
    GCC_TOOLCHAIN_DIR will be set to /usr/bin/.  --prefix= will be set to
    /usr/bin/ and Clang as of 11 will search for both
    $(prefix)aarch64-linux-gnu-$needle and $(prefix)$needle.
    
    GCC searchs for $(prefix)aarch64-linux-gnu/$version/$needle,
    $(prefix)aarch64-linux-gnu/$needle and $(prefix)$needle. In practice,
    $(prefix)aarch64-linux-gnu/$needle rarely contains executables.
    
    To better model how GCC's -B/--prefix takes in effect in practice, newer
    Clang (since
    https://github.com/llvm/llvm-project/commit/3452a0d8c17f7166f479706b293caf6ac76ffd90)
    only searches for $(prefix)$needle. Currently it will find /usr/bin/as
    instead of /usr/bin/aarch64-linux-gnu-as.
    
    Set --prefix= to $(GCC_TOOLCHAIN_DIR)$(notdir $(CROSS_COMPILE))
    (/usr/bin/aarch64-linux-gnu-) so that newer Clang can find the
    appropriate cross compiling GNU as (when -no-integrated-as is in
    effect).
    
    Cc: stable@vger.kernel.org
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Fangrui Song <maskray@google.com>
    Reviewed-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nathan Chancellor <natechancellor@gmail.com>
    Tested-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://github.com/ClangBuiltLinux/linux/issues/1099
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7386fae8bd9761e2f5ac86a82868ff13465dfa9f
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sun Jul 12 20:10:12 2020 +0900

    vt: Reject zero-sized screen buffer size.
    
    commit ce684552a266cb1c7cc2f7e623f38567adec6653 upstream.
    
    syzbot is reporting general protection fault in do_con_write() [1] caused
    by vc->vc_screenbuf == ZERO_SIZE_PTR caused by vc->vc_screenbuf_size == 0
    caused by vc->vc_cols == vc->vc_rows == vc->vc_size_row == 0 caused by
    fb_set_var() from ioctl(FBIOPUT_VSCREENINFO) on /dev/fb0 , for
    gotoxy(vc, 0, 0) from reset_terminal() from vc_init() from vc_allocate()
     from con_install() from tty_init_dev() from tty_open() on such console
    causes vc->vc_pos == 0x10000000e due to
    ((unsigned long) ZERO_SIZE_PTR) + -1U * 0 + (-1U << 1).
    
    I don't think that a console with 0 column or 0 row makes sense. And it
    seems that vc_do_resize() does not intend to allow resizing a console to
    0 column or 0 row due to
    
      new_cols = (cols ? cols : vc->vc_cols);
      new_rows = (lines ? lines : vc->vc_rows);
    
    exception.
    
    Theoretically, cols and rows can be any range as long as
    0 < cols * rows * 2 <= KMALLOC_MAX_SIZE is satisfied (e.g.
    cols == 1048576 && rows == 2 is possible) because of
    
      vc->vc_size_row = vc->vc_cols << 1;
      vc->vc_screenbuf_size = vc->vc_rows * vc->vc_size_row;
    
    in visual_init() and kzalloc(vc->vc_screenbuf_size) in vc_allocate().
    
    Since we can detect cols == 0 or rows == 0 via screenbuf_size = 0 in
    visual_init(), we can reject kzalloc(0). Then, vc_allocate() will return
    an error, and con_write() will not be called on a console with 0 column
    or 0 row.
    
    We need to make sure that integer overflow in visual_init() won't happen.
    Since vc_do_resize() restricts cols <= 32767 and rows <= 32767, applying
    1 <= cols <= 32767 and 1 <= rows <= 32767 restrictions to vc_allocate()
    will be practically fine.
    
    This patch does not touch con_init(), for returning -EINVAL there
    does not help when we are not returning -ENOMEM.
    
    [1] https://syzkaller.appspot.com/bug?extid=017265e8553724e514e8
    
    Reported-and-tested-by: syzbot <syzbot+017265e8553724e514e8@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200712111013.11881-1-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c0c6ebb947faca363e7189e7fd695881502c3529
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Jul 15 10:51:02 2020 +0900

    fbdev: Detect integer underflow at "struct fbcon_ops"->clear_margins.
    
    commit 033724d6864245a11f8e04c066002e6ad22b3fd0 upstream.
    
    syzbot is reporting general protection fault in bitfill_aligned() [1]
    caused by integer underflow in bit_clear_margins(). The cause of this
    problem is when and how do_vc_resize() updates vc->vc_{cols,rows}.
    
    If vc_do_resize() fails (e.g. kzalloc() fails) when var.xres or var.yres
    is going to shrink, vc->vc_{cols,rows} will not be updated. This allows
    bit_clear_margins() to see info->var.xres < (vc->vc_cols * cw) or
    info->var.yres < (vc->vc_rows * ch). Unexpectedly large rw or bh will
    try to overrun the __iomem region and causes general protection fault.
    
    Also, vc_resize(vc, 0, 0) does not set vc->vc_{cols,rows} = 0 due to
    
      new_cols = (cols ? cols : vc->vc_cols);
      new_rows = (lines ? lines : vc->vc_rows);
    
    exception. Since cols and lines are calculated as
    
      cols = FBCON_SWAP(ops->rotate, info->var.xres, info->var.yres);
      rows = FBCON_SWAP(ops->rotate, info->var.yres, info->var.xres);
      cols /= vc->vc_font.width;
      rows /= vc->vc_font.height;
      vc_resize(vc, cols, rows);
    
    in fbcon_modechanged(), var.xres < vc->vc_font.width makes cols = 0
    and var.yres < vc->vc_font.height makes rows = 0. This means that
    
      const int fd = open("/dev/fb0", O_ACCMODE);
      struct fb_var_screeninfo var = { };
      ioctl(fd, FBIOGET_VSCREENINFO, &var);
      var.xres = var.yres = 1;
      ioctl(fd, FBIOPUT_VSCREENINFO, &var);
    
    easily reproduces integer underflow bug explained above.
    
    Of course, callers of vc_resize() are not handling vc_do_resize() failure
    is bad. But we can't avoid vc_resize(vc, 0, 0) which returns 0. Therefore,
    as a band-aid workaround, this patch checks integer underflow in
    "struct fbcon_ops"->clear_margins call, assuming that
    vc->vc_cols * vc->vc_font.width and vc->vc_rows * vc->vc_font.heigh do not
    cause integer overflow.
    
    [1] https://syzkaller.appspot.com/bug?id=a565882df74fa76f10d3a6fec4be31098dbb37c6
    
    Reported-and-tested-by: syzbot <syzbot+e5fd3e65515b48c02a30@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200715015102.3814-1-penguin-kernel@I-love.SAKURA.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10f470ebdf98ce5ab314841ef81d129b0865d3d7
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Tue Jul 14 15:41:12 2020 +0300

    serial: 8250_mtk: Fix high-speed baud rates clamping
    
    commit 551e553f0d4ab623e2a6f424ab5834f9c7b5229c upstream.
    
    Commit 7b668c064ec3 ("serial: 8250: Fix max baud limit in generic 8250
    port") fixed limits of a baud rate setting for a generic 8250 port.
    In other words since that commit the baud rate has been permitted to be
    within [uartclk / 16 / UART_DIV_MAX; uartclk / 16], which is absolutely
    normal for a standard 8250 UART port. But there are custom 8250 ports,
    which provide extended baud rate limits. In particular the Mediatek 8250
    port can work with baud rates up to "uartclk" speed.
    
    Normally that and any other peculiarity is supposed to be handled in a
    custom set_termios() callback implemented in the vendor-specific
    8250-port glue-driver. Currently that is how it's done for the most of
    the vendor-specific 8250 ports, but for some reason for Mediatek a
    solution has been spread out to both the glue-driver and to the generic
    8250-port code. Due to that a bug has been introduced, which permitted the
    extended baud rate limit for all even for standard 8250-ports. The bug
    has been fixed by the commit 7b668c064ec3 ("serial: 8250: Fix max baud
    limit in generic 8250 port") by narrowing the baud rates limit back down to
    the normal bounds. Unfortunately by doing so we also broke the
    Mediatek-specific extended bauds feature.
    
    A fix of the problem described above is twofold. First since we can't get
    back the extended baud rate limits feature to the generic set_termios()
    function and that method supports only a standard baud rates range, the
    requested baud rate must be locally stored before calling it and then
    restored back to the new termios structure after the generic set_termios()
    finished its magic business. By doing so we still use the
    serial8250_do_set_termios() method to set the LCR/MCR/FCR/etc. registers,
    while the extended baud rate setting procedure will be performed later in
    the custom Mediatek-specific set_termios() callback. Second since a true
    baud rate is now fully calculated in the custom set_termios() method we
    need to locally update the port timeout by calling the
    uart_update_timeout() function. After the fixes described above are
    implemented in the 8250_mtk.c driver, the Mediatek 8250-port should
    get back to normally working with extended baud rates.
    
    Link: https://lore.kernel.org/linux-serial/20200701211337.3027448-1-danielwinkler@google.com
    
    Fixes: 7b668c064ec3 ("serial: 8250: Fix max baud limit in generic 8250 port")
    Reported-by: Daniel Winkler <danielwinkler@google.com>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: stable <stable@vger.kernel.org>
    Tested-by: Claire Chang <tientzu@chromium.org>
    Link: https://lore.kernel.org/r/20200714124113.20918-1-Sergey.Semin@baikalelectronics.ru
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1cb57a1a47df4b4e88fb01be9897681498786857
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Jul 21 14:38:52 2020 +0000

    serial: 8250: fix null-ptr-deref in serial8250_start_tx()
    
    commit f4c23a140d80ef5e6d3d1f8f57007649014b60fa upstream.
    
    I got null-ptr-deref in serial8250_start_tx():
    
    [   78.114630] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000000
    [   78.123778] Mem abort info:
    [   78.126560]   ESR = 0x86000007
    [   78.129603]   EC = 0x21: IABT (current EL), IL = 32 bits
    [   78.134891]   SET = 0, FnV = 0
    [   78.137933]   EA = 0, S1PTW = 0
    [   78.141064] user pgtable: 64k pages, 48-bit VAs, pgdp=00000027d41a8600
    [   78.147562] [0000000000000000] pgd=00000027893f0003, p4d=00000027893f0003, pud=00000027893f0003, pmd=00000027c9a20003, pte=0000000000000000
    [   78.160029] Internal error: Oops: 86000007 [#1] SMP
    [   78.164886] Modules linked in: sunrpc vfat fat aes_ce_blk crypto_simd cryptd aes_ce_cipher crct10dif_ce ghash_ce sha2_ce sha256_arm64 sha1_ce ses enclosure sg sbsa_gwdt ipmi_ssif spi_dw_mmio sch_fq_codel vhost_net tun vhost vhost_iotlb tap ip_tables ext4 mbcache jbd2 ahci hisi_sas_v3_hw libahci hisi_sas_main libsas hns3 scsi_transport_sas hclge libata megaraid_sas ipmi_si hnae3 ipmi_devintf ipmi_msghandler br_netfilter bridge stp llc nvme nvme_core xt_sctp sctp libcrc32c dm_mod nbd
    [   78.207383] CPU: 11 PID: 23258 Comm: null-ptr Not tainted 5.8.0-rc6+ #48
    [   78.214056] Hardware name: Huawei TaiShan 2280 V2/BC82AMDC, BIOS 2280-V2 CS V3.B210.01 03/12/2020
    [   78.222888] pstate: 80400089 (Nzcv daIf +PAN -UAO BTYPE=--)
    [   78.228435] pc : 0x0
    [   78.230618] lr : serial8250_start_tx+0x160/0x260
    [   78.235215] sp : ffff800062eefb80
    [   78.238517] x29: ffff800062eefb80 x28: 0000000000000fff
    [   78.243807] x27: ffff800062eefd80 x26: ffff202fd83b3000
    [   78.249098] x25: ffff800062eefd80 x24: ffff202fd83b3000
    [   78.254388] x23: ffff002fc5e50be8 x22: 0000000000000002
    [   78.259679] x21: 0000000000000001 x20: 0000000000000000
    [   78.264969] x19: ffffa688827eecc8 x18: 0000000000000000
    [   78.270259] x17: 0000000000000000 x16: 0000000000000000
    [   78.275550] x15: ffffa68881bc67a8 x14: 00000000000002e6
    [   78.280841] x13: ffffa68881bc67a8 x12: 000000000000c539
    [   78.286131] x11: d37a6f4de9bd37a7 x10: ffffa68881cccff0
    [   78.291421] x9 : ffffa68881bc6000 x8 : ffffa688819daa88
    [   78.296711] x7 : ffffa688822a0f20 x6 : ffffa688819e0000
    [   78.302002] x5 : ffff800062eef9d0 x4 : ffffa68881e707a8
    [   78.307292] x3 : 0000000000000000 x2 : 0000000000000002
    [   78.312582] x1 : 0000000000000001 x0 : ffffa688827eecc8
    [   78.317873] Call trace:
    [   78.320312]  0x0
    [   78.322147]  __uart_start.isra.9+0x64/0x78
    [   78.326229]  uart_start+0xb8/0x1c8
    [   78.329620]  uart_flush_chars+0x24/0x30
    [   78.333442]  n_tty_receive_buf_common+0x7b0/0xc30
    [   78.338128]  n_tty_receive_buf+0x44/0x2c8
    [   78.342122]  tty_ioctl+0x348/0x11f8
    [   78.345599]  ksys_ioctl+0xd8/0xf8
    [   78.348903]  __arm64_sys_ioctl+0x2c/0xc8
    [   78.352812]  el0_svc_common.constprop.2+0x88/0x1b0
    [   78.357583]  do_el0_svc+0x44/0xd0
    [   78.360887]  el0_sync_handler+0x14c/0x1d0
    [   78.364880]  el0_sync+0x140/0x180
    [   78.368185] Code: bad PC value
    
    SERIAL_PORT_DFNS is not defined on each arch, if it's not defined,
    serial8250_set_defaults() won't be called in serial8250_isa_init_ports(),
    so the p->serial_in pointer won't be initialized, and it leads a null-ptr-deref.
    Fix this problem by calling serial8250_set_defaults() after init uart port.
    
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200721143852.4058352-1-yangyingliang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d950856b42ae3f7ead2565d9655058ff3c77bf85
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jul 17 15:52:56 2020 +0100

    staging: comedi: addi_apci_1564: check INSN_CONFIG_DIGITAL_TRIG shift
    
    commit 926234f1b8434c4409aa4c53637aa3362ca07cea upstream.
    
    The `INSN_CONFIG` comedi instruction with sub-instruction code
    `INSN_CONFIG_DIGITAL_TRIG` includes a base channel in `data[3]`. This is
    used as a right shift amount for other bitmask values without being
    checked.  Shift amounts greater than or equal to 32 will result in
    undefined behavior.  Add code to deal with this.
    
    Fixes: 1e15687ea472 ("staging: comedi: addi_apci_1564: add Change-of-State interrupt subdevice and required functions")
    Cc: <stable@vger.kernel.org> #3.17+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200717145257.112660-4-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2200a6d330037e4cf5da5628c34f5f5d7a81dd4f
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jul 17 15:52:57 2020 +0100

    staging: comedi: addi_apci_1500: check INSN_CONFIG_DIGITAL_TRIG shift
    
    commit fc846e9db67c7e808d77bf9e2ef3d49e3820ce5d upstream.
    
    The `INSN_CONFIG` comedi instruction with sub-instruction code
    `INSN_CONFIG_DIGITAL_TRIG` includes a base channel in `data[3]`. This is
    used as a right shift amount for other bitmask values without being
    checked.  Shift amounts greater than or equal to 32 will result in
    undefined behavior.  Add code to deal with this, adjusting the checks
    for invalid channels so that enabled channel bits that would have been
    lost by shifting are also checked for validity.  Only channels 0 to 15
    are valid.
    
    Fixes: a8c66b684efaf ("staging: comedi: addi_apci_1500: rewrite the subdevice support functions")
    Cc: <stable@vger.kernel.org> #4.0+: ef75e14a6c93: staging: comedi: verify array index is correct before using it
    Cc: <stable@vger.kernel.org> #4.0+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200717145257.112660-5-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e116face1155398ac49cf3d6ead5daea3417215d
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jul 17 15:52:54 2020 +0100

    staging: comedi: ni_6527: fix INSN_CONFIG_DIGITAL_TRIG support
    
    commit f07804ec77d77f8a9dcf570a24154e17747bc82f upstream.
    
    `ni6527_intr_insn_config()` processes `INSN_CONFIG` comedi instructions
    for the "interrupt" subdevice.  When `data[0]` is
    `INSN_CONFIG_DIGITAL_TRIG` it is configuring the digital trigger.  When
    `data[2]` is `COMEDI_DIGITAL_TRIG_ENABLE_EDGES` it is configuring rising
    and falling edge detection for the digital trigger, using a base channel
    number (or shift amount) in `data[3]`, a rising edge bitmask in
    `data[4]` and falling edge bitmask in `data[5]`.
    
    If the base channel number (shift amount) is greater than or equal to
    the number of channels (24) of the digital input subdevice, there are no
    changes to the rising and falling edges, so the mask of channels to be
    changed can be set to 0, otherwise the mask of channels to be changed,
    and the rising and falling edge bitmasks are shifted by the base channel
    number before calling `ni6527_set_edge_detection()` to change the
    appropriate registers.  Unfortunately, the code is comparing the base
    channel (shift amount) to the interrupt subdevice's number of channels
    (1) instead of the digital input subdevice's number of channels (24).
    Fix it by comparing to 32 because all shift amounts for an `unsigned
    int` must be less than that and everything from bit 24 upwards is
    ignored by `ni6527_set_edge_detection()` anyway.
    
    Fixes: 110f9e687c1a8 ("staging: comedi: ni_6527: support INSN_CONFIG_DIGITAL_TRIG")
    Cc: <stable@vger.kernel.org> # 3.17+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200717145257.112660-2-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c3b12756a8eb2ce200ca2ebd96943b7504f4fe6
Author: Ian Abbott <abbotti@mev.co.uk>
Date:   Fri Jul 17 15:52:55 2020 +0100

    staging: comedi: addi_apci_1032: check INSN_CONFIG_DIGITAL_TRIG shift
    
    commit 0bd0db42a030b75c20028c7ba6e327b9cb554116 upstream.
    
    The `INSN_CONFIG` comedi instruction with sub-instruction code
    `INSN_CONFIG_DIGITAL_TRIG` includes a base channel in `data[3]`. This is
    used as a right shift amount for other bitmask values without being
    checked.  Shift amounts greater than or equal to 32 will result in
    undefined behavior.  Add code to deal with this.
    
    Fixes: 33cdce6293dcc ("staging: comedi: addi_apci_1032: conform to new INSN_CONFIG_DIGITAL_TRIG")
    Cc: <stable@vger.kernel.org> #3.8+
    Signed-off-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200717145257.112660-3-abbotti@mev.co.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b6488b8c614851b29eaaaba35f637436ba9cbfd8
Author: Rustam Kovhaev <rkovhaev@gmail.com>
Date:   Wed Jul 22 09:10:52 2020 -0700

    staging: wlan-ng: properly check endpoint types
    
    commit faaff9765664009c1c7c65551d32e9ed3b1dda8f upstream.
    
    As syzkaller detected, wlan-ng driver does not do sanity check of
    endpoints in prism2sta_probe_usb(), add check for xfer direction and type
    
    Reported-and-tested-by: syzbot+c2a1fa67c02faa0de723@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=c2a1fa67c02faa0de723
    Signed-off-by: Rustam Kovhaev <rkovhaev@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200722161052.999754-1-rkovhaev@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e71e1ea4c1ff189506bc997856d47262829abc4e
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Jul 23 14:41:29 2020 -0500

    Revert "cifs: Fix the target file was deleted when rename failed."
    
    commit 0e6705182d4e1b77248a93470d6d7b3013d59b30 upstream.
    
    This reverts commit 9ffad9263b467efd8f8dc7ae1941a0a655a2bab2.
    
    Upon additional testing with older servers, it was found that
    the original commit introduced a regression when using the old SMB1
    dialect and rsyncing over an existing file.
    
    The patch will need to be respun to address this, likely including
    a larger refactoring of the SMB1 and SMB3 rename code paths to make
    it less confusing and also to address some additional rename error
    cases that SMB3 may be able to workaround.
    
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reported-by: Patrick Fernie <patrick.fernie@gmail.com>
    CC: Stable <stable@vger.kernel.org>
    Acked-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Acked-by: Pavel Shilovsky <pshilov@microsoft.com>
    Acked-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 831401e853b9567824cc273cdd576c967ecb9f6b
Author: Forest Crossman <cyrozap@gmail.com>
Date:   Fri Jul 17 06:27:34 2020 -0500

    usb: xhci: Fix ASM2142/ASM3142 DMA addressing
    
    commit dbb0897e805f2ab1b8bc358f6c3d878a376b8897 upstream.
    
    The ASM2142/ASM3142 (same PCI IDs) does not support full 64-bit DMA
    addresses, which can cause silent memory corruption or IOMMU errors on
    platforms that use the upper bits. Add the XHCI_NO_64BIT_SUPPORT quirk
    to fix this issue.
    
    Signed-off-by: Forest Crossman <cyrozap@gmail.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200717112734.328432-1-cyrozap@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b75ca8fc0bbe93258a6326bd28cf7a143a0393d7
Author: Chunfeng Yun <chunfeng.yun@mediatek.com>
Date:   Fri Jul 10 13:57:52 2020 +0800

    usb: xhci-mtk: fix the failure of bandwidth allocation
    
    commit 5ce1a24dd98c00a57a8fa13660648abf7e08e3ef upstream.
    
    The wMaxPacketSize field of endpoint descriptor may be zero
    as default value in alternate interface, and they are not
    actually selected when start stream, so skip them when try to
    allocate bandwidth.
    
    Cc: stable <stable@vger.kernel.org>
    Fixes: 0cbd4b34cda9 ("xhci: mediatek: support MTK xHCI host controller")
    Signed-off-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Link: https://lore.kernel.org/r/1594360672-2076-1-git-send-email-chunfeng.yun@mediatek.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c97ab06677b193c0a73689ea6594016e56ca7bb2
Author: Tetsuo Handa <penguin-kernel@i-love.sakura.ne.jp>
Date:   Fri Jul 17 00:12:15 2020 +0900

    binder: Don't use mmput() from shrinker function.
    
    commit f867c771f98891841c217fa8459244ed0dd28921 upstream.
    
    syzbot is reporting that mmput() from shrinker function has a risk of
    deadlock [1], for delayed_uprobe_add() from update_ref_ctr() calls
    kzalloc(GFP_KERNEL) with delayed_uprobe_lock held, and
    uprobe_clear_state() from __mmput() also holds delayed_uprobe_lock.
    
    Commit a1b2289cef92ef0e ("android: binder: drop lru lock in isolate
    callback") replaced mmput() with mmput_async() in order to avoid sleeping
    with spinlock held. But this patch replaces mmput() with mmput_async() in
    order not to start __mmput() from shrinker context.
    
    [1] https://syzkaller.appspot.com/bug?id=bc9e7303f537c41b2b0cc2dfcea3fc42964c2d45
    
    Reported-by: syzbot <syzbot+1068f09c44d151250c33@syzkaller.appspotmail.com>
    Reported-by: syzbot <syzbot+e5344baa319c9a96edec@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Reviewed-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Todd Kjos <tkjos@google.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/4ba9adb2-43f5-2de0-22de-f6075c1fab50@i-love.sakura.ne.jp
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 61759007f21734d0d527ad73834e903b6c7b3dd7
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed May 27 15:53:46 2020 +0200

    x86: math-emu: Fix up 'cmp' insn for clang ias
    
    [ Upstream commit 81e96851ea32deb2c921c870eecabf335f598aeb ]
    
    The clang integrated assembler requires the 'cmp' instruction to
    have a length prefix here:
    
    arch/x86/math-emu/wm_sqrt.S:212:2: error: ambiguous instructions require an explicit suffix (could be 'cmpb', 'cmpw', or 'cmpl')
     cmp $0xffffffff,-24(%ebp)
     ^
    
    Make this a 32-bit comparison, which it was clearly meant to be.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Link: https://lkml.kernel.org/r/20200527135352.1198078-1-arnd@arndb.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit faffe1b9d1ea975b4cd4573a07a7eba2e7c99c0f
Author: Will Deacon <will@kernel.org>
Date:   Thu Feb 13 12:12:26 2020 +0000

    arm64: Use test_tsk_thread_flag() for checking TIF_SINGLESTEP
    
    [ Upstream commit 5afc78551bf5d53279036e0bf63314e35631d79f ]
    
    Rather than open-code test_tsk_thread_flag() at each callsite, simply
    replace the couple of offenders with calls to test_tsk_thread_flag()
    directly.
    
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8eeb5dfd94947189fded395f89d83f71a97f8aad
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Fri Jun 26 16:17:47 2020 +0300

    usb: gadget: udc: gr_udc: fix memleak on error handling path in gr_ep_init()
    
    [ Upstream commit c8f8529e2c4141afa2ebb487ad48e8a6ec3e8c99 ]
    
    gr_ep_init() does not assign the allocated request anywhere if allocation
    of memory for the buffer fails. This is a memory leak fixed by the given
    patch.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fe750c11023366a0ce7e4c2177df0ab17c35e4d2
Author: Ilya Katsnelson <me@0upti.me>
Date:   Mon Jul 6 15:27:43 2020 -0700

    Input: synaptics - enable InterTouch for ThinkPad X1E 1st gen
    
    [ Upstream commit dcb00fc799dc03fd320e123e4c81b3278c763ea5 ]
    
    Tested on my own laptop, touchpad feels slightly more responsive with
    this on, though it might just be placebo.
    
    Signed-off-by: Ilya Katsnelson <me@0upti.me>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://lore.kernel.org/r/20200703143457.132373-1-me@0upti.me
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d4ae5a626e164b1ab02c9c531e5e9b097a25947c
Author: Leonid Ravich <Leonid.Ravich@emc.com>
Date:   Wed Jul 1 21:48:12 2020 +0300

    dmaengine: ioat setting ioat timeout as module parameter
    
    [ Upstream commit 87730ccbddcb48478b1b88e88b14e73424130764 ]
    
    DMA transaction time to completion is a function of PCI bandwidth,
    transaction size and a queue depth.  So hard coded value for timeouts
    might be wrong for some scenarios.
    
    Signed-off-by: Leonid Ravich <Leonid.Ravich@emc.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Link: https://lore.kernel.org/r/20200701184816.29138-1-leonid.ravich@dell.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 75d4eb02f3bf52bf7fd020d123f1261906e0afa8
Author: Evgeny Novikov <novikov@ispras.ru>
Date:   Fri Jul 3 14:15:18 2020 +0300

    hwmon: (aspeed-pwm-tacho) Avoid possible buffer overflow
    
    [ Upstream commit bc4071aafcf4d0535ee423b69167696d6c03207d ]
    
    aspeed_create_fan() reads a pwm_port value using of_property_read_u32().
    If pwm_port will be more than ARRAY_SIZE(pwm_port_params), there will be
    a buffer overflow in
    aspeed_create_pwm_port()->aspeed_set_pwm_port_enable(). The patch fixes
    the potential buffer overflow.
    
    Found by Linux Driver Verification project (linuxtesting.org).
    
    Signed-off-by: Evgeny Novikov <novikov@ispras.ru>
    Link: https://lore.kernel.org/r/20200703111518.9644-1-novikov@ispras.ru
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8066e76327d6309337671b6a6c856fca471dce6c
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Fri Jul 3 12:33:15 2020 +0200

    regmap: dev_get_regmap_match(): fix string comparison
    
    [ Upstream commit e84861fec32dee8a2e62bbaa52cded6b05a2a456 ]
    
    This function is used by dev_get_regmap() to retrieve a regmap for the
    specified device. If the device has more than one regmap, the name parameter
    can be used to specify one.
    
    The code here uses a pointer comparison to check for equal strings. This
    however will probably always fail, as the regmap->name is allocated via
    kstrdup_const() from the regmap's config->name.
    
    Fix this by using strcmp() instead.
    
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Link: https://lore.kernel.org/r/20200703103315.267996-1-mkl@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edb2ea95f514bc924db4e61ce88ee31d0c79a65e
Author: leilk.liu <leilk.liu@mediatek.com>
Date:   Wed Jul 1 17:00:20 2020 +0800

    spi: mediatek: use correct SPI_CFG2_REG MACRO
    
    [ Upstream commit 44b37eb79e16a56cb30ba55b2da452396b941e7a ]
    
    this patch use correct SPI_CFG2_REG offset.
    
    Signed-off-by: leilk.liu <leilk.liu@mediatek.com>
    Link: https://lore.kernel.org/r/20200701090020.7935-1-leilk.liu@mediatek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 765f92b16ecdb371ed9b31e332618970c2bc8194
Author: Merlijn Wajer <merlijn@wizzup.org>
Date:   Tue Jun 30 11:47:04 2020 -0700

    Input: add `SW_MACHINE_COVER`
    
    [ Upstream commit c463bb2a8f8d7d97aa414bf7714fc77e9d3b10df ]
    
    This event code represents the state of a removable cover of a device.
    Value 0 means that the cover is open or removed, value 1 means that the
    cover is closed.
    
    Reviewed-by: Sebastian Reichel <sebastian.reichel@collabora.com>
    Acked-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Merlijn Wajer <merlijn@wizzup.org>
    Link: https://lore.kernel.org/r/20200612125402.18393-2-merlijn@wizzup.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db00b6eba748531cf4f8124b3f1bf264a1e8b5dd
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Wed Jun 24 14:46:26 2020 +0800

    dmaengine: tegra210-adma: Fix runtime PM imbalance on error
    
    [ Upstream commit 5b78fac4b1ba731cf4177fdbc1e3a4661521bcd0 ]
    
    pm_runtime_get_sync() increments the runtime PM usage counter even
    when it returns an error code. Thus a pairing decrement is needed on
    the error handling path to keep the counter balanced.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20200624064626.19855-1-dinghao.liu@zju.edu.cn
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7838ea8dc70d860cdbb1b62d8b54d173e86c9afa
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Jun 20 14:32:29 2020 +0200

    HID: apple: Disable Fn-key key-re-mapping on clone keyboards
    
    [ Upstream commit a5d81646fa294eed57786a9310b06ca48902adf8 ]
    
    The Maxxter KB-BT-001 Bluetooth keyboard, which looks somewhat like the
    Apple Wireless Keyboard, is using the vendor and product IDs (05AC:0239)
    of the Apple Wireless Keyboard (2009 ANSI version) <sigh>.
    
    But its F1 - F10 keys are marked as sending F1 - F10, not the special
    functions hid-apple.c maps them too; and since its descriptors do not
    contain the HID_UP_CUSTOM | 0x0003 usage apple-hid looks for for the
    Fn-key, apple_setup_input() never gets called, so F1 - F6 are mapped
    to key-codes which have not been set in the keybit array causing them
    to not send any events at all.
    
    The lack of a usage code matching the Fn key in the clone is actually
    useful as this allows solving this problem in a generic way.
    
    This commits adds a fn_found flag and it adds a input_configured
    callback which checks if this flag is set once all usages have been
    mapped. If it is not set, then assume this is a clone and clear the
    quirks bitmap so that the hid-apple code does not add any special
    handling to this keyboard.
    
    This fixes F1 - F6 not sending anything at all and F7 - F12 sending
    the wrong codes on the Maxxter KB-BT-001 Bluetooth keyboard and on
    similar clones.
    
    Cc: Joao Moreno <mail@joaomoreno.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d2d4d4a598e528eeb4aafbdd0e25c6255cf1c319
Author: Federico Ricchiuto <fed.ricchiuto@gmail.com>
Date:   Mon Jun 15 22:49:11 2020 +0200

    HID: i2c-hid: add Mediacom FlexBook edge13 to descriptor override
    
    [ Upstream commit 43e666acb79f3d355dd89bf20f4d25d3b15da13e ]
    
    The Mediacom FlexBook edge13 uses the SIPODEV SP1064 touchpad, which does not
    supply descriptors, so it has to be added to the override list.
    
    Signed-off-by: Federico Ricchiuto <fed.ricchiuto@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86f5ec803f1e5ac3530b1a9c07cbe605d2ae8b12
Author: Pi-Hsun Shih <pihsun@chromium.org>
Date:   Thu Jul 23 21:15:43 2020 -0700

    scripts/decode_stacktrace: strip basepath from all paths
    
    [ Upstream commit d178770d8d21489abf5bafefcbb6d5243b482e9a ]
    
    Currently the basepath is removed only from the beginning of the string.
    When the symbol is inlined and there's multiple line outputs of
    addr2line, only the first line would have basepath removed.
    
    Change to remove the basepath prefix from all lines.
    
    Fixes: 31013836a71e ("scripts/decode_stacktrace: match basepath using shell prefix operator, not regex")
    Co-developed-by: Shik Chen <shik@chromium.org>
    Signed-off-by: Pi-Hsun Shih <pihsun@chromium.org>
    Signed-off-by: Shik Chen <shik@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Nicolas Boichat <drinkcat@chromium.org>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Link: http://lkml.kernel.org/r/20200720082709.252805-1-pihsun@chromium.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76f88effa904034f0cd8a0dc2326949d8d95cd7c
Author: Matthew Howell <matthew.howell@sealevel.com>
Date:   Wed Jul 22 16:11:24 2020 -0400

    serial: exar: Fix GPIO configuration for Sealevel cards based on XR17V35X
    
    [ Upstream commit 5fdbe136ae19ab751daaa4d08d9a42f3e30d17f9 ]
    
    Sealevel XR17V35X based devices are inoperable on kernel versions
    4.11 and above due to a change in the GPIO preconfiguration introduced in
    commit
    7dea8165f1d. This patch fixes this by preconfiguring the GPIO on Sealevel
    cards to the value (0x00) used prior to commit 7dea8165f1d
    
    With GPIOs preconfigured as per commit 7dea8165f1d all ports on
    Sealevel XR17V35X based devices become stuck in high impedance
    mode, regardless of dip-switch or software configuration. This
    causes the device to become effectively unusable. This patch (in
    various forms) has been distributed to our customers and no issues
    related to it have been reported.
    
    Fixes: 7dea8165f1d6 ("serial: exar: Preconfigure xr17v35x MPIOs as output")
    Signed-off-by: Matthew Howell <matthew.howell@sealevel.com>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2007221605270.13247@tstest-VirtualBox
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c145bf739db6e99ef38e478ada3a61ec45ccb2b
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jul 22 16:31:54 2020 -0700

    bonding: check return value of register_netdevice() in bond_newlink()
    
    [ Upstream commit c75d1d5248c0c97996051809ad0e9f154ba5d76e ]
    
    Very similar to commit 544f287b8495
    ("bonding: check error value of register_netdevice() immediately"),
    we should immediately check the return value of register_netdevice()
    before doing anything else.
    
    Fixes: 005db31d5f5f ("bonding: set carrier off for devices created through netlink")
    Reported-and-tested-by: syzbot+bbc3a11c4da63c1b74d6@syzkaller.appspotmail.com
    Cc: Beniamino Galvani <bgalvani@redhat.com>
    Cc: Taehee Yoo <ap420073@gmail.com>
    Cc: Jay Vosburgh <j.vosburgh@gmail.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a3185629eccef3de0eae6135d55f1dce6f7e78e
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Sat Jul 4 15:38:29 2020 +0200

    i2c: rcar: always clear ICSAR to avoid side effects
    
    [ Upstream commit eb01597158ffb1853a7a7fc2c57d4c844640f75e ]
    
    On R-Car Gen2, we get a timeout when reading from the address set in
    ICSAR, even though the slave interface is disabled. Clearing it fixes
    this situation. Note that Gen3 is not affected.
    
    To reproduce: bind and undbind an I2C slave on some bus, run
    'i2cdetect' on that bus.
    
    Fixes: de20d1857dd6 ("i2c: rcar: add slave support")
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c4ae7911d97d362bcc9fc76a03d9fa7081eb8da
Author: guodeqing <geffrey.guo@huawei.com>
Date:   Thu Jul 16 16:12:08 2020 +0800

    ipvs: fix the connection sync failed in some cases
    
    [ Upstream commit 8210e344ccb798c672ab237b1a4f241bda08909b ]
    
    The sync_thread_backup only checks sk_receive_queue is empty or not,
    there is a situation which cannot sync the connection entries when
    sk_receive_queue is empty and sk_rmem_alloc is larger than sk_rcvbuf,
    the sync packets are dropped in __udp_enqueue_schedule_skb, this is
    because the packets in reader_queue is not read, so the rmem is
    not reclaimed.
    
    Here I add the check of whether the reader_queue of the udp sock is
    empty or not to solve this problem.
    
    Fixes: 2276f58ac589 ("udp: use a separate rx queue for packet reception")
    Reported-by: zhouxudong <zhouxudong8@huawei.com>
    Signed-off-by: guodeqing <geffrey.guo@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1fb18011e876fae4f280909d7ba308de1da90de1
Author: Liu Jian <liujian56@huawei.com>
Date:   Mon Jul 20 22:31:49 2020 +0800

    mlxsw: destroy workqueue when trap_register in mlxsw_emad_init
    
    [ Upstream commit 5dbaeb87f2b309936be0aeae00cbc9e7f20ab296 ]
    
    When mlxsw_core_trap_register fails in mlxsw_emad_init,
    destroy_workqueue() shouled be called to destroy mlxsw_core->emad_wq.
    
    Fixes: d965465b60ba ("mlxsw: core: Fix possible deadlock")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e81e20e2b015618263f1d14ed7318d6f014fcb4
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sun Jul 19 12:11:24 2020 +0000

    bonding: check error value of register_netdevice() immediately
    
    [ Upstream commit 544f287b84959203367cd29e16e772717612fab4 ]
    
    If register_netdevice() is failed, net_device should not be used
    because variables are uninitialized or freed.
    So, the routine should be stopped immediately.
    But, bond_create() doesn't check return value of register_netdevice()
    immediately. That will result in a panic because of using uninitialized
    or freed memory.
    
    Test commands:
        modprobe netdev-notifier-error-inject
        echo -22 > /sys/kernel/debug/notifier-error-inject/netdev/\
    actions/NETDEV_REGISTER/error
        modprobe bonding max_bonds=3
    
    Splat looks like:
    [  375.028492][  T193] general protection fault, probably for non-canonical address 0x6b6b6b6b6b6b6b6b: 0000 [#1] SMP DEBUG_PAGEALLOC PTI
    [  375.033207][  T193] CPU: 2 PID: 193 Comm: kworker/2:2 Not tainted 5.8.0-rc4+ #645
    [  375.036068][  T193] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    [  375.039673][  T193] Workqueue: events linkwatch_event
    [  375.041557][  T193] RIP: 0010:dev_activate+0x4a/0x340
    [  375.043381][  T193] Code: 40 a8 04 0f 85 db 00 00 00 8b 83 08 04 00 00 85 c0 0f 84 0d 01 00 00 31 d2 89 d0 48 8d 04 40 48 c1 e0 07 48 03 83 00 04 00 00 <48> 8b 48 10 f6 41 10 01 75 08 f0 80 a1 a0 01 00 00 fd 48 89 48 08
    [  375.050267][  T193] RSP: 0018:ffff9f8facfcfdd8 EFLAGS: 00010202
    [  375.052410][  T193] RAX: 6b6b6b6b6b6b6b6b RBX: ffff9f8fae6ea000 RCX: 0000000000000006
    [  375.055178][  T193] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff9f8fae6ea000
    [  375.057762][  T193] RBP: ffff9f8fae6ea000 R08: 0000000000000000 R09: 0000000000000000
    [  375.059810][  T193] R10: 0000000000000001 R11: 0000000000000000 R12: ffff9f8facfcfe08
    [  375.061892][  T193] R13: ffffffff883587e0 R14: 0000000000000000 R15: ffff9f8fae6ea580
    [  375.063931][  T193] FS:  0000000000000000(0000) GS:ffff9f8fbae00000(0000) knlGS:0000000000000000
    [  375.066239][  T193] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  375.067841][  T193] CR2: 00007f2f542167a0 CR3: 000000012cee6002 CR4: 00000000003606e0
    [  375.069657][  T193] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  375.071471][  T193] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  375.073269][  T193] Call Trace:
    [  375.074005][  T193]  linkwatch_do_dev+0x4d/0x50
    [  375.075052][  T193]  __linkwatch_run_queue+0x10b/0x200
    [  375.076244][  T193]  linkwatch_event+0x21/0x30
    [  375.077274][  T193]  process_one_work+0x252/0x600
    [  375.078379][  T193]  ? process_one_work+0x600/0x600
    [  375.079518][  T193]  worker_thread+0x3c/0x380
    [  375.080534][  T193]  ? process_one_work+0x600/0x600
    [  375.081668][  T193]  kthread+0x139/0x150
    [  375.082567][  T193]  ? kthread_park+0x90/0x90
    [  375.083567][  T193]  ret_from_fork+0x22/0x30
    
    Fixes: e826eafa65c6 ("bonding: Call netif_carrier_off after register_netdevice")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32fc8367fb3a726fd7e96ddb2c22053342a22f08
Author: Wang Hai <wanghai38@huawei.com>
Date:   Thu Jul 16 11:50:38 2020 +0800

    net: smc91x: Fix possible memory leak in smc_drv_probe()
    
    [ Upstream commit bca9749b1aa23d964d3ab930938af66dbf887f15 ]
    
    If try_toggle_control_gpio() failed in smc_drv_probe(), free_netdev(ndev)
    should be called to free the ndev created earlier. Otherwise, a memleak
    will occur.
    
    Fixes: 7d2911c43815 ("net: smc91x: Fix gpios for device tree based booting")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e753c5170b9add52e85478ab79152b86a107466
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Sat Jul 11 09:10:30 2020 +0800

    drm: sun4i: hdmi: Fix inverted HPD result
    
    [ Upstream commit baa1841eb797eadce6c907bdaed7cd6f01815404 ]
    
    When the extra HPD polling in sun4i_hdmi was removed, the result of
    HPD was accidentally inverted.
    
    Fix this by inverting the check.
    
    Fixes: bda8eaa6dee7 ("drm: sun4i: hdmi: Remove extra HPD polling")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Tested-by: Mans Rullgard <mans@mansr.com>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200711011030.21997-1-wens@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0cde5c797b960b41b3d2b67e7c72a5a2ad8eac5
Author: Sergey Organov <sorganov@gmail.com>
Date:   Wed Jul 15 19:10:00 2020 +0300

    net: dp83640: fix SIOCSHWTSTAMP to update the struct with actual configuration
    
    [ Upstream commit 473309fb8372365ad211f425bca760af800e10a7 ]
    
    From Documentation/networking/timestamping.txt:
    
      A driver which supports hardware time stamping shall update the
      struct with the actual, possibly more permissive configuration.
    
    Do update the struct passed when we upscale the requested time
    stamping mode.
    
    Fixes: cb646e2b02b2 ("ptp: Added a clock driver for the National Semiconductor PHYTER.")
    Signed-off-by: Sergey Organov <sorganov@gmail.com>
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a72efa55fd648e1ef3d7a3c44ef5b13b42e3d0f
Author: George Kennedy <george.kennedy@oracle.com>
Date:   Wed Jul 15 09:59:31 2020 -0400

    ax88172a: fix ax88172a_unbind() failures
    
    [ Upstream commit c28d9a285668c799eeae2f7f93e929a6028a4d6d ]
    
    If ax88172a_unbind() fails, make sure that the return code is
    less than zero so that cleanup is done properly and avoid UAF.
    
    Fixes: a9a51bd727d1 ("ax88172a: fix information leak on short answers")
    Signed-off-by: George Kennedy <george.kennedy@oracle.com>
    Reported-by: syzbot+4cd84f527bf4a10fc9c1@syzkaller.appspotmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddfd9557da3745e84ee69aa982390364c7bfc267
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Tue Jul 14 13:00:27 2020 +0200

    hippi: Fix a size used in a 'pci_free_consistent()' in an error handling path
    
    [ Upstream commit 3195c4706b00106aa82c73acd28340fa8fc2bfc1 ]
    
    The size used when calling 'pci_alloc_consistent()' and
    'pci_free_consistent()' should match.
    
    Fix it and have it consistent with the corresponding call in 'rr_close()'.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e03a2056a07645ccddd1d3e9569abe3ae65d743e
Author: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
Date:   Sat Jul 11 20:48:23 2020 -0400

    bnxt_en: Fix race when modifying pause settings.
    
    [ Upstream commit 163e9ef63641a02de4c95cd921577265c52e1ce2 ]
    
    The driver was modified to not rely on rtnl lock to protect link
    settings about 2 years ago.  The pause setting was missed when
    making that change.  Fix it by acquiring link_lock mutex before
    calling bnxt_hwrm_set_pause().
    
    Fixes: e2dc9b6e38fa ("bnxt_en: Don't use rtnl lock to protect link change logic in workqueue.")
    Signed-off-by: Vasundhara Volam <vasundhara-v.volam@broadcom.com>
    Reviewed-by: Edwin Peer <edwin.peer@broadcom.com>
    Signed-off-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7682e814c9b1465071aacc0bf27ea3a6c1676c8
Author: Robbie Ko <robbieko@synology.com>
Date:   Mon Jul 20 09:42:09 2020 +0800

    btrfs: fix page leaks after failure to lock page for delalloc
    
    commit 5909ca110b29aa16b23b52b8de8d3bb1035fd738 upstream.
    
    When locking pages for delalloc, we check if it's dirty and mapping still
    matches. If it does not match, we need to return -EAGAIN and release all
    pages. Only the current page was put though, iterate over all the
    remaining pages too.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Signed-off-by: Robbie Ko <robbieko@synology.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d625145a4bef0ffd14503e055f6b51a7e20bf9b5
Author: Boris Burkov <boris@bur.io>
Date:   Thu Jul 16 13:29:46 2020 -0700

    btrfs: fix mount failure caused by race with umount
    
    commit 48cfa61b58a1fee0bc49eef04f8ccf31493b7cdd upstream.
    
    It is possible to cause a btrfs mount to fail by racing it with a slow
    umount. The crux of the sequence is generic_shutdown_super not yet
    calling sop->put_super before btrfs_mount_root calls btrfs_open_devices.
    If that occurs, btrfs_open_devices will decide the opened counter is
    non-zero, increment it, and skip resetting fs_devices->total_rw_bytes to
    0. From here, mount will call sget which will result in grab_super
    trying to take the super block umount semaphore. That semaphore will be
    held by the slow umount, so mount will block. Before up-ing the
    semaphore, umount will delete the super block, resulting in mount's sget
    reliably allocating a new one, which causes the mount path to dutifully
    fill it out, and increment total_rw_bytes a second time, which causes
    the mount to fail, as we see double the expected bytes.
    
    Here is the sequence laid out in greater detail:
    
    CPU0                                                    CPU1
    down_write sb->s_umount
    btrfs_kill_super
      kill_anon_super(sb)
        generic_shutdown_super(sb);
          shrink_dcache_for_umount(sb);
          sync_filesystem(sb);
          evict_inodes(sb); // SLOW
    
                                                  btrfs_mount_root
                                                    btrfs_scan_one_device
                                                    fs_devices = device->fs_devices
                                                    fs_info->fs_devices = fs_devices
                                                    // fs_devices-opened makes this a no-op
                                                    btrfs_open_devices(fs_devices, mode, fs_type)
                                                    s = sget(fs_type, test, set, flags, fs_info);
                                                      find sb in s_instances
                                                      grab_super(sb);
                                                        down_write(&s->s_umount); // blocks
    
          sop->put_super(sb)
            // sb->fs_devices->opened == 2; no-op
          spin_lock(&sb_lock);
          hlist_del_init(&sb->s_instances);
          spin_unlock(&sb_lock);
          up_write(&sb->s_umount);
                                                        return 0;
                                                      retry lookup
                                                      don't find sb in s_instances (deleted by CPU0)
                                                      s = alloc_super
                                                      return s;
                                                    btrfs_fill_super(s, fs_devices, data)
                                                      open_ctree // fs_devices total_rw_bytes improperly set!
                                                        btrfs_read_chunk_tree
                                                          read_one_dev // increment total_rw_bytes again!!
                                                          super_total_bytes < fs_devices->total_rw_bytes // ERROR!!!
    
    To fix this, we clear total_rw_bytes from within btrfs_read_chunk_tree
    before the calls to read_one_dev, while holding the sb umount semaphore
    and the uuid mutex.
    
    To reproduce, it is sufficient to dirty a decent number of inodes, then
    quickly umount and mount.
    
      for i in $(seq 0 500)
      do
        dd if=/dev/zero of="/mnt/foo/$i" bs=1M count=1
      done
      umount /mnt/foo&
      mount /mnt/foo
    
    does the trick for me.
    
    CC: stable@vger.kernel.org # 4.4+
    Signed-off-by: Boris Burkov <boris@bur.io>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8742fbcb4f79dae107560b1f6546d28ddfd3c01e
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jul 13 15:11:56 2020 +0100

    btrfs: fix double free on ulist after backref resolution failure
    
    commit 580c079b5766ac706f56eec5c79aee4bf929fef6 upstream.
    
    At btrfs_find_all_roots_safe() we allocate a ulist and set the **roots
    argument to point to it. However if later we fail due to an error returned
    by find_parent_nodes(), we free that ulist but leave a dangling pointer in
    the **roots argument. Upon receiving the error, a caller of this function
    can attempt to free the same ulist again, resulting in an invalid memory
    access.
    
    One such scenario is during qgroup accounting:
    
    btrfs_qgroup_account_extents()
    
     --> calls btrfs_find_all_roots() passes &new_roots (a stack allocated
         pointer) to btrfs_find_all_roots()
    
       --> btrfs_find_all_roots() just calls btrfs_find_all_roots_safe()
           passing &new_roots to it
    
         --> allocates ulist and assigns its address to **roots (which
             points to new_roots from btrfs_qgroup_account_extents())
    
         --> find_parent_nodes() returns an error, so we free the ulist
             and leave **roots pointing to it after returning
    
     --> btrfs_qgroup_account_extents() sees btrfs_find_all_roots() returned
         an error and jumps to the label 'cleanup', which just tries to
         free again the same ulist
    
    Stack trace example:
    
     ------------[ cut here ]------------
     BTRFS: tree first key check failed
     WARNING: CPU: 1 PID: 1763215 at fs/btrfs/disk-io.c:422 btrfs_verify_level_key+0xe0/0x180 [btrfs]
     Modules linked in: dm_snapshot dm_thin_pool (...)
     CPU: 1 PID: 1763215 Comm: fsstress Tainted: G        W         5.8.0-rc3-btrfs-next-64 #1
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
     RIP: 0010:btrfs_verify_level_key+0xe0/0x180 [btrfs]
     Code: 28 5b 5d (...)
     RSP: 0018:ffffb89b473779a0 EFLAGS: 00010286
     RAX: 0000000000000000 RBX: ffff90397759bf08 RCX: 0000000000000000
     RDX: 0000000000000001 RSI: 0000000000000027 RDI: 00000000ffffffff
     RBP: ffff9039a419c000 R08: 0000000000000000 R09: 0000000000000000
     R10: 0000000000000000 R11: ffffb89b43301000 R12: 000000000000005e
     R13: ffffb89b47377a2e R14: ffffb89b473779af R15: 0000000000000000
     FS:  00007fc47e1e1000(0000) GS:ffff9039ac200000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007fc47e1df000 CR3: 00000003d9e4e001 CR4: 00000000003606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      read_block_for_search+0xf6/0x350 [btrfs]
      btrfs_next_old_leaf+0x242/0x650 [btrfs]
      resolve_indirect_refs+0x7cf/0x9e0 [btrfs]
      find_parent_nodes+0x4ea/0x12c0 [btrfs]
      btrfs_find_all_roots_safe+0xbf/0x130 [btrfs]
      btrfs_qgroup_account_extents+0x9d/0x390 [btrfs]
      btrfs_commit_transaction+0x4f7/0xb20 [btrfs]
      btrfs_sync_file+0x3d4/0x4d0 [btrfs]
      do_fsync+0x38/0x70
      __x64_sys_fdatasync+0x13/0x20
      do_syscall_64+0x5c/0xe0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7fc47e2d72e3
     Code: Bad RIP value.
     RSP: 002b:00007fffa32098c8 EFLAGS: 00000246 ORIG_RAX: 000000000000004b
     RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007fc47e2d72e3
     RDX: 00007fffa3209830 RSI: 00007fffa3209830 RDI: 0000000000000003
     RBP: 000000000000072e R08: 0000000000000001 R09: 0000000000000003
     R10: 0000000000000000 R11: 0000000000000246 R12: 00000000000003e8
     R13: 0000000051eb851f R14: 00007fffa3209970 R15: 00005607c4ac8b50
     irq event stamp: 0
     hardirqs last  enabled at (0): [<0000000000000000>] 0x0
     hardirqs last disabled at (0): [<ffffffffb8eb5e85>] copy_process+0x755/0x1eb0
     softirqs last  enabled at (0): [<ffffffffb8eb5e85>] copy_process+0x755/0x1eb0
     softirqs last disabled at (0): [<0000000000000000>] 0x0
     ---[ end trace 8639237550317b48 ]---
     BTRFS error (device sdc): tree first key mismatch detected, bytenr=62324736 parent_transid=94 key expected=(262,108,1351680) has=(259,108,1921024)
     general protection fault, probably for non-canonical address 0x6b6b6b6b6b6b6b6b: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC PTI
     CPU: 2 PID: 1763215 Comm: fsstress Tainted: G        W         5.8.0-rc3-btrfs-next-64 #1
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.13.0-0-gf21b5a4aeb02-prebuilt.qemu.org 04/01/2014
     RIP: 0010:ulist_release+0x14/0x60 [btrfs]
     Code: c7 07 00 (...)
     RSP: 0018:ffffb89b47377d60 EFLAGS: 00010282
     RAX: 6b6b6b6b6b6b6b6b RBX: ffff903959b56b90 RCX: 0000000000000000
     RDX: 0000000000000001 RSI: 0000000000270024 RDI: ffff9036e2adc840
     RBP: ffff9036e2adc848 R08: 0000000000000000 R09: 0000000000000000
     R10: 0000000000000000 R11: 0000000000000000 R12: ffff9036e2adc840
     R13: 0000000000000015 R14: ffff9039a419ccf8 R15: ffff90395d605840
     FS:  00007fc47e1e1000(0000) GS:ffff9039ac600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007f8c1c0a51c8 CR3: 00000003d9e4e004 CR4: 00000000003606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      ulist_free+0x13/0x20 [btrfs]
      btrfs_qgroup_account_extents+0xf3/0x390 [btrfs]
      btrfs_commit_transaction+0x4f7/0xb20 [btrfs]
      btrfs_sync_file+0x3d4/0x4d0 [btrfs]
      do_fsync+0x38/0x70
      __x64_sys_fdatasync+0x13/0x20
      do_syscall_64+0x5c/0xe0
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
     RIP: 0033:0x7fc47e2d72e3
     Code: Bad RIP value.
     RSP: 002b:00007fffa32098c8 EFLAGS: 00000246 ORIG_RAX: 000000000000004b
     RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 00007fc47e2d72e3
     RDX: 00007fffa3209830 RSI: 00007fffa3209830 RDI: 0000000000000003
     RBP: 000000000000072e R08: 0000000000000001 R09: 0000000000000003
     R10: 0000000000000000 R11: 0000000000000246 R12: 00000000000003e8
     R13: 0000000051eb851f R14: 00007fffa3209970 R15: 00005607c4ac8b50
     Modules linked in: dm_snapshot dm_thin_pool (...)
     ---[ end trace 8639237550317b49 ]---
     RIP: 0010:ulist_release+0x14/0x60 [btrfs]
     Code: c7 07 00 (...)
     RSP: 0018:ffffb89b47377d60 EFLAGS: 00010282
     RAX: 6b6b6b6b6b6b6b6b RBX: ffff903959b56b90 RCX: 0000000000000000
     RDX: 0000000000000001 RSI: 0000000000270024 RDI: ffff9036e2adc840
     RBP: ffff9036e2adc848 R08: 0000000000000000 R09: 0000000000000000
     R10: 0000000000000000 R11: 0000000000000000 R12: ffff9036e2adc840
     R13: 0000000000000015 R14: ffff9039a419ccf8 R15: ffff90395d605840
     FS:  00007fc47e1e1000(0000) GS:ffff9039ad200000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007f6a776f7d40 CR3: 00000003d9e4e002 CR4: 00000000003606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    
    Fix this by making btrfs_find_all_roots_safe() set *roots to NULL after
    it frees the ulist.
    
    Fixes: 8da6d5815c592b ("Btrfs: added btrfs_find_all_roots()")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10763c4f1514b9b28b2a7b7ea30839e471d3ad16
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sun Jun 28 17:52:27 2020 +0200

    ASoC: rt5670: Correct RT5670_LDO_SEL_MASK
    
    commit 5cacc6f5764e94fa753b2c1f5f7f1f3f74286e82 upstream.
    
    The RT5670_PWR_ANLG1 register has 3 bits to select the LDO voltage,
    so the correct mask is 0x7 not 0x3.
    
    Because of this wrong mask we were programming the ldo bits
    to a setting of binary 001 (0x05 & 0x03) instead of binary 101
    when moving to SND_SOC_BIAS_PREPARE.
    
    According to the datasheet 001 is a reserved value, so no idea
    what it did, since the driver was working fine before I guess we
    got lucky and it does something which is ok.
    
    Fixes: 5e8351de740d ("ASoC: add RT5670 CODEC driver")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200628155231.71089-3-hdegoede@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a969b2d0f44a3002d28a9e3b812685476d71fc12
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jul 17 10:40:23 2020 +0200

    ALSA: info: Drop WARN_ON() from buffer NULL sanity check
    
    commit 60379ba08532eca861e933b389526a4dc89e0c42 upstream.
    
    snd_info_get_line() has a sanity check of NULL buffer -- both buffer
    itself being NULL and buffer->buffer being NULL.  Basically both
    checks are valid and necessary, but the problem is that it's with
    snd_BUG_ON() macro that triggers WARN_ON().  The latter condition
    (NULL buffer->buffer) can be met arbitrarily by user since the buffer
    is allocated at the first write, so it means that user can trigger
    WARN_ON() at will.
    
    This patch addresses it by simply moving buffer->buffer NULL check out
    of snd_BUG_ON() so that spurious WARNING is no longer triggered.
    
    Reported-by: syzbot+e42d0746c3c3699b6061@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200717084023.5928-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a68f0cf8b3441a47bdfa119389d7d0e9001077c5
Author: Oleg Nesterov <oleg@redhat.com>
Date:   Thu Jul 23 17:44:20 2020 +0200

    uprobes: Change handle_swbp() to send SIGTRAP with si_code=SI_KERNEL, to fix GDB regression
    
    commit fe5ed7ab99c656bd2f5b79b49df0e9ebf2cead8a upstream.
    
    If a tracee is uprobed and it hits int3 inserted by debugger, handle_swbp()
    does send_sig(SIGTRAP, current, 0) which means si_code == SI_USER. This used
    to work when this code was written, but then GDB started to validate si_code
    and now it simply can't use breakpoints if the tracee has an active uprobe:
    
            # cat test.c
            void unused_func(void)
            {
            }
            int main(void)
            {
                    return 0;
            }
    
            # gcc -g test.c -o test
            # perf probe -x ./test -a unused_func
            # perf record -e probe_test:unused_func gdb ./test -ex run
            GNU gdb (GDB) 10.0.50.20200714-git
            ...
            Program received signal SIGTRAP, Trace/breakpoint trap.
            0x00007ffff7ddf909 in dl_main () from /lib64/ld-linux-x86-64.so.2
            (gdb)
    
    The tracee hits the internal breakpoint inserted by GDB to monitor shared
    library events but GDB misinterprets this SIGTRAP and reports a signal.
    
    Change handle_swbp() to use force_sig(SIGTRAP), this matches do_int3_user()
    and fixes the problem.
    
    This is the minimal fix for -stable, arch/x86/kernel/uprobes.c is equally
    wrong; it should use send_sigtrap(TRAP_TRACE) instead of send_sig(SIGTRAP),
    but this doesn't confuse GDB and needs another x86-specific patch.
    
    Reported-by: Aaron Merey <amerey@redhat.com>
    Signed-off-by: Oleg Nesterov <oleg@redhat.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200723154420.GA32043@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 753c97369c016d02273f35af620a132b12f898c4
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Jul 14 14:56:39 2020 +0000

    IB/umem: fix reference count leak in ib_umem_odp_get()
    
    Add missing mmput() on error path to avoid ref-count leak.
    
    This problem is introduced by 79bb5b7ee177 ("RDMA/umem: Fix missing mmap_sem in get umem ODP call")
    and resolved by f27a0d50a4bc ("RDMA/umem: Use umem->owning_mm inside ODP").
    So, it's only needed in stable-4.14 and stable-4.19.
    
    Fixes: 79bb5b7ee177 ("RDMA/umem: Fix missing mmap_sem in get umem ODP call")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ebb56cb138f3bd53ba608f3087ef3d1799caa318
Author: Vladimir Oltean <olteanv@gmail.com>
Date:   Fri Aug 23 00:24:50 2019 +0300

    spi: spi-fsl-dspi: Exit the ISR with IRQ_NONE when it's not ours
    
    commit d41f36a6464a85c06ad920703d878e4491d2c023 upstream.
    
    The DSPI interrupt can be shared between two controllers at least on the
    LX2160A. In that case, the driver for one controller might misbehave and
    consume the other's interrupt. Fix this by actually checking if any of
    the bits in the status register have been asserted.
    
    Fixes: 13aed2392741 ("spi: spi-fsl-dspi: use IRQF_SHARED mode to request IRQ")
    Signed-off-by: Vladimir Oltean <olteanv@gmail.com>
    Link: https://lore.kernel.org/r/20190822212450.21420-2-olteanv@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: stable@vger.kernel.org
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 993bb42380b3eed9a81049ac2218fcc52dab8483
Author: Olga Kornievskaia <kolga@netapp.com>
Date:   Wed Jul 15 13:04:15 2020 -0400

    SUNRPC reverting d03727b248d0 ("NFSv4 fix CLOSE not waiting for direct IO compeletion")
    
    commit 65caafd0d2145d1dd02072c4ced540624daeab40 upstream.
    
    Reverting commit d03727b248d0 "NFSv4 fix CLOSE not waiting for
    direct IO compeletion". This patch made it so that fput() by calling
    inode_dio_done() in nfs_file_release() would wait uninterruptably
    for any outstanding directIO to the file (but that wait on IO should
    be killable).
    
    The problem the patch was also trying to address was REMOVE returning
    ERR_ACCESS because the file is still opened, is supposed to be resolved
    by server returning ERR_FILE_OPEN and not ERR_ACCESS.
    
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ec5c660210f2809fc7851564e7ababa8f13debc
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Jul 9 11:53:06 2020 +0200

    irqdomain/treewide: Keep firmware node unconditionally allocated
    
    [ Upstream commit e3beca48a45b5e0e6e6a4e0124276b8248dcc9bb ]
    
    Quite some non OF/ACPI users of irqdomains allocate firmware nodes of type
    IRQCHIP_FWNODE_NAMED or IRQCHIP_FWNODE_NAMED_ID and free them right after
    creating the irqdomain. The only purpose of these FW nodes is to convey
    name information. When this was introduced the core code did not store the
    pointer to the node in the irqdomain. A recent change stored the firmware
    node pointer in irqdomain for other reasons and missed to notice that the
    usage sites which do the alloc_fwnode/create_domain/free_fwnode sequence
    are broken by this. Storing a dangling pointer is dangerous itself, but in
    case that the domain is destroyed later on this leads to a double free.
    
    Remove the freeing of the firmware node after creating the irqdomain from
    all affected call sites to cure this.
    
    Fixes: 711419e504eb ("irqdomain: Add the missing assignment of domain->fwnode for named fwnode")
    Reported-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/873661qakd.fsf@nanos.tec.linutronix.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b95c4cb5ff8449e09f6f2fa626204fef217c2c44
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Tue Jun 23 16:39:13 2020 +1000

    drm/nouveau/i2c/g94-: increase NV_PMGR_DP_AUXCTL_TRANSACTREQ timeout
    
    [ Upstream commit 0156e76d388310a490aeb0f2fbb5b284ded3aecc ]
    
    Tegra TRM says worst-case reply time is 1216us, and this should fix some
    spurious timeouts that have been popping up.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 42eefcc4c4a96d7b87d767366a70849cddf4dc4e
Author: Tom Rix <trix@redhat.com>
Date:   Fri Jul 3 06:33:59 2020 -0700

    net: sky2: initialize return of gm_phy_read
    
    [ Upstream commit 28b18e4eb515af7c6661c3995c6e3c34412c2874 ]
    
    clang static analysis flags this garbage return
    
    drivers/net/ethernet/marvell/sky2.c:208:2: warning: Undefined or garbage value returned to caller [core.uninitialized.UndefReturn]
            return v;
            ^~~~~~~~
    
    static inline u16 gm_phy_read( ...
    {
            u16 v;
            __gm_phy_read(hw, port, reg, &v);
            return v;
    }
    
    __gm_phy_read can return without setting v.
    
    So handle similar to skge.c's gm_phy_read, initialize v.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdcf5d8c9a4ac48b93c4713bada00b69f7762b5c
Author: Xie He <xie.he.0141@gmail.com>
Date:   Sun Jul 5 17:45:21 2020 -0700

    drivers/net/wan/lapbether: Fixed the value of hard_header_len
    
    [ Upstream commit 9dc829a135fb5927f1519de11286e2bbb79f5b66 ]
    
    When this driver transmits data,
      first this driver will remove a pseudo header of 1 byte,
      then the lapb module will prepend the LAPB header of 2 or 3 bytes,
      then this driver will prepend a length field of 2 bytes,
      then the underlying Ethernet device will prepend its own header.
    
    So, the header length required should be:
      -1 + 3 + 2 + "the header length needed by the underlying device".
    
    This patch fixes kernel panic when this driver is used with AF_PACKET
    SOCK_DGRAM sockets.
    
    Signed-off-by: Xie He <xie.he.0141@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0cb18663b8db431d1b5ede9337d5d82c0c4ff05
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Thu Jul 2 08:32:25 2020 -0700

    xtensa: update *pos in cpuinfo_op.next
    
    [ Upstream commit 0d5ab144429e8bd80889b856a44d56ab4a5cd59b ]
    
    Increment *pos in the cpuinfo_op.next to fix the following warning
    triggered by cat /proc/cpuinfo:
    
      seq_file: buggy .next function c_next did not update position index
    
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1cd965fee04aa21f32bd468b68f291c660ca943f
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Thu Jun 4 13:37:10 2020 -0700

    xtensa: fix __sync_fetch_and_{and,or}_4 declarations
    
    [ Upstream commit 73f9941306d5ce030f3ffc7db425c7b2a798cf8e ]
    
    Building xtensa kernel with gcc-10 produces the following warnings:
      arch/xtensa/kernel/xtensa_ksyms.c:90:15: warning: conflicting types
        for built-in function ‘__sync_fetch_and_and_4’;
        expected ‘unsigned int(volatile void *, unsigned int)’
        [-Wbuiltin-declaration-mismatch]
      arch/xtensa/kernel/xtensa_ksyms.c:96:15: warning: conflicting types
        for built-in function ‘__sync_fetch_and_or_4’;
        expected ‘unsigned int(volatile void *, unsigned int)’
        [-Wbuiltin-declaration-mismatch]
    
    Fix declarations of these functions to avoid the warning.
    
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 536a73602e5573c71a4811952fdcdf0316bc999a
Author: Tom Rix <trix@redhat.com>
Date:   Sat Jun 27 06:32:42 2020 -0700

    scsi: scsi_transport_spi: Fix function pointer check
    
    [ Upstream commit 5aee52c44d9170591df65fafa1cd408acc1225ce ]
    
    clang static analysis flags several null function pointer problems.
    
    drivers/scsi/scsi_transport_spi.c:374:1: warning: Called function pointer is null (null dereference) [core.CallAndMessage]
    spi_transport_max_attr(offset, "%d\n");
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Reviewing the store_spi_store_max macro
    
            if (i->f->set_##field)
                    return -EINVAL;
    
    should be
    
            if (!i->f->set_##field)
                    return -EINVAL;
    
    Link: https://lore.kernel.org/r/20200627133242.21618-1-trix@redhat.com
    Reviewed-by: James Bottomley <jejb@linux.ibm.com>
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8d0baccfda9c9d645cde3cd4d069e37cfa84804
Author: Markus Theil <markus.theil@tu-ilmenau.de>
Date:   Thu Jun 25 12:42:14 2020 +0200

    mac80211: allow rx of mesh eapol frames with default rx key
    
    [ Upstream commit 0b467b63870d9c05c81456aa9bfee894ab2db3b6 ]
    
    Without this patch, eapol frames cannot be received in mesh
    mode, when 802.1X should be used. Initially only a MGTK is
    defined, which is found and set as rx->key, when there are
    no other keys set. ieee80211_drop_unencrypted would then
    drop these eapol frames, as they are data frames without
    encryption and there exists some rx->key.
    
    Fix this by differentiating between mesh eapol frames and
    other data frames with existing rx->key. Allow mesh mesh
    eapol frames only if they are for our vif address.
    
    With this patch in-place, ieee80211_rx_h_mesh_fwding continues
    after the ieee80211_drop_unencrypted check and notices, that
    these eapol frames have to be delivered locally, as they should.
    
    Signed-off-by: Markus Theil <markus.theil@tu-ilmenau.de>
    Link: https://lore.kernel.org/r/20200625104214.50319-1-markus.theil@tu-ilmenau.de
    [small code cleanups]
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 78bb45380fe93b620a018cf43f452470fdcc6f7f
Author: Jacky Hu <hengqing.hu@gmail.com>
Date:   Tue Jun 16 09:50:24 2020 +0800

    pinctrl: amd: fix npins for uart0 in kerncz_groups
    
    [ Upstream commit 69339d083dfb7786b0e0b3fc19eaddcf11fabdfb ]
    
    uart0_pins is defined as:
    static const unsigned uart0_pins[] = {135, 136, 137, 138, 139};
    
    which npins is wronly specified as 9 later
            {
                    .name = "uart0",
                    .pins = uart0_pins,
                    .npins = 9,
            },
    
    npins should be 5 instead of 9 according to the definition.
    
    Signed-off-by: Jacky Hu <hengqing.hu@gmail.com>
    Link: https://lore.kernel.org/r/20200616015024.287683-1-hengqing.hu@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 446f9c23978cd5ce0037e42aee24350ddafb139a
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 22:00:52 2020 -0500

    gpio: arizona: put pm_runtime in case of failure
    
    [ Upstream commit 861254d826499944cb4d9b5a15f5a794a6b99a69 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605030052.78235-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f04bc5ba3319718485abb9bc61d8c24c09878539
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:52:07 2020 -0500

    gpio: arizona: handle pm_runtime_get_sync failure case
    
    [ Upstream commit e6f390a834b56583e6fc0949822644ce92fbb107 ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Acked-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Link: https://lore.kernel.org/r/20200605025207.65719-1-navid.emamdoost@gmail.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a5afea49dad38a131e017314c1da6a9b390072f
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Jul 22 09:22:29 2020 +0200

    Linux 4.14.189

commit 1d55dc9636c0ad121000e772e1b7ec8f347f7e2e
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jun 17 22:50:33 2020 +0100

    rxrpc: Fix trace string
    
    commit aadf9dcef9d4cd68c73a4ab934f93319c4becc47 upstream.
    
    The trace symbol printer (__print_symbolic()) ignores symbols that map to
    an empty string and prints the hex value instead.
    
    Fix the symbol for rxrpc_cong_no_change to " -" instead of "" to avoid
    this.
    
    Fixes: b54a134a7de4 ("rxrpc: Fix handling of enums-to-string translation in tracing")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33d664a694dd91e9027fdd5bdf3364fb63a384b4
Author: Ilya Dryomov <idryomov@gmail.com>
Date:   Tue Jun 9 11:57:56 2020 +0200

    libceph: don't omit recovery_deletes in target_copy()
    
    commit 2f3fead62144002557f322c2a7c15e1255df0653 upstream.
    
    Currently target_copy() is used only for sending linger pings, so
    this doesn't come up, but generally omitting recovery_deletes can
    result in unneeded resends (force_resend in calc_target()).
    
    Fixes: ae78dd8139ce ("libceph: make RECOVERY_DELETES feature create a new interval")
    Signed-off-by: Ilya Dryomov <idryomov@gmail.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f6b609e0f9806452ebab2ab0cbba9cdaf75a776
Author: Suraj Jitindar Singh <surajjs@amazon.com>
Date:   Tue Jul 14 22:05:28 2020 +0000

    x86/cpu: Move x86_cache_bits settings
    
    This patch is to fix the backport of the upstream patch:
    cc51e5428ea5 x86/speculation/l1tf: Increase l1tf memory limit for Nehalem+
    
    When this was backported to the 4.9 and 4.14 stable branches the line
    +       c->x86_cache_bits = c->x86_phys_bits;
    was applied in the wrong place, being added to the
    identify_cpu_without_cpuid() function instead of the get_cpu_cap()
    function which it was correctly applied to in the 4.4 backport.
    
    This means that x86_cache_bits is not set correctly resulting in the
    following warning due to the cache bits being left uninitalised (zero).
    
     WARNING: CPU: 0 PID: 7566 at arch/x86/kvm/mmu.c:284 kvm_mmu_set_mmio_spte_mask+0x4e/0x60 [kvm
     Modules linked in: kvm_intel(+) kvm irqbypass ipv6 crc_ccitt binfmt_misc evdev lpc_ich mfd_core ioatdma pcc_cpufreq dca ena acpi_power_meter hwmon acpi_pad button ext4 crc16 mbcache jbd2 fscrypto nvme nvme_core dm_mirror dm_region_hash dm_log dm_mod dax
     Hardware name: Amazon EC2 i3.metal/Not Specified, BIOS 1.0 10/16/2017
     task: ffff88ff77704c00 task.stack: ffffc9000edac000
     RIP: 0010:kvm_mmu_set_mmio_spte_mask+0x4e/0x60 [kvm
     RSP: 0018:ffffc9000edafc60 EFLAGS: 00010206
     RAX: 0000000000000000 RBX: 0000000000000000 RCX: 00000000ffffff45
     RDX: 000000000000002e RSI: 0008000000000001 RDI: 0008000000000001
     RBP: ffffffffa036f000 R08: ffffffffffffff80 R09: ffffe8ffffccb3c0
     R10: 0000000000000038 R11: 0000000000000000 R12: 0000000000005b80
     R13: ffffffffa0370e40 R14: 0000000000000001 R15: ffff88bf7c0927e0
     FS:  00007fa316f24740(0000) GS:ffff88bf7f600000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007fa316ea0000 CR3: 0000003f7e986004 CR4: 00000000003606f0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      kvm_mmu_module_init+0x166/0x230 [kvm
      kvm_arch_init+0x5d/0x150 [kvm
      kvm_init+0x1c/0x2d0 [kvm
      ? hardware_setup+0x4a6/0x4a6 [kvm_intel
      vmx_init+0x23/0x6aa [kvm_intel
      ? hardware_setup+0x4a6/0x4a6 [kvm_intel
      do_one_initcall+0x3e/0x15d
      do_init_module+0x5b/0x1e5
      load_module+0x19e6/0x1dc0
      ? SYSC_init_module+0x13b/0x170
      SYSC_init_module+0x13b/0x170
      do_syscall_64+0x67/0x110
      entry_SYSCALL_64_after_hwframe+0x41/0xa6
     RIP: 0033:0x7fa316828f3a
     RSP: 002b:00007ffc9d65c1f8 EFLAGS: 00000246 ORIG_RAX: 00000000000000af
     RAX: ffffffffffffffda RBX: 00007fa316b08849 RCX: 00007fa316828f3a
     RDX: 00007fa316b08849 RSI: 0000000000071328 RDI: 00007fa316e37000
     RBP: 0000000000b47e80 R08: 0000000000000003 R09: 0000000000000000
     R10: 00007fa316822dba R11: 0000000000000246 R12: 0000000000b46340
     R13: 0000000000b464c0 R14: 0000000000000000 R15: 0000000000040000
     Code: e9 65 06 00 75 25 48 b8 00 00 00 00 00 00 00 40 48 09 c6 48 09 c7 48 89 35 f8 65 06 00 48 89 3d f9 65 06 00 c3 0f 0b 0f 0b eb d2 <0f> 0b eb d7 0f 1f 40 00 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 44
    
    Fixes: 4.9.x  ef3d45c95764 x86/speculation/l1tf: Increase l1tf memory limit for Nehalem+
    Fixes: 4.14.x ec4034835eaf x86/speculation/l1tf: Increase l1tf memory limit for Nehalem+
    Cc: stable@vger.kernel.org # 4.9.x-4.14.x
    Signed-off-by: Suraj Jitindar Singh <surajjs@amazon.com>
    Reviewed-by: Samuel Mendoza-Jonas <samjonas@amazon.com>
    Reviewed-by: Frank van der Linden <fllinden@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4af0628a4bf577838e59aee7e624789a82798924
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Fri Jul 10 17:24:26 2020 +0200

    sched/fair: handle case of task_h_load() returning 0
    
    commit 01cfcde9c26d8555f0e6e9aea9d6049f87683998 upstream.
    
    task_h_load() can return 0 in some situations like running stress-ng
    mmapfork, which forks thousands of threads, in a sched group on a 224 cores
    system. The load balance doesn't handle this correctly because
    env->imbalance never decreases and it will stop pulling tasks only after
    reaching loop_max, which can be equal to the number of running tasks of
    the cfs. Make sure that imbalance will be decreased by at least 1.
    
    misfit task is the other feature that doesn't handle correctly such
    situation although it's probably more difficult to face the problem
    because of the smaller number of CPUs and running tasks on heterogenous
    system.
    
    We can't simply ensure that task_h_load() returns at least one because it
    would imply to handle underflow in other places.
    
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Valentin Schneider <valentin.schneider@arm.com>
    Reviewed-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Tested-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Cc: <stable@vger.kernel.org> # v4.4+
    Link: https://lkml.kernel.org/r/20200710152426.16981-1-vincent.guittot@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 375bc8eec00e8744f6a8e530f4c8f65e11eed4da
Author: Will Deacon <will@kernel.org>
Date:   Thu Feb 13 12:06:26 2020 +0000

    arm64: ptrace: Override SPSR.SS when single-stepping is enabled
    
    commit 3a5a4366cecc25daa300b9a9174f7fdd352b9068 upstream.
    
    Luis reports that, when reverse debugging with GDB, single-step does not
    function as expected on arm64:
    
      | I've noticed, under very specific conditions, that a PTRACE_SINGLESTEP
      | request by GDB won't execute the underlying instruction. As a consequence,
      | the PC doesn't move, but we return a SIGTRAP just like we would for a
      | regular successful PTRACE_SINGLESTEP request.
    
    The underlying problem is that when the CPU register state is restored
    as part of a reverse step, the SPSR.SS bit is cleared and so the hardware
    single-step state can transition to the "active-pending" state, causing
    an unexpected step exception to be taken immediately if a step operation
    is attempted.
    
    In hindsight, we probably shouldn't have exposed SPSR.SS in the pstate
    accessible by the GPR regset, but it's a bit late for that now. Instead,
    simply prevent userspace from configuring the bit to a value which is
    inconsistent with the TIF_SINGLESTEP state for the task being traced.
    
    Cc: <stable@vger.kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Keno Fischer <keno@juliacomputing.com>
    Link: https://lore.kernel.org/r/1eed6d69-d53d-9657-1fc9-c089be07f98c@linaro.org
    Reported-by: Luis Machado <luis.machado@linaro.org>
    Tested-by: Luis Machado <luis.machado@linaro.org>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c86dcf9a00fc2c9053205a7f7a1ed6b1b74f36c1
Author: Finley Xiao <finley.xiao@rock-chips.com>
Date:   Fri Jun 19 17:08:25 2020 +0800

    thermal/drivers/cpufreq_cooling: Fix wrong frequency converted from power
    
    commit 371a3bc79c11b707d7a1b7a2c938dc3cc042fffb upstream.
    
    The function cpu_power_to_freq is used to find a frequency and set the
    cooling device to consume at most the power to be converted. For example,
    if the power to be converted is 80mW, and the em table is as follow.
    struct em_cap_state table[] = {
            /* KHz     mW */
            { 1008000, 36, 0 },
            { 1200000, 49, 0 },
            { 1296000, 59, 0 },
            { 1416000, 72, 0 },
            { 1512000, 86, 0 },
    };
    The target frequency should be 1416000KHz, not 1512000KHz.
    
    Fixes: 349d39dc5739 ("thermal: cpu_cooling: merge frequency and power tables")
    Cc: <stable@vger.kernel.org> # v4.13+
    Signed-off-by: Finley Xiao <finley.xiao@rock-chips.com>
    Acked-by: Viresh Kumar <viresh.kumar@linaro.org>
    Reviewed-by: Amit Kucheria <amit.kucheria@linaro.org>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200619090825.32747-1-finley.xiao@rock-chips.com
    Signed-off-by: Viresh Kumar <viresh.kumar@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d22790e28708ebbbe813433b31bfb0258dfef517
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Wed Jun 24 13:35:41 2020 +0200

    misc: atmel-ssc: lock with mutex instead of spinlock
    
    commit b037d60a3b1d1227609fd858fa34321f41829911 upstream.
    
    Uninterruptible context is not needed in the driver and causes lockdep
    warning because of mutex taken in of_alias_get_id(). Convert the lock to
    mutex to avoid the issue.
    
    Cc: stable@vger.kernel.org
    Fixes: 099343c64e16 ("ARM: at91: atmel-ssc: add device tree support")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Link: https://lore.kernel.org/r/50f0d7fa107f318296afb49477c3571e4d6978c5.1592998403.git.mirq-linux@rere.qmqm.pl
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 932c15d2f39f3c776d2faf2990fc936f8ccec9a6
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Thu Jun 11 14:17:41 2020 +0200

    dmaengine: fsl-edma: Fix NULL pointer exception in fsl_edma_tx_handler
    
    commit f5e5677c420346b4e9788051c2e4d750996c428c upstream.
    
    NULL pointer exception happens occasionally on serial output initiated
    by login timeout.  This was reproduced only if kernel was built with
    significant debugging options and EDMA driver is used with serial
    console.
    
        col-vf50 login: root
        Password:
        Login timed out after 60 seconds.
        Unable to handle kernel NULL pointer dereference at virtual address 00000044
        Internal error: Oops: 5 [#1] ARM
        CPU: 0 PID: 157 Comm: login Not tainted 5.7.0-next-20200610-dirty #4
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
          (fsl_edma_tx_handler) from [<8016eb10>] (__handle_irq_event_percpu+0x64/0x304)
          (__handle_irq_event_percpu) from [<8016eddc>] (handle_irq_event_percpu+0x2c/0x7c)
          (handle_irq_event_percpu) from [<8016ee64>] (handle_irq_event+0x38/0x5c)
          (handle_irq_event) from [<801729e4>] (handle_fasteoi_irq+0xa4/0x160)
          (handle_fasteoi_irq) from [<8016ddcc>] (generic_handle_irq+0x34/0x44)
          (generic_handle_irq) from [<8016e40c>] (__handle_domain_irq+0x54/0xa8)
          (__handle_domain_irq) from [<80508bc8>] (gic_handle_irq+0x4c/0x80)
          (gic_handle_irq) from [<80100af0>] (__irq_svc+0x70/0x98)
        Exception stack(0x8459fe80 to 0x8459fec8)
        fe80: 72286b00 e3359f64 00000001 0000412d a0070013 85c98840 85c98840 a0070013
        fea0: 8054e0d4 00000000 00000002 00000000 00000002 8459fed0 8081fbe8 8081fbec
        fec0: 60070013 ffffffff
          (__irq_svc) from [<8081fbec>] (_raw_spin_unlock_irqrestore+0x30/0x58)
          (_raw_spin_unlock_irqrestore) from [<8056cb48>] (uart_flush_buffer+0x88/0xf8)
          (uart_flush_buffer) from [<80554e60>] (tty_ldisc_hangup+0x38/0x1ac)
          (tty_ldisc_hangup) from [<8054c7f4>] (__tty_hangup+0x158/0x2bc)
          (__tty_hangup) from [<80557b90>] (disassociate_ctty.part.1+0x30/0x23c)
          (disassociate_ctty.part.1) from [<8011fc18>] (do_exit+0x580/0xba0)
          (do_exit) from [<801214f8>] (do_group_exit+0x3c/0xb4)
          (do_group_exit) from [<80121580>] (__wake_up_parent+0x0/0x14)
    
    Issue looks like race condition between interrupt handler fsl_edma_tx_handler()
    (called as result of fsl_edma_xfer_desc()) and terminating the transfer with
    fsl_edma_terminate_all().
    
    The fsl_edma_tx_handler() handles interrupt for a transfer with already freed
    edesc and idle==true.
    
    Fixes: d6be34fbd39b ("dma: Add Freescale eDMA engine driver support")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Reviewed-by: Robin Gong <yibin.gong@nxp.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1591877861-28156-2-git-send-email-krzk@kernel.org
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5d9367c23bbcaeb51eafbaa830758a0781bf9cf
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:38 2020 +0300

    intel_th: pci: Add Emmitsburg PCH support
    
    commit fd73d74a32bfaaf259441322cc5a1c83caaa94f2 upstream.
    
    This adds support for the Trace Hub in Emmitsburg PCH.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20200706161339.55468-4-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb4189c10990210f6b7c5ce6b85a14e9168e1370
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:37 2020 +0300

    intel_th: pci: Add Tiger Lake PCH-H support
    
    commit 6227585dc7b6a5405fc08dc322f98cb95e2f0eb4 upstream.
    
    This adds support for the Trace Hub in Tiger Lake PCH-H.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20200706161339.55468-3-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba8c243aa57ddf4a47e5d2bf1a83af015ebe6fdb
Author: Alexander Shishkin <alexander.shishkin@linux.intel.com>
Date:   Mon Jul 6 19:13:36 2020 +0300

    intel_th: pci: Add Jasper Lake CPU support
    
    commit 203c1f615052921901b7a8fbe2005d8ea6add076 upstream.
    
    This adds support for the Trace Hub in Jasper Lake CPU.
    
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Cc: stable@vger.kernel.org # v4.14+
    Link: https://lore.kernel.org/r/20200706161339.55468-2-alexander.shishkin@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bbec1fc953897c0e6f4f06f7f12877ae1fb52d2
Author: Vishwas M <vishwas.reddy.vr@gmail.com>
Date:   Tue Jul 7 19:57:47 2020 +0530

    hwmon: (emc2103) fix unable to change fan pwm1_enable attribute
    
    commit 14b0e83dc4f1e52b94acaeb85a18fd7fdd46d2dc upstream.
    
    This patch fixes a bug which does not let FAN mode to be changed from
    sysfs(pwm1_enable). i.e pwm1_enable can not be set to 3, it will always
    remain at 0.
    
    This is caused because the device driver handles the result of
    "read_u8_from_i2c(client, REG_FAN_CONF1, &conf_reg)" incorrectly. The
    driver thinks an error has occurred if the (result != 0). This has been
    fixed by changing the condition to (result < 0).
    
    Signed-off-by: Vishwas M <vishwas.reddy.vr@gmail.com>
    Link: https://lore.kernel.org/r/20200707142747.118414-1-vishwas.reddy.vr@gmail.com
    Fixes: 9df7305b5a86 ("hwmon: Add driver for SMSC EMC2103 temperature monitor and fan controller")
    Cc: stable@vger.kernel.org
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b365fdc121fd1e28336a6c396615053dd94776c7
Author: Huacai Chen <chenhc@lemote.com>
Date:   Thu Jul 16 17:39:29 2020 +0800

    MIPS: Fix build for LTS kernel caused by backporting lpj adjustment
    
    Commit ed26aacfb5f71eecb20a ("mips: Add udelay lpj numbers adjustment")
    has backported to 4.4~5.4, but the "struct cpufreq_freqs" (and also the
    cpufreq notifier machanism) of 4.4~4.19 are different from the upstream
    kernel. These differences cause build errors, and this patch can fix the
    build.
    
    Cc: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Stable <stable@vger.kernel.org> # 4.4/4.9/4.14/4.19
    Signed-off-by: Huacai Chen <chenhc@lemote.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 655cc28adc8135aa2d91820002890e81cb14f4df
Author: Frederic Weisbecker <frederic@kernel.org>
Date:   Fri Jul 17 16:05:40 2020 +0200

    timer: Fix wheel index calculation on last level
    
    commit e2a71bdea81690b6ef11f4368261ec6f5b6891aa upstream.
    
    When an expiration delta falls into the last level of the wheel, that delta
    has be compared against the maximum possible delay and reduced to fit in if
    necessary.
    
    However instead of comparing the delta against the maximum, the code
    compares the actual expiry against the maximum. Then instead of fixing the
    delta to fit in, it sets the maximum delta as the expiry value.
    
    This can result in various undesired outcomes, the worst possible one
    being a timer expiring 15 days ahead to fire immediately.
    
    Fixes: 500462a9de65 ("timers: Switch to a non-cascading wheel")
    Signed-off-by: Frederic Weisbecker <frederic@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20200717140551.29076-2-frederic@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5f2224fb9c8d61902762c7228de4f55540aee72
Author: Esben Haabendal <esben@geanix.com>
Date:   Wed Jul 1 16:56:58 2020 +0200

    uio_pdrv_genirq: fix use without device tree and no interrupt
    
    commit bf12fdf0ab728ca8e5933aac46dd972c0dd0421e upstream.
    
    While e3a3c3a20555 ("UIO: fix uio_pdrv_genirq with device tree but no
    interrupt") added support for using uio_pdrv_genirq for devices without
    interrupt for device tree platforms, the removal of uio_pdrv in
    26dac3c49d56 ("uio: Remove uio_pdrv and use uio_pdrv_genirq instead")
    broke the support for non device tree platforms.
    
    This change fixes this, so that uio_pdrv_genirq can be used without
    interrupt on all platforms.
    
    This still leaves the support that uio_pdrv had for custom interrupt
    handler lacking, as uio_pdrv_genirq does not handle it (yet).
    
    Fixes: 26dac3c49d56 ("uio: Remove uio_pdrv and use uio_pdrv_genirq instead")
    Signed-off-by: Esben Haabendal <esben@geanix.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200701145659.3978-3-esben@geanix.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc7764b11f06b2404de557038afbde7fc311daa4
Author: David Pedersen <limero1337@gmail.com>
Date:   Mon Jul 6 18:48:51 2020 -0700

    Input: i8042 - add Lenovo XiaoXin Air 12 to i8042 nomux list
    
    commit 17d51429da722cd8fc77a365a112f008abf4f8b3 upstream.
    
    This fixes two finger trackpad scroll on the Lenovo XiaoXin Air 12.
    Without nomux, the trackpad behaves as if only one finger is present and
    moves the cursor when trying to scroll.
    
    Signed-off-by: David Pedersen <limero1337@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20200625133754.291325-1-limero1337@gmail.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e0515fb6af21def7772de0d6418e8ec9343ad5d
Author: Alexander Usyskin <alexander.usyskin@intel.com>
Date:   Mon Jun 29 01:53:59 2020 +0300

    mei: bus: don't clean driver pointer
    
    commit e852c2c251ed9c23ae6e3efebc5ec49adb504207 upstream.
    
    It's not needed to set driver to NULL in mei_cl_device_remove()
    which is bus_type remove() handler as this is done anyway
    in __device_release_driver().
    
    Actually this is causing an endless loop in driver_detach()
    on ubuntu patched kernel, while removing (rmmod) the mei_hdcp module.
    The reason list_empty(&drv->p->klist_devices.k_list) is always not-empty.
    as the check is always true in  __device_release_driver()
            if (dev->driver != drv)
                    return;
    
    The non upstream patch is causing this behavior, titled:
    'vfio -- release device lock before userspace requests'
    
    Nevertheless the fix is correct also for the upstream.
    
    Link: https://patchwork.ozlabs.org/project/ubuntu-kernel/patch/20180912085046.3401-2-apw@canonical.com/
    Cc: <stable@vger.kernel.org>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Alexander Usyskin <alexander.usyskin@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Link: https://lore.kernel.org/r/20200628225359.2185929-1-tomas.winkler@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb0c5d886930612cc194ad322402c53c111d55a2
Author: Wade Mealing <wmealing@redhat.com>
Date:   Wed Jun 17 13:49:47 2020 +0200

    Revert "zram: convert remaining CLASS_ATTR() to CLASS_ATTR_RO()"
    
    commit 853eab68afc80f59f36bbdeb715e5c88c501e680 upstream.
    
    Turns out that the permissions for 0400 really are what we want here,
    otherwise any user can read from this file.
    
    [fixed formatting, added changelog, and made attribute static - gregkh]
    
    Reported-by: Wade Mealing <wmealing@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Fixes: f40609d1591f ("zram: convert remaining CLASS_ATTR() to CLASS_ATTR_RO()")
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=1847832
    Reviewed-by: Steffen Maier <maier@linux.ibm.com>
    Acked-by: Minchan Kim <minchan@kernel.org>
    Link: https://lore.kernel.org/r/20200617114946.GA2131650@kroah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a77519d1b9bc0eb38df4418129e155c7c045bbc
Author: Chirantan Ekbote <chirantan@chromium.org>
Date:   Tue Jul 14 19:26:39 2020 +0900

    fuse: Fix parameter for FS_IOC_{GET,SET}FLAGS
    
    commit 31070f6ccec09f3bd4f1e28cd1e592fa4f3ba0b6 upstream.
    
    The ioctl encoding for this parameter is a long but the documentation says
    it should be an int and the kernel drivers expect it to be an int.  If the
    fuse driver treats this as a long it might end up scribbling over the stack
    of a userspace process that only allocated enough space for an int.
    
    This was previously discussed in [1] and a patch for fuse was proposed in
    [2].  From what I can tell the patch in [2] was nacked in favor of adding
    new, "fixed" ioctls and using those from userspace.  However there is still
    no "fixed" version of these ioctls and the fact is that it's sometimes
    infeasible to change all userspace to use the new one.
    
    Handling the ioctls specially in the fuse driver seems like the most
    pragmatic way for fuse servers to support them without causing crashes in
    userspace applications that call them.
    
    [1]: https://lore.kernel.org/linux-fsdevel/20131126200559.GH20559@hall.aurel32.net/T/
    [2]: https://sourceforge.net/p/fuse/mailman/message/31771759/
    
    Signed-off-by: Chirantan Ekbote <chirantan@chromium.org>
    Fixes: 59efec7b9039 ("fuse: implement ioctl support")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88fcd410a98b6dd064d06d7dfe9909b0bb8c32c7
Author: Alexander Lobakin <alobakin@pm.me>
Date:   Tue Jun 23 11:09:33 2020 +0000

    virtio: virtio_console: add missing MODULE_DEVICE_TABLE() for rproc serial
    
    commit 897c44f0bae574c5fb318c759b060bebf9dd6013 upstream.
    
    rproc_serial_id_table lacks an exposure to module devicetable, so
    when remoteproc firmware requests VIRTIO_ID_RPROC_SERIAL, no uevent
    is generated and no module autoloading occurs.
    Add missing MODULE_DEVICE_TABLE() annotation and move the existing
    one for VIRTIO_ID_CONSOLE right to the table itself.
    
    Fixes: 1b6370463e88 ("virtio_console: Add support for remoteproc serial")
    Cc: <stable@vger.kernel.org> # v3.8+
    Signed-off-by: Alexander Lobakin <alobakin@pm.me>
    Reviewed-by: Amit Shah <amit@kernel.org>
    Link: https://lore.kernel.org/r/x7C_CbeJtoGMy258nwAXASYz3xgFMFpyzmUvOyZzRnQrgWCREBjaqBOpAUS7ol4NnZYvSVwmTsCG0Ohyfvta-ygw6HMHcoeKK0C3QFiAO_Q=@pm.me
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65c8aba44e1b4b69193f8227cdfaebe8632946fb
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Tue Jul 7 16:15:53 2020 +0800

    USB: serial: option: add Quectel EG95 LTE modem
    
    commit da6902e5b6dbca9081e3d377f9802d4fd0c5ea59 upstream.
    
    Add support for Quectel Wireless Solutions Co., Ltd. EG95 LTE modem
    
    T:  Bus=01 Lev=01 Prnt=01 Port=02 Cnt=02 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0195 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49797ff2b9fb8c0909981334125a599bb652e32e
Author: Jörgen Storvist <jorgen.storvist@gmail.com>
Date:   Tue Jun 23 00:13:59 2020 +0200

    USB: serial: option: add GosunCn GM500 series
    
    commit 08d4ef5cc9203a113702f24725f6cf4db476c958 upstream.
    
    Add USB IDs for GosunCn GM500 series cellular modules.
    
    RNDIS config:
    usb-devices
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 12 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=305a ProdID=1404 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=e0(wlcon) Sub=01 Prot=03 Driver=rndis_host
    I:  If#=0x1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    I:  If#=0x2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    
    MBIM config:
    usb-devices
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 11 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=305a ProdID=1405 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x4 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    
    ECM config:
    usb-devices
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#= 13 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=305a ProdID=1406 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=option
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=02(commc) Sub=06 Prot=00 Driver=cdc_ether
    I:  If#=0x4 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    
    Signed-off-by: Jörgen Storvist <jorgen.storvist@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 719be587dacda0d9d081ce1a72a702071f1647a0
Author: Igor Moura <imphilippini@gmail.com>
Date:   Tue Jun 23 05:11:11 2020 -0300

    USB: serial: ch341: add new Product ID for CH340
    
    commit 5d0136f8e79f8287e6a36780601f0ce797cf11c2 upstream.
    
    Add PID for CH340 that's found on some ESP8266 dev boards made by
    LilyGO. The specific device that contains such serial converter can be
    seen here: https://github.com/LilyGO/LILYGO-T-OI.
    
    Apparently, it's a regular CH340, but I've confirmed with others that
    also bought this board that the PID found on this device (0x7522)
    differs from other devices with the "same" converter (0x7523).
    Simply adding its PID to the driver and rebuilding it made it work
    as expected.
    
    Signed-off-by: Igor Moura <imphilippini@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d24ee2d85484a305a741f3a18ebe79e950d362b7
Author: James Hilliard <james.hilliard1@gmail.com>
Date:   Tue Jun 16 16:04:03 2020 -0600

    USB: serial: cypress_m8: enable Simply Automated UPB PIM
    
    commit 5c45d04c5081c1830d674f4d22d4400ea2083afe upstream.
    
    This is a UPB (Universal Powerline Bus) PIM (Powerline Interface Module)
    which allows for controlling multiple UPB compatible devices from Linux
    using the standard serial interface.
    
    Based on vendor application source code there are two different models
    of USB based PIM devices in addition to a number of RS232 based PIM's.
    
    The vendor UPB application source contains the following USB ID's:
    
            #define USB_PCS_VENDOR_ID 0x04b4
            #define USB_PCS_PIM_PRODUCT_ID 0x5500
    
            #define USB_SAI_VENDOR_ID 0x17dd
            #define USB_SAI_PIM_PRODUCT_ID 0x5500
    
    The first set of ID's correspond to the PIM variant sold by Powerline
    Control Systems while the second corresponds to the Simply Automated
    Incorporated PIM. As the product ID for both of these match the default
    cypress HID->COM RS232 product ID it assumed that they both use an
    internal variant of this HID->COM RS232 converter hardware. However
    as the vendor ID for the Simply Automated variant is different we need
    to also add it to the cypress_M8 driver so that it is properly
    detected.
    
    Signed-off-by: James Hilliard <james.hilliard1@gmail.com>
    Link: https://lore.kernel.org/r/20200616220403.1807003-1-james.hilliard1@gmail.com
    Cc: stable@vger.kernel.org
    [ johan: amend VID define entry ]
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d98ad490e5b1edf50643349558d6b4da4034ef91
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Jul 15 11:02:45 2020 +0200

    USB: serial: iuu_phoenix: fix memory corruption
    
    commit e7b931bee739e8a77ae216e613d3b99342b6dec0 upstream.
    
    The driver would happily overwrite its write buffer with user data in
    256 byte increments due to a removed buffer-space sanity check.
    
    Fixes: 5fcf62b0f1f2 ("tty: iuu_phoenix: fix locking.")
    Cc: stable <stable@vger.kernel.org>     # 2.6.31
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9194d44fb9844a12e39b3af0ec7eb1f64f56c53
Author: Zhang Qiang <qiang.zhang@windriver.com>
Date:   Mon Jul 6 13:14:55 2020 +0800

    usb: gadget: function: fix missing spinlock in f_uac1_legacy
    
    commit 8778eb0927ddcd3f431805c37b78fa56481aeed9 upstream.
    
    Add a missing spinlock protection for play_queue, because
    the play_queue may be destroyed when the "playback_work"
    work func and "f_audio_out_ep_complete" callback func
    operate this paly_queue at the same time.
    
    Fixes: c6994e6f067cf ("USB: gadget: add USB Audio Gadget driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Zhang Qiang <qiang.zhang@windriver.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 94aada11dc20ea8d6701109c4b03eefd3685e354
Author: Peter Chen <peter.chen@nxp.com>
Date:   Tue Jul 7 14:06:01 2020 +0800

    usb: chipidea: core: add wakeup support for extcon
    
    commit 876d4e1e8298ad1f94d9e9392fc90486755437b4 upstream.
    
    If wakeup event occurred by extcon event, it needs to call
    ci_irq again since the first ci_irq calling at extcon notifier
    only wakes up controller, but do noop for event handling,
    it causes the extcon use case can't work well from low power mode.
    
    Cc: <stable@vger.kernel.org>
    Fixes: 3ecb3e09b042 ("usb: chipidea: Use extcon framework for VBUS and ID detect")
    Reported-by: Philippe Schenker <philippe.schenker@toradex.com>
    Tested-by: Philippe Schenker <philippe.schenker@toradex.com>
    Signed-off-by: Peter Chen <peter.chen@nxp.com>
    Link: https://lore.kernel.org/r/20200707060601.31907-2-peter.chen@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8705e3b631e5f5db2e1642504f2e2bd602eecfc0
Author: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
Date:   Sat May 30 11:41:50 2020 +0400

    usb: dwc2: Fix shutdown callback in platform
    
    commit 4fdf228cdf6925af45a2066d403821e0977bfddb upstream.
    
    To avoid lot of interrupts from dwc2 core, which can be asserted in
    specific conditions need to disable interrupts on HW level instead of
    disable IRQs on Kernel level, because of IRQ can be shared between
    drivers.
    
    Cc: stable@vger.kernel.org
    Fixes: a40a00318c7fc ("usb: dwc2: add shutdown callback to platform variant")
    Tested-by: Frank Mori Hess <fmh6jj@gmail.com>
    Reviewed-by: Alan Stern <stern@rowland.harvard.edu>
    Reviewed-by: Doug Anderson <dianders@chromium.org>
    Reviewed-by: Frank Mori Hess <fmh6jj@gmail.com>
    Signed-off-by: Minas Harutyunyan <hminas@synopsys.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6403530e63bc420379409e3040927da54051e864
Author: Tom Rix <trix@redhat.com>
Date:   Wed Jul 8 06:12:43 2020 -0700

    USB: c67x00: fix use after free in c67x00_giveback_urb
    
    commit 211f08347355cba1f769bbf3355816a12b3ddd55 upstream.
    
    clang static analysis flags this error
    
    c67x00-sched.c:489:55: warning: Use of memory after it is freed [unix.Malloc]
            usb_hcd_giveback_urb(c67x00_hcd_to_hcd(c67x00), urb, urbp->status);
                                                                 ^~~~~~~~~~~~
    Problem happens in this block of code
    
            c67x00_release_urb(c67x00, urb);
            usb_hcd_unlink_urb_from_ep(c67x00_hcd_to_hcd(c67x00), urb);
            spin_unlock(&c67x00->lock);
            usb_hcd_giveback_urb(c67x00_hcd_to_hcd(c67x00), urb, urbp->status);
    
    In the call to c67x00_release_urb has this freeing of urbp
    
            urbp = urb->hcpriv;
            urb->hcpriv = NULL;
            list_del(&urbp->hep_node);
            kfree(urbp);
    
    And so urbp is freed before usb_hcd_giveback_urb uses it as its 3rd
    parameter.
    
    Since all is required is the status, pass the status directly as is
    done in c64x00_urb_dequeue
    
    Fixes: e9b29ffc519b ("USB: add Cypress c67x00 OTG controller HCD driver")
    Signed-off-by: Tom Rix <trix@redhat.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200708131243.24336-1-trix@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b29d94694145e808bc6f401ab8dfcfb347b18280
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jul 10 18:06:56 2020 +0200

    ALSA: usb-audio: Fix race against the error recovery URB submission
    
    commit 9b7e5208a941e2e491a83eb5fa83d889e888fa2f upstream.
    
    USB MIDI driver has an error recovery mechanism to resubmit the URB in
    the delayed timer handler, and this may race with the standard start /
    stop operations.  Although both start and stop operations themselves
    don't race with each other due to the umidi->mutex protection, but
    this isn't applied to the timer handler.
    
    For fixing this potential race, the following changes are applied:
    
    - Since the timer handler can't use the mutex, we apply the
      umidi->disc_lock protection at each input stream URB submission;
      this also needs to change the GFP flag to GFP_ATOMIC
    - Add a check of the URB refcount and skip if already submitted
    - Move the timer cancel call at disconnection to the beginning of the
      procedure; this assures the in-flight timer handler is gone properly
      before killing all pending URBs
    
    Reported-by: syzbot+0f4ecfe6a2c322c81728@syzkaller.appspotmail.com
    Reported-by: syzbot+5f1d24c49c1d2c427497@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200710160656.16819-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67164961b6cf3044b890ef7b669ee0787d70b741
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Jul 10 15:33:51 2020 +0200

    ALSA: line6: Perform sanity check for each URB creation
    
    commit 6e8a914ad619042c5f25a4feb663357c4170fd8d upstream.
    
    LINE6 drivers create stream URBs with a fixed pipe without checking
    its validity, and this may lead to a kernel WARNING at the submission
    when a malformed USB descriptor is passed.
    
    For avoiding the kernel warning, perform the similar sanity checks for
    each pipe type at creating a URB.
    
    Reported-by: syzbot+c190f6858a04ea7fbc52@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/s5hv9iv4hq8.wl-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 395df6a7e920d260e14343532044bbf33beaede5
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Sun May 24 16:51:34 2020 -0700

    HID: magicmouse: do not set up autorepeat
    
    commit 6363d2065cd399cf9d6dc9d08c437f8658831100 upstream.
    
    Neither the trackpad, nor the mouse want input core to generate autorepeat
    events for their buttons, so let's reset the bit (as hid-input sets it for
    these devices based on the usage vendor code).
    
    Cc: stable@vger.kernel.org
    Reported-by: Yariv <oigevald+kernel@gmail.com>
    Tested-by: Yariv <oigevald+kernel@gmail.com>
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c95ff1219e9f104ce6d8e4e3b34cbd2a509b2c3
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:11 2020 +0200

    mtd: rawnand: oxnas: Release all devices in the _remove() path
    
    commit 0a5f45e57e35d0840bedb816974ce2e63406cd8b upstream.
    
    oxnans_nand_remove() should release all MTD devices and clean all NAND
    devices, not only the first one registered.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-39-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe119b95d4f5f24eee4414db4c18bbca48671365
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:10 2020 +0200

    mtd: rawnand: oxnas: Unregister all devices on error
    
    commit b60391eb17b2956ff2fc4c348e5a464da21ff9cb upstream.
    
    On error, the oxnas probe path just frees the device which failed and
    aborts the probe, leaving unreleased resources.
    
    Fix this situation by calling mtd_device_unregister()/nand_cleanup()
    on these.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-38-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b5490620c747d7f1fc05d8737b8eabad6fdaad8
Author: Miquel Raynal <miquel.raynal@bootlin.com>
Date:   Tue May 19 15:00:08 2020 +0200

    mtd: rawnand: oxnas: Keep track of registered devices
    
    commit 383fc3f613e7eac9f2e3c13b6f9fb8c1f39cb9d5 upstream.
    
    All initialized and registered devices should be listed somewhere so
    that we can unregister/free them in the _remove() path.
    
    This patch is not a fix per-se but is needed to apply three other
    fixes coming right after, explaining the Fixes/Cc: stable tags.
    
    Fixes: 668592492409 ("mtd: nand: Add OX820 NAND Support")
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200519130035.1883-36-miquel.raynal@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76207e3094eceecf4bffe66a173c02999d3ed2c5
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Fri May 22 14:15:21 2020 +0200

    mtd: rawnand: brcmnand: fix CS0 layout
    
    commit 3d3fb3c5be9ce07fa85d8f67fb3922e4613b955b upstream.
    
    Only v3.3-v5.0 have a different CS0 layout.
    Controllers before v3.3 use the same layout for every CS.
    
    Fixes: 27c5b17cd1b1 ("mtd: nand: add NAND driver "library" for Broadcom STB NAND controller")
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20200522121524.4161539-3-noltari@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9963d1cf6d9423daf11f40f59fa2ba3ba4624313
Author: Jin Yao <yao.jin@linux.intel.com>
Date:   Thu Apr 9 15:07:55 2020 +0800

    perf stat: Zero all the 'ena' and 'run' array slot stats for interval mode
    
    commit 0e0bf1ea1147fcf74eab19c2d3c853cc3740a72f upstream.
    
    As the code comments in perf_stat_process_counter() say, we calculate
    counter's data every interval, and the display code shows ps->res_stats
    avg value. We need to zero the stats for interval mode.
    
    But the current code only zeros the res_stats[0], it doesn't zero the
    res_stats[1] and res_stats[2], which are for ena and run of counter.
    
    This patch zeros the whole res_stats[] for interval mode.
    
    Fixes: 51fd2df1e882 ("perf stat: Fix interval output values")
    Signed-off-by: Jin Yao <yao.jin@linux.intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Jin Yao <yao.jin@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Kan Liang <kan.liang@linux.intel.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: http://lore.kernel.org/lkml/20200409070755.17261-1-yao.jin@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 334ea5ab88f448b785a49a0a2a91445fd969d6f6
Author: Kevin Buettner <kevinb@redhat.com>
Date:   Sat Jul 18 00:20:03 2020 -0700

    copy_xstate_to_kernel: Fix typo which caused GDB regression
    
    commit 5714ee50bb4375bd586858ad800b1d9772847452 upstream.
    
    This fixes a regression encountered while running the
    gdb.base/corefile.exp test in GDB's test suite.
    
    In my testing, the typo prevented the sw_reserved field of struct
    fxregs_state from being output to the kernel XSAVES area.  Thus the
    correct mask corresponding to XCR0 was not present in the core file for
    GDB to interrogate, resulting in the following behavior:
    
       [kev@f32-1 gdb]$ ./gdb -q testsuite/outputs/gdb.base/corefile/corefile testsuite/outputs/gdb.base/corefile/corefile.core
       Reading symbols from testsuite/outputs/gdb.base/corefile/corefile...
       [New LWP 232880]
    
       warning: Unexpected size of section `.reg-xstate/232880' in core file.
    
    With the typo fixed, the test works again as expected.
    
    Signed-off-by: Kevin Buettner <kevinb@redhat.com>
    Fixes: 9e4636545933 ("copy_xstate_to_kernel(): don't leave parts of destination uninitialized")
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Dave Airlie <airlied@gmail.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5de4d5cc38ace73dbeba3b70e5125f947483280
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Fri Jun 26 10:06:02 2020 +0200

    ARM: dts: socfpga: Align L2 cache-controller nodename with dtschema
    
    [ Upstream commit d7adfe5ffed9faa05f8926223086b101e14f700d ]
    
    Fix dtschema validator warnings like:
        l2-cache@fffff000: $nodename:0:
            'l2-cache@fffff000' does not match '^(cache-controller|cpu)(@[0-9a-f,]+)*$'
    
    Fixes: 475dc86d08de ("arm: dts: socfpga: Add a base DTSI for Altera's Arria10 SOC")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9fd6f1e4460de8990caa4381c77ccf7e198fbf1
Author: Enric Balletbo i Serra <enric.balletbo@collabora.com>
Date:   Tue Jul 7 12:34:12 2020 +0200

    Revert "thermal: mediatek: fix register index error"
    
    [ Upstream commit a8f62f183021be389561570ab5f8c701a5e70298 ]
    
    This reverts commit eb9aecd90d1a39601e91cd08b90d5fee51d321a6
    
    The above patch is supposed to fix a register index error on mt2701. It
    is not clear if the problem solved is a hang or just an invalid value
    returned, my guess is the second. The patch introduces, though, a new
    hang on MT8173 device making them unusable. So, seems reasonable, revert
    the patch because introduces a worst issue.
    
    The reason I send a revert instead of trying to fix the issue for MT8173
    is because the information needed to fix the issue is in the datasheet
    and is not public. So I am not really able to fix it.
    
    Fixes the following bug when CONFIG_MTK_THERMAL is set on MT8173
    devices.
    
    [    2.222488] Unable to handle kernel paging request at virtual address ffff8000125f5001
    [    2.230421] Mem abort info:
    [    2.233207]   ESR = 0x96000021
    [    2.236261]   EC = 0x25: DABT (current EL), IL = 32 bits
    [    2.241571]   SET = 0, FnV = 0
    [    2.244623]   EA = 0, S1PTW = 0
    [    2.247762] Data abort info:
    [    2.250640]   ISV = 0, ISS = 0x00000021
    [    2.254473]   CM = 0, WnR = 0
    [    2.257544] swapper pgtable: 4k pages, 48-bit VAs, pgdp=0000000041850000
    [    2.264251] [ffff8000125f5001] pgd=000000013ffff003, pud=000000013fffe003, pmd=000000013fff9003, pte=006800001100b707
    [    2.274867] Internal error: Oops: 96000021 [#1] PREEMPT SMP
    [    2.280432] Modules linked in:
    [    2.283483] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 5.7.0-rc6+ #162
    [    2.289914] Hardware name: Google Elm (DT)
    [    2.294003] pstate: 20000005 (nzCv daif -PAN -UAO)
    [    2.298792] pc : mtk_read_temp+0xb8/0x1c8
    [    2.302793] lr : mtk_read_temp+0x7c/0x1c8
    [    2.306794] sp : ffff80001003b930
    [    2.310100] x29: ffff80001003b930 x28: 0000000000000000
    [    2.315404] x27: 0000000000000002 x26: ffff0000f9550b10
    [    2.320709] x25: ffff0000f9550a80 x24: 0000000000000090
    [    2.326014] x23: ffff80001003ba24 x22: 00000000610344c0
    [    2.331318] x21: 0000000000002710 x20: 00000000000001f4
    [    2.336622] x19: 0000000000030d40 x18: ffff800011742ec0
    [    2.341926] x17: 0000000000000001 x16: 0000000000000001
    [    2.347230] x15: ffffffffffffffff x14: ffffff0000000000
    [    2.352535] x13: ffffffffffffffff x12: 0000000000000028
    [    2.357839] x11: 0000000000000003 x10: ffff800011295ec8
    [    2.363143] x9 : 000000000000291b x8 : 0000000000000002
    [    2.368447] x7 : 00000000000000a8 x6 : 0000000000000004
    [    2.373751] x5 : 0000000000000000 x4 : ffff800011295cb0
    [    2.379055] x3 : 0000000000000002 x2 : ffff8000125f5001
    [    2.384359] x1 : 0000000000000001 x0 : ffff0000f9550a80
    [    2.389665] Call trace:
    [    2.392105]  mtk_read_temp+0xb8/0x1c8
    [    2.395760]  of_thermal_get_temp+0x2c/0x40
    [    2.399849]  thermal_zone_get_temp+0x78/0x160
    [    2.404198]  thermal_zone_device_update.part.0+0x3c/0x1f8
    [    2.409589]  thermal_zone_device_update+0x34/0x48
    [    2.414286]  of_thermal_set_mode+0x58/0x88
    [    2.418375]  thermal_zone_of_sensor_register+0x1a8/0x1d8
    [    2.423679]  devm_thermal_zone_of_sensor_register+0x64/0xb0
    [    2.429242]  mtk_thermal_probe+0x690/0x7d0
    [    2.433333]  platform_drv_probe+0x5c/0xb0
    [    2.437335]  really_probe+0xe4/0x448
    [    2.440901]  driver_probe_device+0xe8/0x140
    [    2.445077]  device_driver_attach+0x7c/0x88
    [    2.449252]  __driver_attach+0xac/0x178
    [    2.453082]  bus_for_each_dev+0x78/0xc8
    [    2.456909]  driver_attach+0x2c/0x38
    [    2.460476]  bus_add_driver+0x14c/0x230
    [    2.464304]  driver_register+0x6c/0x128
    [    2.468131]  __platform_driver_register+0x50/0x60
    [    2.472831]  mtk_thermal_driver_init+0x24/0x30
    [    2.477268]  do_one_initcall+0x50/0x298
    [    2.481098]  kernel_init_freeable+0x1ec/0x264
    [    2.485450]  kernel_init+0x1c/0x110
    [    2.488931]  ret_from_fork+0x10/0x1c
    [    2.492502] Code: f9401081 f9400402 b8a67821 8b010042 (b9400042)
    [    2.498599] ---[ end trace e43e3105ed27dc99 ]---
    [    2.503367] Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b
    [    2.511020] SMP: stopping secondary CPUs
    [    2.514941] Kernel Offset: disabled
    [    2.518421] CPU features: 0x090002,25006005
    [    2.522595] Memory Limit: none
    [    2.525644] ---[ end Kernel panic - not syncing: Attempted to kill init! exitcode=0x0000000b ]--
    
    Cc: Michael Kao <michael.kao@mediatek.com>
    Fixes: eb9aecd90d1a ("thermal: mediatek: fix register index error")
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Reviewed-by: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Link: https://lore.kernel.org/r/20200707103412.1010823-1-enric.balletbo@collabora.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4520892460133a8f8aff1481158cb2bdc2314ad9
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Jul 9 13:29:36 2020 +0300

    staging: comedi: verify array index is correct before using it
    
    [ Upstream commit ef75e14a6c935eec82abac07ab68e388514e39bc ]
    
    This code reads from the array before verifying that "trig" is a valid
    index.  If the index is wildly out of bounds then reading from an
    invalid address could lead to an Oops.
    
    Fixes: a8c66b684efa ("staging: comedi: addi_apci_1500: rewrite the subdevice support functions")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Ian Abbott <abbotti@mev.co.uk>
    Link: https://lore.kernel.org/r/20200709102936.GA20875@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3819e13f7e4abb5fcc22fa413f427778748a1388
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Thu May 28 20:35:54 2020 +0200

    usb: gadget: udc: atmel: fix uninitialized read in debug printk
    
    [ Upstream commit 30517ffeb3bff842e1355cbc32f1959d9dbb5414 ]
    
    Fixed commit moved the assignment of 'req', but did not update a
    reference in the DBG() call. Use the argument as it was renamed.
    
    Fixes: 5fb694f96e7c ("usb: gadget: udc: atmel: fix possible oops when unloading module")
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffd7f1417b8728a9c9cd84d134bd1533f08d66b3
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Mon Jul 6 16:34:34 2020 +0200

    spi: spi-sun6i: sun6i_spi_transfer_one(): fix setting of clock rate
    
    [ Upstream commit ed7815db70d17b1741883f2da8e1d80bc2efe517 ]
    
    A SPI transfer defines the _maximum_ speed of the SPI transfer. However the
    driver doesn't take into account that the clock divider is always rounded down
    (due to integer arithmetics). This results in a too high clock rate for the SPI
    transfer.
    
    E.g.: with a mclk_rate of 24 MHz and a SPI transfer speed of 10 MHz, the
    original code calculates a reg of "0", which results in a effective divider of
    "2" and a 12 MHz clock for the SPI transfer.
    
    This patch fixes the issue by using DIV_ROUND_UP() instead of a plain
    integer division.
    
    While there simplify the divider calculation for the CDR1 case, use
    order_base_2() instead of two ilog2() calculations.
    
    Fixes: 3558fe900e8a ("spi: sunxi: Add Allwinner A31 SPI controller driver")
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Acked-by: Maxime Ripard <mripard@kernel.org>
    Link: https://lore.kernel.org/r/20200706143443.9855-2-mkl@pengutronix.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a09f1d75260a204cc1349c1be4572947fe3f2b8
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Wed Jun 17 14:53:46 2020 +0200

    arm64: dts: meson: add missing gxl rng clock
    
    [ Upstream commit 95ca6f06dd4827ff63be5154120c7a8511cd9a41 ]
    
    The peripheral clock of the RNG is missing for gxl while it is present
    for gxbb.
    
    Fixes: 1b3f6d148692 ("ARM64: dts: meson-gx: add clock CLKID_RNG0 to hwrng node")
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Link: https://lore.kernel.org/r/20200617125346.1163527-1-jbrunet@baylibre.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ff312698dc8a39e72bbafbc6b0d1cb515f84872
Author: Colin Ian King <colin.king@canonical.com>
Date:   Thu Jun 25 13:44:28 2020 +0100

    phy: sun4i-usb: fix dereference of pointer phy0 before it is null checked
    
    [ Upstream commit 38b1927e5bf9bcad4a2e33189ef1c5569f9599ba ]
    
    Currently pointer phy0 is being dereferenced via the assignment of
    phy on the call to phy_get_drvdata before phy0 is null checked, this
    can lead to a null pointer dereference. Fix this by performing the
    null check on phy0 before the call to phy_get_drvdata. Also replace
    the phy0 == NULL check with the more usual !phy0 idiom.
    
    Addresses-Coverity: ("Dereference before null check")
    Fixes: e6f32efb1b12 ("phy: sun4i-usb: Make sure to disable PHY0 passby for peripheral mode")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Link: https://lore.kernel.org/r/20200625124428.83564-1-colin.king@canonical.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3787d25aa96182e02c5d904407d434cb9bdf73d7
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun May 17 18:29:57 2020 +0100

    iio:health:afe4404 Fix timestamp alignment and prevent data leak.
    
    [ Upstream commit f88ecccac4be348bbcc6d056bdbc622a8955c04d ]
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 40 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    Fixes: 87aec56e27ef ("iio: health: Add driver for the TI AFE4404 heart monitor")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef28fa6dad17f4ff67a70a0e6f563b1d6e44e5be
Author: Paul Menzel <pmenzel@molgen.mpg.de>
Date:   Fri May 22 14:22:28 2020 +0200

    ACPI: video: Use native backlight on Acer TravelMate 5735Z
    
    [ Upstream commit c41c36e900a337b4132b12ccabc97f5578248b44 ]
    
    Currently, changing the brightness of the internal display of the Acer
    TravelMate 5735Z does not work. Pressing the function keys or changing the
    slider, GNOME Shell 3.36.2 displays the OSD (five steps), but the
    brightness does not change.
    
    The Acer TravelMate 5735Z shipped with Windows 7 and as such does not
    trigger our "win8 ready" heuristic for preferring the native backlight
    interface.
    
    Still ACPI backlight control doesn't work on this model, where as the
    native (intel_video) backlight interface does work by adding
    `acpi_backlight=native` or `acpi_backlight=none` to Linux’ command line.
    
    So, add a quirk to force using native backlight control on this model.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=207835
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Paul Menzel <pmenzel@molgen.mpg.de>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d183b7d43ae87f83f2c38b4fff5decaf41b2983a
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Mar 31 14:36:23 2020 +0200

    ACPI: video: Use native backlight on Acer Aspire 5783z
    
    [ Upstream commit 1c8fbc1f9bfb804ef2f0d4ee9397ab800e33f23a ]
    
    The Acer Aspire 5783z shipped with Windows 7 and as such does not trigger
    our "win8 ready" heuristic for prefering the native backlight interface.
    
    Still ACPI backlight control doesn't work on this model, where as the
    native (intel_video) backlight interface does work. Add a quirk to
    force using native backlight control on this model.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4364301a6285debc3f357e9b1e1854f69af9257c
Author: Haibo Chen <haibo.chen@nxp.com>
Date:   Wed Feb 19 16:22:40 2020 +0800

    mmc: sdhci: do not enable card detect interrupt for gpio cd type
    
    [ Upstream commit e65bb38824711559844ba932132f417bc5a355e2 ]
    
    Except SDHCI_QUIRK_BROKEN_CARD_DETECTION and MMC_CAP_NONREMOVABLE,
    we also do not need to handle controller native card detect interrupt
    for gpio cd type.
    If we wrong enabled the card detect interrupt for gpio case, it will
    cause a lot of unexpected card detect interrupts during data transfer
    which should not happen.
    
    Signed-off-by: Haibo Chen <haibo.chen@nxp.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/1582100563-20555-2-git-send-email-haibo.chen@nxp.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 97698fdd6d57828b7a67a5732cc3ebaf52cfe4db
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Fri Feb 21 10:15:30 2020 +0100

    doc: dt: bindings: usb: dwc3: Update entries for disabling SS instances in park mode
    
    [ Upstream commit 3d157c28d2289edf0439e8308e8de3a06acaaf0e ]
    
    This patch updates the documentation with the information related
    to the quirks that needs to be added for disabling all SuperSpeed XHCI
    instances in park mode.
    
    Cc: Dongjin Kim <tobetter@gmail.com>
    Cc: Jianxin Pan <jianxin.pan@amlogic.com>
    Cc: Thinh Nguyen <thinhn@synopsys.com>
    Cc: Jun Li <lijun.kernel@gmail.com>
    Reported-by: Tim <elatllat@gmail.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e04ced392102ea7f039893cae7ce4a650f77e6d
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Jul 17 12:57:16 2020 -0400

    Revert "usb/xhci-plat: Set PM runtime as active on resume"
    
    This reverts commit 9f33eff4958885f6fd64c18221c36d065ef8ba8a.
    
    Eugeniu Rosca writes:
    
    On Thu, Jul 09, 2020 at 09:00:23AM +0200, Eugeniu Rosca wrote:
    >After integrating v4.14.186 commit 5410d158ca2a50 ("usb/ehci-platform:
    >Set PM runtime as active on resume") into downstream v4.14.x, we started
    >to consistently experience below panic [1] on every second s2ram of
    >R-Car H3 Salvator-X Renesas reference board.
    >
    >After some investigations, we concluded the following:
    > - the issue does not exist in vanilla v5.8-rc4+
    > - [bisecting shows that] the panic on v4.14.186 is caused by the lack
    >   of v5.6-rc1 commit 987351e1ea7772 ("phy: core: Add consumer device
    >   link support"). Getting evidence for that is easy. Reverting
    >   987351e1ea7772 in vanilla leads to a similar backtrace [2].
    >
    >Questions:
    > - Backporting 987351e1ea7772 ("phy: core: Add consumer device
    >   link support") to v4.14.187 looks challenging enough, so probably not
    >   worth it. Anybody to contradict this?
    > - Assuming no plans to backport the missing mainline commit to v4.14.x,
    >   should the following three v4.14.186 commits be reverted on v4.14.x?
    >   * baef809ea497a4 ("usb/ohci-platform: Fix a warning when hibernating")
    >   * 9f33eff4958885 ("usb/xhci-plat: Set PM runtime as active on resume")
    >   * 5410d158ca2a50 ("usb/ehci-platform: Set PM runtime as active on resume")
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a938cdfbcfff0040f24d8e926a41642c4064a87a
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Jul 17 12:57:05 2020 -0400

    Revert "usb/ehci-platform: Set PM runtime as active on resume"
    
    This reverts commit 5410d158ca2a50bcf3f48c57f6cd73f4cf479e69.
    
    Eugeniu Rosca writes:
    
    On Thu, Jul 09, 2020 at 09:00:23AM +0200, Eugeniu Rosca wrote:
    >After integrating v4.14.186 commit 5410d158ca2a50 ("usb/ehci-platform:
    >Set PM runtime as active on resume") into downstream v4.14.x, we started
    >to consistently experience below panic [1] on every second s2ram of
    >R-Car H3 Salvator-X Renesas reference board.
    >
    >After some investigations, we concluded the following:
    > - the issue does not exist in vanilla v5.8-rc4+
    > - [bisecting shows that] the panic on v4.14.186 is caused by the lack
    >   of v5.6-rc1 commit 987351e1ea7772 ("phy: core: Add consumer device
    >   link support"). Getting evidence for that is easy. Reverting
    >   987351e1ea7772 in vanilla leads to a similar backtrace [2].
    >
    >Questions:
    > - Backporting 987351e1ea7772 ("phy: core: Add consumer device
    >   link support") to v4.14.187 looks challenging enough, so probably not
    >   worth it. Anybody to contradict this?
    > - Assuming no plans to backport the missing mainline commit to v4.14.x,
    >   should the following three v4.14.186 commits be reverted on v4.14.x?
    >   * baef809ea497a4 ("usb/ohci-platform: Fix a warning when hibernating")
    >   * 9f33eff4958885 ("usb/xhci-plat: Set PM runtime as active on resume")
    >   * 5410d158ca2a50 ("usb/ehci-platform: Set PM runtime as active on resume")
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 44b853b4ae3db69344413aea25b91223bf1b5544
Author: Sasha Levin <sashal@kernel.org>
Date:   Fri Jul 17 12:56:32 2020 -0400

    Revert "usb/ohci-platform: Fix a warning when hibernating"
    
    This reverts commit baef809ea497a4f21fa67814b61094bbcc191c39.
    
    Eugeniu Rosca writes:
    
    On Thu, Jul 09, 2020 at 09:00:23AM +0200, Eugeniu Rosca wrote:
    >After integrating v4.14.186 commit 5410d158ca2a50 ("usb/ehci-platform:
    >Set PM runtime as active on resume") into downstream v4.14.x, we started
    >to consistently experience below panic [1] on every second s2ram of
    >R-Car H3 Salvator-X Renesas reference board.
    >
    >After some investigations, we concluded the following:
    > - the issue does not exist in vanilla v5.8-rc4+
    > - [bisecting shows that] the panic on v4.14.186 is caused by the lack
    >   of v5.6-rc1 commit 987351e1ea7772 ("phy: core: Add consumer device
    >   link support"). Getting evidence for that is easy. Reverting
    >   987351e1ea7772 in vanilla leads to a similar backtrace [2].
    >
    >Questions:
    > - Backporting 987351e1ea7772 ("phy: core: Add consumer device
    >   link support") to v4.14.187 looks challenging enough, so probably not
    >   worth it. Anybody to contradict this?
    > - Assuming no plans to backport the missing mainline commit to v4.14.x,
    >   should the following three v4.14.186 commits be reverted on v4.14.x?
    >   * baef809ea497a4 ("usb/ohci-platform: Fix a warning when hibernating")
    >   * 9f33eff4958885 ("usb/xhci-plat: Set PM runtime as active on resume")
    >   * 5410d158ca2a50 ("usb/ehci-platform: Set PM runtime as active on resume")
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 663c29703870615c8eca5f739ff6bb2f283a9b39
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Fri Jun 19 11:47:46 2020 -0700

    of: of_mdio: Correct loop scanning logic
    
    [ Upstream commit 5a8d7f126c97d04d893f5e5be2b286437a0d01b0 ]
    
    Commit 209c65b61d94 ("drivers/of/of_mdio.c:fix of_mdiobus_register()")
    introduced a break of the loop on the premise that a successful
    registration should exit the loop. The premise is correct but not to
    code, because rc && rc != -ENODEV is just a special error condition,
    that means we would exit the loop even with rc == -ENODEV which is
    absolutely not correct since this is the error code to indicate to the
    MDIO bus layer that scanning should continue.
    
    Fix this by explicitly checking for rc = 0 as the only valid condition
    to break out of the loop.
    
    Fixes: 209c65b61d94 ("drivers/of/of_mdio.c:fix of_mdiobus_register()")
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85cbb3273824908852ec1ee22202276bb2816583
Author: Florian Fainelli <f.fainelli@gmail.com>
Date:   Wed Jun 17 20:42:44 2020 -0700

    net: dsa: bcm_sf2: Fix node reference count
    
    [ Upstream commit 8dbe4c5d5e40fe140221024f7b16bec9f310bf70 ]
    
    of_find_node_by_name() will do an of_node_put() on the "from" argument.
    With CONFIG_OF_DYNAMIC enabled which checks for device_node reference
    counts, we would be getting a warning like this:
    
    [    6.347230] refcount_t: increment on 0; use-after-free.
    [    6.352498] WARNING: CPU: 3 PID: 77 at lib/refcount.c:156
    refcount_inc_checked+0x38/0x44
    [    6.360601] Modules linked in:
    [    6.363661] CPU: 3 PID: 77 Comm: kworker/3:1 Tainted: G        W
    5.4.46-gb78b3e9956e6 #13
    [    6.372546] Hardware name: BCM97278SV (DT)
    [    6.376649] Workqueue: events deferred_probe_work_func
    [    6.381796] pstate: 60000005 (nZCv daif -PAN -UAO)
    [    6.386595] pc : refcount_inc_checked+0x38/0x44
    [    6.391133] lr : refcount_inc_checked+0x38/0x44
    ...
    [    6.478791] Call trace:
    [    6.481243]  refcount_inc_checked+0x38/0x44
    [    6.485433]  kobject_get+0x3c/0x4c
    [    6.488840]  of_node_get+0x24/0x34
    [    6.492247]  of_irq_find_parent+0x3c/0xe0
    [    6.496263]  of_irq_parse_one+0xe4/0x1d0
    [    6.500191]  irq_of_parse_and_map+0x44/0x84
    [    6.504381]  bcm_sf2_sw_probe+0x22c/0x844
    [    6.508397]  platform_drv_probe+0x58/0xa8
    [    6.512413]  really_probe+0x238/0x3fc
    [    6.516081]  driver_probe_device+0x11c/0x12c
    [    6.520358]  __device_attach_driver+0xa8/0x100
    [    6.524808]  bus_for_each_drv+0xb4/0xd0
    [    6.528650]  __device_attach+0xd0/0x164
    [    6.532493]  device_initial_probe+0x24/0x30
    [    6.536682]  bus_probe_device+0x38/0x98
    [    6.540524]  deferred_probe_work_func+0xa8/0xd4
    [    6.545061]  process_one_work+0x178/0x288
    [    6.549078]  process_scheduled_works+0x44/0x48
    [    6.553529]  worker_thread+0x218/0x270
    [    6.557285]  kthread+0xdc/0xe4
    [    6.560344]  ret_from_fork+0x10/0x18
    [    6.563925] ---[ end trace 68f65caf69bb152a ]---
    
    Fix this by adding a of_node_get() to increment the reference count
    prior to the call.
    
    Fixes: afa3b592953b ("net: dsa: bcm_sf2: Ensure correct sub-node is parsed")
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 481d6ae0318ba6d674ae9994d57d5473fa19e724
Author: Angelo Dureghello <angelo@sysam.it>
Date:   Wed Dec 26 22:45:06 2018 +0100

    spi: fix initial SPI_SR value in spi-fsl-dspi
    
    [ Upstream commit aa54c1c9d90e6db75190813907190fadcce1bf45 ]
    
    On ColdFire mcf54418, using DSPI_DMA_MODE mode, spi transfers
    at first boot stage are not succeding:
    
    m25p80 spi0.1: unrecognized JEDEC id bytes: 00, 00, 00
    
    The reason is the SPI_SR initial value set by the driver, that
    is not clearing (not setting to 1) the RF_DF flag. After a tour
    on the dspi hw modules that use this driver(Vybrid, ColdFire and
    ls1021a) a better init value for SR register has been set.
    
    Signed-off-by: Angelo Dureghello <angelo@sysam.it>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd32f89fbba9d791270275ab2a7c3dcc7de53915
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Jun 22 13:05:41 2020 +0200

    spi: spi-fsl-dspi: Fix lockup if device is shutdown during SPI transfer
    
    [ Upstream commit 3c525b69e8c1a9a6944e976603c7a1a713e728f9 ]
    
    During shutdown, the driver should unregister the SPI controller
    and stop the hardware.  Otherwise the dspi_transfer_one_message() could
    wait on completion infinitely.
    
    Additionally, calling spi_unregister_controller() first in device
    shutdown reverse-matches the probe function, where SPI controller is
    registered at the end.
    
    Fixes: dc234825997e ("spi: spi-fsl-dspi: Adding shutdown hook")
    Reported-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200622110543.5035-2-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84c559f674e7fce9946da6cf8dde5919419ec481
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun May 17 18:29:56 2020 +0100

    iio:health:afe4403 Fix timestamp alignment and prevent data leak.
    
    commit 3f9c6d38797e9903937b007a341dad0c251765d6 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses a 32 byte array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data with alignment
    explicitly requested.  This data is allocated with kzalloc so no
    data can leak appart from previous readings.
    
    Fixes: eec96d1e2d31 ("iio: health: Add driver for the TI AFE4403 heart monitor")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Andrew F. Davis <afd@ti.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbd51c5ea8acfb99daa060d3007cb89edb79c817
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:57 2020 +0100

    iio:pressure:ms5611 Fix buffer element alignment
    
    commit 8db4afe163bbdd93dca6fcefbb831ef12ecc6b4d upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    Here there is no data leak possibility so use an explicit structure
    on the stack to ensure alignment and nice readable fashion.
    
    The forced alignment of ts isn't strictly necessary in this driver
    as the padding will be correct anyway (there isn't any).  However
    it is probably less fragile to have it there and it acts as
    documentation of the requirement.
    
    Fixes: 713bbb4efb9dc ("iio: pressure: ms5611: Add triggered buffer support")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Acked-by: Tomasz Duszynski <tomasz.duszynski@octakon.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4dd9cc8e5b7b3d85b735d346b955a51daf396396
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Thu Jun 4 21:44:44 2020 -0500

    iio: pressure: zpa2326: handle pm_runtime_get_sync failure
    
    commit d88de040e1df38414fc1e4380be9d0e997ab4d58 upstream.
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count. Call pm_runtime_put if
    pm_runtime_get_sync fails.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Fixes: 03b262f2bbf4 ("iio:pressure: initial zpa2326 barometer support")
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f94df389d08aca41aa36df756afc2578f29ce286
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Thu May 28 14:41:21 2020 +0800

    iio: mma8452: Add missed iio_device_unregister() call in mma8452_probe()
    
    commit d7369ae1f4d7cffa7574d15e1f787dcca184c49d upstream.
    
    The function iio_device_register() was called in mma8452_probe().
    But the function iio_device_unregister() was not called after
    a call of the function mma8452_set_freefall_mode() failed.
    Thus add the missed function call for one error case.
    
    Fixes: 1a965d405fc6 ("drivers:iio:accel:mma8452: added cleanup provision in case of failure.")
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23bd0a51578994c5bbb3e8c62d8eff6c3098d302
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue May 26 18:47:17 2020 +0800

    iio: magnetometer: ak8974: Fix runtime PM imbalance on error
    
    commit 0187294d227dfc42889e1da8f8ce1e44fc25f147 upstream.
    
    When devm_regmap_init_i2c() returns an error code, a pairing
    runtime PM usage counter decrement is needed to keep the
    counter balanced. For error paths after ak8974_set_power(),
    ak8974_detect() and ak8974_reset(), things are the same.
    
    However, When iio_triggered_buffer_setup() returns an error
    code, there will be two PM usgae counter decrements.
    
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Fixes: 7c94a8b2ee8c ("iio: magn: add a driver for AK8974")
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87edf169e4701a75825ce56ff48dc5d7558fa3ab
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:52 2020 +0100

    iio:humidity:hdc100x Fix alignment and data leak issues
    
    commit ea5e7a7bb6205d24371373cd80325db1bc15eded upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    This data is allocated with kzalloc so no data can leak apart
    from previous readings.
    
    Fixes: 16bf793f86b2 ("iio: humidity: hdc100x: add triggered buffer support for HDC100X")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: Matt Ranostay <matt.ranostay@konsulko.com>
    Cc: Alison Schofield <amsfield22@gmail.com>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 192ada836260791eb20b91b28da35dfbda486a95
Author: Jonathan Cameron <Jonathan.Cameron@huawei.com>
Date:   Sun Jun 7 16:53:49 2020 +0100

    iio:magnetometer:ak8974: Fix alignment and data leak issues
    
    commit 838e00b13bfd4cac8b24df25bfc58e2eb99bcc70 upstream.
    
    One of a class of bugs pointed out by Lars in a recent review.
    iio_push_to_buffers_with_timestamp assumes the buffer used is aligned
    to the size of the timestamp (8 bytes).  This is not guaranteed in
    this driver which uses an array of smaller elements on the stack.
    As Lars also noted this anti pattern can involve a leak of data to
    userspace and that indeed can happen here.  We close both issues by
    moving to a suitable structure in the iio_priv() data.
    
    This data is allocated with kzalloc so no data can leak appart from
    previous readings.
    
    Fixes: 7c94a8b2ee8cf ("iio: magn: add a driver for AK8974")
    Reported-by: Lars-Peter Clausen <lars@metafoo.de>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5ae2398c90d8a9a757a4558cd64177a6f44237ce
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Jul 9 15:59:53 2020 +0300

    arm64/alternatives: don't patch up internal branches
    
    [ Upstream commit 5679b28142193a62f6af93249c0477be9f0c669b ]
    
    Commit f7b93d42945c ("arm64/alternatives: use subsections for replacement
    sequences") moved the alternatives replacement sequences into subsections,
    in order to keep the as close as possible to the code that they replace.
    
    Unfortunately, this broke the logic in branch_insn_requires_update,
    which assumed that any branch into kernel executable code was a branch
    that required updating, which is no longer the case now that the code
    sequences that are patched in are in the same section as the patch site
    itself.
    
    So the only way to discriminate branches that require updating and ones
    that don't is to check whether the branch targets the replacement sequence
    itself, and so we can drop the call to kernel_text_address() entirely.
    
    Fixes: f7b93d42945c ("arm64/alternatives: use subsections for replacement sequences")
    Reported-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Alexandru Elisei <alexandru.elisei@arm.com>
    Link: https://lore.kernel.org/r/20200709125953.30918-1-ardb@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28148f1e182d12b3ddd5473ceebd0a2cf3d3da09
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Tue Aug 7 18:59:57 2018 -0500

    arm64: alternative: Use true and false for boolean values
    
    [ Upstream commit 3c4d9137eefecf273a520d392071ffc9df0a9a7a ]
    
    Return statements in functions returning bool should use true or false
    instead of an integer value. This code was detected with the help of
    Coccinelle.
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e2dd52634148fc117d9b44615df80351ae88cb7
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jul 2 13:15:27 2020 +0300

    i2c: eg20t: Load module automatically if ID matches
    
    [ Upstream commit 5f90786b31fb7d1e199a8999d46c4e3aea672e11 ]
    
    The driver can't be loaded automatically because it misses
    module alias to be provided. Add corresponding MODULE_DEVICE_TABLE()
    call to the driver.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8bde1b2803839e17bfc09cb583f0d18f9790f909
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Thu Jun 25 13:30:18 2020 -0500

    gfs2: read-only mounts should grab the sd_freeze_gl glock
    
    [ Upstream commit b780cc615ba4795a7ef0e93b19424828a5ad456a ]
    
    Before this patch, only read-write mounts would grab the freeze
    glock in read-only mode, as part of gfs2_make_fs_rw. So the freeze
    glock was never initialized. That meant requests to freeze, which
    request the glock in EX, were granted without any state transition.
    That meant you could mount a gfs2 file system, which is currently
    frozen on a different cluster node, in read-only mode.
    
    This patch makes read-only mounts lock the freeze glock in SH mode,
    which will block for file systems that are frozen on another node.
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a5d453fc132479cc94a17355ef398b90704027b
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Sat Jun 13 17:18:33 2020 +0300

    tpm_tis: extra chip->ops check on error path in tpm_tis_core_init
    
    [ Upstream commit ccf6fb858e17a8f8a914a1c6444d277cfedfeae6 ]
    
    Found by smatch:
    drivers/char/tpm/tpm_tis_core.c:1088 tpm_tis_core_init() warn:
     variable dereferenced before check 'chip->ops' (see line 979)
    
    'chip->ops' is assigned in the beginning of function
    in tpmm_chip_alloc->tpm_chip_alloc
    and is used before first possible goto to error path.
    
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Reviewed-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83ec1a5fd45f425af9e1cf5db02302470418f105
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jun 30 10:19:21 2020 +0200

    arm64/alternatives: use subsections for replacement sequences
    
    [ Upstream commit f7b93d42945cc71e1346dd5ae07c59061d56745e ]
    
    When building very large kernels, the logic that emits replacement
    sequences for alternatives fails when relative branches are present
    in the code that is emitted into the .altinstr_replacement section
    and patched in at the original site and fixed up. The reason is that
    the linker will insert veneers if relative branches go out of range,
    and due to the relative distance of the .altinstr_replacement from
    the .text section where its branch targets usually live, veneers
    may be emitted at the end of the .altinstr_replacement section, with
    the relative branches in the sequence pointed at the veneers instead
    of the actual target.
    
    The alternatives patching logic will attempt to fix up the branch to
    point to its original target, which will be the veneer in this case,
    but given that the patch site is likely to be far away as well, it
    will be out of range and so patching will fail. There are other cases
    where these veneers are problematic, e.g., when the target of the
    branch is in .text while the patch site is in .init.text, in which
    case putting the replacement sequence inside .text may not help either.
    
    So let's use subsections to emit the replacement code as closely as
    possible to the patch site, to ensure that veneers are only likely to
    be emitted if they are required at the patch site as well, in which
    case they will be in range for the replacement sequence both before
    and after it is transported to the patch site.
    
    This will prevent alternative sequences in non-init code from being
    released from memory after boot, but this is tolerable given that the
    entire section is only 512 KB on an allyesconfig build (which weighs in
    at 500+ MB for the entire Image). Also, note that modules today carry
    the replacement sequences in non-init sections as well, and any of
    those that target init code will be emitted into init sections after
    this change.
    
    This fixes an early crash when booting an allyesconfig kernel on a
    system where any of the alternatives sequences containing relative
    branches are activated at boot (e.g., ARM64_HAS_PAN on TX2)
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Cc: Suzuki K Poulose <suzuki.poulose@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: Andre Przywara <andre.przywara@arm.com>
    Cc: Dave P Martin <dave.martin@arm.com>
    Link: https://lore.kernel.org/r/20200630081921.13443-1-ardb@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2bac869e28779e6a5d214d9418912cd898e869ad
Author: Navid Emamdoost <navid.emamdoost@gmail.com>
Date:   Mon Jun 15 00:49:28 2020 -0500

    drm/exynos: fix ref count leak in mic_pre_enable
    
    [ Upstream commit d4f5a095daf0d25f0b385e1ef26338608433a4c5 ]
    
    in mic_pre_enable, pm_runtime_get_sync is called which
    increments the counter even in case of failure, leading to incorrect
    ref count. In case of failure, decrement the ref count before returning.
    
    Signed-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e508d28426cd06222abbd1f54cdcfe26280c71ee
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Jul 9 16:28:44 2020 -0700

    cgroup: Fix sock_cgroup_data on big-endian.
    
    [ Upstream commit 14b032b8f8fce03a546dcf365454bec8c4a58d7d ]
    
    In order for no_refcnt and is_data to be the lowest order two
    bits in the 'val' we have to pad out the bitfield of the u8.
    
    Fixes: ad0f75e5f57c ("cgroup: fix cgroup_sk_alloc() for sk_clone_lock()")
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 810a31030e87140d4592d1e03deb7b6e6e495a75
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Jul 2 11:52:56 2020 -0700

    cgroup: fix cgroup_sk_alloc() for sk_clone_lock()
    
    [ Upstream commit ad0f75e5f57ccbceec13274e1e242f2b5a6397ed ]
    
    When we clone a socket in sk_clone_lock(), its sk_cgrp_data is
    copied, so the cgroup refcnt must be taken too. And, unlike the
    sk_alloc() path, sock_update_netprioidx() is not called here.
    Therefore, it is safe and necessary to grab the cgroup refcnt
    even when cgroup_sk_alloc is disabled.
    
    sk_clone_lock() is in BH context anyway, the in_interrupt()
    would terminate this function if called there. And for sk_alloc()
    skcd->val is always zero. So it's safe to factor out the code
    to make it more readable.
    
    The global variable 'cgroup_sk_alloc_disabled' is used to determine
    whether to take these reference counts. It is impossible to make
    the reference counting correct unless we save this bit of information
    in skcd->val. So, add a new bit there to record whether the socket
    has already taken the reference counts. This obviously relies on
    kmalloc() to align cgroup pointers to at least 4 bytes,
    ARCH_KMALLOC_MINALIGN is certainly larger than that.
    
    This bug seems to be introduced since the beginning, commit
    d979a39d7242 ("cgroup: duplicate cgroup reference when cloning sockets")
    tried to fix it but not compeletely. It seems not easy to trigger until
    the recent commit 090e28b229af
    ("netprio_cgroup: Fix unlimited memory leak of v2 cgroups") was merged.
    
    Fixes: bd1060a1d671 ("sock, cgroup: add sock->sk_cgroup")
    Reported-by: Cameron Berkenpas <cam@neo-zeon.de>
    Reported-by: Peter Geis <pgwipeout@gmail.com>
    Reported-by: Lu Fengqi <lufq.fnst@cn.fujitsu.com>
    Reported-by: Daniël Sonck <dsonck92@gmail.com>
    Reported-by: Zhang Qiang <qiang.zhang@windriver.com>
    Tested-by: Cameron Berkenpas <cam@neo-zeon.de>
    Tested-by: Peter Geis <pgwipeout@gmail.com>
    Tested-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Zefan Li <lizefan@huawei.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Roman Gushchin <guro@fb.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5a32f21909ba9566f6bceaf6bcfa25c9dca3cbe5
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 1 12:41:23 2020 -0700

    tcp: md5: do not send silly options in SYNCOOKIES
    
    [ Upstream commit e114e1e8ac9d31f25b9dd873bab5d80c1fc482ca ]
    
    Whenever cookie_init_timestamp() has been used to encode
    ECN,SACK,WSCALE options, we can not remove the TS option in the SYNACK.
    
    Otherwise, tcp_synack_options() will still advertize options like WSCALE
    that we can not deduce later when receiving the packet from the client
    to complete 3WHS.
    
    Note that modern linux TCP stacks wont use MD5+TS+SACK in a SYN packet,
    but we can not know for sure that all TCP stacks have the same logic.
    
    Before the fix a tcpdump would exhibit this wrong exchange :
    
    10:12:15.464591 IP C > S: Flags [S], seq 4202415601, win 65535, options [nop,nop,md5 valid,mss 1400,sackOK,TS val 456965269 ecr 0,nop,wscale 8], length 0
    10:12:15.464602 IP S > C: Flags [S.], seq 253516766, ack 4202415602, win 65535, options [nop,nop,md5 valid,mss 1400,nop,nop,sackOK,nop,wscale 8], length 0
    10:12:15.464611 IP C > S: Flags [.], ack 1, win 256, options [nop,nop,md5 valid], length 0
    10:12:15.464678 IP C > S: Flags [P.], seq 1:13, ack 1, win 256, options [nop,nop,md5 valid], length 12
    10:12:15.464685 IP S > C: Flags [.], ack 13, win 65535, options [nop,nop,md5 valid], length 0
    
    After this patch the exchange looks saner :
    
    11:59:59.882990 IP C > S: Flags [S], seq 517075944, win 65535, options [nop,nop,md5 valid,mss 1400,sackOK,TS val 1751508483 ecr 0,nop,wscale 8], length 0
    11:59:59.883002 IP S > C: Flags [S.], seq 1902939253, ack 517075945, win 65535, options [nop,nop,md5 valid,mss 1400,sackOK,TS val 1751508479 ecr 1751508483,nop,wscale 8], length 0
    11:59:59.883012 IP C > S: Flags [.], ack 1, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508483 ecr 1751508479], length 0
    11:59:59.883114 IP C > S: Flags [P.], seq 1:13, ack 1, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508483 ecr 1751508479], length 12
    11:59:59.883122 IP S > C: Flags [.], ack 13, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508483 ecr 1751508483], length 0
    11:59:59.883152 IP S > C: Flags [P.], seq 1:13, ack 13, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508484 ecr 1751508483], length 12
    11:59:59.883170 IP C > S: Flags [.], ack 13, win 256, options [nop,nop,md5 valid,nop,nop,TS val 1751508484 ecr 1751508484], length 0
    
    Of course, no SACK block will ever be added later, but nothing should break.
    Technically, we could remove the 4 nops included in MD5+TS options,
    but again some stacks could break seeing not conventional alignment.
    
    Fixes: 4957faade11b ("TCPCT part 1g: Responder Cookie => Initiator")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Florian Westphal <fw@strlen.de>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f29a718e50aa9f12b288df7aab5cff96faaf189
Author: Christoph Paasch <cpaasch@apple.com>
Date:   Wed Jul 8 16:18:34 2020 -0700

    tcp: make sure listeners don't initialize congestion-control state
    
    [ Upstream commit ce69e563b325f620863830c246a8698ccea52048 ]
    
    syzkaller found its way into setsockopt with TCP_CONGESTION "cdg".
    tcp_cdg_init() does a kcalloc to store the gradients. As sk_clone_lock
    just copies all the memory, the allocated pointer will be copied as
    well, if the app called setsockopt(..., TCP_CONGESTION) on the listener.
    If now the socket will be destroyed before the congestion-control
    has properly been initialized (through a call to tcp_init_transfer), we
    will end up freeing memory that does not belong to that particular
    socket, opening the door to a double-free:
    
    [   11.413102] ==================================================================
    [   11.414181] BUG: KASAN: double-free or invalid-free in tcp_cleanup_congestion_control+0x58/0xd0
    [   11.415329]
    [   11.415560] CPU: 3 PID: 4884 Comm: syz-executor.5 Not tainted 5.8.0-rc2 #80
    [   11.416544] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    [   11.418148] Call Trace:
    [   11.418534]  <IRQ>
    [   11.418834]  dump_stack+0x7d/0xb0
    [   11.419297]  print_address_description.constprop.0+0x1a/0x210
    [   11.422079]  kasan_report_invalid_free+0x51/0x80
    [   11.423433]  __kasan_slab_free+0x15e/0x170
    [   11.424761]  kfree+0x8c/0x230
    [   11.425157]  tcp_cleanup_congestion_control+0x58/0xd0
    [   11.425872]  tcp_v4_destroy_sock+0x57/0x5a0
    [   11.426493]  inet_csk_destroy_sock+0x153/0x2c0
    [   11.427093]  tcp_v4_syn_recv_sock+0xb29/0x1100
    [   11.427731]  tcp_get_cookie_sock+0xc3/0x4a0
    [   11.429457]  cookie_v4_check+0x13d0/0x2500
    [   11.433189]  tcp_v4_do_rcv+0x60e/0x780
    [   11.433727]  tcp_v4_rcv+0x2869/0x2e10
    [   11.437143]  ip_protocol_deliver_rcu+0x23/0x190
    [   11.437810]  ip_local_deliver+0x294/0x350
    [   11.439566]  __netif_receive_skb_one_core+0x15d/0x1a0
    [   11.441995]  process_backlog+0x1b1/0x6b0
    [   11.443148]  net_rx_action+0x37e/0xc40
    [   11.445361]  __do_softirq+0x18c/0x61a
    [   11.445881]  asm_call_on_stack+0x12/0x20
    [   11.446409]  </IRQ>
    [   11.446716]  do_softirq_own_stack+0x34/0x40
    [   11.447259]  do_softirq.part.0+0x26/0x30
    [   11.447827]  __local_bh_enable_ip+0x46/0x50
    [   11.448406]  ip_finish_output2+0x60f/0x1bc0
    [   11.450109]  __ip_queue_xmit+0x71c/0x1b60
    [   11.451861]  __tcp_transmit_skb+0x1727/0x3bb0
    [   11.453789]  tcp_rcv_state_process+0x3070/0x4d3a
    [   11.456810]  tcp_v4_do_rcv+0x2ad/0x780
    [   11.457995]  __release_sock+0x14b/0x2c0
    [   11.458529]  release_sock+0x4a/0x170
    [   11.459005]  __inet_stream_connect+0x467/0xc80
    [   11.461435]  inet_stream_connect+0x4e/0xa0
    [   11.462043]  __sys_connect+0x204/0x270
    [   11.465515]  __x64_sys_connect+0x6a/0xb0
    [   11.466088]  do_syscall_64+0x3e/0x70
    [   11.466617]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   11.467341] RIP: 0033:0x7f56046dc469
    [   11.467844] Code: Bad RIP value.
    [   11.468282] RSP: 002b:00007f5604dccdd8 EFLAGS: 00000246 ORIG_RAX: 000000000000002a
    [   11.469326] RAX: ffffffffffffffda RBX: 000000000068bf00 RCX: 00007f56046dc469
    [   11.470379] RDX: 0000000000000010 RSI: 0000000020000000 RDI: 0000000000000004
    [   11.471311] RBP: 00000000ffffffff R08: 0000000000000000 R09: 0000000000000000
    [   11.472286] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    [   11.473341] R13: 000000000041427c R14: 00007f5604dcd5c0 R15: 0000000000000003
    [   11.474321]
    [   11.474527] Allocated by task 4884:
    [   11.475031]  save_stack+0x1b/0x40
    [   11.475548]  __kasan_kmalloc.constprop.0+0xc2/0xd0
    [   11.476182]  tcp_cdg_init+0xf0/0x150
    [   11.476744]  tcp_init_congestion_control+0x9b/0x3a0
    [   11.477435]  tcp_set_congestion_control+0x270/0x32f
    [   11.478088]  do_tcp_setsockopt.isra.0+0x521/0x1a00
    [   11.478744]  __sys_setsockopt+0xff/0x1e0
    [   11.479259]  __x64_sys_setsockopt+0xb5/0x150
    [   11.479895]  do_syscall_64+0x3e/0x70
    [   11.480395]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   11.481097]
    [   11.481321] Freed by task 4872:
    [   11.481783]  save_stack+0x1b/0x40
    [   11.482230]  __kasan_slab_free+0x12c/0x170
    [   11.482839]  kfree+0x8c/0x230
    [   11.483240]  tcp_cleanup_congestion_control+0x58/0xd0
    [   11.483948]  tcp_v4_destroy_sock+0x57/0x5a0
    [   11.484502]  inet_csk_destroy_sock+0x153/0x2c0
    [   11.485144]  tcp_close+0x932/0xfe0
    [   11.485642]  inet_release+0xc1/0x1c0
    [   11.486131]  __sock_release+0xc0/0x270
    [   11.486697]  sock_close+0xc/0x10
    [   11.487145]  __fput+0x277/0x780
    [   11.487632]  task_work_run+0xeb/0x180
    [   11.488118]  __prepare_exit_to_usermode+0x15a/0x160
    [   11.488834]  do_syscall_64+0x4a/0x70
    [   11.489326]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Wei Wang fixed a part of these CDG-malloc issues with commit c12014440750
    ("tcp: memset ca_priv data to 0 properly").
    
    This patch here fixes the listener-scenario: We make sure that listeners
    setting the congestion-control through setsockopt won't initialize it
    (thus CDG never allocates on listeners). For those who use AF_UNSPEC to
    reuse a socket, tcp_disconnect() is changed to cleanup afterwards.
    
    (The issue can be reproduced at least down to v4.4.x.)
    
    Cc: Wei Wang <weiwan@google.com>
    Cc: Eric Dumazet <edumazet@google.com>
    Fixes: 2b0a8c9eee81 ("tcp: add CDG congestion control")
    Signed-off-by: Christoph Paasch <cpaasch@apple.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ed42d0bb4419a03ceab8e0925bac46fce595fd5
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jul 8 20:13:59 2020 -0700

    net_sched: fix a memory leak in atm_tc_init()
    
    [ Upstream commit 306381aec7c2b5a658eebca008c8a1b666536cba ]
    
    When tcf_block_get() fails inside atm_tc_init(),
    atm_tc_put() is called to release the qdisc p->link.q.
    But the flow->ref prevents it to do so, as the flow->ref
    is still zero.
    
    Fix this by moving the p->link.ref initialization before
    tcf_block_get().
    
    Fixes: 6529eaba33f0 ("net: sched: introduce tcf block infractructure")
    Reported-and-tested-by: syzbot+d411cff6ab29cc2c311b@syzkaller.appspotmail.com
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 087f01f5236b2a9a460964e5c2f402958c2d8676
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 1 18:39:33 2020 -0700

    tcp: md5: allow changing MD5 keys in all socket states
    
    [ Upstream commit 1ca0fafd73c5268e8fc4b997094b8bb2bfe8deea ]
    
    This essentially reverts commit 721230326891 ("tcp: md5: reject TCP_MD5SIG
    or TCP_MD5SIG_EXT on established sockets")
    
    Mathieu reported that many vendors BGP implementations can
    actually switch TCP MD5 on established flows.
    
    Quoting Mathieu :
       Here is a list of a few network vendors along with their behavior
       with respect to TCP MD5:
    
       - Cisco: Allows for password to be changed, but within the hold-down
         timer (~180 seconds).
       - Juniper: When password is initially set on active connection it will
         reset, but after that any subsequent password changes no network
         resets.
       - Nokia: No notes on if they flap the tcp connection or not.
       - Ericsson/RedBack: Allows for 2 password (old/new) to co-exist until
         both sides are ok with new passwords.
       - Meta-Switch: Expects the password to be set before a connection is
         attempted, but no further info on whether they reset the TCP
         connection on a change.
       - Avaya: Disable the neighbor, then set password, then re-enable.
       - Zebos: Would normally allow the change when socket connected.
    
    We can revert my prior change because commit 9424e2e7ad93 ("tcp: md5: fix potential
    overestimation of TCP option space") removed the leak of 4 kernel bytes to
    the wire that was the main reason for my patch.
    
    While doing my investigations, I found a bug when a MD5 key is changed, leading
    to these commits that stable teams want to consider before backporting this revert :
    
     Commit 6a2febec338d ("tcp: md5: add missing memory barriers in tcp_md5_do_add()/tcp_md5_hash_key()")
     Commit e6ced831ef11 ("tcp: md5: refine tcp_md5_do_add()/tcp_md5_hash_key() barriers")
    
    Fixes: 721230326891 "tcp: md5: reject TCP_MD5SIG or TCP_MD5SIG_EXT on established sockets"
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b780c37718ab7719ae163520ce536ee6a3543d51
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Jul 1 11:43:04 2020 -0700

    tcp: md5: refine tcp_md5_do_add()/tcp_md5_hash_key() barriers
    
    [ Upstream commit e6ced831ef11a2a06e8d00aad9d4fc05b610bf38 ]
    
    My prior fix went a bit too far, according to Herbert and Mathieu.
    
    Since we accept that concurrent TCP MD5 lookups might see inconsistent
    keys, we can use READ_ONCE()/WRITE_ONCE() instead of smp_rmb()/smp_wmb()
    
    Clearing all key->key[] is needed to avoid possible KMSAN reports,
    if key->keylen is increased. Since tcp_md5_do_add() is not fast path,
    using __GFP_ZERO to clear all struct tcp_md5sig_key is simpler.
    
    data_race() was added in linux-5.8 and will prevent KCSAN reports,
    this can safely be removed in stable backports, if data_race() is
    not yet backported.
    
    v2: use data_race() both in tcp_md5_hash_key() and tcp_md5_do_add()
    
    Fixes: 6a2febec338d ("tcp: md5: add missing memory barriers in tcp_md5_do_add()/tcp_md5_hash_key()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Marco Elver <elver@google.com>
    Reviewed-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1be5bae43746408d98e141d383b9b88b48d2e4f
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 30 16:41:01 2020 -0700

    tcp: md5: add missing memory barriers in tcp_md5_do_add()/tcp_md5_hash_key()
    
    [ Upstream commit 6a2febec338df7e7699a52d00b2e1207dcf65b28 ]
    
    MD5 keys are read with RCU protection, and tcp_md5_do_add()
    might update in-place a prior key.
    
    Normally, typical RCU updates would allocate a new piece
    of memory. In this case only key->key and key->keylen might
    be updated, and we do not care if an incoming packet could
    see the old key, the new one, or some intermediate value,
    since changing the key on a live flow is known to be problematic
    anyway.
    
    We only want to make sure that in the case key->keylen
    is changed, cpus in tcp_md5_hash_key() wont try to use
    uninitialized data, or crash because key->keylen was
    read twice to feed sg_init_one() and ahash_request_set_crypt()
    
    Fixes: 9ea88a153001 ("tcp: md5: check md5 signature without socket lock")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80e62e7962cbd5c36b65bfad63758bc338470c70
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Tue Jul 7 16:14:45 2020 +0800

    net: usb: qmi_wwan: add support for Quectel EG95 LTE modem
    
    [ Upstream commit f815dd5cf48b905eeecf0a2b990e9b7ab048b4f1 ]
    
    Add support for Quectel Wireless Solutions Co., Ltd. EG95 LTE modem
    
    T:  Bus=01 Lev=01 Prnt=01 Port=02 Cnt=02 Dev#=  5 Spd=480 MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0195 Rev=03.18
    S:  Manufacturer=Android
    S:  Product=Android
    C:  #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=500mA
    I:  If#=0x0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    I:  If#=0x1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Acked-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35c3636f09d9a4dea7bc60bc54e8084a4ae37ce8
Author: Martin Varghese <martin.varghese@nokia.com>
Date:   Sun Jul 5 14:23:49 2020 +0530

    net: Added pointer check for dst->ops->neigh_lookup in dst_neigh_lookup_skb
    
    [ Upstream commit 394de110a73395de2ca4516b0de435e91b11b604 ]
    
    The packets from tunnel devices (eg bareudp) may have only
    metadata in the dst pointer of skb. Hence a pointer check of
    neigh_lookup is needed in dst_neigh_lookup_skb
    
    Kernel crashes when packets from bareudp device is processed in
    the kernel neighbour subsytem.
    
    [  133.384484] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [  133.385240] #PF: supervisor instruction fetch in kernel mode
    [  133.385828] #PF: error_code(0x0010) - not-present page
    [  133.386603] PGD 0 P4D 0
    [  133.386875] Oops: 0010 [#1] SMP PTI
    [  133.387275] CPU: 0 PID: 5045 Comm: ping Tainted: G        W         5.8.0-rc2+ #15
    [  133.388052] Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011
    [  133.391076] RIP: 0010:0x0
    [  133.392401] Code: Bad RIP value.
    [  133.394029] RSP: 0018:ffffb79980003d50 EFLAGS: 00010246
    [  133.396656] RAX: 0000000080000102 RBX: ffff9de2fe0d6600 RCX: ffff9de2fe5e9d00
    [  133.399018] RDX: 0000000000000000 RSI: ffff9de2fe5e9d00 RDI: ffff9de2fc21b400
    [  133.399685] RBP: ffff9de2fe5e9d00 R08: 0000000000000000 R09: 0000000000000000
    [  133.400350] R10: ffff9de2fbc6be22 R11: ffff9de2fe0d6600 R12: ffff9de2fc21b400
    [  133.401010] R13: ffff9de2fe0d6628 R14: 0000000000000001 R15: 0000000000000003
    [  133.401667] FS:  00007fe014918740(0000) GS:ffff9de2fec00000(0000) knlGS:0000000000000000
    [  133.402412] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  133.402948] CR2: ffffffffffffffd6 CR3: 000000003bb72000 CR4: 00000000000006f0
    [  133.403611] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  133.404270] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  133.404933] Call Trace:
    [  133.405169]  <IRQ>
    [  133.405367]  __neigh_update+0x5a4/0x8f0
    [  133.405734]  arp_process+0x294/0x820
    [  133.406076]  ? __netif_receive_skb_core+0x866/0xe70
    [  133.406557]  arp_rcv+0x129/0x1c0
    [  133.406882]  __netif_receive_skb_one_core+0x95/0xb0
    [  133.407340]  process_backlog+0xa7/0x150
    [  133.407705]  net_rx_action+0x2af/0x420
    [  133.408457]  __do_softirq+0xda/0x2a8
    [  133.408813]  asm_call_on_stack+0x12/0x20
    [  133.409290]  </IRQ>
    [  133.409519]  do_softirq_own_stack+0x39/0x50
    [  133.410036]  do_softirq+0x50/0x60
    [  133.410401]  __local_bh_enable_ip+0x50/0x60
    [  133.410871]  ip_finish_output2+0x195/0x530
    [  133.411288]  ip_output+0x72/0xf0
    [  133.411673]  ? __ip_finish_output+0x1f0/0x1f0
    [  133.412122]  ip_send_skb+0x15/0x40
    [  133.412471]  raw_sendmsg+0x853/0xab0
    [  133.412855]  ? insert_pfn+0xfe/0x270
    [  133.413827]  ? vvar_fault+0xec/0x190
    [  133.414772]  sock_sendmsg+0x57/0x80
    [  133.415685]  __sys_sendto+0xdc/0x160
    [  133.416605]  ? syscall_trace_enter+0x1d4/0x2b0
    [  133.417679]  ? __audit_syscall_exit+0x1d9/0x280
    [  133.418753]  ? __prepare_exit_to_usermode+0x5d/0x1a0
    [  133.419819]  __x64_sys_sendto+0x24/0x30
    [  133.420848]  do_syscall_64+0x4d/0x90
    [  133.421768]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [  133.422833] RIP: 0033:0x7fe013689c03
    [  133.423749] Code: Bad RIP value.
    [  133.424624] RSP: 002b:00007ffc7288f418 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [  133.425940] RAX: ffffffffffffffda RBX: 000056151fc63720 RCX: 00007fe013689c03
    [  133.427225] RDX: 0000000000000040 RSI: 000056151fc63720 RDI: 0000000000000003
    [  133.428481] RBP: 00007ffc72890b30 R08: 000056151fc60500 R09: 0000000000000010
    [  133.429757] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040
    [  133.431041] R13: 000056151fc636e0 R14: 000056151fc616bc R15: 0000000000000080
    [  133.432481] Modules linked in: mpls_iptunnel act_mirred act_tunnel_key cls_flower sch_ingress veth mpls_router ip_tunnel bareudp ip6_udp_tunnel udp_tunnel macsec udp_diag inet_diag unix_diag af_packet_diag netlink_diag binfmt_misc xt_MASQUERADE iptable_nat xt_addrtype xt_conntrack nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 br_netfilter bridge stp llc ebtable_filter ebtables overlay ip6table_filter ip6_tables iptable_filter sunrpc ext4 mbcache jbd2 pcspkr i2c_piix4 virtio_balloon joydev ip_tables xfs libcrc32c ata_generic qxl pata_acpi drm_ttm_helper ttm drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm ata_piix libata virtio_net net_failover virtio_console failover virtio_blk i2c_core virtio_pci virtio_ring serio_raw floppy virtio dm_mirror dm_region_hash dm_log dm_mod
    [  133.444045] CR2: 0000000000000000
    [  133.445082] ---[ end trace f4aeee1958fd1638 ]---
    [  133.446236] RIP: 0010:0x0
    [  133.447180] Code: Bad RIP value.
    [  133.448152] RSP: 0018:ffffb79980003d50 EFLAGS: 00010246
    [  133.449363] RAX: 0000000080000102 RBX: ffff9de2fe0d6600 RCX: ffff9de2fe5e9d00
    [  133.450835] RDX: 0000000000000000 RSI: ffff9de2fe5e9d00 RDI: ffff9de2fc21b400
    [  133.452237] RBP: ffff9de2fe5e9d00 R08: 0000000000000000 R09: 0000000000000000
    [  133.453722] R10: ffff9de2fbc6be22 R11: ffff9de2fe0d6600 R12: ffff9de2fc21b400
    [  133.455149] R13: ffff9de2fe0d6628 R14: 0000000000000001 R15: 0000000000000003
    [  133.456520] FS:  00007fe014918740(0000) GS:ffff9de2fec00000(0000) knlGS:0000000000000000
    [  133.458046] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  133.459342] CR2: ffffffffffffffd6 CR3: 000000003bb72000 CR4: 00000000000006f0
    [  133.460782] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [  133.462240] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [  133.463697] Kernel panic - not syncing: Fatal exception in interrupt
    [  133.465226] Kernel Offset: 0xfa00000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [  133.467025] ---[ end Kernel panic - not syncing: Fatal exception in interrupt ]---
    
    Fixes: aaa0c23cb901 ("Fix dst_neigh_lookup/dst_neigh_lookup_skb return value handling bug")
    Signed-off-by: Martin Varghese <martin.varghese@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b2ca893326b38d5527ed13edaac258ec2cf0704
Author: Eric Dumazet <edumazet@google.com>
Date:   Sat Jun 27 13:31:50 2020 -0700

    llc: make sure applications use ARPHRD_ETHER
    
    [ Upstream commit a9b1110162357689a34992d5c925852948e5b9fd ]
    
    syzbot was to trigger a bug by tricking AF_LLC with
    non sensible addr->sllc_arphrd
    
    It seems clear LLC requires an Ethernet device.
    
    Back in commit abf9d537fea2 ("llc: add support for SO_BINDTODEVICE")
    Octavian Purdila added possibility for application to use a zero
    value for sllc_arphrd, convert it to ARPHRD_ETHER to not cause
    regressions on existing applications.
    
    BUG: KASAN: use-after-free in __read_once_size include/linux/compiler.h:199 [inline]
    BUG: KASAN: use-after-free in list_empty include/linux/list.h:268 [inline]
    BUG: KASAN: use-after-free in waitqueue_active include/linux/wait.h:126 [inline]
    BUG: KASAN: use-after-free in wq_has_sleeper include/linux/wait.h:160 [inline]
    BUG: KASAN: use-after-free in skwq_has_sleeper include/net/sock.h:2092 [inline]
    BUG: KASAN: use-after-free in sock_def_write_space+0x642/0x670 net/core/sock.c:2813
    Read of size 8 at addr ffff88801e0b4078 by task ksoftirqd/3/27
    
    CPU: 3 PID: 27 Comm: ksoftirqd/3 Not tainted 5.5.0-rc1-syzkaller #0
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x197/0x210 lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xd4/0x30b mm/kasan/report.c:374
     __kasan_report.cold+0x1b/0x41 mm/kasan/report.c:506
     kasan_report+0x12/0x20 mm/kasan/common.c:639
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/generic_report.c:135
     __read_once_size include/linux/compiler.h:199 [inline]
     list_empty include/linux/list.h:268 [inline]
     waitqueue_active include/linux/wait.h:126 [inline]
     wq_has_sleeper include/linux/wait.h:160 [inline]
     skwq_has_sleeper include/net/sock.h:2092 [inline]
     sock_def_write_space+0x642/0x670 net/core/sock.c:2813
     sock_wfree+0x1e1/0x260 net/core/sock.c:1958
     skb_release_head_state+0xeb/0x260 net/core/skbuff.c:652
     skb_release_all+0x16/0x60 net/core/skbuff.c:663
     __kfree_skb net/core/skbuff.c:679 [inline]
     consume_skb net/core/skbuff.c:838 [inline]
     consume_skb+0xfb/0x410 net/core/skbuff.c:832
     __dev_kfree_skb_any+0xa4/0xd0 net/core/dev.c:2967
     dev_kfree_skb_any include/linux/netdevice.h:3650 [inline]
     e1000_unmap_and_free_tx_resource.isra.0+0x21b/0x3a0 drivers/net/ethernet/intel/e1000/e1000_main.c:1963
     e1000_clean_tx_irq drivers/net/ethernet/intel/e1000/e1000_main.c:3854 [inline]
     e1000_clean+0x4cc/0x1d10 drivers/net/ethernet/intel/e1000/e1000_main.c:3796
     napi_poll net/core/dev.c:6532 [inline]
     net_rx_action+0x508/0x1120 net/core/dev.c:6600
     __do_softirq+0x262/0x98c kernel/softirq.c:292
     run_ksoftirqd kernel/softirq.c:603 [inline]
     run_ksoftirqd+0x8e/0x110 kernel/softirq.c:595
     smpboot_thread_fn+0x6a3/0xa40 kernel/smpboot.c:165
     kthread+0x361/0x430 kernel/kthread.c:255
     ret_from_fork+0x24/0x30 arch/x86/entry/entry_64.S:352
    
    Allocated by task 8247:
     save_stack+0x23/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     __kasan_kmalloc mm/kasan/common.c:513 [inline]
     __kasan_kmalloc.constprop.0+0xcf/0xe0 mm/kasan/common.c:486
     kasan_slab_alloc+0xf/0x20 mm/kasan/common.c:521
     slab_post_alloc_hook mm/slab.h:584 [inline]
     slab_alloc mm/slab.c:3320 [inline]
     kmem_cache_alloc+0x121/0x710 mm/slab.c:3484
     sock_alloc_inode+0x1c/0x1d0 net/socket.c:240
     alloc_inode+0x68/0x1e0 fs/inode.c:230
     new_inode_pseudo+0x19/0xf0 fs/inode.c:919
     sock_alloc+0x41/0x270 net/socket.c:560
     __sock_create+0xc2/0x730 net/socket.c:1384
     sock_create net/socket.c:1471 [inline]
     __sys_socket+0x103/0x220 net/socket.c:1513
     __do_sys_socket net/socket.c:1522 [inline]
     __se_sys_socket net/socket.c:1520 [inline]
     __ia32_sys_socket+0x73/0xb0 net/socket.c:1520
     do_syscall_32_irqs_on arch/x86/entry/common.c:337 [inline]
     do_fast_syscall_32+0x27b/0xe16 arch/x86/entry/common.c:408
     entry_SYSENTER_compat+0x70/0x7f arch/x86/entry/entry_64_compat.S:139
    
    Freed by task 17:
     save_stack+0x23/0x90 mm/kasan/common.c:72
     set_track mm/kasan/common.c:80 [inline]
     kasan_set_free_info mm/kasan/common.c:335 [inline]
     __kasan_slab_free+0x102/0x150 mm/kasan/common.c:474
     kasan_slab_free+0xe/0x10 mm/kasan/common.c:483
     __cache_free mm/slab.c:3426 [inline]
     kmem_cache_free+0x86/0x320 mm/slab.c:3694
     sock_free_inode+0x20/0x30 net/socket.c:261
     i_callback+0x44/0x80 fs/inode.c:219
     __rcu_reclaim kernel/rcu/rcu.h:222 [inline]
     rcu_do_batch kernel/rcu/tree.c:2183 [inline]
     rcu_core+0x570/0x1540 kernel/rcu/tree.c:2408
     rcu_core_si+0x9/0x10 kernel/rcu/tree.c:2417
     __do_softirq+0x262/0x98c kernel/softirq.c:292
    
    The buggy address belongs to the object at ffff88801e0b4000
     which belongs to the cache sock_inode_cache of size 1152
    The buggy address is located 120 bytes inside of
     1152-byte region [ffff88801e0b4000, ffff88801e0b4480)
    The buggy address belongs to the page:
    page:ffffea0000782d00 refcount:1 mapcount:0 mapping:ffff88807aa59c40 index:0xffff88801e0b4ffd
    raw: 00fffe0000000200 ffffea00008e6c88 ffffea0000782d48 ffff88807aa59c40
    raw: ffff88801e0b4ffd ffff88801e0b4000 0000000100000003 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff88801e0b3f00: fb fb fb fb fb fb fb fb fb fb fb fb fc fc fc fc
     ffff88801e0b3f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    >ffff88801e0b4000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                                    ^
     ffff88801e0b4080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff88801e0b4100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    
    Fixes: abf9d537fea2 ("llc: add support for SO_BINDTODEVICE")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a0047ad266d7a26ffc5de8cf0b4049d841b5431
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jul 7 02:02:32 2020 +0800

    l2tp: remove skb_dst_set() from l2tp_xmit_skb()
    
    [ Upstream commit 27d53323664c549b5bb2dfaaf6f7ad6e0376a64e ]
    
    In the tx path of l2tp, l2tp_xmit_skb() calls skb_dst_set() to set
    skb's dst. However, it will eventually call inet6_csk_xmit() or
    ip_queue_xmit() where skb's dst will be overwritten by:
    
       skb_dst_set_noref(skb, dst);
    
    without releasing the old dst in skb. Then it causes dst/dev refcnt leak:
    
      unregister_netdevice: waiting for eth0 to become free. Usage count = 1
    
    This can be reproduced by simply running:
    
      # modprobe l2tp_eth && modprobe l2tp_ip
      # sh ./tools/testing/selftests/net/l2tp.sh
    
    So before going to inet6_csk_xmit() or ip_queue_xmit(), skb's dst
    should be dropped. This patch is to fix it by removing skb_dst_set()
    from l2tp_xmit_skb() and moving skb_dst_drop() into l2tp_xmit_core().
    
    Fixes: 3557baabf280 ("[L2TP]: PPP over L2TP driver core")
    Reported-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: James Chapman <jchapman@katalix.com>
    Tested-by: James Chapman <jchapman@katalix.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40853923f1ced4a5a995530451c9bc041d9818b4
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Fri Jul 3 17:00:32 2020 +0200

    ipv4: fill fl4_icmp_{type,code} in ping_v4_sendmsg
    
    [ Upstream commit 5eff06902394425c722f0a44d9545909a8800f79 ]
    
    IPv4 ping sockets don't set fl4.fl4_icmp_{type,code}, which leads to
    incomplete IPsec ACQUIRE messages being sent to userspace. Currently,
    both raw sockets and IPv6 ping sockets set those fields.
    
    Expected output of "ip xfrm monitor":
        acquire proto esp
          sel src 10.0.2.15/32 dst 8.8.8.8/32 proto icmp type 8 code 0 dev ens4
          policy src 10.0.2.15/32 dst 8.8.8.8/32
            <snip>
    
    Currently with ping sockets:
        acquire proto esp
          sel src 10.0.2.15/32 dst 8.8.8.8/32 proto icmp type 0 code 0 dev ens4
          policy src 10.0.2.15/32 dst 8.8.8.8/32
            <snip>
    
    The Libreswan test suite found this problem after Fedora changed the
    value for the sysctl net.ipv4.ping_group_range.
    
    Fixes: c319b4d76b9e ("net: ipv4: add IPPROTO_ICMP socket kind")
    Reported-by: Paul Wouters <pwouters@redhat.com>
    Tested-by: Paul Wouters <pwouters@redhat.com>
    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93e7eabdad7a5465fa635f22a8ec141f98491f08
Author: Sean Tranchetti <stranche@codeaurora.org>
Date:   Tue Jun 30 11:50:17 2020 -0600

    genetlink: remove genl_bind
    
    [ Upstream commit 1e82a62fec613844da9e558f3493540a5b7a7b67 ]
    
    A potential deadlock can occur during registering or unregistering a
    new generic netlink family between the main nl_table_lock and the
    cb_lock where each thread wants the lock held by the other, as
    demonstrated below.
    
    1) Thread 1 is performing a netlink_bind() operation on a socket. As part
       of this call, it will call netlink_lock_table(), incrementing the
       nl_table_users count to 1.
    2) Thread 2 is registering (or unregistering) a genl_family via the
       genl_(un)register_family() API. The cb_lock semaphore will be taken for
       writing.
    3) Thread 1 will call genl_bind() as part of the bind operation to handle
       subscribing to GENL multicast groups at the request of the user. It will
       attempt to take the cb_lock semaphore for reading, but it will fail and
       be scheduled away, waiting for Thread 2 to finish the write.
    4) Thread 2 will call netlink_table_grab() during the (un)registration
       call. However, as Thread 1 has incremented nl_table_users, it will not
       be able to proceed, and both threads will be stuck waiting for the
       other.
    
    genl_bind() is a noop, unless a genl_family implements the mcast_bind()
    function to handle setting up family-specific multicast operations. Since
    no one in-tree uses this functionality as Cong pointed out, simply removing
    the genl_bind() function will remove the possibility for deadlock, as there
    is no attempt by Thread 1 above to take the cb_lock semaphore.
    
    Fixes: c380d9a7afff ("genetlink: pass multicast bind/unbind to families")
    Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Johannes Berg <johannes.berg@intel.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Sean Tranchetti <stranche@codeaurora.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b675b6af6aeeb51d361c71fbc59a39c2b36b221
Author: Janosch Frank <frankja@linux.ibm.com>
Date:   Tue Jul 7 15:38:54 2020 +0200

    s390/mm: fix huge pte soft dirty copying
    
    commit 528a9539348a0234375dfaa1ca5dbbb2f8f8e8d2 upstream.
    
    If the pmd is soft dirty we must mark the pte as soft dirty (and not dirty).
    This fixes some cases for guest migration with huge page backings.
    
    Cc: <stable@vger.kernel.org> # 4.8
    Fixes: bc29b7ac1d9f ("s390/mm: clean up pte/pmd encoding")
    Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f67bf857e5b9425caa3b7aaff60be85499e89d20
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Wed May 27 14:18:45 2020 -0700

    ARC: elf: use right ELF_ARCH
    
    commit b7faf971081a4e56147f082234bfff55135305cb upstream.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c0548bea46eb97c059e31783f06f3557df8417c
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue May 19 22:28:32 2020 -0700

    ARC: entry: fix potential EFA clobber when TIF_SYSCALL_TRACE
    
    commit 00fdec98d9881bf5173af09aebd353ab3b9ac729 upstream.
    
    Trap handler for syscall tracing reads EFA (Exception Fault Address),
    in case strace wants PC of trap instruction (EFA is not part of pt_regs
    as of current code).
    
    However this EFA read is racy as it happens after dropping to pure
    kernel mode (re-enabling interrupts). A taken interrupt could
    context-switch, trigger a different task's trap, clobbering EFA for this
    execution context.
    
    Fix this by reading EFA early, before re-enabling interrupts. A slight
    side benefit is de-duplication of FAKE_RET_FROM_EXCPN in trap handler.
    The trap handler is common to both ARCompact and ARCv2 builds too.
    
    This just came out of code rework/review and no real problem was reported
    but is clearly a potential problem specially for strace.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6959e6eb3912c5119f3734cda2126c9316e83775
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Wed Jul 8 12:25:20 2020 -0400

    dm: use noio when sending kobject event
    
    commit 6958c1c640af8c3f40fa8a2eee3b5b905d95b677 upstream.
    
    kobject_uevent may allocate memory and it may be called while there are dm
    devices suspended. The allocation may recurse into a suspended device,
    causing a deadlock. We must set the noio flag when sending a uevent.
    
    The observed deadlock was reported here:
    https://www.redhat.com/archives/dm-devel/2020-March/msg00025.html
    
    Reported-by: Khazhismel Kumykov <khazhy@google.com>
    Reported-by: Tahsin Erdogan <tahsin@google.com>
    Reported-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86f72f39e9b5fdc69d384f918aef7eab355c9d65
Author: Tom Rix <trix@redhat.com>
Date:   Mon Jul 6 05:28:57 2020 -0700

    drm/radeon: fix double free
    
    commit 41855a898650803e24b284173354cc3e44d07725 upstream.
    
    clang static analysis flags this error
    
    drivers/gpu/drm/radeon/ci_dpm.c:5652:9: warning: Use of memory after it is freed [unix.Malloc]
                    kfree(rdev->pm.dpm.ps[i].ps_priv);
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~
    drivers/gpu/drm/radeon/ci_dpm.c:5654:2: warning: Attempt to free released memory [unix.Malloc]
            kfree(rdev->pm.dpm.ps);
            ^~~~~~~~~~~~~~~~~~~~~~
    
    problem is reported in ci_dpm_fini, with these code blocks.
    
            for (i = 0; i < rdev->pm.dpm.num_ps; i++) {
                    kfree(rdev->pm.dpm.ps[i].ps_priv);
            }
            kfree(rdev->pm.dpm.ps);
    
    The first free happens in ci_parse_power_table where it cleans up locally
    on a failure.  ci_dpm_fini also does a cleanup.
    
            ret = ci_parse_power_table(rdev);
            if (ret) {
                    ci_dpm_fini(rdev);
                    return ret;
            }
    
    So remove the cleanup in ci_parse_power_table and
    move the num_ps calculation to inside the loop so ci_dpm_fini
    will know how many array elements to free.
    
    Fixes: cc8dbbb4f62a ("drm/radeon: add dpm support for CI dGPUs (v2)")
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cde59495d25e575dd9b7d200db87a527f45ecb69
Author: Boris Burkov <boris@bur.io>
Date:   Wed Jun 17 11:35:19 2020 -0700

    btrfs: fix fatal extent_buffer readahead vs releasepage race
    
    commit 6bf9cd2eed9aee6d742bb9296c994a91f5316949 upstream.
    
    Under somewhat convoluted conditions, it is possible to attempt to
    release an extent_buffer that is under io, which triggers a BUG_ON in
    btrfs_release_extent_buffer_pages.
    
    This relies on a few different factors. First, extent_buffer reads done
    as readahead for searching use WAIT_NONE, so they free the local extent
    buffer reference while the io is outstanding. However, they should still
    be protected by TREE_REF. However, if the system is doing signficant
    reclaim, and simultaneously heavily accessing the extent_buffers, it is
    possible for releasepage to race with two concurrent readahead attempts
    in a way that leaves TREE_REF unset when the readahead extent buffer is
    released.
    
    Essentially, if two tasks race to allocate a new extent_buffer, but the
    winner who attempts the first io is rebuffed by a page being locked
    (likely by the reclaim itself) then the loser will still go ahead with
    issuing the readahead. The loser's call to find_extent_buffer must also
    race with the reclaim task reading the extent_buffer's refcount as 1 in
    a way that allows the reclaim to re-clear the TREE_REF checked by
    find_extent_buffer.
    
    The following represents an example execution demonstrating the race:
    
                CPU0                                                         CPU1                                           CPU2
    reada_for_search                                            reada_for_search
      readahead_tree_block                                        readahead_tree_block
        find_create_tree_block                                      find_create_tree_block
          alloc_extent_buffer                                         alloc_extent_buffer
                                                                      find_extent_buffer // not found
                                                                      allocates eb
                                                                      lock pages
                                                                      associate pages to eb
                                                                      insert eb into radix tree
                                                                      set TREE_REF, refs == 2
                                                                      unlock pages
                                                                  read_extent_buffer_pages // WAIT_NONE
                                                                    not uptodate (brand new eb)
                                                                                                                lock_page
                                                                    if !trylock_page
                                                                      goto unlock_exit // not an error
                                                                  free_extent_buffer
                                                                    release_extent_buffer
                                                                      atomic_dec_and_test refs to 1
            find_extent_buffer // found
                                                                                                                try_release_extent_buffer
                                                                                                                  take refs_lock
                                                                                                                  reads refs == 1; no io
              atomic_inc_not_zero refs to 2
              mark_buffer_accessed
                check_buffer_tree_ref
                  // not STALE, won't take refs_lock
                  refs == 2; TREE_REF set // no action
        read_extent_buffer_pages // WAIT_NONE
                                                                                                                  clear TREE_REF
                                                                                                                  release_extent_buffer
                                                                                                                    atomic_dec_and_test refs to 1
                                                                                                                    unlock_page
          still not uptodate (CPU1 read failed on trylock_page)
          locks pages
          set io_pages > 0
          submit io
          return
        free_extent_buffer
          release_extent_buffer
            dec refs to 0
            delete from radix tree
            btrfs_release_extent_buffer_pages
              BUG_ON(io_pages > 0)!!!
    
    We observe this at a very low rate in production and were also able to
    reproduce it in a test environment by introducing some spurious delays
    and by introducing probabilistic trylock_page failures.
    
    To fix it, we apply check_tree_ref at a point where it could not
    possibly be unset by a competing task: after io_pages has been
    incremented. All the codepaths that clear TREE_REF check for io, so they
    would not be able to clear it after this point until the io is done.
    
    Stack trace, for reference:
    [1417839.424739] ------------[ cut here ]------------
    [1417839.435328] kernel BUG at fs/btrfs/extent_io.c:4841!
    [1417839.447024] invalid opcode: 0000 [#1] SMP
    [1417839.502972] RIP: 0010:btrfs_release_extent_buffer_pages+0x20/0x1f0
    [1417839.517008] Code: ed e9 ...
    [1417839.558895] RSP: 0018:ffffc90020bcf798 EFLAGS: 00010202
    [1417839.570816] RAX: 0000000000000002 RBX: ffff888102d6def0 RCX: 0000000000000028
    [1417839.586962] RDX: 0000000000000002 RSI: ffff8887f0296482 RDI: ffff888102d6def0
    [1417839.603108] RBP: ffff88885664a000 R08: 0000000000000046 R09: 0000000000000238
    [1417839.619255] R10: 0000000000000028 R11: ffff88885664af68 R12: 0000000000000000
    [1417839.635402] R13: 0000000000000000 R14: ffff88875f573ad0 R15: ffff888797aafd90
    [1417839.651549] FS:  00007f5a844fa700(0000) GS:ffff88885f680000(0000) knlGS:0000000000000000
    [1417839.669810] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [1417839.682887] CR2: 00007f7884541fe0 CR3: 000000049f609002 CR4: 00000000003606e0
    [1417839.699037] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [1417839.715187] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [1417839.731320] Call Trace:
    [1417839.737103]  release_extent_buffer+0x39/0x90
    [1417839.746913]  read_block_for_search.isra.38+0x2a3/0x370
    [1417839.758645]  btrfs_search_slot+0x260/0x9b0
    [1417839.768054]  btrfs_lookup_file_extent+0x4a/0x70
    [1417839.778427]  btrfs_get_extent+0x15f/0x830
    [1417839.787665]  ? submit_extent_page+0xc4/0x1c0
    [1417839.797474]  ? __do_readpage+0x299/0x7a0
    [1417839.806515]  __do_readpage+0x33b/0x7a0
    [1417839.815171]  ? btrfs_releasepage+0x70/0x70
    [1417839.824597]  extent_readpages+0x28f/0x400
    [1417839.833836]  read_pages+0x6a/0x1c0
    [1417839.841729]  ? startup_64+0x2/0x30
    [1417839.849624]  __do_page_cache_readahead+0x13c/0x1a0
    [1417839.860590]  filemap_fault+0x6c7/0x990
    [1417839.869252]  ? xas_load+0x8/0x80
    [1417839.876756]  ? xas_find+0x150/0x190
    [1417839.884839]  ? filemap_map_pages+0x295/0x3b0
    [1417839.894652]  __do_fault+0x32/0x110
    [1417839.902540]  __handle_mm_fault+0xacd/0x1000
    [1417839.912156]  handle_mm_fault+0xaa/0x1c0
    [1417839.921004]  __do_page_fault+0x242/0x4b0
    [1417839.930044]  ? page_fault+0x8/0x30
    [1417839.937933]  page_fault+0x1e/0x30
    [1417839.945631] RIP: 0033:0x33c4bae
    [1417839.952927] Code: Bad RIP value.
    [1417839.960411] RSP: 002b:00007f5a844f7350 EFLAGS: 00010206
    [1417839.972331] RAX: 000000000000006e RBX: 1614b3ff6a50398a RCX: 0000000000000000
    [1417839.988477] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000002
    [1417840.004626] RBP: 00007f5a844f7420 R08: 000000000000006e R09: 00007f5a94aeccb8
    [1417840.020784] R10: 00007f5a844f7350 R11: 0000000000000000 R12: 00007f5a94aecc79
    [1417840.036932] R13: 00007f5a94aecc78 R14: 00007f5a94aecc90 R15: 00007f5a94aecc40
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: Boris Burkov <boris@bur.io>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2737131478372c2dc31a0a340eba69cc1ec462e6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 14 14:03:44 2020 +0200

    Revert "ath9k: Fix general protection fault in ath9k_hif_usb_rx_cb"
    
    This reverts commit 97efdabe90f035d16d3f79218055e87c76ec02e6 which is
    commit 2bbcaaee1fcbd83272e29f31e2bb7e70d8c49e05 upstream.
    
    It is being reverted upstream, just hasn't made it there yet and is
    causing lots of problems.
    
    Reported-by: Hans de Goede <hdegoede@redhat.com>
    Cc: Qiujun Huang <hqjagain@gmail.com>
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a75435450288379a9b64490bdf2c953b2cd2dbe
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Jul 2 21:04:21 2020 -0700

    KVM: x86: Mark CR4.TSD as being possibly owned by the guest
    
    commit 7c83d096aed055a7763a03384f92115363448b71 upstream.
    
    Mark CR4.TSD as being possibly owned by the guest as that is indeed the
    case on VMX.  Without TSD being tagged as possibly owned by the guest, a
    targeted read of CR4 to get TSD could observe a stale value.  This bug
    is benign in the current code base as the sole consumer of TSD is the
    emulator (for RDTSC) and the emulator always "reads" the entirety of CR4
    when grabbing bits.
    
    Add a build-time assertion in to ensure VMX doesn't hand over more CR4
    bits without also updating x86.
    
    Fixes: 52ce3c21aec3 ("x86,kvm,vmx: Don't trap writes to CR4.TSD")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200703040422.31536-2-sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a456024e469ec8d8b16e2bc76fc721f599960a3c
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Thu Jul 2 19:17:14 2020 -0700

    KVM: x86: Inject #GP if guest attempts to toggle CR4.LA57 in 64-bit mode
    
    commit d74fcfc1f0ff4b6c26ecef1f9e48d8089ab4eaac upstream.
    
    Inject a #GP on MOV CR4 if CR4.LA57 is toggled in 64-bit mode, which is
    illegal per Intel's SDM:
    
      CR4.LA57
        57-bit linear addresses (bit 12 of CR4) ... blah blah blah ...
        This bit cannot be modified in IA-32e mode.
    
    Note, the pseudocode for MOV CR doesn't call out the fault condition,
    which is likely why the check was missed during initial development.
    This is arguably an SDM bug and will hopefully be fixed in future
    release of the SDM.
    
    Fixes: fd8cb433734ee ("KVM: MMU: Expose the LA57 feature to VM.")
    Cc: stable@vger.kernel.org
    Reported-by: Sebastien Boeuf <sebastien.boeuf@intel.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200703021714.5549-1-sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b9e0ed24a439a16c06d0d68354e4d82d6f9e36e
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Tue Jun 30 07:07:20 2020 -0400

    KVM: x86: bit 8 of non-leaf PDPEs is not reserved
    
    commit 5ecad245de2ae23dc4e2dbece92f8ccfbaed2fa7 upstream.
    
    Bit 8 would be the "global" bit, which does not quite make sense for non-leaf
    page table entries.  Intel ignores it; AMD ignores it in PDEs and PDPEs, but
    reserves it in PML4Es.
    
    Probably, earlier versions of the AMD manual documented it as reserved in PDPEs
    as well, and that behavior made it into KVM as well as kvm-unit-tests; fix it.
    
    Cc: stable@vger.kernel.org
    Reported-by: Nadav Amit <namit@vmware.com>
    Fixes: a0c0feb57992 ("KVM: x86: reserve bit 8 of non-leaf PDPEs and PML4Es in 64-bit mode on AMD", 2014-09-03)
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a66d4a603e7f066fb14e0ebce0d8811b5fb84738
Author: Andrew Scull <ascull@google.com>
Date:   Mon Jul 6 10:52:59 2020 +0100

    KVM: arm64: Stop clobbering x0 for HVC_SOFT_RESTART
    
    commit b9e10d4a6c9f5cbe6369ce2c17ebc67d2e5a4be5 upstream.
    
    HVC_SOFT_RESTART is given values for x0-2 that it should installed
    before exiting to the new address so should not set x0 to stub HVC
    success or failure code.
    
    Fixes: af42f20480bf1 ("arm64: hyp-stub: Zero x0 on successful stub handling")
    Cc: stable@vger.kernel.org
    Signed-off-by: Andrew Scull <ascull@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20200706095259.1338221-1-ascull@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f411556ca334c4306ef5cf4279f03733589d6c2a
Author: Will Deacon <will@kernel.org>
Date:   Wed Jul 8 17:25:46 2020 +0100

    KVM: arm64: Fix definition of PAGE_HYP_DEVICE
    
    commit 68cf617309b5f6f3a651165f49f20af1494753ae upstream.
    
    PAGE_HYP_DEVICE is intended to encode attribute bits for an EL2 stage-1
    pte mapping a device. Unfortunately, it includes PROT_DEVICE_nGnRE which
    encodes attributes for EL1 stage-1 mappings such as UXN and nG, which are
    RES0 for EL2, and DBM which is meaningless as TCR_EL2.HD is not set.
    
    Fix the definition of PAGE_HYP_DEVICE so that it doesn't set RES0 bits
    at EL2.
    
    Acked-by: Marc Zyngier <maz@kernel.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: James Morse <james.morse@arm.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200708162546.26176-1-will@kernel.org
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 961434e53e6dbd4704e7fabd75f3a524c3dc108a
Author: Hector Martin <marcan@marcan.st>
Date:   Thu Jul 2 16:14:33 2020 +0900

    ALSA: usb-audio: add quirk for MacroSilicon MS2109
    
    commit e337bf19f6af38d5c3fa6d06cd594e0f890ca1ac upstream.
    
    These devices claim to be 96kHz mono, but actually are 48kHz stereo with
    swapped channels and unaligned transfers.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hector Martin <marcan@marcan.st>
    Link: https://lore.kernel.org/r/20200702071433.237843-1-marcan@marcan.st
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21eb33c5622a561b6eeb0c7032b08eee9d817307
Author: Hui Wang <hui.wang@canonical.com>
Date:   Thu Jun 25 16:38:33 2020 +0800

    ALSA: hda - let hs_mic be picked ahead of hp_mic
    
    commit 6a6ca7881b1ab1c13fe0d70bae29211a65dd90de upstream.
    
    We have a Dell AIO, there is neither internal speaker nor internal
    mic, only a multi-function audio jack on it.
    
    Users reported that after freshly installing the OS and plug
    a headset to the audio jack, the headset can't output sound. I
    reproduced this bug, at that moment, the Input Source is as below:
    Simple mixer control 'Input Source',0
      Capabilities: cenum
      Items: 'Headphone Mic' 'Headset Mic'
      Item0: 'Headphone Mic'
    
    That is because the patch_realtek will set this audio jack as mic_in
    mode if Input Source's value is hp_mic.
    
    If it is not fresh installing, this issue will not happen since the
    systemd will run alsactl restore -f /var/lib/alsa/asound.state, this
    will set the 'Input Source' according to history value.
    
    If there is internal speaker or internal mic, this issue will not
    happen since there is valid sink/source in the pulseaudio, the PA will
    set the 'Input Source' according to active_port.
    
    To fix this issue, change the parser function to let the hs_mic be
    stored ahead of hp_mic.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20200625083833.11264-1-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c79cedf55f3b1d0a257bde0a3f871508c609200
Author: xidongwang <wangxidong_97@163.com>
Date:   Sun Jul 5 20:27:38 2020 -0700

    ALSA: opl3: fix infoleak in opl3
    
    commit ad155712bb1ea2151944cf06a0e08c315c70c1e3 upstream.
    
    The stack object “info” in snd_opl3_ioctl() has a leaking problem.
    It has 2 padding bytes which are not initialized and leaked via
    “copy_to_user”.
    
    Signed-off-by: xidongwang <wangxidong_97@163.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1594006058-30362-1-git-send-email-wangxidong_97@163.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2dfc13a9ba62e9cd5cbf50026ede4d8a08339d1
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Fri Jul 10 16:41:38 2020 +0300

    mlxsw: spectrum_router: Remove inappropriate usage of WARN_ON()
    
    [ Upstream commit d9d5420273997664a1c09151ca86ac993f2f89c1 ]
    
    We should not trigger a warning when a memory allocation fails. Remove
    the WARN_ON().
    
    The warning is constantly triggered by syzkaller when it is injecting
    faults:
    
    [ 2230.758664] FAULT_INJECTION: forcing a failure.
    [ 2230.758664] name failslab, interval 1, probability 0, space 0, times 0
    [ 2230.762329] CPU: 3 PID: 1407 Comm: syz-executor.0 Not tainted 5.8.0-rc2+ #28
    ...
    [ 2230.898175] WARNING: CPU: 3 PID: 1407 at drivers/net/ethernet/mellanox/mlxsw/spectrum_router.c:6265 mlxsw_sp_router_fib_event+0xfad/0x13e0
    [ 2230.898179] Kernel panic - not syncing: panic_on_warn set ...
    [ 2230.898183] CPU: 3 PID: 1407 Comm: syz-executor.0 Not tainted 5.8.0-rc2+ #28
    [ 2230.898190] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    
    Fixes: 3057224e014c ("mlxsw: spectrum_router: Implement FIB offload in deferred work")
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 014b19f80489934c1719147bcf6a19b583c53c76
Author: Nicolas Ferre <nicolas.ferre@microchip.com>
Date:   Fri Jul 10 14:46:42 2020 +0200

    net: macb: mark device wake capable when "magic-packet" property present
    
    [ Upstream commit ced4799d06375929e013eea04ba6908207afabbe ]
    
    Change the way the "magic-packet" DT property is handled in the
    macb_probe() function, matching DT binding documentation.
    Now we mark the device as "wakeup capable" instead of calling the
    device_init_wakeup() function that would enable the wakeup source.
    
    For Ethernet WoL, enabling the wakeup_source is done by
    using ethtool and associated macb_set_wol() function that
    already calls device_set_wakeup_enable() for this purpose.
    
    That would reduce power consumption by cutting more clocks if
    "magic-packet" property is set but WoL is not configured by ethtool.
    
    Fixes: 3e2a5e153906 ("net: macb: add wake-on-lan support via magic packet")
    Cc: Claudiu Beznea <claudiu.beznea@microchip.com>
    Cc: Harini Katakam <harini.katakam@xilinx.com>
    Cc: Sergio Prado <sergio.prado@e-labworks.com>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Nicolas Ferre <nicolas.ferre@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8f3fd4dbe4057dfa87d1035cb946e34384fa427
Author: Davide Caratti <dcaratti@redhat.com>
Date:   Fri Jul 10 12:55:08 2020 +0200

    bnxt_en: fix NULL dereference in case SR-IOV configuration fails
    
    [ Upstream commit c8b1d7436045d3599bae56aef1682813ecccaad7 ]
    
    we need to set 'active_vfs' back to 0, if something goes wrong during the
    allocation of SR-IOV resources: otherwise, further VF configurations will
    wrongly assume that bp->pf.vf[x] are valid memory locations, and commands
    like the ones in the following sequence:
    
     # echo 2 >/sys/bus/pci/devices/${ADDR}/sriov_numvfs
     # ip link set dev ens1f0np0 up
     # ip link set dev ens1f0np0 vf 0 trust on
    
    will cause a kernel crash similar to this:
    
     bnxt_en 0000:3b:00.0: not enough MMIO resources for SR-IOV
     BUG: kernel NULL pointer dereference, address: 0000000000000014
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     PGD 0 P4D 0
     Oops: 0000 [#1] SMP PTI
     CPU: 43 PID: 2059 Comm: ip Tainted: G          I       5.8.0-rc2.upstream+ #871
     Hardware name: Dell Inc. PowerEdge R740/08D89F, BIOS 2.2.11 06/13/2019
     RIP: 0010:bnxt_set_vf_trust+0x5b/0x110 [bnxt_en]
     Code: 44 24 58 31 c0 e8 f5 fb ff ff 85 c0 0f 85 b6 00 00 00 48 8d 1c 5b 41 89 c6 b9 0b 00 00 00 48 c1 e3 04 49 03 9c 24 f0 0e 00 00 <8b> 43 14 89 c2 83 c8 10 83 e2 ef 45 84 ed 49 89 e5 0f 44 c2 4c 89
     RSP: 0018:ffffac6246a1f570 EFLAGS: 00010246
     RAX: 0000000000000000 RBX: 0000000000000000 RCX: 000000000000000b
     RDX: 0000000000000001 RSI: 0000000000000000 RDI: ffff98b28f538900
     RBP: ffff98b28f538900 R08: 0000000000000000 R09: 0000000000000008
     R10: ffffffffb9515be0 R11: ffffac6246a1f678 R12: ffff98b28f538000
     R13: 0000000000000001 R14: 0000000000000000 R15: ffffffffc05451e0
     FS:  00007fde0f688800(0000) GS:ffff98baffd40000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000014 CR3: 000000104bb0a003 CR4: 00000000007606e0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     PKRU: 55555554
     Call Trace:
      do_setlink+0x994/0xfe0
      __rtnl_newlink+0x544/0x8d0
      rtnl_newlink+0x47/0x70
      rtnetlink_rcv_msg+0x29f/0x350
      netlink_rcv_skb+0x4a/0x110
      netlink_unicast+0x21d/0x300
      netlink_sendmsg+0x329/0x450
      sock_sendmsg+0x5b/0x60
      ____sys_sendmsg+0x204/0x280
      ___sys_sendmsg+0x88/0xd0
      __sys_sendmsg+0x5e/0xa0
      do_syscall_64+0x47/0x80
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: c0c050c58d840 ("bnxt_en: New Broadcom ethernet driver.")
    Reported-by: Fei Liu <feliu@redhat.com>
    CC: Jonathan Toppins <jtoppins@redhat.com>
    CC: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: Davide Caratti <dcaratti@redhat.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Acked-by: Jonathan Toppins <jtoppins@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb004bef8bbf9653c364939ce9c47fedcd3d15aa
Author: Zheng Bin <zhengbin13@huawei.com>
Date:   Mon Jun 29 09:23:49 2020 +0800

    nbd: Fix memory leak in nbd_add_socket
    
    [ Upstream commit 579dd91ab3a5446b148e7f179b6596b270dace46 ]
    
    When adding first socket to nbd, if nsock's allocation failed, the data
    structure member "config->socks" was reallocated, but the data structure
    member "config->num_connections" was not updated. A memory leak will occur
    then because the function "nbd_config_put" will free "config->socks" only
    when "config->num_connections" is not zero.
    
    Fixes: 03bf73c315ed ("nbd: prevent memory leak")
    Reported-by: syzbot+934037347002901b8d2a@syzkaller.appspotmail.com
    Signed-off-by: Zheng Bin <zhengbin13@huawei.com>
    Reviewed-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d9f615e7f1d16511e1dfb28cb2a7e36bba69d3e
Author: Wei Li <liwei391@huawei.com>
Date:   Sun May 10 05:41:56 2020 +0800

    arm64: kgdb: Fix single-step exception handling oops
    
    [ Upstream commit 8523c006264df65aac7d77284cc69aac46a6f842 ]
    
    After entering kdb due to breakpoint, when we execute 'ss' or 'go' (will
    delay installing breakpoints, do single-step first), it won't work
    correctly, and it will enter kdb due to oops.
    
    It's because the reason gotten in kdb_stub() is not as expected, and it
    seems that the ex_vector for single-step should be 0, like what arch
    powerpc/sh/parisc has implemented.
    
    Before the patch:
    Entering kdb (current=0xffff8000119e2dc0, pid 0) on processor 0 due to Keyboard Entry
    [0]kdb> bp printk
    Instruction(i) BP #0 at 0xffff8000101486cc (printk)
        is enabled   addr at ffff8000101486cc, hardtype=0 installed=0
    
    [0]kdb> g
    
    / # echo h > /proc/sysrq-trigger
    
    Entering kdb (current=0xffff0000fa878040, pid 266) on processor 3 due to Breakpoint @ 0xffff8000101486cc
    [3]kdb> ss
    
    Entering kdb (current=0xffff0000fa878040, pid 266) on processor 3 Oops: (null)
    due to oops @ 0xffff800010082ab8
    CPU: 3 PID: 266 Comm: sh Not tainted 5.7.0-rc4-13839-gf0e5ad491718 #6
    Hardware name: linux,dummy-virt (DT)
    pstate: 00000085 (nzcv daIf -PAN -UAO)
    pc : el1_irq+0x78/0x180
    lr : __handle_sysrq+0x80/0x190
    sp : ffff800015003bf0
    x29: ffff800015003d20 x28: ffff0000fa878040
    x27: 0000000000000000 x26: ffff80001126b1f0
    x25: ffff800011b6a0d8 x24: 0000000000000000
    x23: 0000000080200005 x22: ffff8000101486cc
    x21: ffff800015003d30 x20: 0000ffffffffffff
    x19: ffff8000119f2000 x18: 0000000000000000
    x17: 0000000000000000 x16: 0000000000000000
    x15: 0000000000000000 x14: 0000000000000000
    x13: 0000000000000000 x12: 0000000000000000
    x11: 0000000000000000 x10: 0000000000000000
    x9 : 0000000000000000 x8 : ffff800015003e50
    x7 : 0000000000000002 x6 : 00000000380b9990
    x5 : ffff8000106e99e8 x4 : ffff0000fadd83c0
    x3 : 0000ffffffffffff x2 : ffff800011b6a0d8
    x1 : ffff800011b6a000 x0 : ffff80001130c9d8
    Call trace:
     el1_irq+0x78/0x180
     printk+0x0/0x84
     write_sysrq_trigger+0xb0/0x118
     proc_reg_write+0xb4/0xe0
     __vfs_write+0x18/0x40
     vfs_write+0xb0/0x1b8
     ksys_write+0x64/0xf0
     __arm64_sys_write+0x14/0x20
     el0_svc_common.constprop.2+0xb0/0x168
     do_el0_svc+0x20/0x98
     el0_sync_handler+0xec/0x1a8
     el0_sync+0x140/0x180
    
    [3]kdb>
    
    After the patch:
    Entering kdb (current=0xffff8000119e2dc0, pid 0) on processor 0 due to Keyboard Entry
    [0]kdb> bp printk
    Instruction(i) BP #0 at 0xffff8000101486cc (printk)
        is enabled   addr at ffff8000101486cc, hardtype=0 installed=0
    
    [0]kdb> g
    
    / # echo h > /proc/sysrq-trigger
    
    Entering kdb (current=0xffff0000fa852bc0, pid 268) on processor 0 due to Breakpoint @ 0xffff8000101486cc
    [0]kdb> g
    
    Entering kdb (current=0xffff0000fa852bc0, pid 268) on processor 0 due to Breakpoint @ 0xffff8000101486cc
    [0]kdb> ss
    
    Entering kdb (current=0xffff0000fa852bc0, pid 268) on processor 0 due to SS trap @ 0xffff800010082ab8
    [0]kdb>
    
    Fixes: 44679a4f142b ("arm64: KGDB: Add step debugging support")
    Signed-off-by: Wei Li <liwei391@huawei.com>
    Tested-by: Douglas Anderson <dianders@chromium.org>
    Reviewed-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200509214159.19680-2-liwei391@huawei.com
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 436577d3cd2fff166d63fd27306e956dde890ea9
Author: Vinod Koul <vkoul@kernel.org>
Date:   Mon Jun 29 19:17:37 2020 +0530

    ALSA: compress: fix partial_drain completion state
    
    [ Upstream commit f79a732a8325dfbd570d87f1435019d7e5501c6d ]
    
    On partial_drain completion we should be in SNDRV_PCM_STATE_RUNNING
    state, so set that for partially draining streams in
    snd_compr_drain_notify() and use a flag for partially draining streams
    
    While at it, add locks for stream state change in
    snd_compr_drain_notify() as well.
    
    Fixes: f44f2a5417b2 ("ALSA: compress: fix drain calls blocking other compress functions (v6)")
    Reviewed-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Tested-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Reviewed-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Tested-by: Charles Keepax <ckeepax@opensource.cirrus.com>
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20200629134737.105993-4-vkoul@kernel.org
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09d24658882fac1e2af3589995e8e34ecedc0bd7
Author: Andre Edich <andre.edich@microchip.com>
Date:   Mon Jul 6 10:39:35 2020 +0200

    smsc95xx: avoid memory leak in smsc95xx_bind
    
    [ Upstream commit 3ed58f96a70b85ef646d5427258f677f1395b62f ]
    
    In a case where the ID_REV register read is failed, the memory for a
    private data structure has to be freed before returning error from the
    function smsc95xx_bind.
    
    Fixes: bbd9f9ee69242 ("smsc95xx: add wol support for more frame types")
    Signed-off-by: Andre Edich <andre.edich@microchip.com>
    Signed-off-by: Parthiban Veerasooran <Parthiban.Veerasooran@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 343a70b580686bb245565abfb184e9265b707759
Author: Andre Edich <andre.edich@microchip.com>
Date:   Mon Jul 6 10:39:34 2020 +0200

    smsc95xx: check return value of smsc95xx_reset
    
    [ Upstream commit 7c8b1e855f94f88a0c569be6309fc8d5c8844cd1 ]
    
    The return value of the function smsc95xx_reset() must be checked
    to avoid returning false success from the function smsc95xx_bind().
    
    Fixes: 2f7ca802bdae2 ("net: Add SMSC LAN9500 USB2.0 10/100 ethernet adapter driver")
    Signed-off-by: Andre Edich <andre.edich@microchip.com>
    Signed-off-by: Parthiban Veerasooran <Parthiban.Veerasooran@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81cd1352af762a43b539dff65c55472fe298b12b
Author: Li Heng <liheng40@huawei.com>
Date:   Mon Jun 29 18:49:51 2020 +0800

    net: cxgb4: fix return error value in t4_prep_fw
    
    [ Upstream commit 8a259e6b73ad8181b0b2ef338b35043433db1075 ]
    
    t4_prep_fw goto bye tag with positive return value when something
    bad happened and which can not free resource in adap_init0.
    so fix it to return negative value.
    
    Fixes: 16e47624e76b ("cxgb4: Add new scheme to update T4/T5 firmware")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Li Heng <liheng40@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ccd2e9acc067b0e27a0c25938e1e453428306917
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Wed Jun 17 18:25:57 2020 +0200

    x86/entry: Increase entry_stack size to a full page
    
    [ Upstream commit c7aadc09321d8f9a1d3bd1e6d8a47222ecddf6c5 ]
    
    Marco crashed in bad_iret with a Clang11/KCSAN build due to
    overflowing the stack. Now that we run C code on it, expand it to a
    full page.
    
    Suggested-by: Andy Lutomirski <luto@amacapital.net>
    Reported-by: Marco Elver <elver@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Lai Jiangshan <jiangshanlai@gmail.com>
    Tested-by: Marco Elver <elver@google.com>
    Link: https://lkml.kernel.org/r/20200618144801.819246178@infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fae902ef304b09c0423d13bee73f6b5c7e8d7cf5
Author: Max Gurtovoy <maxg@mellanox.com>
Date:   Tue Jun 23 17:55:25 2020 +0300

    nvme-rdma: assign completion vector correctly
    
    [ Upstream commit 032a9966a22a3596addf81dacf0c1736dfedc32a ]
    
    The completion vector index that is given during CQ creation can't
    exceed the number of support vectors by the underlying RDMA device. This
    violation currently can accure, for example, in case one will try to
    connect with N regular read/write queues and M poll queues and the sum
    of N + M > num_supported_vectors. This will lead to failure in establish
    a connection to remote target. Instead, in that case, share a completion
    vector between queues.
    
    Signed-off-by: Max Gurtovoy <maxg@mellanox.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 86ccbd10d523169d3dc4e24fcce92f5325298148
Author: Tomas Henzl <thenzl@redhat.com>
Date:   Tue Jun 16 17:04:46 2020 +0200

    scsi: mptscsih: Fix read sense data size
    
    [ Upstream commit afe89f115e84edbc76d316759e206580a06c6973 ]
    
    The sense data buffer in sense_buf_pool is allocated with size of
    MPT_SENSE_BUFFER_ALLOC(64) (multiplied by req_depth) while SNS_LEN(sc)(96)
    is used when reading the data.  That may lead to a read from unallocated
    area, sometimes from another (unallocated) page.  To fix this, limit the
    read size to MPT_SENSE_BUFFER_ALLOC.
    
    Link: https://lore.kernel.org/r/20200616150446.4840-1-thenzl@redhat.com
    Co-developed-by: Stanislav Saner <ssaner@redhat.com>
    Signed-off-by: Stanislav Saner <ssaner@redhat.com>
    Signed-off-by: Tomas Henzl <thenzl@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3e318dd64b7730d70f784608d988a5730f65b72
Author: yu kuai <yukuai3@huawei.com>
Date:   Thu Jun 4 20:54:49 2020 +0800

    ARM: imx6: add missing put_device() call in imx6q_suspend_init()
    
    [ Upstream commit 4845446036fc9c13f43b54a65c9b757c14f5141b ]
    
    if of_find_device_by_node() succeed, imx6q_suspend_init() doesn't have a
    corresponding put_device(). Thus add a jump target to fix the exception
    handling for this function implementation.
    
    Signed-off-by: yu kuai <yukuai3@huawei.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84ee056b52bbda3029e02af417ddf81679d79143
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Fri Jun 19 22:51:29 2020 -0400

    cifs: update ctime and mtime during truncate
    
    [ Upstream commit 5618303d8516f8ac5ecfe53ee8e8bc9a40eaf066 ]
    
    As the man description of the truncate, if the size changed,
    then the st_ctime and st_mtime fields should be updated. But
    in cifs, we doesn't do it.
    
    It lead the xfstests generic/313 failed.
    
    So, add the ATTR_MTIME|ATTR_CTIME flags on attrs when change
    the file size
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c1f5674af4654882ac04de2f9e43ec1022e797a1
Author: Vasily Gorbik <gor@linux.ibm.com>
Date:   Wed Jun 17 15:05:49 2020 +0200

    s390/kasan: fix early pgm check handler execution
    
    [ Upstream commit 998f5bbe3dbdab81c1cfb1aef7c3892f5d24f6c7 ]
    
    Currently if early_pgm_check_handler is called it ends up in pgm check
    loop. The problem is that early_pgm_check_handler is instrumented by
    KASAN but executed without DAT flag enabled which leads to addressing
    exception when KASAN checks try to access shadow memory.
    
    Fix that by executing early handlers with DAT flag on under KASAN as
    expected.
    
    Reported-and-tested-by: Alexander Egorenkov <egorenar@linux.ibm.com>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 14e5351594dfa47efd26200131e02bef06cee827
Author: Ciara Loftus <ciara.loftus@intel.com>
Date:   Tue Jun 9 13:19:43 2020 +0000

    ixgbe: protect ring accesses with READ- and WRITE_ONCE
    
    [ Upstream commit f140ad9fe2ae16f385f8fe4dc9cf67bb4c51d794 ]
    
    READ_ONCE should be used when reading rings prior to accessing the
    statistics pointer. Introduce this as well as the corresponding WRITE_ONCE
    usage when allocating and freeing the rings, to ensure protected access.
    
    Signed-off-by: Ciara Loftus <ciara.loftus@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dab822266d8c13cea40249def127b43fc91d1fa4
Author: Zhenzhong Duan <zhenzhong.duan@gmail.com>
Date:   Thu Jun 18 11:21:25 2020 +0800

    spi: spidev: fix a potential use-after-free in spidev_release()
    
    [ Upstream commit 06096cc6c5a84ced929634b0d79376b94c65a4bd ]
    
    If an spi device is unbounded from the driver before the release
    process, there will be an NULL pointer reference when it's
    referenced in spi_slave_abort().
    
    Fix it by checking it's already freed before reference.
    
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
    Link: https://lore.kernel.org/r/20200618032125.4650-2-zhenzhong.duan@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c4a6b69b5b3f2aa152fb56582b982e167b24394d
Author: Zhenzhong Duan <zhenzhong.duan@gmail.com>
Date:   Thu Jun 18 11:21:24 2020 +0800

    spi: spidev: fix a race between spidev_release and spidev_remove
    
    [ Upstream commit abd42781c3d2155868821f1b947ae45bbc33330d ]
    
    Imagine below scene, spidev is referenced after it's freed.
    
    spidev_release()                spidev_remove()
    ...
                                    spin_lock_irq(&spidev->spi_lock);
                                        spidev->spi = NULL;
                                    spin_unlock_irq(&spidev->spi_lock);
    mutex_lock(&device_list_lock);
    dofree = (spidev->spi == NULL);
    if (dofree)
        kfree(spidev);
    mutex_unlock(&device_list_lock);
                                    mutex_lock(&device_list_lock);
                                    list_del(&spidev->device_entry);
                                    device_destroy(spidev_class, spidev->devt);
                                    clear_bit(MINOR(spidev->devt), minors);
                                    if (spidev->users == 0)
                                        kfree(spidev);
                                    mutex_unlock(&device_list_lock);
    
    Fix it by resetting spidev->spi in device_list_lock's protection.
    
    Signed-off-by: Zhenzhong Duan <zhenzhong.duan@gmail.com>
    Link: https://lore.kernel.org/r/20200618032125.4650-1-zhenzhong.duan@gmail.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 404113b71043b397624ae6cd0beb158e6f20f01a
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Apr 8 19:38:02 2020 +0200

    gpu: host1x: Detach driver on unregister
    
    [ Upstream commit d9a0a05bf8c76e6dc79230669a8b5d685b168c30 ]
    
    Currently when a host1x device driver is unregistered, it is not
    detached from the host1x controller, which means that the device
    will stay around and when the driver is registered again, it may
    bind to the old, stale device rather than the new one that was
    created from scratch upon driver registration. This in turn can
    cause various weird crashes within the driver core because it is
    confronted with a device that was already deleted.
    
    Fix this by detaching the driver from the host1x controller when
    it is unregistered. This ensures that the deleted device also is
    no longer present in the device list that drivers will bind to.
    
    Reported-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Sowjanya Komatineni <skomatineni@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d0a9f8ce4389e1c55f4c45d0b5a8bc527afc17b
Author: Tony Lindgren <tony@atomide.com>
Date:   Mon Jun 1 17:18:56 2020 -0700

    ARM: dts: omap4-droid4: Fix spi configuration and increase rate
    
    [ Upstream commit 0df12a01f4857495816b05f048c4c31439446e35 ]
    
    We can currently sometimes get "RXS timed out" errors and "EOT timed out"
    errors with spi transfers.
    
    These errors can be made easy to reproduce by reading the cpcap iio
    values in a loop while keeping the CPUs busy by also reading /dev/urandom.
    
    The "RXS timed out" errors we can fix by adding spi-cpol and spi-cpha
    in addition to the spi-cs-high property we already have.
    
    The "EOT timed out" errors we can fix by increasing the spi clock rate
    to 9.6 MHz. Looks similar MC13783 PMIC says it works at spi clock rates
    up to 20 MHz, so let's assume we can pick any rate up to 20 MHz also
    for cpcap.
    
    Cc: maemo-leste@lists.dyne.org
    Cc: Merlijn Wajer <merlijn@wizzup.org>
    Cc: Pavel Machek <pavel@ucw.cz>
    Cc: Sebastian Reichel <sre@kernel.org>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2196f2689cd5106417137e82ffbf5ba1f9a90dec
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Jun 22 13:05:42 2020 +0200

    spi: spi-fsl-dspi: Fix external abort on interrupt in resume or exit paths
    
    [ Upstream commit 3d87b613d6a3c6f0980e877ab0895785a2dde581 ]
    
    If shared interrupt comes late, during probe error path or device remove
    (could be triggered with CONFIG_DEBUG_SHIRQ), the interrupt handler
    dspi_interrupt() will access registers with the clock being disabled.
    This leads to external abort on non-linefetch on Toradex Colibri VF50
    module (with Vybrid VF5xx):
    
        $ echo 4002d000.spi > /sys/devices/platform/soc/40000000.bus/4002d000.spi/driver/unbind
    
        Unhandled fault: external abort on non-linefetch (0x1008) at 0x8887f02c
        Internal error: : 1008 [#1] ARM
        Hardware name: Freescale Vybrid VF5xx/VF6xx (Device Tree)
        Backtrace:
          (regmap_mmio_read32le)
          (regmap_mmio_read)
          (_regmap_bus_reg_read)
          (_regmap_read)
          (regmap_read)
          (dspi_interrupt)
          (free_irq)
          (devm_irq_release)
          (release_nodes)
          (devres_release_all)
          (device_release_driver_internal)
    
    The resource-managed framework should not be used for shared interrupt
    handling, because the interrupt handler might be called after releasing
    other resources and disabling clocks.
    
    Similar bug could happen during suspend - the shared interrupt handler
    could be invoked after suspending the device.  Each device sharing this
    interrupt line should disable the IRQ during suspend so handler will be
    invoked only in following cases:
    1. None suspended,
    2. All devices resumed.
    
    Fixes: 349ad66c0ab0 ("spi:Add Freescale DSPI driver for Vybrid VF610 platform")
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Tested-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200622110543.5035-3-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e319ab0f72042ed8de60abffa7b2676383202b7
Author: Chuanhua Han <chuanhua.han@nxp.com>
Date:   Mon Oct 29 11:11:16 2018 +0800

    spi: spi-fsl-dspi: use IRQF_SHARED mode to request IRQ
    
    [ Upstream commit 13aed23927414137a017ac2f7d567001f714293f ]
    
    Some SoC share one irq number between DSPI controllers.
    For example, on the LX2160 board, DSPI0 and DSPI1 share one irq number.
    In this case, only one DSPI controller can register successfully,
    and others will fail.
    
    Signed-off-by: Chuanhua Han <chuanhua.han@nxp.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 312bc19350c02b023d94c866bc22e32180ae1d64
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon Jun 22 13:05:40 2020 +0200

    spi: spi-fsl-dspi: Fix lockup if device is removed during SPI transfer
    
    [ Upstream commit 7684580d45bd3d84ed9b453a4cadf7a9a5605a3f ]
    
    During device removal, the driver should unregister the SPI controller
    and stop the hardware.  Otherwise the dspi_transfer_one_message() could
    wait on completion infinitely.
    
    Additionally, calling spi_unregister_controller() first in device
    removal reverse-matches the probe function, where SPI controller is
    registered at the end.
    
    Fixes: 05209f457069 ("spi: fsl-dspi: add missing clk_disable_unprepare() in dspi_remove()")
    Reported-by: Vladimir Oltean <olteanv@gmail.com>
    Signed-off-by: Krzysztof Kozlowski <krzk@kernel.org>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200622110543.5035-1-krzk@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit beeaa9eed95d900f7223facee7de2d4f69f46220
Author: Peng Ma <peng.ma@nxp.com>
Date:   Fri Apr 24 14:12:16 2020 +0800

    spi: spi-fsl-dspi: Adding shutdown hook
    
    [ Upstream commit dc234825997ec6ff05980ca9e2204f4ac3f8d695 ]
    
    We need to ensure dspi controller could be stopped in order for kexec
    to start the next kernel.
    So add the shutdown operation support.
    
    Signed-off-by: Peng Ma <peng.ma@nxp.com>
    Link: https://lore.kernel.org/r/20200424061216.27445-1-peng.ma@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc063a8e57581cfd7260670254fae7684969f719
Author: Christian Borntraeger <borntraeger@de.ibm.com>
Date:   Wed Jun 17 10:36:20 2020 +0200

    KVM: s390: reduce number of IO pins to 1
    
    [ Upstream commit 774911290c589e98e3638e73b24b0a4d4530e97c ]
    
    The current number of KVM_IRQCHIP_NUM_PINS results in an order 3
    allocation (32kb) for each guest start/restart. This can result in OOM
    killer activity even with free swap when the memory is fragmented
    enough:
    
    kernel: qemu-system-s39 invoked oom-killer: gfp_mask=0x440dc0(GFP_KERNEL_ACCOUNT|__GFP_COMP|__GFP_ZERO), order=3, oom_score_adj=0
    kernel: CPU: 1 PID: 357274 Comm: qemu-system-s39 Kdump: loaded Not tainted 5.4.0-29-generic #33-Ubuntu
    kernel: Hardware name: IBM 8562 T02 Z06 (LPAR)
    kernel: Call Trace:
    kernel: ([<00000001f848fe2a>] show_stack+0x7a/0xc0)
    kernel:  [<00000001f8d3437a>] dump_stack+0x8a/0xc0
    kernel:  [<00000001f8687032>] dump_header+0x62/0x258
    kernel:  [<00000001f8686122>] oom_kill_process+0x172/0x180
    kernel:  [<00000001f8686abe>] out_of_memory+0xee/0x580
    kernel:  [<00000001f86e66b8>] __alloc_pages_slowpath+0xd18/0xe90
    kernel:  [<00000001f86e6ad4>] __alloc_pages_nodemask+0x2a4/0x320
    kernel:  [<00000001f86b1ab4>] kmalloc_order+0x34/0xb0
    kernel:  [<00000001f86b1b62>] kmalloc_order_trace+0x32/0xe0
    kernel:  [<00000001f84bb806>] kvm_set_irq_routing+0xa6/0x2e0
    kernel:  [<00000001f84c99a4>] kvm_arch_vm_ioctl+0x544/0x9e0
    kernel:  [<00000001f84b8936>] kvm_vm_ioctl+0x396/0x760
    kernel:  [<00000001f875df66>] do_vfs_ioctl+0x376/0x690
    kernel:  [<00000001f875e304>] ksys_ioctl+0x84/0xb0
    kernel:  [<00000001f875e39a>] __s390x_sys_ioctl+0x2a/0x40
    kernel:  [<00000001f8d55424>] system_call+0xd8/0x2c8
    
    As far as I can tell s390x does not use the iopins as we bail our for
    anything other than KVM_IRQ_ROUTING_S390_ADAPTER and the chip/pin is
    only used for KVM_IRQ_ROUTING_IRQCHIP. So let us use a small number to
    reduce the memory footprint.
    
    Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Link: https://lore.kernel.org/r/20200617083620.5409-1-borntraeger@de.ibm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50d59208bd45211acd6792198c51fb253ba1c6aa
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Jul 9 09:36:33 2020 +0200

    Linux 4.14.188

commit 3dd01478961c1e3b867cd6659accabeee0cdc16d
Author: Peter Jones <pjones@redhat.com>
Date:   Mon Jun 15 16:24:08 2020 -0400

    efi: Make it possible to disable efivar_ssdt entirely
    
    commit 435d1a471598752446a72ad1201b3c980526d869 upstream.
    
    In most cases, such as CONFIG_ACPI_CUSTOM_DSDT and
    CONFIG_ACPI_TABLE_UPGRADE, boot-time modifications to firmware tables
    are tied to specific Kconfig options.  Currently this is not the case
    for modifying the ACPI SSDT via the efivar_ssdt kernel command line
    option and associated EFI variable.
    
    This patch adds CONFIG_EFI_CUSTOM_SSDT_OVERLAYS, which defaults
    disabled, in order to allow enabling or disabling that feature during
    the build.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Peter Jones <pjones@redhat.com>
    Link: https://lore.kernel.org/r/20200615202408.2242614-1-pjones@redhat.com
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e4c31844d471469feb011b1063d9be474d07efe
Author: Hou Tao <houtao1@huawei.com>
Date:   Mon Jun 15 11:33:23 2020 +0800

    dm zoned: assign max_io_len correctly
    
    commit 7b2377486767503d47265e4d487a63c651f6b55d upstream.
    
    The unit of max_io_len is sector instead of byte (spotted through
    code review), so fix it.
    
    Fixes: 3b1a94c88b79 ("dm zoned: drive-managed zoned block device target")
    Cc: stable@vger.kernel.org
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Damien Le Moal <damien.lemoal@wdc.com>
    Signed-off-by: Mike Snitzer <snitzer@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34a6e98e49e9bd7296ef91a0aea9be49da00130e
Author: Marc Zyngier <maz@kernel.org>
Date:   Sun Jun 21 14:43:15 2020 +0100

    irqchip/gic: Atomically update affinity
    
    commit 005c34ae4b44f085120d7f371121ec7ded677761 upstream.
    
    The GIC driver uses a RMW sequence to update the affinity, and
    relies on the gic_lock_irqsave/gic_unlock_irqrestore sequences
    to update it atomically.
    
    But these sequences only expand into anything meaningful if
    the BL_SWITCHER option is selected, which almost never happens.
    
    It also turns out that using a RMW and locks is just as silly,
    as the GIC distributor supports byte accesses for the GICD_TARGETRn
    registers, which when used make the update atomic by definition.
    
    Drop the terminally broken code and replace it by a byte write.
    
    Fixes: 04c8b0f82c7d ("irqchip/gic: Make locking a BL_SWITCHER only feature")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4780c44d75795d5543d1b0c64b0aaea4dead3c6c
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Fri Jul 3 00:53:34 2020 +0200

    MIPS: Add missing EHB in mtc0 -> mfc0 sequence for DSPen
    
    commit fcec538ef8cca0ad0b84432235dccd9059c8e6f8 upstream.
    
    This resolves the hazard between the mtc0 in the change_c0_status() and
    the mfc0 in configure_exception_vector(). Without resolving this hazard
    configure_exception_vector() could read an old value and would restore
    this old value again. This would revert the changes change_c0_status()
    did. I checked this by printing out the read_c0_status() at the end of
    per_cpu_trap_init() and the ST0_MX is not set without this patch.
    
    The hazard is documented in the MIPS Architecture Reference Manual Vol.
    III: MIPS32/microMIPS32 Privileged Resource Architecture (MD00088), rev
    6.03 table 8.1 which includes:
    
       Producer | Consumer | Hazard
      ----------|----------|----------------------------
       mtc0     | mfc0     | any coprocessor 0 register
    
    I saw this hazard on an Atheros AR9344 rev 2 SoC with a MIPS 74Kc CPU.
    There the change_c0_status() function would activate the DSPen by
    setting ST0_MX in the c0_status register. This was reverted and then the
    system got a DSP exception when the DSP registers were saved in
    save_dsp() in the first process switch. The crash looks like this:
    
    [    0.089999] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    [    0.097796] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes, linear)
    [    0.107070] Kernel panic - not syncing: Unexpected DSP exception
    [    0.113470] Rebooting in 1 seconds..
    
    We saw this problem in OpenWrt only on the MIPS 74Kc based Atheros SoCs,
    not on the 24Kc based SoCs. We only saw it with kernel 5.4 not with
    kernel 4.19, in addition we had to use GCC 8.4 or 9.X, with GCC 8.3 it
    did not happen.
    
    In the kernel I bisected this problem to commit 9012d011660e ("compiler:
    allow all arches to enable CONFIG_OPTIMIZE_INLINING"), but when this was
    reverted it also happened after commit 172dcd935c34b ("MIPS: Always
    allocate exception vector for MIPSr2+").
    
    Commit 0b24cae4d535 ("MIPS: Add missing EHB in mtc0 -> mfc0 sequence.")
    does similar changes to a different file. I am not sure if there are
    more places affected by this problem.
    
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit caf3b429b1c139ad3412ef1e3fa6085bdf6ee515
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Sun Jun 28 21:06:38 2020 -0400

    cifs: Fix the target file was deleted when rename failed.
    
    commit 9ffad9263b467efd8f8dc7ae1941a0a655a2bab2 upstream.
    
    When xfstest generic/035, we found the target file was deleted
    if the rename return -EACESS.
    
    In cifs_rename2, we unlink the positive target dentry if rename
    failed with EACESS or EEXIST, even if the target dentry is positived
    before rename. Then the existing file was deleted.
    
    We should just delete the target file which created during the
    rename.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 99c01c104c455442d2a0aa94294f16416ceafa1e
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:06 2020 -0700

    SMB3: Honor persistent/resilient handle flags for multiuser mounts
    
    commit 00dfbc2f9c61185a2e662f27c45a0bb29b2a134f upstream.
    
    Without this:
    
    - persistent handles will only be enabled for per-user tcons if the
      server advertises the 'Continuous Availabity' capability
    - resilient handles would never be enabled for per-user tcons
    
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 618de88e7d9fb21bb720ee21f13c0636827aa279
Author: Paul Aurich <paul@darkrain42.org>
Date:   Fri Jun 26 12:58:05 2020 -0700

    SMB3: Honor 'seal' flag for multiuser mounts
    
    commit cc15461c73d7d044d56c47e869a215e49bd429c8 upstream.
    
    Ensure multiuser SMB3 mounts use encryption for all users' tcons if the
    mount options are configured to require encryption. Without this, only
    the primary tcon and IPC tcons are guaranteed to be encrypted. Per-user
    tcons would only be encrypted if the server was configured to require
    encryption.
    
    Signed-off-by: Paul Aurich <paul@darkrain42.org>
    CC: Stable <stable@vger.kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Reviewed-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57c49b6f650c2d9c06011912d67668466bb8154e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Jul 7 14:42:38 2020 +0200

    Revert "ALSA: usb-audio: Improve frames size computation"
    
    This reverts commit 99703c921864a318e3e8aae74fde071b1ff35bea which is
    commit f0bd62b64016508938df9babe47f65c2c727d25c upstream.
    
    It causes a number of reported issues and a fix for it has not hit
    Linus's tree yet.  Revert this to resolve those problems.
    
    Cc: Alexander Tsoy <alexander@tsoy.me>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Sasha Levin <sashal@kernel.org>
    Cc: Hans de Goede <jwrdegoede@fedoraproject.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6ab1cea6dfa2f8b74c1a28a67e053a1b8029796
Author: J. Bruce Fields <bfields@redhat.com>
Date:   Tue Jun 16 16:43:18 2020 -0400

    nfsd: apply umask on fs without ACL support
    
    commit 22cf8419f1319ff87ec759d0ebdff4cbafaee832 upstream.
    
    The server is failing to apply the umask when creating new objects on
    filesystems without ACL support.
    
    To reproduce this, you need to use NFSv4.2 and a client and server
    recent enough to support umask, and you need to export a filesystem that
    lacks ACL support (for example, ext4 with the "noacl" mount option).
    
    Filesystems with ACL support are expected to take care of the umask
    themselves (usually by calling posix_acl_create).
    
    For filesystems without ACL support, this is up to the caller of
    vfs_create(), vfs_mknod(), or vfs_mkdir().
    
    Reported-by: Elliott Mitchell <ehem+debian@m5p.com>
    Reported-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Fixes: 47057abde515 ("nfsd: add support for the umask attribute")
    Cc: stable@vger.kernel.org
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 595d5769c733b5f48f7d78d7caa4ad23b776c768
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Thu Jul 2 10:39:11 2020 +1200

    i2c: algo-pca: Add 0x78 as SCL stuck low status for PCA9665
    
    [ Upstream commit cd217f2300793a106b49c7dfcbfb26e348bc7593 ]
    
    The PCA9665 datasheet says that I2CSTA = 78h indicates that SCL is stuck
    low, this differs to the PCA9564 which uses 90h for this indication.
    Treat either 0x78 or 0x90 as an indication that the SCL line is stuck.
    
    Based on looking through the PCA9564 and PCA9665 datasheets this should
    be safe for both chips. The PCA9564 should not return 0x78 for any valid
    state and the PCA9665 should not return 0x90.
    
    Fixes: eff9ec95efaa ("i2c-algo-pca: Add PCA9665 support")
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1972a3794002809496957035c1a9635e8457269e
Author: Hou Tao <houtao1@huawei.com>
Date:   Mon Jun 15 12:14:59 2020 +0800

    virtio-blk: free vblk-vqs in error path of virtblk_probe()
    
    [ Upstream commit e7eea44eefbdd5f0345a0a8b80a3ca1c21030d06 ]
    
    Else there will be memory leak if alloc_disk() fails.
    
    Fixes: 6a27b656fc02 ("block: virtio-blk: support multi virt queues per virtio-blk device")
    Signed-off-by: Hou Tao <houtao1@huawei.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9e6a06b39746c79e2895b4f9cfe68728322a6789
Author: Chen-Yu Tsai <wens@csie.org>
Date:   Mon Jun 29 14:00:32 2020 +0800

    drm: sun4i: hdmi: Remove extra HPD polling
    
    [ Upstream commit bda8eaa6dee7525f4dac950810a85a88bf6c2ba0 ]
    
    The HPD sense mechanism in Allwinner's old HDMI encoder hardware is more
    or less an input-only GPIO. Other GPIO-based HPD implementations
    directly return the current state, instead of polling for a specific
    state and returning the other if that times out.
    
    Remove the I/O polling from sun4i_hdmi_connector_detect() and directly
    return a known state based on the current reading. This also gets rid
    of excessive CPU usage by kworker as reported on Stack Exchange [1] and
    Armbian forums [2].
    
     [1] https://superuser.com/questions/1515001/debian-10-buster-on-cubietruck-with-bug-in-sun4i-drm-hdmi
     [2] https://forum.armbian.com/topic/14282-headless-systems-and-sun4i_drm_hdmi-a10a20/
    
    Fixes: 9c5681011a0c ("drm/sun4i: Add HDMI support")
    Signed-off-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime@cerno.tech>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200629060032.24134-1-wens@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0efc74bc5f75e229cb728008d977c9c41c4b29ca
Author: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
Date:   Thu Jun 25 13:32:42 2020 +0900

    hwmon: (acpi_power_meter) Fix potential memory leak in acpi_power_meter_add()
    
    [ Upstream commit 8b97f9922211c44a739c5cbd9502ecbb9f17f6d1 ]
    
    Although it rarely happens, we should call free_capabilities()
    if error happens after read_capabilities() to free allocated strings.
    
    Fixes: de584afa5e188 ("hwmon driver for ACPI 4.0 power meters")
    Signed-off-by: Misono Tomohiro <misono.tomohiro@jp.fujitsu.com>
    Link: https://lore.kernel.org/r/20200625043242.31175-1-misono.tomohiro@jp.fujitsu.com
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2af3735139cbd41b486c7ed463deaa7a6e4af280
Author: Chu Lin <linchuyuan@google.com>
Date:   Tue Jun 23 22:13:08 2020 +0000

    hwmon: (max6697) Make sure the OVERT mask is set correctly
    
    [ Upstream commit 016983d138cbe99a5c0aaae0103ee88f5300beb3 ]
    
    Per the datasheet for max6697, OVERT mask and ALERT mask are different.
    For example, the 7th bit of OVERT is the local channel but for alert
    mask, the 6th bit is the local channel. Therefore, we can't apply the
    same mask for both registers. In addition to that, the max6697 driver
    is supposed to be compatibale with different models. I manually went over
    all the listed chips and made sure all chip types have the same layout.
    
    Testing;
        mask value of 0x9 should map to 0x44 for ALERT and 0x84 for OVERT.
        I used iotool to read the reg value back to verify. I only tested this
        change on max6581.
    
    Reference:
    https://datasheets.maximintegrated.com/en/ds/MAX6581.pdf
    https://datasheets.maximintegrated.com/en/ds/MAX6697.pdf
    https://datasheets.maximintegrated.com/en/ds/MAX6699.pdf
    
    Signed-off-by: Chu Lin <linchuyuan@google.com>
    Fixes: 5372d2d71c46e ("hwmon: Driver for Maxim MAX6697 and compatibles")
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4a8071498b66f166e2cd4d9b5d1c749e0cade331
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:34 2020 +0530

    cxgb4: parse TC-U32 key values and masks natively
    
    [ Upstream commit 27f78cb245abdb86735529c13b0a579f57829e71 ]
    
    TC-U32 passes all keys values and masks in __be32 format. The parser
    already expects this and hence pass the value and masks in __be32
    natively to the parser.
    
    Fixes following sparse warnings in several places:
    cxgb4_tc_u32.c:57:21: warning: incorrect type in assignment (different base
    types)
    cxgb4_tc_u32.c:57:21:    expected unsigned int [usertype] val
    cxgb4_tc_u32.c:57:21:    got restricted __be32 [usertype] val
    cxgb4_tc_u32_parse.h:48:24: warning: cast to restricted __be32
    
    Fixes: 2e8aad7bf203 ("cxgb4: add parser to translate u32 filters to internal spec")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ddd91fa9496d3a82edbaacf12cfe76c24980bcc
Author: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
Date:   Wed Jun 24 01:51:33 2020 +0530

    cxgb4: use unaligned conversion for fetching timestamp
    
    [ Upstream commit 589b1c9c166dce120e27b32a83a78f55464a7ef9 ]
    
    Use get_unaligned_be64() to fetch the timestamp needed for ns_to_ktime()
    conversion.
    
    Fixes following sparse warning:
    sge.c:3282:43: warning: cast to restricted __be64
    
    Fixes: a456950445a0 ("cxgb4: time stamping interface for PTP")
    Signed-off-by: Rahul Lakkireddy <rahul.lakkireddy@chelsio.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d0e5040f084afca60fd590b9d1324343ccc56a8
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Mon Jun 8 16:48:43 2020 +1000

    crypto: af_alg - fix use-after-free in af_alg_accept() due to bh_lock_sock()
    
    commit 34c86f4c4a7be3b3e35aa48bd18299d4c756064d upstream.
    
    The locking in af_alg_release_parent is broken as the BH socket
    lock can only be taken if there is a code-path to handle the case
    where the lock is owned by process-context.  Instead of adding
    such handling, we can fix this by changing the ref counts to
    atomic_t.
    
    This patch also modifies the main refcnt to include both normal
    and nokey sockets.  This way we don't have to fudge the nokey
    ref count when a socket changes from nokey to normal.
    
    Credits go to Mauricio Faria de Oliveira who diagnosed this bug
    and sent a patch for it:
    
    https://lore.kernel.org/linux-crypto/20200605161657.535043-1-mfo@canonical.com/
    
    Reported-by: Brian Moyles <bmoyles@netflix.com>
    Reported-by: Mauricio Faria de Oliveira <mfo@canonical.com>
    Fixes: 37f96694cf73 ("crypto: af_alg - Use bh_lock_sock in...")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbb318b4b278f106c0ea80d707ded6fd1029de36
Author: Douglas Anderson <dianders@chromium.org>
Date:   Tue Jun 2 15:47:39 2020 -0700

    kgdb: Avoid suspicious RCU usage warning
    
    [ Upstream commit 440ab9e10e2e6e5fd677473ee6f9e3af0f6904d6 ]
    
    At times when I'm using kgdb I see a splat on my console about
    suspicious RCU usage.  I managed to come up with a case that could
    reproduce this that looked like this:
    
      WARNING: suspicious RCU usage
      5.7.0-rc4+ #609 Not tainted
      -----------------------------
      kernel/pid.c:395 find_task_by_pid_ns() needs rcu_read_lock() protection!
    
      other info that might help us debug this:
    
        rcu_scheduler_active = 2, debug_locks = 1
      3 locks held by swapper/0/1:
       #0: ffffff81b6b8e988 (&dev->mutex){....}-{3:3}, at: __device_attach+0x40/0x13c
       #1: ffffffd01109e9e8 (dbg_master_lock){....}-{2:2}, at: kgdb_cpu_enter+0x20c/0x7ac
       #2: ffffffd01109ea90 (dbg_slave_lock){....}-{2:2}, at: kgdb_cpu_enter+0x3ec/0x7ac
    
      stack backtrace:
      CPU: 7 PID: 1 Comm: swapper/0 Not tainted 5.7.0-rc4+ #609
      Hardware name: Google Cheza (rev3+) (DT)
      Call trace:
       dump_backtrace+0x0/0x1b8
       show_stack+0x1c/0x24
       dump_stack+0xd4/0x134
       lockdep_rcu_suspicious+0xf0/0x100
       find_task_by_pid_ns+0x5c/0x80
       getthread+0x8c/0xb0
       gdb_serial_stub+0x9d4/0xd04
       kgdb_cpu_enter+0x284/0x7ac
       kgdb_handle_exception+0x174/0x20c
       kgdb_brk_fn+0x24/0x30
       call_break_hook+0x6c/0x7c
       brk_handler+0x20/0x5c
       do_debug_exception+0x1c8/0x22c
       el1_sync_handler+0x3c/0xe4
       el1_sync+0x7c/0x100
       rpmh_rsc_probe+0x38/0x420
       platform_drv_probe+0x94/0xb4
       really_probe+0x134/0x300
       driver_probe_device+0x68/0x100
       __device_attach_driver+0x90/0xa8
       bus_for_each_drv+0x84/0xcc
       __device_attach+0xb4/0x13c
       device_initial_probe+0x18/0x20
       bus_probe_device+0x38/0x98
       device_add+0x38c/0x420
    
    If I understand properly we should just be able to blanket kgdb under
    one big RCU read lock and the problem should go away.  We'll add it to
    the beast-of-a-function known as kgdb_cpu_enter().
    
    With this I no longer get any splats and things seem to work fine.
    
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200602154729.v2.1.I70e0d4fd46d5ed2aaf0c98a355e8e1b7a5bb7e4e@changeid
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a459a771bcfdc921aac5ead9d21c28b66d900b17
Author: Zqiang <qiang.zhang@windriver.com>
Date:   Fri Jun 12 11:52:10 2020 +0800

    usb: usbtest: fix missing kfree(dev->buf) in usbtest_disconnect
    
    [ Upstream commit 28ebeb8db77035e058a510ce9bd17c2b9a009dba ]
    
    BUG: memory leak
    unreferenced object 0xffff888055046e00 (size 256):
      comm "kworker/2:9", pid 2570, jiffies 4294942129 (age 1095.500s)
      hex dump (first 32 bytes):
        00 70 04 55 80 88 ff ff 18 bb 5a 81 ff ff ff ff  .p.U......Z.....
        f5 96 78 81 ff ff ff ff 37 de 8e 81 ff ff ff ff  ..x.....7.......
      backtrace:
        [<00000000d121dccf>] kmemleak_alloc_recursive
    include/linux/kmemleak.h:43 [inline]
        [<00000000d121dccf>] slab_post_alloc_hook mm/slab.h:586 [inline]
        [<00000000d121dccf>] slab_alloc_node mm/slub.c:2786 [inline]
        [<00000000d121dccf>] slab_alloc mm/slub.c:2794 [inline]
        [<00000000d121dccf>] kmem_cache_alloc_trace+0x15e/0x2d0 mm/slub.c:2811
        [<000000005c3c3381>] kmalloc include/linux/slab.h:555 [inline]
        [<000000005c3c3381>] usbtest_probe+0x286/0x19d0
    drivers/usb/misc/usbtest.c:2790
        [<000000001cec6910>] usb_probe_interface+0x2bd/0x870
    drivers/usb/core/driver.c:361
        [<000000007806c118>] really_probe+0x48d/0x8f0 drivers/base/dd.c:551
        [<00000000a3308c3e>] driver_probe_device+0xfc/0x2a0 drivers/base/dd.c:724
        [<000000003ef66004>] __device_attach_driver+0x1b6/0x240
    drivers/base/dd.c:831
        [<00000000eee53e97>] bus_for_each_drv+0x14e/0x1e0 drivers/base/bus.c:431
        [<00000000bb0648d0>] __device_attach+0x1f9/0x350 drivers/base/dd.c:897
        [<00000000838b324a>] device_initial_probe+0x1a/0x20 drivers/base/dd.c:944
        [<0000000030d501c1>] bus_probe_device+0x1e1/0x280 drivers/base/bus.c:491
        [<000000005bd7adef>] device_add+0x131d/0x1c40 drivers/base/core.c:2504
        [<00000000a0937814>] usb_set_configuration+0xe84/0x1ab0
    drivers/usb/core/message.c:2030
        [<00000000e3934741>] generic_probe+0x6a/0xe0 drivers/usb/core/generic.c:210
        [<0000000098ade0f1>] usb_probe_device+0x90/0xd0
    drivers/usb/core/driver.c:266
        [<000000007806c118>] really_probe+0x48d/0x8f0 drivers/base/dd.c:551
        [<00000000a3308c3e>] driver_probe_device+0xfc/0x2a0 drivers/base/dd.c:724
    
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Kyungtae Kim <kt0755@gmail.com>
    Signed-off-by: Zqiang <qiang.zhang@windriver.com>
    Link: https://lore.kernel.org/r/20200612035210.20494-1-qiang.zhang@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f26d39dcb6d352e8828b533198acbe33a77ff50
Author: Qian Cai <cai@lca.pw>
Date:   Mon Jun 1 21:45:57 2020 -0700

    mm/slub: fix stack overruns with SLUB_STATS
    
    [ Upstream commit a68ee0573991e90af2f1785db309206408bad3e5 ]
    
    There is no need to copy SLUB_STATS items from root memcg cache to new
    memcg cache copies.  Doing so could result in stack overruns because the
    store function only accepts 0 to clear the stat and returns an error for
    everything else while the show method would print out the whole stat.
    
    Then, the mismatch of the lengths returns from show and store methods
    happens in memcg_propagate_slab_attrs():
    
            else if (root_cache->max_attr_size < ARRAY_SIZE(mbuf))
                    buf = mbuf;
    
    max_attr_size is only 2 from slab_attr_store(), then, it uses mbuf[64]
    in show_stat() later where a bounch of sprintf() would overrun the stack
    variable.  Fix it by always allocating a page of buffer to be used in
    show_stat() if SLUB_STATS=y which should only be used for debug purpose.
    
      # echo 1 > /sys/kernel/slab/fs_cache/shrink
      BUG: KASAN: stack-out-of-bounds in number+0x421/0x6e0
      Write of size 1 at addr ffffc900256cfde0 by task kworker/76:0/53251
    
      Hardware name: HPE ProLiant DL385 Gen10/ProLiant DL385 Gen10, BIOS A40 07/10/2019
      Workqueue: memcg_kmem_cache memcg_kmem_cache_create_func
      Call Trace:
        number+0x421/0x6e0
        vsnprintf+0x451/0x8e0
        sprintf+0x9e/0xd0
        show_stat+0x124/0x1d0
        alloc_slowpath_show+0x13/0x20
        __kmem_cache_create+0x47a/0x6b0
    
      addr ffffc900256cfde0 is located in stack of task kworker/76:0/53251 at offset 0 in frame:
       process_one_work+0x0/0xb90
    
      this frame has 1 object:
       [32, 72) 'lockdep_map'
    
      Memory state around the buggy address:
       ffffc900256cfc80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
       ffffc900256cfd00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      >ffffc900256cfd80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1
                                                             ^
       ffffc900256cfe00: 00 00 00 00 00 f2 f2 f2 00 00 00 00 00 00 00 00
       ffffc900256cfe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
      ==================================================================
      Kernel panic - not syncing: stack-protector: Kernel stack is corrupted in: __kmem_cache_create+0x6ac/0x6b0
      Workqueue: memcg_kmem_cache memcg_kmem_cache_create_func
      Call Trace:
        __kmem_cache_create+0x6ac/0x6b0
    
    Fixes: 107dab5c92d5 ("slub: slub-specific propagation changes")
    Signed-off-by: Qian Cai <cai@lca.pw>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Glauber Costa <glauber@scylladb.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Link: http://lkml.kernel.org/r/20200429222356.4322-1-cai@lca.pw
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee34b6bb8f7d190d55614678ffd4f8fcc94a8756
Author: Dongli Zhang <dongli.zhang@oracle.com>
Date:   Mon Jun 1 21:45:47 2020 -0700

    mm/slub.c: fix corrupted freechain in deactivate_slab()
    
    [ Upstream commit 52f23478081ae0dcdb95d1650ea1e7d52d586829 ]
    
    The slub_debug is able to fix the corrupted slab freelist/page.
    However, alloc_debug_processing() only checks the validity of current
    and next freepointer during allocation path.  As a result, once some
    objects have their freepointers corrupted, deactivate_slab() may lead to
    page fault.
    
    Below is from a test kernel module when 'slub_debug=PUF,kmalloc-128
    slub_nomerge'.  The test kernel corrupts the freepointer of one free
    object on purpose.  Unfortunately, deactivate_slab() does not detect it
    when iterating the freechain.
    
      BUG: unable to handle page fault for address: 00000000123456f8
      #PF: supervisor read access in kernel mode
      #PF: error_code(0x0000) - not-present page
      PGD 0 P4D 0
      Oops: 0000 [#1] SMP PTI
      ... ...
      RIP: 0010:deactivate_slab.isra.92+0xed/0x490
      ... ...
      Call Trace:
       ___slab_alloc+0x536/0x570
       __slab_alloc+0x17/0x30
       __kmalloc+0x1d9/0x200
       ext4_htree_store_dirent+0x30/0xf0
       htree_dirblock_to_tree+0xcb/0x1c0
       ext4_htree_fill_tree+0x1bc/0x2d0
       ext4_readdir+0x54f/0x920
       iterate_dir+0x88/0x190
       __x64_sys_getdents+0xa6/0x140
       do_syscall_64+0x49/0x170
       entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Therefore, this patch adds extra consistency check in deactivate_slab().
    Once an object's freepointer is corrupted, all following objects
    starting at this object are isolated.
    
    [akpm@linux-foundation.org: fix build with CONFIG_SLAB_DEBUG=n]
    Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Joe Jin <joe.jin@oracle.com>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Link: http://lkml.kernel.org/r/20200331031450.12182-1-dongli.zhang@oracle.com
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66670cac9f8140f8ba2556d1f4d1c4c79ab621a8
Author: Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>
Date:   Sun Jun 21 13:43:26 2020 +0300

    usbnet: smsc95xx: Fix use-after-free after removal
    
    [ Upstream commit b835a71ef64a61383c414d6bf2896d2c0161deca ]
    
    Syzbot reports an use-after-free in workqueue context:
    
    BUG: KASAN: use-after-free in mutex_unlock+0x19/0x40 kernel/locking/mutex.c:737
     mutex_unlock+0x19/0x40 kernel/locking/mutex.c:737
     __smsc95xx_mdio_read drivers/net/usb/smsc95xx.c:217 [inline]
     smsc95xx_mdio_read+0x583/0x870 drivers/net/usb/smsc95xx.c:278
     check_carrier+0xd1/0x2e0 drivers/net/usb/smsc95xx.c:644
     process_one_work+0x777/0xf90 kernel/workqueue.c:2274
     worker_thread+0xa8f/0x1430 kernel/workqueue.c:2420
     kthread+0x2df/0x300 kernel/kthread.c:255
    
    It looks like that smsc95xx_unbind() is freeing the structures that are
    still in use by the concurrently running workqueue callback. Thus switch
    to using cancel_delayed_work_sync() to ensure the work callback really
    is no longer active.
    
    Reported-by: syzbot+29dc7d4ae19b703ff947@syzkaller.appspotmail.com
    Signed-off-by: Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6f3852a217d61a5a3d6bb899a30b8a64241cb29
Author: Borislav Petkov <bp@suse.de>
Date:   Thu Jun 18 20:25:25 2020 +0200

    EDAC/amd64: Read back the scrub rate PCI register on F15h
    
    [ Upstream commit ee470bb25d0dcdf126f586ec0ae6dca66cb340a4 ]
    
    Commit:
    
      da92110dfdfa ("EDAC, amd64_edac: Extend scrub rate support to F15hM60h")
    
    added support for F15h, model 0x60 CPUs but in doing so, missed to read
    back SCRCTRL PCI config register on F15h CPUs which are *not* model
    0x60. Add that read so that doing
    
      $ cat /sys/devices/system/edac/mc/mc0/sdram_scrub_rate
    
    can show the previously set DRAM scrub rate.
    
    Fixes: da92110dfdfa ("EDAC, amd64_edac: Extend scrub rate support to F15hM60h")
    Reported-by: Anders Andersson <pipatron@gmail.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Cc: <stable@vger.kernel.org> #v4.4..
    Link: https://lkml.kernel.org/r/CAKkunMbNWppx_i6xSdDHLseA2QQmGJqj_crY=NF-GZML5np4Vw@mail.gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6cc9f5c99e5b8e582f45d67d497c54335c18a613
Author: Hugh Dickins <hughd@google.com>
Date:   Thu Jun 25 20:29:59 2020 -0700

    mm: fix swap cache node allocation mask
    
    [ Upstream commit 243bce09c91b0145aeaedd5afba799d81841c030 ]
    
    Chris Murphy reports that a slightly overcommitted load, testing swap
    and zram along with i915, splats and keeps on splatting, when it had
    better fail less noisily:
    
      gnome-shell: page allocation failure: order:0,
      mode:0x400d0(__GFP_IO|__GFP_FS|__GFP_COMP|__GFP_RECLAIMABLE),
      nodemask=(null),cpuset=/,mems_allowed=0
      CPU: 2 PID: 1155 Comm: gnome-shell Not tainted 5.7.0-1.fc33.x86_64 #1
      Call Trace:
        dump_stack+0x64/0x88
        warn_alloc.cold+0x75/0xd9
        __alloc_pages_slowpath.constprop.0+0xcfa/0xd30
        __alloc_pages_nodemask+0x2df/0x320
        alloc_slab_page+0x195/0x310
        allocate_slab+0x3c5/0x440
        ___slab_alloc+0x40c/0x5f0
        __slab_alloc+0x1c/0x30
        kmem_cache_alloc+0x20e/0x220
        xas_nomem+0x28/0x70
        add_to_swap_cache+0x321/0x400
        __read_swap_cache_async+0x105/0x240
        swap_cluster_readahead+0x22c/0x2e0
        shmem_swapin+0x8e/0xc0
        shmem_swapin_page+0x196/0x740
        shmem_getpage_gfp+0x3a2/0xa60
        shmem_read_mapping_page_gfp+0x32/0x60
        shmem_get_pages+0x155/0x5e0 [i915]
        __i915_gem_object_get_pages+0x68/0xa0 [i915]
        i915_vma_pin+0x3fe/0x6c0 [i915]
        eb_add_vma+0x10b/0x2c0 [i915]
        i915_gem_do_execbuffer+0x704/0x3430 [i915]
        i915_gem_execbuffer2_ioctl+0x1ea/0x3e0 [i915]
        drm_ioctl_kernel+0x86/0xd0 [drm]
        drm_ioctl+0x206/0x390 [drm]
        ksys_ioctl+0x82/0xc0
        __x64_sys_ioctl+0x16/0x20
        do_syscall_64+0x5b/0xf0
        entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Reported on 5.7, but it goes back really to 3.1: when
    shmem_read_mapping_page_gfp() was implemented for use by i915, and
    allowed for __GFP_NORETRY and __GFP_NOWARN flags in most places, but
    missed swapin's "& GFP_KERNEL" mask for page tree node allocation in
    __read_swap_cache_async() - that was to mask off HIGHUSER_MOVABLE bits
    from what page cache uses, but GFP_RECLAIM_MASK is now what's needed.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=208085
    Link: http://lkml.kernel.org/r/alpine.LSU.2.11.2006151330070.11064@eggly.anvils
    Fixes: 68da9f055755 ("tmpfs: pass gfp to shmem_getpage_gfp")
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: Vlastimil Babka <vbabka@suse.cz>
    Reviewed-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reported-by: Chris Murphy <lists@colorremedies.com>
    Analyzed-by: Vlastimil Babka <vbabka@suse.cz>
    Analyzed-by: Matthew Wilcox <willy@infradead.org>
    Tested-by: Chris Murphy <lists@colorremedies.com>
    Cc: <stable@vger.kernel.org>    [3.1+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2626455e8ce9cdcc6005e77d11e7c857cf35b173
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 8 13:32:55 2020 +0100

    btrfs: fix data block group relocation failure due to concurrent scrub
    
    [ Upstream commit 432cd2a10f1c10cead91fe706ff5dc52f06d642a ]
    
    When running relocation of a data block group while scrub is running in
    parallel, it is possible that the relocation will fail and abort the
    current transaction with an -EINVAL error:
    
       [134243.988595] BTRFS info (device sdc): found 14 extents, stage: move data extents
       [134243.999871] ------------[ cut here ]------------
       [134244.000741] BTRFS: Transaction aborted (error -22)
       [134244.001692] WARNING: CPU: 0 PID: 26954 at fs/btrfs/ctree.c:1071 __btrfs_cow_block+0x6a7/0x790 [btrfs]
       [134244.003380] Modules linked in: btrfs blake2b_generic xor raid6_pq (...)
       [134244.012577] CPU: 0 PID: 26954 Comm: btrfs Tainted: G        W         5.6.0-rc7-btrfs-next-58 #5
       [134244.014162] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org 04/01/2014
       [134244.016184] RIP: 0010:__btrfs_cow_block+0x6a7/0x790 [btrfs]
       [134244.017151] Code: 48 c7 c7 (...)
       [134244.020549] RSP: 0018:ffffa41607863888 EFLAGS: 00010286
       [134244.021515] RAX: 0000000000000000 RBX: ffff9614bdfe09c8 RCX: 0000000000000000
       [134244.022822] RDX: 0000000000000001 RSI: ffffffffb3d63980 RDI: 0000000000000001
       [134244.024124] RBP: ffff961589e8c000 R08: 0000000000000000 R09: 0000000000000001
       [134244.025424] R10: ffffffffc0ae5955 R11: 0000000000000000 R12: ffff9614bd530d08
       [134244.026725] R13: ffff9614ced41b88 R14: ffff9614bdfe2a48 R15: 0000000000000000
       [134244.028024] FS:  00007f29b63c08c0(0000) GS:ffff9615ba600000(0000) knlGS:0000000000000000
       [134244.029491] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
       [134244.030560] CR2: 00007f4eb339b000 CR3: 0000000130d6e006 CR4: 00000000003606f0
       [134244.031997] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
       [134244.033153] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
       [134244.034484] Call Trace:
       [134244.034984]  btrfs_cow_block+0x12b/0x2b0 [btrfs]
       [134244.035859]  do_relocation+0x30b/0x790 [btrfs]
       [134244.036681]  ? do_raw_spin_unlock+0x49/0xc0
       [134244.037460]  ? _raw_spin_unlock+0x29/0x40
       [134244.038235]  relocate_tree_blocks+0x37b/0x730 [btrfs]
       [134244.039245]  relocate_block_group+0x388/0x770 [btrfs]
       [134244.040228]  btrfs_relocate_block_group+0x161/0x2e0 [btrfs]
       [134244.041323]  btrfs_relocate_chunk+0x36/0x110 [btrfs]
       [134244.041345]  btrfs_balance+0xc06/0x1860 [btrfs]
       [134244.043382]  ? btrfs_ioctl_balance+0x27c/0x310 [btrfs]
       [134244.045586]  btrfs_ioctl_balance+0x1ed/0x310 [btrfs]
       [134244.045611]  btrfs_ioctl+0x1880/0x3760 [btrfs]
       [134244.049043]  ? do_raw_spin_unlock+0x49/0xc0
       [134244.049838]  ? _raw_spin_unlock+0x29/0x40
       [134244.050587]  ? __handle_mm_fault+0x11b3/0x14b0
       [134244.051417]  ? ksys_ioctl+0x92/0xb0
       [134244.052070]  ksys_ioctl+0x92/0xb0
       [134244.052701]  ? trace_hardirqs_off_thunk+0x1a/0x1c
       [134244.053511]  __x64_sys_ioctl+0x16/0x20
       [134244.054206]  do_syscall_64+0x5c/0x280
       [134244.054891]  entry_SYSCALL_64_after_hwframe+0x49/0xbe
       [134244.055819] RIP: 0033:0x7f29b51c9dd7
       [134244.056491] Code: 00 00 00 (...)
       [134244.059767] RSP: 002b:00007ffcccc1dd08 EFLAGS: 00000202 ORIG_RAX: 0000000000000010
       [134244.061168] RAX: ffffffffffffffda RBX: 0000000000000001 RCX: 00007f29b51c9dd7
       [134244.062474] RDX: 00007ffcccc1dda0 RSI: 00000000c4009420 RDI: 0000000000000003
       [134244.063771] RBP: 0000000000000003 R08: 00005565cea4b000 R09: 0000000000000000
       [134244.065032] R10: 0000000000000541 R11: 0000000000000202 R12: 00007ffcccc2060a
       [134244.066327] R13: 00007ffcccc1dda0 R14: 0000000000000002 R15: 00007ffcccc1dec0
       [134244.067626] irq event stamp: 0
       [134244.068202] hardirqs last  enabled at (0): [<0000000000000000>] 0x0
       [134244.069351] hardirqs last disabled at (0): [<ffffffffb2abdedf>] copy_process+0x74f/0x2020
       [134244.070909] softirqs last  enabled at (0): [<ffffffffb2abdedf>] copy_process+0x74f/0x2020
       [134244.072392] softirqs last disabled at (0): [<0000000000000000>] 0x0
       [134244.073432] ---[ end trace bd7c03622e0b0a99 ]---
    
    The -EINVAL error comes from the following chain of function calls:
    
      __btrfs_cow_block() <-- aborts the transaction
        btrfs_reloc_cow_block()
          replace_file_extents()
            get_new_location() <-- returns -EINVAL
    
    When relocating a data block group, for each allocated extent of the block
    group, we preallocate another extent (at prealloc_file_extent_cluster()),
    associated with the data relocation inode, and then dirty all its pages.
    These preallocated extents have, and must have, the same size that extents
    from the data block group being relocated have.
    
    Later before we start the relocation stage that updates pointers (bytenr
    field of file extent items) to point to the the new extents, we trigger
    writeback for the data relocation inode. The expectation is that writeback
    will write the pages to the previously preallocated extents, that it
    follows the NOCOW path. That is generally the case, however, if a scrub
    is running it may have turned the block group that contains those extents
    into RO mode, in which case writeback falls back to the COW path.
    
    However in the COW path instead of allocating exactly one extent with the
    expected size, the allocator may end up allocating several smaller extents
    due to free space fragmentation - because we tell it at cow_file_range()
    that the minimum allocation size can match the filesystem's sector size.
    This later breaks the relocation's expectation that an extent associated
    to a file extent item in the data relocation inode has the same size as
    the respective extent pointed by a file extent item in another tree - in
    this case the extent to which the relocation inode poins to is smaller,
    causing relocation.c:get_new_location() to return -EINVAL.
    
    For example, if we are relocating a data block group X that has a logical
    address of X and the block group has an extent allocated at the logical
    address X + 128KiB with a size of 64KiB:
    
    1) At prealloc_file_extent_cluster() we allocate an extent for the data
       relocation inode with a size of 64KiB and associate it to the file
       offset 128KiB (X + 128KiB - X) of the data relocation inode. This
       preallocated extent was allocated at block group Z;
    
    2) A scrub running in parallel turns block group Z into RO mode and
       starts scrubing its extents;
    
    3) Relocation triggers writeback for the data relocation inode;
    
    4) When running delalloc (btrfs_run_delalloc_range()), we try first the
       NOCOW path because the data relocation inode has BTRFS_INODE_PREALLOC
       set in its flags. However, because block group Z is in RO mode, the
       NOCOW path (run_delalloc_nocow()) falls back into the COW path, by
       calling cow_file_range();
    
    5) At cow_file_range(), in the first iteration of the while loop we call
       btrfs_reserve_extent() to allocate a 64KiB extent and pass it a minimum
       allocation size of 4KiB (fs_info->sectorsize). Due to free space
       fragmentation, btrfs_reserve_extent() ends up allocating two extents
       of 32KiB each, each one on a different iteration of that while loop;
    
    6) Writeback of the data relocation inode completes;
    
    7) Relocation proceeds and ends up at relocation.c:replace_file_extents(),
       with a leaf which has a file extent item that points to the data extent
       from block group X, that has a logical address (bytenr) of X + 128KiB
       and a size of 64KiB. Then it calls get_new_location(), which does a
       lookup in the data relocation tree for a file extent item starting at
       offset 128KiB (X + 128KiB - X) and belonging to the data relocation
       inode. It finds a corresponding file extent item, however that item
       points to an extent that has a size of 32KiB, which doesn't match the
       expected size of 64KiB, resuling in -EINVAL being returned from this
       function and propagated up to __btrfs_cow_block(), which aborts the
       current transaction.
    
    To fix this make sure that at cow_file_range() when we call the allocator
    we pass it a minimum allocation size corresponding the desired extent size
    if the inode belongs to the data relocation tree, otherwise pass it the
    filesystem's sector size as the minimum allocation size.
    
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 412124a485c96b824bb8090b4a675750504a9c11
Author: Anand Jain <Anand.Jain@oracle.com>
Date:   Thu Feb 15 12:29:38 2018 +0800

    btrfs: cow_file_range() num_bytes and disk_num_bytes are same
    
    [ Upstream commit 3752d22fcea160cc2493e34f5e0e41cdd7fdd921 ]
    
    This patch deletes local variable disk_num_bytes as its value
    is same as num_bytes in the function cow_file_range().
    
    Signed-off-by: Anand Jain <anand.jain@oracle.com>
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd530a57778ba1060ef835fb90a7f1d079060144
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 1 19:12:06 2020 +0100

    btrfs: fix a block group ref counter leak after failure to remove block group
    
    [ Upstream commit 9fecd13202f520f3f25d5b1c313adb740fe19773 ]
    
    When removing a block group, if we fail to delete the block group's item
    from the extent tree, we jump to the 'out' label and end up decrementing
    the block group's reference count once only (by 1), resulting in a counter
    leak because the block group at that point was already removed from the
    block group cache rbtree - so we have to decrement the reference count
    twice, once for the rbtree and once for our lookup at the start of the
    function.
    
    There is a second bug where if removing the free space tree entries (the
    call to remove_block_group_free_space()) fails we end up jumping to the
    'out_put_group' label but end up decrementing the reference count only
    once, when we should have done it twice, since we have already removed
    the block group from the block group cache rbtree. This happens because
    the reference count decrement for the rbtree reference happens after
    attempting to remove the free space tree entries, which is far away from
    the place where we remove the block group from the rbtree.
    
    To make things less error prone, decrement the reference count for the
    rbtree immediately after removing the block group from it. This also
    eleminates the need for two different exit labels on error, renaming
    'out_put_label' to just 'out' and removing the old 'out'.
    
    Fixes: f6033c5e333238 ("btrfs: fix block group leak when removing fails")
    CC: stable@vger.kernel.org # 4.4+
    Reviewed-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: Anand Jain <anand.jain@oracle.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 962fe4b24eedc3c4f3f076b2ff9bc7324b2f9951
Author: Sasha Levin <sashal@kernel.org>
Date:   Tue Jun 30 16:24:19 2020 -0400

    Linux 4.14.187
    
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58a9a90392006b616cb1127059119b488dc454b0
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue May 12 10:22:44 2020 +0200

    Revert "tty: hvc: Fix data abort due to race in hvc_open"
    
    commit cf9c94456ebafc6d75a834e58dfdc8ae71a3acbc upstream.
    
    This reverts commit e2bd1dcbe1aa34ff5570b3427c530e4332ecf0fe.
    
    In discussion on the mailing list, it has been determined that this is
    not the correct type of fix for this issue.  Revert it so that we can do
    this correctly.
    
    Reported-by: Jiri Slaby <jslaby@suse.cz>
    Reported-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Link: https://lore.kernel.org/r/20200428032601.22127-1-rananta@codeaurora.org
    Cc: Raghavendra Rao Ananta <rananta@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05ed144a4f10a5af946518897f2bdfb1380b93f8
Author: Zheng Bin <zhengbin13@huawei.com>
Date:   Fri Feb 21 07:38:20 2020 -0800

    xfs: add agf freeblocks verify in xfs_agf_verify
    
    [ Upstream commit d0c7feaf87678371c2c09b3709400be416b2dc62 ]
    
    We recently used fuzz(hydra) to test XFS and automatically generate
    tmp.img(XFS v5 format, but some metadata is wrong)
    
    xfs_repair information(just one AG):
    agf_freeblks 0, counted 3224 in ag 0
    agf_longest 536874136, counted 3224 in ag 0
    sb_fdblocks 613, counted 3228
    
    Test as follows:
    mount tmp.img tmpdir
    cp file1M tmpdir
    sync
    
    In 4.19-stable, sync will stuck, the reason is:
    xfs_mountfs
      xfs_check_summary_counts
        if ((!xfs_sb_version_haslazysbcount(&mp->m_sb) ||
           XFS_LAST_UNMOUNT_WAS_CLEAN(mp)) &&
           !xfs_fs_has_sickness(mp, XFS_SICK_FS_COUNTERS))
            return 0;  -->just return, incore sb_fdblocks still be 613
        xfs_initialize_perag_data
    
    cp file1M tmpdir -->ok(write file to pagecache)
    sync -->stuck(write pagecache to disk)
    xfs_map_blocks
      xfs_iomap_write_allocate
        while (count_fsb != 0) {
          nimaps = 0;
          while (nimaps == 0) { --> endless loop
             nimaps = 1;
             xfs_bmapi_write(..., &nimaps) --> nimaps becomes 0 again
    xfs_bmapi_write
      xfs_bmap_alloc
        xfs_bmap_btalloc
          xfs_alloc_vextent
            xfs_alloc_fix_freelist
              xfs_alloc_space_available -->fail(agf_freeblks is 0)
    
    In linux-next, sync not stuck, cause commit c2b3164320b5 ("xfs:
    use the latest extent at writeback delalloc conversion time") remove
    the above while, dmesg is as follows:
    [   55.250114] XFS (loop0): page discard on page ffffea0008bc7380, inode 0x1b0c, offset 0.
    
    Users do not know why this page is discard, the better soultion is:
    1. Like xfs_repair, make sure sb_fdblocks is equal to counted
    (xfs_initialize_perag_data did this, who is not called at this mount)
    2. Add agf verify, if fail, will tell users to repair
    
    This patch use the second soultion.
    
    Signed-off-by: Zheng Bin <zhengbin13@huawei.com>
    Signed-off-by: Ren Xudong <renxudong1@huawei.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0768a31250bb5b18f888e10a4449137c64e37011
Author: Olga Kornievskaia <olga.kornievskaia@gmail.com>
Date:   Wed Jun 24 13:54:08 2020 -0400

    NFSv4 fix CLOSE not waiting for direct IO compeletion
    
    commit d03727b248d0dae6199569a8d7b629a681154633 upstream.
    
    Figuring out the root case for the REMOVE/CLOSE race and
    suggesting the solution was done by Neil Brown.
    
    Currently what happens is that direct IO calls hold a reference
    on the open context which is decremented as an asynchronous task
    in the nfs_direct_complete(). Before reference is decremented,
    control is returned to the application which is free to close the
    file. When close is being processed, it decrements its reference
    on the open_context but since directIO still holds one, it doesn't
    sent a close on the wire. It returns control to the application
    which is free to do other operations. For instance, it can delete a
    file. Direct IO is finally releasing its reference and triggering
    an asynchronous close. Which races with the REMOVE. On the server,
    REMOVE can be processed before the CLOSE, failing the REMOVE with
    EACCES as the file is still opened.
    
    Signed-off-by: Olga Kornievskaia <kolga@netapp.com>
    Suggested-by: Neil Brown <neilb@suse.com>
    CC: stable@vger.kernel.org
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edbdf0ab52df3efe632921e15e1ed7f80433ea93
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Mon Jun 22 15:04:15 2020 -0400

    pNFS/flexfiles: Fix list corruption if the mirror count changes
    
    commit 8b04013737341442ed914b336cde866b902664ae upstream.
    
    If the mirror count changes in the new layout we pick up inside
    ff_layout_pg_init_write(), then we can end up adding the
    request to the wrong mirror and corrupting the mirror->pg_list.
    
    Fixes: d600ad1f2bdb ("NFS41: pop some layoutget errors to application")
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fcd4d3cabb2b682da5070d38ccb4ecfb6e1b772a
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Thu Jun 25 11:32:34 2020 -0400

    SUNRPC: Properly set the @subbuf parameter of xdr_buf_subsegment()
    
    commit 89a3c9f5b9f0bcaa9aea3e8b2a616fcaea9aad78 upstream.
    
    @subbuf is an output parameter of xdr_buf_subsegment(). A survey of
    call sites shows that @subbuf is always uninitialized before
    xdr_buf_segment() is invoked by callers.
    
    There are some execution paths through xdr_buf_subsegment() that do
    not set all of the fields in @subbuf, leaving some pointer fields
    containing garbage addresses. Subsequent processing of that buffer
    then results in a page fault.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10e0fc9e598306fa47704b2acd094301400837a2
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Mon Jun 1 11:54:57 2020 +0300

    sunrpc: fixed rollback in rpc_gssd_dummy_populate()
    
    commit b7ade38165ca0001c5a3bd5314a314abbbfbb1b7 upstream.
    
    __rpc_depopulate(gssd_dentry) was lost on error path
    
    cc: stable@vger.kernel.org
    Fixes: commit 4b9a445e3eeb ("sunrpc: create a new dummy pipe for gssd to hold open")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2acccbd3fb217af53b0da5d0bb2a321cdc49803a
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Jun 3 13:19:58 2020 +0300

    Staging: rtl8723bs: prevent buffer overflow in update_sta_support_rate()
    
    commit b65a2d8c8614386f7e8d38ea150749f8a862f431 upstream.
    
    The "ie_len" variable is in the 0-255 range and it comes from the
    network.  If it's over NDIS_802_11_LENGTH_RATES_EX (16) then that will
    lead to memory corruption.
    
    Fixes: 554c0a3abf21 ("staging: Add rtl8723bs sdio wifi driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200603101958.GA1845750@mwanda
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b92ab45a05ee849bd96ffa970227e64711a72c2
Author: Denis Efremov <efremov@linux.com>
Date:   Mon Jun 22 23:31:22 2020 +0300

    drm/radeon: fix fb_div check in ni_init_smc_spll_table()
    
    commit 35f760b44b1b9cb16a306bdcc7220fbbf78c4789 upstream.
    
    clk_s is checked twice in a row in ni_init_smc_spll_table().
    fb_div should be checked instead.
    
    Fixes: 69e0b57a91ad ("drm/radeon/kms: add dpm support for cayman (v5)")
    Cc: stable@vger.kernel.org
    Signed-off-by: Denis Efremov <efremov@linux.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8fe43887f8507cc646cab92cd1eb2ac95cb08d8
Author: Masami Hiramatsu <mhiramat@kernel.org>
Date:   Sat Jun 20 12:46:03 2020 +0900

    tracing: Fix event trigger to accept redundant spaces
    
    commit 6784beada631800f2c5afd567e5628c843362cee upstream.
    
    Fix the event trigger to accept redundant spaces in
    the trigger input.
    
    For example, these return -EINVAL
    
    echo " traceon" > events/ftrace/print/trigger
    echo "traceon  if common_pid == 0" > events/ftrace/print/trigger
    echo "disable_event:kmem:kmalloc " > events/ftrace/print/trigger
    
    But these are hard to find what is wrong.
    
    To fix this issue, use skip_spaces() to remove spaces
    in front of actual tokens, and set NULL if there is no
    token.
    
    Link: http://lkml.kernel.org/r/159262476352.185015.5261566783045364186.stgit@devnote2
    
    Cc: Tom Zanussi <zanussi@kernel.org>
    Cc: stable@vger.kernel.org
    Fixes: 85f2b08268c0 ("tracing: Add basic event trigger framework")
    Reviewed-by: Tom Zanussi <zanussi@kernel.org>
    Signed-off-by: Masami Hiramatsu <mhiramat@kernel.org>
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58d6c7c07087f522b3d7fa887550d791c26562e6
Author: Jiping Ma <jiping.ma2@windriver.com>
Date:   Mon May 11 10:52:07 2020 +0800

    arm64: perf: Report the PC value in REGS_ABI_32 mode
    
    commit 8dfe804a4031ca6ba3a3efb2048534249b64f3a5 upstream.
    
    A 32-bit perf querying the registers of a compat task using REGS_ABI_32
    will receive zeroes from w15, when it expects to find the PC.
    
    Return the PC value for register dwarf register 15 when returning register
    values for a compat task to perf.
    
    Cc: <stable@vger.kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Jiping Ma <jiping.ma2@windriver.com>
    Link: https://lore.kernel.org/r/1589165527-188401-1-git-send-email-jiping.ma2@windriver.com
    [will: Shuffled code and added a comment]
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8be3b7e4675fa17dc38fde527ca123e03961ca21
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Thu Jun 25 20:29:37 2020 -0700

    ocfs2: fix panic on nfs server over ocfs2
    
    commit e5a15e17a78d58f933d17cafedfcf7486a29f5b4 upstream.
    
    The following kernel panic was captured when running nfs server over
    ocfs2, at that time ocfs2_test_inode_bit() was checking whether one
    inode locating at "blkno" 5 was valid, that is ocfs2 root inode, its
    "suballoc_slot" was OCFS2_INVALID_SLOT(65535) and it was allocted from
    //global_inode_alloc, but here it wrongly assumed that it was got from per
    slot inode alloctor which would cause array overflow and trigger kernel
    panic.
    
      BUG: unable to handle kernel paging request at 0000000000001088
      IP: [<ffffffff816f6898>] _raw_spin_lock+0x18/0xf0
      PGD 1e06ba067 PUD 1e9e7d067 PMD 0
      Oops: 0002 [#1] SMP
      CPU: 6 PID: 24873 Comm: nfsd Not tainted 4.1.12-124.36.1.el6uek.x86_64 #2
      Hardware name: Huawei CH121 V3/IT11SGCA1, BIOS 3.87 02/02/2018
      RIP: _raw_spin_lock+0x18/0xf0
      RSP: e02b:ffff88005ae97908  EFLAGS: 00010206
      RAX: ffff88005ae98000 RBX: 0000000000001088 RCX: 0000000000000000
      RDX: 0000000000020000 RSI: 0000000000000009 RDI: 0000000000001088
      RBP: ffff88005ae97928 R08: 0000000000000000 R09: ffff880212878e00
      R10: 0000000000007ff0 R11: 0000000000000000 R12: 0000000000001088
      R13: ffff8800063c0aa8 R14: ffff8800650c27d0 R15: 000000000000ffff
      FS:  0000000000000000(0000) GS:ffff880218180000(0000) knlGS:ffff880218180000
      CS:  e033 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 0000000000001088 CR3: 00000002033d0000 CR4: 0000000000042660
      Call Trace:
        igrab+0x1e/0x60
        ocfs2_get_system_file_inode+0x63/0x3a0 [ocfs2]
        ocfs2_test_inode_bit+0x328/0xa00 [ocfs2]
        ocfs2_get_parent+0xba/0x3e0 [ocfs2]
        reconnect_path+0xb5/0x300
        exportfs_decode_fh+0xf6/0x2b0
        fh_verify+0x350/0x660 [nfsd]
        nfsd4_putfh+0x4d/0x60 [nfsd]
        nfsd4_proc_compound+0x3d3/0x6f0 [nfsd]
        nfsd_dispatch+0xe0/0x290 [nfsd]
        svc_process_common+0x412/0x6a0 [sunrpc]
        svc_process+0x123/0x210 [sunrpc]
        nfsd+0xff/0x170 [nfsd]
        kthread+0xcb/0xf0
        ret_from_fork+0x61/0x90
      Code: 83 c2 02 0f b7 f2 e8 18 dc 91 ff 66 90 eb bf 0f 1f 40 00 55 48 89 e5 41 56 41 55 41 54 53 0f 1f 44 00 00 48 89 fb ba 00 00 02 00 <f0> 0f c1 17 89 d0 45 31 e4 45 31 ed c1 e8 10 66 39 d0 41 89 c6
      RIP   _raw_spin_lock+0x18/0xf0
      CR2: 0000000000001088
      ---[ end trace 7264463cd1aac8f9 ]---
      Kernel panic - not syncing: Fatal exception
    
    Link: http://lkml.kernel.org/r/20200616183829.87211-4-junxiao.bi@oracle.com
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1ff0a49dc9fd51c18c22a7133e4a33a7ba372d4
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Thu Jun 25 20:29:40 2020 -0700

    ocfs2: fix value of OCFS2_INVALID_SLOT
    
    commit 9277f8334ffc719fe922d776444d6e4e884dbf30 upstream.
    
    In the ocfs2 disk layout, slot number is 16 bits, but in ocfs2
    implementation, slot number is 32 bits.  Usually this will not cause any
    issue, because slot number is converted from u16 to u32, but
    OCFS2_INVALID_SLOT was defined as -1, when an invalid slot number from
    disk was obtained, its value was (u16)-1, and it was converted to u32.
    Then the following checking in get_local_system_inode will be always
    skipped:
    
     static struct inode **get_local_system_inode(struct ocfs2_super *osb,
                                                   int type,
                                                   u32 slot)
     {
            BUG_ON(slot == OCFS2_INVALID_SLOT);
            ...
     }
    
    Link: http://lkml.kernel.org/r/20200616183829.87211-5-junxiao.bi@oracle.com
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69ce43280478ffc3c29fe79b620adb53d8f46d4b
Author: Junxiao Bi <junxiao.bi@oracle.com>
Date:   Thu Jun 25 20:29:33 2020 -0700

    ocfs2: load global_inode_alloc
    
    commit 7569d3c754e452769a5747eeeba488179e38a5da upstream.
    
    Set global_inode_alloc as OCFS2_FIRST_ONLINE_SYSTEM_INODE, that will
    make it load during mount.  It can be used to test whether some
    global/system inodes are valid.  One use case is that nfsd will test
    whether root inode is valid.
    
    Link: http://lkml.kernel.org/r/20200616183829.87211-3-junxiao.bi@oracle.com
    Signed-off-by: Junxiao Bi <junxiao.bi@oracle.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc929e9aed8955c8e039d28d8d5bcc019a966c41
Author: Waiman Long <longman@redhat.com>
Date:   Thu Jun 25 20:29:52 2020 -0700

    mm/slab: use memzero_explicit() in kzfree()
    
    commit 8982ae527fbef170ef298650c15d55a9ccd33973 upstream.
    
    The kzfree() function is normally used to clear some sensitive
    information, like encryption keys, in the buffer before freeing it back to
    the pool.  Memset() is currently used for buffer clearing.  However
    unlikely, there is still a non-zero probability that the compiler may
    choose to optimize away the memory clearing especially if LTO is being
    used in the future.
    
    To make sure that this optimization will never happen,
    memzero_explicit(), which is introduced in v3.18, is now used in
    kzfree() to future-proof it.
    
    Link: http://lkml.kernel.org/r/20200616154311.12314-2-longman@redhat.com
    Fixes: 3ef0e5ba4673 ("slab: introduce kzfree()")
    Signed-off-by: Waiman Long <longman@redhat.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: "Serge E. Hallyn" <serge@hallyn.com>
    Cc: Joe Perches <joe@perches.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: "Jason A . Donenfeld" <Jason@zx2c4.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7daeb4e7eecd6febc525043dfba8fdeb50318a09
Author: Filipe Manana <fdmanana@suse.com>
Date:   Mon Jun 15 18:48:58 2020 +0100

    btrfs: fix failure of RWF_NOWAIT write into prealloc extent beyond eof
    
    commit 4b1946284dd6641afdb9457101056d9e6ee6204c upstream.
    
    If we attempt to write to prealloc extent located after eof using a
    RWF_NOWAIT write, we always fail with -EAGAIN.
    
    We do actually check if we have an allocated extent for the write at
    the start of btrfs_file_write_iter() through a call to check_can_nocow(),
    but later when we go into the actual direct IO write path we simply
    return -EAGAIN if the write starts at or beyond EOF.
    
    Trivial to reproduce:
    
      $ mkfs.btrfs -f /dev/sdb
      $ mount /dev/sdb /mnt
    
      $ touch /mnt/foo
      $ chattr +C /mnt/foo
    
      $ xfs_io -d -c "pwrite -S 0xab 0 64K" /mnt/foo
      wrote 65536/65536 bytes at offset 0
      64 KiB, 16 ops; 0.0004 sec (135.575 MiB/sec and 34707.1584 ops/sec)
    
      $ xfs_io -c "falloc -k 64K 1M" /mnt/foo
    
      $ xfs_io -d -c "pwrite -N -V 1 -S 0xfe -b 64K 64K 64K" /mnt/foo
      pwrite: Resource temporarily unavailable
    
    On xfs and ext4 the write succeeds, as expected.
    
    Fix this by removing the wrong check at btrfs_direct_IO().
    
    Fixes: edf064e7c6fec3 ("btrfs: nowait aio support")
    CC: stable@vger.kernel.org # 4.14+
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4836f0ddfc78cadfae3d6ede25de3ba813d51c2
Author: Sean Christopherson <sean.j.christopherson@intel.com>
Date:   Mon Jun 22 14:58:29 2020 -0700

    KVM: nVMX: Plumb L2 GPA through to PML emulation
    
    commit 2dbebf7ae1ed9a420d954305e2c9d5ed39ec57c3 upstream.
    
    Explicitly pass the L2 GPA to kvm_arch_write_log_dirty(), which for all
    intents and purposes is vmx_write_pml_buffer(), instead of having the
    latter pull the GPA from vmcs.GUEST_PHYSICAL_ADDRESS.  If the dirty bit
    update is the result of KVM emulation (rare for L2), then the GPA in the
    VMCS may be stale and/or hold a completely unrelated GPA.
    
    Fixes: c5f983f6e8455 ("nVMX: Implement emulated Page Modification Logging")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Message-Id: <20200622215832.22090-2-sean.j.christopherson@intel.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 392d7e6ec3c7ec1f239e78aa42cd58d9e486c33b
Author: Xiaoyao Li <xiaoyao.li@intel.com>
Date:   Tue Jun 16 15:33:07 2020 +0800

    KVM: X86: Fix MSR range of APIC registers in X2APIC mode
    
    commit bf10bd0be53282183f374af23577b18b5fbf7801 upstream.
    
    Only MSR address range 0x800 through 0x8ff is architecturally reserved
    and dedicated for accessing APIC registers in x2APIC mode.
    
    Fixes: 0105d1a52640 ("KVM: x2apic interface to lapic")
    Signed-off-by: Xiaoyao Li <xiaoyao.li@intel.com>
    Message-Id: <20200616073307.16440-1-xiaoyao.li@intel.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Reviewed-by: Jim Mattson <jmattson@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bcd5d80f5ad4ca6e3e440331d1e88d5fc55a2071
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Thu Jun 11 21:51:50 2020 -0700

    ACPI: sysfs: Fix pm_profile_attr type
    
    commit e6d701dca9893990d999fd145e3e07223c002b06 upstream.
    
    When running a kernel with Clang's Control Flow Integrity implemented,
    there is a violation that happens when accessing
    /sys/firmware/acpi/pm_profile:
    
    $ cat /sys/firmware/acpi/pm_profile
    0
    
    $ dmesg
    ...
    [   17.352564] ------------[ cut here ]------------
    [   17.352568] CFI failure (target: acpi_show_profile+0x0/0x8):
    [   17.352572] WARNING: CPU: 3 PID: 497 at kernel/cfi.c:29 __cfi_check_fail+0x33/0x40
    [   17.352573] Modules linked in:
    [   17.352575] CPU: 3 PID: 497 Comm: cat Tainted: G        W         5.7.0-microsoft-standard+ #1
    [   17.352576] RIP: 0010:__cfi_check_fail+0x33/0x40
    [   17.352577] Code: 48 c7 c7 50 b3 85 84 48 c7 c6 50 0a 4e 84 e8 a4 d8 60 00 85 c0 75 02 5b c3 48 c7 c7 dc 5e 49 84 48 89 de 31 c0 e8 7d 06 eb ff <0f> 0b 5b c3 00 00 cc cc 00 00 cc cc 00 85 f6 74 25 41 b9 ea ff ff
    [   17.352577] RSP: 0018:ffffaa6dc3c53d30 EFLAGS: 00010246
    [   17.352578] RAX: 331267e0c06cee00 RBX: ffffffff83d85890 RCX: ffffffff8483a6f8
    [   17.352579] RDX: ffff9cceabbb37c0 RSI: 0000000000000082 RDI: ffffffff84bb9e1c
    [   17.352579] RBP: ffffffff845b2bc8 R08: 0000000000000001 R09: ffff9cceabbba200
    [   17.352579] R10: 000000000000019d R11: 0000000000000000 R12: ffff9cc947766f00
    [   17.352580] R13: ffffffff83d6bd50 R14: ffff9ccc6fa80000 R15: ffffffff845bd328
    [   17.352582] FS:  00007fdbc8d13580(0000) GS:ffff9cce91ac0000(0000) knlGS:0000000000000000
    [   17.352582] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   17.352583] CR2: 00007fdbc858e000 CR3: 00000005174d0000 CR4: 0000000000340ea0
    [   17.352584] Call Trace:
    [   17.352586]  ? rev_id_show+0x8/0x8
    [   17.352587]  ? __cfi_check+0x45bac/0x4b640
    [   17.352589]  ? kobj_attr_show+0x73/0x80
    [   17.352590]  ? sysfs_kf_seq_show+0xc1/0x140
    [   17.352592]  ? ext4_seq_options_show.cfi_jt+0x8/0x8
    [   17.352593]  ? seq_read+0x180/0x600
    [   17.352595]  ? sysfs_create_file_ns.cfi_jt+0x10/0x10
    [   17.352596]  ? tlbflush_read_file+0x8/0x8
    [   17.352597]  ? __vfs_read+0x6b/0x220
    [   17.352598]  ? handle_mm_fault+0xa23/0x11b0
    [   17.352599]  ? vfs_read+0xa2/0x130
    [   17.352599]  ? ksys_read+0x6a/0xd0
    [   17.352601]  ? __do_sys_getpgrp+0x8/0x8
    [   17.352602]  ? do_syscall_64+0x72/0x120
    [   17.352603]  ? entry_SYSCALL_64_after_hwframe+0x44/0xa9
    [   17.352604] ---[ end trace 7b1fa81dc897e419 ]---
    
    When /sys/firmware/acpi/pm_profile is read, sysfs_kf_seq_show is called,
    which in turn calls kobj_attr_show, which gets the ->show callback
    member by calling container_of on attr (casting it to struct
    kobj_attribute) then calls it.
    
    There is a CFI violation because pm_profile_attr is of type
    struct device_attribute but kobj_attr_show calls ->show expecting it
    to be from struct kobj_attribute. CFI checking ensures that function
    pointer types match when doing indirect calls. Fix pm_profile_attr to
    be defined in terms of kobj_attribute so there is no violation or
    mismatch.
    
    Fixes: 362b646062b2 ("ACPI: Export FADT pm_profile integer value to userspace")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1051
    Reported-by: yuu ichii <byahu140@heisei.be>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Cc: 3.10+ <stable@vger.kernel.org> # 3.10+
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b7cff2962ab83a46d76fe0579653494132c33d7
Author: Aaron Plattner <aplattner@nvidia.com>
Date:   Thu Jun 11 11:08:45 2020 -0700

    ALSA: hda: Add NVIDIA codec IDs 9a & 9d through a0 to patch table
    
    commit adb36a8203831e40494a92095dacd566b2ad4a69 upstream.
    
    These IDs are for upcoming NVIDIA chips with audio functions that are largely
    similar to the existing ones.
    
    Signed-off-by: Aaron Plattner <aplattner@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200611180845.39942-1-aplattner@nvidia.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73ede07b611c4d0731fdc148580aa67a643a29e7
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Fri Jun 5 16:58:36 2020 +0200

    blktrace: break out of blktrace setup on concurrent calls
    
    [ Upstream commit 1b0b283648163dae2a214ca28ed5a99f62a77319 ]
    
    We use one blktrace per request_queue, that means one per the entire
    disk.  So we cannot run one blktrace on say /dev/vda and then /dev/vda1,
    or just two calls on /dev/vda.
    
    We check for concurrent setup only at the very end of the blktrace setup though.
    
    If we try to run two concurrent blktraces on the same block device the
    second one will fail, and the first one seems to go on. However when
    one tries to kill the first one one will see things like this:
    
    The kernel will show these:
    
    ```
    debugfs: File 'dropped' in directory 'nvme1n1' already present!
    debugfs: File 'msg' in directory 'nvme1n1' already present!
    debugfs: File 'trace0' in directory 'nvme1n1' already present!
    ``
    
    And userspace just sees this error message for the second call:
    
    ```
    blktrace /dev/nvme1n1
    BLKTRACESETUP(2) /dev/nvme1n1 failed: 5/Input/output error
    ```
    
    The first userspace process #1 will also claim that the files
    were taken underneath their nose as well. The files are taken
    away form the first process given that when the second blktrace
    fails, it will follow up with a BLKTRACESTOP and BLKTRACETEARDOWN.
    This means that even if go-happy process #1 is waiting for blktrace
    data, we *have* been asked to take teardown the blktrace.
    
    This can easily be reproduced with break-blktrace [0] run_0005.sh test.
    
    Just break out early if we know we're already going to fail, this will
    prevent trying to create the files all over again, which we know still
    exist.
    
    [0] https://github.com/mcgrof/break-blktrace
    
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 892b6f99661f36702c7524646b861bf8c4521e5a
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Jun 14 23:43:40 2020 +0900

    kbuild: improve cc-option to clean up all temporary files
    
    [ Upstream commit f2f02ebd8f3833626642688b2d2c6a7b3c141fa9 ]
    
    When cc-option and friends evaluate compiler flags, the temporary file
    $$TMP is created as an output object, and automatically cleaned up.
    The actual file path of $$TMP is .<pid>.tmp, here <pid> is the process
    ID of $(shell ...) invoked from cc-option. (Please note $$$$ is the
    escape sequence of $$).
    
    Such garbage files are cleaned up in most cases, but some compiler flags
    create additional output files.
    
    For example, -gsplit-dwarf creates a .dwo file.
    
    When CONFIG_DEBUG_INFO_SPLIT=y, you will see a bunch of .<pid>.dwo files
    left in the top of build directories. You may not notice them unless you
    do 'ls -a', but the garbage files will increase every time you run 'make'.
    
    This commit changes the temporary object path to .tmp_<pid>/tmp, and
    removes .tmp_<pid> directory when exiting. Separate build artifacts such
    as *.dwo will be cleaned up all together because their file paths are
    usually determined based on the base name of the object.
    
    Another example is -ftest-coverage, which outputs the coverage data into
    <base-name-of-object>.gcno
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9f5d5438c2d7ac0915439bb5b14efa0e4b7ddc5
Author: Sven Schnelle <svens@linux.ibm.com>
Date:   Mon Mar 9 16:44:50 2020 +0100

    s390/ptrace: fix setting syscall number
    
    [ Upstream commit 873e5a763d604c32988c4a78913a8dab3862d2f9 ]
    
    When strace wants to update the syscall number, it sets GPR2
    to the desired number and updates the GPR via PTRACE_SETREGSET.
    It doesn't update regs->int_code which would cause the old syscall
    executed on syscall restart. As we cannot change the ptrace ABI and
    don't have a field for the interruption code, check whether the tracee
    is in a syscall and the last instruction was svc. In that case assume
    that the tracer wants to update the syscall number and copy the GPR2
    value to regs->int_code.
    
    Signed-off-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d209911d1dbf0982da4b9f639eb8854710e27780
Author: Zekun Shen <bruceshenzk@gmail.com>
Date:   Mon Jun 15 11:50:29 2020 -0400

    net: alx: fix race condition in alx_remove
    
    [ Upstream commit e89df5c4322c1bf495f62d74745895b5fd2a4393 ]
    
    There is a race condition exist during termination. The path is
    alx_stop and then alx_remove. An alx_schedule_link_check could be called
    before alx_stop by interrupt handler and invoke alx_link_check later.
    Alx_stop frees the napis, and alx_remove cancels any pending works.
    If any of the work is scheduled before termination and invoked before
    alx_remove, a null-ptr-deref occurs because both expect alx->napis[i].
    
    This patch fix the race condition by moving cancel_work_sync functions
    before alx_free_napis inside alx_stop. Because interrupt handler can call
    alx_schedule_link_check again, alx_free_irq is moved before
    cancel_work_sync calls too.
    
    Signed-off-by: Zekun Shen <bruceshenzk@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 74a53fd98c322488a8c9f2312fd222785180b18b
Author: Ye Bin <yebin10@huawei.com>
Date:   Fri Jun 5 09:41:49 2020 +0800

    ata/libata: Fix usage of page address by page_address in ata_scsi_mode_select_xlat function
    
    [ Upstream commit f650ef61e040bcb175dd8762164b00a5d627f20e ]
    
    BUG: KASAN: use-after-free in ata_scsi_mode_select_xlat+0x10bd/0x10f0
    drivers/ata/libata-scsi.c:4045
    Read of size 1 at addr ffff88803b8cd003 by task syz-executor.6/12621
    
    CPU: 1 PID: 12621 Comm: syz-executor.6 Not tainted 4.19.95 #1
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS
    1.10.2-1ubuntu1 04/01/2014
    Call Trace:
    __dump_stack lib/dump_stack.c:77 [inline]
    dump_stack+0xac/0xee lib/dump_stack.c:118
    print_address_description+0x60/0x223 mm/kasan/report.c:253
    kasan_report_error mm/kasan/report.c:351 [inline]
    kasan_report mm/kasan/report.c:409 [inline]
    kasan_report.cold+0xae/0x2d8 mm/kasan/report.c:393
    ata_scsi_mode_select_xlat+0x10bd/0x10f0 drivers/ata/libata-scsi.c:4045
    ata_scsi_translate+0x2da/0x680 drivers/ata/libata-scsi.c:2035
    __ata_scsi_queuecmd drivers/ata/libata-scsi.c:4360 [inline]
    ata_scsi_queuecmd+0x2e4/0x790 drivers/ata/libata-scsi.c:4409
    scsi_dispatch_cmd+0x2ee/0x6c0 drivers/scsi/scsi_lib.c:1867
    scsi_queue_rq+0xfd7/0x1990 drivers/scsi/scsi_lib.c:2170
    blk_mq_dispatch_rq_list+0x1e1/0x19a0 block/blk-mq.c:1186
    blk_mq_do_dispatch_sched+0x147/0x3d0 block/blk-mq-sched.c:108
    blk_mq_sched_dispatch_requests+0x427/0x680 block/blk-mq-sched.c:204
    __blk_mq_run_hw_queue+0xbc/0x200 block/blk-mq.c:1308
    __blk_mq_delay_run_hw_queue+0x3c0/0x460 block/blk-mq.c:1376
    blk_mq_run_hw_queue+0x152/0x310 block/blk-mq.c:1413
    blk_mq_sched_insert_request+0x337/0x6c0 block/blk-mq-sched.c:397
    blk_execute_rq_nowait+0x124/0x320 block/blk-exec.c:64
    blk_execute_rq+0xc5/0x112 block/blk-exec.c:101
    sg_scsi_ioctl+0x3b0/0x6a0 block/scsi_ioctl.c:507
    sg_ioctl+0xd37/0x23f0 drivers/scsi/sg.c:1106
    vfs_ioctl fs/ioctl.c:46 [inline]
    file_ioctl fs/ioctl.c:501 [inline]
    do_vfs_ioctl+0xae6/0x1030 fs/ioctl.c:688
    ksys_ioctl+0x76/0xa0 fs/ioctl.c:705
    __do_sys_ioctl fs/ioctl.c:712 [inline]
    __se_sys_ioctl fs/ioctl.c:710 [inline]
    __x64_sys_ioctl+0x6f/0xb0 fs/ioctl.c:710
    do_syscall_64+0xa0/0x2e0 arch/x86/entry/common.c:293
    entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x45c479
    Code: ad b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89
    f7 48
    89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff
    ff 0f
    83 7b b6 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fb0e9602c78 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00007fb0e96036d4 RCX: 000000000045c479
    RDX: 0000000020000040 RSI: 0000000000000001 RDI: 0000000000000003
    RBP: 000000000076bfc0 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00000000ffffffff
    R13: 000000000000046d R14: 00000000004c6e1a R15: 000000000076bfcc
    
    Allocated by task 12577:
    set_track mm/kasan/kasan.c:460 [inline]
    kasan_kmalloc mm/kasan/kasan.c:553 [inline]
    kasan_kmalloc+0xbf/0xe0 mm/kasan/kasan.c:531
    __kmalloc+0xf3/0x1e0 mm/slub.c:3749
    kmalloc include/linux/slab.h:520 [inline]
    load_elf_phdrs+0x118/0x1b0 fs/binfmt_elf.c:441
    load_elf_binary+0x2de/0x4610 fs/binfmt_elf.c:737
    search_binary_handler fs/exec.c:1654 [inline]
    search_binary_handler+0x15c/0x4e0 fs/exec.c:1632
    exec_binprm fs/exec.c:1696 [inline]
    __do_execve_file.isra.0+0xf52/0x1a90 fs/exec.c:1820
    do_execveat_common fs/exec.c:1866 [inline]
    do_execve fs/exec.c:1883 [inline]
    __do_sys_execve fs/exec.c:1964 [inline]
    __se_sys_execve fs/exec.c:1959 [inline]
    __x64_sys_execve+0x8a/0xb0 fs/exec.c:1959
    do_syscall_64+0xa0/0x2e0 arch/x86/entry/common.c:293
    entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 12577:
    set_track mm/kasan/kasan.c:460 [inline]
    __kasan_slab_free+0x129/0x170 mm/kasan/kasan.c:521
    slab_free_hook mm/slub.c:1370 [inline]
    slab_free_freelist_hook mm/slub.c:1397 [inline]
    slab_free mm/slub.c:2952 [inline]
    kfree+0x8b/0x1a0 mm/slub.c:3904
    load_elf_binary+0x1be7/0x4610 fs/binfmt_elf.c:1118
    search_binary_handler fs/exec.c:1654 [inline]
    search_binary_handler+0x15c/0x4e0 fs/exec.c:1632
    exec_binprm fs/exec.c:1696 [inline]
    __do_execve_file.isra.0+0xf52/0x1a90 fs/exec.c:1820
    do_execveat_common fs/exec.c:1866 [inline]
    do_execve fs/exec.c:1883 [inline]
    __do_sys_execve fs/exec.c:1964 [inline]
    __se_sys_execve fs/exec.c:1959 [inline]
    __x64_sys_execve+0x8a/0xb0 fs/exec.c:1959
    do_syscall_64+0xa0/0x2e0 arch/x86/entry/common.c:293
    entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    The buggy address belongs to the object at ffff88803b8ccf00
    which belongs to the cache kmalloc-512 of size 512
    The buggy address is located 259 bytes inside of
    512-byte region [ffff88803b8ccf00, ffff88803b8cd100)
    The buggy address belongs to the page:
    page:ffffea0000ee3300 count:1 mapcount:0 mapping:ffff88806cc03080
    index:0xffff88803b8cc780 compound_mapcount: 0
    flags: 0x100000000008100(slab|head)
    raw: 0100000000008100 ffffea0001104080 0000000200000002 ffff88806cc03080
    raw: ffff88803b8cc780 00000000800c000b 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
    ffff88803b8ccf00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff88803b8ccf80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff88803b8cd000: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ^
    ffff88803b8cd080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ffff88803b8cd100: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    
    You can refer to "https://www.lkml.org/lkml/2019/1/17/474" reproduce
    this error.
    
    The exception code is "bd_len = p[3];", "p" value is ffff88803b8cd000
    which belongs to the cache kmalloc-512 of size 512. The "page_address(sg_page(scsi_sglist(scmd)))"
    maybe from sg_scsi_ioctl function "buffer" which allocated by kzalloc, so "buffer"
    may not page aligned.
    This also looks completely buggy on highmem systems and really needs to use a
    kmap_atomic.      --Christoph Hellwig
    To address above bugs, Paolo Bonzini advise to simpler to just make a char array
    of size CACHE_MPAGE_LEN+8+8+4-2(or just 64 to make it easy), use sg_copy_to_buffer
    to copy from the sglist into the buffer, and workthere.
    
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3cdf9585a0d45774184197fbcda05b1802075684
Author: Juri Lelli <juri.lelli@redhat.com>
Date:   Mon Nov 19 16:32:01 2018 +0100

    sched/core: Fix PI boosting between RT and DEADLINE tasks
    
    [ Upstream commit 740797ce3a124b7dd22b7fb832d87bc8fba1cf6f ]
    
    syzbot reported the following warning:
    
     WARNING: CPU: 1 PID: 6351 at kernel/sched/deadline.c:628
     enqueue_task_dl+0x22da/0x38a0 kernel/sched/deadline.c:1504
    
    At deadline.c:628 we have:
    
     623 static inline void setup_new_dl_entity(struct sched_dl_entity *dl_se)
     624 {
     625    struct dl_rq *dl_rq = dl_rq_of_se(dl_se);
     626    struct rq *rq = rq_of_dl_rq(dl_rq);
     627
     628    WARN_ON(dl_se->dl_boosted);
     629    WARN_ON(dl_time_before(rq_clock(rq), dl_se->deadline));
            [...]
         }
    
    Which means that setup_new_dl_entity() has been called on a task
    currently boosted. This shouldn't happen though, as setup_new_dl_entity()
    is only called when the 'dynamic' deadline of the new entity
    is in the past w.r.t. rq_clock and boosted tasks shouldn't verify this
    condition.
    
    Digging through the PI code I noticed that what above might in fact happen
    if an RT tasks blocks on an rt_mutex hold by a DEADLINE task. In the
    first branch of boosting conditions we check only if a pi_task 'dynamic'
    deadline is earlier than mutex holder's and in this case we set mutex
    holder to be dl_boosted. However, since RT 'dynamic' deadlines are only
    initialized if such tasks get boosted at some point (or if they become
    DEADLINE of course), in general RT 'dynamic' deadlines are usually equal
    to 0 and this verifies the aforementioned condition.
    
    Fix it by checking that the potential donor task is actually (even if
    temporary because in turn boosted) running at DEADLINE priority before
    using its 'dynamic' deadline value.
    
    Fixes: 2d3d891d3344 ("sched/deadline: Add SCHED_DEADLINE inheritance logic")
    Reported-by: syzbot+119ba87189432ead09b4@syzkaller.appspotmail.com
    Signed-off-by: Juri Lelli <juri.lelli@redhat.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Reviewed-by: Daniel Bristot de Oliveira <bristot@redhat.com>
    Tested-by: Daniel Wagner <dwagner@suse.de>
    Link: https://lkml.kernel.org/r/20181119153201.GB2119@localhost.localdomain
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc981c4f5b07a2d7d4030ba0ecf3ad88744741f3
Author: Doug Berger <opendmb@gmail.com>
Date:   Wed Jun 24 18:14:55 2020 -0700

    net: bcmgenet: use hardware padding of runt frames
    
    [ Upstream commit 20d1f2d1b024f6be199a3bedf1578a1d21592bc5 ]
    
    When commit 474ea9cafc45 ("net: bcmgenet: correctly pad short
    packets") added the call to skb_padto() it should have been
    located before the nr_frags parameter was read since that value
    could be changed when padding packets with lengths between 55
    and 59 bytes (inclusive).
    
    The use of a stale nr_frags value can cause corruption of the
    pad data when tx-scatter-gather is enabled. This corruption of
    the pad can cause invalid checksum computation when hardware
    offload of tx-checksum is also enabled.
    
    Since the original reason for the padding was corrected by
    commit 7dd399130efb ("net: bcmgenet: fix skb_len in
    bcmgenet_xmit_single()") we can remove the software padding all
    together and make use of hardware padding of short frames as
    long as the hardware also always appends the FCS value to the
    frame.
    
    Fixes: 474ea9cafc45 ("net: bcmgenet: correctly pad short packets")
    Signed-off-by: Doug Berger <opendmb@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca3b7a11cbe986f4b14c2bd1d8aca5c086793255
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Jun 10 21:51:11 2020 +0100

    netfilter: ipset: fix unaligned atomic access
    
    [ Upstream commit 715028460082d07a7ec6fcd87b14b46784346a72 ]
    
    When using ip_set with counters and comment, traffic causes the kernel
    to panic on 32-bit ARM:
    
    Alignment trap: not handling instruction e1b82f9f at [<bf01b0dc>]
    Unhandled fault: alignment exception (0x221) at 0xea08133c
    PC is at ip_set_match_extensions+0xe0/0x224 [ip_set]
    
    The problem occurs when we try to update the 64-bit counters - the
    faulting address above is not 64-bit aligned.  The problem occurs
    due to the way elements are allocated, for example:
    
            set->dsize = ip_set_elem_len(set, tb, 0, 0);
            map = ip_set_alloc(sizeof(*map) + elements * set->dsize);
    
    If the element has a requirement for a member to be 64-bit aligned,
    and set->dsize is not a multiple of 8, but is a multiple of four,
    then every odd numbered elements will be misaligned - and hitting
    an atomic64_add() on that element will cause the kernel to panic.
    
    ip_set_elem_len() must return a size that is rounded to the maximum
    alignment of any extension field stored in the element.  This change
    ensures that is the case.
    
    Fixes: 95ad1f4a9358 ("netfilter: ipset: Fix extension alignment")
    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 96885f50ed8bfcd6291bad50e71a0d9df61c6e63
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Jun 15 14:27:19 2020 +0300

    usb: gadget: udc: Potential Oops in error handling code
    
    [ Upstream commit e55f3c37cb8d31c7e301f46396b2ac6a19eb3a7c ]
    
    If this is in "transceiver" mode the the ->qwork isn't required and is
    a NULL pointer.  This can lead to a NULL dereference when we call
    destroy_workqueue(udc->qwork).
    
    Fixes: 3517c31a8ece ("usb: gadget: mv_udc: use devm_xxx for probe")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Felipe Balbi <balbi@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e1d4aba83f45e58b6fe33f1f057a2fe1eee24918
Author: yu kuai <yukuai3@huawei.com>
Date:   Thu Jun 4 20:42:06 2020 +0800

    ARM: imx5: add missing put_device() call in imx_suspend_alloc_ocram()
    
    [ Upstream commit 586745f1598ccf71b0a5a6df2222dee0a865954e ]
    
    if of_find_device_by_node() succeed, imx_suspend_alloc_ocram() doesn't
    have a corresponding put_device(). Thus add a jump target to fix the
    exception handling for this function implementation.
    
    Fixes: 1579c7b9fe01 ("ARM: imx53: Set DDR pins to high impedance when in suspend to RAM.")
    Signed-off-by: yu kuai <yukuai3@huawei.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a7b443e1da9944784f4b2a29dfaa58361cba68f3
Author: Alexander Lobakin <alobakin@marvell.com>
Date:   Tue Jun 23 16:51:33 2020 +0300

    net: qed: fix excessive QM ILT lines consumption
    
    [ Upstream commit d434d02f7e7c24c721365fd594ed781acb18e0da ]
    
    This is likely a copy'n'paste mistake. The amount of ILT lines to
    reserve for a single VF was being multiplied by the total VFs count.
    This led to a huge redundancy in reservation and potential lines
    drainouts.
    
    Fixes: 1408cc1fa48c ("qed: Introduce VFs")
    Signed-off-by: Alexander Lobakin <alobakin@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a10804ad4ece274f15022436887d8f707ac26547
Author: Alexander Lobakin <alobakin@marvell.com>
Date:   Tue Jun 23 16:51:32 2020 +0300

    net: qed: fix NVMe login fails over VFs
    
    [ Upstream commit ccd7c7ce167a21dbf2b698ffcf00f11d96d44f9b ]
    
    25ms sleep cycles in waiting for PF response are excessive and may lead
    to different timeout failures.
    
    Start to wait with short udelays, and in most cases polling will end
    here. If the time was not sufficient, switch to msleeps.
    usleep_range() may go far beyond 100us depending on platform and tick
    configuration, hence atomic udelays for consistency.
    
    Also add explicit DMA barriers since 'done' always comes from a shared
    request-response DMA pool, and note that in the comment nearby.
    
    Fixes: 1408cc1fa48c ("qed: Introduce VFs")
    Signed-off-by: Alexander Lobakin <alobakin@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf516c071a72a8fb6a45bef4bfd02b5e371fb025
Author: Alexander Lobakin <alobakin@marvell.com>
Date:   Tue Jun 23 16:51:29 2020 +0300

    net: qed: fix left elements count calculation
    
    [ Upstream commit 97dd1abd026ae4e6a82fa68645928404ad483409 ]
    
    qed_chain_get_element_left{,_u32} returned 0 when the difference
    between producer and consumer page count was equal to the total
    page count.
    Fix this by conditional expanding of producer value (vs
    unconditional). This allowed to eliminate normalizaton against
    total page count, which was the cause of this bug.
    
    Misc: replace open-coded constants with common defines.
    
    Fixes: a91eb52abb50 ("qed: Revisit chain implementation")
    Signed-off-by: Alexander Lobakin <alobakin@marvell.com>
    Signed-off-by: Igor Russkikh <irusskikh@marvell.com>
    Signed-off-by: Michal Kalderon <michal.kalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1dcc75fc834cba6d7057c2a55dd9b8e99f687135
Author: Fan Guo <guofan5@huawei.com>
Date:   Fri Jun 12 14:38:24 2020 +0800

    RDMA/mad: Fix possible memory leak in ib_mad_post_receive_mads()
    
    [ Upstream commit a17f4bed811c60712d8131883cdba11a105d0161 ]
    
    If ib_dma_mapping_error() returns non-zero value,
    ib_mad_post_receive_mads() will jump out of loops and return -ENOMEM
    without freeing mad_priv. Fix this memory-leak problem by freeing mad_priv
    in this case.
    
    Fixes: 2c34e68f4261 ("IB/mad: Check and handle potential DMA mapping errors")
    Link: https://lore.kernel.org/r/20200612063824.180611-1-guofan5@huawei.com
    Signed-off-by: Fan Guo <guofan5@huawei.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2a25d514036fe14eb5e3300a3472c8f695106e2b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Sat Jun 13 15:51:58 2020 -0500

    ASoC: rockchip: Fix a reference count leak.
    
    [ Upstream commit f141a422159a199f4c8dedb7e0df55b3b2cf16cd ]
    
    Calling pm_runtime_get_sync increments the counter even in case of
    failure, causing incorrect ref count if pm_runtime_put is not called in
    error handling paths. Call pm_runtime_put if pm_runtime_get_sync fails.
    
    Fixes: fc05a5b22253 ("ASoC: rockchip: add support for pdm controller")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Reviewed-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://lore.kernel.org/r/20200613205158.27296-1-wu000273@umn.edu
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit db6937ddeab442a6d9cee983a83b6bbf71e23924
Author: Mark Zhang <markz@mellanox.com>
Date:   Tue Jun 16 13:43:04 2020 +0300

    RDMA/cma: Protect bind_list and listen_list while finding matching cm id
    
    [ Upstream commit 730c8912484186d4623d0c76509066d285c3a755 ]
    
    The bind_list and listen_list must be accessed under a lock, add the
    missing locking around the access in cm_ib_id_from_event()
    
    In addition add lockdep asserts to make it clearer what the locking
    semantic is here.
    
      general protection fault: 0000 [#1] SMP NOPTI
      CPU: 226 PID: 126135 Comm: kworker/226:1 Tainted: G OE 4.12.14-150.47-default #1 SLE15
      Hardware name: Cray Inc. Windom/Windom, BIOS 0.8.7 01-10-2020
      Workqueue: ib_cm cm_work_handler [ib_cm]
      task: ffff9c5a60a1d2c0 task.stack: ffffc1d91f554000
      RIP: 0010:cma_ib_req_handler+0x3f1/0x11b0 [rdma_cm]
      RSP: 0018:ffffc1d91f557b40 EFLAGS: 00010286
      RAX: deacffffffffff30 RBX: 0000000000000001 RCX: ffff9c2af5bb6000
      RDX: 00000000000000a9 RSI: ffff9c5aa4ed2f10 RDI: ffffc1d91f557b08
      RBP: ffffc1d91f557d90 R08: ffff9c340cc80000 R09: ffff9c2c0f901900
      R10: 0000000000000000 R11: 0000000000000001 R12: deacffffffffff30
      R13: ffff9c5a48aeec00 R14: ffffc1d91f557c30 R15: ffff9c5c2eea3688
      FS: 0000000000000000(0000) GS:ffff9c5c2fa80000(0000) knlGS:0000000000000000
      CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
      CR2: 00002b5cc03fa320 CR3: 0000003f8500a000 CR4: 00000000003406e0
      Call Trace:
      ? rdma_addr_cancel+0xa0/0xa0 [ib_core]
      ? cm_process_work+0x28/0x140 [ib_cm]
      cm_process_work+0x28/0x140 [ib_cm]
      ? cm_get_bth_pkey.isra.44+0x34/0xa0 [ib_cm]
      cm_work_handler+0xa06/0x1a6f [ib_cm]
      ? __switch_to_asm+0x34/0x70
      ? __switch_to_asm+0x34/0x70
      ? __switch_to_asm+0x40/0x70
      ? __switch_to_asm+0x34/0x70
      ? __switch_to_asm+0x40/0x70
      ? __switch_to_asm+0x34/0x70
      ? __switch_to_asm+0x40/0x70
      ? __switch_to+0x7c/0x4b0
      ? __switch_to_asm+0x40/0x70
      ? __switch_to_asm+0x34/0x70
      process_one_work+0x1da/0x400
      worker_thread+0x2b/0x3f0
      ? process_one_work+0x400/0x400
      kthread+0x118/0x140
      ? kthread_create_on_node+0x40/0x40
      ret_from_fork+0x22/0x40
      Code: 00 66 83 f8 02 0f 84 ca 05 00 00 49 8b 84 24 d0 01 00 00 48 85 c0 0f 84 68 07 00 00 48 2d d0 01
      00 00 49 89 c4 0f 84 59 07 00 00 <41> 0f b7 44 24 20 49 8b 77 50 66 83 f8 0a 75 9e 49 8b 7c 24 28
    
    Fixes: 4c21b5bcef73 ("IB/cma: Add net_dev and private data checks to RDMA CM")
    Link: https://lore.kernel.org/r/20200616104304.2426081-1-leon@kernel.org
    Signed-off-by: Mark Zhang <markz@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b0a2659f80593b3429620048b0d385f073dbd29
Author: David Howells <dhowells@redhat.com>
Date:   Wed Jun 17 23:01:23 2020 +0100

    rxrpc: Fix handling of rwind from an ACK packet
    
    [ Upstream commit a2ad7c21ad8cf1ce4ad65e13df1c2a1c29b38ac5 ]
    
    The handling of the receive window size (rwind) from a received ACK packet
    is not correct.  The rxrpc_input_ackinfo() function currently checks the
    current Tx window size against the rwind from the ACK to see if it has
    changed, but then limits the rwind size before storing it in the tx_winsize
    member and, if it increased, wake up the transmitting process.  This means
    that if rwind > RXRPC_RXTX_BUFF_SIZE - 1, this path will always be
    followed.
    
    Fix this by limiting rwind before we compare it to tx_winsize.
    
    The effect of this can be seen by enabling the rxrpc_rx_rwind_change
    tracepoint.
    
    Fixes: 702f2ac87a9a ("rxrpc: Wake up the transmitter if Rx window size increases on the peer")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 83ef76d25373e81c8bc453027d32a43ba3f8482c
Author: Matthew Hagan <mnhagan88@gmail.com>
Date:   Sun Jun 14 15:19:00 2020 -0700

    ARM: dts: NSP: Correct FA2 mailbox node
    
    [ Upstream commit ac4e106d8934a5894811fc263f4b03fc8ed0fb7a ]
    
    The FA2 mailbox is specified at 0x18025000 but should actually be
    0x18025c00, length 0x400 according to socregs_nsp.h and board_bu.c. Also
    the interrupt was off by one and should be GIC SPI 151 instead of 150.
    
    Fixes: 17d517172300 ("ARM: dts: NSP: Add mailbox (PDC) to NSP")
    Signed-off-by: Matthew Hagan <mnhagan88@gmail.com>
    Signed-off-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1512b03d4d28757cebf4e3cb0dcd4db8e5c68e8b
Author: Qiushi Wu <wu000273@umn.edu>
Date:   Thu May 28 13:38:04 2020 -0500

    efi/esrt: Fix reference count leak in esre_create_sysfs_entry.
    
    [ Upstream commit 4ddf4739be6e375116c375f0a68bf3893ffcee21 ]
    
    kobject_init_and_add() takes reference even when it fails.
    If this function returns an error, kobject_put() must be called to
    properly clean up the memory associated with the object. Previous
    commit "b8eb718348b8" fixed a similar problem.
    
    Fixes: 0bb549052d33 ("efi: Add esrt support")
    Signed-off-by: Qiushi Wu <wu000273@umn.edu>
    Link: https://lore.kernel.org/r/20200528183804.4497-1-wu000273@umn.edu
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca4a4c624d1ada5400ca3b4921c187383f872337
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Jun 23 07:31:54 2020 -0400

    cifs/smb3: Fix data inconsistent when zero file range
    
    [ Upstream commit 6b69040247e14b43419a520f841f2b3052833df9 ]
    
    CIFS implements the fallocate(FALLOC_FL_ZERO_RANGE) with send SMB
    ioctl(FSCTL_SET_ZERO_DATA) to server. It just set the range of the
    remote file to zero, but local page cache not update, then the data
    inconsistent with server, which leads the xfstest generic/008 failed.
    
    So we need to remove the local page caches before send SMB
    ioctl(FSCTL_SET_ZERO_DATA) to server. After next read, it will
    re-cache it.
    
    Fixes: 30175628bf7f5 ("[SMB3] Enable fallocate -z support for SMB3 mounts")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Cc: stable@vger.kernel.org # v3.17
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8ed742e6ec467f4d814a606677a49d9bd8e8e22b
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Tue Jun 23 07:31:53 2020 -0400

    cifs/smb3: Fix data inconsistent when punch hole
    
    [ Upstream commit acc91c2d8de4ef46ed751c5f9df99ed9a109b100 ]
    
    When punch hole success, we also can read old data from file:
      # strace -e trace=pread64,fallocate xfs_io -f -c "pread 20 40" \
               -c "fpunch 20 40" -c"pread 20 40" file
      pread64(3, " version 5.8.0-rc1+"..., 40, 20) = 40
      fallocate(3, FALLOC_FL_KEEP_SIZE|FALLOC_FL_PUNCH_HOLE, 20, 40) = 0
      pread64(3, " version 5.8.0-rc1+"..., 40, 20) = 40
    
    CIFS implements the fallocate(FALLOCATE_FL_PUNCH_HOLE) with send SMB
    ioctl(FSCTL_SET_ZERO_DATA) to server. It just set the range of the
    remote file to zero, but local page caches not updated, then the
    local page caches inconsistent with server.
    
    Also can be found by xfstests generic/316.
    
    So, we need to remove the page caches before send the SMB
    ioctl(FSCTL_SET_ZERO_DATA) to server.
    
    Fixes: 31742c5a33176 ("enable fallocate punch hole ("fallocate -p") for SMB3")
    Suggested-by: Pavel Shilovsky <pshilov@microsoft.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Cc: stable@vger.kernel.org # v3.17
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3afc43e713b4049eec6638c01fbcfcae36d462ed
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Wed Jun 24 16:59:49 2020 +0300

    xhci: Poll for U0 after disabling USB2 LPM
    
    [ Upstream commit b3d71abd135e6919ca0b6cab463738472653ddfb ]
    
    USB2 devices with LPM enabled may interrupt the system suspend:
    [  932.510475] usb 1-7: usb suspend, wakeup 0
    [  932.510549] hub 1-0:1.0: hub_suspend
    [  932.510581] usb usb1: bus suspend, wakeup 0
    [  932.510590] xhci_hcd 0000:00:14.0: port 9 not suspended
    [  932.510593] xhci_hcd 0000:00:14.0: port 8 not suspended
    ..
    [  932.520323] xhci_hcd 0000:00:14.0: Port change event, 1-7, id 7, portsc: 0x400e03
    ..
    [  932.591405] PM: pci_pm_suspend(): hcd_pci_suspend+0x0/0x30 returns -16
    [  932.591414] PM: dpm_run_callback(): pci_pm_suspend+0x0/0x160 returns -16
    [  932.591418] PM: Device 0000:00:14.0 failed to suspend async: error -16
    
    During system suspend, USB core will let HC suspends the device if it
    doesn't have remote wakeup enabled and doesn't have any children.
    However, from the log above we can see that the usb 1-7 doesn't get bus
    suspended due to not in U0. After a while the port finished U2 -> U0
    transition, interrupts the suspend process.
    
    The observation is that after disabling LPM, port doesn't transit to U0
    immediately and can linger in U2. xHCI spec 4.23.5.2 states that the
    maximum exit latency for USB2 LPM should be BESL + 10us. The BESL for
    the affected device is advertised as 400us, which is still not enough
    based on my testing result.
    
    So let's use the maximum permitted latency, 10000, to poll for U0
    status to solve the issue.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200624135949.22611-6-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9f77e53fc14e2e82d0ec8ffb03340d9cf9093f68
Author: Takashi Iwai <tiwai@suse.de>
Date:   Wed Jun 24 14:23:40 2020 +0200

    ALSA: usb-audio: Fix OOB access of mixer element list
    
    [ Upstream commit 220345e98f1cdc768eeb6e3364a0fa7ab9647fe7 ]
    
    The USB-audio mixer code holds a linked list of usb_mixer_elem_list,
    and several operations are performed for each mixer element.  A few of
    them (snd_usb_mixer_notify_id() and snd_usb_mixer_interrupt_v2())
    assume each mixer element being a usb_mixer_elem_info object that is a
    subclass of usb_mixer_elem_list, cast via container_of() and access it
    members.  This may result in an out-of-bound access when a
    non-standard list element has been added, as spotted by syzkaller
    recently.
    
    This patch adds a new field, is_std_info, in usb_mixer_elem_list to
    indicate that the element is the usb_mixer_elem_info type or not, and
    skip the access to such an element if needed.
    
    Reported-by: syzbot+fb14314433463ad51625@syzkaller.appspotmail.com
    Reported-by: syzbot+2405ca3401e943c538b5@syzkaller.appspotmail.com
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200624122340.9615-1-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a721280df2c9aca197768ebed671dee8a1f0143c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu May 3 12:33:32 2018 +0200

    ALSA: usb-audio: Clean up mixer element list traverse
    
    [ Upstream commit 8c558076c740e8009a96c6fdc3d4245dde62be77 ]
    
    Introduce a new macro for iterating over mixer element list for
    avoiding the open codes in many places.  Also the open-coded
    container_of() and the forced cast to struct usb_mixer_elem_info are
    replaced with another simple macro, too.
    
    No functional changes but just readability improvement.
    
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eb5211f4f3cf5c4d7e29d16e06bb852d8cbcbccc
Author: Julian Scheel <julian@jusst.de>
Date:   Thu Nov 16 17:35:17 2017 +0100

    ALSA: usb-audio: uac1: Invalidate ctl on interrupt
    
    [ Upstream commit b2500b584cfd228d67e1e43daf27c8af865b499e ]
    
    When an interrupt occurs, the value of at least one of the belonging
    controls should have changed. To make sure they get re-read from device
    on the next read, invalidate the cache. This was correctly implemented
    for uac2 already, but missing for uac1.
    
    Signed-off-by: Julian Scheel <julian@jusst.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a68d1a49f899391990dde592b1364a7e71ae8a13
Author: Zheng Bin <zhengbin13@huawei.com>
Date:   Thu Jun 18 12:21:37 2020 +0800

    loop: replace kill_bdev with invalidate_bdev
    
    commit f4bd34b139a3fa2808c4205f12714c65e1548c6c upstream.
    
    When a filesystem is mounted on a loop device and on a loop ioctl
    LOOP_SET_STATUS64, because of kill_bdev, buffer_head mappings are getting
    destroyed.
    kill_bdev
      truncate_inode_pages
        truncate_inode_pages_range
          do_invalidatepage
            block_invalidatepage
              discard_buffer  -->clear BH_Mapped flag
    
    sb_bread
      __bread_gfp
      bh = __getblk_gfp
      -->discard_buffer clear BH_Mapped flag
      __bread_slow
        submit_bh
          submit_bh_wbc
            BUG_ON(!buffer_mapped(bh))  --> hit this BUG_ON
    
    Fixes: 5db470e229e2 ("loop: drop caches if offset or block_size are changed")
    Signed-off-by: Zheng Bin <zhengbin13@huawei.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20c64dc5f4ac91f275c3d4fb1b9fbee61a8eea74
Author: Joakim Tjernlund <joakim.tjernlund@infinera.com>
Date:   Fri Jun 5 12:54:18 2020 +0200

    cdc-acm: Add DISABLE_ECHO quirk for Microchip/SMSC chip
    
    commit 03894573f2913181ee5aae0089f333b2131f2d4b upstream.
    
    USB_DEVICE(0x0424, 0x274e) can send data before cdc_acm is ready,
    causing garbage chars on the TTY causing stray input to the shell
    and/or login prompt.
    
    Signed-off-by: Joakim Tjernlund <joakim.tjernlund@infinera.com>
    Cc: stable@vger.kernel.org
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Link: https://lore.kernel.org/r/20200605105418.22263-1-joakim.tjernlund@infinera.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21c88edd34896124086861035c5caf30e15595ca
Author: Al Cooper <alcooperx@gmail.com>
Date:   Wed Jun 24 16:59:46 2020 +0300

    xhci: Fix enumeration issue when setting max packet size for FS devices.
    
    commit a73d9d9cfc3cfceabd91fb0b0c13e4062b6dbcd7 upstream.
    
    Unable to complete the enumeration of a USB TV Tuner device.
    
    Per XHCI spec (4.6.5), the EP state field of the input context shall
    be cleared for a set address command. In the special case of an FS
    device that has "MaxPacketSize0 = 8", the Linux XHCI driver does
    not do this before evaluating the context. With an XHCI controller
    that checks the EP state field for parameter context error this
    causes a problem in cases such as the device getting reset again
    after enumeration.
    
    When that field is cleared, the problem does not occur.
    
    This was found and fixed by Sasi Kumar.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Cooper <alcooperx@gmail.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200624135949.22611-3-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f32a2f4473de1b11748bf2f07f9ba5d831eb3254
Author: Mathias Nyman <mathias.nyman@linux.intel.com>
Date:   Wed Jun 24 16:59:45 2020 +0300

    xhci: Fix incorrect EP_STATE_MASK
    
    commit dceea67058fe22075db3aed62d5cb62092be5053 upstream.
    
    EP_STATE_MASK should be 0x7 instead of 0xf
    
    xhci spec 6.2.3 shows that the EP state field in the endpoint context data
    structure consist of bits [2:0].
    The old value included a bit from the next field which fortunately is a
     RsvdZ region. So hopefully this hasn't caused too much harm
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200624135949.22611-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c8d0960d2c2e79b3f90eb7c41b4bbf2d54a973b
Author: Yick W. Tse <y_w_tse@yahoo.com.hk>
Date:   Sat Jun 13 11:40:06 2020 +0000

    ALSA: usb-audio: add quirk for Denon DCD-1500RE
    
    commit c9808bbfed3cfc911ecb60fe8e80c0c27876c657 upstream.
    
    fix error "clock source 41 is not valid, cannot use"
    
    [] New USB device found, idVendor=154e, idProduct=1002, bcdDevice= 1.00
    [] New USB device strings: Mfr=1, Product=2, SerialNumber=0
    [] Product: DCD-1500RE
    [] Manufacturer: D & M Holdings Inc.
    []
    [] clock source 41 is not valid, cannot use
    [] usbcore: registered new interface driver snd-usb-audio
    
    Signed-off-by: Yick W. Tse <y_w_tse@yahoo.com.hk>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/1373857985.210365.1592048406997@mail.yahoo.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40be538d728b0916aed9d5fa8277fa4edd5a16f6
Author: Tang Bin <tangbin@cmss.chinamobile.com>
Date:   Tue Jun 2 19:47:08 2020 +0800

    usb: host: ehci-exynos: Fix error check in exynos_ehci_probe()
    
    commit 44ed240d62736ad29943ec01e41e194b96f7c5e9 upstream.
    
    If the function platform_get_irq() failed, the negative value
    returned will not be detected here. So fix error handling in
    exynos_ehci_probe(). And when get irq failed, the function
    platform_get_irq() logs an error message, so remove redundant
    message here.
    
    Fixes: 1bcc5aa87f04 ("USB: Add initial S5P EHCI driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Zhang Shengju <zhangshengju@cmss.chinamobile.com>
    Signed-off-by: Tang Bin <tangbin@cmss.chinamobile.com>
    Link: https://lore.kernel.org/r/20200602114708.28620-1-tangbin@cmss.chinamobile.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ecd42531fe22dd2e82af2139fbfaaa6b0a9b2b9
Author: Macpaul Lin <macpaul.lin@mediatek.com>
Date:   Wed Jun 24 16:59:47 2020 +0300

    usb: host: xhci-mtk: avoid runtime suspend when removing hcd
    
    commit a24d5072e87457a14023ee1dd3fc8b1e76f899ef upstream.
    
    When runtime suspend was enabled, runtime suspend might happen
    when xhci is removing hcd. This might cause kernel panic when hcd
    has been freed but runtime pm suspend related handle need to
    reference it.
    
    Signed-off-by: Macpaul Lin <macpaul.lin@mediatek.com>
    Reviewed-by: Chunfeng Yun <chunfeng.yun@mediatek.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20200624135949.22611-4-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fda757ccd6b057c86b4cd54f44f61e473df7956d
Author: Longfang Liu <liulongfang@huawei.com>
Date:   Mon Jun 8 11:46:59 2020 +0800

    USB: ehci: reopen solution for Synopsys HC bug
    
    commit 1ddcb71a3edf0e1682b6e056158e4c4b00325f66 upstream.
    
    A Synopsys USB2.0 core used in Huawei Kunpeng920 SoC has a bug which
    might cause the host controller not issuing ping.
    
    Bug description:
    After indicating an Interrupt on Async Advance, the software uses the
    doorbell mechanism to delete the Next Link queue head of the last
    executed queue head. At this time, the host controller still references
    the removed queue head(the queue head is NULL). NULL reference causes
    the host controller to lose the USB device.
    
    Solution:
    After deleting the Next Link queue head, when has_synopsys_hc_bug set
    to 1，the software can write one of the valid queue head addresses to
    the ASYNCLISTADDR register to allow the host controller to get
    the valid queue head. in order to solve that problem, this patch set
    the flag for Huawei Kunpeng920
    
    There are detailed instructions and solutions in this patch:
    commit 2f7ac6c19997 ("USB: ehci: add workaround for Synopsys HC bug")
    
    Signed-off-by: Longfang Liu <liulongfang@huawei.com>
    Cc: stable <stable@vger.kernel.org>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/1591588019-44284-1-git-send-email-liulongfang@huawei.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4705c52ac38c0f56f6700ef245c042dbc932925
Author: Tomasz Meresiński <tomasz@meresinski.eu>
Date:   Wed Jun 3 22:33:46 2020 +0200

    usb: add USB_QUIRK_DELAY_INIT for Logitech C922
    
    commit 5d8021923e8a8cc37a421a64e27c7221f0fee33c upstream.
    
    The Logitech C922, just like other Logitech webcams,
    needs the USB_QUIRK_DELAY_INIT or it will randomly
    not respond after device connection
    
    Signed-off-by: Tomasz Meresiński <tomasz@meresinski.eu>
    Cc: stable <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20200603203347.7792-1-tomasz@meresinski.eu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73205e8011d93cbfc93cc4113d4b1451448e6afb
Author: Minas Harutyunyan <Minas.Harutyunyan@synopsys.com>
Date:   Tue Jun 9 12:28:11 2020 +0400

    usb: dwc2: Postponed gadget registration to the udc class driver
    
    commit 207324a321a866401b098cadf19e4a2dd6584622 upstream.
    
    During dwc2 driver probe, after gadget registration to the udc class
    driver, if exist any builtin function driver it immediately bound to
    dwc2 and after init host side (dwc2_hcd_init()) stucked in host mode.
    Patch postpone gadget registration after host side initialization done.
    
    Fixes: 117777b2c3bb9 ("usb: dwc2: Move gadget probe function into platform code")
    Reported-by: kbuild test robot <lkp@intel.com>
    Tested-by: Marek Vasut <marex@denx.de>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Minas Harutyunyan <hminas@synopsys.com>
    Link: https://lore.kernel.org/r/f21cb38fecc72a230b86155d94c7e60c9cb66f58.1591690938.git.hminas@synopsys.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e574f1e9d3b2d0eaedd5ff3942f41cb1354bceae
Author: Chuhong Yuan <hslester96@gmail.com>
Date:   Wed Jun 10 10:48:44 2020 +0800

    USB: ohci-sm501: Add missed iounmap() in remove
    
    commit 07c112fb09c86c0231f6ff0061a000ffe91c8eb9 upstream.
    
    This driver misses calling iounmap() in remove to undo the ioremap()
    called in probe.
    Add the missed call to fix it.
    
    Fixes: f54aab6ebcec ("usb: ohci-sm501 driver")
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Chuhong Yuan <hslester96@gmail.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20200610024844.3628408-1-hslester96@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05bae6254edb68197d773a8e3dddb1ef23ba3f8b
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Jun 16 15:52:05 2020 +0000

    net: core: reduce recursion limit value
    
    [ Upstream commit fb7861d14c8d7edac65b2fcb6e8031cb138457b2 ]
    
    In the current code, ->ndo_start_xmit() can be executed recursively only
    10 times because of stack memory.
    But, in the case of the vxlan, 10 recursion limit value results in
    a stack overflow.
    In the current code, the nested interface is limited by 8 depth.
    There is no critical reason that the recursion limitation value should
    be 10.
    So, it would be good to be the same value with the limitation value of
    nesting interface depth.
    
    Test commands:
        ip link add vxlan10 type vxlan vni 10 dstport 4789 srcport 4789 4789
        ip link set vxlan10 up
        ip a a 192.168.10.1/24 dev vxlan10
        ip n a 192.168.10.2 dev vxlan10 lladdr fc:22:33:44:55:66 nud permanent
    
        for i in {9..0}
        do
            let A=$i+1
            ip link add vxlan$i type vxlan vni $i dstport 4789 srcport 4789 4789
            ip link set vxlan$i up
            ip a a 192.168.$i.1/24 dev vxlan$i
            ip n a 192.168.$i.2 dev vxlan$i lladdr fc:22:33:44:55:66 nud permanent
            bridge fdb add fc:22:33:44:55:66 dev vxlan$A dst 192.168.$i.2 self
        done
        hping3 192.168.10.2 -2 -d 60000
    
    Splat looks like:
    [  103.814237][ T1127] =============================================================================
    [  103.871955][ T1127] BUG kmalloc-2k (Tainted: G    B            ): Padding overwritten. 0x00000000897a2e4f-0x000
    [  103.873187][ T1127] -----------------------------------------------------------------------------
    [  103.873187][ T1127]
    [  103.874252][ T1127] INFO: Slab 0x000000005cccc724 objects=5 used=5 fp=0x0000000000000000 flags=0x10000000001020
    [  103.881323][ T1127] CPU: 3 PID: 1127 Comm: hping3 Tainted: G    B             5.7.0+ #575
    [  103.882131][ T1127] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [  103.883006][ T1127] Call Trace:
    [  103.883324][ T1127]  dump_stack+0x96/0xdb
    [  103.883716][ T1127]  slab_err+0xad/0xd0
    [  103.884106][ T1127]  ? _raw_spin_unlock+0x1f/0x30
    [  103.884620][ T1127]  ? get_partial_node.isra.78+0x140/0x360
    [  103.885214][ T1127]  slab_pad_check.part.53+0xf7/0x160
    [  103.885769][ T1127]  ? pskb_expand_head+0x110/0xe10
    [  103.886316][ T1127]  check_slab+0x97/0xb0
    [  103.886763][ T1127]  alloc_debug_processing+0x84/0x1a0
    [  103.887308][ T1127]  ___slab_alloc+0x5a5/0x630
    [  103.887765][ T1127]  ? pskb_expand_head+0x110/0xe10
    [  103.888265][ T1127]  ? lock_downgrade+0x730/0x730
    [  103.888762][ T1127]  ? pskb_expand_head+0x110/0xe10
    [  103.889244][ T1127]  ? __slab_alloc+0x3e/0x80
    [  103.889675][ T1127]  __slab_alloc+0x3e/0x80
    [  103.890108][ T1127]  __kmalloc_node_track_caller+0xc7/0x420
    [ ... ]
    
    Fixes: 11a766ce915f ("net: Increase xmit RECURSION_LIMIT to 10.")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22dd1a1d3e0cdaa6d1cf546374aa77ba11a11d4b
Author: Tariq Toukan <tariqt@mellanox.com>
Date:   Mon Jun 22 23:26:04 2020 +0300

    net: Do not clear the sock TX queue in sk_set_socket()
    
    [ Upstream commit 41b14fb8724d5a4b382a63cb4a1a61880347ccb8 ]
    
    Clearing the sock TX queue in sk_set_socket() might cause unexpected
    out-of-order transmit when called from sock_orphan(), as outstanding
    packets can pick a different TX queue and bypass the ones already queued.
    
    This is undesired in general. More specifically, it breaks the in-order
    scheduling property guarantee for device-offloaded TLS sockets.
    
    Remove the call to sk_tx_queue_clear() in sk_set_socket(), and add it
    explicitly only where needed.
    
    Fixes: e022f0b4a03f ("net: Introduce sk_tx_queue_mapping")
    Signed-off-by: Tariq Toukan <tariqt@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83a8922a63546dda80b1f9b53da6d8aee34b915c
Author: guodeqing <geffrey.guo@huawei.com>
Date:   Wed Jun 17 10:07:16 2020 +0800

    net: Fix the arp error in some cases
    
    [ Upstream commit 5eea3a63ff4aba6a26002e657a6d21934b7e2b96 ]
    
    ie.,
    $ ifconfig eth0 6.6.6.6 netmask 255.255.255.0
    
    $ ip rule add from 6.6.6.6 table 6666
    
    $ ip route add 9.9.9.9 via 6.6.6.6
    
    $ ping -I 6.6.6.6 9.9.9.9
    PING 9.9.9.9 (9.9.9.9) from 6.6.6.6 : 56(84) bytes of data.
    
    3 packets transmitted, 0 received, 100% packet loss, time 2079ms
    
    $ arp
    Address     HWtype  HWaddress           Flags Mask            Iface
    6.6.6.6             (incomplete)                              eth0
    
    The arp request address is error, this is because fib_table_lookup in
    fib_check_nh lookup the destnation 9.9.9.9 nexthop, the scope of
    the fib result is RT_SCOPE_LINK,the correct scope is RT_SCOPE_HOST.
    Here I add a check of whether this is RT_TABLE_MAIN to solve this problem.
    
    Fixes: 3bfd847203c6 ("net: Use passed in table for nexthop lookups")
    Signed-off-by: guodeqing <geffrey.guo@huawei.com>
    Reviewed-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4600f09aad25a43ca5cc7c2466880773751bb0f1
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Jun 16 16:04:00 2020 +0000

    ip6_gre: fix use-after-free in ip6gre_tunnel_lookup()
    
    [ Upstream commit dafabb6590cb15f300b77c095d50312e2c7c8e0f ]
    
    In the datapath, the ip6gre_tunnel_lookup() is used and it internally uses
    fallback tunnel device pointer, which is fb_tunnel_dev.
    This pointer variable should be set to NULL when a fb interface is deleted.
    But there is no routine to set fb_tunnel_dev pointer to NULL.
    So, this pointer will be still used after interface is deleted and
    it eventually results in the use-after-free problem.
    
    Test commands:
        ip netns add A
        ip netns add B
        ip link add eth0 type veth peer name eth1
        ip link set eth0 netns A
        ip link set eth1 netns B
    
        ip netns exec A ip link set lo up
        ip netns exec A ip link set eth0 up
        ip netns exec A ip link add ip6gre1 type ip6gre local fc:0::1 \
                remote fc:0::2
        ip netns exec A ip -6 a a fc:100::1/64 dev ip6gre1
        ip netns exec A ip link set ip6gre1 up
        ip netns exec A ip -6 a a fc:0::1/64 dev eth0
        ip netns exec A ip link set ip6gre0 up
    
        ip netns exec B ip link set lo up
        ip netns exec B ip link set eth1 up
        ip netns exec B ip link add ip6gre1 type ip6gre local fc:0::2 \
                remote fc:0::1
        ip netns exec B ip -6 a a fc:100::2/64 dev ip6gre1
        ip netns exec B ip link set ip6gre1 up
        ip netns exec B ip -6 a a fc:0::2/64 dev eth1
        ip netns exec B ip link set ip6gre0 up
        ip netns exec A ping fc:100::2 -s 60000 &
        ip netns del B
    
    Splat looks like:
    [   73.087285][    C1] BUG: KASAN: use-after-free in ip6gre_tunnel_lookup+0x1064/0x13f0 [ip6_gre]
    [   73.088361][    C1] Read of size 4 at addr ffff888040559218 by task ping/1429
    [   73.089317][    C1]
    [   73.089638][    C1] CPU: 1 PID: 1429 Comm: ping Not tainted 5.7.0+ #602
    [   73.090531][    C1] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   73.091725][    C1] Call Trace:
    [   73.092160][    C1]  <IRQ>
    [   73.092556][    C1]  dump_stack+0x96/0xdb
    [   73.093122][    C1]  print_address_description.constprop.6+0x2cc/0x450
    [   73.094016][    C1]  ? ip6gre_tunnel_lookup+0x1064/0x13f0 [ip6_gre]
    [   73.094894][    C1]  ? ip6gre_tunnel_lookup+0x1064/0x13f0 [ip6_gre]
    [   73.095767][    C1]  ? ip6gre_tunnel_lookup+0x1064/0x13f0 [ip6_gre]
    [   73.096619][    C1]  kasan_report+0x154/0x190
    [   73.097209][    C1]  ? ip6gre_tunnel_lookup+0x1064/0x13f0 [ip6_gre]
    [   73.097989][    C1]  ip6gre_tunnel_lookup+0x1064/0x13f0 [ip6_gre]
    [   73.098750][    C1]  ? gre_del_protocol+0x60/0x60 [gre]
    [   73.099500][    C1]  gre_rcv+0x1c5/0x1450 [ip6_gre]
    [   73.100199][    C1]  ? ip6gre_header+0xf00/0xf00 [ip6_gre]
    [   73.100985][    C1]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [   73.101830][    C1]  ? ip6_input_finish+0x5/0xf0
    [   73.102483][    C1]  ip6_protocol_deliver_rcu+0xcbb/0x1510
    [   73.103296][    C1]  ip6_input_finish+0x5b/0xf0
    [   73.103920][    C1]  ip6_input+0xcd/0x2c0
    [   73.104473][    C1]  ? ip6_input_finish+0xf0/0xf0
    [   73.105115][    C1]  ? rcu_read_lock_held+0x90/0xa0
    [   73.105783][    C1]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [   73.106548][    C1]  ipv6_rcv+0x1f1/0x300
    [ ... ]
    
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Fixes: c12b395a4664 ("gre: Support GRE over IPv6")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7c792a7564c0a57f28bffe51c9a80e469bf3a4d
Author: Neal Cardwell <ncardwell@google.com>
Date:   Wed Jun 24 12:42:02 2020 -0400

    tcp_cubic: fix spurious HYSTART_DELAY exit upon drop in min RTT
    
    [ Upstream commit b344579ca8478598937215f7005d6c7b84d28aee ]
    
    Mirja Kuehlewind reported a bug in Linux TCP CUBIC Hystart, where
    Hystart HYSTART_DELAY mechanism can exit Slow Start spuriously on an
    ACK when the minimum rtt of a connection goes down. From inspection it
    is clear from the existing code that this could happen in an example
    like the following:
    
    o The first 8 RTT samples in a round trip are 150ms, resulting in a
      curr_rtt of 150ms and a delay_min of 150ms.
    
    o The 9th RTT sample is 100ms. The curr_rtt does not change after the
      first 8 samples, so curr_rtt remains 150ms. But delay_min can be
      lowered at any time, so delay_min falls to 100ms. The code executes
      the HYSTART_DELAY comparison between curr_rtt of 150ms and delay_min
      of 100ms, and the curr_rtt is declared far enough above delay_min to
      force a (spurious) exit of Slow start.
    
    The fix here is simple: allow every RTT sample in a round trip to
    lower the curr_rtt.
    
    Fixes: ae27e98a5152 ("[TCP] CUBIC v2.3")
    Reported-by: Mirja Kuehlewind <mirja.kuehlewind@ericsson.com>
    Signed-off-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Soheil Hassas Yeganeh <soheil@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3bfe075f2ad4ff3c3b7497f5adebe1540ff6c533
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Tue Jun 16 16:51:51 2020 +0000

    ip_tunnel: fix use-after-free in ip_tunnel_lookup()
    
    [ Upstream commit ba61539c6ae57f4146284a5cb4f7b7ed8d42bf45 ]
    
    In the datapath, the ip_tunnel_lookup() is used and it internally uses
    fallback tunnel device pointer, which is fb_tunnel_dev.
    This pointer variable should be set to NULL when a fb interface is deleted.
    But there is no routine to set fb_tunnel_dev pointer to NULL.
    So, this pointer will be still used after interface is deleted and
    it eventually results in the use-after-free problem.
    
    Test commands:
        ip netns add A
        ip netns add B
        ip link add eth0 type veth peer name eth1
        ip link set eth0 netns A
        ip link set eth1 netns B
    
        ip netns exec A ip link set lo up
        ip netns exec A ip link set eth0 up
        ip netns exec A ip link add gre1 type gre local 10.0.0.1 \
                remote 10.0.0.2
        ip netns exec A ip link set gre1 up
        ip netns exec A ip a a 10.0.100.1/24 dev gre1
        ip netns exec A ip a a 10.0.0.1/24 dev eth0
    
        ip netns exec B ip link set lo up
        ip netns exec B ip link set eth1 up
        ip netns exec B ip link add gre1 type gre local 10.0.0.2 \
                remote 10.0.0.1
        ip netns exec B ip link set gre1 up
        ip netns exec B ip a a 10.0.100.2/24 dev gre1
        ip netns exec B ip a a 10.0.0.2/24 dev eth1
        ip netns exec A hping3 10.0.100.2 -2 --flood -d 60000 &
        ip netns del B
    
    Splat looks like:
    [   77.793450][    C3] ==================================================================
    [   77.794702][    C3] BUG: KASAN: use-after-free in ip_tunnel_lookup+0xcc4/0xf30
    [   77.795573][    C3] Read of size 4 at addr ffff888060bd9c84 by task hping3/2905
    [   77.796398][    C3]
    [   77.796664][    C3] CPU: 3 PID: 2905 Comm: hping3 Not tainted 5.8.0-rc1+ #616
    [   77.797474][    C3] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   77.798453][    C3] Call Trace:
    [   77.798815][    C3]  <IRQ>
    [   77.799142][    C3]  dump_stack+0x9d/0xdb
    [   77.799605][    C3]  print_address_description.constprop.7+0x2cc/0x450
    [   77.800365][    C3]  ? ip_tunnel_lookup+0xcc4/0xf30
    [   77.800908][    C3]  ? ip_tunnel_lookup+0xcc4/0xf30
    [   77.801517][    C3]  ? ip_tunnel_lookup+0xcc4/0xf30
    [   77.802145][    C3]  kasan_report+0x154/0x190
    [   77.802821][    C3]  ? ip_tunnel_lookup+0xcc4/0xf30
    [   77.803503][    C3]  ip_tunnel_lookup+0xcc4/0xf30
    [   77.804165][    C3]  __ipgre_rcv+0x1ab/0xaa0 [ip_gre]
    [   77.804862][    C3]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [   77.805621][    C3]  gre_rcv+0x304/0x1910 [ip_gre]
    [   77.806293][    C3]  ? lock_acquire+0x1a9/0x870
    [   77.806925][    C3]  ? gre_rcv+0xfe/0x354 [gre]
    [   77.807559][    C3]  ? erspan_xmit+0x2e60/0x2e60 [ip_gre]
    [   77.808305][    C3]  ? rcu_read_lock_sched_held+0xc0/0xc0
    [   77.809032][    C3]  ? rcu_read_lock_held+0x90/0xa0
    [   77.809713][    C3]  gre_rcv+0x1b8/0x354 [gre]
    [ ... ]
    
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Fixes: c54419321455 ("GRE: Refactor GRE tunneling code.")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 294f7f910cade6335aa2df8a3140e5b392f7bf54
Author: David Christensen <drc@linux.vnet.ibm.com>
Date:   Wed Jun 17 11:51:17 2020 -0700

    tg3: driver sleeps indefinitely when EEH errors exceed eeh_max_freezes
    
    [ Upstream commit 3a2656a211caf35e56afc9425e6e518fa52f7fbc ]
    
    The driver function tg3_io_error_detected() calls napi_disable twice,
    without an intervening napi_enable, when the number of EEH errors exceeds
    eeh_max_freezes, resulting in an indefinite sleep while holding rtnl_lock.
    
    Add check for pcierr_recovery which skips code already executed for the
    "Frozen" state.
    
    Signed-off-by: David Christensen <drc@linux.vnet.ibm.com>
    Reviewed-by: Michael Chan <michael.chan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f308128a58b2f4d1f62b2f6a4aa2fc037ddeff4
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Jun 15 20:37:07 2020 -0700

    tcp: grow window for OOO packets only for SACK flows
    
    [ Upstream commit 662051215c758ae8545451628816204ed6cd372d ]
    
    Back in 2013, we made a change that broke fast retransmit
    for non SACK flows.
    
    Indeed, for these flows, a sender needs to receive three duplicate
    ACK before starting fast retransmit. Sending ACK with different
    receive window do not count.
    
    Even if enabling SACK is strongly recommended these days,
    there still are some cases where it has to be disabled.
    
    Not increasing the window seems better than having to
    rely on RTO.
    
    After the fix, following packetdrill test gives :
    
    // Initialize connection
        0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
       +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
       +0 bind(3, ..., ...) = 0
       +0 listen(3, 1) = 0
    
       +0 < S 0:0(0) win 32792 <mss 1000,nop,wscale 7>
       +0 > S. 0:0(0) ack 1 <mss 1460,nop,wscale 8>
       +0 < . 1:1(0) ack 1 win 514
    
       +0 accept(3, ..., ...) = 4
    
       +0 < . 1:1001(1000) ack 1 win 514
    // Quick ack
       +0 > . 1:1(0) ack 1001 win 264
    
       +0 < . 2001:3001(1000) ack 1 win 514
    // DUPACK : Normally we should not change the window
       +0 > . 1:1(0) ack 1001 win 264
    
       +0 < . 3001:4001(1000) ack 1 win 514
    // DUPACK : Normally we should not change the window
       +0 > . 1:1(0) ack 1001 win 264
    
       +0 < . 4001:5001(1000) ack 1 win 514
    // DUPACK : Normally we should not change the window
        +0 > . 1:1(0) ack 1001 win 264
    
       +0 < . 1001:2001(1000) ack 1 win 514
    // Hole is repaired.
       +0 > . 1:1(0) ack 5001 win 272
    
    Fixes: 4e4f1fc22681 ("tcp: properly increase rcv_ssthresh for ofo packets")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Venkat Venkatsubra <venkat.x.venkatsubra@oracle.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 422a0cdf2bb414140185a4e2423c1fa9c1797d03
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Wed Jun 24 17:34:18 2020 -0300

    sctp: Don't advertise IPv4 addresses if ipv6only is set on the socket
    
    [ Upstream commit 471e39df96b9a4c4ba88a2da9e25a126624d7a9c ]
    
    If a socket is set ipv6only, it will still send IPv4 addresses in the
    INIT and INIT_ACK packets. This potentially misleads the peer into using
    them, which then would cause association termination.
    
    The fix is to not add IPv4 addresses to ipv6only sockets.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Tested-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e6f5d6de63453f805fb0fab21cf56fd5e98749a
Author: David Howells <dhowells@redhat.com>
Date:   Fri Jun 19 23:38:16 2020 +0100

    rxrpc: Fix notification call on completion of discarded calls
    
    [ Upstream commit 0041cd5a50442db6e456b145892a0eaf2dff061f ]
    
    When preallocated service calls are being discarded, they're passed to
    ->discard_new_call() to have the caller clean up any attached higher-layer
    preallocated pieces before being marked completed.  However, the act of
    marking them completed now invokes the call's notification function - which
    causes a problem because that function might assume that the previously
    freed pieces of memory are still there.
    
    Fix this by setting a dummy notification function on the socket after
    calling ->discard_new_call().
    
    This results in the following kasan message when the kafs module is
    removed.
    
    ==================================================================
    BUG: KASAN: use-after-free in afs_wake_up_async_call+0x6aa/0x770 fs/afs/rxrpc.c:707
    Write of size 1 at addr ffff8880946c39e4 by task kworker/u4:1/21
    
    CPU: 0 PID: 21 Comm: kworker/u4:1 Not tainted 5.8.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: netns cleanup_net
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x18f/0x20d lib/dump_stack.c:118
     print_address_description.constprop.0.cold+0xd3/0x413 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report.cold+0x1f/0x37 mm/kasan/report.c:530
     afs_wake_up_async_call+0x6aa/0x770 fs/afs/rxrpc.c:707
     rxrpc_notify_socket+0x1db/0x5d0 net/rxrpc/recvmsg.c:40
     __rxrpc_set_call_completion.part.0+0x172/0x410 net/rxrpc/recvmsg.c:76
     __rxrpc_call_completed net/rxrpc/recvmsg.c:112 [inline]
     rxrpc_call_completed+0xca/0xf0 net/rxrpc/recvmsg.c:111
     rxrpc_discard_prealloc+0x781/0xab0 net/rxrpc/call_accept.c:233
     rxrpc_listen+0x147/0x360 net/rxrpc/af_rxrpc.c:245
     afs_close_socket+0x95/0x320 fs/afs/rxrpc.c:110
     afs_net_exit+0x1bc/0x310 fs/afs/main.c:155
     ops_exit_list.isra.0+0xa8/0x150 net/core/net_namespace.c:186
     cleanup_net+0x511/0xa50 net/core/net_namespace.c:603
     process_one_work+0x965/0x1690 kernel/workqueue.c:2269
     worker_thread+0x96/0xe10 kernel/workqueue.c:2415
     kthread+0x3b5/0x4a0 kernel/kthread.c:291
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Allocated by task 6820:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc mm/kasan/common.c:494 [inline]
     __kasan_kmalloc.constprop.0+0xbf/0xd0 mm/kasan/common.c:467
     kmem_cache_alloc_trace+0x153/0x7d0 mm/slab.c:3551
     kmalloc include/linux/slab.h:555 [inline]
     kzalloc include/linux/slab.h:669 [inline]
     afs_alloc_call+0x55/0x630 fs/afs/rxrpc.c:141
     afs_charge_preallocation+0xe9/0x2d0 fs/afs/rxrpc.c:757
     afs_open_socket+0x292/0x360 fs/afs/rxrpc.c:92
     afs_net_init+0xa6c/0xe30 fs/afs/main.c:125
     ops_init+0xaf/0x420 net/core/net_namespace.c:151
     setup_net+0x2de/0x860 net/core/net_namespace.c:341
     copy_net_ns+0x293/0x590 net/core/net_namespace.c:482
     create_new_namespaces+0x3fb/0xb30 kernel/nsproxy.c:110
     unshare_nsproxy_namespaces+0xbd/0x1f0 kernel/nsproxy.c:231
     ksys_unshare+0x43d/0x8e0 kernel/fork.c:2983
     __do_sys_unshare kernel/fork.c:3051 [inline]
     __se_sys_unshare kernel/fork.c:3049 [inline]
     __x64_sys_unshare+0x2d/0x40 kernel/fork.c:3049
     do_syscall_64+0x60/0xe0 arch/x86/entry/common.c:359
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Freed by task 21:
     save_stack+0x1b/0x40 mm/kasan/common.c:48
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0xf7/0x140 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x109/0x2b0 mm/slab.c:3757
     afs_put_call+0x585/0xa40 fs/afs/rxrpc.c:190
     rxrpc_discard_prealloc+0x764/0xab0 net/rxrpc/call_accept.c:230
     rxrpc_listen+0x147/0x360 net/rxrpc/af_rxrpc.c:245
     afs_close_socket+0x95/0x320 fs/afs/rxrpc.c:110
     afs_net_exit+0x1bc/0x310 fs/afs/main.c:155
     ops_exit_list.isra.0+0xa8/0x150 net/core/net_namespace.c:186
     cleanup_net+0x511/0xa50 net/core/net_namespace.c:603
     process_one_work+0x965/0x1690 kernel/workqueue.c:2269
     worker_thread+0x96/0xe10 kernel/workqueue.c:2415
     kthread+0x3b5/0x4a0 kernel/kthread.c:291
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    The buggy address belongs to the object at ffff8880946c3800
     which belongs to the cache kmalloc-1k of size 1024
    The buggy address is located 484 bytes inside of
     1024-byte region [ffff8880946c3800, ffff8880946c3c00)
    The buggy address belongs to the page:
    page:ffffea000251b0c0 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0
    flags: 0xfffe0000000200(slab)
    raw: 00fffe0000000200 ffffea0002546508 ffffea00024fa248 ffff8880aa000c40
    raw: 0000000000000000 ffff8880946c3000 0000000100000002 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8880946c3880: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880946c3900: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8880946c3980: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
                                                           ^
     ffff8880946c3a00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff8880946c3a80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
    
    Reported-by: syzbot+d3eccef36ddbd02713e9@syzkaller.appspotmail.com
    Fixes: 5ac0d62226a0 ("rxrpc: Fix missing notification")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb8d6a7ec59621654c4e9b853910c91a39cc4a14
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Fri Jun 12 15:27:55 2020 -0500

    rocker: fix incorrect error handling in dma_rings_init
    
    [ Upstream commit 58d0c864e1a759a15c9df78f50ea5a5c32b3989e ]
    
    In rocker_dma_rings_init, the goto blocks in case of errors
    caused by the functions rocker_dma_cmd_ring_waits_alloc() and
    rocker_dma_ring_create() are incorrect. The patch fixes the
    order consistent with cleanup in rocker_dma_rings_fini().
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42825485ba24638d94f4bd43ad32325de654c1ec
Author: Jeremy Kerr <jk@ozlabs.org>
Date:   Mon Jun 15 10:54:56 2020 +0800

    net: usb: ax88179_178a: fix packet alignment padding
    
    [ Upstream commit e869e7a17798d85829fa7d4f9bbe1eebd4b2d3f6 ]
    
    Using a AX88179 device (0b95:1790), I see two bytes of appended data on
    every RX packet. For example, this 48-byte ping, using 0xff as a
    payload byte:
    
      04:20:22.528472 IP 192.168.1.1 > 192.168.1.2: ICMP echo request, id 2447, seq 1, length 64
            0x0000:  000a cd35 ea50 000a cd35 ea4f 0800 4500
            0x0010:  0054 c116 4000 4001 f63e c0a8 0101 c0a8
            0x0020:  0102 0800 b633 098f 0001 87ea cd5e 0000
            0x0030:  0000 dcf2 0600 0000 0000 ffff ffff ffff
            0x0040:  ffff ffff ffff ffff ffff ffff ffff ffff
            0x0050:  ffff ffff ffff ffff ffff ffff ffff ffff
            0x0060:  ffff 961f
    
    Those last two bytes - 96 1f - aren't part of the original packet.
    
    In the ax88179 RX path, the usbnet rx_fixup function trims a 2-byte
    'alignment pseudo header' from the start of the packet, and sets the
    length from a per-packet field populated by hardware. It looks like that
    length field *includes* the 2-byte header; the current driver assumes
    that it's excluded.
    
    This change trims the 2-byte alignment header after we've set the packet
    length, so the resulting packet length is correct. While we're moving
    the comment around, this also fixes the spelling of 'pseudo'.
    
    Signed-off-by: Jeremy Kerr <jk@ozlabs.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 870fb4d21c2335c1ecfc09327f967460c7e5ea7d
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Tue Jun 16 09:39:21 2020 +0000

    net: fix memleak in register_netdevice()
    
    [ Upstream commit 814152a89ed52c722ab92e9fbabcac3cb8a39245 ]
    
    I got a memleak report when doing some fuzz test:
    
    unreferenced object 0xffff888112584000 (size 13599):
      comm "ip", pid 3048, jiffies 4294911734 (age 343.491s)
      hex dump (first 32 bytes):
        74 61 70 30 00 00 00 00 00 00 00 00 00 00 00 00  tap0............
        00 ee d9 19 81 88 ff ff 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000002f60ba65>] __kmalloc_node+0x309/0x3a0
        [<0000000075b211ec>] kvmalloc_node+0x7f/0xc0
        [<00000000d3a97396>] alloc_netdev_mqs+0x76/0xfc0
        [<00000000609c3655>] __tun_chr_ioctl+0x1456/0x3d70
        [<000000001127ca24>] ksys_ioctl+0xe5/0x130
        [<00000000b7d5e66a>] __x64_sys_ioctl+0x6f/0xb0
        [<00000000e1023498>] do_syscall_64+0x56/0xa0
        [<000000009ec0eb12>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    unreferenced object 0xffff888111845cc0 (size 8):
      comm "ip", pid 3048, jiffies 4294911734 (age 343.491s)
      hex dump (first 8 bytes):
        74 61 70 30 00 88 ff ff                          tap0....
      backtrace:
        [<000000004c159777>] kstrdup+0x35/0x70
        [<00000000d8b496ad>] kstrdup_const+0x3d/0x50
        [<00000000494e884a>] kvasprintf_const+0xf1/0x180
        [<0000000097880a2b>] kobject_set_name_vargs+0x56/0x140
        [<000000008fbdfc7b>] dev_set_name+0xab/0xe0
        [<000000005b99e3b4>] netdev_register_kobject+0xc0/0x390
        [<00000000602704fe>] register_netdevice+0xb61/0x1250
        [<000000002b7ca244>] __tun_chr_ioctl+0x1cd1/0x3d70
        [<000000001127ca24>] ksys_ioctl+0xe5/0x130
        [<00000000b7d5e66a>] __x64_sys_ioctl+0x6f/0xb0
        [<00000000e1023498>] do_syscall_64+0x56/0xa0
        [<000000009ec0eb12>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    unreferenced object 0xffff88811886d800 (size 512):
      comm "ip", pid 3048, jiffies 4294911734 (age 343.491s)
      hex dump (first 32 bytes):
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
        ff ff ff ff ff ff ff ff c0 66 3d a3 ff ff ff ff  .........f=.....
      backtrace:
        [<0000000050315800>] device_add+0x61e/0x1950
        [<0000000021008dfb>] netdev_register_kobject+0x17e/0x390
        [<00000000602704fe>] register_netdevice+0xb61/0x1250
        [<000000002b7ca244>] __tun_chr_ioctl+0x1cd1/0x3d70
        [<000000001127ca24>] ksys_ioctl+0xe5/0x130
        [<00000000b7d5e66a>] __x64_sys_ioctl+0x6f/0xb0
        [<00000000e1023498>] do_syscall_64+0x56/0xa0
        [<000000009ec0eb12>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    If call_netdevice_notifiers() failed, then rollback_registered()
    calls netdev_unregister_kobject() which holds the kobject. The
    reference cannot be put because the netdev won't be add to todo
    list, so it will leads a memleak, we need put the reference to
    avoid memleak.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ed6ea50e569d10583ed27ca79b35bc32bb07f98
Author: Thomas Martitz <t.martitz@avm.de>
Date:   Thu Jun 25 14:26:03 2020 +0200

    net: bridge: enfore alignment for ethernet address
    
    [ Upstream commit db7202dec92e6caa2706c21d6fc359af318bde2e ]
    
    The eth_addr member is passed to ether_addr functions that require
    2-byte alignment, therefore the member must be properly aligned
    to avoid unaligned accesses.
    
    The problem is in place since the initial merge of multicast to unicast:
    commit 6db6f0eae6052b70885562e1733896647ec1d807 bridge: multicast to unicast
    
    Fixes: 6db6f0eae605 ("bridge: multicast to unicast")
    Cc: Roopa Prabhu <roopa@cumulusnetworks.com>
    Cc: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Felix Fietkau <nbd@nbd.name>
    Cc: stable@vger.kernel.org
    Signed-off-by: Thomas Martitz <t.martitz@avm.de>
    Acked-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5533df2afd78b3783507024b09d04ca7c22a091a
Author: Wang Hai <wanghai38@huawei.com>
Date:   Thu Jun 11 15:57:50 2020 +0800

    mld: fix memory leak in ipv6_mc_destroy_dev()
    
    [ Upstream commit ea2fce88d2fd678ed9d45354ff49b73f1d5615dd ]
    
    Commit a84d01647989 ("mld: fix memory leak in mld_del_delrec()") fixed
    the memory leak of MLD, but missing the ipv6_mc_destroy_dev() path, in
    which mca_sources are leaked after ma_put().
    
    Using ip6_mc_clear_src() to take care of the missing free.
    
    BUG: memory leak
    unreferenced object 0xffff8881113d3180 (size 64):
      comm "syz-executor071", pid 389, jiffies 4294887985 (age 17.943s)
      hex dump (first 32 bytes):
        00 00 00 00 00 00 00 00 ff 02 00 00 00 00 00 00  ................
        00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000002cbc483c>] kmalloc include/linux/slab.h:555 [inline]
        [<000000002cbc483c>] kzalloc include/linux/slab.h:669 [inline]
        [<000000002cbc483c>] ip6_mc_add1_src net/ipv6/mcast.c:2237 [inline]
        [<000000002cbc483c>] ip6_mc_add_src+0x7f5/0xbb0 net/ipv6/mcast.c:2357
        [<0000000058b8b1ff>] ip6_mc_source+0xe0c/0x1530 net/ipv6/mcast.c:449
        [<000000000bfc4fb5>] do_ipv6_setsockopt.isra.12+0x1b2c/0x3b30 net/ipv6/ipv6_sockglue.c:754
        [<00000000e4e7a722>] ipv6_setsockopt+0xda/0x150 net/ipv6/ipv6_sockglue.c:950
        [<0000000029260d9a>] rawv6_setsockopt+0x45/0x100 net/ipv6/raw.c:1081
        [<000000005c1b46f9>] __sys_setsockopt+0x131/0x210 net/socket.c:2132
        [<000000008491f7db>] __do_sys_setsockopt net/socket.c:2148 [inline]
        [<000000008491f7db>] __se_sys_setsockopt net/socket.c:2145 [inline]
        [<000000008491f7db>] __x64_sys_setsockopt+0xba/0x150 net/socket.c:2145
        [<00000000c7bc11c5>] do_syscall_64+0xa1/0x530 arch/x86/entry/common.c:295
        [<000000005fb7a3f3>] entry_SYSCALL_64_after_hwframe+0x49/0xb3
    
    Fixes: 1666d49e1d41 ("mld: do not remove mld souce list info when set link down")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Acked-by: Hangbin Liu <liuhangbin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59255b5b98b00dccaa0906fb17be7a82d1677487
Author: Thomas Falcon <tlfalcon@linux.ibm.com>
Date:   Thu Jun 18 10:43:46 2020 -0500

    ibmveth: Fix max MTU limit
    
    [ Upstream commit 5948378b26d89f8aa5eac37629dbd0616ce8d7a7 ]
    
    The max MTU limit defined for ibmveth is not accounting for
    virtual ethernet buffer overhead, which is twenty-two additional
    bytes set aside for the ethernet header and eight additional bytes
    of an opaque handle reserved for use by the hypervisor. Update the
    max MTU to reflect this overhead.
    
    Fixes: d894be57ca92 ("ethernet: use net core MTU range checking in more drivers")
    Fixes: 110447f8269a ("ethernet: fix min/max MTU typos")
    Signed-off-by: Thomas Falcon <tlfalcon@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ddb7f51f3b05461b0bb7e3c76d043ba91453b6a
Author: Jann Horn <jannh@google.com>
Date:   Sat Sep 29 03:49:26 2018 +0200

    apparmor: don't try to replace stale label in ptraceme check
    
    [ Upstream commit ca3fde5214e1d24f78269b337d3f22afd6bf445e ]
    
    begin_current_label_crit_section() must run in sleepable context because
    when label_is_stale() is true, aa_replace_current_label() runs, which uses
    prepare_creds(), which can sleep.
    
    Until now, the ptraceme access check (which runs with tasklist_lock held)
    violated this rule.
    
    Fixes: b2d09ae449ced ("apparmor: move ptrace checks to using labels")
    Reported-by: Cyrill Gorcunov <gorcunov@gmail.com>
    Reported-by: kernel test robot <rong.a.chen@intel.com>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e506836045d50c17aaa805db374e85285f5be8a8
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Jun 6 23:44:24 2020 -0400

    fix a braino in "sparc32: fix register window handling in genregs32_[gs]et()"
    
    [ Upstream commit 9d964e1b82d8182184153b70174f445ea616f053 ]
    
    lost npc in PTRACE_SETREGSET, breaking PTRACE_SETREGS as well
    
    Fixes: cf51e129b968 "sparc32: fix register window handling in genregs32_[gs]et()"
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e64a57fd9cb6914f286fdf3b55b028dab6d82c7e
Author: Valentin Longchamp <valentin@longchamp.me>
Date:   Tue Jun 9 22:11:54 2020 +0200

    net: sched: export __netdev_watchdog_up()
    
    [ Upstream commit 1a3db27ad9a72d033235b9673653962c02e3486e ]
    
    Since the quiesce/activate rework, __netdev_watchdog_up() is directly
    called in the ucc_geth driver.
    
    Unfortunately, this function is not available for modules and thus
    ucc_geth cannot be built as a module anymore. Fix it by exporting
    __netdev_watchdog_up().
    
    Since the commit introducing the regression was backported to stable
    branches, this one should ideally be as well.
    
    Fixes: 79dde73cf9bc ("net/ethernet/freescale: rework quiesce/activate for ucc_geth")
    Signed-off-by: Valentin Longchamp <valentin@longchamp.me>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 15eaae743f20d9a616c105de50ddc65c12a4ca61
Author: yu kuai <yukuai3@huawei.com>
Date:   Mon Jun 1 20:38:56 2020 +0800

    block/bio-integrity: don't free 'buf' if bio_integrity_add_page() failed
    
    commit a75ca9303175d36af93c0937dd9b1a6422908b8d upstream.
    
    commit e7bf90e5afe3 ("block/bio-integrity: fix a memory leak bug") added
    a kfree() for 'buf' if bio_integrity_add_page() returns '0'. However,
    the object will be freed in bio_integrity_free() since 'bio->bi_opf' and
    'bio->bi_integrity' were set previousy in bio_integrity_alloc().
    
    Fixes: commit e7bf90e5afe3 ("block/bio-integrity: fix a memory leak bug")
    Signed-off-by: yu kuai <yukuai3@huawei.com>
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Reviewed-by: Bob Liu <bob.liu@oracle.com>
    Acked-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad5e0be2948357323717c2077ec7055b1a78a750
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 28 14:57:47 2020 -0700

    net: be more gentle about silly gso requests coming from user
    
    commit 7c6d2ecbda83150b2036a2b36b21381ad4667762 upstream.
    
    Recent change in virtio_net_hdr_to_skb() broke some packetdrill tests.
    
    When --mss=XXX option is set, packetdrill always provide gso_type & gso_size
    for its inbound packets, regardless of packet size.
    
            if (packet->tcp && packet->mss) {
                    if (packet->ipv4)
                            gso.gso_type = VIRTIO_NET_HDR_GSO_TCPV4;
                    else
                            gso.gso_type = VIRTIO_NET_HDR_GSO_TCPV6;
                    gso.gso_size = packet->mss;
            }
    
    Since many other programs could do the same, relax virtio_net_hdr_to_skb()
    to no longer return an error, but instead ignore gso settings.
    
    This keeps Willem intent to make sure no malicious packet could
    reach gso stack.
    
    Note that TCP stack has a special logic in tcp_set_skb_tso_segs()
    to clear gso_size for small packets.
    
    Fixes: 6dd912f82680 ("net: check untrusted gso_size at kernel entry")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Willem de Bruijn <willemb@google.com>
    Acked-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f3355c6448912f9618a0c41003a68257a92132e
Author: Martin Wilck <mwilck@suse.com>
Date:   Mon Nov 27 23:47:34 2017 +0100

    scsi: scsi_devinfo: handle non-terminated strings
    
    commit ba69ead9e9e9bb3cec5faf03526c36764ac8942a upstream.
    
    devinfo->vendor and devinfo->model aren't necessarily
    zero-terminated.
    
    Fixes: b8018b973c7c "scsi_devinfo: fixup string compare"
    Signed-off-by: Martin Wilck <mwilck@suse.com>
    Reviewed-by: Bart Van Assche <bart.vanassche@wdc.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 792679ad1abbd3a77a22d3434527a6a59efc9b7f
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 11:49:05 2023 +0500

    Correct toolchain's path for my machine

commit 9d027c4bf3015cb6b7f1bd7e247fd848de35e25f
Author: ahnet-69 <syedmusicrealise@gmail.com>
Date:   Sat Jul 15 11:46:45 2023 +0500

    Add kernelsu

commit d2c9141b4cceaf4dc10efc6126097c030739da06
Author: captaincookie200 <57623523+captaincookie200@users.noreply.github.com>
Date:   Tue Apr 25 19:05:51 2023 +0500

    revert build_kernel.sh changes due to wifi commit
